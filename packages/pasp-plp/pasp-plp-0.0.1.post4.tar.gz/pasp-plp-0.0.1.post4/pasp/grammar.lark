// Operator terminals.
UND: "undef"
NEG: "not"
ADD: "+"
SUB: "-"
DIV: "/"
MOD: "\\"
MUL: "*"
NEQ: "!="
EQQ: "="
LES: "<"
GRT: ">"
LEQ: "<="
GEQ: ">="

// Operators.
OP: ADD
  | SUB
  | DIV
  | MOD
  | MUL
  | EQQ
  | NEQ
  | LES
  | GRT
  | LEQ
  | GEQ

// Constants.
CONST: /[a-z]\w*/
// Variables
VAR: /[A-Z]\w*/

// Ground atom.
pgratom: (CONST | pgrpred)
gratom: (NEG | UND)?  (CONST | grpred)
// Ground predicates.
pgrpred: CONST "(" (gratom | ID) ("," (gratom | ID))* ")"
grpred: (NEG | UND)? CONST "(" (gratom | ID) ("," (gratom | ID | interval))* ")"

// Atom.
atom: NEG* (CONST | VAR | pred)
// Interval.
interval: (CONST | ID) ".." (CONST | ID)
// Predicate.
pred: NEG* CONST "(" (atom | ID | interval) ("," (atom | ID | interval))* ")"

// Fact.
_fact: atom "."
fact: _fact
// Probabilistic fact.
pfact: PROB "::" _fact
// Credal fact.
cfact: "[" PROB "," PROB "]" "::" _fact

// Head of a rule.
head: (atom) (("," | ";") (atom))*
ohead: CONST ("(" (atom | pred) ("," (atom | pred))* ")")?
// Body of a rule.
body: (atom | bop) ("," (atom | bop))*
// Rule.
_rule: head ":-" body "."
rule: _rule
// Probabilistic rule.
prule: PROB "::" ohead ":-" body "."

// Annotated disjunction head.
adhead: PROB "::" pgratom (";" PROB "::" pgratom)*
// Annotated disjunctions.
ad: adhead "."
bad: adhead ":-" body "."

// Constraint.
constraint: ":-" body "."

// Binary operation.
bop: ((ID | VAR | bop) OP (ID | VAR | bop)) | (VAR EQQ interval)

// Query.
interp: gratom ("," gratom)*
query: "#query(" interp ("|" interp)? ")" "."?

// Constant definition.
constdef: "#const" CONST "=" ID "."

plp: (constdef | fact | rule | pfact | prule | cfact | ad | constraint | query)*

COMMENT: "%" /[^\n]*/ NEWLINE

%import common.WORD -> NAME
%import common.INT -> ID
%import common.NUMBER -> PROB
%import common.NEWLINE -> NEWLINE
%import common.WS

%ignore WS
%ignore COMMENT
