#!/bin/sh -e

# ----------------------------------------------------------------------
# FPP release builder
# ----------------------------------------------------------------------
# To use this script, you must first
#
# 1. Install GraalVM and native-image.
#
# 2. Set the environment variable GRAALVM_JAVA_HOME.
#
# See README.adoc.
# ----------------------------------------------------------------------

if test -z "$GRAALVM_JAVA_HOME"
then
  echo "release: environment variable GRAALVM_JAVA_HOME is not set" 1>&2
  exit 1
fi
directory=`dirname $0`
native_bin="$directory/native-fpp-`uname`-`uname -m`"
native_image="$GRAALVM_JAVA_HOME/bin/native-image"
meta_inf_dir="$directory/lib/src/main/resources/META-INF/native-image/"

# Make directories
mkdir -p "$meta_inf_dir"
mkdir -p "$native_bin"

# Versioning information
echo "C compiler version"
cc --version
echo "Java version"
java --version
echo "Native Image Version"
native-image --version


# Install jar files here
$directory/install-trace
# Test a run before running test
$directory/bin/fpp-locate-defs tools/fpp-locate-defs/test/defs/defs-1.fpp tools/fpp-locate-defs/test/defs/defs-2.fpp 1>/dev/null
if [ $? -ne 0 ]
then
    echo "[ERROR] Failed to run JAR with tracing enabled"
    exit 1
fi

# Trace through testing
$directory/test
if [ $? -ne 0 ]
then
    echo "[WARNING] Failed to run tests"
fi
sync; sync; sync;
# Convert jar files to binaries
for jar_file in $directory/bin/*.jar
do
    out_file=$native_bin/`basename $jar_file .jar`
    echo "Building $out_file"
    "$native_image" --no-fallback --install-exit-handlers -jar "$jar_file" "$out_file"
    if [ $? -ne 0 ]
    then
        echo "release: Failed to build $out_file"
        exit 1
    fi
    sync; sync; sync;
    if ! $out_file --help 1>/dev/null
    then
        echo "release: Failed, $out_file not executable"
        exit 1
    fi
done
sync; sync; sync;

# Clean up native directory
rm "$native_bin"/*.txt
sync; sync; sync;

# Create tar ball
release_tgz="$native_bin.tar.gz"
tar -czf "$release_tgz" "$native_bin"
sync; sync; sync;
# Check if file size too small
if [ `stat -f %z $release_tgz` -lt 55846858 ]
then
    echo "Release archive $release_tgz too small with size `du -hs $release_tgz`"
    exit 99
fi
echo "Release archive written to $release_tgz with size `du -hs $release_tgz`"
