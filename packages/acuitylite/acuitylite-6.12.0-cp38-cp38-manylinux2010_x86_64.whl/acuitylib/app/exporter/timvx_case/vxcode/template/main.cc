/****************************************************************************
*   Generated by ACUITY #ACUITY_VERSION#
*   Match timvx #TIMVX_VERSION#
*
*   Neural Network application project entry file
****************************************************************************/
#include "vx_#NETWORK_NAME#.h"
#include "vx_utils.h"

#include <cstring>
#include <iostream>
#include <vector>

#include "tim/vx/context.h"
#include "tim/vx/graph.h"
#include "tim/vx/tensor.h"
using namespace #NAMESPACE#;

int main
    (
    int argc,
    char **argv
    )
{
    const char *data_name = NULL;

    if(argc < 3)
    {
        std::cout << "Usage: " << argv[0] << " data_file inputs..." << std::endl;
        return -1;
    }

    data_name = (const char *)argv[1];

    /* Create the neural network (CPP) */
    auto context = tim::vx::Context::Create();
    auto graph = context->CreateGraph();
    #NETWORK_NAME#::construct_graph(graph, data_name);

    /* Compile the neural network (CPP) */
    if (!graph->Compile())
    {
        std::cout << "Compile graph fail." << std::endl;
        return -1;
    }

    /* Load input data (CPP) */
    auto inputs = #NETWORK_NAME#::inputs_tensor;
    auto inputs_data = utils::load_input_data(argv,
                                              #NETWORK_NAME#::input_size_list.size(),
                                              #NETWORK_NAME#::input_bytes_list);
    for (uint8_t i = 0; i < inputs.size(); i++)
    {
        if (!inputs[i]->CopyDataToTensor(inputs_data[i].data(), inputs_data[i].size()))
        {
            std::cout << "Copy input data fail." << std::endl;
            return -1;
        }
    }

    /* Run the neural network (CPP) */
    if (!graph->Run())
    {
        std::cout << "Run graph fail." << std::endl;
        return -1;
    }

    /* post-process the neural network output (CPP) */
    utils::postprocess();
    return 0;

}
