{"version":3,"file":"595.fadcf903011e2fd68c3b.js?v=fadcf903011e2fd68c3b","mappings":"oKAAA,gsB,aCMA,MAAMA,EAAgB,UAAuB,UAAU,eAEhD,IAAUC,GAAjB,SAAiBA,GACF,EAAAC,UAAY,IAAI,EAAAC,QAAQ,CAAEC,KAAM,aAAcC,OAAQ,IACtD,EAAAC,SAAW,IAAI,EAAAH,QAAQ,CAAEC,KAAM,YAAaC,OAAQL,IACpD,EAAAO,UAAY,IAAI,EAAAJ,QAAQ,CACnCC,KAAM,UACNC,OAAQ,EAAAG,qBAAA,eAAoC,UAAU,qBAE3C,EAAAC,WAAa,EAAAD,oBAC3B,CARD,CAAiBP,IAAAA,EAAK,I,oxDCDTS,E,SAEAC,EAAKD,EAAQN,KACbQ,EAAUF,EAAQG,QAClBC,EAAY,GAAGH,WACfI,EAAW,QAEXC,EAAOL,EAAGM,MAAM,KAAK,GAqBrBC,EAAe,IAAI,EAAAC,MAAoBL,GAc7C,IAAUM,EAKAC,EA4BAC,GAjCjB,SAAiBF,GACF,EAAAG,SAAW,aACX,EAAAC,WAAa,YAC3B,CAHD,CAAiBJ,IAAAA,EAAI,KAKrB,SAAiBC,GACF,EAAAI,KAAO,UACP,EAAAC,OAAS,iBACT,EAAAC,WAAa,4BACb,EAAAC,UAAY,wBACZ,EAAAC,SAAW,uBACX,EAAAC,QAAU,sBACV,EAAAC,MAAQ,oBACR,EAAAC,YAAc,wBACd,EAAAR,WAAa,uBAAuBJ,EAAKI,eACzC,EAAAS,KAAO,mBACP,EAAAC,SAAW,mBACX,EAAAC,YAAc,sBACd,EAAAC,MAAQ,oBAER,EAAAC,SAAW,kBACX,EAAAC,KAAO,WACP,EAAAC,UAAY,iBACZ,EAAAC,aAAe,oBACf,EAAAC,SAAW,gBACX,EAAAC,cAAgB,oBAChB,EAAAC,OAAS,gBACT,EAAAC,OAAS,gBAET,EAAAC,UAAY,qBACZ,EAAAC,WAAa,qBAC3B,CA1BD,CAAiBzB,IAAAA,EAAG,KA4BpB,SAAiBC,GACF,EAAAyB,YAAc,+BACd,EAAAC,aAAe,+BAC7B,CAHD,CAAiB1B,IAAAA,EAAE,KAKZ,MAAM2B,EAAQ,KAMRC,EAAwC,CACnDC,GAAI,KACJC,KAAM,OACNC,KAAM,OACNC,QAAS,WAGEC,EAA8C,CACzDD,QAAS,oCACTD,KAAM,wCACNF,GAAI,mDACJC,KAAM,2CAGKI,EAA+C,CAC1DF,QAAS,CAAC,cACVD,KAAM,CAAC,aACPF,GAAI,CAAC,WACLC,KAAM,CAAC,cAGIK,EAAiB,IAAIC,IAAsC,CACtE,CAAC,CAACR,EAAUE,KAAMF,EAAUI,SAAU,2CACtC,CAAC,CAACJ,EAAUC,GAAID,EAAUG,MAAO,iDAGtBM,EAAgB,IAAID,IAAwC,CACvE,CAAC,CAACR,EAAUE,KAAMF,EAAUI,SAAU,CAAC,UACvC,CAAC,CAACJ,EAAUC,GAAID,EAAUG,MAAO,CAAC,kBAG7B,IAAUO,GAAjB,SAAiBA,GAEF,EAAAC,OAAS,cACT,EAAAC,MAAQ,aACR,EAAA7B,KAAO,YAEP,EAAA8B,GAAK,UAEL,EAAAT,QAAU,eACV,EAAAD,KAAO,YACP,EAAAD,KAAO,YACP,EAAAD,GAAK,SACnB,CAZD,CAAiBS,IAAAA,EAAU,KAuBpB,MAAMI,EAA8B,CAAC,OAAQ,QAAS,QAAS,YAIzDC,EAAiD,CAC5D,IAAK,oCACLxC,KAAM,wCACNyC,MAAO,wCACPC,MAAO,qDACPC,SAAU,qC","sources":["webpack://@deathbeds/jupyterlab-deck/./style/img/deck.svg","webpack://@deathbeds/jupyterlab-deck/./src/icons.ts","webpack://@deathbeds/jupyterlab-deck/./src/tokens.ts"],"sourcesContent":["export default \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" version=\\\"1.1\\\" width=\\\"24\\\" height=\\\"24\\\" viewBox=\\\"0 0 24 24\\\">\\n  <g class=\\\"jp-icon3 jp-icon-selectable\\\" fill=\\\"#616161\\\">\\n    <path d=\\\"M11.19,2.25C11.97,2.26 12.71,2.73 13,3.5L18,15.45C18.09,15.71 18.14,16 18.13,16.25C18.11,17 17.65,17.74 16.9,18.05L9.53,21.1C9.27,21.22 9,21.25 8.74,21.25C7.97,21.23 7.24,20.77 6.93,20L1.97,8.05C1.55,7.04 2.04,5.87 3.06,5.45L10.42,2.4C10.67,2.31 10.93,2.25 11.19,2.25M14.67,2.25H16.12A2,2 0 0,1 18.12,4.25V10.6L14.67,2.25M20.13,3.79L21.47,4.36C22.5,4.78 22.97,5.94 22.56,6.96L20.13,12.82V3.79M11.19,4.22L3.8,7.29L8.77,19.3L16.17,16.24L11.19,4.22M8.65,8.54L11.88,10.95L11.44,14.96L8.21,12.54L8.65,8.54Z\\\" />\\n  </g>\\n</svg>\\n\";","import { LabIcon, caretUpEmptyThinIcon } from '@jupyterlab/ui-components';\n\nimport DECK_START_SVG from '../style/img/deck.svg';\n\nimport { CSS } from './tokens';\n\nconst DECK_STOP_SVG = DECK_START_SVG.replace(CSS.icon, CSS.iconWarn);\n\nexport namespace ICONS {\n  export const deckStart = new LabIcon({ name: 'deck:start', svgstr: DECK_START_SVG });\n  export const deckStop = new LabIcon({ name: 'deck:stop', svgstr: DECK_STOP_SVG });\n  export const goEnabled = new LabIcon({\n    name: 'deck:go',\n    svgstr: caretUpEmptyThinIcon.svgstr.replace(CSS.icon, CSS.iconContrast),\n  });\n  export const goDisabled = caretUpEmptyThinIcon;\n}\n","import { IFontManager, IStyles } from '@deathbeds/jupyterlab-fonts';\nimport { Token } from '@lumino/coreutils';\nimport { ISignal } from '@lumino/signaling';\nimport { Widget } from '@lumino/widgets';\n\nimport * as _PACKAGE from '../package.json';\n\nexport const PACKAGE = _PACKAGE;\n\nexport const NS = PACKAGE.name;\nexport const VERSION = PACKAGE.version;\nexport const PLUGIN_ID = `${NS}:plugin`;\nexport const CATEGORY = 'Decks';\n/** The cell/notebook metadata. */\nexport const META = NS.split('/')[1];\n\nexport interface IDeckManager {\n  start(): Promise<void>;\n  stop(): Promise<void>;\n  __: (msgid: string, ...args: string[]) => string;\n  go(direction: TDirection, alternate?: TDirection): void;\n  canGo(): Partial<TCanGoDirection>;\n  cacheStyle(node: HTMLElement): void;\n  uncacheStyle(node: HTMLElement): void;\n  addPresenter(presenter: IPresenter<any>): void;\n  addStylePreset(preset: IStylePreset): void;\n  stylePresets: IStylePreset[];\n  activeWidget: Widget | null;\n  // signals\n  activeChanged: ISignal<IDeckManager, void>;\n  stylePresetsChanged: ISignal<IDeckManager, void>;\n  // re-hosted\n  fonts: IFontManager;\n}\n\nexport const IDeckManager = new Token<IDeckManager>(PLUGIN_ID);\n\nexport interface IPresenter<T extends Widget> {\n  id: string;\n  rank: number;\n  accepts(widget: Widget): T | null;\n  stop(widget: Widget): Promise<void>;\n  start(widget: T): Promise<void>;\n  go(widget: T, direction: TDirection, alternate?: TDirection): Promise<void>;\n  canGo(widget: T): Partial<TCanGoDirection>;\n  style(widget: T): void;\n  activeChanged: ISignal<IPresenter<T>, void>;\n}\n\nexport namespace DATA {\n  export const deckMode = 'jpDeckMode';\n  export const presenting = 'presenting';\n}\n\nexport namespace CSS {\n  export const deck = 'jp-Deck';\n  export const remote = 'jp-Deck-Remote';\n  export const directions = 'jp-Deck-Remote-directions';\n  export const direction = 'jp-deck-mod-direction';\n  export const onScreen = 'jp-deck-mod-onscreen';\n  export const visible = 'jp-deck-mod-visible';\n  export const layer = 'jp-deck-mod-layer';\n  export const mainContent = 'jp-main-content-panel';\n  export const presenting = `[data-jp-deck-mode='${DATA.presenting}']`;\n  export const stop = 'jp-deck-mod-stop';\n  export const metaTool = 'jp-Deck-Metadata';\n  export const selectSplit = 'jp-Deck-SelectSplit';\n  export const apply = 'jp-deck-mod-apply';\n  // lab\n  export const disabled = 'jp-mod-disabled';\n  export const icon = 'jp-icon3';\n  export const iconBrand = 'jp-icon-brand0';\n  export const iconContrast = 'jp-icon-contrast0';\n  export const iconWarn = 'jp-icon-warn0';\n  export const selectWrapper = 'jp-select-wrapper';\n  export const styled = 'jp-mod-styled';\n  export const accept = 'jp-mod-accept';\n  // tools\n  export const toolLayer = 'jp-Deck-Tool-layer';\n  export const toolPreset = 'jp-Deck-Tool-preset';\n}\n\nexport namespace ID {\n  export const layerSelect = 'id-jp-decktools-select-layer';\n  export const presetSelect = 'id-jp-decktools-select-preset';\n}\n\nexport const EMOJI = 'üÉè';\n\nexport type TDirection = 'forward' | 'up' | 'back' | 'down';\n\nexport type TCanGoDirection = Record<TDirection, boolean>;\n\nexport const DIRECTION: Record<string, TDirection> = {\n  up: 'up',\n  down: 'down',\n  back: 'back',\n  forward: 'forward',\n};\n\nexport const DIRECTION_LABEL: Record<TDirection, string> = {\n  forward: 'Go to next slide/fragment in Deck',\n  back: 'Go to previous slide/fragment in Deck',\n  up: 'Go to slide, subslide, or fragment above in Deck',\n  down: 'Go to next fragment or subslide in Deck',\n};\n\nexport const DIRECTION_KEYS: Record<TDirection, string[]> = {\n  forward: ['ArrowRight'],\n  back: ['ArrowLeft'],\n  up: ['ArrowUp'],\n  down: ['ArrowDown'],\n};\n\nexport const COMPOUND_LABEL = new Map<[TDirection, TDirection], string>([\n  [[DIRECTION.down, DIRECTION.forward], 'Go to next fragment, subslide, or slide'],\n  [[DIRECTION.up, DIRECTION.back], 'Go to previous fragment, subslide, or slide'],\n]);\n\nexport const COMPOUND_KEYS = new Map<[TDirection, TDirection], string[]>([\n  [[DIRECTION.down, DIRECTION.forward], ['Space']],\n  [[DIRECTION.up, DIRECTION.back], ['Shift Space']],\n]);\n\nexport namespace CommandIds {\n  /* global */\n  export const toggle = 'deck:toggle';\n  export const start = 'deck:start';\n  export const stop = 'deck:stop';\n  /* nagivate */\n  export const go = 'deck:go';\n  /* directions */\n  export const forward = 'deck:forward';\n  export const back = 'deck:back';\n  export const down = 'deck:down';\n  export const up = 'deck:up';\n}\n\n/**\n * mutually-exclusive `cells/{i}/metadata/slideshow` values supported by\n * nbconvert, notebook, and lab UI\n **/\nexport type TSlideType = 'fragment' | 'slide' | 'subslide' | 'skip' | 'notes' | null;\n\n/** The scope of extents that will have this layer */\nexport type TLayerScope = 'deck' | 'stack' | 'slide' | 'fragment';\n\nexport const LAYER_SCOPES: TLayerScope[] = ['deck', 'stack', 'slide', 'fragment'];\n\nexport type TSelectLabels<T extends string> = Record<T, string>;\n\nexport const LAYER_TITLES: TSelectLabels<TLayerScope | '-'> = {\n  '-': 'Do not show this cell as a layer.',\n  deck: 'Show this layer on all future slides.',\n  stack: 'Show this layer until the next slide.',\n  slide: 'Show this layer until the next slider or subslide.',\n  fragment: 'Show this until the next fragment.',\n};\n\n/** Expected cell metadata in the `jupyterlab-deck` namespace */\nexport interface ICellDeckMetadata {\n  layer?: TLayerScope;\n}\n\nexport interface IStylePreset {\n  key: string;\n  scope: 'layer' | 'slide' | 'deck' | 'any';\n  label: string;\n  styles: IStyles;\n}\n\nexport interface IDeckSettings {\n  active?: boolean;\n  stylePresets?: {\n    [key: string]: Partial<IStylePreset>;\n  };\n}\n"],"names":["DECK_STOP_SVG","ICONS","deckStart","LabIcon","name","svgstr","deckStop","goEnabled","caretUpEmptyThinIcon","goDisabled","PACKAGE","NS","VERSION","version","PLUGIN_ID","CATEGORY","META","split","IDeckManager","Token","DATA","CSS","ID","deckMode","presenting","deck","remote","directions","direction","onScreen","visible","layer","mainContent","stop","metaTool","selectSplit","apply","disabled","icon","iconBrand","iconContrast","iconWarn","selectWrapper","styled","accept","toolLayer","toolPreset","layerSelect","presetSelect","EMOJI","DIRECTION","up","down","back","forward","DIRECTION_LABEL","DIRECTION_KEYS","COMPOUND_LABEL","Map","COMPOUND_KEYS","CommandIds","toggle","start","go","LAYER_SCOPES","LAYER_TITLES","stack","slide","fragment"],"sourceRoot":""}