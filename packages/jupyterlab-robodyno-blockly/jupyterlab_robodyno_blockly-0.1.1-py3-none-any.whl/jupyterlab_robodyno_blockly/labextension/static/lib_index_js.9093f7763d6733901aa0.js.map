{"version":3,"file":"lib_index_js.9093f7763d6733901aa0.js","mappings":";;;;;;;;;;;;;;;;AAAsD;AACS;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,gEAAgB;AAC/B;AACA;AACA;AACA,4CAA4C,gFAAuB;AACnE;AACA;AACA,iEAAe,MAAM,EAAC;;;;;;;;;;;;;;;;;;;ACfa;AACI;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAuC;AACvC;AACA;AACA;AACA,6BAA6B,kDAAqB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAwC;AACxC;AACA;AACA;AACA;AACA,6BAA6B,gDAAmB;AAChD;AACA;AACA,6BAA6B,kDAAqB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAsC;AACtC;AACA;AACA;AACA;AACA;AACA,6BAA6B,kDAAqB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAAoC;AACpC;AACA;AACA;AACA;AACA;AACA,6BAA6B,kDAAqB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,gDAAmB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6EAAkC;AAClC,iBAAiB,qEAAyB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+EAAqD;AACrD;AACA;AACA;AACA,8EAAmC;AACnC;AACA;AACA;AACA,kBAAkB,kEAAoB;AACtC;AACA,4EAAiC;AACjC;AACA,iBAAiB,iEAAqB,sBAAsB,oEAAsB;AAClF;AACA;AACA;AACA;AACA,0EAA+B;AAC/B;AACA,iBAAiB,iEAAqB,sBAAsB,oEAAsB;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA,YAAY,2CAAc;AAC1B,eAAe,uDAAS;AACxB;AACA;AACA;AAC2B","sources":["webpack://jupyterlab-robodyno-blockly/./lib/index.js","webpack://jupyterlab-robodyno-blockly/./lib/robodyno_python_generators.js"],"sourcesContent":["import { IBlocklyRegistry } from 'jupyterlab-blockly';\nimport { BlocklyRobodyno } from './robodyno_python_generators';\n/**\n * Initialization data for the jupyterlab-robodyno-blockly extension.\n */\nconst plugin = {\n    id: 'jupyterlab-robodyno-blockly:plugin',\n    autoStart: true,\n    requires: [IBlocklyRegistry],\n    activate: (app, blockly) => {\n        console.log('JupyterLab extension jupyterlab-robodyno-blockly is activated!');\n        //Registering the new toolbox containing all Robodyno blocks.\n        blockly.registerToolbox('robodyno', BlocklyRobodyno.Toolbox);\n    }\n};\nexport default plugin;\n","import * as Blockly from 'blockly';\nimport BlocklyPy from 'blockly/python';\nvar robodyno_one_color = '#3D4D9A';\n// Interface color\nvar logic_color = '#00876d';\nvar loop_color = '#49a563';\nvar math_color = '#5769a1';\nvar list_color = '#765da1';\nvar variable_color = '#ad5a7e';\n// var function_color = '#844D84';\nvar function_color = '210';\nvar movement_color = '#4f87c0';\nvar io_color = '#a200d8';\nvar tool_color = '#bf964b';\nvar utility_color = '#bead76';\nvar vision_color = '#3B1344';\nvar conveyor_color = '#00838f';\nvar sound_color = '#C9A3A2';\nvar frames_color = '#546e7a';\nvar led_color = '#105E1D';\nvar trajectory_color = '#9370DB';\n// Color object for vision\n//TODO Should be in a class\nconst g_color_values = {\n    COLOR_RED: 'RED',\n    COLOR_GREEN: 'GREEN',\n    COLOR_BLUE: 'BLUE',\n    COLOR_ANY: 'ANY'\n};\n// Shape object for vision\n//TODO Should be in a class\nconst g_shape_values = {\n    SHAPE_SQUARE: 'SQUARE',\n    SHAPE_CIRCLE: 'CIRCLE',\n    SHAPE_ANY: 'ANY'\n};\n/*\n *  Blocks definition\n */\n// Connection\nBlockly.Blocks['robodyno_init_connect'] = {\n    init: function () {\n        this.appendDummyInput().appendField('start robodyno');\n        this.appendDummyInput()\n            .appendField(new Blockly.FieldDropdown([\n            ['motor', 'Motor'],\n            ['robot', 'robots']\n        ]), 'ROBODYNO_INIT_MODE');\n        this.setInputsInline(true);\n        this.setPreviousStatement(false, null);\n        this.setNextStatement(true, null);\n        this.setColour(function_color);\n        this.setTooltip('Init Robodyno and can');\n        this.setHelpUrl('https://pypi.org/project/robodyno/');\n    }\n};\nBlockly.Blocks['robodyno_motor_connect'] = {\n    init: function () {\n        this.appendDummyInput().appendField('robodyno motor');\n        this.appendDummyInput()\n            .appendField('id: 0x')\n            .appendField(new Blockly.FieldNumber(10, -Infinity, Infinity, 1), 'motor_id');\n        this.appendDummyInput().appendField('type:');\n        this.appendDummyInput()\n            .appendField(new Blockly.FieldDropdown([\n            ['ROBODYNO_PRO_44', 'ROBODYNO_PRO_44'],\n            ['ROBODYNO_PRO_12', 'ROBODYNO_PRO_12'],\n            ['ROBODYNO_PRO_50', 'ROBODYNO_PRO_50'],\n            ['ROBODYNO_PRO_100', 'ROBODYNO_PRO_100'],\n        ]), 'ROBODYNO_MOTOR_TYPE');\n        this.setInputsInline(true);\n        this.setOutput(true, 'Boolean');\n        this.setColour(function_color);\n        this.setTooltip('add Robodyno motor object');\n        this.setHelpUrl('https://pypi.org/project/robodyno/');\n    }\n};\nBlockly.Blocks['robodyno_motor_state'] = {\n    init: function () {\n        this.appendDummyInput().appendField('robodyno');\n        this.appendValueInput('MOTOR_NAME').setCheck('VALUE');\n        this.appendDummyInput().appendField('motor');\n        this.appendDummyInput()\n            .appendField(new Blockly.FieldDropdown([\n            ['enable', 'enable'],\n            ['disable', 'disable']\n        ]), 'ROBODYNO_MOTOR_STATE');\n        this.setInputsInline(true);\n        this.setPreviousStatement(true, null);\n        this.setNextStatement(true, null);\n        this.setColour(function_color);\n        this.setTooltip('Robodyno motor enable or disable');\n        this.setHelpUrl('https://pypi.org/project/robodyno/');\n    }\n};\nBlockly.Blocks['set_robodyno_motor'] = {\n    init: function () {\n        this.appendDummyInput().appendField('set ');\n        this.appendValueInput('MOTOR_NAME').setCheck('VALUE');\n        this.appendDummyInput().appendField('motor');\n        this.appendDummyInput()\n            .appendField(new Blockly.FieldDropdown([\n            ['pos', 'pos'],\n            ['vel', 'vel'],\n            ['torque', 'torque'],\n        ]), 'SET_ROBODYNO_MOTOR');\n        this.appendDummyInput()\n            .appendField('value ')\n            .appendField(new Blockly.FieldNumber(0, -Infinity, Infinity, 0.0001), 'set_motor_value');\n        this.setInputsInline(true);\n        this.setPreviousStatement(true, null);\n        this.setNextStatement(true, null);\n        this.setColour(function_color);\n        this.setTooltip('Set Robodyno motor pos or vel or torque');\n        this.setHelpUrl('https://pypi.org/project/robodyno/');\n    }\n};\nBlocklyPy['robodyno_init_connect'] = function (block) {\n    let branch = BlocklyPy.statementToCode(block);\n    var dropdown_init_mode = block.getFieldValue('ROBODYNO_INIT_MODE');\n    var code = 'can = CanBus()\\n' + branch;\n    if (dropdown_init_mode == 'robots') {\n        code = 'from robodyno.robots.six_dof_collaborative_robot import SixDoFCollabRobot\\n' + code;\n    }\n    return code;\n};\nBlockly.Blocks['robodyno_init_connect'].toplevel_init = `\nfrom robodyno.components import Motor\nfrom robodyno.interfaces import CanBus\n`;\nBlocklyPy['robodyno_motor_connect'] = function (block) {\n    var motor_id = block.getFieldValue('motor_id');\n    var motor_type = block.getFieldValue('ROBODYNO_MOTOR_TYPE');\n    var code = 'Motor(can, 0x' + motor_id + ', ' + motor_type + ' )';\n    return [code, BlocklyPy.ORDER_NONE];\n};\nBlocklyPy['robodyno_motor_state'] = function (block) {\n    var motor_name = motor_name;\n    motor_name = BlocklyPy.valueToCode(block, 'MOTOR_NAME', BlocklyPy.ORDER_ATOMIC);\n    var motor_state = block.getFieldValue('ROBODYNO_MOTOR_STATE');\n    var code = motor_name + '.' + motor_state + '()\\n';\n    return code;\n};\nBlocklyPy['set_robodyno_motor'] = function (block) {\n    var motor_name = motor_name;\n    motor_name = BlocklyPy.valueToCode(block, 'MOTOR_NAME', BlocklyPy.ORDER_ATOMIC);\n    var motor_value = block.getFieldValue('set_motor_value');\n    var set_motor = block.getFieldValue('SET_ROBODYNO_MOTOR');\n    var code = motor_name + '.set_' + set_motor + '(' + motor_value + ')';\n    return code;\n};\nconst TOOLBOX_ROBODYNO = {\n    kind: 'categoryToolbox',\n    contents: [\n        {\n            kind: 'CATEGORY',\n            colour: function_color,\n            name: 'Motor Connect',\n            contents: [\n                {\n                    kind: 'BLOCK',\n                    type: 'robodyno_init_connect'\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'robodyno_motor_connect'\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'robodyno_motor_state'\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'set_robodyno_motor'\n                },\n            ]\n        },\n        // {\n        //   kind: 'CATEGORY',\n        //   colour: movement_color,\n        //   name: 'SixDoFCollabRobot',\n        //   contents: [\n        //   ]\n        // },\n    ]\n};\nconst BlocklyRobodyno = {\n    Blocks: Blockly.Blocks,\n    Generator: BlocklyPy,\n    Toolbox: TOOLBOX_ROBODYNO\n};\n// export default [BlocklyNiryo, BlocklyNed];\nexport { BlocklyRobodyno };\n"],"names":[],"sourceRoot":""}