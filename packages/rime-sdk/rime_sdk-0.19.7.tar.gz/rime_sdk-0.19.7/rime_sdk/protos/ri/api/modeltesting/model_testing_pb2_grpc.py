# autogenerated
# mypy: ignore-errors
# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from rime_sdk.protos.ri.api.modeltesting import model_testing_pb2 as ri_dot_api_dot_modeltesting_dot_model__testing__pb2


class ModelTestingStub(object):
    """ModelTesting service is used to create test jobs
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetTestJob = channel.unary_unary(
                '/rime.ModelTesting/GetTestJob',
                request_serializer=ri_dot_api_dot_modeltesting_dot_model__testing__pb2.GetTestJobRequest.SerializeToString,
                response_deserializer=ri_dot_api_dot_modeltesting_dot_model__testing__pb2.GetTestJobResponse.FromString,
                )
        self.ListTestJobs = channel.unary_unary(
                '/rime.ModelTesting/ListTestJobs',
                request_serializer=ri_dot_api_dot_modeltesting_dot_model__testing__pb2.ListTestJobsRequest.SerializeToString,
                response_deserializer=ri_dot_api_dot_modeltesting_dot_model__testing__pb2.ListTestJobsResponse.FromString,
                )
        self.StartStressTest = channel.unary_unary(
                '/rime.ModelTesting/StartStressTest',
                request_serializer=ri_dot_api_dot_modeltesting_dot_model__testing__pb2.StartStressTestRequest.SerializeToString,
                response_deserializer=ri_dot_api_dot_modeltesting_dot_model__testing__pb2.StartStressTestResponse.FromString,
                )
        self.GetLatestLogs = channel.unary_stream(
                '/rime.ModelTesting/GetLatestLogs',
                request_serializer=ri_dot_api_dot_modeltesting_dot_model__testing__pb2.GetLatestLogsRequest.SerializeToString,
                response_deserializer=ri_dot_api_dot_modeltesting_dot_model__testing__pb2.GetLatestLogsResponse.FromString,
                )
        self.StartFirewallContinuousTest = channel.unary_unary(
                '/rime.ModelTesting/StartFirewallContinuousTest',
                request_serializer=ri_dot_api_dot_modeltesting_dot_model__testing__pb2.StartFirewallContinuousTestRequest.SerializeToString,
                response_deserializer=ri_dot_api_dot_modeltesting_dot_model__testing__pb2.StartFirewallContinuousTestResponse.FromString,
                )
        self.StartFirewallFromReference = channel.unary_unary(
                '/rime.ModelTesting/StartFirewallFromReference',
                request_serializer=ri_dot_api_dot_modeltesting_dot_model__testing__pb2.StartFirewallFromReferenceRequest.SerializeToString,
                response_deserializer=ri_dot_api_dot_modeltesting_dot_model__testing__pb2.StartFirewallFromReferenceResponse.FromString,
                )


class ModelTestingServicer(object):
    """ModelTesting service is used to create test jobs
    """

    def GetTestJob(self, request, context):
        """GetTestJob

        Fetches the details about a specific Test Job.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListTestJobs(self, request, context):
        """ListTestJobs

        Fetches a list of all Test Jobs that meet the criteria given
        in the request.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartStressTest(self, request, context):
        """StartStressTest

        Starts running a new model stress test on Kubernetes.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLatestLogs(self, request, context):
        """GetLatestLogs

        Fetches the logs of the latest succeeded or failed pod
        running the TestJob.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartFirewallContinuousTest(self, request, context):
        """StartFirewallContinuousTest

        Run firewall over new batch of data on Kubernetes.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartFirewallFromReference(self, request, context):
        """StartFirewallFromReference

        Initializes a firewall from reference data on Kubernetes.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ModelTestingServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetTestJob': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTestJob,
                    request_deserializer=ri_dot_api_dot_modeltesting_dot_model__testing__pb2.GetTestJobRequest.FromString,
                    response_serializer=ri_dot_api_dot_modeltesting_dot_model__testing__pb2.GetTestJobResponse.SerializeToString,
            ),
            'ListTestJobs': grpc.unary_unary_rpc_method_handler(
                    servicer.ListTestJobs,
                    request_deserializer=ri_dot_api_dot_modeltesting_dot_model__testing__pb2.ListTestJobsRequest.FromString,
                    response_serializer=ri_dot_api_dot_modeltesting_dot_model__testing__pb2.ListTestJobsResponse.SerializeToString,
            ),
            'StartStressTest': grpc.unary_unary_rpc_method_handler(
                    servicer.StartStressTest,
                    request_deserializer=ri_dot_api_dot_modeltesting_dot_model__testing__pb2.StartStressTestRequest.FromString,
                    response_serializer=ri_dot_api_dot_modeltesting_dot_model__testing__pb2.StartStressTestResponse.SerializeToString,
            ),
            'GetLatestLogs': grpc.unary_stream_rpc_method_handler(
                    servicer.GetLatestLogs,
                    request_deserializer=ri_dot_api_dot_modeltesting_dot_model__testing__pb2.GetLatestLogsRequest.FromString,
                    response_serializer=ri_dot_api_dot_modeltesting_dot_model__testing__pb2.GetLatestLogsResponse.SerializeToString,
            ),
            'StartFirewallContinuousTest': grpc.unary_unary_rpc_method_handler(
                    servicer.StartFirewallContinuousTest,
                    request_deserializer=ri_dot_api_dot_modeltesting_dot_model__testing__pb2.StartFirewallContinuousTestRequest.FromString,
                    response_serializer=ri_dot_api_dot_modeltesting_dot_model__testing__pb2.StartFirewallContinuousTestResponse.SerializeToString,
            ),
            'StartFirewallFromReference': grpc.unary_unary_rpc_method_handler(
                    servicer.StartFirewallFromReference,
                    request_deserializer=ri_dot_api_dot_modeltesting_dot_model__testing__pb2.StartFirewallFromReferenceRequest.FromString,
                    response_serializer=ri_dot_api_dot_modeltesting_dot_model__testing__pb2.StartFirewallFromReferenceResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'rime.ModelTesting', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ModelTesting(object):
    """ModelTesting service is used to create test jobs
    """

    @staticmethod
    def GetTestJob(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rime.ModelTesting/GetTestJob',
            ri_dot_api_dot_modeltesting_dot_model__testing__pb2.GetTestJobRequest.SerializeToString,
            ri_dot_api_dot_modeltesting_dot_model__testing__pb2.GetTestJobResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListTestJobs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rime.ModelTesting/ListTestJobs',
            ri_dot_api_dot_modeltesting_dot_model__testing__pb2.ListTestJobsRequest.SerializeToString,
            ri_dot_api_dot_modeltesting_dot_model__testing__pb2.ListTestJobsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StartStressTest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rime.ModelTesting/StartStressTest',
            ri_dot_api_dot_modeltesting_dot_model__testing__pb2.StartStressTestRequest.SerializeToString,
            ri_dot_api_dot_modeltesting_dot_model__testing__pb2.StartStressTestResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetLatestLogs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/rime.ModelTesting/GetLatestLogs',
            ri_dot_api_dot_modeltesting_dot_model__testing__pb2.GetLatestLogsRequest.SerializeToString,
            ri_dot_api_dot_modeltesting_dot_model__testing__pb2.GetLatestLogsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StartFirewallContinuousTest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rime.ModelTesting/StartFirewallContinuousTest',
            ri_dot_api_dot_modeltesting_dot_model__testing__pb2.StartFirewallContinuousTestRequest.SerializeToString,
            ri_dot_api_dot_modeltesting_dot_model__testing__pb2.StartFirewallContinuousTestResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StartFirewallFromReference(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rime.ModelTesting/StartFirewallFromReference',
            ri_dot_api_dot_modeltesting_dot_model__testing__pb2.StartFirewallFromReferenceRequest.SerializeToString,
            ri_dot_api_dot_modeltesting_dot_model__testing__pb2.StartFirewallFromReferenceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
