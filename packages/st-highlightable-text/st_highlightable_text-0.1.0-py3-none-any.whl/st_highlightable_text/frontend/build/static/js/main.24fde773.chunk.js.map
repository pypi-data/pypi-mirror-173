{"version":3,"sources":["annotate.tsx","HighlightedSpan.tsx","TextZone.tsx","webpack:///./src/index.tsx?d986"],"names":["annotate","data","startSpan","endSpan","start","end","val","remainderStartAnnotation","remainderEndAnnotation","successor","antecedent","text","length","substring","annotated","splice","console","log","acc","index","concat","colorMap","HighlightedSpan","props","style","backgroundColor","score","borderRadius","padding","getSpan","xpath","match","withStreamlitConnection","useState","args","datas","setDatas","useMenuState","menuProps","toggleMenu","x","y","anchorPoint","setAnchorPoint","stateRange","setStateRange","eventHandler","e","range","annotationRange","selection","document","getSelection","toString","getRangeAt","content","getElementById","fromRange","startOffset","endOffset","startContainer","replace","endContainer","getXpathParameters","error","pageX","pageY","useEffect","Streamlit","setFrameHeight","addEventListener","removeEventListener","className","map","d","ControlledMenu","onClose","MenuItem","onClick","setComponentValue","engine","Styletron","rootElement","ReactDOMClient","render","value","theme","LightTheme"],"mappings":"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","file":"static/js/main.24fde773.chunk.js","sourcesContent":["type Annotation = {\r\n  text: string;\r\n  annotated: number;\r\n};\r\n\r\nexport function annotate(\r\n  data: Annotation[],\r\n  startSpan: number,\r\n  endSpan: number,\r\n  start: number,\r\n  end: number,\r\n  val: number\r\n): Annotation[] {\r\n  // Variables declarations\r\n  var remainderStartAnnotation;\r\n  var remainderEndAnnotation;\r\n  var successor;\r\n  var antecedent;\r\n\r\n  // General case\r\n  if (start != 0 && end !== data[endSpan].text.length) {\r\n      remainderStartAnnotation = data[startSpan].text.substring(0, start);\r\n      remainderEndAnnotation = data[endSpan].text.substring(\r\n        end,\r\n        data[endSpan].text.length\r\n      );\r\n      \r\n      antecedent = {\r\n        text: remainderStartAnnotation,\r\n        annotated: data[startSpan].annotated\r\n      };\r\n      successor = {\r\n        text: remainderEndAnnotation,\r\n        annotated: data[endSpan].annotated\r\n      };\r\n      // Shrink the bordering annotations to fit the selections borders\r\n      if (startSpan == endSpan) {\r\n        data[startSpan].text = data[startSpan].text.substring(start, end)\r\n      }\r\n      else {\r\n        data[startSpan].text = data[startSpan].text.substring(start, data[startSpan].text.length);\r\n        data[endSpan].text = data[endSpan].text.substring(0, end);\r\n      }\r\n\r\n      // Add the 2 remainders to the list\r\n      data.splice(startSpan, 0, antecedent);\r\n      data.splice(endSpan + 2, 0, successor);\r\n      \r\n      // Change the positions of the selection border spans\r\n      // to their new positions\r\n      startSpan += 1\r\n      endSpan += 2\r\n\r\n  // Selection starting at first charachter of Annotation\r\n  } else if (start == 0 && end != data[endSpan].text.length) {\r\n    remainderEndAnnotation = data[endSpan].text.substring(\r\n        end,\r\n        data[endSpan].text.length\r\n      );\r\n\r\n      successor = {\r\n        text: remainderEndAnnotation,\r\n        annotated: data[endSpan].annotated\r\n      };\r\n      data[endSpan].text = data[endSpan].text.substring(0, end);\r\n\r\n      // Add the 2 remainders to the list\r\n      data.splice(endSpan + 1, 0, successor);\r\n      endSpan += 1\r\n  \r\n      // if end of last paragraph\r\n  } else if (end == data[endSpan].text.length && start != 0) {\r\n    console.log(\"is end\")\r\n    remainderStartAnnotation = data[startSpan].text.substring(0, start);\r\n    antecedent = {\r\n      text: remainderStartAnnotation,\r\n      annotated: data[startSpan].annotated\r\n    };\r\n    data[startSpan].text = data[startSpan].text.substring(start, data[startSpan].text.length);\r\n\r\n    data.splice(startSpan, 0, antecedent);\r\n    startSpan += 1\r\n    endSpan += 2\r\n  }\r\n  else {\r\n    endSpan += 1\r\n    console.log(\"Not handled now...\")\r\n  }\r\n\r\n\r\n  data[startSpan].annotated = val\r\n  if (endSpan > startSpan)\r\n    data[endSpan-1].annotated = val\r\n\r\n  var acc = data[startSpan].text\r\n  for (let index = startSpan + 1 ; index < endSpan; index++) {\r\n    acc = acc.concat(data[index].text)\r\n  }\r\n  data.splice(startSpan, (endSpan - startSpan))\r\n  data.splice(startSpan, 0, {text: acc, annotated: val})\r\n  // Merge all the annotations between the selection borders and change their annotation to the selected value\r\n  \r\n  console.log(\"Data value :\", data)\r\n\r\n\r\n \r\n  return data\r\n}\r\n","import React from 'react'\n\nconst colorMap = {\n    42: \"#ebde34\",\n    0: \"transparent\",\n    1: \"#80B900\",\n    2: \"#0080B9\",\n    3: \"#FF0000\",\n}\n\nfunction HighlightedSpan(props: {\n    text: string, score: string | number \n}) {\n  return (\n        <span style={{backgroundColor: colorMap[props.score], borderRadius: '0.3rem', padding: '0.2rem'}}>{props.text}</span>\n  )\n}\n\nexport default HighlightedSpan","import { useEffect, useState } from \"react\";\r\nimport { fromRange } from \"xpath-range\";\r\nimport {Streamlit, withStreamlitConnection, ComponentProps} from \"streamlit-component-lib\"\r\n\r\nimport { annotate } from \"./annotate\";\r\nimport HighlightedSpan from \"./HighlightedSpan\";\r\n\r\nimport {\r\n    ControlledMenu,\r\n    MenuItem,\r\n    useMenuState\r\n} from '@szhsin/react-menu';\r\nimport '@szhsin/react-menu/dist/index.css';\r\n\r\n// Types declarations\r\n\r\ntype Annotation = {\r\n  text: string;\r\n  annotated: number;\r\n};\r\n\r\n\r\n/*\r\nconst testData: Annotation = {\r\n  text: \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\",\r\n  annotated: 0\r\n}*/\r\n\r\nconst getSpan = (xpath: any) => {\r\n  let reg = /span\\[(\\d+)\\]/;\r\n  return xpath.match(reg)[1] - 1;\r\n};\r\n\r\nconst getXpathParameters = (xpath: any) => {\r\n  const startOffset = xpath.startOffset;\r\n  const endOffset = xpath.endOffset;\r\n  let startContainer = xpath.start;\r\n  // /div[2]/p[7]/text()[1] -> /div[2]/p[7]/text[1]\r\n  startContainer = startContainer.replace(/\\(|\\)/g, \"\");\r\n  let endContainer = xpath.end;\r\n  endContainer = endContainer.replace(/\\(|\\)/g, \"\");\r\n  return { startOffset, endOffset, startContainer, endContainer };\r\n};\r\n\r\nfunction getSelection() {\r\n  var annotationRange;\r\n  var selection: any = document.getSelection();\r\n  if (selection && selection.toString() !== \"\") {\r\n    //console.log(selection.toString())\r\n\r\n    const range = selection.getRangeAt(0);\r\n    const content = document.getElementById(\"root\");\r\n    let xpath = null;\r\n    if (content) {\r\n      xpath = fromRange(range, content);\r\n    }\r\n    if (xpath) {\r\n      try {\r\n        let {\r\n          startOffset,\r\n          endOffset,\r\n          startContainer,\r\n          endContainer\r\n        } = getXpathParameters(xpath);\r\n        annotationRange = {\r\n          start: startOffset,\r\n          end: endOffset,\r\n          startSpan: getSpan(startContainer),\r\n          endSpan: getSpan(endContainer)\r\n        };\r\n      } catch (e) {\r\n        console.error(\"User highlight failed.\");\r\n      }\r\n    }\r\n  }\r\n  return annotationRange;\r\n}\r\n\r\nconst TextZone = (props: ComponentProps) => {\r\n  let [datas, setDatas] = useState(props.args.data);\r\n  const [menuProps, toggleMenu] = useMenuState();\r\n  const [anchorPoint, setAnchorPoint] = useState({ x: 0, y: 0 });\r\n  const [stateRange, setStateRange] = useState({startSpan: 0, endSpan: 0, start: 0, end: 0});\r\n\r\n  const eventHandler: any = (e: MouseEvent) => {\r\n    let range = getSelection();\r\n    if (range) {\r\n      setAnchorPoint({x : e.pageX, y: e.pageY})\r\n      toggleMenu(true)\r\n      setStateRange(range)\r\n    }\r\n  };\r\n\r\n  const highlightHandle0: any = (e: Event) => {\r\n    setDatas([...annotate(\r\n        datas,    \r\n        stateRange.startSpan,\r\n        stateRange.endSpan,\r\n        stateRange.start,\r\n        stateRange.end,\r\n        0\r\n      )]);\r\n      Streamlit.setComponentValue(datas)\r\n  }\r\n\r\n  const highlightHandle1: any = (e: Event) => {\r\n    setDatas([...annotate(\r\n        datas,    \r\n        stateRange.startSpan,\r\n        stateRange.endSpan,\r\n        stateRange.start,\r\n        stateRange.end,\r\n        1\r\n      )]);\r\n      Streamlit.setComponentValue(datas)\r\n  }\r\n\r\n  const highlightHandle2: any = (e: Event) => {\r\n    setDatas([...annotate(\r\n        datas,    \r\n        stateRange.startSpan,\r\n        stateRange.endSpan,\r\n        stateRange.start,\r\n        stateRange.end,\r\n        2\r\n      )]);\r\n      Streamlit.setComponentValue(datas)\r\n  }\r\n\r\n  const highlightHandle3: any = (e: Event) => {\r\n    setDatas([...annotate(\r\n        datas,    \r\n        stateRange.startSpan,\r\n        stateRange.endSpan,\r\n        stateRange.start,\r\n        stateRange.end,\r\n        3\r\n      )]);\r\n      Streamlit.setComponentValue(datas)\r\n  }\r\n\r\n  useEffect(() => {\r\n    Streamlit.setFrameHeight(1000)\r\n  });\r\n\r\n  useEffect(() => {\r\n    document.addEventListener(\"mouseup\", eventHandler);\r\n\r\n    // Remove listener on unmount\r\n    return () => {\r\n      document.removeEventListener(\"mouseup\", eventHandler);\r\n    };\r\n  }, []);\r\n\r\n  \r\n  return (\r\n    <>\r\n       {datas && \r\n      <p className=\"Paragraph\">\r\n      {datas.map((d, index) => {\r\n        return (\r\n          <HighlightedSpan key={index} text={d.text} score={d.annotated}/>\r\n        );\r\n      })}\r\n    </p>}\r\n    <ControlledMenu {...menuProps} anchorPoint={anchorPoint}\r\n                onClose={() => toggleMenu(false)}>\r\n                <MenuItem onClick={highlightHandle0}>lvl 0</MenuItem>\r\n                <MenuItem onClick={highlightHandle1}>lvl 1</MenuItem>\r\n                <MenuItem onClick={highlightHandle2}>lvl 2</MenuItem>\r\n                <MenuItem onClick={highlightHandle3}>lvl 3</MenuItem>\r\n            </ControlledMenu>\r\n    </>\r\n   \r\n  );\r\n};\r\n\r\nexport default withStreamlitConnection(TextZone);\r\n\r\n      /**/","import { StrictMode } from \"react\";\nimport * as ReactDOMClient from \"react-dom/client\";\nimport TextZone from \"./TextZone\";\n\nimport { Client as Styletron } from \"styletron-engine-atomic\";\nimport { Provider as StyletronProvider } from \"styletron-react\";\nimport { ThemeProvider, LightTheme } from \"baseui\";\n\nconst engine = new Styletron();\n\n\nconst rootElement = document.getElementById(\"root\");\nconst root = ReactDOMClient.createRoot(rootElement);\n\nroot.render(\n  <StrictMode>\n    <StyletronProvider value={engine}>\n      <ThemeProvider theme={LightTheme}>\n        <TextZone />\n      </ThemeProvider>\n    </StyletronProvider>\n  </StrictMode>\n);\n"],"sourceRoot":""}