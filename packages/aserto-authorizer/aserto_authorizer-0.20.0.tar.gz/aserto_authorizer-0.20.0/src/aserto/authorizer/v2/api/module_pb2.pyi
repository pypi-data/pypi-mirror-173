"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.message
import google.protobuf.struct_pb2
import sys
import typing

if sys.version_info >= (3, 8):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class Module(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ID_FIELD_NUMBER: builtins.int
    RAW_FIELD_NUMBER: builtins.int
    PACKAGE_PATH_FIELD_NUMBER: builtins.int
    AST_FIELD_NUMBER: builtins.int
    PACKAGE_ROOT_FIELD_NUMBER: builtins.int
    id: builtins.str
    raw: builtins.str
    package_path: builtins.str
    @property
    def ast(self) -> google.protobuf.struct_pb2.Value: ...
    package_root: builtins.str
    def __init__(
        self,
        *,
        id: builtins.str | None = ...,
        raw: builtins.str | None = ...,
        package_path: builtins.str | None = ...,
        ast: google.protobuf.struct_pb2.Value | None = ...,
        package_root: builtins.str | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_ast", b"_ast", "_id", b"_id", "_package_path", b"_package_path", "_package_root", b"_package_root", "_raw", b"_raw", "ast", b"ast", "id", b"id", "package_path", b"package_path", "package_root", b"package_root", "raw", b"raw"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_ast", b"_ast", "_id", b"_id", "_package_path", b"_package_path", "_package_root", b"_package_root", "_raw", b"_raw", "ast", b"ast", "id", b"id", "package_path", b"package_path", "package_root", b"package_root", "raw", b"raw"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_ast", b"_ast"]) -> typing_extensions.Literal["ast"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_id", b"_id"]) -> typing_extensions.Literal["id"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_package_path", b"_package_path"]) -> typing_extensions.Literal["package_path"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_package_root", b"_package_root"]) -> typing_extensions.Literal["package_root"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_raw", b"_raw"]) -> typing_extensions.Literal["raw"] | None: ...

global___Module = Module
