# -*- coding: utf-8 -*-
"""
/***************************************************************************
 AutoSplineDialog
                                 A QGIS plugin
 spline points
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                :
        git sha              : :%H$
        copyright            : (C) 2021 by XiaolongChen
        email                : chenxiaolong@mogoauto.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__auth__ = 'A.Star'

# !/usr/bin/env python
# -*- coding: utf-8 -*-
# @Author: 深圳星河软通科技有限公司 A.Star
# @contact: astar@snowland.ltd
# @site: www.astar.ltd
# @file: _message.py
# @time: 2021/5/12 10:07
# @Software: PyCharm


from qywechat.base import BaseClient

import requests
from collections import Iterable


class SAFE:
    YES = 1
    No = 0


MESSAGE_SEND_URL = "https://qyapi.weixin.qq.com/cgi-bin/message/send?access_token={token}"
APPCHAT_SEND_URL = "https://qyapi.weixin.qq.com/cgi-bin/appchat/send?access_token={token}"


class MessageClient(BaseClient):
    def __init__(self, corpid, corpsecret, agentid):
        super(MessageClient, self).__init__(corpid, corpsecret)
        self.agentid = agentid


class MessageSendClient(MessageClient):
    """
    https://work.weixin.qq.com/api/doc/90000/90135/90236#%E6%96%87%E6%9C%AC%E5%8D%A1%E7%89%87%E6%B6%88%E6%81%AF
    """

    def send_text(self, touser=None, toparty=None, totag=None, agentid=None, content=None, safe=0, enable_id_trans=0,
                  enable_duplicate_check=0, duplicate_check_interval=1800):
        data = {}
        if isinstance(touser, (list, tuple)):
            touser = '|'.join(touser)
        if touser:
            data["touser"] = touser
        if isinstance(toparty, (list, tuple)):
            toparty = '|'.join(toparty)
        if toparty:
            data["toparty"] = toparty
        if isinstance(totag, (list, tuple)):
            totag = '|'.join(totag)
        if totag:
            data["totag"] = totag

        token = self.get_token()
        send_url_with_token = MESSAGE_SEND_URL.format(token=token)
        data = dict(data, **{
            "msgtype": "text",
            "agentid": agentid,
            "text": {
                "content": content
            },
            "safe": safe,
            "enable_id_trans": enable_id_trans,
            "enable_duplicate_check": enable_duplicate_check,
            "duplicate_check_interval": duplicate_check_interval
        })

        res = requests.post(send_url_with_token, json=data)
        details = res.json()
        return details

    def send_markdown(self, touser=None, toparty=None, totag=None, agentid=None, content=None, safe=0,
                      enable_id_trans=0,
                      enable_duplicate_check=0, duplicate_check_interval=1800):
        data = {}
        if isinstance(touser, (list, tuple)):
            touser = '|'.join(touser)
        if touser:
            data["touser"] = touser
        if isinstance(toparty, (list, tuple)):
            toparty = '|'.join(toparty)
        if toparty:
            data["toparty"] = toparty
        if isinstance(totag, (list, tuple)):
            totag = '|'.join(totag)
        if totag:
            data["totag"] = totag

        token = self.get_token()
        send_url_with_token = MESSAGE_SEND_URL.format(token=token)
        data = dict(data, **{
            "msgtype": "markdown",
            "agentid": agentid,
            "markdown": {
                "content": content
            },
            "enable_id_trans": enable_id_trans,
            "safe": safe,
            "enable_duplicate_check": enable_duplicate_check,
            "duplicate_check_interval": duplicate_check_interval
        })

        res = requests.post(send_url_with_token, json=data)
        details = res.json()
        return details


class AppChatSendClient(MessageClient):
    """
    https://work.weixin.qq.com/api/doc/90000/90135/90248
    """

    def __init__(self):
        super(AppChatSendClient, self).__init__()

    def send_text(self, chatid, content, safe=0):
        token = self.get_token()
        send_url_with_token = APPCHAT_SEND_URL.format(token=token)
        data = {
            "chatid": chatid,
            "msgtype": "text",
            "text": {
                "content": content
            },
            "safe": safe
        }
        res = requests.post(send_url_with_token, json=data)
        details = res.json()
        return details

    def send_image(self, chatid, media_id, safe=0):
        token = self.get_token()
        send_url_with_token = APPCHAT_SEND_URL.format(token=token)
        data = {
            "chatid": chatid,
            "msgtype": "image",
            "image": {
                "media_id": media_id
            },
            "safe": safe
        }
        res = requests.post(send_url_with_token, json=data)
        details = res.json()
        return details

    def send_voice(self, chatid, media_id):
        token = self.get_token()
        send_url_with_token = APPCHAT_SEND_URL.format(token=token)
        data = {
            "chatid": chatid,
            "msgtype": "voice",
            "voice": {
                "media_id": media_id
            },
        }
        res = requests.post(send_url_with_token, json=data)
        details = res.json()
        return details

    def send_video(self, chatid, media_id, title='', description='', safe=0):
        token = self.get_token()
        send_url_with_token = APPCHAT_SEND_URL.format(token=token)
        data = {
            "chatid": chatid,
            "msgtype": "video",
            "video": {
                "media_id": media_id,
                "description": description,
                "title": title
            },
            "safe": safe
        }
        res = requests.post(send_url_with_token, json=data)
        details = res.json()
        return details

    def send_file(self, chatid, media_id, safe=0):
        token = self.get_token()
        send_url_with_token = APPCHAT_SEND_URL.format(token=token)
        data = {
            "chatid": chatid,
            "msgtype": "file",
            "file": {
                "media_id": media_id,
            },
            "safe": safe
        }
        res = requests.post(send_url_with_token, json=data)
        details = res.json()
        return details

    def send_textcard(self, chatid, title, description, url, btntxt='详情'):
        token = self.get_token()
        send_url_with_token = APPCHAT_SEND_URL.format(token=token)
        data = {
            "chatid": chatid,
            "msgtype": "file",
            "textcard": {
                "title": title,
                "description": description,
                "url": url
            },
            "btntxt": btntxt
        }
        res = requests.post(send_url_with_token, json=data)
        details = res.json()
        return details

    # TODO: 图文消息
    # TODO: markdown消息
