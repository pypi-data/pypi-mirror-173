{
    "metadata": {
        "description": null,
        "credits": null
    },
    "cpu_types": null,
    "file_types": {
        "MH_BUNDLE": {
            "description": "A loadable bundle (often essentially a plugin) should be a complete closure on symbols such as a executable but intended to be loaded into another process's virtual memory space.  A reason for the usage of `MH_BUNDLE` is that the object must be explicitly late bound by calling `dlopen` or related APIs, it cannot be linked to as though it were a library.",
            "value": 8
        },
        "MH_CORE": {
            "description": "A core dump (user or kernel)",
            "value": 4
        },
        "MH_DSYM": {
            "description": "A compile unit containing only debugging symbols",
            "value": 10
        },
        "MH_DYLIB": {
            "description": "A dynamic (read bound at runtime) library",
            "value": 6
        },
        "MH_DYLIB_STUB": {
            "description": "An object used for linking that contains no content.  Somewhat similar in nature to a `.tlb` file and no longer in common usage as Apple uses TLB files as a replacement.",
            "value": 9
        },
        "MH_DYLINKER": {
            "description": "A dynamic linker (typically only one exists and is",
            "value": 7
        },
        "MH_EXECUTE": {
            "description": "A complete executable MachO file (typically a user mode binary)",
            "value": 2
        },
        "MH_FILESET": {
            "description": "A collection of other MachO files, used by KernelCollections",
            "value": 12
        },
        "MH_FVMLIB": {
            "description": "A FVM (fixed virtual memory, or non-relocatable/non-position independenct code PIC) dynamic library",
            "value": 3
        },
        "MH_KEXT_BUNDLE": {
            "description": "A kernel extension bundle.  Name comes from 32bit lineage where MH_BUNDLE were kexts.rake on non-64bit platforms",
            "value": 11
        },
        "MH_OBJECT": {
            "description": "An intermediate object file that results from a compile unit (e.g. single .c file)",
            "value": 1
        },
        "MH_PRELOAD": {
            "description": "\\\"Preloaded\\\" images.  Used for firmware payloads",
            "value": 5
        }
    },
    "segments": {
        "__AUTH": {
            "description": "Used by arm64e for pointer authenticaton codes (PAC) mutable data",
            "__data": {
                "description": "General purpose PAC authenticated data"
            },
            "__objc_data": {
                "description": "ObjC specific PAC authenticated data"
            }
        },
        "__AUTH_CONST": {
            "description": "Used by arm64e pointer authentication codes (PAC) and read only",
            "__const": {
                "description": "Authenticated constants"
            },
            "__auth_got": {
                "description": "Authenticated Global offset Table"
            },
            "__cfstring": {
                "description": "Authenticated CoreFoundation strings"
            },
            "__auth_ptr": {
                "description": null
            },
            "__objc_const": {
                "description": "Authenticated Objective-C constant values"
            },
            "__got": {
                "description": "Global offset Table"
            }
        },
        "__CTF": {
            "description": "Compact C Type Format",
            "__ctf": {
                "description": "https://github.com/apple-oss-distributions/dtrace/tree/main/tools/ctfconvert"
            }
        },
        "__DATA": {
            "description": "Mutable data region (rw-)",
            "__data": {
                "description": "General purpose mutable data region"
            },
            "__lock_grp": {
                "description": null
            },
            "__percpu": {
                "description": "Local storage per CPU allowing for lock free globals"
            },
            "__llvm_prf_cnts": {
                "description": null
            },
            "__llvm_prf_data": {
                "description": null
            },
            "__llvm_prf_names": {
                "description": null
            },
            "__llvm_prf_vnds": {
                "description": null
            },
            "__llvm_orderfile": {
                "description": null
            },
            "__sdt_cstring": {
                "description": null
            },
            "__sdt": {
                "description": null
            },
            "__common": {
                "description": null
            },
            "__bss": {
                "description": "Basic initialized data section"
            },
            "__got": {
                "description": "Global offset table"
            },
            "__mod_init_func": {
                "description": "Module initializer function (called at load)"
            },
            "__mod_term_func": {
                "description": "Module termination function (called at unload)"
            },
            "__const": {
                "description": "Constant data, no longer in common usage, see __DATA_CONST.__const"
            },
            "__nl_symbol_ptr": {
                "description": "Non-lazy symbol pointers"
            },
            "__la_symbol_ptr": {
                "description": "Lazy symbol pointers"
            },
            "__objc_imageinfo": {
                "description": null
            },
            "__objc_selrefs": {
                "description": null
            },
            "__objc_classrefs": {
                "description": null
            },
            "__objc_superrefs": {
                "description": null
            },
            "__objc_ivar": {
                "description": "ObjC instance variables (ivar)"
            }
        },
        "__DATA_CONST": {
            "description": "Immutable data region (r--)",
            "__got": {
                "description": "Global offset table"
            },
            "__mod_init_func": {
                "description": "Module initializer function"
            },
            "__const": {
                "description": "Constant initialized data"
            },
            "__kalloc_type": {
                "description": null
            },
            "__objc_classlist": {
                "description": "List of ObjC classes exported"
            },
            "__objc_protolist": {
                "description": "List of ObjC protocols (like interfaces)"
            },
            "__objc_imageinfo": {
                "description": null
            },
            "__objc_const": {
                "description": "Constant ObjC data"
            }
        },
        "__HIB": {
            "description": "Hardware specific information for coming out of hibernation.  This section is solely responsable for ensuring that the sleepimage is restored.  Note that it all operates at the same protection levels (code, const, and data) and therefore doesn't take advantage of some hardware protections.",
            "__text": {
                "description": "Executable code used to pull a machine out of hibernation"
            },
            "__bootPT": {
                "description": "Initial page table for use during boot up from a hibernation for protected mode"
            },
            "__desc": {
                "description": null
            },
            "__data": {
                "description": "General purpose data region for hibernation restore"
            },
            "__const": {
                "description": "Constant data"
            },
            "__cstring": {
                "description": "C-Style strings for the sleep image restore function"
            },
            "__bss": {
                "description": "Initialized mutable data"
            },
            "__common": {
                "description": null
            }
        },
        "__KLD": {
            "description": "The kernel linker (used to dynamiclly bind a kernel extension) analagous to dyld in user-mode",
            "__text": {
                "description": "The executable code for the kernel linker"
            }
        },
        "__KLDDATA": {
            "description": "Data region for KLD or kernel linker",
            "__init": {
                "description": null
            },
            "__init_entry_set": {
                "description": null
            },
            "__cstring": {
                "description": "C-Style (null terminated) strings for the kernel linker"
            },
            "__const": {
                "description": "Constant data"
            },
            "__mod_init_func": {
                "description": "Module initializer funtion"
            },
            "__mod_term_func": {
                "description": "Module termination function"
            },
            "__bss": {
                "description": "Initialized data"
            }
        },
        "__LAST": {
            "description": "Segment that contains the last kernel symbol exported",
            "__last": {
                "description": "Contains `_last_kernel_symbol` which is the last exported kernel symbol"
            }
        },
        "__LASTDATA_CONST": {
            "description": "Last exported symbol from the const region of the kernel or object",
            "__mod_init_func": {
                "description": "Module initialization function"
            }
        },
        "__LINKEDIT": {
            "description": "Though named \"LINKEDIT\" this segment actually contains any metadata of this Mach-O object.  For example this area contains code signature, as well as dynamic linker opcodes.  This area is always read only.  The contents of this area are described by various `LC_` load commands."
        },
        "__LINKINFO": {
            "description": null,
            "__symbolsets": {
                "description": null
            }
        },
        "__OBJC_CONST": {
            "description": "A region of Objective-C metadata that is read-only",
            "__objc_class_ro": {
                "description": "ObjC class info that is read-only to prevent runtime tampering (swizzling for example)"
            }
        },
        "__PAGEZERO": {
            "description": "A dummy page used to mark addresses at low memory as not readable.  This causes a dereference of a low integer to cause a page fault helping not propogate type errors when casting pointers."
        },
        "__PRELINK_INFO": {
            "description": "Descriptive information about the prelinked region of this object",
            "__info": {
                "description": null
            }
        },
        "__PRELINK_TEXT": {
            "description": "A region of executable code that is the combination of multiple linkable objects having been prebound",
            "__text": {
                "description": "The prelinked, executable code region"
            }
        },
        "__TEXT": {
            "description": "The text region contains any executable code (in the machine code of the platform for this binary) and therefore will always be a read-only (write protected) region of memory when mapped into a process.  (r-x)",
            "__text": {
                "description": "Generic code region.  This area will have the execute flag set on it's content"
            },
            "__const": {
                "description": "Constant variables. This region will be non-execute on platforms that support execute never, DEP or NX concepts.  See `__DATA_CONST.__const`"
            },
            "__cstring": {
                "description": "ASCII strings null terminated.  This region can be split on `\\0` into strings."
            },
            "__os_log": {
                "description": "Specific support for Apple OSLog facility containing the patterns used"
            },
            "__eh_frame": {
                "description": "Execption handling frame"
            },
            "__stubs": {
                "description": "Locations that text calls that initially point to a helper thunk (see __stub_helper) but will be late bound to the dynamic symbol"
            },
            "__stub_helper": {
                "description": "A helper function that when called binds the prior call site to the proper dyld import"
            },
            "__info_plist": {
                "description": null
            },
            "__unwind_info": {
                "description": "Information to help debuggers / exception handlers unwind the stack (info about prolouge etc) allowing for parts of the stack to remain a compiler implementation detail."
            },
            "__auth_stubs": {
                "description": null
            },
            "__init_offsets": {
                "description": null
            },
            "__objc_methlist": {
                "description": null
            },
            "__gcc_except_tab": {
                "description": "GCC exception handler table"
            },
            "__objc_classname": {
                "description": "A collection of strings that provide the names for Objective-C classes in this object file"
            },
            "__objc_methname": {
                "description": "A colleciton of strings that provide the names of Objective-C methods for a given class (selectors)"
            },
            "__objc_methtype": {
                "description": null
            }
        },
        "__TEXT_EXEC": {
            "description": null
        },
        "__VECTORS": {
            "description": "Vector table.  Often used to configure a kernel / coprocessor for reset, exception etc.  See ARM-M profile for an example",
            "__recover": {
                "description": null
            }
        }
    },
    "commands": {
        "LC_SEGMENT": {
            "description": "Causes the loading of a 32bit segment with a given protection level.  Contains 0 or more sections",
            "value": 1
        },
        "LC_SYMTAB": {
            "description": "Classical symbol table (direct symbols defined in this object)",
            "value": 2
        },
        "LC_SYMSEG": {
            "description": "Classical GCC compatible \"symbol segment\".  Not commonly used as it is replaced with dyld opcodes.",
            "value": 3
        },
        "LC_THREAD": {
            "description": "Initial state of the Mach thread for a executable Mach-O",
            "value": 4
        },
        "LC_UNIXTHREAD": {
            "description": "Initial state of the Unix / POSIX thread for an executable Mach-O",
            "value": 5
        },
        "LC_LOADFVMLIB": {
            "description": null,
            "value": 6
        },
        "LC_IDFVMLIB": {
            "description": null,
            "value": 7
        },
        "LC_IDENT": {
            "description": "Identity of this Mach-O object",
            "value": 8
        },
        "LC_FVMFILE": {
            "description": null,
            "value": 9
        },
        "LC_PREPAGE": {
            "description": null,
            "value": 10
        },
        "LC_DYSYMTAB": {
            "description": "Dynamic or indirect symbol table.",
            "value": 11
        },
        "LC_LOAD_DYLIB": {
            "description": "Load a dynamic library (dylib) by it's identity.  This occurs before process start.",
            "value": 12
        },
        "LC_ID_DYLIB": {
            "description": "Unique identifier for this dynamic library to be used in locating it for import",
            "value": 13
        },
        "LC_LOAD_DYLINKER": {
            "description": "Command to load a specific dynamic linker to bind dylibs into this object",
            "value": 14
        },
        "LC_ID_DYLINKER": {
            "description": "The identity of the dynamic linker (dyld) expected to be used to bind this object in memory",
            "value": 15
        },
        "LC_PREBOUND_DYLIB": {
            "description": null,
            "value": 16
        },
        "LC_ROUTINES": {
            "description": "Used to define initialize / finalize functions on 32bit platforms.  Historical as _init_func/_term_func are now how this is handled.",
            "value": 17
        },
        "LC_SUB_FRAMEWORK": {
            "description": "Used by \"Umbrella Frameworks\" to declare the frameworks that the umbrella re-exports.  For an example see Cocoa, AppKit and Foundation",
            "value": 18
        },
        "LC_SUB_UMBRELLA": {
            "description": "Used by \"Umbrella Frameworks\" that re-export other frameworks (Cocoa exports Foundation, AppKit for example of this)",
            "value": 19
        },
        "LC_SUB_CLIENT": {
            "description": null,
            "value": 20
        },
        "LC_SUB_LIBRARY": {
            "description": null,
            "value": 21
        },
        "LC_TWOLEVEL_HINTS": {
            "description": "Two level namespacing allows for the binding to a symbol that may have the same name in two different libraries.  The first namespace is the dylib contining the symbol and the second namespace is the symbol itself.",
            "value": 22
        },
        "LC_PREBIND_CKSUM": {
            "description": "Checksum data to know if this \"optimized\" or prebound object is still valid for the files it was generated from.",
            "value": 23
        },
        "LC_LOAD_WEAK_DYLIB": {
            "description": "Attempt to load a Dylib but do not fail if binding cannot occur due to its absence",
            "value": 2147483672
        },
        "LC_SEGMENT_64": {
            "description": "Causes the loading of a 64bit segment with a given protection level.  Contains 0 or more sections",
            "value": 25
        },
        "LC_ROUTINES_64": {
            "description": "Used to define initialize / finalize functions on 64bit platforms.  Historical as _init_func/_term_func are now how this is handled.",
            "value": 26
        },
        "LC_UUID": {
            "description": "A UUID (GUID) that uniquely identifies this object.  Should only occur once",
            "value": 27
        },
        "LC_RPATH": {
            "description": null,
            "value": 2147483676
        },
        "LC_CODE_SIGNATURE": {
            "description": "Section of mach-o that contains a signature for the object",
            "value": 29
        },
        "LC_SEGMENT_SPLIT_INFO": {
            "description": null,
            "value": 30
        },
        "LC_REEXPORT_DYLIB": {
            "description": "Used to export symbols from an object file that this object imported",
            "value": 2147483679
        },
        "LC_LAZY_LOAD_DYLIB": {
            "description": "Dylibs that should be included in this objects dependencies but should only be loaded and bound when a reference is made to them",
            "value": 32
        },
        "LC_ENCRYPTION_INFO": {
            "description": "Used by FairPlay / DSMOS to protect a binary from dump / reverse engineering (DRM, be mindful of DMCA)",
            "value": 33
        },
        "LC_DYLD_INFO": {
            "description": null,
            "value": 34
        },
        "LC_DYLD_INFO_ONLY": {
            "description": null,
            "value": 2147483682
        },
        "LC_LOAD_UPWARD_DYLIB": {
            "description": null,
            "value": 2147483683
        },
        "LC_VERSION_MIN_MACOSX": {
            "description": "A declared minimum SDK for macOS",
            "value": 36
        },
        "LC_VERSION_MIN_IPHONEOS": {
            "description": "A declared minimum SDK for iOS",
            "value": 37
        },
        "LC_FUNCTION_STARTS": {
            "description": null,
            "value": 38
        },
        "LC_DYLD_ENVIRONMENT": {
            "description": null,
            "value": 39
        },
        "LC_MAIN": {
            "description": "Mach-O binary entry point",
            "value": 2147483688
        },
        "LC_DATA_IN_CODE": {
            "description": "Generic region of a Mach-O file that can contain arbitrary data",
            "value": 41
        },
        "LC_SOURCE_VERSION": {
            "description": "The verion of source code this Mach-O file was built from",
            "value": 42
        },
        "LC_DYLIB_CODE_SIGN_DRS": {
            "description": "Classical code signing \"designated requirements\".  No longer in common usage as this is now in a LC_CODE_SIGNATURE \"magic page\"",
            "value": 43
        },
        "LC_ENCRYPTION_INFO_64": {
            "description": "Used by FairPlay / DSMOS to protect a binary from dump / reverse engineering (DRM, be mindful of DMCA)",
            "value": 44
        },
        "LC_LINKER_OPTION": {
            "description": null,
            "value": 45
        },
        "LC_LINKER_OPTIMIZATION_HINT": {
            "description": null,
            "value": 46
        },
        "LC_VERSION_MIN_TVOS": {
            "description": "The minimum tvOS to load and execute this binary",
            "value": 47
        },
        "LC_VERSION_MIN_WATCHOS": {
            "description": "The minimum watchOS to laod and execute this binary",
            "value": 48
        },
        "LC_NOTE": {
            "description": "An arbitrary human readable text note included in this Mach-O.  These should not be used by automated tooling as their unstructured",
            "value": 49
        },
        "LC_BUILD_VERSION": {
            "description": "Contains information about the binaries platform, it's target and minimum SDK",
            "value": 50
        },
        "LC_DYLD_EXPORTS_TRIE": {
            "description": "The exporeted DYLD symbols from this dylib",
            "value": 2147483699
        },
        "LC_DYLD_CHAINED_FIXUPS": {
            "description": null,
            "value": 2147483700
        },
        "LC_FILESET_ENTRY": {
            "description": "An entry of a Mach-O object containing other Mach-O files.  Current usage is in macOS 11+ KernelCollections",
            "value": 2147483701
        }
    }
}