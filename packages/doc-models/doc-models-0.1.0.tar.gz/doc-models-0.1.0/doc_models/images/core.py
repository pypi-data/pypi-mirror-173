from pathlib import Path
from typing import List

import cv2
from pdf2image import convert_from_path
from pdf2image.generators import threadsafe
from doc_models import logger
from doc_models.types import FilePath


@threadsafe
def stem_generator(file: FilePath):
    """Return PDF file stem. Resulting image will be {stem}-{pg no}, where pg-no is left padded with 0s."""
    while True:
        yield file.stem


def create_doc_images(
    file: FilePath, n_pages: int, output_folder: FilePath
) -> List[Path]:
    """Create an image of each page in document."""
    logger.info("Creating page images for %s", file)
    img_files = convert_from_path(
        file,
        output_folder=output_folder,
        output_file=stem_generator(file),
        fmt="jpg",
        thread_count=min(n_pages, 8),
        paths_only=True,
    )
    logger.info("Finished creating page images for %s", file)
    return img_files


class ImgMgr:
    """Document image manager. Create and cache document page images."""

    def __init__(self, file: FilePath, n_pages: int, save_dir: FilePath):
        """
        Args:
            file (FilePath): PDF file path.
            n_pages (int): Number of pages in the file.
            save_dir (FilePath): Base directory where image folders are stored.
        """
        self.file = file
        self.n_pages = n_pages
        self.img_dir = Path(save_dir).joinpath(f"{Path(file).stem}_images")
        self.pg_idx_to_img = {}

    def get_page_image(self, pg_idx: int):
        """Get an image of the page at pg_idx"""
        if pg_idx in self.pg_idx_to_img:
            return self.pg_idx_to_img[pg_idx]
        img_path = self.img_dir.joinpath(self.image_file_name(pg_idx))
        if not img_path.exists():
            self.create_images(check_exists=False)
        self.pg_idx_to_img[pg_idx] = img = cv2.imread(str(img_path))
        return img

    def create_images(self, check_exists: bool = True) -> List[Path]:
        """Create an image of each page."""
        if check_exists:
            paths = [
                self.img_dir.joinpath(self.image_file_name(pg_idx))
                for pg_idx in range(self.n_pages)
            ]
            if all(p.exists() for p in paths):
                return paths
        self.img_dir.mkdir(parents=True, exist_ok=True)
        return create_doc_images(self.file, self.n_pages, self.img_dir)

    def image_file_name(self, pg_idx: int) -> str:
        """Get the image file name that would get generated by pdftoppm."""
        pad_len = len(str(self.n_pages))
        pg_no = pg_idx + 1
        return f"{Path(self.file).stem}-{pg_no:0{pad_len}}.jpg"
