@startuml
namespace HelloImGui {

enum _ <functions>{
    + void Run(RunnerParams &)
    + void Run(VoidFunction, windowSize, title)
}

_ --> RunnerParams: use

class RunnerParams <struct> {
    RunnerCallbacks callbacks;
    AppWindowParams appWindowParams;
    ImGuiWindowParams imGuiWindowParams;
    DockingParams dockingParams;
    BackendPointers backendPointers;
    bool appShallExit = false;
}

class RunnerCallbacks <struct> {
    ---
    VoidFunction ShowGui = {};
    VoidFunction ShowMenus = {};
    VoidFunction ShowStatus = {};
    VoidFunction PostInit = {};
    VoidFunction BeforeExit = {};

    //Handle any backend event (e.g.SDL_Event)
    AnyBackendEventCallback = {};

    VoidFunction LoadAdditionalFonts =
       LoadDefaultFont_WithFontAwesomeIcons;

    VoidFunction SetupImGuiConfig = 
      SetupDefaultImGuiConfig;

    VoidFunction SetupImGuiStyle = 
      SetupDefaultImGuiStyle;

    mobileCallbacks;
}

class MobileCallbacks <struct>{
    ---
    Only available on mobile devices
    ---
    VoidFunction OnDestroy = {};
    VoidFunction OnLowMemory = {};
    VoidFunction OnPause = {};
    VoidFunction OnResume = {};
}
RunnerCallbacks *-- MobileCallbacks

class AppWindowParams <struct> {
    std::string windowTitle = "";
    ImVec2 windowSize = {800.f, 600.f};
    bool maximized = false;
    bool fullScreen = false;
    ImVec2 windowPosition = {-11000.f, -1.f};
}

class ImGuiWindowParams <struct> {
    defaultImGuiWindowType = ProvideFullScreenWindow;

    ImVec4 backgroundColor;

    bool showMenuBar = false;
    bool showMenu_App = true;
    bool showMenu_View = true;

    bool showStatusBar = false;
    bool showStatus_Fps = true;

    bool configWindowsMoveFromTitleBarOnly = true;
}

class BackendPointers <struct> {
  ---
  Output structure: filled by HelloImGui
  ---
  void* glfwWindow;
  void* sdlWindow;
  void* sdlGlContext;
}

class DockingParams <struct> {
    vector<DockingSplit> dockingSplits;

    vector<DockableWindow> dockableWindows;

    bool resetUserDockLayout = true;
    bool wasDockLayoutApplied = false;
}

class DockableWindow <struct> {
    string label;
    DockSpaceName dockSpaceName;
    VoidFunction GuiFunction = {};
    bool isVisible = true;
    bool canBeClosed = true;
}

class DockingSplit <struct> {
    DockSpaceName initialDock;
    DockSpaceName newDock;
    ImGuiDir_ direction;
    float ratio = 0.25f;
}


RunnerParams *-- RunnerCallbacks
RunnerParams *-- AppWindowParams
RunnerParams *-- ImGuiWindowParams
RunnerParams *-- BackendPointers
RunnerParams *-- DockingParams
DockingParams *-- DockableWindow : vector
DockingParams *-- DockingSplit : vector

}
@enduml