"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(globalThis["webpackChunk_JUPYTERLAB_CORE_OUTPUT"] = globalThis["webpackChunk_JUPYTERLAB_CORE_OUTPUT"] || []).push([["vendors-node_modules_jupyterlab_markdownviewer-extension_lib_index_js"],{

/***/ "../../node_modules/@jupyterlab/markdownviewer-extension/lib/index.js":
/*!****************************************************************************!*\
  !*** ../../node_modules/@jupyterlab/markdownviewer-extension/lib/index.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _jupyterlab_application__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jupyterlab/application */ \"webpack/sharing/consume/default/@jupyterlab/application/@jupyterlab/application\");\n/* harmony import */ var _jupyterlab_application__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_application__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _jupyterlab_apputils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jupyterlab/apputils */ \"webpack/sharing/consume/default/@jupyterlab/apputils/@jupyterlab/apputils\");\n/* harmony import */ var _jupyterlab_apputils__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_apputils__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _jupyterlab_coreutils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @jupyterlab/coreutils */ \"webpack/sharing/consume/default/@jupyterlab/coreutils/@jupyterlab/coreutils\");\n/* harmony import */ var _jupyterlab_coreutils__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_coreutils__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _jupyterlab_markdownviewer__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @jupyterlab/markdownviewer */ \"../../node_modules/@jupyterlab/markdownviewer/lib/tokens.js\");\n/* harmony import */ var _jupyterlab_markdownviewer__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @jupyterlab/markdownviewer */ \"../../node_modules/@jupyterlab/markdownviewer/lib/widget.js\");\n/* harmony import */ var _jupyterlab_rendermime__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @jupyterlab/rendermime */ \"webpack/sharing/consume/default/@jupyterlab/rendermime/@jupyterlab/rendermime\");\n/* harmony import */ var _jupyterlab_rendermime__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_rendermime__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _jupyterlab_settingregistry__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @jupyterlab/settingregistry */ \"webpack/sharing/consume/default/@jupyterlab/settingregistry/@jupyterlab/settingregistry\");\n/* harmony import */ var _jupyterlab_settingregistry__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_settingregistry__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _jupyterlab_translation__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @jupyterlab/translation */ \"webpack/sharing/consume/default/@jupyterlab/translation/@jupyterlab/translation\");\n/* harmony import */ var _jupyterlab_translation__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_translation__WEBPACK_IMPORTED_MODULE_5__);\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * @packageDocumentation\n * @module markdownviewer-extension\n */\n\n\n\n\n\n\n\n/**\n * The command IDs used by the markdownviewer plugin.\n */\nvar CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.markdownPreview = 'markdownviewer:open';\n    CommandIDs.markdownEditor = 'markdownviewer:edit';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * The name of the factory that creates markdown viewer widgets.\n */\nconst FACTORY = 'Markdown Preview';\n/**\n * The markdown viewer plugin.\n */\nconst plugin = {\n    activate,\n    id: '@jupyterlab/markdownviewer-extension:plugin',\n    provides: _jupyterlab_markdownviewer__WEBPACK_IMPORTED_MODULE_6__.IMarkdownViewerTracker,\n    requires: [_jupyterlab_rendermime__WEBPACK_IMPORTED_MODULE_3__.IRenderMimeRegistry, _jupyterlab_translation__WEBPACK_IMPORTED_MODULE_5__.ITranslator],\n    optional: [_jupyterlab_application__WEBPACK_IMPORTED_MODULE_0__.ILayoutRestorer, _jupyterlab_settingregistry__WEBPACK_IMPORTED_MODULE_4__.ISettingRegistry],\n    autoStart: true\n};\n/**\n * Activate the markdown viewer plugin.\n */\nfunction activate(app, rendermime, translator, restorer, settingRegistry) {\n    const trans = translator.load('jupyterlab');\n    const { commands, docRegistry } = app;\n    // Add the markdown renderer factory.\n    rendermime.addFactory(_jupyterlab_rendermime__WEBPACK_IMPORTED_MODULE_3__.markdownRendererFactory);\n    const namespace = 'markdownviewer-widget';\n    const tracker = new _jupyterlab_apputils__WEBPACK_IMPORTED_MODULE_1__.WidgetTracker({\n        namespace\n    });\n    let config = Object.assign({}, _jupyterlab_markdownviewer__WEBPACK_IMPORTED_MODULE_7__.MarkdownViewer.defaultConfig);\n    /**\n     * Update the settings of a widget.\n     */\n    function updateWidget(widget) {\n        Object.keys(config).forEach((k) => {\n            var _a;\n            widget.setOption(k, (_a = config[k]) !== null && _a !== void 0 ? _a : null);\n        });\n    }\n    if (settingRegistry) {\n        const updateSettings = (settings) => {\n            config = settings.composite;\n            tracker.forEach(widget => {\n                updateWidget(widget.content);\n            });\n        };\n        // Fetch the initial state of the settings.\n        settingRegistry\n            .load(plugin.id)\n            .then((settings) => {\n            settings.changed.connect(() => {\n                updateSettings(settings);\n            });\n            updateSettings(settings);\n        })\n            .catch((reason) => {\n            console.error(reason.message);\n        });\n    }\n    // Register the MarkdownViewer factory.\n    const factory = new _jupyterlab_markdownviewer__WEBPACK_IMPORTED_MODULE_7__.MarkdownViewerFactory({\n        rendermime,\n        name: FACTORY,\n        primaryFileType: docRegistry.getFileType('markdown'),\n        fileTypes: ['markdown'],\n        defaultRendered: ['markdown']\n    });\n    factory.widgetCreated.connect((sender, widget) => {\n        // Notify the widget tracker if restore data needs to update.\n        widget.context.pathChanged.connect(() => {\n            void tracker.save(widget);\n        });\n        // Handle the settings of new widgets.\n        updateWidget(widget.content);\n        void tracker.add(widget);\n    });\n    docRegistry.addWidgetFactory(factory);\n    // Handle state restoration.\n    if (restorer) {\n        void restorer.restore(tracker, {\n            command: 'docmanager:open',\n            args: widget => ({ path: widget.context.path, factory: FACTORY }),\n            name: widget => widget.context.path\n        });\n    }\n    commands.addCommand(CommandIDs.markdownPreview, {\n        label: trans.__('Markdown Preview'),\n        execute: args => {\n            const path = args['path'];\n            if (typeof path !== 'string') {\n                return;\n            }\n            return commands.execute('docmanager:open', {\n                path,\n                factory: FACTORY,\n                options: args['options']\n            });\n        }\n    });\n    commands.addCommand(CommandIDs.markdownEditor, {\n        execute: () => {\n            const widget = tracker.currentWidget;\n            if (!widget) {\n                return;\n            }\n            const path = widget.context.path;\n            return commands.execute('docmanager:open', {\n                path,\n                factory: 'Editor',\n                options: {\n                    mode: 'split-right'\n                }\n            });\n        },\n        isVisible: () => {\n            const widget = tracker.currentWidget;\n            return ((widget && _jupyterlab_coreutils__WEBPACK_IMPORTED_MODULE_2__.PathExt.extname(widget.context.path) === '.md') || false);\n        },\n        label: trans.__('Show Markdown Editor')\n    });\n    return tracker;\n}\n/**\n * Export the plugin as default.\n */\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (plugin);\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/markdownviewer-extension/lib/index.js?");

/***/ }),

/***/ "../../node_modules/@jupyterlab/markdownviewer/lib/tokens.js":
/*!*******************************************************************!*\
  !*** ../../node_modules/@jupyterlab/markdownviewer/lib/tokens.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"IMarkdownViewerTracker\": () => (/* binding */ IMarkdownViewerTracker)\n/* harmony export */ });\n/* harmony import */ var _lumino_coreutils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @lumino/coreutils */ \"webpack/sharing/consume/default/@lumino/coreutils/@lumino/coreutils\");\n/* harmony import */ var _lumino_coreutils__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_lumino_coreutils__WEBPACK_IMPORTED_MODULE_0__);\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\n/**\n * The markdownviewer tracker token.\n */\nconst IMarkdownViewerTracker = new _lumino_coreutils__WEBPACK_IMPORTED_MODULE_0__.Token('@jupyterlab/markdownviewer:IMarkdownViewerTracker');\n//# sourceMappingURL=tokens.js.map\n\n//# sourceURL=webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/markdownviewer/lib/tokens.js?");

/***/ }),

/***/ "../../node_modules/@jupyterlab/markdownviewer/lib/widget.js":
/*!*******************************************************************!*\
  !*** ../../node_modules/@jupyterlab/markdownviewer/lib/widget.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"MarkdownDocument\": () => (/* binding */ MarkdownDocument),\n/* harmony export */   \"MarkdownViewer\": () => (/* binding */ MarkdownViewer),\n/* harmony export */   \"MarkdownViewerFactory\": () => (/* binding */ MarkdownViewerFactory)\n/* harmony export */ });\n/* harmony import */ var _jupyterlab_apputils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jupyterlab/apputils */ \"webpack/sharing/consume/default/@jupyterlab/apputils/@jupyterlab/apputils\");\n/* harmony import */ var _jupyterlab_apputils__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_apputils__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _jupyterlab_coreutils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jupyterlab/coreutils */ \"webpack/sharing/consume/default/@jupyterlab/coreutils/@jupyterlab/coreutils\");\n/* harmony import */ var _jupyterlab_coreutils__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_coreutils__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _jupyterlab_docregistry__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @jupyterlab/docregistry */ \"webpack/sharing/consume/default/@jupyterlab/docregistry/@jupyterlab/docregistry\");\n/* harmony import */ var _jupyterlab_docregistry__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_docregistry__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _jupyterlab_rendermime__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @jupyterlab/rendermime */ \"webpack/sharing/consume/default/@jupyterlab/rendermime/@jupyterlab/rendermime\");\n/* harmony import */ var _jupyterlab_rendermime__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_rendermime__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _jupyterlab_translation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @jupyterlab/translation */ \"webpack/sharing/consume/default/@jupyterlab/translation/@jupyterlab/translation\");\n/* harmony import */ var _jupyterlab_translation__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_translation__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _lumino_coreutils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @lumino/coreutils */ \"webpack/sharing/consume/default/@lumino/coreutils/@lumino/coreutils\");\n/* harmony import */ var _lumino_coreutils__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_lumino_coreutils__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _lumino_widgets__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @lumino/widgets */ \"webpack/sharing/consume/default/@lumino/widgets/@lumino/widgets\");\n/* harmony import */ var _lumino_widgets__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_lumino_widgets__WEBPACK_IMPORTED_MODULE_6__);\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\n\n\n\n\n\n\n/**\n * The class name added to a markdown viewer.\n */\nconst MARKDOWNVIEWER_CLASS = 'jp-MarkdownViewer';\n/**\n * The markdown MIME type.\n */\nconst MIMETYPE = 'text/markdown';\n/**\n * A widget for markdown documents.\n */\nclass MarkdownViewer extends _lumino_widgets__WEBPACK_IMPORTED_MODULE_6__.Widget {\n    /**\n     * Construct a new markdown viewer widget.\n     */\n    constructor(options) {\n        super();\n        this._config = Object.assign({}, MarkdownViewer.defaultConfig);\n        this._fragment = '';\n        this._ready = new _lumino_coreutils__WEBPACK_IMPORTED_MODULE_5__.PromiseDelegate();\n        this._isRendering = false;\n        this._renderRequested = false;\n        this.context = options.context;\n        this.translator = options.translator || _jupyterlab_translation__WEBPACK_IMPORTED_MODULE_4__.nullTranslator;\n        this._trans = this.translator.load('jupyterlab');\n        this.renderer = options.renderer;\n        this.node.tabIndex = 0;\n        this.addClass(MARKDOWNVIEWER_CLASS);\n        const layout = (this.layout = new _lumino_widgets__WEBPACK_IMPORTED_MODULE_6__.StackedLayout());\n        layout.addWidget(this.renderer);\n        void this.context.ready.then(async () => {\n            await this._render();\n            // Throttle the rendering rate of the widget.\n            this._monitor = new _jupyterlab_coreutils__WEBPACK_IMPORTED_MODULE_1__.ActivityMonitor({\n                signal: this.context.model.contentChanged,\n                timeout: this._config.renderTimeout\n            });\n            this._monitor.activityStopped.connect(this.update, this);\n            this._ready.resolve(undefined);\n        });\n    }\n    /**\n     * A promise that resolves when the markdown viewer is ready.\n     */\n    get ready() {\n        return this._ready.promise;\n    }\n    /**\n     * Set URI fragment identifier.\n     */\n    setFragment(fragment) {\n        this._fragment = fragment;\n        this.update();\n    }\n    /**\n     * Set a config option for the markdown viewer.\n     */\n    setOption(option, value) {\n        if (this._config[option] === value) {\n            return;\n        }\n        this._config[option] = value;\n        const { style } = this.renderer.node;\n        switch (option) {\n            case 'fontFamily':\n                style.setProperty('font-family', value);\n                break;\n            case 'fontSize':\n                style.setProperty('font-size', value ? value + 'px' : null);\n                break;\n            case 'hideFrontMatter':\n                this.update();\n                break;\n            case 'lineHeight':\n                style.setProperty('line-height', value ? value.toString() : null);\n                break;\n            case 'lineWidth': {\n                const padding = value ? `calc(50% - ${value / 2}ch)` : null;\n                style.setProperty('padding-left', padding);\n                style.setProperty('padding-right', padding);\n                break;\n            }\n            case 'renderTimeout':\n                if (this._monitor) {\n                    this._monitor.timeout = value;\n                }\n                break;\n            default:\n                break;\n        }\n    }\n    /**\n     * Dispose of the resources held by the widget.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        if (this._monitor) {\n            this._monitor.dispose();\n        }\n        this._monitor = null;\n        super.dispose();\n    }\n    /**\n     * Handle an `update-request` message to the widget.\n     */\n    onUpdateRequest(msg) {\n        if (this.context.isReady && !this.isDisposed) {\n            void this._render();\n            this._fragment = '';\n        }\n    }\n    /**\n     * Handle `'activate-request'` messages.\n     */\n    onActivateRequest(msg) {\n        this.node.focus();\n    }\n    /**\n     * Render the mime content.\n     */\n    async _render() {\n        if (this.isDisposed) {\n            return;\n        }\n        // Since rendering is async, we note render requests that happen while we\n        // actually are rendering for a future rendering.\n        if (this._isRendering) {\n            this._renderRequested = true;\n            return;\n        }\n        // Set up for this rendering pass.\n        this._renderRequested = false;\n        const { context } = this;\n        const { model } = context;\n        const source = model.toString();\n        const data = {};\n        // If `hideFrontMatter`is true remove front matter.\n        data[MIMETYPE] = this._config.hideFrontMatter\n            ? Private.removeFrontMatter(source)\n            : source;\n        const mimeModel = new _jupyterlab_rendermime__WEBPACK_IMPORTED_MODULE_3__.MimeModel({\n            data,\n            metadata: { fragment: this._fragment }\n        });\n        try {\n            // Do the rendering asynchronously.\n            this._isRendering = true;\n            await this.renderer.renderModel(mimeModel);\n            this._isRendering = false;\n            // If there is an outstanding request to render, go ahead and render\n            if (this._renderRequested) {\n                return this._render();\n            }\n        }\n        catch (reason) {\n            // Dispose the document if rendering fails.\n            requestAnimationFrame(() => {\n                this.dispose();\n            });\n            void (0,_jupyterlab_apputils__WEBPACK_IMPORTED_MODULE_0__.showErrorMessage)(this._trans.__('Renderer Failure: %1', context.path), reason);\n        }\n    }\n}\n/**\n * The namespace for MarkdownViewer class statics.\n */\n(function (MarkdownViewer) {\n    /**\n     * The default configuration options for an editor.\n     */\n    MarkdownViewer.defaultConfig = {\n        fontFamily: null,\n        fontSize: null,\n        lineHeight: null,\n        lineWidth: null,\n        hideFrontMatter: true,\n        renderTimeout: 1000\n    };\n})(MarkdownViewer || (MarkdownViewer = {}));\n/**\n * A document widget for markdown content.\n */\nclass MarkdownDocument extends _jupyterlab_docregistry__WEBPACK_IMPORTED_MODULE_2__.DocumentWidget {\n    setFragment(fragment) {\n        this.content.setFragment(fragment);\n    }\n}\n/**\n * A widget factory for markdown viewers.\n */\nclass MarkdownViewerFactory extends _jupyterlab_docregistry__WEBPACK_IMPORTED_MODULE_2__.ABCWidgetFactory {\n    /**\n     * Construct a new markdown viewer widget factory.\n     */\n    constructor(options) {\n        super(Private.createRegistryOptions(options));\n        this._fileType = options.primaryFileType;\n        this._rendermime = options.rendermime;\n    }\n    /**\n     * Create a new widget given a context.\n     */\n    createNewWidget(context) {\n        var _a, _b, _c, _d, _e;\n        const rendermime = this._rendermime.clone({\n            resolver: context.urlResolver\n        });\n        const renderer = rendermime.createRenderer(MIMETYPE);\n        const content = new MarkdownViewer({ context, renderer });\n        content.title.icon = (_a = this._fileType) === null || _a === void 0 ? void 0 : _a.icon;\n        content.title.iconClass = (_c = (_b = this._fileType) === null || _b === void 0 ? void 0 : _b.iconClass) !== null && _c !== void 0 ? _c : '';\n        content.title.iconLabel = (_e = (_d = this._fileType) === null || _d === void 0 ? void 0 : _d.iconLabel) !== null && _e !== void 0 ? _e : '';\n        const widget = new MarkdownDocument({ content, context });\n        return widget;\n    }\n}\n/**\n * A namespace for markdown viewer widget private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Create the document registry options.\n     */\n    function createRegistryOptions(options) {\n        return Object.assign(Object.assign({}, options), { readOnly: true });\n    }\n    Private.createRegistryOptions = createRegistryOptions;\n    /**\n     * Remove YALM front matter from source.\n     */\n    function removeFrontMatter(source) {\n        const re = /^---\\n[^]*?\\n(---|...)\\n/;\n        const match = source.match(re);\n        if (!match) {\n            return source;\n        }\n        const { length } = match[0];\n        return source.slice(length);\n    }\n    Private.removeFrontMatter = removeFrontMatter;\n})(Private || (Private = {}));\n//# sourceMappingURL=widget.js.map\n\n//# sourceURL=webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/markdownviewer/lib/widget.js?");

/***/ })

}]);