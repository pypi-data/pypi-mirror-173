import sys

sys.path.insert(0, "../")

from functools import partial
import numpy as np
import tensorcircuit as tc
from tensorcircuit.applications.dqas import *
from tensorcircuit.applications.graphdata import *
from tensorcircuit.applications.layers import *

tc.set_backend("tensorflow")
set_op_pool([cirqHlayer, cirqrxlayer, cirqrylayer, cirqrzlayer, cirqzzlayer])
quantum_qaoa_vag_p = partial(quantum_qaoa_vag, hzz=-1.0, hz=-1.0, hx=-0.5)
g = dress_graph_with_cirq_qubit(graph1D(8))


def my_verbose():
    prob = get_var("prob")
    print("max probability for each layer:")
    print(np.max(prob.numpy(), axis=1))
    nnp = get_var("nnp")
    stp = get_var("stp")
    cand_weight = get_weights(nnp, stp).numpy()
    print(
        "And associating weights:",
        cand_weight,
    )


c = len(get_op_pool())
p = 7
pres = None  # [0, 4, 1, 3, 4,1,3]
stp = np.zeros([p, c])
if pres:
    for i, j in enumerate(pres):
        stp[i, j] = 10.0

DQAS_search(
    quantum_qaoa_vag_p,
    g=single_generator(g),
    prethermal=0,
    epochs=1000,
    batch=14 * 16,
    p=p,
    stp_initial_value=stp,
    parallel_num=28,
    nnp_initial_value=np.random.normal(loc=0.3, scale=0.6, size=[p, c]),
    verbose_func=my_verbose,
)
