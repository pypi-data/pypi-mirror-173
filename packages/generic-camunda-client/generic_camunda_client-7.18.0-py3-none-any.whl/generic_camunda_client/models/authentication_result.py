# coding: utf-8

"""
    Camunda Platform REST API

    OpenApi Spec for Camunda Platform REST API.  # noqa: E501

    The version of the OpenAPI document: 7.18.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from generic_camunda_client.configuration import Configuration


class AuthenticationResult(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'authenticated_user': 'str',
        'is_authenticated': 'bool',
        'tenants': 'list[str]',
        'groups': 'list[str]'
    }

    attribute_map = {
        'authenticated_user': 'authenticatedUser',
        'is_authenticated': 'isAuthenticated',
        'tenants': 'tenants',
        'groups': 'groups'
    }

    def __init__(self, authenticated_user=None, is_authenticated=None, tenants=None, groups=None, local_vars_configuration=None):  # noqa: E501
        """AuthenticationResult - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._authenticated_user = None
        self._is_authenticated = None
        self._tenants = None
        self._groups = None
        self.discriminator = None

        self.authenticated_user = authenticated_user
        self.is_authenticated = is_authenticated
        self.tenants = tenants
        self.groups = groups

    @property
    def authenticated_user(self):
        """Gets the authenticated_user of this AuthenticationResult.  # noqa: E501

        An id of authenticated user.  # noqa: E501

        :return: The authenticated_user of this AuthenticationResult.  # noqa: E501
        :rtype: str
        """
        return self._authenticated_user

    @authenticated_user.setter
    def authenticated_user(self, authenticated_user):
        """Sets the authenticated_user of this AuthenticationResult.

        An id of authenticated user.  # noqa: E501

        :param authenticated_user: The authenticated_user of this AuthenticationResult.  # noqa: E501
        :type: str
        """

        self._authenticated_user = authenticated_user

    @property
    def is_authenticated(self):
        """Gets the is_authenticated of this AuthenticationResult.  # noqa: E501

        A flag indicating if user is authenticated.  # noqa: E501

        :return: The is_authenticated of this AuthenticationResult.  # noqa: E501
        :rtype: bool
        """
        return self._is_authenticated

    @is_authenticated.setter
    def is_authenticated(self, is_authenticated):
        """Sets the is_authenticated of this AuthenticationResult.

        A flag indicating if user is authenticated.  # noqa: E501

        :param is_authenticated: The is_authenticated of this AuthenticationResult.  # noqa: E501
        :type: bool
        """

        self._is_authenticated = is_authenticated

    @property
    def tenants(self):
        """Gets the tenants of this AuthenticationResult.  # noqa: E501

        Will be null.  # noqa: E501

        :return: The tenants of this AuthenticationResult.  # noqa: E501
        :rtype: list[str]
        """
        return self._tenants

    @tenants.setter
    def tenants(self, tenants):
        """Sets the tenants of this AuthenticationResult.

        Will be null.  # noqa: E501

        :param tenants: The tenants of this AuthenticationResult.  # noqa: E501
        :type: list[str]
        """

        self._tenants = tenants

    @property
    def groups(self):
        """Gets the groups of this AuthenticationResult.  # noqa: E501

        Will be null.  # noqa: E501

        :return: The groups of this AuthenticationResult.  # noqa: E501
        :rtype: list[str]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this AuthenticationResult.

        Will be null.  # noqa: E501

        :param groups: The groups of this AuthenticationResult.  # noqa: E501
        :type: list[str]
        """

        self._groups = groups

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuthenticationResult):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AuthenticationResult):
            return True

        return self.to_dict() != other.to_dict()
