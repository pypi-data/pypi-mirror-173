# coding: utf-8

"""
    Camunda Platform REST API

    OpenApi Spec for Camunda Platform REST API.  # noqa: E501

    The version of the OpenAPI document: 7.18.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from generic_camunda_client.configuration import Configuration


class HistoricDecisionInstanceQueryDto(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'decision_instance_id': 'str',
        'decision_instance_id_in': 'list[str]',
        'decision_definition_id': 'str',
        'decision_definition_id_in': 'list[str]',
        'decision_definition_key': 'str',
        'decision_definition_key_in': 'list[str]',
        'decision_definition_name': 'str',
        'decision_definition_name_like': 'str',
        'process_definition_id': 'str',
        'process_definition_key': 'str',
        'process_instance_id': 'str',
        'case_definition_id': 'str',
        'case_definition_key': 'str',
        'case_instance_id': 'str',
        'activity_id_in': 'list[str]',
        'activity_instance_id_in': 'list[str]',
        'tenant_id_in': 'list[str]',
        'without_tenant_id': 'bool',
        'evaluated_before': 'datetime',
        'evaluated_after': 'datetime',
        'user_id': 'str',
        'root_decision_instance_id': 'str',
        'root_decision_instances_only': 'bool',
        'decision_requirements_definition_id': 'str',
        'decision_requirements_definition_key': 'str',
        'include_inputs': 'bool',
        'include_outputs': 'bool',
        'disable_binary_fetching': 'bool',
        'disable_custom_object_deserialization': 'bool'
    }

    attribute_map = {
        'decision_instance_id': 'decisionInstanceId',
        'decision_instance_id_in': 'decisionInstanceIdIn',
        'decision_definition_id': 'decisionDefinitionId',
        'decision_definition_id_in': 'decisionDefinitionIdIn',
        'decision_definition_key': 'decisionDefinitionKey',
        'decision_definition_key_in': 'decisionDefinitionKeyIn',
        'decision_definition_name': 'decisionDefinitionName',
        'decision_definition_name_like': 'decisionDefinitionNameLike',
        'process_definition_id': 'processDefinitionId',
        'process_definition_key': 'processDefinitionKey',
        'process_instance_id': 'processInstanceId',
        'case_definition_id': 'caseDefinitionId',
        'case_definition_key': 'caseDefinitionKey',
        'case_instance_id': 'caseInstanceId',
        'activity_id_in': 'activityIdIn',
        'activity_instance_id_in': 'activityInstanceIdIn',
        'tenant_id_in': 'tenantIdIn',
        'without_tenant_id': 'withoutTenantId',
        'evaluated_before': 'evaluatedBefore',
        'evaluated_after': 'evaluatedAfter',
        'user_id': 'userId',
        'root_decision_instance_id': 'rootDecisionInstanceId',
        'root_decision_instances_only': 'rootDecisionInstancesOnly',
        'decision_requirements_definition_id': 'decisionRequirementsDefinitionId',
        'decision_requirements_definition_key': 'decisionRequirementsDefinitionKey',
        'include_inputs': 'includeInputs',
        'include_outputs': 'includeOutputs',
        'disable_binary_fetching': 'disableBinaryFetching',
        'disable_custom_object_deserialization': 'disableCustomObjectDeserialization'
    }

    def __init__(self, decision_instance_id=None, decision_instance_id_in=None, decision_definition_id=None, decision_definition_id_in=None, decision_definition_key=None, decision_definition_key_in=None, decision_definition_name=None, decision_definition_name_like=None, process_definition_id=None, process_definition_key=None, process_instance_id=None, case_definition_id=None, case_definition_key=None, case_instance_id=None, activity_id_in=None, activity_instance_id_in=None, tenant_id_in=None, without_tenant_id=None, evaluated_before=None, evaluated_after=None, user_id=None, root_decision_instance_id=None, root_decision_instances_only=None, decision_requirements_definition_id=None, decision_requirements_definition_key=None, include_inputs=None, include_outputs=None, disable_binary_fetching=None, disable_custom_object_deserialization=None, local_vars_configuration=None):  # noqa: E501
        """HistoricDecisionInstanceQueryDto - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._decision_instance_id = None
        self._decision_instance_id_in = None
        self._decision_definition_id = None
        self._decision_definition_id_in = None
        self._decision_definition_key = None
        self._decision_definition_key_in = None
        self._decision_definition_name = None
        self._decision_definition_name_like = None
        self._process_definition_id = None
        self._process_definition_key = None
        self._process_instance_id = None
        self._case_definition_id = None
        self._case_definition_key = None
        self._case_instance_id = None
        self._activity_id_in = None
        self._activity_instance_id_in = None
        self._tenant_id_in = None
        self._without_tenant_id = None
        self._evaluated_before = None
        self._evaluated_after = None
        self._user_id = None
        self._root_decision_instance_id = None
        self._root_decision_instances_only = None
        self._decision_requirements_definition_id = None
        self._decision_requirements_definition_key = None
        self._include_inputs = None
        self._include_outputs = None
        self._disable_binary_fetching = None
        self._disable_custom_object_deserialization = None
        self.discriminator = None

        self.decision_instance_id = decision_instance_id
        self.decision_instance_id_in = decision_instance_id_in
        self.decision_definition_id = decision_definition_id
        self.decision_definition_id_in = decision_definition_id_in
        self.decision_definition_key = decision_definition_key
        self.decision_definition_key_in = decision_definition_key_in
        self.decision_definition_name = decision_definition_name
        self.decision_definition_name_like = decision_definition_name_like
        self.process_definition_id = process_definition_id
        self.process_definition_key = process_definition_key
        self.process_instance_id = process_instance_id
        self.case_definition_id = case_definition_id
        self.case_definition_key = case_definition_key
        self.case_instance_id = case_instance_id
        self.activity_id_in = activity_id_in
        self.activity_instance_id_in = activity_instance_id_in
        self.tenant_id_in = tenant_id_in
        self.without_tenant_id = without_tenant_id
        self.evaluated_before = evaluated_before
        self.evaluated_after = evaluated_after
        self.user_id = user_id
        self.root_decision_instance_id = root_decision_instance_id
        self.root_decision_instances_only = root_decision_instances_only
        self.decision_requirements_definition_id = decision_requirements_definition_id
        self.decision_requirements_definition_key = decision_requirements_definition_key
        self.include_inputs = include_inputs
        self.include_outputs = include_outputs
        self.disable_binary_fetching = disable_binary_fetching
        self.disable_custom_object_deserialization = disable_custom_object_deserialization

    @property
    def decision_instance_id(self):
        """Gets the decision_instance_id of this HistoricDecisionInstanceQueryDto.  # noqa: E501

        Filter by decision instance id.  # noqa: E501

        :return: The decision_instance_id of this HistoricDecisionInstanceQueryDto.  # noqa: E501
        :rtype: str
        """
        return self._decision_instance_id

    @decision_instance_id.setter
    def decision_instance_id(self, decision_instance_id):
        """Sets the decision_instance_id of this HistoricDecisionInstanceQueryDto.

        Filter by decision instance id.  # noqa: E501

        :param decision_instance_id: The decision_instance_id of this HistoricDecisionInstanceQueryDto.  # noqa: E501
        :type: str
        """

        self._decision_instance_id = decision_instance_id

    @property
    def decision_instance_id_in(self):
        """Gets the decision_instance_id_in of this HistoricDecisionInstanceQueryDto.  # noqa: E501

        Filter by decision instance ids. Must be a comma-separated list of decision instance ids.  # noqa: E501

        :return: The decision_instance_id_in of this HistoricDecisionInstanceQueryDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._decision_instance_id_in

    @decision_instance_id_in.setter
    def decision_instance_id_in(self, decision_instance_id_in):
        """Sets the decision_instance_id_in of this HistoricDecisionInstanceQueryDto.

        Filter by decision instance ids. Must be a comma-separated list of decision instance ids.  # noqa: E501

        :param decision_instance_id_in: The decision_instance_id_in of this HistoricDecisionInstanceQueryDto.  # noqa: E501
        :type: list[str]
        """

        self._decision_instance_id_in = decision_instance_id_in

    @property
    def decision_definition_id(self):
        """Gets the decision_definition_id of this HistoricDecisionInstanceQueryDto.  # noqa: E501

        Filter by the decision definition the instances belongs to.  # noqa: E501

        :return: The decision_definition_id of this HistoricDecisionInstanceQueryDto.  # noqa: E501
        :rtype: str
        """
        return self._decision_definition_id

    @decision_definition_id.setter
    def decision_definition_id(self, decision_definition_id):
        """Sets the decision_definition_id of this HistoricDecisionInstanceQueryDto.

        Filter by the decision definition the instances belongs to.  # noqa: E501

        :param decision_definition_id: The decision_definition_id of this HistoricDecisionInstanceQueryDto.  # noqa: E501
        :type: str
        """

        self._decision_definition_id = decision_definition_id

    @property
    def decision_definition_id_in(self):
        """Gets the decision_definition_id_in of this HistoricDecisionInstanceQueryDto.  # noqa: E501

        Filter by the decision definitions the instances belongs to. Must be a comma-separated list of decision definition ids.  # noqa: E501

        :return: The decision_definition_id_in of this HistoricDecisionInstanceQueryDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._decision_definition_id_in

    @decision_definition_id_in.setter
    def decision_definition_id_in(self, decision_definition_id_in):
        """Sets the decision_definition_id_in of this HistoricDecisionInstanceQueryDto.

        Filter by the decision definitions the instances belongs to. Must be a comma-separated list of decision definition ids.  # noqa: E501

        :param decision_definition_id_in: The decision_definition_id_in of this HistoricDecisionInstanceQueryDto.  # noqa: E501
        :type: list[str]
        """

        self._decision_definition_id_in = decision_definition_id_in

    @property
    def decision_definition_key(self):
        """Gets the decision_definition_key of this HistoricDecisionInstanceQueryDto.  # noqa: E501

        Filter by the key of the decision definition the instances belongs to.  # noqa: E501

        :return: The decision_definition_key of this HistoricDecisionInstanceQueryDto.  # noqa: E501
        :rtype: str
        """
        return self._decision_definition_key

    @decision_definition_key.setter
    def decision_definition_key(self, decision_definition_key):
        """Sets the decision_definition_key of this HistoricDecisionInstanceQueryDto.

        Filter by the key of the decision definition the instances belongs to.  # noqa: E501

        :param decision_definition_key: The decision_definition_key of this HistoricDecisionInstanceQueryDto.  # noqa: E501
        :type: str
        """

        self._decision_definition_key = decision_definition_key

    @property
    def decision_definition_key_in(self):
        """Gets the decision_definition_key_in of this HistoricDecisionInstanceQueryDto.  # noqa: E501

        Filter by the keys of the decision definition the instances belongs to. Must be a comma- separated list of decision definition keys.  # noqa: E501

        :return: The decision_definition_key_in of this HistoricDecisionInstanceQueryDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._decision_definition_key_in

    @decision_definition_key_in.setter
    def decision_definition_key_in(self, decision_definition_key_in):
        """Sets the decision_definition_key_in of this HistoricDecisionInstanceQueryDto.

        Filter by the keys of the decision definition the instances belongs to. Must be a comma- separated list of decision definition keys.  # noqa: E501

        :param decision_definition_key_in: The decision_definition_key_in of this HistoricDecisionInstanceQueryDto.  # noqa: E501
        :type: list[str]
        """

        self._decision_definition_key_in = decision_definition_key_in

    @property
    def decision_definition_name(self):
        """Gets the decision_definition_name of this HistoricDecisionInstanceQueryDto.  # noqa: E501

        Filter by the name of the decision definition the instances belongs to.  # noqa: E501

        :return: The decision_definition_name of this HistoricDecisionInstanceQueryDto.  # noqa: E501
        :rtype: str
        """
        return self._decision_definition_name

    @decision_definition_name.setter
    def decision_definition_name(self, decision_definition_name):
        """Sets the decision_definition_name of this HistoricDecisionInstanceQueryDto.

        Filter by the name of the decision definition the instances belongs to.  # noqa: E501

        :param decision_definition_name: The decision_definition_name of this HistoricDecisionInstanceQueryDto.  # noqa: E501
        :type: str
        """

        self._decision_definition_name = decision_definition_name

    @property
    def decision_definition_name_like(self):
        """Gets the decision_definition_name_like of this HistoricDecisionInstanceQueryDto.  # noqa: E501

        Filter by the name of the decision definition the instances belongs to, that the parameter is a substring of.  # noqa: E501

        :return: The decision_definition_name_like of this HistoricDecisionInstanceQueryDto.  # noqa: E501
        :rtype: str
        """
        return self._decision_definition_name_like

    @decision_definition_name_like.setter
    def decision_definition_name_like(self, decision_definition_name_like):
        """Sets the decision_definition_name_like of this HistoricDecisionInstanceQueryDto.

        Filter by the name of the decision definition the instances belongs to, that the parameter is a substring of.  # noqa: E501

        :param decision_definition_name_like: The decision_definition_name_like of this HistoricDecisionInstanceQueryDto.  # noqa: E501
        :type: str
        """

        self._decision_definition_name_like = decision_definition_name_like

    @property
    def process_definition_id(self):
        """Gets the process_definition_id of this HistoricDecisionInstanceQueryDto.  # noqa: E501

        Filter by the process definition the instances belongs to.  # noqa: E501

        :return: The process_definition_id of this HistoricDecisionInstanceQueryDto.  # noqa: E501
        :rtype: str
        """
        return self._process_definition_id

    @process_definition_id.setter
    def process_definition_id(self, process_definition_id):
        """Sets the process_definition_id of this HistoricDecisionInstanceQueryDto.

        Filter by the process definition the instances belongs to.  # noqa: E501

        :param process_definition_id: The process_definition_id of this HistoricDecisionInstanceQueryDto.  # noqa: E501
        :type: str
        """

        self._process_definition_id = process_definition_id

    @property
    def process_definition_key(self):
        """Gets the process_definition_key of this HistoricDecisionInstanceQueryDto.  # noqa: E501

        Filter by the key of the process definition the instances belongs to.  # noqa: E501

        :return: The process_definition_key of this HistoricDecisionInstanceQueryDto.  # noqa: E501
        :rtype: str
        """
        return self._process_definition_key

    @process_definition_key.setter
    def process_definition_key(self, process_definition_key):
        """Sets the process_definition_key of this HistoricDecisionInstanceQueryDto.

        Filter by the key of the process definition the instances belongs to.  # noqa: E501

        :param process_definition_key: The process_definition_key of this HistoricDecisionInstanceQueryDto.  # noqa: E501
        :type: str
        """

        self._process_definition_key = process_definition_key

    @property
    def process_instance_id(self):
        """Gets the process_instance_id of this HistoricDecisionInstanceQueryDto.  # noqa: E501

        Filter by the process instance the instances belongs to.  # noqa: E501

        :return: The process_instance_id of this HistoricDecisionInstanceQueryDto.  # noqa: E501
        :rtype: str
        """
        return self._process_instance_id

    @process_instance_id.setter
    def process_instance_id(self, process_instance_id):
        """Sets the process_instance_id of this HistoricDecisionInstanceQueryDto.

        Filter by the process instance the instances belongs to.  # noqa: E501

        :param process_instance_id: The process_instance_id of this HistoricDecisionInstanceQueryDto.  # noqa: E501
        :type: str
        """

        self._process_instance_id = process_instance_id

    @property
    def case_definition_id(self):
        """Gets the case_definition_id of this HistoricDecisionInstanceQueryDto.  # noqa: E501

        Filter by the case definition the instances belongs to.  # noqa: E501

        :return: The case_definition_id of this HistoricDecisionInstanceQueryDto.  # noqa: E501
        :rtype: str
        """
        return self._case_definition_id

    @case_definition_id.setter
    def case_definition_id(self, case_definition_id):
        """Sets the case_definition_id of this HistoricDecisionInstanceQueryDto.

        Filter by the case definition the instances belongs to.  # noqa: E501

        :param case_definition_id: The case_definition_id of this HistoricDecisionInstanceQueryDto.  # noqa: E501
        :type: str
        """

        self._case_definition_id = case_definition_id

    @property
    def case_definition_key(self):
        """Gets the case_definition_key of this HistoricDecisionInstanceQueryDto.  # noqa: E501

        Filter by the key of the case definition the instances belongs to.  # noqa: E501

        :return: The case_definition_key of this HistoricDecisionInstanceQueryDto.  # noqa: E501
        :rtype: str
        """
        return self._case_definition_key

    @case_definition_key.setter
    def case_definition_key(self, case_definition_key):
        """Sets the case_definition_key of this HistoricDecisionInstanceQueryDto.

        Filter by the key of the case definition the instances belongs to.  # noqa: E501

        :param case_definition_key: The case_definition_key of this HistoricDecisionInstanceQueryDto.  # noqa: E501
        :type: str
        """

        self._case_definition_key = case_definition_key

    @property
    def case_instance_id(self):
        """Gets the case_instance_id of this HistoricDecisionInstanceQueryDto.  # noqa: E501

        Filter by the case instance the instances belongs to.  # noqa: E501

        :return: The case_instance_id of this HistoricDecisionInstanceQueryDto.  # noqa: E501
        :rtype: str
        """
        return self._case_instance_id

    @case_instance_id.setter
    def case_instance_id(self, case_instance_id):
        """Sets the case_instance_id of this HistoricDecisionInstanceQueryDto.

        Filter by the case instance the instances belongs to.  # noqa: E501

        :param case_instance_id: The case_instance_id of this HistoricDecisionInstanceQueryDto.  # noqa: E501
        :type: str
        """

        self._case_instance_id = case_instance_id

    @property
    def activity_id_in(self):
        """Gets the activity_id_in of this HistoricDecisionInstanceQueryDto.  # noqa: E501

        Filter by the activity ids the instances belongs to. Must be a comma-separated list of acitvity ids.  # noqa: E501

        :return: The activity_id_in of this HistoricDecisionInstanceQueryDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._activity_id_in

    @activity_id_in.setter
    def activity_id_in(self, activity_id_in):
        """Sets the activity_id_in of this HistoricDecisionInstanceQueryDto.

        Filter by the activity ids the instances belongs to. Must be a comma-separated list of acitvity ids.  # noqa: E501

        :param activity_id_in: The activity_id_in of this HistoricDecisionInstanceQueryDto.  # noqa: E501
        :type: list[str]
        """

        self._activity_id_in = activity_id_in

    @property
    def activity_instance_id_in(self):
        """Gets the activity_instance_id_in of this HistoricDecisionInstanceQueryDto.  # noqa: E501

        Filter by the activity instance ids the instances belongs to. Must be a comma-separated list of acitvity instance ids.  # noqa: E501

        :return: The activity_instance_id_in of this HistoricDecisionInstanceQueryDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._activity_instance_id_in

    @activity_instance_id_in.setter
    def activity_instance_id_in(self, activity_instance_id_in):
        """Sets the activity_instance_id_in of this HistoricDecisionInstanceQueryDto.

        Filter by the activity instance ids the instances belongs to. Must be a comma-separated list of acitvity instance ids.  # noqa: E501

        :param activity_instance_id_in: The activity_instance_id_in of this HistoricDecisionInstanceQueryDto.  # noqa: E501
        :type: list[str]
        """

        self._activity_instance_id_in = activity_instance_id_in

    @property
    def tenant_id_in(self):
        """Gets the tenant_id_in of this HistoricDecisionInstanceQueryDto.  # noqa: E501

        Filter by a comma-separated list of tenant ids. A historic decision instance must have one of the given tenant ids.  # noqa: E501

        :return: The tenant_id_in of this HistoricDecisionInstanceQueryDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._tenant_id_in

    @tenant_id_in.setter
    def tenant_id_in(self, tenant_id_in):
        """Sets the tenant_id_in of this HistoricDecisionInstanceQueryDto.

        Filter by a comma-separated list of tenant ids. A historic decision instance must have one of the given tenant ids.  # noqa: E501

        :param tenant_id_in: The tenant_id_in of this HistoricDecisionInstanceQueryDto.  # noqa: E501
        :type: list[str]
        """

        self._tenant_id_in = tenant_id_in

    @property
    def without_tenant_id(self):
        """Gets the without_tenant_id of this HistoricDecisionInstanceQueryDto.  # noqa: E501

        Only include historic decision instances that belong to no tenant. Value may only be `true`, as `false` is the default behavior.  # noqa: E501

        :return: The without_tenant_id of this HistoricDecisionInstanceQueryDto.  # noqa: E501
        :rtype: bool
        """
        return self._without_tenant_id

    @without_tenant_id.setter
    def without_tenant_id(self, without_tenant_id):
        """Sets the without_tenant_id of this HistoricDecisionInstanceQueryDto.

        Only include historic decision instances that belong to no tenant. Value may only be `true`, as `false` is the default behavior.  # noqa: E501

        :param without_tenant_id: The without_tenant_id of this HistoricDecisionInstanceQueryDto.  # noqa: E501
        :type: bool
        """

        self._without_tenant_id = without_tenant_id

    @property
    def evaluated_before(self):
        """Gets the evaluated_before of this HistoricDecisionInstanceQueryDto.  # noqa: E501

        Restrict to instances that were evaluated before the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format `yyyy-MM- dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.  # noqa: E501

        :return: The evaluated_before of this HistoricDecisionInstanceQueryDto.  # noqa: E501
        :rtype: datetime
        """
        return self._evaluated_before

    @evaluated_before.setter
    def evaluated_before(self, evaluated_before):
        """Sets the evaluated_before of this HistoricDecisionInstanceQueryDto.

        Restrict to instances that were evaluated before the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format `yyyy-MM- dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.  # noqa: E501

        :param evaluated_before: The evaluated_before of this HistoricDecisionInstanceQueryDto.  # noqa: E501
        :type: datetime
        """

        self._evaluated_before = evaluated_before

    @property
    def evaluated_after(self):
        """Gets the evaluated_after of this HistoricDecisionInstanceQueryDto.  # noqa: E501

        Restrict to instances that were evaluated after the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format `yyyy-MM- dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.  # noqa: E501

        :return: The evaluated_after of this HistoricDecisionInstanceQueryDto.  # noqa: E501
        :rtype: datetime
        """
        return self._evaluated_after

    @evaluated_after.setter
    def evaluated_after(self, evaluated_after):
        """Sets the evaluated_after of this HistoricDecisionInstanceQueryDto.

        Restrict to instances that were evaluated after the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format `yyyy-MM- dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.  # noqa: E501

        :param evaluated_after: The evaluated_after of this HistoricDecisionInstanceQueryDto.  # noqa: E501
        :type: datetime
        """

        self._evaluated_after = evaluated_after

    @property
    def user_id(self):
        """Gets the user_id of this HistoricDecisionInstanceQueryDto.  # noqa: E501

        Restrict to instances that were evaluated by the given user.  # noqa: E501

        :return: The user_id of this HistoricDecisionInstanceQueryDto.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this HistoricDecisionInstanceQueryDto.

        Restrict to instances that were evaluated by the given user.  # noqa: E501

        :param user_id: The user_id of this HistoricDecisionInstanceQueryDto.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def root_decision_instance_id(self):
        """Gets the root_decision_instance_id of this HistoricDecisionInstanceQueryDto.  # noqa: E501

        Restrict to instances that have a given root decision instance id. This also includes the decision instance with the given id.  # noqa: E501

        :return: The root_decision_instance_id of this HistoricDecisionInstanceQueryDto.  # noqa: E501
        :rtype: str
        """
        return self._root_decision_instance_id

    @root_decision_instance_id.setter
    def root_decision_instance_id(self, root_decision_instance_id):
        """Sets the root_decision_instance_id of this HistoricDecisionInstanceQueryDto.

        Restrict to instances that have a given root decision instance id. This also includes the decision instance with the given id.  # noqa: E501

        :param root_decision_instance_id: The root_decision_instance_id of this HistoricDecisionInstanceQueryDto.  # noqa: E501
        :type: str
        """

        self._root_decision_instance_id = root_decision_instance_id

    @property
    def root_decision_instances_only(self):
        """Gets the root_decision_instances_only of this HistoricDecisionInstanceQueryDto.  # noqa: E501

        Restrict to instances those are the root decision instance of an evaluation. Value may only be `true`, as `false` is the default behavior.  # noqa: E501

        :return: The root_decision_instances_only of this HistoricDecisionInstanceQueryDto.  # noqa: E501
        :rtype: bool
        """
        return self._root_decision_instances_only

    @root_decision_instances_only.setter
    def root_decision_instances_only(self, root_decision_instances_only):
        """Sets the root_decision_instances_only of this HistoricDecisionInstanceQueryDto.

        Restrict to instances those are the root decision instance of an evaluation. Value may only be `true`, as `false` is the default behavior.  # noqa: E501

        :param root_decision_instances_only: The root_decision_instances_only of this HistoricDecisionInstanceQueryDto.  # noqa: E501
        :type: bool
        """

        self._root_decision_instances_only = root_decision_instances_only

    @property
    def decision_requirements_definition_id(self):
        """Gets the decision_requirements_definition_id of this HistoricDecisionInstanceQueryDto.  # noqa: E501

        Filter by the decision requirements definition the instances belongs to.  # noqa: E501

        :return: The decision_requirements_definition_id of this HistoricDecisionInstanceQueryDto.  # noqa: E501
        :rtype: str
        """
        return self._decision_requirements_definition_id

    @decision_requirements_definition_id.setter
    def decision_requirements_definition_id(self, decision_requirements_definition_id):
        """Sets the decision_requirements_definition_id of this HistoricDecisionInstanceQueryDto.

        Filter by the decision requirements definition the instances belongs to.  # noqa: E501

        :param decision_requirements_definition_id: The decision_requirements_definition_id of this HistoricDecisionInstanceQueryDto.  # noqa: E501
        :type: str
        """

        self._decision_requirements_definition_id = decision_requirements_definition_id

    @property
    def decision_requirements_definition_key(self):
        """Gets the decision_requirements_definition_key of this HistoricDecisionInstanceQueryDto.  # noqa: E501

        Filter by the key of the decision requirements definition the instances belongs to.  # noqa: E501

        :return: The decision_requirements_definition_key of this HistoricDecisionInstanceQueryDto.  # noqa: E501
        :rtype: str
        """
        return self._decision_requirements_definition_key

    @decision_requirements_definition_key.setter
    def decision_requirements_definition_key(self, decision_requirements_definition_key):
        """Sets the decision_requirements_definition_key of this HistoricDecisionInstanceQueryDto.

        Filter by the key of the decision requirements definition the instances belongs to.  # noqa: E501

        :param decision_requirements_definition_key: The decision_requirements_definition_key of this HistoricDecisionInstanceQueryDto.  # noqa: E501
        :type: str
        """

        self._decision_requirements_definition_key = decision_requirements_definition_key

    @property
    def include_inputs(self):
        """Gets the include_inputs of this HistoricDecisionInstanceQueryDto.  # noqa: E501

        Include input values in the result. Value may only be `true`, as `false` is the default behavior.  # noqa: E501

        :return: The include_inputs of this HistoricDecisionInstanceQueryDto.  # noqa: E501
        :rtype: bool
        """
        return self._include_inputs

    @include_inputs.setter
    def include_inputs(self, include_inputs):
        """Sets the include_inputs of this HistoricDecisionInstanceQueryDto.

        Include input values in the result. Value may only be `true`, as `false` is the default behavior.  # noqa: E501

        :param include_inputs: The include_inputs of this HistoricDecisionInstanceQueryDto.  # noqa: E501
        :type: bool
        """

        self._include_inputs = include_inputs

    @property
    def include_outputs(self):
        """Gets the include_outputs of this HistoricDecisionInstanceQueryDto.  # noqa: E501

        Include output values in the result. Value may only be `true`, as `false` is the default behavior.  # noqa: E501

        :return: The include_outputs of this HistoricDecisionInstanceQueryDto.  # noqa: E501
        :rtype: bool
        """
        return self._include_outputs

    @include_outputs.setter
    def include_outputs(self, include_outputs):
        """Sets the include_outputs of this HistoricDecisionInstanceQueryDto.

        Include output values in the result. Value may only be `true`, as `false` is the default behavior.  # noqa: E501

        :param include_outputs: The include_outputs of this HistoricDecisionInstanceQueryDto.  # noqa: E501
        :type: bool
        """

        self._include_outputs = include_outputs

    @property
    def disable_binary_fetching(self):
        """Gets the disable_binary_fetching of this HistoricDecisionInstanceQueryDto.  # noqa: E501

        Disables fetching of byte array input and output values. Value may only be `true`, as `false` is the default behavior.  # noqa: E501

        :return: The disable_binary_fetching of this HistoricDecisionInstanceQueryDto.  # noqa: E501
        :rtype: bool
        """
        return self._disable_binary_fetching

    @disable_binary_fetching.setter
    def disable_binary_fetching(self, disable_binary_fetching):
        """Sets the disable_binary_fetching of this HistoricDecisionInstanceQueryDto.

        Disables fetching of byte array input and output values. Value may only be `true`, as `false` is the default behavior.  # noqa: E501

        :param disable_binary_fetching: The disable_binary_fetching of this HistoricDecisionInstanceQueryDto.  # noqa: E501
        :type: bool
        """

        self._disable_binary_fetching = disable_binary_fetching

    @property
    def disable_custom_object_deserialization(self):
        """Gets the disable_custom_object_deserialization of this HistoricDecisionInstanceQueryDto.  # noqa: E501

        Disables deserialization of input and output values that are custom objects. Value may only be `true`, as `false` is the default behavior.  # noqa: E501

        :return: The disable_custom_object_deserialization of this HistoricDecisionInstanceQueryDto.  # noqa: E501
        :rtype: bool
        """
        return self._disable_custom_object_deserialization

    @disable_custom_object_deserialization.setter
    def disable_custom_object_deserialization(self, disable_custom_object_deserialization):
        """Sets the disable_custom_object_deserialization of this HistoricDecisionInstanceQueryDto.

        Disables deserialization of input and output values that are custom objects. Value may only be `true`, as `false` is the default behavior.  # noqa: E501

        :param disable_custom_object_deserialization: The disable_custom_object_deserialization of this HistoricDecisionInstanceQueryDto.  # noqa: E501
        :type: bool
        """

        self._disable_custom_object_deserialization = disable_custom_object_deserialization

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HistoricDecisionInstanceQueryDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, HistoricDecisionInstanceQueryDto):
            return True

        return self.to_dict() != other.to_dict()
