# coding: utf-8

"""
    Camunda Platform REST API

    OpenApi Spec for Camunda Platform REST API.  # noqa: E501

    The version of the OpenAPI document: 7.17.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import generic_camunda_client
from generic_camunda_client.models.historic_decision_instance_dto import HistoricDecisionInstanceDto  # noqa: E501
from generic_camunda_client.rest import ApiException

class TestHistoricDecisionInstanceDto(unittest.TestCase):
    """HistoricDecisionInstanceDto unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test HistoricDecisionInstanceDto
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = generic_camunda_client.models.historic_decision_instance_dto.HistoricDecisionInstanceDto()  # noqa: E501
        if include_optional :
            return HistoricDecisionInstanceDto(
                id = '0', 
                decision_definition_id = '0', 
                decision_definition_key = '0', 
                decision_definition_name = '0', 
                evaluation_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                removal_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                process_definition_id = '0', 
                process_definition_key = '0', 
                process_instance_id = '0', 
                case_definition_id = '0', 
                case_definition_key = '0', 
                case_instance_id = '0', 
                activity_id = '0', 
                activity_instance_id = '0', 
                tenant_id = '0', 
                user_id = '0', 
                inputs = [
                    generic_camunda_client.models.historic_decision_input_instance_dto.HistoricDecisionInputInstanceDto(
                        id = '0', 
                        decision_instance_id = '0', 
                        clause_id = '0', 
                        clause_name = '0', 
                        error_message = '0', 
                        type = '0', 
                        create_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        removal_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        root_process_instance_id = '0', 
                        value = generic_camunda_client.models.value.value(), 
                        value_info = { }, )
                    ], 
                ouputs = [
                    generic_camunda_client.models.historic_decision_output_instance_dto.HistoricDecisionOutputInstanceDto(
                        id = '0', 
                        decision_instance_id = '0', 
                        clause_id = '0', 
                        clause_name = '0', 
                        rule_id = '0', 
                        rule_order = 56, 
                        error_message = '0', 
                        variable_name = '0', 
                        type = '0', 
                        create_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        removal_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        root_process_instance_id = '0', 
                        value = generic_camunda_client.models.value.value(), 
                        value_info = { }, )
                    ], 
                collect_result_value = 1.337, 
                root_decision_instance_id = '0', 
                root_process_instance_id = '0', 
                decision_requirements_definition_id = '0', 
                decision_requirements_definition_key = '0'
            )
        else :
            return HistoricDecisionInstanceDto(
        )

    def testHistoricDecisionInstanceDto(self):
        """Test HistoricDecisionInstanceDto"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
