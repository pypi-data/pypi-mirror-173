# coding: utf-8

"""
    Camunda Platform REST API

    OpenApi Spec for Camunda Platform REST API.  # noqa: E501

    The version of the OpenAPI document: 7.17.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import generic_camunda_client
from generic_camunda_client.models.historic_task_instance_dto import HistoricTaskInstanceDto  # noqa: E501
from generic_camunda_client.rest import ApiException

class TestHistoricTaskInstanceDto(unittest.TestCase):
    """HistoricTaskInstanceDto unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test HistoricTaskInstanceDto
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = generic_camunda_client.models.historic_task_instance_dto.HistoricTaskInstanceDto()  # noqa: E501
        if include_optional :
            return HistoricTaskInstanceDto(
                id = '0', 
                process_definition_key = '0', 
                process_definition_id = '0', 
                process_instance_id = '0', 
                execution_id = '0', 
                case_definition_key = '0', 
                case_definition_id = '0', 
                case_instance_id = '0', 
                case_execution_id = '0', 
                activity_instance_id = '0', 
                name = '0', 
                description = '0', 
                delete_reason = '0', 
                owner = '0', 
                assignee = '0', 
                start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                end_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                duration = 56, 
                task_definition_key = '0', 
                priority = 56, 
                due = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                parent_task_id = '0', 
                follow_up = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                tenant_id = '0', 
                removal_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                root_process_instance_id = '0'
            )
        else :
            return HistoricTaskInstanceDto(
        )

    def testHistoricTaskInstanceDto(self):
        """Test HistoricTaskInstanceDto"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
