# coding: utf-8

"""
    Camunda Platform REST API

    OpenApi Spec for Camunda Platform REST API.  # noqa: E501

    The version of the OpenAPI document: 7.17.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import generic_camunda_client
from generic_camunda_client.models.migration_execution_dto import MigrationExecutionDto  # noqa: E501
from generic_camunda_client.rest import ApiException

class TestMigrationExecutionDto(unittest.TestCase):
    """MigrationExecutionDto unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test MigrationExecutionDto
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = generic_camunda_client.models.migration_execution_dto.MigrationExecutionDto()  # noqa: E501
        if include_optional :
            return MigrationExecutionDto(
                migration_plan = generic_camunda_client.models.migration_plan_dto.MigrationPlanDto(
                    source_process_definition_id = '0', 
                    target_process_definition_id = '0', 
                    instructions = [
                        generic_camunda_client.models.migration_instruction_dto.MigrationInstructionDto(
                            source_activity_ids = [
                                '0'
                                ], 
                            target_activity_ids = [
                                '0'
                                ], 
                            update_event_trigger = True, )
                        ], 
                    variables = {
                        'key' : generic_camunda_client.models.variable_value_dto.VariableValueDto(
                            value = null, 
                            type = '0', 
                            value_info = { }, )
                        }, ), 
                process_instance_ids = [
                    '0'
                    ], 
                process_instance_query = generic_camunda_client.models.process_instance_query_dto.ProcessInstanceQueryDto(
                    deployment_id = '0', 
                    process_definition_id = '0', 
                    process_definition_key = '0', 
                    process_definition_key_in = [
                        '0'
                        ], 
                    process_definition_key_not_in = [
                        '0'
                        ], 
                    business_key = '0', 
                    business_key_like = '0', 
                    case_instance_id = '0', 
                    super_process_instance = '0', 
                    sub_process_instance = '0', 
                    super_case_instance = '0', 
                    sub_case_instance = '0', 
                    active = True, 
                    suspended = True, 
                    process_instance_ids = [
                        '0'
                        ], 
                    with_incident = True, 
                    incident_id = '0', 
                    incident_type = '0', 
                    incident_message = '0', 
                    incident_message_like = '0', 
                    tenant_id_in = [
                        '0'
                        ], 
                    without_tenant_id = True, 
                    process_definition_without_tenant_id = True, 
                    activity_id_in = [
                        '0'
                        ], 
                    root_process_instances = True, 
                    leaf_process_instances = True, 
                    variables = [
                        null
                        ], 
                    variable_names_ignore_case = True, 
                    variable_values_ignore_case = True, 
                    or_queries = [
                        generic_camunda_client.models.process_instance_query_dto.ProcessInstanceQueryDto(
                            deployment_id = '0', 
                            process_definition_id = '0', 
                            process_definition_key = '0', 
                            business_key = '0', 
                            business_key_like = '0', 
                            case_instance_id = '0', 
                            super_process_instance = '0', 
                            sub_process_instance = '0', 
                            super_case_instance = '0', 
                            sub_case_instance = '0', 
                            active = True, 
                            suspended = True, 
                            with_incident = True, 
                            incident_id = '0', 
                            incident_type = '0', 
                            incident_message = '0', 
                            incident_message_like = '0', 
                            without_tenant_id = True, 
                            process_definition_without_tenant_id = True, 
                            root_process_instances = True, 
                            leaf_process_instances = True, 
                            variable_names_ignore_case = True, 
                            variable_values_ignore_case = True, 
                            sorting = [
                                generic_camunda_client.models.process_instance_query_dto_sorting.ProcessInstanceQueryDto_sorting(
                                    sort_by = 'instanceId', 
                                    sort_order = 'asc', )
                                ], )
                        ], 
                    sorting = [
                        generic_camunda_client.models.process_instance_query_dto_sorting.ProcessInstanceQueryDto_sorting(
                            sort_by = 'instanceId', 
                            sort_order = 'asc', )
                        ], ), 
                skip_custom_listeners = True, 
                skip_io_mappings = True
            )
        else :
            return MigrationExecutionDto(
        )

    def testMigrationExecutionDto(self):
        """Test MigrationExecutionDto"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
