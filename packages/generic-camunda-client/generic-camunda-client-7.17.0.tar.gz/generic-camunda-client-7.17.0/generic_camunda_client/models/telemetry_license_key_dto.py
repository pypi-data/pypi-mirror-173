# coding: utf-8

"""
    Camunda Platform REST API

    OpenApi Spec for Camunda Platform REST API.  # noqa: E501

    The version of the OpenAPI document: 7.17.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from generic_camunda_client.configuration import Configuration


class TelemetryLicenseKeyDto(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'customer': 'str',
        'type': 'str',
        'valid_until': 'date',
        'unlimited': 'bool',
        'features': 'dict(str, str)',
        'raw': 'str'
    }

    attribute_map = {
        'customer': 'customer',
        'type': 'type',
        'valid_until': 'valid-until',
        'unlimited': 'unlimited',
        'features': 'features',
        'raw': 'raw'
    }

    def __init__(self, customer=None, type=None, valid_until=None, unlimited=None, features=None, raw=None, local_vars_configuration=None):  # noqa: E501
        """TelemetryLicenseKeyDto - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._customer = None
        self._type = None
        self._valid_until = None
        self._unlimited = None
        self._features = None
        self._raw = None
        self.discriminator = None

        self.customer = customer
        self.type = type
        self.valid_until = valid_until
        self.unlimited = unlimited
        if features is not None:
            self.features = features
        self.raw = raw

    @property
    def customer(self):
        """Gets the customer of this TelemetryLicenseKeyDto.  # noqa: E501

        The name of the customer the license was issued for.  # noqa: E501

        :return: The customer of this TelemetryLicenseKeyDto.  # noqa: E501
        :rtype: str
        """
        return self._customer

    @customer.setter
    def customer(self, customer):
        """Sets the customer of this TelemetryLicenseKeyDto.

        The name of the customer the license was issued for.  # noqa: E501

        :param customer: The customer of this TelemetryLicenseKeyDto.  # noqa: E501
        :type: str
        """

        self._customer = customer

    @property
    def type(self):
        """Gets the type of this TelemetryLicenseKeyDto.  # noqa: E501

        The license type.  # noqa: E501

        :return: The type of this TelemetryLicenseKeyDto.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TelemetryLicenseKeyDto.

        The license type.  # noqa: E501

        :param type: The type of this TelemetryLicenseKeyDto.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def valid_until(self):
        """Gets the valid_until of this TelemetryLicenseKeyDto.  # noqa: E501

        The expiration date of the license.  # noqa: E501

        :return: The valid_until of this TelemetryLicenseKeyDto.  # noqa: E501
        :rtype: date
        """
        return self._valid_until

    @valid_until.setter
    def valid_until(self, valid_until):
        """Sets the valid_until of this TelemetryLicenseKeyDto.

        The expiration date of the license.  # noqa: E501

        :param valid_until: The valid_until of this TelemetryLicenseKeyDto.  # noqa: E501
        :type: date
        """

        self._valid_until = valid_until

    @property
    def unlimited(self):
        """Gets the unlimited of this TelemetryLicenseKeyDto.  # noqa: E501

        Flag that indicates if the license is unlimited.  # noqa: E501

        :return: The unlimited of this TelemetryLicenseKeyDto.  # noqa: E501
        :rtype: bool
        """
        return self._unlimited

    @unlimited.setter
    def unlimited(self, unlimited):
        """Sets the unlimited of this TelemetryLicenseKeyDto.

        Flag that indicates if the license is unlimited.  # noqa: E501

        :param unlimited: The unlimited of this TelemetryLicenseKeyDto.  # noqa: E501
        :type: bool
        """

        self._unlimited = unlimited

    @property
    def features(self):
        """Gets the features of this TelemetryLicenseKeyDto.  # noqa: E501

        A map of features included in the license.  # noqa: E501

        :return: The features of this TelemetryLicenseKeyDto.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this TelemetryLicenseKeyDto.

        A map of features included in the license.  # noqa: E501

        :param features: The features of this TelemetryLicenseKeyDto.  # noqa: E501
        :type: dict(str, str)
        """

        self._features = features

    @property
    def raw(self):
        """Gets the raw of this TelemetryLicenseKeyDto.  # noqa: E501

        The raw license information.  # noqa: E501

        :return: The raw of this TelemetryLicenseKeyDto.  # noqa: E501
        :rtype: str
        """
        return self._raw

    @raw.setter
    def raw(self, raw):
        """Sets the raw of this TelemetryLicenseKeyDto.

        The raw license information.  # noqa: E501

        :param raw: The raw of this TelemetryLicenseKeyDto.  # noqa: E501
        :type: str
        """

        self._raw = raw

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TelemetryLicenseKeyDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TelemetryLicenseKeyDto):
            return True

        return self.to_dict() != other.to_dict()
