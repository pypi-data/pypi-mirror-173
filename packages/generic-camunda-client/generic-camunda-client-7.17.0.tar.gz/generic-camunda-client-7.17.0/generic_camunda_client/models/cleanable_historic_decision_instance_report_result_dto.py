# coding: utf-8

"""
    Camunda Platform REST API

    OpenApi Spec for Camunda Platform REST API.  # noqa: E501

    The version of the OpenAPI document: 7.17.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from generic_camunda_client.configuration import Configuration


class CleanableHistoricDecisionInstanceReportResultDto(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'decision_definition_id': 'str',
        'decision_definition_key': 'str',
        'decision_definition_name': 'str',
        'decision_definition_version': 'int',
        'history_time_to_live': 'int',
        'finished_decision_instance_count': 'int',
        'cleanable_decision_instance_count': 'int',
        'tenant_id': 'str'
    }

    attribute_map = {
        'decision_definition_id': 'decisionDefinitionId',
        'decision_definition_key': 'decisionDefinitionKey',
        'decision_definition_name': 'decisionDefinitionName',
        'decision_definition_version': 'decisionDefinitionVersion',
        'history_time_to_live': 'historyTimeToLive',
        'finished_decision_instance_count': 'finishedDecisionInstanceCount',
        'cleanable_decision_instance_count': 'cleanableDecisionInstanceCount',
        'tenant_id': 'tenantId'
    }

    def __init__(self, decision_definition_id=None, decision_definition_key=None, decision_definition_name=None, decision_definition_version=None, history_time_to_live=None, finished_decision_instance_count=None, cleanable_decision_instance_count=None, tenant_id=None, local_vars_configuration=None):  # noqa: E501
        """CleanableHistoricDecisionInstanceReportResultDto - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._decision_definition_id = None
        self._decision_definition_key = None
        self._decision_definition_name = None
        self._decision_definition_version = None
        self._history_time_to_live = None
        self._finished_decision_instance_count = None
        self._cleanable_decision_instance_count = None
        self._tenant_id = None
        self.discriminator = None

        self.decision_definition_id = decision_definition_id
        self.decision_definition_key = decision_definition_key
        self.decision_definition_name = decision_definition_name
        self.decision_definition_version = decision_definition_version
        self.history_time_to_live = history_time_to_live
        self.finished_decision_instance_count = finished_decision_instance_count
        self.cleanable_decision_instance_count = cleanable_decision_instance_count
        self.tenant_id = tenant_id

    @property
    def decision_definition_id(self):
        """Gets the decision_definition_id of this CleanableHistoricDecisionInstanceReportResultDto.  # noqa: E501

        The id of the decision definition.  # noqa: E501

        :return: The decision_definition_id of this CleanableHistoricDecisionInstanceReportResultDto.  # noqa: E501
        :rtype: str
        """
        return self._decision_definition_id

    @decision_definition_id.setter
    def decision_definition_id(self, decision_definition_id):
        """Sets the decision_definition_id of this CleanableHistoricDecisionInstanceReportResultDto.

        The id of the decision definition.  # noqa: E501

        :param decision_definition_id: The decision_definition_id of this CleanableHistoricDecisionInstanceReportResultDto.  # noqa: E501
        :type: str
        """

        self._decision_definition_id = decision_definition_id

    @property
    def decision_definition_key(self):
        """Gets the decision_definition_key of this CleanableHistoricDecisionInstanceReportResultDto.  # noqa: E501

        The key of the decision definition.  # noqa: E501

        :return: The decision_definition_key of this CleanableHistoricDecisionInstanceReportResultDto.  # noqa: E501
        :rtype: str
        """
        return self._decision_definition_key

    @decision_definition_key.setter
    def decision_definition_key(self, decision_definition_key):
        """Sets the decision_definition_key of this CleanableHistoricDecisionInstanceReportResultDto.

        The key of the decision definition.  # noqa: E501

        :param decision_definition_key: The decision_definition_key of this CleanableHistoricDecisionInstanceReportResultDto.  # noqa: E501
        :type: str
        """

        self._decision_definition_key = decision_definition_key

    @property
    def decision_definition_name(self):
        """Gets the decision_definition_name of this CleanableHistoricDecisionInstanceReportResultDto.  # noqa: E501

        The name of the decision definition.  # noqa: E501

        :return: The decision_definition_name of this CleanableHistoricDecisionInstanceReportResultDto.  # noqa: E501
        :rtype: str
        """
        return self._decision_definition_name

    @decision_definition_name.setter
    def decision_definition_name(self, decision_definition_name):
        """Sets the decision_definition_name of this CleanableHistoricDecisionInstanceReportResultDto.

        The name of the decision definition.  # noqa: E501

        :param decision_definition_name: The decision_definition_name of this CleanableHistoricDecisionInstanceReportResultDto.  # noqa: E501
        :type: str
        """

        self._decision_definition_name = decision_definition_name

    @property
    def decision_definition_version(self):
        """Gets the decision_definition_version of this CleanableHistoricDecisionInstanceReportResultDto.  # noqa: E501

        The version of the decision definition.  # noqa: E501

        :return: The decision_definition_version of this CleanableHistoricDecisionInstanceReportResultDto.  # noqa: E501
        :rtype: int
        """
        return self._decision_definition_version

    @decision_definition_version.setter
    def decision_definition_version(self, decision_definition_version):
        """Sets the decision_definition_version of this CleanableHistoricDecisionInstanceReportResultDto.

        The version of the decision definition.  # noqa: E501

        :param decision_definition_version: The decision_definition_version of this CleanableHistoricDecisionInstanceReportResultDto.  # noqa: E501
        :type: int
        """

        self._decision_definition_version = decision_definition_version

    @property
    def history_time_to_live(self):
        """Gets the history_time_to_live of this CleanableHistoricDecisionInstanceReportResultDto.  # noqa: E501

        The history time to live of the decision definition.  # noqa: E501

        :return: The history_time_to_live of this CleanableHistoricDecisionInstanceReportResultDto.  # noqa: E501
        :rtype: int
        """
        return self._history_time_to_live

    @history_time_to_live.setter
    def history_time_to_live(self, history_time_to_live):
        """Sets the history_time_to_live of this CleanableHistoricDecisionInstanceReportResultDto.

        The history time to live of the decision definition.  # noqa: E501

        :param history_time_to_live: The history_time_to_live of this CleanableHistoricDecisionInstanceReportResultDto.  # noqa: E501
        :type: int
        """

        self._history_time_to_live = history_time_to_live

    @property
    def finished_decision_instance_count(self):
        """Gets the finished_decision_instance_count of this CleanableHistoricDecisionInstanceReportResultDto.  # noqa: E501

        The count of the finished historic decision instances.  # noqa: E501

        :return: The finished_decision_instance_count of this CleanableHistoricDecisionInstanceReportResultDto.  # noqa: E501
        :rtype: int
        """
        return self._finished_decision_instance_count

    @finished_decision_instance_count.setter
    def finished_decision_instance_count(self, finished_decision_instance_count):
        """Sets the finished_decision_instance_count of this CleanableHistoricDecisionInstanceReportResultDto.

        The count of the finished historic decision instances.  # noqa: E501

        :param finished_decision_instance_count: The finished_decision_instance_count of this CleanableHistoricDecisionInstanceReportResultDto.  # noqa: E501
        :type: int
        """

        self._finished_decision_instance_count = finished_decision_instance_count

    @property
    def cleanable_decision_instance_count(self):
        """Gets the cleanable_decision_instance_count of this CleanableHistoricDecisionInstanceReportResultDto.  # noqa: E501

        The count of the cleanable historic decision instances, referring to history time to live.  # noqa: E501

        :return: The cleanable_decision_instance_count of this CleanableHistoricDecisionInstanceReportResultDto.  # noqa: E501
        :rtype: int
        """
        return self._cleanable_decision_instance_count

    @cleanable_decision_instance_count.setter
    def cleanable_decision_instance_count(self, cleanable_decision_instance_count):
        """Sets the cleanable_decision_instance_count of this CleanableHistoricDecisionInstanceReportResultDto.

        The count of the cleanable historic decision instances, referring to history time to live.  # noqa: E501

        :param cleanable_decision_instance_count: The cleanable_decision_instance_count of this CleanableHistoricDecisionInstanceReportResultDto.  # noqa: E501
        :type: int
        """

        self._cleanable_decision_instance_count = cleanable_decision_instance_count

    @property
    def tenant_id(self):
        """Gets the tenant_id of this CleanableHistoricDecisionInstanceReportResultDto.  # noqa: E501

        The tenant id of the decision definition.  # noqa: E501

        :return: The tenant_id of this CleanableHistoricDecisionInstanceReportResultDto.  # noqa: E501
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this CleanableHistoricDecisionInstanceReportResultDto.

        The tenant id of the decision definition.  # noqa: E501

        :param tenant_id: The tenant_id of this CleanableHistoricDecisionInstanceReportResultDto.  # noqa: E501
        :type: str
        """

        self._tenant_id = tenant_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CleanableHistoricDecisionInstanceReportResultDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CleanableHistoricDecisionInstanceReportResultDto):
            return True

        return self.to_dict() != other.to_dict()
