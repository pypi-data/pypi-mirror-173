# coding: utf-8

"""
    Camunda Platform REST API

    OpenApi Spec for Camunda Platform REST API.  # noqa: E501

    The version of the OpenAPI document: 7.18.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from generic_camunda_client.configuration import Configuration


class FilterDto(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'resource_type': 'str',
        'name': 'str',
        'owner': 'str',
        'query': 'object',
        'properties': 'object',
        'item_count': 'int'
    }

    attribute_map = {
        'id': 'id',
        'resource_type': 'resourceType',
        'name': 'name',
        'owner': 'owner',
        'query': 'query',
        'properties': 'properties',
        'item_count': 'itemCount'
    }

    def __init__(self, id=None, resource_type=None, name=None, owner=None, query=None, properties=None, item_count=None, local_vars_configuration=None):  # noqa: E501
        """FilterDto - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._resource_type = None
        self._name = None
        self._owner = None
        self._query = None
        self._properties = None
        self._item_count = None
        self.discriminator = None

        self.id = id
        self.resource_type = resource_type
        self.name = name
        self.owner = owner
        if query is not None:
            self.query = query
        if properties is not None:
            self.properties = properties
        self.item_count = item_count

    @property
    def id(self):
        """Gets the id of this FilterDto.  # noqa: E501

        The id of the filter.  # noqa: E501

        :return: The id of this FilterDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FilterDto.

        The id of the filter.  # noqa: E501

        :param id: The id of this FilterDto.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def resource_type(self):
        """Gets the resource_type of this FilterDto.  # noqa: E501

        The resource type of the filter.  # noqa: E501

        :return: The resource_type of this FilterDto.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this FilterDto.

        The resource type of the filter.  # noqa: E501

        :param resource_type: The resource_type of this FilterDto.  # noqa: E501
        :type: str
        """

        self._resource_type = resource_type

    @property
    def name(self):
        """Gets the name of this FilterDto.  # noqa: E501

        The name of the filter.  # noqa: E501

        :return: The name of this FilterDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FilterDto.

        The name of the filter.  # noqa: E501

        :param name: The name of this FilterDto.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def owner(self):
        """Gets the owner of this FilterDto.  # noqa: E501

        The user id of the owner of the filter.  # noqa: E501

        :return: The owner of this FilterDto.  # noqa: E501
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this FilterDto.

        The user id of the owner of the filter.  # noqa: E501

        :param owner: The owner of this FilterDto.  # noqa: E501
        :type: str
        """

        self._owner = owner

    @property
    def query(self):
        """Gets the query of this FilterDto.  # noqa: E501

        The query of the filter as a JSON object.  # noqa: E501

        :return: The query of this FilterDto.  # noqa: E501
        :rtype: object
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this FilterDto.

        The query of the filter as a JSON object.  # noqa: E501

        :param query: The query of this FilterDto.  # noqa: E501
        :type: object
        """

        self._query = query

    @property
    def properties(self):
        """Gets the properties of this FilterDto.  # noqa: E501

        The properties of a filter as a JSON object.  # noqa: E501

        :return: The properties of this FilterDto.  # noqa: E501
        :rtype: object
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this FilterDto.

        The properties of a filter as a JSON object.  # noqa: E501

        :param properties: The properties of this FilterDto.  # noqa: E501
        :type: object
        """

        self._properties = properties

    @property
    def item_count(self):
        """Gets the item_count of this FilterDto.  # noqa: E501

         The number of items matched by the filter itself. Note: Only exists if the query parameter `itemCount` was set to `true`  # noqa: E501

        :return: The item_count of this FilterDto.  # noqa: E501
        :rtype: int
        """
        return self._item_count

    @item_count.setter
    def item_count(self, item_count):
        """Sets the item_count of this FilterDto.

         The number of items matched by the filter itself. Note: Only exists if the query parameter `itemCount` was set to `true`  # noqa: E501

        :param item_count: The item_count of this FilterDto.  # noqa: E501
        :type: int
        """

        self._item_count = item_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FilterDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FilterDto):
            return True

        return self.to_dict() != other.to_dict()
