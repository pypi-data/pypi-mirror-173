# coding: utf-8

"""
    Camunda Platform REST API

    OpenApi Spec for Camunda Platform REST API.  # noqa: E501

    The version of the OpenAPI document: 7.18.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from generic_camunda_client.configuration import Configuration


class MigrationPlanDto(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'source_process_definition_id': 'str',
        'target_process_definition_id': 'str',
        'instructions': 'list[MigrationInstructionDto]',
        'variables': 'dict(str, VariableValueDto)'
    }

    attribute_map = {
        'source_process_definition_id': 'sourceProcessDefinitionId',
        'target_process_definition_id': 'targetProcessDefinitionId',
        'instructions': 'instructions',
        'variables': 'variables'
    }

    def __init__(self, source_process_definition_id=None, target_process_definition_id=None, instructions=None, variables=None, local_vars_configuration=None):  # noqa: E501
        """MigrationPlanDto - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._source_process_definition_id = None
        self._target_process_definition_id = None
        self._instructions = None
        self._variables = None
        self.discriminator = None

        self.source_process_definition_id = source_process_definition_id
        self.target_process_definition_id = target_process_definition_id
        self.instructions = instructions
        self.variables = variables

    @property
    def source_process_definition_id(self):
        """Gets the source_process_definition_id of this MigrationPlanDto.  # noqa: E501

        The id of the source process definition for the migration.  # noqa: E501

        :return: The source_process_definition_id of this MigrationPlanDto.  # noqa: E501
        :rtype: str
        """
        return self._source_process_definition_id

    @source_process_definition_id.setter
    def source_process_definition_id(self, source_process_definition_id):
        """Sets the source_process_definition_id of this MigrationPlanDto.

        The id of the source process definition for the migration.  # noqa: E501

        :param source_process_definition_id: The source_process_definition_id of this MigrationPlanDto.  # noqa: E501
        :type: str
        """

        self._source_process_definition_id = source_process_definition_id

    @property
    def target_process_definition_id(self):
        """Gets the target_process_definition_id of this MigrationPlanDto.  # noqa: E501

        The id of the target process definition for the migration.  # noqa: E501

        :return: The target_process_definition_id of this MigrationPlanDto.  # noqa: E501
        :rtype: str
        """
        return self._target_process_definition_id

    @target_process_definition_id.setter
    def target_process_definition_id(self, target_process_definition_id):
        """Sets the target_process_definition_id of this MigrationPlanDto.

        The id of the target process definition for the migration.  # noqa: E501

        :param target_process_definition_id: The target_process_definition_id of this MigrationPlanDto.  # noqa: E501
        :type: str
        """

        self._target_process_definition_id = target_process_definition_id

    @property
    def instructions(self):
        """Gets the instructions of this MigrationPlanDto.  # noqa: E501

        A list of migration instructions which map equal activities. Each migration instruction is a JSON object with the following properties:  # noqa: E501

        :return: The instructions of this MigrationPlanDto.  # noqa: E501
        :rtype: list[MigrationInstructionDto]
        """
        return self._instructions

    @instructions.setter
    def instructions(self, instructions):
        """Sets the instructions of this MigrationPlanDto.

        A list of migration instructions which map equal activities. Each migration instruction is a JSON object with the following properties:  # noqa: E501

        :param instructions: The instructions of this MigrationPlanDto.  # noqa: E501
        :type: list[MigrationInstructionDto]
        """

        self._instructions = instructions

    @property
    def variables(self):
        """Gets the variables of this MigrationPlanDto.  # noqa: E501

        A map of variables which will be set into the process instances' scope. Each key is a variable name and each value a JSON variable value object.  # noqa: E501

        :return: The variables of this MigrationPlanDto.  # noqa: E501
        :rtype: dict(str, VariableValueDto)
        """
        return self._variables

    @variables.setter
    def variables(self, variables):
        """Sets the variables of this MigrationPlanDto.

        A map of variables which will be set into the process instances' scope. Each key is a variable name and each value a JSON variable value object.  # noqa: E501

        :param variables: The variables of this MigrationPlanDto.  # noqa: E501
        :type: dict(str, VariableValueDto)
        """

        self._variables = variables

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MigrationPlanDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MigrationPlanDto):
            return True

        return self.to_dict() != other.to_dict()
