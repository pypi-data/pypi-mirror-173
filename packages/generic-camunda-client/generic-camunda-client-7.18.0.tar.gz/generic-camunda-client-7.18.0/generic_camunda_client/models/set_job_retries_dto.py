# coding: utf-8

"""
    Camunda Platform REST API

    OpenApi Spec for Camunda Platform REST API.  # noqa: E501

    The version of the OpenAPI document: 7.18.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from generic_camunda_client.configuration import Configuration


class SetJobRetriesDto(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'job_ids': 'list[str]',
        'job_query': 'JobQueryDto',
        'retries': 'int'
    }

    attribute_map = {
        'job_ids': 'jobIds',
        'job_query': 'jobQuery',
        'retries': 'retries'
    }

    def __init__(self, job_ids=None, job_query=None, retries=None, local_vars_configuration=None):  # noqa: E501
        """SetJobRetriesDto - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._job_ids = None
        self._job_query = None
        self._retries = None
        self.discriminator = None

        self.job_ids = job_ids
        if job_query is not None:
            self.job_query = job_query
        self.retries = retries

    @property
    def job_ids(self):
        """Gets the job_ids of this SetJobRetriesDto.  # noqa: E501

        A list of job ids to set retries for.  # noqa: E501

        :return: The job_ids of this SetJobRetriesDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._job_ids

    @job_ids.setter
    def job_ids(self, job_ids):
        """Sets the job_ids of this SetJobRetriesDto.

        A list of job ids to set retries for.  # noqa: E501

        :param job_ids: The job_ids of this SetJobRetriesDto.  # noqa: E501
        :type: list[str]
        """

        self._job_ids = job_ids

    @property
    def job_query(self):
        """Gets the job_query of this SetJobRetriesDto.  # noqa: E501


        :return: The job_query of this SetJobRetriesDto.  # noqa: E501
        :rtype: JobQueryDto
        """
        return self._job_query

    @job_query.setter
    def job_query(self, job_query):
        """Sets the job_query of this SetJobRetriesDto.


        :param job_query: The job_query of this SetJobRetriesDto.  # noqa: E501
        :type: JobQueryDto
        """

        self._job_query = job_query

    @property
    def retries(self):
        """Gets the retries of this SetJobRetriesDto.  # noqa: E501

        An integer representing the number of retries. Please note that the value cannot be negative or null.  # noqa: E501

        :return: The retries of this SetJobRetriesDto.  # noqa: E501
        :rtype: int
        """
        return self._retries

    @retries.setter
    def retries(self, retries):
        """Sets the retries of this SetJobRetriesDto.

        An integer representing the number of retries. Please note that the value cannot be negative or null.  # noqa: E501

        :param retries: The retries of this SetJobRetriesDto.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                retries is not None and retries < 0):  # noqa: E501
            raise ValueError("Invalid value for `retries`, must be a value greater than or equal to `0`")  # noqa: E501

        self._retries = retries

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SetJobRetriesDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SetJobRetriesDto):
            return True

        return self.to_dict() != other.to_dict()
