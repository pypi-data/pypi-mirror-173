# coding: utf-8

"""
    Camunda Platform REST API

    OpenApi Spec for Camunda Platform REST API.  # noqa: E501

    The version of the OpenAPI document: 7.18.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import generic_camunda_client
from generic_camunda_client.models.historic_task_instance_query_dto import HistoricTaskInstanceQueryDto  # noqa: E501
from generic_camunda_client.rest import ApiException

class TestHistoricTaskInstanceQueryDto(unittest.TestCase):
    """HistoricTaskInstanceQueryDto unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test HistoricTaskInstanceQueryDto
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = generic_camunda_client.models.historic_task_instance_query_dto.HistoricTaskInstanceQueryDto()  # noqa: E501
        if include_optional :
            return HistoricTaskInstanceQueryDto(
                task_id = '0', 
                task_parent_task_id = '0', 
                process_instance_id = '0', 
                process_instance_business_key = '0', 
                process_instance_business_key_in = [
                    '0'
                    ], 
                process_instance_business_key_like = '0', 
                execution_id = '0', 
                process_definition_id = '0', 
                process_definition_key = '0', 
                process_definition_name = '0', 
                case_instance_id = '0', 
                case_execution_id = '0', 
                case_definition_id = '0', 
                case_definition_key = '0', 
                case_definition_name = '0', 
                activity_instance_id_in = [
                    '0'
                    ], 
                task_name = '0', 
                task_name_like = '0', 
                task_description = '0', 
                task_description_like = '0', 
                task_definition_key = '0', 
                task_definition_key_in = [
                    '0'
                    ], 
                task_delete_reason = '0', 
                task_delete_reason_like = '0', 
                task_assignee = '0', 
                task_assignee_like = '0', 
                task_owner = '0', 
                task_owner_like = '0', 
                task_priority = 56, 
                assigned = True, 
                unassigned = True, 
                finished = True, 
                unfinished = True, 
                process_finished = True, 
                process_unfinished = True, 
                task_due_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                task_due_date_before = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                task_due_date_after = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                without_task_due_date = True, 
                task_follow_up_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                task_follow_up_date_before = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                task_follow_up_date_after = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                started_before = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                started_after = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                finished_before = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                finished_after = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                tenant_id_in = [
                    '0'
                    ], 
                without_tenant_id = True, 
                task_variables = [
                    null
                    ], 
                process_variables = [
                    null
                    ], 
                variable_names_ignore_case = True, 
                variable_values_ignore_case = True, 
                task_involved_user = '0', 
                task_involved_group = '0', 
                task_had_candidate_user = '0', 
                task_had_candidate_group = '0', 
                with_candidate_groups = True, 
                without_candidate_groups = True, 
                or_queries = [
                    generic_camunda_client.models.historic_task_instance_query_dto.HistoricTaskInstanceQueryDto(
                        task_id = '0', 
                        task_parent_task_id = '0', 
                        process_instance_id = '0', 
                        process_instance_business_key = '0', 
                        process_instance_business_key_in = [
                            '0'
                            ], 
                        process_instance_business_key_like = '0', 
                        execution_id = '0', 
                        process_definition_id = '0', 
                        process_definition_key = '0', 
                        process_definition_name = '0', 
                        case_instance_id = '0', 
                        case_execution_id = '0', 
                        case_definition_id = '0', 
                        case_definition_key = '0', 
                        case_definition_name = '0', 
                        activity_instance_id_in = [
                            '0'
                            ], 
                        task_name = '0', 
                        task_name_like = '0', 
                        task_description = '0', 
                        task_description_like = '0', 
                        task_definition_key = '0', 
                        task_definition_key_in = [
                            '0'
                            ], 
                        task_delete_reason = '0', 
                        task_delete_reason_like = '0', 
                        task_assignee = '0', 
                        task_assignee_like = '0', 
                        task_owner = '0', 
                        task_owner_like = '0', 
                        task_priority = 56, 
                        assigned = True, 
                        unassigned = True, 
                        finished = True, 
                        unfinished = True, 
                        process_finished = True, 
                        process_unfinished = True, 
                        task_due_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        task_due_date_before = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        task_due_date_after = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        without_task_due_date = True, 
                        task_follow_up_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        task_follow_up_date_before = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        task_follow_up_date_after = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        started_before = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        started_after = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        finished_before = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        finished_after = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        tenant_id_in = [
                            '0'
                            ], 
                        without_tenant_id = True, 
                        task_variables = [
                            null
                            ], 
                        process_variables = [
                            null
                            ], 
                        variable_names_ignore_case = True, 
                        variable_values_ignore_case = True, 
                        task_involved_user = '0', 
                        task_involved_group = '0', 
                        task_had_candidate_user = '0', 
                        task_had_candidate_group = '0', 
                        with_candidate_groups = True, 
                        without_candidate_groups = True, 
                        or_queries = [
                            generic_camunda_client.models.historic_task_instance_query_dto.HistoricTaskInstanceQueryDto(
                                task_id = '0', 
                                task_parent_task_id = '0', 
                                process_instance_id = '0', 
                                process_instance_business_key = '0', 
                                process_instance_business_key_like = '0', 
                                execution_id = '0', 
                                process_definition_id = '0', 
                                process_definition_key = '0', 
                                process_definition_name = '0', 
                                case_instance_id = '0', 
                                case_execution_id = '0', 
                                case_definition_id = '0', 
                                case_definition_key = '0', 
                                case_definition_name = '0', 
                                task_name = '0', 
                                task_name_like = '0', 
                                task_description = '0', 
                                task_description_like = '0', 
                                task_definition_key = '0', 
                                task_delete_reason = '0', 
                                task_delete_reason_like = '0', 
                                task_assignee = '0', 
                                task_assignee_like = '0', 
                                task_owner = '0', 
                                task_owner_like = '0', 
                                task_priority = 56, 
                                assigned = True, 
                                unassigned = True, 
                                finished = True, 
                                unfinished = True, 
                                process_finished = True, 
                                process_unfinished = True, 
                                task_due_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                task_due_date_before = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                task_due_date_after = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                without_task_due_date = True, 
                                task_follow_up_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                task_follow_up_date_before = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                task_follow_up_date_after = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                started_before = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                started_after = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                finished_before = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                finished_after = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                without_tenant_id = True, 
                                variable_names_ignore_case = True, 
                                variable_values_ignore_case = True, 
                                task_involved_user = '0', 
                                task_involved_group = '0', 
                                task_had_candidate_user = '0', 
                                task_had_candidate_group = '0', 
                                with_candidate_groups = True, 
                                without_candidate_groups = True, 
                                sorting = [
                                    generic_camunda_client.models.historic_task_instance_query_dto_sorting.HistoricTaskInstanceQueryDto_sorting(
                                        sort_by = 'taskId', 
                                        sort_order = 'asc', )
                                    ], )
                            ], 
                        sorting = [
                            generic_camunda_client.models.historic_task_instance_query_dto_sorting.HistoricTaskInstanceQueryDto_sorting(
                                sort_by = 'taskId', 
                                sort_order = 'asc', )
                            ], )
                    ], 
                sorting = [
                    generic_camunda_client.models.historic_task_instance_query_dto_sorting.HistoricTaskInstanceQueryDto_sorting(
                        sort_by = 'taskId', 
                        sort_order = 'asc', )
                    ]
            )
        else :
            return HistoricTaskInstanceQueryDto(
        )

    def testHistoricTaskInstanceQueryDto(self):
        """Test HistoricTaskInstanceQueryDto"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
