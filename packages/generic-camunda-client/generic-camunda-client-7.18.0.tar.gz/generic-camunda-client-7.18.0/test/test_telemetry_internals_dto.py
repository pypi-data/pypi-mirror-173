# coding: utf-8

"""
    Camunda Platform REST API

    OpenApi Spec for Camunda Platform REST API.  # noqa: E501

    The version of the OpenAPI document: 7.18.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import generic_camunda_client
from generic_camunda_client.models.telemetry_internals_dto import TelemetryInternalsDto  # noqa: E501
from generic_camunda_client.rest import ApiException

class TestTelemetryInternalsDto(unittest.TestCase):
    """TelemetryInternalsDto unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test TelemetryInternalsDto
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = generic_camunda_client.models.telemetry_internals_dto.TelemetryInternalsDto()  # noqa: E501
        if include_optional :
            return TelemetryInternalsDto(
                database = {
                    'key' : generic_camunda_client.models.abstract_vendor_version_information_dto.AbstractVendorVersionInformationDto(
                        vendor = '0', 
                        version = '0', )
                    }, 
                application_server = {
                    'key' : generic_camunda_client.models.abstract_vendor_version_information_dto.AbstractVendorVersionInformationDto(
                        vendor = '0', 
                        version = '0', )
                    }, 
                license_key = {
                    'key' : generic_camunda_client.models.telemetry_license_key_dto.TelemetryLicenseKeyDto(
                        customer = '0', 
                        type = '0', 
                        valid_until = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        unlimited = True, 
                        features = {
                            'key' : '0'
                            }, 
                        raw = '0', )
                    }, 
                camunda_integration = [
                    '0'
                    ], 
                commands = {
                    'key' : generic_camunda_client.models.telemetry_count_dto.TelemetryCountDto(
                        count = 56, )
                    }, 
                metrics = {
                    'key' : generic_camunda_client.models.telemetry_count_dto.TelemetryCountDto(
                        count = 56, )
                    }, 
                webapps = [
                    '0'
                    ], 
                jdk = {
                    'key' : generic_camunda_client.models.abstract_vendor_version_information_dto.AbstractVendorVersionInformationDto(
                        vendor = '0', 
                        version = '0', )
                    }
            )
        else :
            return TelemetryInternalsDto(
        )

    def testTelemetryInternalsDto(self):
        """Test TelemetryInternalsDto"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
