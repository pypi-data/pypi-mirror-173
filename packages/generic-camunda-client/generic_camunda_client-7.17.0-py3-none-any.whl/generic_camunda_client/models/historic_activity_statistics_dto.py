# coding: utf-8

"""
    Camunda Platform REST API

    OpenApi Spec for Camunda Platform REST API.  # noqa: E501

    The version of the OpenAPI document: 7.17.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from generic_camunda_client.configuration import Configuration


class HistoricActivityStatisticsDto(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'instances': 'int',
        'canceled': 'int',
        'finished': 'int',
        'complete_scope': 'int',
        'open_incidents': 'int',
        'resolved_incidents': 'int',
        'deleted_incidents': 'int'
    }

    attribute_map = {
        'id': 'id',
        'instances': 'instances',
        'canceled': 'canceled',
        'finished': 'finished',
        'complete_scope': 'completeScope',
        'open_incidents': 'openIncidents',
        'resolved_incidents': 'resolvedIncidents',
        'deleted_incidents': 'deletedIncidents'
    }

    def __init__(self, id=None, instances=None, canceled=None, finished=None, complete_scope=None, open_incidents=None, resolved_incidents=None, deleted_incidents=None, local_vars_configuration=None):  # noqa: E501
        """HistoricActivityStatisticsDto - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._instances = None
        self._canceled = None
        self._finished = None
        self._complete_scope = None
        self._open_incidents = None
        self._resolved_incidents = None
        self._deleted_incidents = None
        self.discriminator = None

        self.id = id
        self.instances = instances
        self.canceled = canceled
        self.finished = finished
        self.complete_scope = complete_scope
        self.open_incidents = open_incidents
        self.resolved_incidents = resolved_incidents
        self.deleted_incidents = deleted_incidents

    @property
    def id(self):
        """Gets the id of this HistoricActivityStatisticsDto.  # noqa: E501

        The id of the activity the results are aggregated for.  # noqa: E501

        :return: The id of this HistoricActivityStatisticsDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this HistoricActivityStatisticsDto.

        The id of the activity the results are aggregated for.  # noqa: E501

        :param id: The id of this HistoricActivityStatisticsDto.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def instances(self):
        """Gets the instances of this HistoricActivityStatisticsDto.  # noqa: E501

        The total number of all running instances of the activity.  # noqa: E501

        :return: The instances of this HistoricActivityStatisticsDto.  # noqa: E501
        :rtype: int
        """
        return self._instances

    @instances.setter
    def instances(self, instances):
        """Sets the instances of this HistoricActivityStatisticsDto.

        The total number of all running instances of the activity.  # noqa: E501

        :param instances: The instances of this HistoricActivityStatisticsDto.  # noqa: E501
        :type: int
        """

        self._instances = instances

    @property
    def canceled(self):
        """Gets the canceled of this HistoricActivityStatisticsDto.  # noqa: E501

        The total number of all canceled instances of the activity. **Note:** Will be `0` (not `null`), if canceled activity instances were excluded.  # noqa: E501

        :return: The canceled of this HistoricActivityStatisticsDto.  # noqa: E501
        :rtype: int
        """
        return self._canceled

    @canceled.setter
    def canceled(self, canceled):
        """Sets the canceled of this HistoricActivityStatisticsDto.

        The total number of all canceled instances of the activity. **Note:** Will be `0` (not `null`), if canceled activity instances were excluded.  # noqa: E501

        :param canceled: The canceled of this HistoricActivityStatisticsDto.  # noqa: E501
        :type: int
        """

        self._canceled = canceled

    @property
    def finished(self):
        """Gets the finished of this HistoricActivityStatisticsDto.  # noqa: E501

        The total number of all finished instances of the activity. **Note:** Will be `0` (not `null`), if finished activity instances were excluded.  # noqa: E501

        :return: The finished of this HistoricActivityStatisticsDto.  # noqa: E501
        :rtype: int
        """
        return self._finished

    @finished.setter
    def finished(self, finished):
        """Sets the finished of this HistoricActivityStatisticsDto.

        The total number of all finished instances of the activity. **Note:** Will be `0` (not `null`), if finished activity instances were excluded.  # noqa: E501

        :param finished: The finished of this HistoricActivityStatisticsDto.  # noqa: E501
        :type: int
        """

        self._finished = finished

    @property
    def complete_scope(self):
        """Gets the complete_scope of this HistoricActivityStatisticsDto.  # noqa: E501

        The total number of all instances which completed a scope of the activity. **Note:** Will be `0` (not `null`), if activity instances which completed a scope were excluded.  # noqa: E501

        :return: The complete_scope of this HistoricActivityStatisticsDto.  # noqa: E501
        :rtype: int
        """
        return self._complete_scope

    @complete_scope.setter
    def complete_scope(self, complete_scope):
        """Sets the complete_scope of this HistoricActivityStatisticsDto.

        The total number of all instances which completed a scope of the activity. **Note:** Will be `0` (not `null`), if activity instances which completed a scope were excluded.  # noqa: E501

        :param complete_scope: The complete_scope of this HistoricActivityStatisticsDto.  # noqa: E501
        :type: int
        """

        self._complete_scope = complete_scope

    @property
    def open_incidents(self):
        """Gets the open_incidents of this HistoricActivityStatisticsDto.  # noqa: E501

        The total number of open incidents for the activity. **Note:** Will be `0` (not `null`), if `incidents` is set to `false`.  # noqa: E501

        :return: The open_incidents of this HistoricActivityStatisticsDto.  # noqa: E501
        :rtype: int
        """
        return self._open_incidents

    @open_incidents.setter
    def open_incidents(self, open_incidents):
        """Sets the open_incidents of this HistoricActivityStatisticsDto.

        The total number of open incidents for the activity. **Note:** Will be `0` (not `null`), if `incidents` is set to `false`.  # noqa: E501

        :param open_incidents: The open_incidents of this HistoricActivityStatisticsDto.  # noqa: E501
        :type: int
        """

        self._open_incidents = open_incidents

    @property
    def resolved_incidents(self):
        """Gets the resolved_incidents of this HistoricActivityStatisticsDto.  # noqa: E501

        The total number of resolved incidents for the activity. **Note:** Will be `0` (not `null`), if `incidents` is set to `false`.  # noqa: E501

        :return: The resolved_incidents of this HistoricActivityStatisticsDto.  # noqa: E501
        :rtype: int
        """
        return self._resolved_incidents

    @resolved_incidents.setter
    def resolved_incidents(self, resolved_incidents):
        """Sets the resolved_incidents of this HistoricActivityStatisticsDto.

        The total number of resolved incidents for the activity. **Note:** Will be `0` (not `null`), if `incidents` is set to `false`.  # noqa: E501

        :param resolved_incidents: The resolved_incidents of this HistoricActivityStatisticsDto.  # noqa: E501
        :type: int
        """

        self._resolved_incidents = resolved_incidents

    @property
    def deleted_incidents(self):
        """Gets the deleted_incidents of this HistoricActivityStatisticsDto.  # noqa: E501

        The total number of deleted incidents for the activity. **Note:** Will be `0` (not `null`), if `incidents` is set to `false`.  # noqa: E501

        :return: The deleted_incidents of this HistoricActivityStatisticsDto.  # noqa: E501
        :rtype: int
        """
        return self._deleted_incidents

    @deleted_incidents.setter
    def deleted_incidents(self, deleted_incidents):
        """Sets the deleted_incidents of this HistoricActivityStatisticsDto.

        The total number of deleted incidents for the activity. **Note:** Will be `0` (not `null`), if `incidents` is set to `false`.  # noqa: E501

        :param deleted_incidents: The deleted_incidents of this HistoricActivityStatisticsDto.  # noqa: E501
        :type: int
        """

        self._deleted_incidents = deleted_incidents

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HistoricActivityStatisticsDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, HistoricActivityStatisticsDto):
            return True

        return self.to_dict() != other.to_dict()
