# coding: utf-8

"""
    Camunda Platform REST API

    OpenApi Spec for Camunda Platform REST API.  # noqa: E501

    The version of the OpenAPI document: 7.17.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from generic_camunda_client.configuration import Configuration


class UserOperationLogEntryDto(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'user_id': 'str',
        'timestamp': 'datetime',
        'operation_id': 'str',
        'operation_type': 'str',
        'entity_type': 'str',
        'category': 'str',
        'annotation': 'str',
        '_property': 'str',
        'org_value': 'str',
        'new_value': 'str',
        'deployment_id': 'str',
        'process_definition_id': 'str',
        'process_definition_key': 'str',
        'process_instance_id': 'str',
        'execution_id': 'str',
        'case_definition_id': 'str',
        'case_instance_id': 'str',
        'case_execution_id': 'str',
        'task_id': 'str',
        'external_task_id': 'str',
        'batch_id': 'str',
        'job_id': 'str',
        'job_definition_id': 'str',
        'removal_time': 'datetime',
        'root_process_instance_id': 'str'
    }

    attribute_map = {
        'id': 'id',
        'user_id': 'userId',
        'timestamp': 'timestamp',
        'operation_id': 'operationId',
        'operation_type': 'operationType',
        'entity_type': 'entityType',
        'category': 'category',
        'annotation': 'annotation',
        '_property': 'property',
        'org_value': 'orgValue',
        'new_value': 'newValue',
        'deployment_id': 'deploymentId',
        'process_definition_id': 'processDefinitionId',
        'process_definition_key': 'processDefinitionKey',
        'process_instance_id': 'processInstanceId',
        'execution_id': 'executionId',
        'case_definition_id': 'caseDefinitionId',
        'case_instance_id': 'caseInstanceId',
        'case_execution_id': 'caseExecutionId',
        'task_id': 'taskId',
        'external_task_id': 'externalTaskId',
        'batch_id': 'batchId',
        'job_id': 'jobId',
        'job_definition_id': 'jobDefinitionId',
        'removal_time': 'removalTime',
        'root_process_instance_id': 'rootProcessInstanceId'
    }

    def __init__(self, id=None, user_id=None, timestamp=None, operation_id=None, operation_type=None, entity_type=None, category=None, annotation=None, _property=None, org_value=None, new_value=None, deployment_id=None, process_definition_id=None, process_definition_key=None, process_instance_id=None, execution_id=None, case_definition_id=None, case_instance_id=None, case_execution_id=None, task_id=None, external_task_id=None, batch_id=None, job_id=None, job_definition_id=None, removal_time=None, root_process_instance_id=None, local_vars_configuration=None):  # noqa: E501
        """UserOperationLogEntryDto - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._user_id = None
        self._timestamp = None
        self._operation_id = None
        self._operation_type = None
        self._entity_type = None
        self._category = None
        self._annotation = None
        self.__property = None
        self._org_value = None
        self._new_value = None
        self._deployment_id = None
        self._process_definition_id = None
        self._process_definition_key = None
        self._process_instance_id = None
        self._execution_id = None
        self._case_definition_id = None
        self._case_instance_id = None
        self._case_execution_id = None
        self._task_id = None
        self._external_task_id = None
        self._batch_id = None
        self._job_id = None
        self._job_definition_id = None
        self._removal_time = None
        self._root_process_instance_id = None
        self.discriminator = None

        self.id = id
        self.user_id = user_id
        self.timestamp = timestamp
        self.operation_id = operation_id
        self.operation_type = operation_type
        self.entity_type = entity_type
        self.category = category
        self.annotation = annotation
        self._property = _property
        self.org_value = org_value
        self.new_value = new_value
        self.deployment_id = deployment_id
        self.process_definition_id = process_definition_id
        self.process_definition_key = process_definition_key
        self.process_instance_id = process_instance_id
        self.execution_id = execution_id
        self.case_definition_id = case_definition_id
        self.case_instance_id = case_instance_id
        self.case_execution_id = case_execution_id
        self.task_id = task_id
        self.external_task_id = external_task_id
        self.batch_id = batch_id
        self.job_id = job_id
        self.job_definition_id = job_definition_id
        self.removal_time = removal_time
        self.root_process_instance_id = root_process_instance_id

    @property
    def id(self):
        """Gets the id of this UserOperationLogEntryDto.  # noqa: E501

        The unique identifier of this log entry.  # noqa: E501

        :return: The id of this UserOperationLogEntryDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserOperationLogEntryDto.

        The unique identifier of this log entry.  # noqa: E501

        :param id: The id of this UserOperationLogEntryDto.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def user_id(self):
        """Gets the user_id of this UserOperationLogEntryDto.  # noqa: E501

        The user who performed this operation.  # noqa: E501

        :return: The user_id of this UserOperationLogEntryDto.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this UserOperationLogEntryDto.

        The user who performed this operation.  # noqa: E501

        :param user_id: The user_id of this UserOperationLogEntryDto.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def timestamp(self):
        """Gets the timestamp of this UserOperationLogEntryDto.  # noqa: E501

        Timestamp of this operation.  # noqa: E501

        :return: The timestamp of this UserOperationLogEntryDto.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this UserOperationLogEntryDto.

        Timestamp of this operation.  # noqa: E501

        :param timestamp: The timestamp of this UserOperationLogEntryDto.  # noqa: E501
        :type: datetime
        """

        self._timestamp = timestamp

    @property
    def operation_id(self):
        """Gets the operation_id of this UserOperationLogEntryDto.  # noqa: E501

        The unique identifier of this operation. A composite operation that changes multiple properties has a common `operationId`.  # noqa: E501

        :return: The operation_id of this UserOperationLogEntryDto.  # noqa: E501
        :rtype: str
        """
        return self._operation_id

    @operation_id.setter
    def operation_id(self, operation_id):
        """Sets the operation_id of this UserOperationLogEntryDto.

        The unique identifier of this operation. A composite operation that changes multiple properties has a common `operationId`.  # noqa: E501

        :param operation_id: The operation_id of this UserOperationLogEntryDto.  # noqa: E501
        :type: str
        """

        self._operation_id = operation_id

    @property
    def operation_type(self):
        """Gets the operation_type of this UserOperationLogEntryDto.  # noqa: E501

        The type of this operation, e.g., `Assign`, `Claim` and so on.  # noqa: E501

        :return: The operation_type of this UserOperationLogEntryDto.  # noqa: E501
        :rtype: str
        """
        return self._operation_type

    @operation_type.setter
    def operation_type(self, operation_type):
        """Sets the operation_type of this UserOperationLogEntryDto.

        The type of this operation, e.g., `Assign`, `Claim` and so on.  # noqa: E501

        :param operation_type: The operation_type of this UserOperationLogEntryDto.  # noqa: E501
        :type: str
        """

        self._operation_type = operation_type

    @property
    def entity_type(self):
        """Gets the entity_type of this UserOperationLogEntryDto.  # noqa: E501

        The type of the entity on which this operation was executed, e.g., `Task` or `Attachment`.  # noqa: E501

        :return: The entity_type of this UserOperationLogEntryDto.  # noqa: E501
        :rtype: str
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this UserOperationLogEntryDto.

        The type of the entity on which this operation was executed, e.g., `Task` or `Attachment`.  # noqa: E501

        :param entity_type: The entity_type of this UserOperationLogEntryDto.  # noqa: E501
        :type: str
        """

        self._entity_type = entity_type

    @property
    def category(self):
        """Gets the category of this UserOperationLogEntryDto.  # noqa: E501

        The name of the category this operation was associated with, e.g., `TaskWorker` or `Admin`.  # noqa: E501

        :return: The category of this UserOperationLogEntryDto.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this UserOperationLogEntryDto.

        The name of the category this operation was associated with, e.g., `TaskWorker` or `Admin`.  # noqa: E501

        :param category: The category of this UserOperationLogEntryDto.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def annotation(self):
        """Gets the annotation of this UserOperationLogEntryDto.  # noqa: E501

        An arbitrary annotation set by a user for auditing reasons.  # noqa: E501

        :return: The annotation of this UserOperationLogEntryDto.  # noqa: E501
        :rtype: str
        """
        return self._annotation

    @annotation.setter
    def annotation(self, annotation):
        """Sets the annotation of this UserOperationLogEntryDto.

        An arbitrary annotation set by a user for auditing reasons.  # noqa: E501

        :param annotation: The annotation of this UserOperationLogEntryDto.  # noqa: E501
        :type: str
        """

        self._annotation = annotation

    @property
    def _property(self):
        """Gets the _property of this UserOperationLogEntryDto.  # noqa: E501

        The property changed by this operation.  # noqa: E501

        :return: The _property of this UserOperationLogEntryDto.  # noqa: E501
        :rtype: str
        """
        return self.__property

    @_property.setter
    def _property(self, _property):
        """Sets the _property of this UserOperationLogEntryDto.

        The property changed by this operation.  # noqa: E501

        :param _property: The _property of this UserOperationLogEntryDto.  # noqa: E501
        :type: str
        """

        self.__property = _property

    @property
    def org_value(self):
        """Gets the org_value of this UserOperationLogEntryDto.  # noqa: E501

        The original value of the changed property.  # noqa: E501

        :return: The org_value of this UserOperationLogEntryDto.  # noqa: E501
        :rtype: str
        """
        return self._org_value

    @org_value.setter
    def org_value(self, org_value):
        """Sets the org_value of this UserOperationLogEntryDto.

        The original value of the changed property.  # noqa: E501

        :param org_value: The org_value of this UserOperationLogEntryDto.  # noqa: E501
        :type: str
        """

        self._org_value = org_value

    @property
    def new_value(self):
        """Gets the new_value of this UserOperationLogEntryDto.  # noqa: E501

        The new value of the changed property.  # noqa: E501

        :return: The new_value of this UserOperationLogEntryDto.  # noqa: E501
        :rtype: str
        """
        return self._new_value

    @new_value.setter
    def new_value(self, new_value):
        """Sets the new_value of this UserOperationLogEntryDto.

        The new value of the changed property.  # noqa: E501

        :param new_value: The new_value of this UserOperationLogEntryDto.  # noqa: E501
        :type: str
        """

        self._new_value = new_value

    @property
    def deployment_id(self):
        """Gets the deployment_id of this UserOperationLogEntryDto.  # noqa: E501

        If not `null`, the operation is restricted to entities in relation to this deployment.  # noqa: E501

        :return: The deployment_id of this UserOperationLogEntryDto.  # noqa: E501
        :rtype: str
        """
        return self._deployment_id

    @deployment_id.setter
    def deployment_id(self, deployment_id):
        """Sets the deployment_id of this UserOperationLogEntryDto.

        If not `null`, the operation is restricted to entities in relation to this deployment.  # noqa: E501

        :param deployment_id: The deployment_id of this UserOperationLogEntryDto.  # noqa: E501
        :type: str
        """

        self._deployment_id = deployment_id

    @property
    def process_definition_id(self):
        """Gets the process_definition_id of this UserOperationLogEntryDto.  # noqa: E501

        If not `null`, the operation is restricted to entities in relation to this process definition.  # noqa: E501

        :return: The process_definition_id of this UserOperationLogEntryDto.  # noqa: E501
        :rtype: str
        """
        return self._process_definition_id

    @process_definition_id.setter
    def process_definition_id(self, process_definition_id):
        """Sets the process_definition_id of this UserOperationLogEntryDto.

        If not `null`, the operation is restricted to entities in relation to this process definition.  # noqa: E501

        :param process_definition_id: The process_definition_id of this UserOperationLogEntryDto.  # noqa: E501
        :type: str
        """

        self._process_definition_id = process_definition_id

    @property
    def process_definition_key(self):
        """Gets the process_definition_key of this UserOperationLogEntryDto.  # noqa: E501

        If not `null`, the operation is restricted to entities in relation to process definitions with this key.  # noqa: E501

        :return: The process_definition_key of this UserOperationLogEntryDto.  # noqa: E501
        :rtype: str
        """
        return self._process_definition_key

    @process_definition_key.setter
    def process_definition_key(self, process_definition_key):
        """Sets the process_definition_key of this UserOperationLogEntryDto.

        If not `null`, the operation is restricted to entities in relation to process definitions with this key.  # noqa: E501

        :param process_definition_key: The process_definition_key of this UserOperationLogEntryDto.  # noqa: E501
        :type: str
        """

        self._process_definition_key = process_definition_key

    @property
    def process_instance_id(self):
        """Gets the process_instance_id of this UserOperationLogEntryDto.  # noqa: E501

        If not `null`, the operation is restricted to entities in relation to this process instance.  # noqa: E501

        :return: The process_instance_id of this UserOperationLogEntryDto.  # noqa: E501
        :rtype: str
        """
        return self._process_instance_id

    @process_instance_id.setter
    def process_instance_id(self, process_instance_id):
        """Sets the process_instance_id of this UserOperationLogEntryDto.

        If not `null`, the operation is restricted to entities in relation to this process instance.  # noqa: E501

        :param process_instance_id: The process_instance_id of this UserOperationLogEntryDto.  # noqa: E501
        :type: str
        """

        self._process_instance_id = process_instance_id

    @property
    def execution_id(self):
        """Gets the execution_id of this UserOperationLogEntryDto.  # noqa: E501

        If not `null`, the operation is restricted to entities in relation to this execution.  # noqa: E501

        :return: The execution_id of this UserOperationLogEntryDto.  # noqa: E501
        :rtype: str
        """
        return self._execution_id

    @execution_id.setter
    def execution_id(self, execution_id):
        """Sets the execution_id of this UserOperationLogEntryDto.

        If not `null`, the operation is restricted to entities in relation to this execution.  # noqa: E501

        :param execution_id: The execution_id of this UserOperationLogEntryDto.  # noqa: E501
        :type: str
        """

        self._execution_id = execution_id

    @property
    def case_definition_id(self):
        """Gets the case_definition_id of this UserOperationLogEntryDto.  # noqa: E501

        If not `null`, the operation is restricted to entities in relation to this case definition.  # noqa: E501

        :return: The case_definition_id of this UserOperationLogEntryDto.  # noqa: E501
        :rtype: str
        """
        return self._case_definition_id

    @case_definition_id.setter
    def case_definition_id(self, case_definition_id):
        """Sets the case_definition_id of this UserOperationLogEntryDto.

        If not `null`, the operation is restricted to entities in relation to this case definition.  # noqa: E501

        :param case_definition_id: The case_definition_id of this UserOperationLogEntryDto.  # noqa: E501
        :type: str
        """

        self._case_definition_id = case_definition_id

    @property
    def case_instance_id(self):
        """Gets the case_instance_id of this UserOperationLogEntryDto.  # noqa: E501

        If not `null`, the operation is restricted to entities in relation to this case instance.  # noqa: E501

        :return: The case_instance_id of this UserOperationLogEntryDto.  # noqa: E501
        :rtype: str
        """
        return self._case_instance_id

    @case_instance_id.setter
    def case_instance_id(self, case_instance_id):
        """Sets the case_instance_id of this UserOperationLogEntryDto.

        If not `null`, the operation is restricted to entities in relation to this case instance.  # noqa: E501

        :param case_instance_id: The case_instance_id of this UserOperationLogEntryDto.  # noqa: E501
        :type: str
        """

        self._case_instance_id = case_instance_id

    @property
    def case_execution_id(self):
        """Gets the case_execution_id of this UserOperationLogEntryDto.  # noqa: E501

        If not `null`, the operation is restricted to entities in relation to this case execution.  # noqa: E501

        :return: The case_execution_id of this UserOperationLogEntryDto.  # noqa: E501
        :rtype: str
        """
        return self._case_execution_id

    @case_execution_id.setter
    def case_execution_id(self, case_execution_id):
        """Sets the case_execution_id of this UserOperationLogEntryDto.

        If not `null`, the operation is restricted to entities in relation to this case execution.  # noqa: E501

        :param case_execution_id: The case_execution_id of this UserOperationLogEntryDto.  # noqa: E501
        :type: str
        """

        self._case_execution_id = case_execution_id

    @property
    def task_id(self):
        """Gets the task_id of this UserOperationLogEntryDto.  # noqa: E501

        If not `null`, the operation is restricted to entities in relation to this task.  # noqa: E501

        :return: The task_id of this UserOperationLogEntryDto.  # noqa: E501
        :rtype: str
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        """Sets the task_id of this UserOperationLogEntryDto.

        If not `null`, the operation is restricted to entities in relation to this task.  # noqa: E501

        :param task_id: The task_id of this UserOperationLogEntryDto.  # noqa: E501
        :type: str
        """

        self._task_id = task_id

    @property
    def external_task_id(self):
        """Gets the external_task_id of this UserOperationLogEntryDto.  # noqa: E501

        If not `null`, the operation is restricted to entities in relation to this external task.  # noqa: E501

        :return: The external_task_id of this UserOperationLogEntryDto.  # noqa: E501
        :rtype: str
        """
        return self._external_task_id

    @external_task_id.setter
    def external_task_id(self, external_task_id):
        """Sets the external_task_id of this UserOperationLogEntryDto.

        If not `null`, the operation is restricted to entities in relation to this external task.  # noqa: E501

        :param external_task_id: The external_task_id of this UserOperationLogEntryDto.  # noqa: E501
        :type: str
        """

        self._external_task_id = external_task_id

    @property
    def batch_id(self):
        """Gets the batch_id of this UserOperationLogEntryDto.  # noqa: E501

        If not `null`, the operation is restricted to entities in relation to this batch.  # noqa: E501

        :return: The batch_id of this UserOperationLogEntryDto.  # noqa: E501
        :rtype: str
        """
        return self._batch_id

    @batch_id.setter
    def batch_id(self, batch_id):
        """Sets the batch_id of this UserOperationLogEntryDto.

        If not `null`, the operation is restricted to entities in relation to this batch.  # noqa: E501

        :param batch_id: The batch_id of this UserOperationLogEntryDto.  # noqa: E501
        :type: str
        """

        self._batch_id = batch_id

    @property
    def job_id(self):
        """Gets the job_id of this UserOperationLogEntryDto.  # noqa: E501

        If not `null`, the operation is restricted to entities in relation to this job.  # noqa: E501

        :return: The job_id of this UserOperationLogEntryDto.  # noqa: E501
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this UserOperationLogEntryDto.

        If not `null`, the operation is restricted to entities in relation to this job.  # noqa: E501

        :param job_id: The job_id of this UserOperationLogEntryDto.  # noqa: E501
        :type: str
        """

        self._job_id = job_id

    @property
    def job_definition_id(self):
        """Gets the job_definition_id of this UserOperationLogEntryDto.  # noqa: E501

        If not `null`, the operation is restricted to entities in relation to this job definition.  # noqa: E501

        :return: The job_definition_id of this UserOperationLogEntryDto.  # noqa: E501
        :rtype: str
        """
        return self._job_definition_id

    @job_definition_id.setter
    def job_definition_id(self, job_definition_id):
        """Sets the job_definition_id of this UserOperationLogEntryDto.

        If not `null`, the operation is restricted to entities in relation to this job definition.  # noqa: E501

        :param job_definition_id: The job_definition_id of this UserOperationLogEntryDto.  # noqa: E501
        :type: str
        """

        self._job_definition_id = job_definition_id

    @property
    def removal_time(self):
        """Gets the removal_time of this UserOperationLogEntryDto.  # noqa: E501

        The time after which the entry should be removed by the History Cleanup job. [Default format](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/) `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.  # noqa: E501

        :return: The removal_time of this UserOperationLogEntryDto.  # noqa: E501
        :rtype: datetime
        """
        return self._removal_time

    @removal_time.setter
    def removal_time(self, removal_time):
        """Sets the removal_time of this UserOperationLogEntryDto.

        The time after which the entry should be removed by the History Cleanup job. [Default format](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/) `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.  # noqa: E501

        :param removal_time: The removal_time of this UserOperationLogEntryDto.  # noqa: E501
        :type: datetime
        """

        self._removal_time = removal_time

    @property
    def root_process_instance_id(self):
        """Gets the root_process_instance_id of this UserOperationLogEntryDto.  # noqa: E501

        The process instance id of the root process instance that initiated the process containing this entry.  # noqa: E501

        :return: The root_process_instance_id of this UserOperationLogEntryDto.  # noqa: E501
        :rtype: str
        """
        return self._root_process_instance_id

    @root_process_instance_id.setter
    def root_process_instance_id(self, root_process_instance_id):
        """Sets the root_process_instance_id of this UserOperationLogEntryDto.

        The process instance id of the root process instance that initiated the process containing this entry.  # noqa: E501

        :param root_process_instance_id: The root_process_instance_id of this UserOperationLogEntryDto.  # noqa: E501
        :type: str
        """

        self._root_process_instance_id = root_process_instance_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserOperationLogEntryDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserOperationLogEntryDto):
            return True

        return self.to_dict() != other.to_dict()
