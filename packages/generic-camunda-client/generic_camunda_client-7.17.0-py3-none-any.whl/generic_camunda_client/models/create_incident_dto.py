# coding: utf-8

"""
    Camunda Platform REST API

    OpenApi Spec for Camunda Platform REST API.  # noqa: E501

    The version of the OpenAPI document: 7.17.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from generic_camunda_client.configuration import Configuration


class CreateIncidentDto(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'incident_type': 'str',
        'configuration': 'str',
        'message': 'str'
    }

    attribute_map = {
        'incident_type': 'incidentType',
        'configuration': 'configuration',
        'message': 'message'
    }

    def __init__(self, incident_type=None, configuration=None, message=None, local_vars_configuration=None):  # noqa: E501
        """CreateIncidentDto - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._incident_type = None
        self._configuration = None
        self._message = None
        self.discriminator = None

        self.incident_type = incident_type
        self.configuration = configuration
        self.message = message

    @property
    def incident_type(self):
        """Gets the incident_type of this CreateIncidentDto.  # noqa: E501

        A type of the new incident.  # noqa: E501

        :return: The incident_type of this CreateIncidentDto.  # noqa: E501
        :rtype: str
        """
        return self._incident_type

    @incident_type.setter
    def incident_type(self, incident_type):
        """Sets the incident_type of this CreateIncidentDto.

        A type of the new incident.  # noqa: E501

        :param incident_type: The incident_type of this CreateIncidentDto.  # noqa: E501
        :type: str
        """

        self._incident_type = incident_type

    @property
    def configuration(self):
        """Gets the configuration of this CreateIncidentDto.  # noqa: E501

        A configuration for the new incident.  # noqa: E501

        :return: The configuration of this CreateIncidentDto.  # noqa: E501
        :rtype: str
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """Sets the configuration of this CreateIncidentDto.

        A configuration for the new incident.  # noqa: E501

        :param configuration: The configuration of this CreateIncidentDto.  # noqa: E501
        :type: str
        """

        self._configuration = configuration

    @property
    def message(self):
        """Gets the message of this CreateIncidentDto.  # noqa: E501

        A message for the new incident.  # noqa: E501

        :return: The message of this CreateIncidentDto.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this CreateIncidentDto.

        A message for the new incident.  # noqa: E501

        :param message: The message of this CreateIncidentDto.  # noqa: E501
        :type: str
        """

        self._message = message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateIncidentDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateIncidentDto):
            return True

        return self.to_dict() != other.to_dict()
