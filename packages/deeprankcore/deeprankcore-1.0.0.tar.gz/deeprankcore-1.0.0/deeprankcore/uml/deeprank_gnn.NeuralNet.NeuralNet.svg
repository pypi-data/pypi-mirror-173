<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentStyleType="text/css" height="1970px" preserveAspectRatio="none" style="width:2410px;height:1970px;background:#FFFFFF;" version="1.1" viewBox="0 0 2410 1970" width="2410px" zoomAndPan="magnify"><defs/><g><!--MD5=[083c06daa1538903176e25521b90c2f4]
class deeprank_gnn.NeuralNet.NeuralNet--><g id="elem_deeprank_gnn.NeuralNet.NeuralNet"><rect codeLine="2" fill="#F1F1F1" height="756.9961" id="deeprank_gnn.NeuralNet.NeuralNet" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="484" x="1160" y="214"/><ellipse cx="1276.25" cy="230" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M1278.7231,236.1431 Q1278.1421,236.4419 1277.5029,236.5913 Q1276.8638,236.7407 1276.1582,236.7407 Q1273.6514,236.7407 1272.3315,235.0889 Q1271.0117,233.437 1271.0117,230.3159 Q1271.0117,227.1865 1272.3315,225.5347 Q1273.6514,223.8828 1276.1582,223.8828 Q1276.8638,223.8828 1277.5112,224.0322 Q1278.1587,224.1816 1278.7231,224.4805 L1278.7231,227.2031 Q1278.0923,226.6221 1277.4988,226.3523 Q1276.9053,226.0825 1276.2744,226.0825 Q1274.9297,226.0825 1274.2449,227.1492 Q1273.5601,228.2158 1273.5601,230.3159 Q1273.5601,232.4077 1274.2449,233.4744 Q1274.9297,234.541 1276.2744,234.541 Q1276.9053,234.541 1277.4988,234.2712 Q1278.0923,234.0015 1278.7231,233.4204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="243" x="1296.75" y="235.291">deeprank_gnn.NeuralNet.NeuralNet</text><line style="stroke:#181818;stroke-width:0.5;" x1="1161" x2="1643" y1="246" y2="246"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="72" x="1166" y="263.5352">batch_size</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="93" x="1166" y="280.0234">class_weights</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="48" x="1166" y="296.5117">classes</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="98" x="1166" y="313">classes_to_idx</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="95" x="1166" y="329.4883">cluster_nodes</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="67" x="1166" y="345.9766">data : dict</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="43" x="1166" y="362.4648">device</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="90" x="1166" y="378.9531">edge_feature</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="135" x="1166" y="395.4414">idx_to_classes : dict</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="39" x="1166" y="411.9297">index</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="27" x="1166" y="428.418">loss</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="10" x="1166" y="444.9063">lr</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="43" x="1166" y="461.3945">model</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="152" x="1166" y="477.8828">model_load_state_dict</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="81" x="1166" y="494.3711">nepoch : int</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="91" x="1166" y="510.8594">node_feature</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="135" x="1166" y="527.3477">num_edge_features</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="149" x="1166" y="543.8359">opt_loaded_state_dict</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="66" x="1166" y="560.3242">optimizer</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="94" x="1166" y="576.8125">output_shape</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="52" x="1166" y="593.3008">percent</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="47" x="1166" y="609.7891">shuffle</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="41" x="1166" y="626.2773">target</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="58" x="1166" y="642.7656">task : str</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="76" x="1166" y="659.2539">test_loader</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="109" x="1166" y="675.7422">threshold : float</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="83" x="1166" y="692.2305">train_loader</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="130" x="1166" y="708.7188">transform_sigmoid</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="83" x="1166" y="725.207">valid_loader</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="134" x="1166" y="741.6953">weights : NoneType</text><line style="stroke:#181818;stroke-width:0.5;" x1="1161" x2="1643" y1="748.6484" y2="748.6484"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="170" x="1166" y="766.1836">compute_class_weights()</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="472" x="1166" y="782.6719">eval(loader: DataLoader, epoch_number: int, pass_name: str) -&gt; float</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="190" x="1166" y="799.1602">format_output(pred, target)</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="287" x="1166" y="815.6484">load_model(database, Net, database_eval)</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="157" x="1166" y="832.1367">load_params(filename)</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="262" x="1166" y="848.625">load_pretrained_model(database, Net)</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="278" x="1166" y="865.1133">log_epoch_data(stage, epoch, loss, time)</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="235" x="1166" y="881.6016">put_model_to_device(dataset, Net)</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="149" x="1166" y="898.0898">save_model(filename)</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="64" x="1166" y="914.5781">set_loss()</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="129" x="1166" y="931.0664">test(database_test)</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="242" x="1166" y="947.5547">train(nepoch, validate, save_model)</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="185" x="1166" y="964.043">update_name(hdf5, outdir)</text></g><!--MD5=[a3785c14ad1946d93cc51092367d9128]
class deeprank_gnn.models.metrics.MetricsExporterCollection--><g id="elem_deeprank_gnn.models.metrics.MetricsExporterCollection"><rect codeLine="47" fill="#F1F1F1" height="64.4883" id="deeprank_gnn.models.metrics.MetricsExporterCollection" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="805" x="1006.5" y="40"/><ellipse cx="1210.25" cy="56" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M1212.7231,62.1431 Q1212.1421,62.4419 1211.5029,62.5913 Q1210.8638,62.7407 1210.1582,62.7407 Q1207.6514,62.7407 1206.3315,61.0889 Q1205.0117,59.437 1205.0117,56.3159 Q1205.0117,53.1865 1206.3315,51.5347 Q1207.6514,49.8828 1210.1582,49.8828 Q1210.8638,49.8828 1211.5112,50.0322 Q1212.1587,50.1816 1212.7231,50.4805 L1212.7231,53.2031 Q1212.0923,52.6221 1211.4988,52.3523 Q1210.9053,52.0825 1210.2744,52.0825 Q1208.9297,52.0825 1208.2449,53.1492 Q1207.5601,54.2158 1207.5601,56.3159 Q1207.5601,58.4077 1208.2449,59.4744 Q1208.9297,60.541 1210.2744,60.541 Q1210.9053,60.541 1211.4988,60.2712 Q1212.0923,60.0015 1212.7231,59.4204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="389" x="1230.75" y="61.291">deeprank_gnn.models.metrics.MetricsExporterCollection</text><line style="stroke:#181818;stroke-width:0.5;" x1="1007.5" x2="1810.5" y1="72" y2="72"/><line style="stroke:#181818;stroke-width:0.5;" x1="1007.5" x2="1810.5" y1="80" y2="80"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="793" x="1012.5" y="97.5352">process(pass_name: str, epoch_number: int, entry_names: List[str], output_values: List[Any], target_values: List[Any])</text></g><!--MD5=[0dfb6d1de165721f2c31d1dab6cb8cbc]
class torch.nn.modules.loss.CrossEntropyLoss--><g id="elem_torch.nn.modules.loss.CrossEntropyLoss"><rect codeLine="50" fill="#F1F1F1" height="130.4414" id="torch.nn.modules.loss.CrossEntropyLoss" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="348" x="7" y="7"/><ellipse cx="39.1" cy="23" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M41.5731,29.1431 Q40.9921,29.4419 40.3529,29.5913 Q39.7138,29.7407 39.0082,29.7407 Q36.5014,29.7407 35.1815,28.0889 Q33.8617,26.437 33.8617,23.3159 Q33.8617,20.1865 35.1815,18.5347 Q36.5014,16.8828 39.0082,16.8828 Q39.7138,16.8828 40.3612,17.0322 Q41.0087,17.1816 41.5731,17.4805 L41.5731,20.2031 Q40.9423,19.6221 40.3488,19.3523 Q39.7553,19.0825 39.1244,19.0825 Q37.7797,19.0825 37.0949,20.1492 Q36.4101,21.2158 36.4101,23.3159 Q36.4101,25.4077 37.0949,26.4744 Q37.7797,27.541 39.1244,27.541 Q39.7553,27.541 40.3488,27.2712 Q40.9423,27.0015 41.5731,26.4204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="278" x="56.9" y="28.291">torch.nn.modules.loss.CrossEntropyLoss</text><line style="stroke:#181818;stroke-width:0.5;" x1="8" x2="354" y1="39" y2="39"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="121" x="13" y="56.5352">ignore_index : int</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="121" x="13" y="73.0234">ignore_index : int</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="157" x="13" y="89.5117">label_smoothing : float</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="157" x="13" y="106">label_smoothing : float</text><line style="stroke:#181818;stroke-width:0.5;" x1="8" x2="354" y1="112.9531" y2="112.9531"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="336" x="13" y="130.4883">forward(input: Tensor, target: Tensor) -&gt; Tensor</text></g><!--MD5=[32841e37843d6962a08dfa0f148df6aa]
class torch.nn.modules.loss.MSELoss--><g id="elem_torch.nn.modules.loss.MSELoss"><rect codeLine="57" fill="#F1F1F1" height="64.4883" id="torch.nn.modules.loss.MSELoss" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="348" x="390" y="40"/><ellipse cx="452.75" cy="56" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M455.2231,62.1431 Q454.6421,62.4419 454.0029,62.5913 Q453.3638,62.7407 452.6582,62.7407 Q450.1514,62.7407 448.8315,61.0889 Q447.5117,59.437 447.5117,56.3159 Q447.5117,53.1865 448.8315,51.5347 Q450.1514,49.8828 452.6582,49.8828 Q453.3638,49.8828 454.0112,50.0322 Q454.6587,50.1816 455.2231,50.4805 L455.2231,53.2031 Q454.5923,52.6221 453.9988,52.3523 Q453.4053,52.0825 452.7744,52.0825 Q451.4297,52.0825 450.7449,53.1492 Q450.0601,54.2158 450.0601,56.3159 Q450.0601,58.4077 450.7449,59.4744 Q451.4297,60.541 452.7744,60.541 Q453.4053,60.541 453.9988,60.2712 Q454.5923,60.0015 455.2231,59.4204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="214" x="473.25" y="61.291">torch.nn.modules.loss.MSELoss</text><line style="stroke:#181818;stroke-width:0.5;" x1="391" x2="737" y1="72" y2="72"/><line style="stroke:#181818;stroke-width:0.5;" x1="391" x2="737" y1="80" y2="80"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="336" x="396" y="97.5352">forward(input: Tensor, target: Tensor) -&gt; Tensor</text></g><!--MD5=[5c337f31a38a1a2b04e5f28299743588]
class torch.nn.modules.loss._Loss--><g id="elem_torch.nn.modules.loss._Loss"><rect codeLine="60" fill="#F1F1F1" height="80.9766" id="torch.nn.modules.loss._Loss" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="225" x="345.5" y="1032"/><ellipse cx="360.5" cy="1048" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M362.9731,1054.1431 Q362.3921,1054.4419 361.7529,1054.5913 Q361.1138,1054.7407 360.4082,1054.7407 Q357.9014,1054.7407 356.5815,1053.0889 Q355.2617,1051.437 355.2617,1048.3159 Q355.2617,1045.1865 356.5815,1043.5347 Q357.9014,1041.8828 360.4082,1041.8828 Q361.1138,1041.8828 361.7612,1042.0322 Q362.4087,1042.1816 362.9731,1042.4805 L362.9731,1045.2031 Q362.3423,1044.6221 361.7488,1044.3523 Q361.1553,1044.0825 360.5244,1044.0825 Q359.1797,1044.0825 358.4949,1045.1492 Q357.8101,1046.2158 357.8101,1048.3159 Q357.8101,1050.4077 358.4949,1051.4744 Q359.1797,1052.541 360.5244,1052.541 Q361.1553,1052.541 361.7488,1052.2712 Q362.3423,1052.0015 362.9731,1051.4204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="193" x="374.5" y="1053.291">torch.nn.modules.loss._Loss</text><line style="stroke:#181818;stroke-width:0.5;" x1="346.5" x2="569.5" y1="1064" y2="1064"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="96" x="351.5" y="1081.5352">reduction : str</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="96" x="351.5" y="1098.0234">reduction : str</text><line style="stroke:#181818;stroke-width:0.5;" x1="346.5" x2="569.5" y1="1104.9766" y2="1104.9766"/></g><!--MD5=[6f67c15cbf5c58b61246bc6b9b763baf]
class torch.nn.modules.loss._WeightedLoss--><g id="elem_torch.nn.modules.loss._WeightedLoss"><rect codeLine="64" fill="#F1F1F1" height="64.4883" id="torch.nn.modules.loss._WeightedLoss" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="289" x="152.5" y="560.5"/><ellipse cx="167.5" cy="576.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M169.9731,582.6431 Q169.3921,582.9419 168.7529,583.0913 Q168.1138,583.2407 167.4082,583.2407 Q164.9014,583.2407 163.5815,581.5889 Q162.2617,579.937 162.2617,576.8159 Q162.2617,573.6865 163.5815,572.0347 Q164.9014,570.3828 167.4082,570.3828 Q168.1138,570.3828 168.7612,570.5322 Q169.4087,570.6816 169.9731,570.9805 L169.9731,573.7031 Q169.3423,573.1221 168.7488,572.8523 Q168.1553,572.5825 167.5244,572.5825 Q166.1797,572.5825 165.4949,573.6492 Q164.8101,574.7158 164.8101,576.8159 Q164.8101,578.9077 165.4949,579.9744 Q166.1797,581.041 167.5244,581.041 Q168.1553,581.041 168.7488,580.7712 Q169.3423,580.5015 169.9731,579.9204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="257" x="181.5" y="581.791">torch.nn.modules.loss._WeightedLoss</text><line style="stroke:#181818;stroke-width:0.5;" x1="153.5" x2="440.5" y1="592.5" y2="592.5"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="175" x="158.5" y="610.0352">weight : Optional[Tensor]</text><line style="stroke:#181818;stroke-width:0.5;" x1="153.5" x2="440.5" y1="616.9883" y2="616.9883"/></g><!--MD5=[b9f949c12e6f456cc6c00741da820552]
class torch.nn.modules.module.Module--><g id="elem_torch.nn.modules.module.Module"><rect codeLine="67" fill="#F1F1F1" height="789.9727" id="torch.nn.modules.module.Module" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="813" x="51.5" y="1174"/><ellipse cx="337.75" cy="1190" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M340.2231,1196.1431 Q339.6421,1196.4419 339.0029,1196.5913 Q338.3638,1196.7407 337.6582,1196.7407 Q335.1514,1196.7407 333.8315,1195.0889 Q332.5117,1193.437 332.5117,1190.3159 Q332.5117,1187.1865 333.8315,1185.5347 Q335.1514,1183.8828 337.6582,1183.8828 Q338.3638,1183.8828 339.0112,1184.0322 Q339.6587,1184.1816 340.2231,1184.4805 L340.2231,1187.2031 Q339.5923,1186.6221 338.9988,1186.3523 Q338.4053,1186.0825 337.7744,1186.0825 Q336.4297,1186.0825 335.7449,1187.1492 Q335.0601,1188.2158 335.0601,1190.3159 Q335.0601,1192.4077 335.7449,1193.4744 Q336.4297,1194.541 337.7744,1194.541 Q338.4053,1194.541 338.9988,1194.2712 Q339.5923,1194.0015 340.2231,1193.4204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="232" x="358.25" y="1195.291">torch.nn.modules.module.Module</text><line style="stroke:#181818;stroke-width:0.5;" x1="52.5" x2="863.5" y1="1206" y2="1206"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="198" x="57.5" y="1223.5352">T_destination : T_destination</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="143" x="57.5" y="1240.0234">dump_patches : bool</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="177" x="57.5" y="1256.5117">forward : Callable[..., Any]</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="97" x="57.5" y="1273">training : bool</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="97" x="57.5" y="1289.4883">training : bool</text><line style="stroke:#181818;stroke-width:0.5;" x1="52.5" x2="863.5" y1="1296.4414" y2="1296.4414"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="416" x="57.5" y="1313.9766">add_module(name: str, module: Optional['Module']) -&gt; None</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="281" x="57.5" y="1330.4648">apply(fn: Callable[['Module'], None]) -&gt; T</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="104" x="57.5" y="1346.9531">bfloat16() -&gt; T</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="285" x="57.5" y="1363.4414">buffers(recurse: bool) -&gt; Iterator[Tensor]</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="211" x="57.5" y="1379.9297">children() -&gt; Iterator['Module']</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="71" x="57.5" y="1396.418">cpu() -&gt; T</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="319" x="57.5" y="1412.9063">cuda(device: Optional[Union[int, device]]) -&gt; T</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="94" x="57.5" y="1429.3945">double() -&gt; T</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="73" x="57.5" y="1445.8828">eval() -&gt; T</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="127" x="57.5" y="1462.3711">extra_repr() -&gt; str</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="77" x="57.5" y="1478.8594">float() -&gt; T</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="229" x="57.5" y="1495.3477">get_buffer(target: str) -&gt; 'Tensor'</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="168" x="57.5" y="1511.8359">get_extra_state() -&gt; Any</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="280" x="57.5" y="1528.3242">get_parameter(target: str) -&gt; 'Parameter'</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="267" x="57.5" y="1544.8125">get_submodule(target: str) -&gt; 'Module'</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="72" x="57.5" y="1561.3008">half() -&gt; T</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="439" x="57.5" y="1577.7891">load_state_dict(state_dict: 'OrderedDict[str, Tensor]', strict: bool)</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="214" x="57.5" y="1594.2773">modules() -&gt; Iterator['Module']</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="489" x="57.5" y="1610.7656">named_buffers(prefix: str, recurse: bool) -&gt; Iterator[Tuple[str, Tensor]]</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="340" x="57.5" y="1627.2539">named_children() -&gt; Iterator[Tuple[str, 'Module']]</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="574" x="57.5" y="1643.7422">named_modules(memo: Optional[Set['Module']], prefix: str, remove_duplicate: bool)</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="540" x="57.5" y="1660.2305">named_parameters(prefix: str, recurse: bool) -&gt; Iterator[Tuple[str, Parameter]]</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="336" x="57.5" y="1676.7188">parameters(recurse: bool) -&gt; Iterator[Parameter]</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="772" x="57.5" y="1693.207">register_backward_hook(hook: Callable[['Module', _grad_t, _grad_t], Union[None, Tensor]]) -&gt; RemovableHandle</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="531" x="57.5" y="1709.6953">register_buffer(name: str, tensor: Optional[Tensor], persistent: bool) -&gt; None</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="480" x="57.5" y="1726.1836">register_forward_hook(hook: Callable[..., None]) -&gt; RemovableHandle</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="510" x="57.5" y="1742.6719">register_forward_pre_hook(hook: Callable[..., None]) -&gt; RemovableHandle</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="801" x="57.5" y="1759.1602">register_full_backward_hook(hook: Callable[['Module', _grad_t, _grad_t], Union[None, Tensor]]) -&gt; RemovableHandle</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="443" x="57.5" y="1775.6484">register_module(name: str, module: Optional['Module']) -&gt; None</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="467" x="57.5" y="1792.1367">register_parameter(name: str, param: Optional[Parameter]) -&gt; None</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="284" x="57.5" y="1808.625">requires_grad_(requires_grad: bool) -&gt; T</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="180" x="57.5" y="1825.1133">set_extra_state(state: Any)</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="147" x="57.5" y="1841.6016">share_memory() -&gt; T</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="563" x="57.5" y="1858.0898">state_dict(destination: T_destination, prefix: str, keep_vars: bool) -&gt; T_destination</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="678" x="57.5" y="1874.5781">to(device: Optional[Union[int, device]], dtype: Optional[Union[dtype, str]], non_blocking: bool) -&gt; T</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="109" x="57.5" y="1891.0664">to_empty() -&gt; T</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="156" x="57.5" y="1907.5547">train(mode: bool) -&gt; T</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="255" x="57.5" y="1924.043">type(dst_type: Union[dtype, str]) -&gt; T</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="313" x="57.5" y="1940.5313">xpu(device: Optional[Union[int, device]]) -&gt; T</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="265" x="57.5" y="1957.0195">zero_grad(set_to_none: bool) -&gt; None</text></g><!--MD5=[4acda1ae1affd35d39b2e0754a495686]
class torch.optim.adam.Adam--><g id="elem_torch.optim.adam.Adam"><rect codeLine="114" fill="#F1F1F1" height="64.4883" id="torch.optim.adam.Adam" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="198" x="773" y="40"/><ellipse cx="788" cy="56" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M790.4731,62.1431 Q789.8921,62.4419 789.2529,62.5913 Q788.6138,62.7407 787.9082,62.7407 Q785.4014,62.7407 784.0815,61.0889 Q782.7617,59.437 782.7617,56.3159 Q782.7617,53.1865 784.0815,51.5347 Q785.4014,49.8828 787.9082,49.8828 Q788.6138,49.8828 789.2612,50.0322 Q789.9087,50.1816 790.4731,50.4805 L790.4731,53.2031 Q789.8423,52.6221 789.2488,52.3523 Q788.6553,52.0825 788.0244,52.0825 Q786.6797,52.0825 785.9949,53.1492 Q785.3101,54.2158 785.3101,56.3159 Q785.3101,58.4077 785.9949,59.4744 Q786.6797,60.541 788.0244,60.541 Q788.6553,60.541 789.2488,60.2712 Q789.8423,60.0015 790.4731,59.4204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="166" x="802" y="61.291">torch.optim.adam.Adam</text><line style="stroke:#181818;stroke-width:0.5;" x1="774" x2="970" y1="72" y2="72"/><line style="stroke:#181818;stroke-width:0.5;" x1="774" x2="970" y1="80" y2="80"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="89" x="779" y="97.5352">step(closure)</text></g><!--MD5=[ac85235440dff0707370368f85d00167]
class torch.optim.optimizer.Optimizer--><g id="elem_torch.optim.optimizer.Optimizer"><rect codeLine="117" fill="#F1F1F1" height="179.9063" id="torch.optim.optimizer.Optimizer" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="254" x="745" y="502.5"/><ellipse cx="760" cy="518.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M762.4731,524.6431 Q761.8921,524.9419 761.2529,525.0913 Q760.6138,525.2407 759.9082,525.2407 Q757.4014,525.2407 756.0815,523.5889 Q754.7617,521.937 754.7617,518.8159 Q754.7617,515.6865 756.0815,514.0347 Q757.4014,512.3828 759.9082,512.3828 Q760.6138,512.3828 761.2612,512.5322 Q761.9087,512.6816 762.4731,512.9805 L762.4731,515.7031 Q761.8423,515.1221 761.2488,514.8523 Q760.6553,514.5825 760.0244,514.5825 Q758.6797,514.5825 757.9949,515.6492 Q757.3101,516.7158 757.3101,518.8159 Q757.3101,520.9077 757.9949,521.9744 Q758.6797,523.041 760.0244,523.041 Q760.6553,523.041 761.2488,522.7712 Q761.8423,522.5015 762.4731,521.9204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="222" x="774" y="523.791">torch.optim.optimizer.Optimizer</text><line style="stroke:#181818;stroke-width:0.5;" x1="746" x2="998" y1="534.5" y2="534.5"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="55" x="751" y="552.0352">defaults</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="132" x="751" y="568.5234">param_groups : list</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="118" x="751" y="585.0117">state : defaultdict</text><line style="stroke:#181818;stroke-width:0.5;" x1="746" x2="998" y1="591.9648" y2="591.9648"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="229" x="751" y="609.5">add_param_group(param_group)</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="177" x="751" y="625.9883">load_state_dict(state_dict)</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="75" x="751" y="642.4766">state_dict()</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="89" x="751" y="658.9648">step(closure)</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="202" x="751" y="675.4531">zero_grad(set_to_none: bool)</text></g><!--MD5=[8a11b2bc980ba9ef45f8ecbf8b8d2b80]
class torch.utils.data.dataloader.DataLoader--><g id="elem_torch.utils.data.dataloader.DataLoader"><rect codeLine="127" fill="#F1F1F1" height="443.7188" id="torch.utils.data.dataloader.DataLoader" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="556" x="1847" y="370.5"/><ellipse cx="1989.25" cy="386.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M1991.7231,392.6431 Q1991.1421,392.9419 1990.5029,393.0913 Q1989.8638,393.2407 1989.1582,393.2407 Q1986.6514,393.2407 1985.3315,391.5889 Q1984.0117,389.937 1984.0117,386.8159 Q1984.0117,383.6865 1985.3315,382.0347 Q1986.6514,380.3828 1989.1582,380.3828 Q1989.8638,380.3828 1990.5112,380.5322 Q1991.1587,380.6816 1991.7231,380.9805 L1991.7231,383.7031 Q1991.0923,383.1221 1990.4988,382.8523 Q1989.9053,382.5825 1989.2744,382.5825 Q1987.9297,382.5825 1987.2449,383.6492 Q1986.5601,384.7158 1986.5601,386.8159 Q1986.5601,388.9077 1987.2449,389.9744 Q1987.9297,391.041 1989.2744,391.041 Q1989.9053,391.041 1990.4988,390.7712 Q1991.0923,390.5015 1991.7231,389.9204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="263" x="2009.75" y="391.791">torch.utils.data.dataloader.DataLoader</text><line style="stroke:#181818;stroke-width:0.5;" x1="1848" x2="2402" y1="402.5" y2="402.5"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="544" x="1853" y="420.0352">batch_sampler : Optional[Union[Sampler[Sequence], Iterable[Sequence], None]]</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="171" x="1853" y="436.5234">batch_size : Optional[int]</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="171" x="1853" y="453.0117">batch_size : Optional[int]</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="232" x="1853" y="469.5">collate_fn : Optional[_collate_fn_t]</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="155" x="1853" y="485.9883">dataset : Dataset[T_co]</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="155" x="1853" y="502.4766">dataset : Dataset[T_co]</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="107" x="1853" y="518.9648">drop_last : bool</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="107" x="1853" y="535.4531">drop_last : bool</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="149" x="1853" y="551.9414">generator : NoneType</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="169" x="1853" y="568.4297">multiprocessing_context</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="250" x="1853" y="584.918">multiprocessing_context : NoneType</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="123" x="1853" y="601.4063">num_workers : int</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="123" x="1853" y="617.8945">num_workers : int</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="173" x="1853" y="634.3828">persistent_workers : bool</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="128" x="1853" y="650.8711">pin_memory : bool</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="128" x="1853" y="667.3594">pin_memory : bool</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="134" x="1853" y="683.8477">prefetch_factor : int</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="134" x="1853" y="700.3359">prefetch_factor : int</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="347" x="1853" y="716.8242">sampler : Optional[Union[Sampler, Iterable, None]]</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="234" x="1853" y="733.3125">sampler : Union[Sampler, Iterable]</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="96" x="1853" y="749.8008">timeout : float</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="96" x="1853" y="766.2891">timeout : float</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="296" x="1853" y="782.7773">worker_init_fn : Optional[_worker_init_fn_t]</text><line style="stroke:#181818;stroke-width:0.5;" x1="1848" x2="2402" y1="789.7305" y2="789.7305"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="241" x="1853" y="807.2656">check_worker_number_rationality()</text></g><!--MD5=[e0ec02e782dfd81f8ba91facc31060ed]
class torch_geometric.loader.dataloader.DataLoader--><g id="elem_torch_geometric.loader.dataloader.DataLoader"><rect codeLine="153" fill="#F1F1F1" height="80.9766" id="torch_geometric.loader.dataloader.DataLoader" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="352" x="1847" y="31.5"/><ellipse cx="1862" cy="47.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M1864.4731,53.6431 Q1863.8921,53.9419 1863.2529,54.0913 Q1862.6138,54.2407 1861.9082,54.2407 Q1859.4014,54.2407 1858.0815,52.5889 Q1856.7617,50.937 1856.7617,47.8159 Q1856.7617,44.6865 1858.0815,43.0347 Q1859.4014,41.3828 1861.9082,41.3828 Q1862.6138,41.3828 1863.2612,41.5322 Q1863.9087,41.6816 1864.4731,41.9805 L1864.4731,44.7031 Q1863.8423,44.1221 1863.2488,43.8523 Q1862.6553,43.5825 1862.0244,43.5825 Q1860.6797,43.5825 1859.9949,44.6492 Q1859.3101,45.7158 1859.3101,47.8159 Q1859.3101,49.9077 1859.9949,50.9744 Q1860.6797,52.041 1862.0244,52.041 Q1862.6553,52.041 1863.2488,51.7712 Q1863.8423,51.5015 1864.4731,50.9204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="320" x="1876" y="52.791">torch_geometric.loader.dataloader.DataLoader</text><line style="stroke:#181818;stroke-width:0.5;" x1="1848" x2="2198" y1="63.5" y2="63.5"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="223" x="1853" y="81.0352">exclude_keys : Optional[List[str]]</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="219" x="1853" y="97.5234">follow_batch : Optional[List[str]]</text><line style="stroke:#181818;stroke-width:0.5;" x1="1848" x2="2198" y1="104.4766" y2="104.4766"/></g><!--MD5=[5e5b18f2b7fe40501813d331ad81abfd]
class typing.Generic--><g id="elem_typing.Generic"><rect codeLine="157" fill="#F1F1F1" height="48" id="typing.Generic" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="131" x="2059.5" y="1048.5"/><ellipse cx="2074.5" cy="1064.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M2076.9731,1070.6431 Q2076.3921,1070.9419 2075.7529,1071.0913 Q2075.1138,1071.2407 2074.4082,1071.2407 Q2071.9014,1071.2407 2070.5815,1069.5889 Q2069.2617,1067.937 2069.2617,1064.8159 Q2069.2617,1061.6865 2070.5815,1060.0347 Q2071.9014,1058.3828 2074.4082,1058.3828 Q2075.1138,1058.3828 2075.7612,1058.5322 Q2076.4087,1058.6816 2076.9731,1058.9805 L2076.9731,1061.7031 Q2076.3423,1061.1221 2075.7488,1060.8523 Q2075.1553,1060.5825 2074.5244,1060.5825 Q2073.1797,1060.5825 2072.4949,1061.6492 Q2071.8101,1062.7158 2071.8101,1064.8159 Q2071.8101,1066.9077 2072.4949,1067.9744 Q2073.1797,1069.041 2074.5244,1069.041 Q2075.1553,1069.041 2075.7488,1068.7712 Q2076.3423,1068.5015 2076.9731,1067.9204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="99" x="2088.5" y="1069.791">typing.Generic</text><line style="stroke:#181818;stroke-width:0.5;" x1="2060.5" x2="2189.5" y1="1080.5" y2="1080.5"/><line style="stroke:#181818;stroke-width:0.5;" x1="2060.5" x2="2189.5" y1="1088.5" y2="1088.5"/></g><!--MD5=[fb4d509984a34096d41a08d6c15afda5]
link torch.nn.modules.loss.CrossEntropyLoss to torch.nn.modules.loss._WeightedLoss--><g id="link_torch.nn.modules.loss.CrossEntropyLoss_torch.nn.modules.loss._WeightedLoss"><path codeLine="159" d="M195.34,137.1 C218.67,241.38 264.37,445.67 285.63,540.67 " fill="none" id="torch.nn.modules.loss.CrossEntropyLoss-to-torch.nn.modules.loss._WeightedLoss" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="292.48,539.21,290.01,560.26,278.81,542.27,292.48,539.21" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[d103281278cf8640994c700f0d3c5a6c]
link torch.nn.modules.loss.MSELoss to torch.nn.modules.loss._Loss--><g id="link_torch.nn.modules.loss.MSELoss_torch.nn.modules.loss._Loss"><path codeLine="160" d="M560.68,104.25 C545.71,245.24 484.35,823.3 464.34,1011.78 " fill="none" id="torch.nn.modules.loss.MSELoss-to-torch.nn.modules.loss._Loss" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="471.29,1012.63,462.22,1031.78,457.37,1011.16,471.29,1012.63" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[32e950c13f493474d816b5147f3ce214]
link torch.nn.modules.loss._Loss to torch.nn.modules.module.Module--><g id="link_torch.nn.modules.loss._Loss_torch.nn.modules.module.Module"><path codeLine="161" d="M458,1113.13 C458,1124.65 458,1138.3 458,1153.54 " fill="none" id="torch.nn.modules.loss._Loss-to-torch.nn.modules.module.Module" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="465,1153.65,458,1173.65,451,1153.65,465,1153.65" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[44dd32491d8293b78ea0760e3135ce13]
link torch.nn.modules.loss._WeightedLoss to torch.nn.modules.loss._Loss--><g id="link_torch.nn.modules.loss._WeightedLoss_torch.nn.modules.loss._Loss"><path codeLine="162" d="M307.56,624.86 C334.09,703.63 403.85,910.73 438.25,1012.86 " fill="none" id="torch.nn.modules.loss._WeightedLoss-to-torch.nn.modules.loss._Loss" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="444.88,1010.62,444.63,1031.81,431.61,1015.09,444.88,1010.62" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[73a1c45fe00310d00d42fba856c76538]
link torch.optim.adam.Adam to torch.optim.optimizer.Optimizer--><g id="link_torch.optim.adam.Adam_torch.optim.optimizer.Optimizer"><path codeLine="163" d="M872,104.27 C872,177.38 872,362.38 872,482.22 " fill="none" id="torch.optim.adam.Adam-to-torch.optim.optimizer.Optimizer" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="879,482.33,872,502.33,865,482.33,879,482.33" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[3c8d72f985e53ddb7deda4b3afca0a8f]
link torch.utils.data.dataloader.DataLoader to typing.Generic--><g id="link_torch.utils.data.dataloader.DataLoader_typing.Generic"><path codeLine="164" d="M2125,814.66 C2125,895.44 2125,978.96 2125,1028.02 " fill="none" id="torch.utils.data.dataloader.DataLoader-to-typing.Generic" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="2132,1028.29,2125,1048.29,2118,1028.29,2132,1028.29" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[b793a16b78c634dad4b782eee56472f6]
link torch_geometric.loader.dataloader.DataLoader to torch.utils.data.dataloader.DataLoader--><g id="link_torch_geometric.loader.dataloader.DataLoader_torch.utils.data.dataloader.DataLoader"><path codeLine="165" d="M2066.67,112.53 C2080.86,128.01 2095,146.89 2103,167 C2125.65,223.96 2135.91,288.64 2139.45,350.05 " fill="none" id="torch_geometric.loader.dataloader.DataLoader-to-torch.utils.data.dataloader.DataLoader" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="2146.46,349.99,2140.39,370.29,2132.47,350.63,2146.46,349.99" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[42df5b01e2782d2942d7c99f92a00e67]
link deeprank_gnn.models.metrics.MetricsExporterCollection to deeprank_gnn.NeuralNet.NeuralNet--><g id="link_deeprank_gnn.models.metrics.MetricsExporterCollection_deeprank_gnn.NeuralNet.NeuralNet"><path codeLine="166" d="M1310.39,104.21 C1281.3,118.53 1252.77,138.8 1236,167 C1229.39,178.11 1224.3,189.54 1220.56,201.19 " fill="none" id="deeprank_gnn.models.metrics.MetricsExporterCollection-to-deeprank_gnn.NeuralNet.NeuralNet" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="1217.03,213.91,1222.4883,209.1975,1220.2376,202.3467,1214.7794,207.0591,1217.03,213.91" style="stroke:#181818;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="121" x="1237" y="180.5684">_metrics_exporters</text></g><!--MD5=[42df5b01e2782d2942d7c99f92a00e67]
link deeprank_gnn.models.metrics.MetricsExporterCollection to deeprank_gnn.NeuralNet.NeuralNet--><g id="link_deeprank_gnn.models.metrics.MetricsExporterCollection_deeprank_gnn.NeuralNet.NeuralNet"><path codeLine="167" d="M1404.83,104.27 C1402.61,122.52 1400.11,146.02 1399,167 C1398.6,174.54 1398.97,176.44 1399,184 C1399.02,189.52 1399.04,195.09 1399.07,200.68 " fill="none" id="deeprank_gnn.models.metrics.MetricsExporterCollection-to-deeprank_gnn.NeuralNet.NeuralNet-1" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="1399.12,213.8,1403.0936,207.7825,1399.0673,201.8001,1395.0937,207.8176,1399.12,213.8" style="stroke:#181818;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="121" x="1400" y="180.5684">_metrics_exporters</text></g><!--MD5=[c89c43157c5f18bcbad17a7789fac722]
link torch.nn.modules.loss.CrossEntropyLoss to deeprank_gnn.NeuralNet.NeuralNet--><g id="link_torch.nn.modules.loss.CrossEntropyLoss_deeprank_gnn.NeuralNet.NeuralNet"><path codeLine="168" d="M355.2,132.98 C360.85,134.41 366.46,135.75 372,137 C442.31,152.81 951,182.87 1016,214 C1063.25,236.63 1108.27,267.37 1149.78,301.6 " fill="none" id="torch.nn.modules.loss.CrossEntropyLoss-to-deeprank_gnn.NeuralNet.NeuralNet" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="1159.97,310.14,1157.9399,303.2206,1150.7719,302.4332,1152.802,309.3526,1159.97,310.14" style="stroke:#181818;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="26" x="832" y="180.5684">loss</text></g><!--MD5=[a45a98f54bf0c14bce9ef47d30e34434]
link torch.nn.modules.loss.MSELoss to deeprank_gnn.NeuralNet.NeuralNet--><g id="link_torch.nn.modules.loss.MSELoss_deeprank_gnn.NeuralNet.NeuralNet"><path codeLine="169" d="M654.62,104.12 C686.29,114.79 722.14,126.65 755,137 C812.68,155.16 963.84,183.4 1016,214 C1062.69,241.39 1107.96,275.64 1150.07,312.25 " fill="none" id="torch.nn.modules.loss.MSELoss-to-deeprank_gnn.NeuralNet.NeuralNet" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="1159.85,320.85,1157.9822,313.885,1150.8346,312.9302,1152.7024,319.8952,1159.85,320.85" style="stroke:#181818;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="26" x="938" y="180.5684">loss</text></g><!--MD5=[69a29c3c8839ec37961e1a3f63220129]
link torch.optim.adam.Adam to deeprank_gnn.NeuralNet.NeuralNet--><g id="link_torch.optim.adam.Adam_deeprank_gnn.NeuralNet.NeuralNet"><path codeLine="170" d="M903.96,104.27 C953.45,152.68 1053.08,250.15 1150.32,345.28 " fill="none" id="torch.optim.adam.Adam-to-deeprank_gnn.NeuralNet.NeuralNet" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="1159.72,354.47,1158.229,347.4147,1151.143,346.0774,1152.634,353.1327,1159.72,354.47" style="stroke:#181818;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="60" x="975" y="180.5684">optimizer</text></g><!--MD5=[69a29c3c8839ec37961e1a3f63220129]
link torch.optim.adam.Adam to deeprank_gnn.NeuralNet.NeuralNet--><g id="link_torch.optim.adam.Adam_deeprank_gnn.NeuralNet.NeuralNet"><path codeLine="171" d="M928.82,104.1 C947.94,114.56 969.39,126.29 989,137 C1013.44,150.35 1022.43,149.39 1044,167 C1080.84,197.09 1116.79,231.34 1150.8,267.05 " fill="none" id="torch.optim.adam.Adam-to-deeprank_gnn.NeuralNet.NeuralNet-1" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="1159.88,276.65,1158.6696,269.5412,1151.6421,267.9244,1152.8525,275.0332,1159.88,276.65" style="stroke:#181818;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="60" x="1057" y="180.5684">optimizer</text></g><!--MD5=[152328f39e34a89245ca8151260c6d74]
link torch_geometric.loader.dataloader.DataLoader to deeprank_gnn.NeuralNet.NeuralNet--><g id="link_torch_geometric.loader.dataloader.DataLoader_deeprank_gnn.NeuralNet.NeuralNet"><path codeLine="172" d="M2021.65,112.57 C2018.68,136.6 2010.83,166.01 1991,184 C1936.76,233.19 1894.82,181.92 1829,214 C1767.56,243.95 1708.19,285.22 1654.24,329.52 " fill="none" id="torch_geometric.loader.dataloader.DataLoader-to-deeprank_gnn.NeuralNet.NeuralNet" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="1644.23,337.83,1651.4021,337.0809,1653.4691,330.1724,1646.2971,330.9215,1644.23,337.83" style="stroke:#181818;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="70" x="2006" y="180.5684">test_loader</text></g><!--MD5=[152328f39e34a89245ca8151260c6d74]
link torch_geometric.loader.dataloader.DataLoader to deeprank_gnn.NeuralNet.NeuralNet--><g id="link_torch_geometric.loader.dataloader.DataLoader_deeprank_gnn.NeuralNet.NeuralNet"><path codeLine="173" d="M1916.35,112.56 C1888.26,121.77 1857.76,130.71 1829,137 C1770.67,149.75 1609.13,130.34 1562,167 C1547.87,177.99 1534.98,190.38 1523.24,203.83 " fill="none" id="torch_geometric.loader.dataloader.DataLoader-to-deeprank_gnn.NeuralNet.NeuralNet-1" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="1514.89,213.8,1521.808,211.765,1522.5904,204.5965,1515.6723,206.6315,1514.89,213.8" style="stroke:#181818;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="70" x="1563" y="180.5684">test_loader</text></g><!--MD5=[152328f39e34a89245ca8151260c6d74]
link torch_geometric.loader.dataloader.DataLoader to deeprank_gnn.NeuralNet.NeuralNet--><g id="link_torch_geometric.loader.dataloader.DataLoader_deeprank_gnn.NeuralNet.NeuralNet"><path codeLine="174" d="M1911.39,112.51 C1884.6,121.25 1855.94,129.98 1829,137 C1761.1,154.69 1732.07,127.61 1674,167 C1657.36,178.29 1641.52,190.96 1626.47,204.69 " fill="none" id="torch_geometric.loader.dataloader.DataLoader-to-deeprank_gnn.NeuralNet.NeuralNet-2" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="1616.69,213.86,1623.8035,212.6774,1625.4477,205.6562,1618.3343,206.8389,1616.69,213.86" style="stroke:#181818;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="75" x="1675" y="180.5684">train_loader</text></g><!--MD5=[152328f39e34a89245ca8151260c6d74]
link torch_geometric.loader.dataloader.DataLoader to deeprank_gnn.NeuralNet.NeuralNet--><g id="link_torch_geometric.loader.dataloader.DataLoader_deeprank_gnn.NeuralNet.NeuralNet"><path codeLine="175" d="M1896.48,112.53 C1860.7,126.75 1822.86,144.88 1791,167 C1743,200.33 1696.64,240.58 1653.67,282.84 " fill="none" id="torch_geometric.loader.dataloader.DataLoader-to-deeprank_gnn.NeuralNet.NeuralNet-3" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="1644.26,292.18,1651.3354,290.7878,1652.7716,283.7211,1645.6962,285.1134,1644.26,292.18" style="stroke:#181818;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="76" x="1792" y="180.5684">valid_loader</text></g><!--MD5=[152328f39e34a89245ca8151260c6d74]
link torch_geometric.loader.dataloader.DataLoader to deeprank_gnn.NeuralNet.NeuralNet--><g id="link_torch_geometric.loader.dataloader.DataLoader_deeprank_gnn.NeuralNet.NeuralNet"><path codeLine="176" d="M1970.61,112.54 C1941.96,133.96 1905.75,160.73 1873,184 C1853.71,197.71 1847.68,199.47 1829,214 C1770.98,259.14 1710.68,309.87 1654.3,359.14 " fill="none" id="torch_geometric.loader.dataloader.DataLoader-to-deeprank_gnn.NeuralNet.NeuralNet-4" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="1644.19,368,1651.339,367.0556,1653.2168,360.0933,1646.0678,361.0377,1644.19,368" style="stroke:#181818;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="76" x="1895" y="180.5684">valid_loader</text></g><!--MD5=[5f99b6f93a617e61828cb6bf484a166d]
@startuml deeprank_gnn.NeuralNet.NeuralNet
set namespaceSeparator none
class "deeprank_gnn.NeuralNet.NeuralNet" as deeprank_gnn.NeuralNet.NeuralNet {
  batch_size
  class_weights
  classes
  classes_to_idx
  cluster_nodes
  data : dict
  device
  edge_feature
  idx_to_classes : dict
  index
  loss
  lr
  model
  model_load_state_dict
  nepoch : int
  node_feature
  num_edge_features
  opt_loaded_state_dict
  optimizer
  output_shape
  percent
  shuffle
  target
  task : str
  test_loader
  threshold : float
  train_loader
  transform_sigmoid
  valid_loader
  weights : NoneType
  compute_class_weights()
  eval(loader: DataLoader, epoch_number: int, pass_name: str) -> float
  format_output(pred, target)
  load_model(database, Net, database_eval)
  load_params(filename)
  load_pretrained_model(database, Net)
  log_epoch_data(stage, epoch, loss, time)
  put_model_to_device(dataset, Net)
  save_model(filename)
  set_loss()
  test(database_test)
  train(nepoch, validate, save_model)
  update_name(hdf5, outdir)
}
class "deeprank_gnn.models.metrics.MetricsExporterCollection" as deeprank_gnn.models.metrics.MetricsExporterCollection {
  process(pass_name: str, epoch_number: int, entry_names: List[str], output_values: List[Any], target_values: List[Any])
}
class "torch.nn.modules.loss.CrossEntropyLoss" as torch.nn.modules.loss.CrossEntropyLoss {
  ignore_index : int
  ignore_index : int
  label_smoothing : float
  label_smoothing : float
  forward(input: Tensor, target: Tensor) -> Tensor
}
class "torch.nn.modules.loss.MSELoss" as torch.nn.modules.loss.MSELoss {
  forward(input: Tensor, target: Tensor) -> Tensor
}
class "torch.nn.modules.loss._Loss" as torch.nn.modules.loss._Loss {
  reduction : str
  reduction : str
}
class "torch.nn.modules.loss._WeightedLoss" as torch.nn.modules.loss._WeightedLoss {
  weight : Optional[Tensor]
}
class "torch.nn.modules.module.Module" as torch.nn.modules.module.Module {
  T_destination : T_destination
  dump_patches : bool
  forward : Callable[..., Any]
  training : bool
  training : bool
  add_module(name: str, module: Optional['Module']) -> None
  apply(fn: Callable[['Module'], None]) -> T
  bfloat16() -> T
  buffers(recurse: bool) -> Iterator[Tensor]
  children() -> Iterator['Module']
  cpu() -> T
  cuda(device: Optional[Union[int, device]]) -> T
  double() -> T
  eval() -> T
  extra_repr() -> str
  float() -> T
  get_buffer(target: str) -> 'Tensor'
  get_extra_state() -> Any
  get_parameter(target: str) -> 'Parameter'
  get_submodule(target: str) -> 'Module'
  half() -> T
  load_state_dict(state_dict: 'OrderedDict[str, Tensor]', strict: bool)
  modules() -> Iterator['Module']
  named_buffers(prefix: str, recurse: bool) -> Iterator[Tuple[str, Tensor]]
  named_children() -> Iterator[Tuple[str, 'Module']]
  named_modules(memo: Optional[Set['Module']], prefix: str, remove_duplicate: bool)
  named_parameters(prefix: str, recurse: bool) -> Iterator[Tuple[str, Parameter]]
  parameters(recurse: bool) -> Iterator[Parameter]
  register_backward_hook(hook: Callable[['Module', _grad_t, _grad_t], Union[None, Tensor]]) -> RemovableHandle
  register_buffer(name: str, tensor: Optional[Tensor], persistent: bool) -> None
  register_forward_hook(hook: Callable[..., None]) -> RemovableHandle
  register_forward_pre_hook(hook: Callable[..., None]) -> RemovableHandle
  register_full_backward_hook(hook: Callable[['Module', _grad_t, _grad_t], Union[None, Tensor]]) -> RemovableHandle
  register_module(name: str, module: Optional['Module']) -> None
  register_parameter(name: str, param: Optional[Parameter]) -> None
  requires_grad_(requires_grad: bool) -> T
  set_extra_state(state: Any)
  share_memory() -> T
  state_dict(destination: T_destination, prefix: str, keep_vars: bool) -> T_destination
  to(device: Optional[Union[int, device]], dtype: Optional[Union[dtype, str]], non_blocking: bool) -> T
  to_empty() -> T
  train(mode: bool) -> T
  type(dst_type: Union[dtype, str]) -> T
  xpu(device: Optional[Union[int, device]]) -> T
  zero_grad(set_to_none: bool) -> None
}
class "torch.optim.adam.Adam" as torch.optim.adam.Adam {
  step(closure)
}
class "torch.optim.optimizer.Optimizer" as torch.optim.optimizer.Optimizer {
  defaults
  param_groups : list
  state : defaultdict
  add_param_group(param_group)
  load_state_dict(state_dict)
  state_dict()
  step(closure)
  zero_grad(set_to_none: bool)
}
class "torch.utils.data.dataloader.DataLoader" as torch.utils.data.dataloader.DataLoader {
  batch_sampler : Optional[Union[Sampler[Sequence], Iterable[Sequence], None]]
  batch_size : Optional[int]
  batch_size : Optional[int]
  collate_fn : Optional[_collate_fn_t]
  dataset : Dataset[T_co]
  dataset : Dataset[T_co]
  drop_last : bool
  drop_last : bool
  generator : NoneType
  multiprocessing_context
  multiprocessing_context : NoneType
  num_workers : int
  num_workers : int
  persistent_workers : bool
  pin_memory : bool
  pin_memory : bool
  prefetch_factor : int
  prefetch_factor : int
  sampler : Optional[Union[Sampler, Iterable, None]]
  sampler : Union[Sampler, Iterable]
  timeout : float
  timeout : float
  worker_init_fn : Optional[_worker_init_fn_t]
  check_worker_number_rationality()
}
class "torch_geometric.loader.dataloader.DataLoader" as torch_geometric.loader.dataloader.DataLoader {
  exclude_keys : Optional[List[str]]
  follow_batch : Optional[List[str]]
}
class "typing.Generic" as typing.Generic {
}
torch.nn.modules.loss.CrossEntropyLoss - -|> torch.nn.modules.loss._WeightedLoss
torch.nn.modules.loss.MSELoss - -|> torch.nn.modules.loss._Loss
torch.nn.modules.loss._Loss - -|> torch.nn.modules.module.Module
torch.nn.modules.loss._WeightedLoss - -|> torch.nn.modules.loss._Loss
torch.optim.adam.Adam - -|> torch.optim.optimizer.Optimizer
torch.utils.data.dataloader.DataLoader - -|> typing.Generic
torch_geometric.loader.dataloader.DataLoader - -|> torch.utils.data.dataloader.DataLoader
deeprank_gnn.models.metrics.MetricsExporterCollection - -* deeprank_gnn.NeuralNet.NeuralNet : _metrics_exporters
deeprank_gnn.models.metrics.MetricsExporterCollection - -* deeprank_gnn.NeuralNet.NeuralNet : _metrics_exporters
torch.nn.modules.loss.CrossEntropyLoss - -* deeprank_gnn.NeuralNet.NeuralNet : loss
torch.nn.modules.loss.MSELoss - -* deeprank_gnn.NeuralNet.NeuralNet : loss
torch.optim.adam.Adam - -* deeprank_gnn.NeuralNet.NeuralNet : optimizer
torch.optim.adam.Adam - -* deeprank_gnn.NeuralNet.NeuralNet : optimizer
torch_geometric.loader.dataloader.DataLoader - -* deeprank_gnn.NeuralNet.NeuralNet : test_loader
torch_geometric.loader.dataloader.DataLoader - -* deeprank_gnn.NeuralNet.NeuralNet : test_loader
torch_geometric.loader.dataloader.DataLoader - -* deeprank_gnn.NeuralNet.NeuralNet : train_loader
torch_geometric.loader.dataloader.DataLoader - -* deeprank_gnn.NeuralNet.NeuralNet : valid_loader
torch_geometric.loader.dataloader.DataLoader - -* deeprank_gnn.NeuralNet.NeuralNet : valid_loader
@enduml

PlantUML version 1.2022.5(Sat Apr 30 12:55:52 CEST 2022)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Default Encoding: UTF-8
Language: en
Country: NL
--></g></svg>