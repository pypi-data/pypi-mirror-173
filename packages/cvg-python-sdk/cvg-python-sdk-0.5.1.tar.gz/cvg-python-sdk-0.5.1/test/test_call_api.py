"""
    VIER Cognitive Voice Call API

    With the VIER Cognitive Voice Call API you can easily do things like building your voicebots, which can be reached via phone calls. You can receive speech input of the customer as transcripted text in many languages. Let different voices say your text in this call. After the voicebot dialog you may drop the call (call fully completed by bot) or transfer the call e.g. to the relevant service hotline (human agent required to satisfy customer).  On some events, such as receiving an incoming phone call or transcription of a customer's utterance, VIER makes an HTTP request to a URL to be provided by you. This is called a webhook. To handle a webhook, you need to build a small web application that can accept the HTTP requests. The required webhooks are listed as bot endpoints.  The operations defined in this specification can be used by your bot to trigger certain voice and/or telephony related actions on the currently active call.  Most of the available operations are subject to queuing, meaning that the commands, even when triggered simultaneously, will not be executed simultaneously. Instead, these operations will be executed after each other. This is being done to simplify bot development as otherwise the bot would need to hit exact timings for the operations it triggers to not produce overlapping audio in the phone and still be quick enough to feel responsive to the conversation partner.  The queuing mechanism allows the bot to simply trigger several operations after each other and CVG makes sure to to execute them without overlap after each other. Some operations also support a `bargeIn` flag, which makes the operation interruptible by the conversation partner.  All operations that are not subject to queuing will document this fact in their respective description.  # noqa: E501

    The version of the OpenAPI document: 1.24.4
    Contact: support@vier.ai
    Generated by: https://openapi-generator.tech
"""


import unittest

import cvg_sdk
from cvg_sdk.api.call_api import CallApi  # noqa: E501


class TestCallApi(unittest.TestCase):
    """CallApi unit test stubs"""

    def setUp(self):
        self.api = CallApi()  # noqa: E501

    def tearDown(self):
        pass

    def test_bridge(self):
        """Test case for bridge

        Bridge the call to a different destination for agent assistance  # noqa: E501
        """
        pass

    def test_data(self):
        """Test case for data

        Deprecated, use the `/dialog/{resellerToken}/{dialogId}/data` endpoint instead.  # noqa: E501
        """
        pass

    def test_dial(self):
        """Test case for dial

        Begin a call to an external number  # noqa: E501
        """
        pass

    def test_drop(self):
        """Test case for drop

        Drop the call  # noqa: E501
        """
        pass

    def test_forward(self):
        """Test case for forward

        Forward the call to a different destination  # noqa: E501
        """
        pass

    def test_play(self):
        """Test case for play

        Play something to the call  # noqa: E501
        """
        pass

    def test_prompt(self):
        """Test case for prompt

        Say something to the call with a prompt  # noqa: E501
        """
        pass

    def test_say(self):
        """Test case for say

        Say something to the call  # noqa: E501
        """
        pass

    def test_start_inactivity(self):
        """Test case for start_inactivity

        Start inactivity detection  # noqa: E501
        """
        pass

    def test_start_recording(self):
        """Test case for start_recording

        Start or resume recording of the call  # noqa: E501
        """
        pass

    def test_stop_inactivity(self):
        """Test case for stop_inactivity

        Stop inactivity detection  # noqa: E501
        """
        pass

    def test_stop_recording(self):
        """Test case for stop_recording

        Pause or terminate recording of the call  # noqa: E501
        """
        pass

    def test_switch_transcription(self):
        """Test case for switch_transcription

        Switch transcription vendor/profile and/or language  # noqa: E501
        """
        pass


if __name__ == '__main__':
    unittest.main()
