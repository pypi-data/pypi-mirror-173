"""
    VIER Cognitive Voice Call API

    With the VIER Cognitive Voice Call API you can easily do things like building your voicebots, which can be reached via phone calls. You can receive speech input of the customer as transcripted text in many languages. Let different voices say your text in this call. After the voicebot dialog you may drop the call (call fully completed by bot) or transfer the call e.g. to the relevant service hotline (human agent required to satisfy customer).  On some events, such as receiving an incoming phone call or transcription of a customer's utterance, VIER makes an HTTP request to a URL to be provided by you. This is called a webhook. To handle a webhook, you need to build a small web application that can accept the HTTP requests. The required webhooks are listed as bot endpoints.  The operations defined in this specification can be used by your bot to trigger certain voice and/or telephony related actions on the currently active call.  Most of the available operations are subject to queuing, meaning that the commands, even when triggered simultaneously, will not be executed simultaneously. Instead, these operations will be executed after each other. This is being done to simplify bot development as otherwise the bot would need to hit exact timings for the operations it triggers to not produce overlapping audio in the phone and still be quick enough to feel responsive to the conversation partner.  The queuing mechanism allows the bot to simply trigger several operations after each other and CVG makes sure to to execute them without overlap after each other. Some operations also support a `bargeIn` flag, which makes the operation interruptible by the conversation partner.  All operations that are not subject to queuing will document this fact in their respective description.  # noqa: E501

    The version of the OpenAPI document: 1.24.4
    Contact: support@vier.ai
    Generated by: https://openapi-generator.tech
"""


import sys
import unittest

import cvg_sdk
from cvg_sdk.model.barge_in_options import BargeInOptions
from cvg_sdk.model.interpret_as import InterpretAs
from cvg_sdk.model.language import Language
from cvg_sdk.model.prompt_parameters_all_of import PromptParametersAllOf
from cvg_sdk.model.prompt_parameters_type import PromptParametersType
from cvg_sdk.model.synthesis_parameters import SynthesisParameters
from cvg_sdk.model.synthesizer_selection import SynthesizerSelection
globals()['BargeInOptions'] = BargeInOptions
globals()['InterpretAs'] = InterpretAs
globals()['Language'] = Language
globals()['PromptParametersAllOf'] = PromptParametersAllOf
globals()['PromptParametersType'] = PromptParametersType
globals()['SynthesisParameters'] = SynthesisParameters
globals()['SynthesizerSelection'] = SynthesizerSelection
from cvg_sdk.model.prompt_parameters import PromptParameters


class TestPromptParameters(unittest.TestCase):
    """PromptParameters unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def testPromptParameters(self):
        """Test PromptParameters"""
        # FIXME: construct object with mandatory attributes with example values
        # model = PromptParameters()  # noqa: E501
        pass


if __name__ == '__main__':
    unittest.main()
