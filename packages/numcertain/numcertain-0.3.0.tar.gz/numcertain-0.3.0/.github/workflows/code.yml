name: Code CI

on:
  push:
    branches:
      # Restricting to these branches and tags stops duplicate jobs on internal
      # PRs but stops CI running on internal branches without a PR. Delete the
      # next 5 lines to restore the original behaviour
      - master
      - main
    tags:
      - "*"
  pull_request:
  schedule:
    # Run every Monday at 8am to check latest versions of dependencies
    - cron: "0 8 * * MON"

jobs:
  lint:
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest"]
        python: ["3.9"]

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout Source
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}
      
      - name: Install dependancies
        run: |
          python -m pip install --upgrade pip
          pip install .[dev] -r requirements.txt

      - name: Run black, flake8, mypy
        run: |
          pre-commit run --all-files --show-diff-on-failure --color=always -v

  test:
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest"] # can add windows-latest, macos-latest
        python: ["3.9", "3.10"]
        deploy: [false]

        include:
          # Add an extra Python3.9 runner to use the lockfile
          - os: "ubuntu-latest"
            python: "3.9"
            deploy: true

    runs-on: ${{ matrix.os }}
    env:
      # https://github.com/pytest-dev/pytest/issues/2042
      PY_IGNORE_IMPORTMISMATCH: "1"

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}

      - name: Install dependancies
        if: ${{ !matrix.deploy }}
        run: |
          python -m pip install --upgrade pip
          pip install .[dev]

      - name: Install dependancies (deploy)
        if: ${{ matrix.deploy }}
        run: |
          python -m pip install --upgrade pip
          pip install .[dev] -r requirements.txt

      - name: Run tests with Pytest
        run: |
          pytest

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          name: ${{ matrix.python }}/${{ matrix.os }}/${{ matrix.deploy }}
          files: cov.xml

  pretend_version:
    runs-on: "ubuntu-latest"
    outputs:
      PRETEND_VERSION: ${{ steps.pretend_version.outputs.PRETEND_VERSION }}
    steps:
      - name: Checkout Source
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set pretend version
        id: pretend_version
        if: ${{ !startsWith(github.ref, 'refs/tags') }}
        run: echo "PRETEND_VERSION=$(git describe --tags --abbrev=0).$(date +%s)" >> $GITHUB_OUTPUT

  sdist:
    needs: [lint, test, pretend_version]
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest"]
        python: ["3.9"]

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout Source
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}

      - name: Build Sdist
        # Set SOURCE_DATE_EPOCH from git commit for reproducible build
        # https://reproducible-builds.org/
        # Set group writable and umask to do the same to match inside DLS
        run: |
          chmod -R g+w .
          umask 0002
          pipx run --python $(which python${{ matrix.python }}) build --sdist
        env:
          SETUPTOOLS_SCM_PRETEND_VERSION: ${{ needs.pretend_version.outputs.PRETEND_VERSION }}

      - name: Upload Sdist as artifact
        uses: actions/upload-artifact@v3
        with:
          path: dist/*.tar.gz

  wheel:
    needs: [lint, test, pretend_version]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        arch: [{python: x64, wheel: auto}]
        include:
          - os: windows-latest
            arch: {python: x86, wheel: auto32}
          - os: windows-latest
            arch: {python: x64, wheel: auto64}

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout Source
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          architecture: ${{ matrix.arch.python }}

      - name: Create Wheel
        uses: pypa/cibuildwheel@v2.10.2
        env:
          CIBW_BUILD: "cp*"
          CIBW_ARCHS: ${{ matrix.arch.wheel }}
          CIBW_ENVIRONMENT: SETUPTOOLS_SCM_PRETEND_VERSION=${{ needs.pretend_version.outputs.PRETEND_VERSION }}

      - name: Upload Wheel as artifact
        uses: actions/upload-artifact@v3
        with:
          path: ./wheelhouse/*.whl

  test_pypi_publish:
    needs: [sdist, wheel]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: artifact
          path: dist

      - name: Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.TEST_PYPI_TOKEN }}
          repository_url: https://test.pypi.org/legacy/

  release:
    needs: [test_pypi_publish]
    runs-on: ubuntu-latest
    # upload to PyPI and make a release on every tag
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: artifact
          path: dist

      - name: Github Release
        # We pin to the SHA, not the tag, for security reasons.
        # https://docs.github.com/en/actions/learn-github-actions/security-hardening-for-github-actions#using-third-party-actions
        uses: softprops/action-gh-release@1e07f4398721186383de40550babbdf2b84acfc5 # v0.1.14
        with:
          files: dist/*
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@v1.5.1
        with:
          password: ${{ secrets.PYPI_TOKEN }}
