# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['ni_measurement_service',
 'ni_measurement_service._internal',
 'ni_measurement_service._internal.parameter',
 'ni_measurement_service._internal.stubs',
 'ni_measurement_service._internal.stubs.ni',
 'ni_measurement_service._internal.stubs.ni.measurements',
 'ni_measurement_service._internal.stubs.ni.measurements.discovery',
 'ni_measurement_service._internal.stubs.ni.measurements.discovery.v1',
 'ni_measurement_service._internal.stubs.ni.measurements.measurementservice',
 'ni_measurement_service._internal.utilities',
 'ni_measurement_service.measurement']

package_data = \
{'': ['*'],
 'ni_measurement_service._internal.stubs': ['proto/ni/measurements/*',
                                            'proto/ni/measurements/discovery/v1/*',
                                            'proto/ni/measurements/measurementservice/*']}

install_requires = \
['grpcio==1.41.1', 'protobuf>=3.20,<4.0']

extras_require = \
{':sys_platform == "win32"': ['pywin32>=303,<304']}

setup_kwargs = {
    'name': 'ni-measurement-service',
    'version': '0.10.2',
    'description': 'Develop language agnostic measurement plugins reusable by both the Interactive Debugging/Validation and Test Automation workflow.',
    'long_description': '# Python Measurements\n\n- [Python Measurements](#python-measurements)\n  - [Introduction](#introduction)\n  - [Abbreviations](#abbreviations)\n  - [Dependencies](#dependencies)\n  - [Examples](#examples)\n    - [Setting up the Example Measurements](#setting-up-the-example-measurements)\n    - [Executing the Example Measurements](#executing-the-example-measurements)\n  - [Developing Measurements: Quick Start](#developing-measurements-quick-start)\n    - [Installation](#installation)\n    - [Developing a minimal python measurement](#developing-a-minimal-python-measurement)\n  - [Steps to run/debug the measurement service](#steps-to-rundebug-the-measurement-service)\n  - [Static Registration of Python Measurements](#static-registration-of-python-measurements)\n    - [Create a batch file that runs a python measurement](#create-a-batch-file-that-runs-a-python-measurement)\n    - [Create Executable for Python Scripts](#create-executable-for-python-scripts)\n  - [API References](#api-references)\n  - [Appendix: Managing Measurement as Python Package(Project)](#appendix-managing-measurement-as-python-packageproject)\n    - [Create and Manage Python Measurement Package using poetry](#create-and-manage-python-measurement-package-using-poetry)\n    - [Create and Manage Python Measurement Package using venv](#create-and-manage-python-measurement-package-using-venv)\n    - [Create and Manage Python Measurement Package by directly installing NIMS as a system-level package](#create-and-manage-python-measurement-package-by-directly-installing-nims-as-a-system-level-package)\n\n---\n\n## Introduction\n\nThe `ni-measurement-service` is a python framework that enables measurement developers to quickly create python measurements and run them as a service (gRPC).\n\n---\n\n## Abbreviations\n\n- NIMS - NI Measurement Service Framework - `ni-measurement-service`.\n\n---\n\n## Dependencies\n\n- Python >= 3.8 [(3.8 recommended)](https://www.python.org/downloads/release/python-3810/)\n- [grpcio = 1.41.1](https://pypi.org/project/grpcio/1.41.1/)\n- [protobuf = 3.19.1](https://pypi.org/project/protobuf/3.19.1/)\n- [pywin32 >= 303 (Only for Windows)](https://pypi.org/project/pywin32/303/)\n\n---\n\n## Examples\n\nThe `examples` directory contains the below list of python measurement example projects:  \n\n1. **Sample measurement**: Sample Measurement is a simple python-based example that has configurations defined for all supported data types. The measurement logic simply assigns the configuration values to respective output values.\n2. **DC Measurements**: Simple python measurement example that interacts with DCPower 4145 Instrument.\n    1. DC Measurement with Measurement UI\n    2. DC Measurement with LabVIEW UI\n\n### Setting up the Example Measurements\n\nThe example measurements shared are *poetry-based* projects. Follow the below steps to  for setting up the example measurement:\n\n1. Install `poetry`. Refer to <https://python-poetry.org/docs/#installation> for information on installing poetry.\n\n2. Open a command prompt, and change the working directory to the directory of the example measurement you want to work with.\n\n    ``` cmd\n    cd <path_of_example_measurement>\n    REM Example: cd "..\\measurement-services-python\\examples\\dc_measurement"\n    ```\n\n3. Run `poetry install`. This command creates/updates the .venv and installs all the dependencies(including `ni-measurement-service` package) needed for the Example into `.venv`\n\n    ``` cmd\n    poetry install\n    ```\n    - If you get a "command not found" error during `poetry install`, make sure that you added the Poetry path to the system path. Refer to [https://python-poetry.org/docs/#installing-with-the-official-installer/Add-poetry-to-your-path](https://python-poetry.org/docs/#installing-with-the-official-installer:~:text=Add%20Poetry%20to%20your%20PATH)\n    ![PoetryInstallFail](PoetryInstallFail.png)\n\n### Executing the Example Measurements\n\n1. Start the discovery service if not already started.\n2. Use `poetry run` to run the measurement service:\n\n    ``` cmd\n    poetry run python measurement.py\n    ```\n\n---\n\n## Developing Measurements: Quick Start\n\nThis section provides instructions to develop custom python measurement services using NIMS.\n\n### Installation\n\nMake sure the system has the recommended python version is installed. Install the NIMS Framework using [pip](https://pip.pypa.io/).\n\n``` cmd\nREM Activate the required virtual environment if any.\npip install ni-measurement-service\n```\n\nCheck if you have installed the expected version of NIMS installed by running the below command:\n\n```cmd\npip show ni-measurement-service\n```\n\n### Developing a minimal python measurement\n\n1. Install the `ni-measurement-generator` package.\n\n``` cmd\nREM Activate the required virtual environment if any.\npip install ni-measurement-generator\n```\n\n2. Run the `ni-measurement-generator` tool. Use command line arguments to specify the `display-name` and optionally the `version`, `measurement-type`, and `product-type`.\n\n    1. Running `ni-measurement-generator` without optional arguments:\n\n    `ni-measurement-generator SampleMeasurement`\n\n    \'SampleMeasurement\' is the display name of your measurement service. Without the optional arguments,\n    the other arguments are generated for you based on the display name.\n\n    2. Running `ni-measurement-generator` with optional arguments for `version`, `measurement-type`, `product-type`, `ui-file`,\n    `service-class`, `service-id`, and `description`:\n\n    `ni-measurement-generator SampleMeasurement 0.1.0.0 Measurement Product --ui-file MeasurementUI.measui --service-class SampleMeasurement_Python --service-id 00000000-0000-0000-0000-000000000000 --description description`\n\n    3. Running `ni-measurement-generator` with optional argument for `directory-out`\n\n    `ni-measurement-generator SampleMeasurement --directory-out <new_path_for_created_files>`\n\n    If no output directory is specified, the files will\n    be placed in a new folder under the current directory\n    named after the display name without spaces.\n\n3. To customize the created measurement, provide metadata of the measurement\'s configuration(input parameters) and outputs(output parameters) in `measurement.py`.\n    1. Use the `configuration()` decorator to provide metadata about the configurations.**The order of the configuration decorator must match with the order of the parameters defined in the function signature.**\n\n        ``` python\n        @foo_measurement_service.register_measurement\n        #Display Names can not contains backslash or front slash.\n        @foo_measurement_service.configuration("DisplayNameForInput1", DataType.String, "DefaultValueForInput1")\n        @foo_measurement_service.configuration("DisplayNameForInput2", DataType.String, "DefaultValueForInput2")\n        def measure(input_1, input_2):\n            \'\'\' A simple Measurement method\'\'\'\n            return ["foo", "bar"]\n        ```\n\n    2. Use the `output()` decorator to provide metadata about the output.**The order of the output decorators from top to bottom must match the order of the values of the list returned by the function.**\n\n        ``` python\n        @foo_measurement_service.register_measurement\n        @foo_measurement_service.configuration("DisplayNameForInput1", nims.DataType.String, "DefaultValueForInput1")\n        @foo_measurement_service.configuration("DisplayNameForInput2", nims.DataType.String, "DefaultValueForInput2")\n        @foo_measurement_service.output("DisplayNameForOutput1", nims.DataType.String)\n        @foo_measurement_service.output("DisplayNameForOutput2", nims.DataType.String)\n        def measure(input_1, input_2):\n            return ["foo", "bar"]\n        ```\n\n4. Run/Debug the created measurement by following the steps discussed in the section ["Steps to run/debug the measurement service".](#steps-to-rundebug-the-measurement-service)\n\n---\n\n## Steps to run/debug the measurement service\n\n1. Start the discovery service if not already started.\n\n2. (Optional)Activate related virtual environments. Measurement developers can skip this step if they are not using any [virtual environments](#create-and-manage-python-measurement-package-using-venv) or [poetry-based projects.](#create-and-manage-python-measurement-package-using-poetry)\n\n    ```cmd\n    .venv\\scripts\\activate\n    ```\n\n    - After successful activation, you can see the name of the environment, `(.venv)` is added to the command prompt.\n    - If you face an access issue when trying to activate, retry after allowing scripts to run as Administrator by executing the below command in Windows PowerShell:\n\n        ```cmd\n        Set-ExecutionPolicy RemoteSigned \n        ```\n\n3. [Run](https://code.visualstudio.com/docs/python/python-tutorial#_run-hello-world)/[Debug](https://code.visualstudio.com/docs/python/debugging#_basic-debugging) the measurement python file created using NIMS.\n\n4. To stop the running measurement service, press `Enter` in the terminal to properly close the service.\n\n5. (Optional)After the usage of measurement, deactivate the virtual environment. Measurement developers can skip this step if they are not using any [virtual environments](#create-and-manage-python-measurement-package-using-venv) or [poetry-based projects.](#create-and-manage-python-measurement-package-using-poetry)\n\n    ```cmd\n    deactivate\n    ```\n\n---\n\n## Static Registration of Python Measurements\n\nRefer to the [Static Registration of measurements section]() for the detailed steps needed to statically register a measurement.\n\nTo Statically register the examples provided, the user can copy the example directory with the service config file with the startup batch file, to the search paths and follow the [Setting up the Example Measurements](#setting-up-the-example-measurements) section to set up the measurements.\n\nNote: The startup batch file can be modified accordingly if the user wants to run with a custom python distribution or virtual environment\n\n### Create a batch file that runs a python measurement\n\nThe batch file used for static registration is responsible for starting the Python Scripts.\n\nTypical Batch File:\n\n``` cmd\n"<path_to_python_exe>" "<path_to_measurement_file>"\n```\n\nExamples to start the fictitious file named `foo_measurement.py`:\n\n1. Using the Python system distribution\n\n    ```cmd\n    python foo_measurement.py\n    ```\n\n2. Using the virtual environment\n\n    ```cmd\n    REM Windows\n    .\\.venv\\Scripts\\python.exe foo_measurement.py\n\n    REM Linux \n    .venv/bin/python foo_measurement.py\n    ```\n\n### Create Executable for Python Scripts\n\nTo create an executable from a measurement, measurement authors can use the [pyinstaller](https://www.pyinstaller.org/) tooling. During the executable creation, the user can also embed the User Interface file using the `--add-data "<path_of_the_UI_File>;."`.\n\nTypical Pyinstaller command to build executable.\n\n```cmd\npyinstaller --onefile --console --add-data "<path_of_the_UI_File>;." --paths .venv\\Lib\\site-packages\\ <path_of_the_measurement_script>\n```\n\n## API References\n\n[Click here](https://ni.github.io/measurement-services-python/) to view the API reference documentation.\n\n## Appendix: Managing Measurement as Python Package(Project)\n\nMeasurement and its related files can be maintained as a python package. The basic components of any Python Measurement Package are:\n\n1. Measurement Python Module(.py file)\n    - This file contains all the details related to the measurement and also contains the logic for the measurement execution.\n    - This file is run to start the measurement as a service.\n\n2. UI File\n    - UI file for the Measurement. Types of supported UI files are:\n        - Measurement UI(.measui): created using the **Measurement UI Editor application**.\n        - LabVIEW UI(.vi)\n    - The path of this file is configured by `ui_file_path` in `measurement_info` variable definition in Measurement Python Module(.py file).\n\nPython communities have different ways of managing a python package and its dependencies. It is up to the measurement developer, on how they wanted to maintain the package and dependencies. Measurement developers can choose from a few common approaches discussed below based on their requirements.\n\nNote: Once we have the template support for Python measurement, the approach to managing the python measurement package(project) will be streamlined and simplified.\n\n### Create and Manage Python Measurement Package using poetry\n\n1. Setting up Poetry(One-time setup)\n    1. Make sure the system has the recommended python version installed.\n\n    2. Install the `poetry` using the installation steps given in <https://python-poetry.org/docs/#installation>.\n\n2. Create a new python project and add NIMS Framework as a dependency to the project.\n\n    1. Open a command prompt, and change the working directory to the directory of your choice where you want to create the project.\n\n        ``` cmd\n        cd <path_of_directory_of_your_choice>\n        ```\n\n    2. Create a python package(project) using the poetry new command. Poetry will create boilerplate files and folders that are commonly needed for a python project.\n\n        ``` cmd\n        poetry new <name_of_the_project>\n        ```\n\n    3. Add the `ni-measurement-service` framework package as a dependency using the [poetry add command](https://python-poetry.org/docs/cli/#add).\n\n        ``` cmd\n        cd <name_of_the_project>\n        poetry add ni-measurement-service\n        ```\n\n    4. The virtual environment will be auto-created by poetry.\n\n    5. Create measurement modules as described in ["Developing a minimal python measurement"](#developing-a-minimal-python-measurement)\n        - Any additional dependencies required by measurement can be added using [add command](https://python-poetry.org/docs/cli/#add).\n\n            ``` cmd\n            poetry add <dependency_package_name>\n            ```\n\nFor detailed info on managing projects using poetry [refer to the official documentation](https://python-poetry.org/docs/cli/).\n\n### Create and Manage Python Measurement Package using venv\n\n1. Make sure the system has the recommended python version installed.\n\n2. Open a command prompt, and change the working directory to the directory of your choice where you want to create a project.\n\n    ``` cmd\n    cd <path_of_directory_of_your_choice>\n    ```\n\n3. Create a virtual environment.\n\n    ``` cmd\n    REM This creates a virtual environment named .venv\n    python -m venv .venv\n    ```\n\n4. Activate the virtual environment. After successful activation\n\n    ``` cmd\n    .venv\\scripts\\activate\n    REM Optionally upgrade the pip within the venv by executing the command\n    python -m pip install -U pip\n    ```\n\n5. Install the `ni-measurement-service` package into the virtual environment.\n\n    ``` cmd\n    pip install ni-measurement-service\n    ```\n\n6. Create measurement modules as described in ["Developing a minimal python measurement"](#developing-a-minimal-python-measurement)\n    - Any additional dependencies required by measurement can be added pip install.\n\n        ``` cmd\n        pip install <dependency_package_name>\n        ```\n\nFor detailed info on managing projects with a virtual environment [refer to the official documentation](https://docs.python.org/3/tutorial/venv.html).\n\n### Create and Manage Python Measurement Package by directly installing NIMS as a system-level package\n\nMeasurement developers can also install the NIMS framework as a system package if their requirement is demanding.\n\n1. Install the `ni-measurement-service` package from the command prompt\n\n    ``` cmd\n    pip install ni-measurement-service\n    ```\n\n2. Create measurement modules as described in ["Developing a minimal python measurement"](#developing-a-minimal-python-measurement)\n\n---\n',
    'author': 'NI',
    'author_email': 'opensource@ni.com',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/ni/measurement-services-python/',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'extras_require': extras_require,
    'python_requires': '>=3.8,<4.0',
}


setup(**setup_kwargs)
