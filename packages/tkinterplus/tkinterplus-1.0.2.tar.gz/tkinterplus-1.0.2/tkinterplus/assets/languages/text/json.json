{
    "$schema": "./schema.json",
    "name": "TKSS",
    "scopeName": "source.tkss",
    "patterns": [{
            "include": "#comment-block"
        },
        {
            "include": "#escapes"
        },
        {
            "include": "#selector"
        },
        {
            "include": "#rule-list"
        }
    ],
    "repository": {
        "escapes": {
            "patterns": [{
                    "match": "\\\\[0-9a-fA-F]{1,6}",
                    "name": "constant.character.escape.codepoint.css"
                },
                {
                    "begin": "\\\\$\\s*",
                    "end": "^(?<!\\G)",
                    "name": "constant.character.escape.newline.css"
                },
                {
                    "match": "\\\\.",
                    "name": "constant.character.escape.css"
                }
            ]
        },
        "commas": {
            "match": ",",
            "name": "punctuation.separator.list.comma.css"
        },
        "comment-block": {
            "begin": "/\\*",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.comment.begin.css"
                }
            },
            "end": "\\*/",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.comment.end.css"
                }
            },
            "name": "comment.block.css"
        },
        "numeric-values": {
            "patterns": [{
                "match": "(?xi) (?<![\\w-])[0-9]{1,}",
                "name": "constant.numeric.css"
            }]
        },
        "property-keywords": {
            "patterns": [{
                    "match": "(?xi) (?<![\\w-])\n(above|absolute|active|add|additive|after-edge|alias|all|all-petite-caps|all-scroll|all-small-caps|alpha|alphabetic|alternate|alternate-reverse\n|always|antialiased|auto|auto-pos|available|avoid|avoid-column|avoid-page|avoid-region|backwards|balance|baseline|before-edge|below|bevel\n|bidi-override|blink|block|block-axis|block-start|block-end|bold|bolder|border|border-box|both|bottom|bottom-outside|break-all|break-word|bullets\n|butt|capitalize|caption|cell|center|central|char|circle|clip|clone|close-quote|closest-corner|closest-side|col-resize|collapse|color|color-burn\n|color-dodge|column|column-reverse|common-ligatures|compact|condensed|contain|content|content-box|contents|context-menu|contextual|copy|cover\n|crisp-edges|crispEdges|crosshair|cyclic|darken|dashed|decimal|default|dense|diagonal-fractions|difference|digits|disabled|disc|discretionary-ligatures\n|distribute|distribute-all-lines|distribute-letter|distribute-space|dot|dotted|double|double-circle|downleft|downright|e-resize|each-line|ease|ease-in\n|ease-in-out|ease-out|economy|ellipse|ellipsis|embed|end|evenodd|ew-resize|exact|exclude|exclusion|expanded|extends|extra-condensed|extra-expanded\n|fallback|farthest-corner|farthest-side|fill|fill-available|fill-box|filled|fit-content|fixed|flat|flex|flex-end|flex-start|flip|flow-root|forwards|freeze\n|from-image|full-width|geometricPrecision|georgian|grab|grabbing|grayscale|grid|groove|hand|hanging|hard-light|help|hidden|hide\n|historical-forms|historical-ligatures|horizontal|horizontal-tb|hue|icon|ideograph-alpha|ideograph-numeric|ideograph-parenthesis|ideograph-space\n|ideographic|inactive|infinite|inherit|initial|inline|inline-axis|inline-block|inline-end|inline-flex|inline-grid|inline-list-item|inline-start\n|inline-table|inset|inside|inter-character|inter-ideograph|inter-word|intersect|invert|isolate|isolate-override|italic|jis04|jis78|jis83\n|jis90|justify|justify-all|kannada|keep-all|landscape|large|larger|left|lighten|lighter|line|line-edge|line-through|linear|linearRGB\n|lining-nums|list-item|local|loose|lowercase|lr|lr-tb|ltr|luminance|luminosity|main-size|mandatory|manipulation|manual|margin-box|match-parent\n|match-source|mathematical|max-content|medium|menu|message-box|middle|min-content|miter|mixed|move|multiply|n-resize|narrower|ne-resize\n|nearest-neighbor|nesw-resize|newspaper|no-change|no-clip|no-close-quote|no-common-ligatures|no-contextual|no-discretionary-ligatures\n|no-drop|no-historical-ligatures|no-open-quote|no-repeat|none|nonzero|normal|not-allowed|nowrap|ns-resize|numbers|numeric|nw-resize|nwse-resize\n|oblique|oldstyle-nums|open|open-quote|optimizeLegibility|optimizeQuality|optimizeSpeed|optional|ordinal|outset|outside|over|overlay|overline|padding\n|padding-box|page|painted|pan-down|pan-left|pan-right|pan-up|pan-x|pan-y|paused|petite-caps|pixelated|plaintext|pointer|portrait|pre|pre-line\n|pre-wrap|preserve-3d|progress|progressive|proportional-nums|proportional-width|proximity|radial|recto|region|relative|remove|repeat|repeat-[xy]\n|reset-size|reverse|revert|ridge|right|rl|rl-tb|round|row|row-resize|row-reverse|row-severse|rtl|ruby|ruby-base|ruby-base-container|ruby-text\n|ruby-text-container|run-in|running|s-resize|saturation|scale-down|screen|scroll|scroll-position|se-resize|semi-condensed|semi-expanded|separate\n|sesame|show|sideways|sideways-left|sideways-lr|sideways-right|sideways-rl|simplified|slashed-zero|slice|small|small-caps|small-caption|smaller\n|smooth|soft-light|solid|space|space-around|space-between|space-evenly|spell-out|square|sRGB|stacked-fractions|start|static|status-bar|swap\n|step-end|step-start|sticky|stretch|strict|stroke|stroke-box|style|sub|subgrid|subpixel-antialiased|subtract|super|sw-resize|symbolic|table\n|table-caption|table-cell|table-column|table-column-group|table-footer-group|table-header-group|table-row|table-row-group|tabular-nums|tb|tb-rl\n|text|text-after-edge|text-before-edge|text-bottom|text-top|thick|thin|titling-caps|top|top-outside|touch|traditional|transparent|triangle\n|ultra-condensed|ultra-expanded|under|underline|unicase|unset|upleft|uppercase|upright|use-glyph-orientation|use-script|verso|vertical\n|vertical-ideographic|vertical-lr|vertical-rl|vertical-text|view-box|visible|visibleFill|visiblePainted|visibleStroke|w-resize|wait|wavy\n|weight|whitespace|wider|words|wrap|wrap-reverse|x|x-large|x-small|xx-large|xx-small|y|zero|zoom-in|zoom-out)\n(?![\\w-])",
                    "name": "support.constant.property-value.css"
                },
                {
                    "match": "(?xi) (?<![\\w-])\n(arabic-indic|armenian|bengali|cambodian|circle|cjk-decimal|cjk-earthly-branch|cjk-heavenly-stem|cjk-ideographic\n|decimal|decimal-leading-zero|devanagari|disc|disclosure-closed|disclosure-open|ethiopic-halehame-am\n|ethiopic-halehame-ti-e[rt]|ethiopic-numeric|georgian|gujarati|gurmukhi|hangul|hangul-consonant|hebrew\n|hiragana|hiragana-iroha|japanese-formal|japanese-informal|kannada|katakana|katakana-iroha|khmer\n|korean-hangul-formal|korean-hanja-formal|korean-hanja-informal|lao|lower-alpha|lower-armenian|lower-greek\n|lower-latin|lower-roman|malayalam|mongolian|myanmar|oriya|persian|simp-chinese-formal|simp-chinese-informal\n|square|tamil|telugu|thai|tibetan|trad-chinese-formal|trad-chinese-informal|upper-alpha|upper-armenian\n|upper-latin|upper-roman|urdu)\n(?![\\w-])",
                    "name": "support.constant.property-value.list-style-type.css"
                },
                {
                    "match": "(?<![\\w-])(?i:-(?:ah|apple|atsc|epub|hp|khtml|moz|ms|o|rim|ro|tc|wap|webkit|xv)|(?:mso|prince))-[a-zA-Z-]+",
                    "name": "support.constant.vendored.property-value.css"
                },
                {
                    "match": "(?<![\\w-])(?i:arial|century|comic|courier|garamond|georgia|helvetica|impact|lucida|symbol|system-ui|system|tahoma|times|trebuchet|ui-monospace|ui-rounded|ui-sans-serif|ui-serif|utopia|verdana|webdings|sans-serif|serif|monospace)(?![\\w-])",
                    "name": "support.constant.font-name.css"
                }
            ]
        },
        "property-values": {
            "patterns": [{
                    "include": "#commas"
                },
                {
                    "include": "#comment-block"
                },
                {
                    "include": "#escapes"
                },
                {
                    "include": "#property-keywords"
                },
                {
                    "include": "#numeric-values"
                },
                {
                    "include": "#string"
                }
            ]
        },
        "rule-list": {
            "begin": "{",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.section.property-list.begin.bracket.curly.css"
                }
            },
            "end": "}",
            "endCaptures": {
                "0": {
                    "name": "punctuation.section.property-list.end.bracket.curly.css"
                }
            },
            "name": "meta.property-list.css",
            "patterns": [{
                "include": "#rule-list-innards"
            }]
        },
        "rule-list-innards": {
            "patterns": [{
                    "include": "#comment-block"
                },
                {
                    "include": "#escapes"
                },
                {
                    "match": "(?x) (?<![\\w-])\n--\n(?:[-a-zA-Z_]    | [^\\x00-\\x7F])     # First letter\n(?:[-a-zA-Z0-9_] | [^\\x00-\\x7F]      # Remainder of identifier\n  |\\\\(?:[0-9a-fA-F]{1,6}|.)\n)*",
                    "name": "variable.css"
                },
                {
                    "begin": "(?<![-a-zA-Z])(?=[-a-zA-Z])",
                    "end": "$|(?![-a-zA-Z])",
                    "name": "meta.property-name.css",
                    "patterns": [{
                        "include": "#property-names"
                    }]
                },
                {
                    "begin": "(:)\\s*",
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.separator.key-value.css"
                        }
                    },
                    "end": "\\s*(;)|\\s*(?=}|\\))",
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.terminator.rule.css"
                        }
                    },
                    "contentName": "meta.property-value.css",
                    "patterns": [{
                            "include": "#comment-block"
                        },
                        {
                            "include": "#property-values"
                        }
                    ]
                },
                {
                    "match": ";",
                    "name": "punctuation.terminator.rule.css"
                }
            ]
        },
        "selector": {
            "begin": "(?x)\n(?=\n  (?:\\|)?                    # Possible anonymous namespace prefix\n  (?:\n    [-\\[:.*\\#a-zA-Z_]       # Valid selector character\n    |\n    [^\\x00-\\x7F]            # Which can include non-ASCII symbols\n    |\n    \\\\                      # Or an escape sequence\n    (?:[0-9a-fA-F]{1,6}|.)\n  )\n)",
            "end": "(?=\\s*[/@{)])",
            "name": "meta.selector.css",
            "patterns": [{
                "include": "#selector-innards"
            }]
        },
        "selector-innards": {
            "patterns": [{
                    "include": "#comment-block"
                },
                {
                    "include": "#commas"
                },
                {
                    "include": "#escapes"
                },
                {
                    "captures": {
                        "1": {
                            "name": "entity.other.namespace-prefix.css"
                        },
                        "2": {
                            "name": "punctuation.separator.css"
                        }
                    },
                    "match": "(?x)\n(?:^|(?<=[\\s,(};]))         # Follows whitespace, comma, semicolon, or bracket\n(?!\n  [-\\w*]+\n  \\|\n  (?!\n      [-\\[:.*\\#a-zA-Z_]    # Make sure there's a selector to match\n    | [^\\x00-\\x7F]\n  )\n)\n(\n  (?: [-a-zA-Z_]    | [^\\x00-\\x7F] )   # First letter\n  (?: [-a-zA-Z0-9_] | [^\\x00-\\x7F]     # Remainder of identifier\n    | \\\\(?:[0-9a-fA-F]{1,6}|.)\n  )*\n  |\n  \\*     # Universal namespace\n)?\n(\\|)     # Namespace separator"
                },
                {
                    "include": "#tag-names"
                },
                {
                    "match": "\\*",
                    "name": "entity.name.tag.wildcard.css"
                },
                {
                    "captures": {
                        "1": {
                            "name": "punctuation.definition.entity.css"
                        },
                        "2": {
                            "patterns": [{
                                "include": "#escapes"
                            }]
                        }
                    },
                    "match": "(?x) (?<![@\\w-])\n([.\\#])\n# Invalid identifier\n(\n  (?:\n    # Starts with ASCII digits, with possible hyphen preceding it\n    -?[0-9]\n    |\n    # Consists of a hyphen only\n    -                                      # Terminated by either:\n    (?= $                                  # - End-of-line\n      | [\\s,.\\#)\\[:{>+~|]               # - Followed by another selector\n      | /\\*                               # - Followed by a block comment\n    )\n    |\n    # Name contains unescaped ASCII symbol\n    (?:                                    # Check for acceptable preceding characters\n        [-a-zA-Z_0-9]|[^\\x00-\\x7F]       # - Valid selector character\n      | \\\\(?:[0-9a-fA-F]{1,6}|.)         # - Escape sequence\n    )*\n    (?:                                    # Invalid punctuation\n      [!\"'%&(*;<?@^`|\\]}]                 # - NOTE: We exempt `)` from the list of checked\n      |                                    #   symbols to avoid matching `:not(.invalid)`\n      / (?!\\*)                            # - Avoid invalidating the start of a comment\n    )+\n  )\n  # Mark remainder of selector invalid\n  (?: [-a-zA-Z_0-9]|[^\\x00-\\x7F]         # - Otherwise valid identifier characters\n    | \\\\(?:[0-9a-fA-F]{1,6}|.)           # - Escape sequence\n  )*\n)",
                    "name": "invalid.illegal.bad-identifier.css"
                },
                {
                    "captures": {
                        "1": {
                            "name": "punctuation.definition.entity.css"
                        },
                        "2": {
                            "patterns": [{
                                "include": "#escapes"
                            }]
                        }
                    },
                    "match": "(?x)\n(\\.)                                  # Valid class-name\n(\n  (?: [-a-zA-Z_0-9]|[^\\x00-\\x7F]     # Valid identifier characters\n    | \\\\(?:[0-9a-fA-F]{1,6}|.)       # Escape sequence\n  )+\n)                                      # Followed by either:\n(?= $                                  # - End of the line\n  | [\\s,.\\#)\\[:{>+~|]               # - Another selector\n  | /\\*                               # - A block comment\n)",
                    "name": "entity.other.attribute-name.class.css"
                },
                {
                    "captures": {
                        "1": {
                            "name": "punctuation.definition.entity.css"
                        },
                        "2": {
                            "patterns": [{
                                "include": "#escapes"
                            }]
                        }
                    },
                    "match": "(?x)\n(\\#)\n(\n  -?\n  (?![0-9])\n  (?:[-a-zA-Z0-9_]|[^\\x00-\\x7F]|\\\\(?:[0-9a-fA-F]{1,6}|.))+\n)\n(?=$|[\\s,.\\#)\\[:{>+~|]|/\\*)",
                    "name": "entity.other.attribute-name.id.css"
                },
                {
                    "begin": "\\[",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.entity.begin.bracket.square.css"
                        }
                    },
                    "end": "\\]",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.entity.end.bracket.square.css"
                        }
                    },
                    "name": "meta.attribute-selector.css",
                    "patterns": [{
                            "include": "#comment-block"
                        },
                        {
                            "include": "#string"
                        },
                        {
                            "captures": {
                                "1": {
                                    "name": "storage.modifier.ignore-case.css"
                                }
                            },
                            "match": "(?<=[\"'\\s]|^|\\*/)\\s*([iI])\\s*(?=[\\s\\]]|/\\*|$)"
                        },
                        {
                            "captures": {
                                "1": {
                                    "name": "string.unquoted.attribute-value.css",
                                    "patterns": [{
                                        "include": "#escapes"
                                    }]
                                }
                            },
                            "match": "(?x)(?<==)\\s*((?!/\\*)(?:[^\\\\\"'\\s\\]]|\\\\.)+)"
                        },
                        {
                            "include": "#escapes"
                        },
                        {
                            "match": "[~|^$*]?=",
                            "name": "keyword.operator.pattern.css"
                        },
                        {
                            "match": "\\|",
                            "name": "punctuation.separator.css"
                        },
                        {
                            "captures": {
                                "1": {
                                    "name": "entity.other.namespace-prefix.css",
                                    "patterns": [{
                                        "include": "#escapes"
                                    }]
                                }
                            },
                            "match": "(?x)\n# Qualified namespace prefix\n( -?(?!\\d)(?:[\\w-]|[^\\x00-\\x7F]|\\\\(?:[0-9a-fA-F]{1,6}|.))+\n| \\*\n)\n# Lookahead to ensure there's a valid identifier ahead\n(?=\n  \\| (?!\\s|=|$|\\])\n  (?: -?(?!\\d)\n   |   [\\\\\\w-]\n   |   [^\\x00-\\x7F]\n   )\n)"
                        },
                        {
                            "captures": {
                                "1": {
                                    "name": "entity.other.attribute-name.css",
                                    "patterns": [{
                                        "include": "#escapes"
                                    }]
                                }
                            },
                            "match": "(?x)\n(-?(?!\\d)(?>[\\w-]|[^\\x00-\\x7F]|\\\\(?:[0-9a-fA-F]{1,6}|.))+)\n\\s*\n(?=[~|^\\]$*=]|/\\*)"
                        }
                    ]
                },
                {
                    "match": "(?x) (?<![@\\w-])\n(?=            # Custom element names must:\n  [a-z]        # - start with a lowercase ASCII letter,\n  \\w* -       # - contain at least one dash\n)\n(?:\n  (?![A-Z])    # No uppercase ASCII letters are allowed\n  [\\w-]       # Allow any other word character or dash\n)+\n(?![(\\w-])",
                    "name": "entity.name.tag.custom.css"
                }
            ]
        },
        "property-names": {
            "patterns": [{
                "match": "(?xi) (?<![\\w-])\n(?:\nbackground|foreground|font|activebackground|activeforeground|borderwidth|relief|cursorbackground|selectbackground|highlightthickness|buttonbackground|buttondownrelief|buttonup|selectcolor|highlightbackground|highlightcolor|troughcolor|sliderrelief|activeborderwidth|activestyle|cursor|selectborderwidth|selectforeground|sashwidth|anchor|padx|pady|width|height|disabledforeground|justify|wraplength|cursorborderwidth|cursorwidth|sliderlength|labelanchor|handlepad|handlesize|orient|sashpad|sashrelief|showhandle|disabledbackground|buttoncursor|aspect|activerelief|elementborderwidth|wrap|direction\n)\n(?![\\w-])",
                "name": "support.type.property-name.css"
            }]
        },
        "string": {
            "patterns": [{
                    "begin": "\"",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.begin.css"
                        }
                    },
                    "end": "\"|(?<!\\\\)(?=$|\\n)",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.end.css"
                        }
                    },
                    "name": "string.quoted.double.css",
                    "patterns": [{
                            "begin": "(?:\\G|^)(?=(?:[^\\\\\"]|\\\\.)+$)",
                            "end": "$",
                            "name": "invalid.illegal.unclosed.string.css",
                            "patterns": [{
                                "include": "#escapes"
                            }]
                        },
                        {
                            "include": "#escapes"
                        }
                    ]
                },
                {
                    "begin": "'",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.begin.css"
                        }
                    },
                    "end": "'|(?<!\\\\)(?=$|\\n)",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.end.css"
                        }
                    },
                    "name": "string.quoted.double.css",
                    "patterns": [{
                            "begin": "(?:\\G|^)(?=(?:[^\\\\']|\\\\.)+$)",
                            "end": "$",
                            "name": "invalid.illegal.unclosed.string.css",
                            "patterns": [{
                                "include": "#escapes"
                            }]
                        },
                        {
                            "include": "#escapes"
                        }
                    ]
                }
            ]
        },
        "tag-names": {
            "match": "Tk|Label|Button|Entry|CheckButton|RadioButton|Scale|ListBox|Frame|LabelFrame|PanedWindow|SpinBox|OptionMenu|Canvas|TopLevel|Message|Menu|MenuButton|ScrollBar|Text|Spinbox|Toplevel",
            "name": "entity.name.tag.css"
        }
    }
}