# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ReportMonitorInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'alert_receiver_id': 'str',
        'business_day_check_flag': 'bool',
        'country': 'str',
        'dropzone_id': 'str',
        'frequency_type': 'str',
        'id': 'str',
        'last_day_of_month_flag': 'bool',
        'merchant_account_number': 'str',
        'merchant_alias': 'str',
        'merchant_name': 'str',
        'merchant_sub_product_name': 'str',
        'minimum_file_size': 'int',
        'no_of_days': 'int',
        'platform': 'str',
        'priority_type': 'str',
        'product_owner': 'str',
        'region': 'str',
        'report_delivery_type': 'str',
        'report_file_access_method': 'str',
        'report_file_extension': 'str',
        'report_file_location': 'str',
        'report_file_name': 'str',
        'report_file_name_suffix_format': 'str',
        'report_split_indicator': 'bool',
        'report_type': 'str',
        'reporting_owner': 'str',
        'reporting_pipeline_checkpoint': 'str',
        'time_zone_detail': 'str',
        'timelag_date_type': 'str',
        'validation_job_id': 'str',
        'validation_types': 'str',
        'version': 'str'
    }

    attribute_map = {
        'alert_receiver_id': 'alertReceiverId',
        'business_day_check_flag': 'businessDayCheckFlag',
        'country': 'country',
        'dropzone_id': 'dropzoneId',
        'frequency_type': 'frequencyType',
        'id': 'id',
        'last_day_of_month_flag': 'lastDayOfMonthFlag',
        'merchant_account_number': 'merchantAccountNumber',
        'merchant_alias': 'merchantAlias',
        'merchant_name': 'merchantName',
        'merchant_sub_product_name': 'merchantSubProductName',
        'minimum_file_size': 'minimumFileSize',
        'no_of_days': 'noOfDays',
        'platform': 'platform',
        'priority_type': 'priorityType',
        'product_owner': 'productOwner',
        'region': 'region',
        'report_delivery_type': 'reportDeliveryType',
        'report_file_access_method': 'reportFileAccessMethod',
        'report_file_extension': 'reportFileExtension',
        'report_file_location': 'reportFileLocation',
        'report_file_name': 'reportFileName',
        'report_file_name_suffix_format': 'reportFileNameSuffixFormat',
        'report_split_indicator': 'reportSplitIndicator',
        'report_type': 'reportType',
        'reporting_owner': 'reportingOwner',
        'reporting_pipeline_checkpoint': 'reportingPipelineCheckpoint',
        'time_zone_detail': 'timeZoneDetail',
        'timelag_date_type': 'timelagDateType',
        'validation_job_id': 'validationJobId',
        'validation_types': 'validationTypes',
        'version': 'version'
    }

    def __init__(self, alert_receiver_id=None, business_day_check_flag=None, country=None, dropzone_id=None, frequency_type=None, id=None, last_day_of_month_flag=None, merchant_account_number=None, merchant_alias=None, merchant_name=None, merchant_sub_product_name=None, minimum_file_size=None, no_of_days=None, platform=None, priority_type=None, product_owner=None, region=None, report_delivery_type=None, report_file_access_method=None, report_file_extension=None, report_file_location=None, report_file_name=None, report_file_name_suffix_format=None, report_split_indicator=None, report_type=None, reporting_owner=None, reporting_pipeline_checkpoint=None, time_zone_detail=None, timelag_date_type=None, validation_job_id=None, validation_types=None, version=None):  # noqa: E501
        """ReportMonitorInfo - a model defined in Swagger"""  # noqa: E501
        self._alert_receiver_id = None
        self._business_day_check_flag = None
        self._country = None
        self._dropzone_id = None
        self._frequency_type = None
        self._id = None
        self._last_day_of_month_flag = None
        self._merchant_account_number = None
        self._merchant_alias = None
        self._merchant_name = None
        self._merchant_sub_product_name = None
        self._minimum_file_size = None
        self._no_of_days = None
        self._platform = None
        self._priority_type = None
        self._product_owner = None
        self._region = None
        self._report_delivery_type = None
        self._report_file_access_method = None
        self._report_file_extension = None
        self._report_file_location = None
        self._report_file_name = None
        self._report_file_name_suffix_format = None
        self._report_split_indicator = None
        self._report_type = None
        self._reporting_owner = None
        self._reporting_pipeline_checkpoint = None
        self._time_zone_detail = None
        self._timelag_date_type = None
        self._validation_job_id = None
        self._validation_types = None
        self._version = None
        self.discriminator = None
        if alert_receiver_id is not None:
            self.alert_receiver_id = alert_receiver_id
        if business_day_check_flag is not None:
            self.business_day_check_flag = business_day_check_flag
        if country is not None:
            self.country = country
        if dropzone_id is not None:
            self.dropzone_id = dropzone_id
        if frequency_type is not None:
            self.frequency_type = frequency_type
        if id is not None:
            self.id = id
        if last_day_of_month_flag is not None:
            self.last_day_of_month_flag = last_day_of_month_flag
        if merchant_account_number is not None:
            self.merchant_account_number = merchant_account_number
        if merchant_alias is not None:
            self.merchant_alias = merchant_alias
        if merchant_name is not None:
            self.merchant_name = merchant_name
        if merchant_sub_product_name is not None:
            self.merchant_sub_product_name = merchant_sub_product_name
        if minimum_file_size is not None:
            self.minimum_file_size = minimum_file_size
        if no_of_days is not None:
            self.no_of_days = no_of_days
        if platform is not None:
            self.platform = platform
        if priority_type is not None:
            self.priority_type = priority_type
        if product_owner is not None:
            self.product_owner = product_owner
        if region is not None:
            self.region = region
        if report_delivery_type is not None:
            self.report_delivery_type = report_delivery_type
        if report_file_access_method is not None:
            self.report_file_access_method = report_file_access_method
        if report_file_extension is not None:
            self.report_file_extension = report_file_extension
        if report_file_location is not None:
            self.report_file_location = report_file_location
        if report_file_name is not None:
            self.report_file_name = report_file_name
        if report_file_name_suffix_format is not None:
            self.report_file_name_suffix_format = report_file_name_suffix_format
        if report_split_indicator is not None:
            self.report_split_indicator = report_split_indicator
        if report_type is not None:
            self.report_type = report_type
        if reporting_owner is not None:
            self.reporting_owner = reporting_owner
        if reporting_pipeline_checkpoint is not None:
            self.reporting_pipeline_checkpoint = reporting_pipeline_checkpoint
        if time_zone_detail is not None:
            self.time_zone_detail = time_zone_detail
        if timelag_date_type is not None:
            self.timelag_date_type = timelag_date_type
        if validation_job_id is not None:
            self.validation_job_id = validation_job_id
        if validation_types is not None:
            self.validation_types = validation_types
        if version is not None:
            self.version = version

    @property
    def alert_receiver_id(self):
        """Gets the alert_receiver_id of this ReportMonitorInfo.  # noqa: E501


        :return: The alert_receiver_id of this ReportMonitorInfo.  # noqa: E501
        :rtype: str
        """
        return self._alert_receiver_id

    @alert_receiver_id.setter
    def alert_receiver_id(self, alert_receiver_id):
        """Sets the alert_receiver_id of this ReportMonitorInfo.


        :param alert_receiver_id: The alert_receiver_id of this ReportMonitorInfo.  # noqa: E501
        :type: str
        """

        self._alert_receiver_id = alert_receiver_id

    @property
    def business_day_check_flag(self):
        """Gets the business_day_check_flag of this ReportMonitorInfo.  # noqa: E501


        :return: The business_day_check_flag of this ReportMonitorInfo.  # noqa: E501
        :rtype: bool
        """
        return self._business_day_check_flag

    @business_day_check_flag.setter
    def business_day_check_flag(self, business_day_check_flag):
        """Sets the business_day_check_flag of this ReportMonitorInfo.


        :param business_day_check_flag: The business_day_check_flag of this ReportMonitorInfo.  # noqa: E501
        :type: bool
        """

        self._business_day_check_flag = business_day_check_flag

    @property
    def country(self):
        """Gets the country of this ReportMonitorInfo.  # noqa: E501


        :return: The country of this ReportMonitorInfo.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this ReportMonitorInfo.


        :param country: The country of this ReportMonitorInfo.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def dropzone_id(self):
        """Gets the dropzone_id of this ReportMonitorInfo.  # noqa: E501


        :return: The dropzone_id of this ReportMonitorInfo.  # noqa: E501
        :rtype: str
        """
        return self._dropzone_id

    @dropzone_id.setter
    def dropzone_id(self, dropzone_id):
        """Sets the dropzone_id of this ReportMonitorInfo.


        :param dropzone_id: The dropzone_id of this ReportMonitorInfo.  # noqa: E501
        :type: str
        """

        self._dropzone_id = dropzone_id

    @property
    def frequency_type(self):
        """Gets the frequency_type of this ReportMonitorInfo.  # noqa: E501


        :return: The frequency_type of this ReportMonitorInfo.  # noqa: E501
        :rtype: str
        """
        return self._frequency_type

    @frequency_type.setter
    def frequency_type(self, frequency_type):
        """Sets the frequency_type of this ReportMonitorInfo.


        :param frequency_type: The frequency_type of this ReportMonitorInfo.  # noqa: E501
        :type: str
        """
        allowed_values = ["Annually", "Custom", "Daily", "Monthly", "Quarterly", "Weekly"]  # noqa: E501
        if frequency_type not in allowed_values:
            raise ValueError(
                "Invalid value for `frequency_type` ({0}), must be one of {1}"  # noqa: E501
                .format(frequency_type, allowed_values)
            )

        self._frequency_type = frequency_type

    @property
    def id(self):
        """Gets the id of this ReportMonitorInfo.  # noqa: E501


        :return: The id of this ReportMonitorInfo.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ReportMonitorInfo.


        :param id: The id of this ReportMonitorInfo.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def last_day_of_month_flag(self):
        """Gets the last_day_of_month_flag of this ReportMonitorInfo.  # noqa: E501


        :return: The last_day_of_month_flag of this ReportMonitorInfo.  # noqa: E501
        :rtype: bool
        """
        return self._last_day_of_month_flag

    @last_day_of_month_flag.setter
    def last_day_of_month_flag(self, last_day_of_month_flag):
        """Sets the last_day_of_month_flag of this ReportMonitorInfo.


        :param last_day_of_month_flag: The last_day_of_month_flag of this ReportMonitorInfo.  # noqa: E501
        :type: bool
        """

        self._last_day_of_month_flag = last_day_of_month_flag

    @property
    def merchant_account_number(self):
        """Gets the merchant_account_number of this ReportMonitorInfo.  # noqa: E501


        :return: The merchant_account_number of this ReportMonitorInfo.  # noqa: E501
        :rtype: str
        """
        return self._merchant_account_number

    @merchant_account_number.setter
    def merchant_account_number(self, merchant_account_number):
        """Sets the merchant_account_number of this ReportMonitorInfo.


        :param merchant_account_number: The merchant_account_number of this ReportMonitorInfo.  # noqa: E501
        :type: str
        """

        self._merchant_account_number = merchant_account_number

    @property
    def merchant_alias(self):
        """Gets the merchant_alias of this ReportMonitorInfo.  # noqa: E501


        :return: The merchant_alias of this ReportMonitorInfo.  # noqa: E501
        :rtype: str
        """
        return self._merchant_alias

    @merchant_alias.setter
    def merchant_alias(self, merchant_alias):
        """Sets the merchant_alias of this ReportMonitorInfo.


        :param merchant_alias: The merchant_alias of this ReportMonitorInfo.  # noqa: E501
        :type: str
        """

        self._merchant_alias = merchant_alias

    @property
    def merchant_name(self):
        """Gets the merchant_name of this ReportMonitorInfo.  # noqa: E501


        :return: The merchant_name of this ReportMonitorInfo.  # noqa: E501
        :rtype: str
        """
        return self._merchant_name

    @merchant_name.setter
    def merchant_name(self, merchant_name):
        """Sets the merchant_name of this ReportMonitorInfo.


        :param merchant_name: The merchant_name of this ReportMonitorInfo.  # noqa: E501
        :type: str
        """

        self._merchant_name = merchant_name

    @property
    def merchant_sub_product_name(self):
        """Gets the merchant_sub_product_name of this ReportMonitorInfo.  # noqa: E501


        :return: The merchant_sub_product_name of this ReportMonitorInfo.  # noqa: E501
        :rtype: str
        """
        return self._merchant_sub_product_name

    @merchant_sub_product_name.setter
    def merchant_sub_product_name(self, merchant_sub_product_name):
        """Sets the merchant_sub_product_name of this ReportMonitorInfo.


        :param merchant_sub_product_name: The merchant_sub_product_name of this ReportMonitorInfo.  # noqa: E501
        :type: str
        """

        self._merchant_sub_product_name = merchant_sub_product_name

    @property
    def minimum_file_size(self):
        """Gets the minimum_file_size of this ReportMonitorInfo.  # noqa: E501


        :return: The minimum_file_size of this ReportMonitorInfo.  # noqa: E501
        :rtype: int
        """
        return self._minimum_file_size

    @minimum_file_size.setter
    def minimum_file_size(self, minimum_file_size):
        """Sets the minimum_file_size of this ReportMonitorInfo.


        :param minimum_file_size: The minimum_file_size of this ReportMonitorInfo.  # noqa: E501
        :type: int
        """

        self._minimum_file_size = minimum_file_size

    @property
    def no_of_days(self):
        """Gets the no_of_days of this ReportMonitorInfo.  # noqa: E501


        :return: The no_of_days of this ReportMonitorInfo.  # noqa: E501
        :rtype: int
        """
        return self._no_of_days

    @no_of_days.setter
    def no_of_days(self, no_of_days):
        """Sets the no_of_days of this ReportMonitorInfo.


        :param no_of_days: The no_of_days of this ReportMonitorInfo.  # noqa: E501
        :type: int
        """

        self._no_of_days = no_of_days

    @property
    def platform(self):
        """Gets the platform of this ReportMonitorInfo.  # noqa: E501


        :return: The platform of this ReportMonitorInfo.  # noqa: E501
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this ReportMonitorInfo.


        :param platform: The platform of this ReportMonitorInfo.  # noqa: E501
        :type: str
        """
        allowed_values = ["Braintree", "Hyperwallet", "Paypal"]  # noqa: E501
        if platform not in allowed_values:
            raise ValueError(
                "Invalid value for `platform` ({0}), must be one of {1}"  # noqa: E501
                .format(platform, allowed_values)
            )

        self._platform = platform

    @property
    def priority_type(self):
        """Gets the priority_type of this ReportMonitorInfo.  # noqa: E501


        :return: The priority_type of this ReportMonitorInfo.  # noqa: E501
        :rtype: str
        """
        return self._priority_type

    @priority_type.setter
    def priority_type(self, priority_type):
        """Sets the priority_type of this ReportMonitorInfo.


        :param priority_type: The priority_type of this ReportMonitorInfo.  # noqa: E501
        :type: str
        """
        allowed_values = ["Emergency", "High", "Low", "Medium"]  # noqa: E501
        if priority_type not in allowed_values:
            raise ValueError(
                "Invalid value for `priority_type` ({0}), must be one of {1}"  # noqa: E501
                .format(priority_type, allowed_values)
            )

        self._priority_type = priority_type

    @property
    def product_owner(self):
        """Gets the product_owner of this ReportMonitorInfo.  # noqa: E501


        :return: The product_owner of this ReportMonitorInfo.  # noqa: E501
        :rtype: str
        """
        return self._product_owner

    @product_owner.setter
    def product_owner(self, product_owner):
        """Sets the product_owner of this ReportMonitorInfo.


        :param product_owner: The product_owner of this ReportMonitorInfo.  # noqa: E501
        :type: str
        """

        self._product_owner = product_owner

    @property
    def region(self):
        """Gets the region of this ReportMonitorInfo.  # noqa: E501


        :return: The region of this ReportMonitorInfo.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this ReportMonitorInfo.


        :param region: The region of this ReportMonitorInfo.  # noqa: E501
        :type: str
        """
        allowed_values = ["Africa", "Asia", "Australia", "Europe", "Global", "NorthAmerica", "SouthAmerica"]  # noqa: E501
        if region not in allowed_values:
            raise ValueError(
                "Invalid value for `region` ({0}), must be one of {1}"  # noqa: E501
                .format(region, allowed_values)
            )

        self._region = region

    @property
    def report_delivery_type(self):
        """Gets the report_delivery_type of this ReportMonitorInfo.  # noqa: E501


        :return: The report_delivery_type of this ReportMonitorInfo.  # noqa: E501
        :rtype: str
        """
        return self._report_delivery_type

    @report_delivery_type.setter
    def report_delivery_type(self, report_delivery_type):
        """Sets the report_delivery_type of this ReportMonitorInfo.


        :param report_delivery_type: The report_delivery_type of this ReportMonitorInfo.  # noqa: E501
        :type: str
        """

        self._report_delivery_type = report_delivery_type

    @property
    def report_file_access_method(self):
        """Gets the report_file_access_method of this ReportMonitorInfo.  # noqa: E501


        :return: The report_file_access_method of this ReportMonitorInfo.  # noqa: E501
        :rtype: str
        """
        return self._report_file_access_method

    @report_file_access_method.setter
    def report_file_access_method(self, report_file_access_method):
        """Sets the report_file_access_method of this ReportMonitorInfo.


        :param report_file_access_method: The report_file_access_method of this ReportMonitorInfo.  # noqa: E501
        :type: str
        """

        self._report_file_access_method = report_file_access_method

    @property
    def report_file_extension(self):
        """Gets the report_file_extension of this ReportMonitorInfo.  # noqa: E501


        :return: The report_file_extension of this ReportMonitorInfo.  # noqa: E501
        :rtype: str
        """
        return self._report_file_extension

    @report_file_extension.setter
    def report_file_extension(self, report_file_extension):
        """Sets the report_file_extension of this ReportMonitorInfo.


        :param report_file_extension: The report_file_extension of this ReportMonitorInfo.  # noqa: E501
        :type: str
        """

        self._report_file_extension = report_file_extension

    @property
    def report_file_location(self):
        """Gets the report_file_location of this ReportMonitorInfo.  # noqa: E501


        :return: The report_file_location of this ReportMonitorInfo.  # noqa: E501
        :rtype: str
        """
        return self._report_file_location

    @report_file_location.setter
    def report_file_location(self, report_file_location):
        """Sets the report_file_location of this ReportMonitorInfo.


        :param report_file_location: The report_file_location of this ReportMonitorInfo.  # noqa: E501
        :type: str
        """

        self._report_file_location = report_file_location

    @property
    def report_file_name(self):
        """Gets the report_file_name of this ReportMonitorInfo.  # noqa: E501


        :return: The report_file_name of this ReportMonitorInfo.  # noqa: E501
        :rtype: str
        """
        return self._report_file_name

    @report_file_name.setter
    def report_file_name(self, report_file_name):
        """Sets the report_file_name of this ReportMonitorInfo.


        :param report_file_name: The report_file_name of this ReportMonitorInfo.  # noqa: E501
        :type: str
        """

        self._report_file_name = report_file_name

    @property
    def report_file_name_suffix_format(self):
        """Gets the report_file_name_suffix_format of this ReportMonitorInfo.  # noqa: E501


        :return: The report_file_name_suffix_format of this ReportMonitorInfo.  # noqa: E501
        :rtype: str
        """
        return self._report_file_name_suffix_format

    @report_file_name_suffix_format.setter
    def report_file_name_suffix_format(self, report_file_name_suffix_format):
        """Sets the report_file_name_suffix_format of this ReportMonitorInfo.


        :param report_file_name_suffix_format: The report_file_name_suffix_format of this ReportMonitorInfo.  # noqa: E501
        :type: str
        """

        self._report_file_name_suffix_format = report_file_name_suffix_format

    @property
    def report_split_indicator(self):
        """Gets the report_split_indicator of this ReportMonitorInfo.  # noqa: E501


        :return: The report_split_indicator of this ReportMonitorInfo.  # noqa: E501
        :rtype: bool
        """
        return self._report_split_indicator

    @report_split_indicator.setter
    def report_split_indicator(self, report_split_indicator):
        """Sets the report_split_indicator of this ReportMonitorInfo.


        :param report_split_indicator: The report_split_indicator of this ReportMonitorInfo.  # noqa: E501
        :type: bool
        """

        self._report_split_indicator = report_split_indicator

    @property
    def report_type(self):
        """Gets the report_type of this ReportMonitorInfo.  # noqa: E501


        :return: The report_type of this ReportMonitorInfo.  # noqa: E501
        :rtype: str
        """
        return self._report_type

    @report_type.setter
    def report_type(self, report_type):
        """Sets the report_type of this ReportMonitorInfo.


        :param report_type: The report_type of this ReportMonitorInfo.  # noqa: E501
        :type: str
        """

        self._report_type = report_type

    @property
    def reporting_owner(self):
        """Gets the reporting_owner of this ReportMonitorInfo.  # noqa: E501


        :return: The reporting_owner of this ReportMonitorInfo.  # noqa: E501
        :rtype: str
        """
        return self._reporting_owner

    @reporting_owner.setter
    def reporting_owner(self, reporting_owner):
        """Sets the reporting_owner of this ReportMonitorInfo.


        :param reporting_owner: The reporting_owner of this ReportMonitorInfo.  # noqa: E501
        :type: str
        """

        self._reporting_owner = reporting_owner

    @property
    def reporting_pipeline_checkpoint(self):
        """Gets the reporting_pipeline_checkpoint of this ReportMonitorInfo.  # noqa: E501


        :return: The reporting_pipeline_checkpoint of this ReportMonitorInfo.  # noqa: E501
        :rtype: str
        """
        return self._reporting_pipeline_checkpoint

    @reporting_pipeline_checkpoint.setter
    def reporting_pipeline_checkpoint(self, reporting_pipeline_checkpoint):
        """Sets the reporting_pipeline_checkpoint of this ReportMonitorInfo.


        :param reporting_pipeline_checkpoint: The reporting_pipeline_checkpoint of this ReportMonitorInfo.  # noqa: E501
        :type: str
        """

        self._reporting_pipeline_checkpoint = reporting_pipeline_checkpoint

    @property
    def time_zone_detail(self):
        """Gets the time_zone_detail of this ReportMonitorInfo.  # noqa: E501


        :return: The time_zone_detail of this ReportMonitorInfo.  # noqa: E501
        :rtype: str
        """
        return self._time_zone_detail

    @time_zone_detail.setter
    def time_zone_detail(self, time_zone_detail):
        """Sets the time_zone_detail of this ReportMonitorInfo.


        :param time_zone_detail: The time_zone_detail of this ReportMonitorInfo.  # noqa: E501
        :type: str
        """
        allowed_values = ["TZ5", "TZ6", "TZ7", "TZ8"]  # noqa: E501
        if time_zone_detail not in allowed_values:
            raise ValueError(
                "Invalid value for `time_zone_detail` ({0}), must be one of {1}"  # noqa: E501
                .format(time_zone_detail, allowed_values)
            )

        self._time_zone_detail = time_zone_detail

    @property
    def timelag_date_type(self):
        """Gets the timelag_date_type of this ReportMonitorInfo.  # noqa: E501


        :return: The timelag_date_type of this ReportMonitorInfo.  # noqa: E501
        :rtype: str
        """
        return self._timelag_date_type

    @timelag_date_type.setter
    def timelag_date_type(self, timelag_date_type):
        """Sets the timelag_date_type of this ReportMonitorInfo.


        :param timelag_date_type: The timelag_date_type of this ReportMonitorInfo.  # noqa: E501
        :type: str
        """
        allowed_values = ["DisbursementDate", "DisputeActionDate", "SettlementDate", "TransactionDate"]  # noqa: E501
        if timelag_date_type not in allowed_values:
            raise ValueError(
                "Invalid value for `timelag_date_type` ({0}), must be one of {1}"  # noqa: E501
                .format(timelag_date_type, allowed_values)
            )

        self._timelag_date_type = timelag_date_type

    @property
    def validation_job_id(self):
        """Gets the validation_job_id of this ReportMonitorInfo.  # noqa: E501


        :return: The validation_job_id of this ReportMonitorInfo.  # noqa: E501
        :rtype: str
        """
        return self._validation_job_id

    @validation_job_id.setter
    def validation_job_id(self, validation_job_id):
        """Sets the validation_job_id of this ReportMonitorInfo.


        :param validation_job_id: The validation_job_id of this ReportMonitorInfo.  # noqa: E501
        :type: str
        """

        self._validation_job_id = validation_job_id

    @property
    def validation_types(self):
        """Gets the validation_types of this ReportMonitorInfo.  # noqa: E501


        :return: The validation_types of this ReportMonitorInfo.  # noqa: E501
        :rtype: str
        """
        return self._validation_types

    @validation_types.setter
    def validation_types(self, validation_types):
        """Sets the validation_types of this ReportMonitorInfo.


        :param validation_types: The validation_types of this ReportMonitorInfo.  # noqa: E501
        :type: str
        """

        self._validation_types = validation_types

    @property
    def version(self):
        """Gets the version of this ReportMonitorInfo.  # noqa: E501


        :return: The version of this ReportMonitorInfo.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ReportMonitorInfo.


        :param version: The version of this ReportMonitorInfo.  # noqa: E501
        :type: str
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReportMonitorInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReportMonitorInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
