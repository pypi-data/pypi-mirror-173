# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ValidationResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'file_name': 'str',
        'file_size': 'int',
        'message': 'str',
        'report_delivery_date': 'str',
        'status': 'str',
        'type': 'str',
        'validation_history_id': 'str'
    }

    attribute_map = {
        'file_name': 'fileName',
        'file_size': 'fileSize',
        'message': 'message',
        'report_delivery_date': 'reportDeliveryDate',
        'status': 'status',
        'type': 'type',
        'validation_history_id': 'validationHistoryId'
    }

    def __init__(self, file_name=None, file_size=None, message=None, report_delivery_date=None, status=None, type=None, validation_history_id=None):  # noqa: E501
        """ValidationResult - a model defined in Swagger"""  # noqa: E501
        self._file_name = None
        self._file_size = None
        self._message = None
        self._report_delivery_date = None
        self._status = None
        self._type = None
        self._validation_history_id = None
        self.discriminator = None
        if file_name is not None:
            self.file_name = file_name
        if file_size is not None:
            self.file_size = file_size
        if message is not None:
            self.message = message
        if report_delivery_date is not None:
            self.report_delivery_date = report_delivery_date
        if status is not None:
            self.status = status
        if type is not None:
            self.type = type
        if validation_history_id is not None:
            self.validation_history_id = validation_history_id

    @property
    def file_name(self):
        """Gets the file_name of this ValidationResult.  # noqa: E501


        :return: The file_name of this ValidationResult.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this ValidationResult.


        :param file_name: The file_name of this ValidationResult.  # noqa: E501
        :type: str
        """

        self._file_name = file_name

    @property
    def file_size(self):
        """Gets the file_size of this ValidationResult.  # noqa: E501


        :return: The file_size of this ValidationResult.  # noqa: E501
        :rtype: int
        """
        return self._file_size

    @file_size.setter
    def file_size(self, file_size):
        """Sets the file_size of this ValidationResult.


        :param file_size: The file_size of this ValidationResult.  # noqa: E501
        :type: int
        """

        self._file_size = file_size

    @property
    def message(self):
        """Gets the message of this ValidationResult.  # noqa: E501


        :return: The message of this ValidationResult.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ValidationResult.


        :param message: The message of this ValidationResult.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def report_delivery_date(self):
        """Gets the report_delivery_date of this ValidationResult.  # noqa: E501


        :return: The report_delivery_date of this ValidationResult.  # noqa: E501
        :rtype: str
        """
        return self._report_delivery_date

    @report_delivery_date.setter
    def report_delivery_date(self, report_delivery_date):
        """Sets the report_delivery_date of this ValidationResult.


        :param report_delivery_date: The report_delivery_date of this ValidationResult.  # noqa: E501
        :type: str
        """

        self._report_delivery_date = report_delivery_date

    @property
    def status(self):
        """Gets the status of this ValidationResult.  # noqa: E501


        :return: The status of this ValidationResult.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ValidationResult.


        :param status: The status of this ValidationResult.  # noqa: E501
        :type: str
        """
        allowed_values = ["EXCEPTION", "FAILURE", "SKIPPED", "SUCCESS"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def type(self):
        """Gets the type of this ValidationResult.  # noqa: E501


        :return: The type of this ValidationResult.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ValidationResult.


        :param type: The type of this ValidationResult.  # noqa: E501
        :type: str
        """
        allowed_values = ["DuplicateFile", "EmptyFile", "FileNotFound", "SizeMonitorCheck"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def validation_history_id(self):
        """Gets the validation_history_id of this ValidationResult.  # noqa: E501


        :return: The validation_history_id of this ValidationResult.  # noqa: E501
        :rtype: str
        """
        return self._validation_history_id

    @validation_history_id.setter
    def validation_history_id(self, validation_history_id):
        """Sets the validation_history_id of this ValidationResult.


        :param validation_history_id: The validation_history_id of this ValidationResult.  # noqa: E501
        :type: str
        """

        self._validation_history_id = validation_history_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ValidationResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ValidationResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
