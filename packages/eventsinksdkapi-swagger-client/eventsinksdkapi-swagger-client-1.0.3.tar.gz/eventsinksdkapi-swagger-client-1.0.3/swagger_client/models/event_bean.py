# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EventBean(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'additional_data': 'list[AdditionalData]',
        'end_timestamp': 'str',
        'interim_report_file_name': 'str',
        'merchant_account_number': 'str',
        'merchant_name': 'str',
        'merchant_public_id': 'str',
        'name': 'str',
        'platform': 'str',
        'report_file_name': 'str',
        'report_id': 'str',
        'report_run_date': 'str',
        'report_type': 'str',
        'source_component': 'str',
        'start_timestamp': 'str',
        'status': 'str',
        'status_message': 'str',
        'time_zone': 'str',
        'type': 'str'
    }

    attribute_map = {
        'additional_data': 'additionalData',
        'end_timestamp': 'endTimestamp',
        'interim_report_file_name': 'interimReportFileName',
        'merchant_account_number': 'merchantAccountNumber',
        'merchant_name': 'merchantName',
        'merchant_public_id': 'merchantPublicId',
        'name': 'name',
        'platform': 'platform',
        'report_file_name': 'reportFileName',
        'report_id': 'reportId',
        'report_run_date': 'reportRunDate',
        'report_type': 'reportType',
        'source_component': 'sourceComponent',
        'start_timestamp': 'startTimestamp',
        'status': 'status',
        'status_message': 'statusMessage',
        'time_zone': 'timeZone',
        'type': 'type'
    }

    def __init__(self, additional_data=None, end_timestamp=None, interim_report_file_name=None, merchant_account_number=None, merchant_name=None, merchant_public_id=None, name=None, platform=None, report_file_name=None, report_id=None, report_run_date=None, report_type=None, source_component=None, start_timestamp=None, status=None, status_message=None, time_zone=None, type=None):  # noqa: E501
        """EventBean - a model defined in Swagger"""  # noqa: E501
        self._additional_data = None
        self._end_timestamp = None
        self._interim_report_file_name = None
        self._merchant_account_number = None
        self._merchant_name = None
        self._merchant_public_id = None
        self._name = None
        self._platform = None
        self._report_file_name = None
        self._report_id = None
        self._report_run_date = None
        self._report_type = None
        self._source_component = None
        self._start_timestamp = None
        self._status = None
        self._status_message = None
        self._time_zone = None
        self._type = None
        self.discriminator = None
        if additional_data is not None:
            self.additional_data = additional_data
        if end_timestamp is not None:
            self.end_timestamp = end_timestamp
        if interim_report_file_name is not None:
            self.interim_report_file_name = interim_report_file_name
        if merchant_account_number is not None:
            self.merchant_account_number = merchant_account_number
        if merchant_name is not None:
            self.merchant_name = merchant_name
        if merchant_public_id is not None:
            self.merchant_public_id = merchant_public_id
        if name is not None:
            self.name = name
        if platform is not None:
            self.platform = platform
        if report_file_name is not None:
            self.report_file_name = report_file_name
        if report_id is not None:
            self.report_id = report_id
        if report_run_date is not None:
            self.report_run_date = report_run_date
        if report_type is not None:
            self.report_type = report_type
        if source_component is not None:
            self.source_component = source_component
        if start_timestamp is not None:
            self.start_timestamp = start_timestamp
        if status is not None:
            self.status = status
        if status_message is not None:
            self.status_message = status_message
        if time_zone is not None:
            self.time_zone = time_zone
        if type is not None:
            self.type = type

    @property
    def additional_data(self):
        """Gets the additional_data of this EventBean.  # noqa: E501


        :return: The additional_data of this EventBean.  # noqa: E501
        :rtype: list[AdditionalData]
        """
        return self._additional_data

    @additional_data.setter
    def additional_data(self, additional_data):
        """Sets the additional_data of this EventBean.


        :param additional_data: The additional_data of this EventBean.  # noqa: E501
        :type: list[AdditionalData]
        """

        self._additional_data = additional_data

    @property
    def end_timestamp(self):
        """Gets the end_timestamp of this EventBean.  # noqa: E501


        :return: The end_timestamp of this EventBean.  # noqa: E501
        :rtype: str
        """
        return self._end_timestamp

    @end_timestamp.setter
    def end_timestamp(self, end_timestamp):
        """Sets the end_timestamp of this EventBean.


        :param end_timestamp: The end_timestamp of this EventBean.  # noqa: E501
        :type: str
        """

        self._end_timestamp = end_timestamp

    @property
    def interim_report_file_name(self):
        """Gets the interim_report_file_name of this EventBean.  # noqa: E501


        :return: The interim_report_file_name of this EventBean.  # noqa: E501
        :rtype: str
        """
        return self._interim_report_file_name

    @interim_report_file_name.setter
    def interim_report_file_name(self, interim_report_file_name):
        """Sets the interim_report_file_name of this EventBean.


        :param interim_report_file_name: The interim_report_file_name of this EventBean.  # noqa: E501
        :type: str
        """

        self._interim_report_file_name = interim_report_file_name

    @property
    def merchant_account_number(self):
        """Gets the merchant_account_number of this EventBean.  # noqa: E501


        :return: The merchant_account_number of this EventBean.  # noqa: E501
        :rtype: str
        """
        return self._merchant_account_number

    @merchant_account_number.setter
    def merchant_account_number(self, merchant_account_number):
        """Sets the merchant_account_number of this EventBean.


        :param merchant_account_number: The merchant_account_number of this EventBean.  # noqa: E501
        :type: str
        """

        self._merchant_account_number = merchant_account_number

    @property
    def merchant_name(self):
        """Gets the merchant_name of this EventBean.  # noqa: E501


        :return: The merchant_name of this EventBean.  # noqa: E501
        :rtype: str
        """
        return self._merchant_name

    @merchant_name.setter
    def merchant_name(self, merchant_name):
        """Sets the merchant_name of this EventBean.


        :param merchant_name: The merchant_name of this EventBean.  # noqa: E501
        :type: str
        """

        self._merchant_name = merchant_name

    @property
    def merchant_public_id(self):
        """Gets the merchant_public_id of this EventBean.  # noqa: E501


        :return: The merchant_public_id of this EventBean.  # noqa: E501
        :rtype: str
        """
        return self._merchant_public_id

    @merchant_public_id.setter
    def merchant_public_id(self, merchant_public_id):
        """Sets the merchant_public_id of this EventBean.


        :param merchant_public_id: The merchant_public_id of this EventBean.  # noqa: E501
        :type: str
        """

        self._merchant_public_id = merchant_public_id

    @property
    def name(self):
        """Gets the name of this EventBean.  # noqa: E501


        :return: The name of this EventBean.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EventBean.


        :param name: The name of this EventBean.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def platform(self):
        """Gets the platform of this EventBean.  # noqa: E501


        :return: The platform of this EventBean.  # noqa: E501
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this EventBean.


        :param platform: The platform of this EventBean.  # noqa: E501
        :type: str
        """
        allowed_values = ["BRAINTREE", "PAYPAL"]  # noqa: E501
        if platform not in allowed_values:
            raise ValueError(
                "Invalid value for `platform` ({0}), must be one of {1}"  # noqa: E501
                .format(platform, allowed_values)
            )

        self._platform = platform

    @property
    def report_file_name(self):
        """Gets the report_file_name of this EventBean.  # noqa: E501


        :return: The report_file_name of this EventBean.  # noqa: E501
        :rtype: str
        """
        return self._report_file_name

    @report_file_name.setter
    def report_file_name(self, report_file_name):
        """Sets the report_file_name of this EventBean.


        :param report_file_name: The report_file_name of this EventBean.  # noqa: E501
        :type: str
        """

        self._report_file_name = report_file_name

    @property
    def report_id(self):
        """Gets the report_id of this EventBean.  # noqa: E501


        :return: The report_id of this EventBean.  # noqa: E501
        :rtype: str
        """
        return self._report_id

    @report_id.setter
    def report_id(self, report_id):
        """Sets the report_id of this EventBean.


        :param report_id: The report_id of this EventBean.  # noqa: E501
        :type: str
        """

        self._report_id = report_id

    @property
    def report_run_date(self):
        """Gets the report_run_date of this EventBean.  # noqa: E501


        :return: The report_run_date of this EventBean.  # noqa: E501
        :rtype: str
        """
        return self._report_run_date

    @report_run_date.setter
    def report_run_date(self, report_run_date):
        """Sets the report_run_date of this EventBean.


        :param report_run_date: The report_run_date of this EventBean.  # noqa: E501
        :type: str
        """

        self._report_run_date = report_run_date

    @property
    def report_type(self):
        """Gets the report_type of this EventBean.  # noqa: E501


        :return: The report_type of this EventBean.  # noqa: E501
        :rtype: str
        """
        return self._report_type

    @report_type.setter
    def report_type(self, report_type):
        """Sets the report_type of this EventBean.


        :param report_type: The report_type of this EventBean.  # noqa: E501
        :type: str
        """
        allowed_values = ["UDR"]  # noqa: E501
        if report_type not in allowed_values:
            raise ValueError(
                "Invalid value for `report_type` ({0}), must be one of {1}"  # noqa: E501
                .format(report_type, allowed_values)
            )

        self._report_type = report_type

    @property
    def source_component(self):
        """Gets the source_component of this EventBean.  # noqa: E501


        :return: The source_component of this EventBean.  # noqa: E501
        :rtype: str
        """
        return self._source_component

    @source_component.setter
    def source_component(self, source_component):
        """Sets the source_component of this EventBean.


        :param source_component: The source_component of this EventBean.  # noqa: E501
        :type: str
        """
        allowed_values = ["AIRFLOW", "ARGO", "HANDSHAKE", "PP_ETL_JDF", "RDM", "REPORT_BUILDER", "S3_FILE_VALIDATION", "SFTP_FILE_VALIDATION"]  # noqa: E501
        if source_component not in allowed_values:
            raise ValueError(
                "Invalid value for `source_component` ({0}), must be one of {1}"  # noqa: E501
                .format(source_component, allowed_values)
            )

        self._source_component = source_component

    @property
    def start_timestamp(self):
        """Gets the start_timestamp of this EventBean.  # noqa: E501


        :return: The start_timestamp of this EventBean.  # noqa: E501
        :rtype: str
        """
        return self._start_timestamp

    @start_timestamp.setter
    def start_timestamp(self, start_timestamp):
        """Sets the start_timestamp of this EventBean.


        :param start_timestamp: The start_timestamp of this EventBean.  # noqa: E501
        :type: str
        """

        self._start_timestamp = start_timestamp

    @property
    def status(self):
        """Gets the status of this EventBean.  # noqa: E501


        :return: The status of this EventBean.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this EventBean.


        :param status: The status of this EventBean.  # noqa: E501
        :type: str
        """
        allowed_values = ["FAILURE", "SUCCESS"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def status_message(self):
        """Gets the status_message of this EventBean.  # noqa: E501


        :return: The status_message of this EventBean.  # noqa: E501
        :rtype: str
        """
        return self._status_message

    @status_message.setter
    def status_message(self, status_message):
        """Sets the status_message of this EventBean.


        :param status_message: The status_message of this EventBean.  # noqa: E501
        :type: str
        """

        self._status_message = status_message

    @property
    def time_zone(self):
        """Gets the time_zone of this EventBean.  # noqa: E501


        :return: The time_zone of this EventBean.  # noqa: E501
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this EventBean.


        :param time_zone: The time_zone of this EventBean.  # noqa: E501
        :type: str
        """
        allowed_values = ["TZ5", "TZ6", "TZ7", "TZ8"]  # noqa: E501
        if time_zone not in allowed_values:
            raise ValueError(
                "Invalid value for `time_zone` ({0}), must be one of {1}"  # noqa: E501
                .format(time_zone, allowed_values)
            )

        self._time_zone = time_zone

    @property
    def type(self):
        """Gets the type of this EventBean.  # noqa: E501


        :return: The type of this EventBean.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this EventBean.


        :param type: The type of this EventBean.  # noqa: E501
        :type: str
        """
        allowed_values = ["ARGO_COMPUTE_JOB", "ARGO_DATA_PROCESSING", "ARGO_DESERIALIZING_PARQUET_READ", "ARGO_FINAL_REPORT_PUBLISH", "ARGO_INTERIM_REPORT_PUBLISH", "ARGO_KAFKA_PUBLISH", "ARGO_LOCALIZATION", "ARGO_METADATA_BUILDING", "ARGO_REDUCTION_PROCESS", "ARGO_ROVER", "ARGO_SANITY_CHECK", "ARGO_SUBSCRIPTION", "BRANDED_REPORT_GENERATION", "BRANDED_REPORT_PUBLISH", "BT_BRANDED_AIRFLOW_DAG_FEEDFILE_COPY", "BT_BRANDED_AWS_S3_FILE_VALIDATION", "BT_UNBRANDED_AIRFLOW_DAG_FEEDFILE_COPY", "BT_UNBRANDED_AWS_S3_FILE_VALIDATION", "PP_EDP_JDF", "PP_HANDSHAKE_MODULE", "PP_SFTP_FILE_VALIDATION", "RDM_TABLE_LOAD", "UNBRANDED_RECON_CHECK", "UNBRANDED_REPORT_GENERATION", "UNBRANDED_REPORT_PUBLISH"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EventBean, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EventBean):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
