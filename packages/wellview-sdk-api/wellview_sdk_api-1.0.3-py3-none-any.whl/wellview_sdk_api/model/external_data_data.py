# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class ExternalDataData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idrec",
            "idwell",
        }
        
        class properties:
            idrec = schemas.StrSchema
            idwell = schemas.StrSchema
            attribvalue = schemas.StrSchema
            excludefromexport = schemas.BoolSchema
            extdatablob = schemas.BinarySchema
            key1 = schemas.StrSchema
            key2 = schemas.StrSchema
            key3 = schemas.StrSchema
            __annotations__ = {
                "idrec": idrec,
                "idwell": idwell,
                "attribvalue": attribvalue,
                "excludefromexport": excludefromexport,
                "extdatablob": extdatablob,
                "key1": key1,
                "key2": key2,
                "key3": key3,
            }
    
    idrec: MetaOapg.properties.idrec
    idwell: MetaOapg.properties.idwell
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attribvalue"]) -> MetaOapg.properties.attribvalue: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["excludefromexport"]) -> MetaOapg.properties.excludefromexport: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["extdatablob"]) -> MetaOapg.properties.extdatablob: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["key1"]) -> MetaOapg.properties.key1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["key2"]) -> MetaOapg.properties.key2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["key3"]) -> MetaOapg.properties.key3: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "attribvalue", "excludefromexport", "extdatablob", "key1", "key2", "key3", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attribvalue"]) -> typing.Union[MetaOapg.properties.attribvalue, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["excludefromexport"]) -> typing.Union[MetaOapg.properties.excludefromexport, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["extdatablob"]) -> typing.Union[MetaOapg.properties.extdatablob, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["key1"]) -> typing.Union[MetaOapg.properties.key1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["key2"]) -> typing.Union[MetaOapg.properties.key2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["key3"]) -> typing.Union[MetaOapg.properties.key3, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "attribvalue", "excludefromexport", "extdatablob", "key1", "key2", "key3", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idrec: typing.Union[MetaOapg.properties.idrec, str, ],
        idwell: typing.Union[MetaOapg.properties.idwell, str, ],
        attribvalue: typing.Union[MetaOapg.properties.attribvalue, str, schemas.Unset] = schemas.unset,
        excludefromexport: typing.Union[MetaOapg.properties.excludefromexport, bool, schemas.Unset] = schemas.unset,
        extdatablob: typing.Union[MetaOapg.properties.extdatablob, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        key1: typing.Union[MetaOapg.properties.key1, str, schemas.Unset] = schemas.unset,
        key2: typing.Union[MetaOapg.properties.key2, str, schemas.Unset] = schemas.unset,
        key3: typing.Union[MetaOapg.properties.key3, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ExternalDataData':
        return super().__new__(
            cls,
            *args,
            idrec=idrec,
            idwell=idwell,
            attribvalue=attribvalue,
            excludefromexport=excludefromexport,
            extdatablob=extdatablob,
            key1=key1,
            key2=key2,
            key3=key3,
            _configuration=_configuration,
            **kwargs,
        )
