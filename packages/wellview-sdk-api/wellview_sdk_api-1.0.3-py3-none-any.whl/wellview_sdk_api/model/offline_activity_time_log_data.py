# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class OfflineActivityTimeLogData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idrec",
            "idwell",
        }
        
        class properties:
            idrec = schemas.StrSchema
            idwell = schemas.StrSchema
            affectonline = schemas.StrSchema
            code1 = schemas.StrSchema
            code2 = schemas.StrSchema
            code3 = schemas.StrSchema
            code4 = schemas.StrSchema
            com = schemas.StrSchema
            depthend = schemas.NumberSchema
            depthstart = schemas.NumberSchema
            duration = schemas.NumberSchema
            idrecparent = schemas.StrSchema
            idrecwellbore = schemas.StrSchema
            inactive = schemas.BoolSchema
            opscategory = schemas.StrSchema
            refderrick = schemas.StrSchema
            unschedtyp = schemas.StrSchema
            usertxt1 = schemas.StrSchema
            __annotations__ = {
                "idrec": idrec,
                "idwell": idwell,
                "affectonline": affectonline,
                "code1": code1,
                "code2": code2,
                "code3": code3,
                "code4": code4,
                "com": com,
                "depthend": depthend,
                "depthstart": depthstart,
                "duration": duration,
                "idrecparent": idrecparent,
                "idrecwellbore": idrecwellbore,
                "inactive": inactive,
                "opscategory": opscategory,
                "refderrick": refderrick,
                "unschedtyp": unschedtyp,
                "usertxt1": usertxt1,
            }
    
    idrec: MetaOapg.properties.idrec
    idwell: MetaOapg.properties.idwell
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["affectonline"]) -> MetaOapg.properties.affectonline: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["code1"]) -> MetaOapg.properties.code1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["code2"]) -> MetaOapg.properties.code2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["code3"]) -> MetaOapg.properties.code3: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["code4"]) -> MetaOapg.properties.code4: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["com"]) -> MetaOapg.properties.com: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["depthend"]) -> MetaOapg.properties.depthend: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["depthstart"]) -> MetaOapg.properties.depthstart: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["duration"]) -> MetaOapg.properties.duration: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecparent"]) -> MetaOapg.properties.idrecparent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecwellbore"]) -> MetaOapg.properties.idrecwellbore: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["inactive"]) -> MetaOapg.properties.inactive: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["opscategory"]) -> MetaOapg.properties.opscategory: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["refderrick"]) -> MetaOapg.properties.refderrick: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["unschedtyp"]) -> MetaOapg.properties.unschedtyp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usertxt1"]) -> MetaOapg.properties.usertxt1: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "affectonline", "code1", "code2", "code3", "code4", "com", "depthend", "depthstart", "duration", "idrecparent", "idrecwellbore", "inactive", "opscategory", "refderrick", "unschedtyp", "usertxt1", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["affectonline"]) -> typing.Union[MetaOapg.properties.affectonline, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["code1"]) -> typing.Union[MetaOapg.properties.code1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["code2"]) -> typing.Union[MetaOapg.properties.code2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["code3"]) -> typing.Union[MetaOapg.properties.code3, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["code4"]) -> typing.Union[MetaOapg.properties.code4, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["com"]) -> typing.Union[MetaOapg.properties.com, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["depthend"]) -> typing.Union[MetaOapg.properties.depthend, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["depthstart"]) -> typing.Union[MetaOapg.properties.depthstart, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["duration"]) -> typing.Union[MetaOapg.properties.duration, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecparent"]) -> typing.Union[MetaOapg.properties.idrecparent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecwellbore"]) -> typing.Union[MetaOapg.properties.idrecwellbore, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["inactive"]) -> typing.Union[MetaOapg.properties.inactive, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["opscategory"]) -> typing.Union[MetaOapg.properties.opscategory, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["refderrick"]) -> typing.Union[MetaOapg.properties.refderrick, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["unschedtyp"]) -> typing.Union[MetaOapg.properties.unschedtyp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usertxt1"]) -> typing.Union[MetaOapg.properties.usertxt1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "affectonline", "code1", "code2", "code3", "code4", "com", "depthend", "depthstart", "duration", "idrecparent", "idrecwellbore", "inactive", "opscategory", "refderrick", "unschedtyp", "usertxt1", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idrec: typing.Union[MetaOapg.properties.idrec, str, ],
        idwell: typing.Union[MetaOapg.properties.idwell, str, ],
        affectonline: typing.Union[MetaOapg.properties.affectonline, str, schemas.Unset] = schemas.unset,
        code1: typing.Union[MetaOapg.properties.code1, str, schemas.Unset] = schemas.unset,
        code2: typing.Union[MetaOapg.properties.code2, str, schemas.Unset] = schemas.unset,
        code3: typing.Union[MetaOapg.properties.code3, str, schemas.Unset] = schemas.unset,
        code4: typing.Union[MetaOapg.properties.code4, str, schemas.Unset] = schemas.unset,
        com: typing.Union[MetaOapg.properties.com, str, schemas.Unset] = schemas.unset,
        depthend: typing.Union[MetaOapg.properties.depthend, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        depthstart: typing.Union[MetaOapg.properties.depthstart, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        duration: typing.Union[MetaOapg.properties.duration, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        idrecparent: typing.Union[MetaOapg.properties.idrecparent, str, schemas.Unset] = schemas.unset,
        idrecwellbore: typing.Union[MetaOapg.properties.idrecwellbore, str, schemas.Unset] = schemas.unset,
        inactive: typing.Union[MetaOapg.properties.inactive, bool, schemas.Unset] = schemas.unset,
        opscategory: typing.Union[MetaOapg.properties.opscategory, str, schemas.Unset] = schemas.unset,
        refderrick: typing.Union[MetaOapg.properties.refderrick, str, schemas.Unset] = schemas.unset,
        unschedtyp: typing.Union[MetaOapg.properties.unschedtyp, str, schemas.Unset] = schemas.unset,
        usertxt1: typing.Union[MetaOapg.properties.usertxt1, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'OfflineActivityTimeLogData':
        return super().__new__(
            cls,
            *args,
            idrec=idrec,
            idwell=idwell,
            affectonline=affectonline,
            code1=code1,
            code2=code2,
            code3=code3,
            code4=code4,
            com=com,
            depthend=depthend,
            depthstart=depthstart,
            duration=duration,
            idrecparent=idrecparent,
            idrecwellbore=idrecwellbore,
            inactive=inactive,
            opscategory=opscategory,
            refderrick=refderrick,
            unschedtyp=unschedtyp,
            usertxt1=usertxt1,
            _configuration=_configuration,
            **kwargs,
        )
