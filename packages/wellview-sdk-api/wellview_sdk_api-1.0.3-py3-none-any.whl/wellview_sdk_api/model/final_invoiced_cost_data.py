# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class FinalInvoicedCostData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idrec",
            "idwell",
        }
        
        class properties:
            idrec = schemas.StrSchema
            idwell = schemas.StrSchema
            amount = schemas.NumberSchema
            amountlocal = schemas.NumberSchema
            code1 = schemas.StrSchema
            code2 = schemas.StrSchema
            code3 = schemas.StrSchema
            code4 = schemas.StrSchema
            code5 = schemas.StrSchema
            code6 = schemas.StrSchema
            currencycodelocal = schemas.StrSchema
            des = schemas.StrSchema
            finalinvoicedttm = schemas.DateTimeSchema
            idrecparent = schemas.StrSchema
            invoicerefno = schemas.StrSchema
            note = schemas.StrSchema
            vendor = schemas.StrSchema
            vendorcode = schemas.StrSchema
            vendorsubcode = schemas.StrSchema
            __annotations__ = {
                "idrec": idrec,
                "idwell": idwell,
                "amount": amount,
                "amountlocal": amountlocal,
                "code1": code1,
                "code2": code2,
                "code3": code3,
                "code4": code4,
                "code5": code5,
                "code6": code6,
                "currencycodelocal": currencycodelocal,
                "des": des,
                "finalinvoicedttm": finalinvoicedttm,
                "idrecparent": idrecparent,
                "invoicerefno": invoicerefno,
                "note": note,
                "vendor": vendor,
                "vendorcode": vendorcode,
                "vendorsubcode": vendorsubcode,
            }
    
    idrec: MetaOapg.properties.idrec
    idwell: MetaOapg.properties.idwell
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amountlocal"]) -> MetaOapg.properties.amountlocal: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["code1"]) -> MetaOapg.properties.code1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["code2"]) -> MetaOapg.properties.code2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["code3"]) -> MetaOapg.properties.code3: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["code4"]) -> MetaOapg.properties.code4: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["code5"]) -> MetaOapg.properties.code5: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["code6"]) -> MetaOapg.properties.code6: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currencycodelocal"]) -> MetaOapg.properties.currencycodelocal: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["des"]) -> MetaOapg.properties.des: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["finalinvoicedttm"]) -> MetaOapg.properties.finalinvoicedttm: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecparent"]) -> MetaOapg.properties.idrecparent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["invoicerefno"]) -> MetaOapg.properties.invoicerefno: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["note"]) -> MetaOapg.properties.note: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vendor"]) -> MetaOapg.properties.vendor: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vendorcode"]) -> MetaOapg.properties.vendorcode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vendorsubcode"]) -> MetaOapg.properties.vendorsubcode: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "amount", "amountlocal", "code1", "code2", "code3", "code4", "code5", "code6", "currencycodelocal", "des", "finalinvoicedttm", "idrecparent", "invoicerefno", "note", "vendor", "vendorcode", "vendorsubcode", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> typing.Union[MetaOapg.properties.amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amountlocal"]) -> typing.Union[MetaOapg.properties.amountlocal, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["code1"]) -> typing.Union[MetaOapg.properties.code1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["code2"]) -> typing.Union[MetaOapg.properties.code2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["code3"]) -> typing.Union[MetaOapg.properties.code3, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["code4"]) -> typing.Union[MetaOapg.properties.code4, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["code5"]) -> typing.Union[MetaOapg.properties.code5, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["code6"]) -> typing.Union[MetaOapg.properties.code6, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currencycodelocal"]) -> typing.Union[MetaOapg.properties.currencycodelocal, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["des"]) -> typing.Union[MetaOapg.properties.des, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["finalinvoicedttm"]) -> typing.Union[MetaOapg.properties.finalinvoicedttm, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecparent"]) -> typing.Union[MetaOapg.properties.idrecparent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["invoicerefno"]) -> typing.Union[MetaOapg.properties.invoicerefno, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["note"]) -> typing.Union[MetaOapg.properties.note, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vendor"]) -> typing.Union[MetaOapg.properties.vendor, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vendorcode"]) -> typing.Union[MetaOapg.properties.vendorcode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vendorsubcode"]) -> typing.Union[MetaOapg.properties.vendorsubcode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "amount", "amountlocal", "code1", "code2", "code3", "code4", "code5", "code6", "currencycodelocal", "des", "finalinvoicedttm", "idrecparent", "invoicerefno", "note", "vendor", "vendorcode", "vendorsubcode", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idrec: typing.Union[MetaOapg.properties.idrec, str, ],
        idwell: typing.Union[MetaOapg.properties.idwell, str, ],
        amount: typing.Union[MetaOapg.properties.amount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        amountlocal: typing.Union[MetaOapg.properties.amountlocal, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        code1: typing.Union[MetaOapg.properties.code1, str, schemas.Unset] = schemas.unset,
        code2: typing.Union[MetaOapg.properties.code2, str, schemas.Unset] = schemas.unset,
        code3: typing.Union[MetaOapg.properties.code3, str, schemas.Unset] = schemas.unset,
        code4: typing.Union[MetaOapg.properties.code4, str, schemas.Unset] = schemas.unset,
        code5: typing.Union[MetaOapg.properties.code5, str, schemas.Unset] = schemas.unset,
        code6: typing.Union[MetaOapg.properties.code6, str, schemas.Unset] = schemas.unset,
        currencycodelocal: typing.Union[MetaOapg.properties.currencycodelocal, str, schemas.Unset] = schemas.unset,
        des: typing.Union[MetaOapg.properties.des, str, schemas.Unset] = schemas.unset,
        finalinvoicedttm: typing.Union[MetaOapg.properties.finalinvoicedttm, str, datetime, schemas.Unset] = schemas.unset,
        idrecparent: typing.Union[MetaOapg.properties.idrecparent, str, schemas.Unset] = schemas.unset,
        invoicerefno: typing.Union[MetaOapg.properties.invoicerefno, str, schemas.Unset] = schemas.unset,
        note: typing.Union[MetaOapg.properties.note, str, schemas.Unset] = schemas.unset,
        vendor: typing.Union[MetaOapg.properties.vendor, str, schemas.Unset] = schemas.unset,
        vendorcode: typing.Union[MetaOapg.properties.vendorcode, str, schemas.Unset] = schemas.unset,
        vendorsubcode: typing.Union[MetaOapg.properties.vendorsubcode, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'FinalInvoicedCostData':
        return super().__new__(
            cls,
            *args,
            idrec=idrec,
            idwell=idwell,
            amount=amount,
            amountlocal=amountlocal,
            code1=code1,
            code2=code2,
            code3=code3,
            code4=code4,
            code5=code5,
            code6=code6,
            currencycodelocal=currencycodelocal,
            des=des,
            finalinvoicedttm=finalinvoicedttm,
            idrecparent=idrecparent,
            invoicerefno=invoicerefno,
            note=note,
            vendor=vendor,
            vendorcode=vendorcode,
            vendorsubcode=vendorsubcode,
            _configuration=_configuration,
            **kwargs,
        )
