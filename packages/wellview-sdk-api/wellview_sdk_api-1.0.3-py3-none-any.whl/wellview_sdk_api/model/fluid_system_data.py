# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class FluidSystemData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idrec",
            "idwell",
        }
        
        class properties:
            idrec = schemas.StrSchema
            idwell = schemas.StrSchema
            com = schemas.StrSchema
            des = schemas.StrSchema
            environmenttyp = schemas.StrSchema
            evalmethod = schemas.StrSchema
            filtersz = schemas.NumberSchema
            fluiddensity = schemas.NumberSchema
            fluidname = schemas.StrSchema
            idrecparent = schemas.StrSchema
            masstotal = schemas.NumberSchema
            ph = schemas.NumberSchema
            presvapor = schemas.NumberSchema
            purpose = schemas.StrSchema
            source = schemas.StrSchema
            tempref = schemas.NumberSchema
            typ1 = schemas.StrSchema
            typ2 = schemas.StrSchema
            usernum1 = schemas.NumberSchema
            usertxt1 = schemas.StrSchema
            vendor = schemas.StrSchema
            vendorcode = schemas.StrSchema
            vendorfluidname = schemas.StrSchema
            viscosity = schemas.NumberSchema
            volume = schemas.NumberSchema
            volumedesign = schemas.NumberSchema
            __annotations__ = {
                "idrec": idrec,
                "idwell": idwell,
                "com": com,
                "des": des,
                "environmenttyp": environmenttyp,
                "evalmethod": evalmethod,
                "filtersz": filtersz,
                "fluiddensity": fluiddensity,
                "fluidname": fluidname,
                "idrecparent": idrecparent,
                "masstotal": masstotal,
                "ph": ph,
                "presvapor": presvapor,
                "purpose": purpose,
                "source": source,
                "tempref": tempref,
                "typ1": typ1,
                "typ2": typ2,
                "usernum1": usernum1,
                "usertxt1": usertxt1,
                "vendor": vendor,
                "vendorcode": vendorcode,
                "vendorfluidname": vendorfluidname,
                "viscosity": viscosity,
                "volume": volume,
                "volumedesign": volumedesign,
            }
    
    idrec: MetaOapg.properties.idrec
    idwell: MetaOapg.properties.idwell
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["com"]) -> MetaOapg.properties.com: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["des"]) -> MetaOapg.properties.des: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["environmenttyp"]) -> MetaOapg.properties.environmenttyp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["evalmethod"]) -> MetaOapg.properties.evalmethod: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["filtersz"]) -> MetaOapg.properties.filtersz: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fluiddensity"]) -> MetaOapg.properties.fluiddensity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fluidname"]) -> MetaOapg.properties.fluidname: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecparent"]) -> MetaOapg.properties.idrecparent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["masstotal"]) -> MetaOapg.properties.masstotal: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ph"]) -> MetaOapg.properties.ph: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["presvapor"]) -> MetaOapg.properties.presvapor: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["purpose"]) -> MetaOapg.properties.purpose: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["source"]) -> MetaOapg.properties.source: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tempref"]) -> MetaOapg.properties.tempref: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["typ1"]) -> MetaOapg.properties.typ1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["typ2"]) -> MetaOapg.properties.typ2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usernum1"]) -> MetaOapg.properties.usernum1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usertxt1"]) -> MetaOapg.properties.usertxt1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vendor"]) -> MetaOapg.properties.vendor: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vendorcode"]) -> MetaOapg.properties.vendorcode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vendorfluidname"]) -> MetaOapg.properties.vendorfluidname: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["viscosity"]) -> MetaOapg.properties.viscosity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["volume"]) -> MetaOapg.properties.volume: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["volumedesign"]) -> MetaOapg.properties.volumedesign: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "com", "des", "environmenttyp", "evalmethod", "filtersz", "fluiddensity", "fluidname", "idrecparent", "masstotal", "ph", "presvapor", "purpose", "source", "tempref", "typ1", "typ2", "usernum1", "usertxt1", "vendor", "vendorcode", "vendorfluidname", "viscosity", "volume", "volumedesign", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["com"]) -> typing.Union[MetaOapg.properties.com, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["des"]) -> typing.Union[MetaOapg.properties.des, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["environmenttyp"]) -> typing.Union[MetaOapg.properties.environmenttyp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["evalmethod"]) -> typing.Union[MetaOapg.properties.evalmethod, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["filtersz"]) -> typing.Union[MetaOapg.properties.filtersz, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fluiddensity"]) -> typing.Union[MetaOapg.properties.fluiddensity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fluidname"]) -> typing.Union[MetaOapg.properties.fluidname, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecparent"]) -> typing.Union[MetaOapg.properties.idrecparent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["masstotal"]) -> typing.Union[MetaOapg.properties.masstotal, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ph"]) -> typing.Union[MetaOapg.properties.ph, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["presvapor"]) -> typing.Union[MetaOapg.properties.presvapor, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["purpose"]) -> typing.Union[MetaOapg.properties.purpose, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["source"]) -> typing.Union[MetaOapg.properties.source, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tempref"]) -> typing.Union[MetaOapg.properties.tempref, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["typ1"]) -> typing.Union[MetaOapg.properties.typ1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["typ2"]) -> typing.Union[MetaOapg.properties.typ2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usernum1"]) -> typing.Union[MetaOapg.properties.usernum1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usertxt1"]) -> typing.Union[MetaOapg.properties.usertxt1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vendor"]) -> typing.Union[MetaOapg.properties.vendor, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vendorcode"]) -> typing.Union[MetaOapg.properties.vendorcode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vendorfluidname"]) -> typing.Union[MetaOapg.properties.vendorfluidname, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["viscosity"]) -> typing.Union[MetaOapg.properties.viscosity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["volume"]) -> typing.Union[MetaOapg.properties.volume, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["volumedesign"]) -> typing.Union[MetaOapg.properties.volumedesign, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "com", "des", "environmenttyp", "evalmethod", "filtersz", "fluiddensity", "fluidname", "idrecparent", "masstotal", "ph", "presvapor", "purpose", "source", "tempref", "typ1", "typ2", "usernum1", "usertxt1", "vendor", "vendorcode", "vendorfluidname", "viscosity", "volume", "volumedesign", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idrec: typing.Union[MetaOapg.properties.idrec, str, ],
        idwell: typing.Union[MetaOapg.properties.idwell, str, ],
        com: typing.Union[MetaOapg.properties.com, str, schemas.Unset] = schemas.unset,
        des: typing.Union[MetaOapg.properties.des, str, schemas.Unset] = schemas.unset,
        environmenttyp: typing.Union[MetaOapg.properties.environmenttyp, str, schemas.Unset] = schemas.unset,
        evalmethod: typing.Union[MetaOapg.properties.evalmethod, str, schemas.Unset] = schemas.unset,
        filtersz: typing.Union[MetaOapg.properties.filtersz, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        fluiddensity: typing.Union[MetaOapg.properties.fluiddensity, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        fluidname: typing.Union[MetaOapg.properties.fluidname, str, schemas.Unset] = schemas.unset,
        idrecparent: typing.Union[MetaOapg.properties.idrecparent, str, schemas.Unset] = schemas.unset,
        masstotal: typing.Union[MetaOapg.properties.masstotal, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        ph: typing.Union[MetaOapg.properties.ph, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        presvapor: typing.Union[MetaOapg.properties.presvapor, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        purpose: typing.Union[MetaOapg.properties.purpose, str, schemas.Unset] = schemas.unset,
        source: typing.Union[MetaOapg.properties.source, str, schemas.Unset] = schemas.unset,
        tempref: typing.Union[MetaOapg.properties.tempref, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        typ1: typing.Union[MetaOapg.properties.typ1, str, schemas.Unset] = schemas.unset,
        typ2: typing.Union[MetaOapg.properties.typ2, str, schemas.Unset] = schemas.unset,
        usernum1: typing.Union[MetaOapg.properties.usernum1, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        usertxt1: typing.Union[MetaOapg.properties.usertxt1, str, schemas.Unset] = schemas.unset,
        vendor: typing.Union[MetaOapg.properties.vendor, str, schemas.Unset] = schemas.unset,
        vendorcode: typing.Union[MetaOapg.properties.vendorcode, str, schemas.Unset] = schemas.unset,
        vendorfluidname: typing.Union[MetaOapg.properties.vendorfluidname, str, schemas.Unset] = schemas.unset,
        viscosity: typing.Union[MetaOapg.properties.viscosity, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        volume: typing.Union[MetaOapg.properties.volume, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        volumedesign: typing.Union[MetaOapg.properties.volumedesign, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'FluidSystemData':
        return super().__new__(
            cls,
            *args,
            idrec=idrec,
            idwell=idwell,
            com=com,
            des=des,
            environmenttyp=environmenttyp,
            evalmethod=evalmethod,
            filtersz=filtersz,
            fluiddensity=fluiddensity,
            fluidname=fluidname,
            idrecparent=idrecparent,
            masstotal=masstotal,
            ph=ph,
            presvapor=presvapor,
            purpose=purpose,
            source=source,
            tempref=tempref,
            typ1=typ1,
            typ2=typ2,
            usernum1=usernum1,
            usertxt1=usertxt1,
            vendor=vendor,
            vendorcode=vendorcode,
            vendorfluidname=vendorfluidname,
            viscosity=viscosity,
            volume=volume,
            volumedesign=volumedesign,
            _configuration=_configuration,
            **kwargs,
        )
