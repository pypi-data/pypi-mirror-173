# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class AdditionalDullGradingData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idrec",
            "idwell",
        }
        
        class properties:
            idrec = schemas.StrSchema
            idwell = schemas.StrSchema
            idrecdrillstringcomp = schemas.StrSchema
            idrecparent = schemas.StrSchema
            note = schemas.StrSchema
            typ = schemas.StrSchema
            wearbearing = schemas.StrSchema
            weardull = schemas.StrSchema
            weargauge = schemas.StrSchema
            wearinner = schemas.IntSchema
            wearloc = schemas.StrSchema
            wearother = schemas.StrSchema
            wearouter = schemas.IntSchema
            wearpulled = schemas.StrSchema
            __annotations__ = {
                "idrec": idrec,
                "idwell": idwell,
                "idrecdrillstringcomp": idrecdrillstringcomp,
                "idrecparent": idrecparent,
                "note": note,
                "typ": typ,
                "wearbearing": wearbearing,
                "weardull": weardull,
                "weargauge": weargauge,
                "wearinner": wearinner,
                "wearloc": wearloc,
                "wearother": wearother,
                "wearouter": wearouter,
                "wearpulled": wearpulled,
            }
    
    idrec: MetaOapg.properties.idrec
    idwell: MetaOapg.properties.idwell
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecdrillstringcomp"]) -> MetaOapg.properties.idrecdrillstringcomp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecparent"]) -> MetaOapg.properties.idrecparent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["note"]) -> MetaOapg.properties.note: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["typ"]) -> MetaOapg.properties.typ: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wearbearing"]) -> MetaOapg.properties.wearbearing: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["weardull"]) -> MetaOapg.properties.weardull: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["weargauge"]) -> MetaOapg.properties.weargauge: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wearinner"]) -> MetaOapg.properties.wearinner: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wearloc"]) -> MetaOapg.properties.wearloc: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wearother"]) -> MetaOapg.properties.wearother: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wearouter"]) -> MetaOapg.properties.wearouter: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wearpulled"]) -> MetaOapg.properties.wearpulled: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "idrecdrillstringcomp", "idrecparent", "note", "typ", "wearbearing", "weardull", "weargauge", "wearinner", "wearloc", "wearother", "wearouter", "wearpulled", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecdrillstringcomp"]) -> typing.Union[MetaOapg.properties.idrecdrillstringcomp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecparent"]) -> typing.Union[MetaOapg.properties.idrecparent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["note"]) -> typing.Union[MetaOapg.properties.note, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["typ"]) -> typing.Union[MetaOapg.properties.typ, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wearbearing"]) -> typing.Union[MetaOapg.properties.wearbearing, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["weardull"]) -> typing.Union[MetaOapg.properties.weardull, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["weargauge"]) -> typing.Union[MetaOapg.properties.weargauge, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wearinner"]) -> typing.Union[MetaOapg.properties.wearinner, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wearloc"]) -> typing.Union[MetaOapg.properties.wearloc, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wearother"]) -> typing.Union[MetaOapg.properties.wearother, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wearouter"]) -> typing.Union[MetaOapg.properties.wearouter, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wearpulled"]) -> typing.Union[MetaOapg.properties.wearpulled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "idrecdrillstringcomp", "idrecparent", "note", "typ", "wearbearing", "weardull", "weargauge", "wearinner", "wearloc", "wearother", "wearouter", "wearpulled", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idrec: typing.Union[MetaOapg.properties.idrec, str, ],
        idwell: typing.Union[MetaOapg.properties.idwell, str, ],
        idrecdrillstringcomp: typing.Union[MetaOapg.properties.idrecdrillstringcomp, str, schemas.Unset] = schemas.unset,
        idrecparent: typing.Union[MetaOapg.properties.idrecparent, str, schemas.Unset] = schemas.unset,
        note: typing.Union[MetaOapg.properties.note, str, schemas.Unset] = schemas.unset,
        typ: typing.Union[MetaOapg.properties.typ, str, schemas.Unset] = schemas.unset,
        wearbearing: typing.Union[MetaOapg.properties.wearbearing, str, schemas.Unset] = schemas.unset,
        weardull: typing.Union[MetaOapg.properties.weardull, str, schemas.Unset] = schemas.unset,
        weargauge: typing.Union[MetaOapg.properties.weargauge, str, schemas.Unset] = schemas.unset,
        wearinner: typing.Union[MetaOapg.properties.wearinner, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        wearloc: typing.Union[MetaOapg.properties.wearloc, str, schemas.Unset] = schemas.unset,
        wearother: typing.Union[MetaOapg.properties.wearother, str, schemas.Unset] = schemas.unset,
        wearouter: typing.Union[MetaOapg.properties.wearouter, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        wearpulled: typing.Union[MetaOapg.properties.wearpulled, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AdditionalDullGradingData':
        return super().__new__(
            cls,
            *args,
            idrec=idrec,
            idwell=idwell,
            idrecdrillstringcomp=idrecdrillstringcomp,
            idrecparent=idrecparent,
            note=note,
            typ=typ,
            wearbearing=wearbearing,
            weardull=weardull,
            weargauge=weargauge,
            wearinner=wearinner,
            wearloc=wearloc,
            wearother=wearother,
            wearouter=wearouter,
            wearpulled=wearpulled,
            _configuration=_configuration,
            **kwargs,
        )
