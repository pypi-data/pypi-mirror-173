# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class BottomHoleCoreData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idrec",
            "idwell",
        }
        
        class properties:
            idrec = schemas.StrSchema
            idwell = schemas.StrSchema
            barrellength = schemas.NumberSchema
            barreltyp = schemas.StrSchema
            com = schemas.StrSchema
            contractor = schemas.StrSchema
            coreno = schemas.IntSchema
            depthbtm = schemas.NumberSchema
            depthtop = schemas.NumberSchema
            des = schemas.StrSchema
            dttm = schemas.DateTimeSchema
            fluidtyp = schemas.StrSchema
            idrecdrillstringcomp = schemas.StrSchema
            idrecgeoeval = schemas.StrSchema
            idrecjob = schemas.StrSchema
            idrecwellbore = schemas.StrSchema
            lenrecovered = schemas.NumberSchema
            oriented = schemas.BoolSchema
            proposed = schemas.BoolSchema
            purpose = schemas.StrSchema
            refno = schemas.StrSchema
            rqd = schemas.NumberSchema
            szdiacore = schemas.NumberSchema
            treatmentmethod = schemas.StrSchema
            typ = schemas.StrSchema
            __annotations__ = {
                "idrec": idrec,
                "idwell": idwell,
                "barrellength": barrellength,
                "barreltyp": barreltyp,
                "com": com,
                "contractor": contractor,
                "coreno": coreno,
                "depthbtm": depthbtm,
                "depthtop": depthtop,
                "des": des,
                "dttm": dttm,
                "fluidtyp": fluidtyp,
                "idrecdrillstringcomp": idrecdrillstringcomp,
                "idrecgeoeval": idrecgeoeval,
                "idrecjob": idrecjob,
                "idrecwellbore": idrecwellbore,
                "lenrecovered": lenrecovered,
                "oriented": oriented,
                "proposed": proposed,
                "purpose": purpose,
                "refno": refno,
                "rqd": rqd,
                "szdiacore": szdiacore,
                "treatmentmethod": treatmentmethod,
                "typ": typ,
            }
    
    idrec: MetaOapg.properties.idrec
    idwell: MetaOapg.properties.idwell
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["barrellength"]) -> MetaOapg.properties.barrellength: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["barreltyp"]) -> MetaOapg.properties.barreltyp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["com"]) -> MetaOapg.properties.com: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contractor"]) -> MetaOapg.properties.contractor: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["coreno"]) -> MetaOapg.properties.coreno: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["depthbtm"]) -> MetaOapg.properties.depthbtm: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["depthtop"]) -> MetaOapg.properties.depthtop: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["des"]) -> MetaOapg.properties.des: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttm"]) -> MetaOapg.properties.dttm: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fluidtyp"]) -> MetaOapg.properties.fluidtyp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecdrillstringcomp"]) -> MetaOapg.properties.idrecdrillstringcomp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecgeoeval"]) -> MetaOapg.properties.idrecgeoeval: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecjob"]) -> MetaOapg.properties.idrecjob: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecwellbore"]) -> MetaOapg.properties.idrecwellbore: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lenrecovered"]) -> MetaOapg.properties.lenrecovered: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["oriented"]) -> MetaOapg.properties.oriented: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["proposed"]) -> MetaOapg.properties.proposed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["purpose"]) -> MetaOapg.properties.purpose: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["refno"]) -> MetaOapg.properties.refno: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rqd"]) -> MetaOapg.properties.rqd: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["szdiacore"]) -> MetaOapg.properties.szdiacore: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["treatmentmethod"]) -> MetaOapg.properties.treatmentmethod: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["typ"]) -> MetaOapg.properties.typ: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "barrellength", "barreltyp", "com", "contractor", "coreno", "depthbtm", "depthtop", "des", "dttm", "fluidtyp", "idrecdrillstringcomp", "idrecgeoeval", "idrecjob", "idrecwellbore", "lenrecovered", "oriented", "proposed", "purpose", "refno", "rqd", "szdiacore", "treatmentmethod", "typ", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["barrellength"]) -> typing.Union[MetaOapg.properties.barrellength, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["barreltyp"]) -> typing.Union[MetaOapg.properties.barreltyp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["com"]) -> typing.Union[MetaOapg.properties.com, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contractor"]) -> typing.Union[MetaOapg.properties.contractor, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["coreno"]) -> typing.Union[MetaOapg.properties.coreno, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["depthbtm"]) -> typing.Union[MetaOapg.properties.depthbtm, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["depthtop"]) -> typing.Union[MetaOapg.properties.depthtop, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["des"]) -> typing.Union[MetaOapg.properties.des, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttm"]) -> typing.Union[MetaOapg.properties.dttm, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fluidtyp"]) -> typing.Union[MetaOapg.properties.fluidtyp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecdrillstringcomp"]) -> typing.Union[MetaOapg.properties.idrecdrillstringcomp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecgeoeval"]) -> typing.Union[MetaOapg.properties.idrecgeoeval, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecjob"]) -> typing.Union[MetaOapg.properties.idrecjob, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecwellbore"]) -> typing.Union[MetaOapg.properties.idrecwellbore, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lenrecovered"]) -> typing.Union[MetaOapg.properties.lenrecovered, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["oriented"]) -> typing.Union[MetaOapg.properties.oriented, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["proposed"]) -> typing.Union[MetaOapg.properties.proposed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["purpose"]) -> typing.Union[MetaOapg.properties.purpose, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["refno"]) -> typing.Union[MetaOapg.properties.refno, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rqd"]) -> typing.Union[MetaOapg.properties.rqd, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["szdiacore"]) -> typing.Union[MetaOapg.properties.szdiacore, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["treatmentmethod"]) -> typing.Union[MetaOapg.properties.treatmentmethod, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["typ"]) -> typing.Union[MetaOapg.properties.typ, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "barrellength", "barreltyp", "com", "contractor", "coreno", "depthbtm", "depthtop", "des", "dttm", "fluidtyp", "idrecdrillstringcomp", "idrecgeoeval", "idrecjob", "idrecwellbore", "lenrecovered", "oriented", "proposed", "purpose", "refno", "rqd", "szdiacore", "treatmentmethod", "typ", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idrec: typing.Union[MetaOapg.properties.idrec, str, ],
        idwell: typing.Union[MetaOapg.properties.idwell, str, ],
        barrellength: typing.Union[MetaOapg.properties.barrellength, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        barreltyp: typing.Union[MetaOapg.properties.barreltyp, str, schemas.Unset] = schemas.unset,
        com: typing.Union[MetaOapg.properties.com, str, schemas.Unset] = schemas.unset,
        contractor: typing.Union[MetaOapg.properties.contractor, str, schemas.Unset] = schemas.unset,
        coreno: typing.Union[MetaOapg.properties.coreno, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        depthbtm: typing.Union[MetaOapg.properties.depthbtm, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        depthtop: typing.Union[MetaOapg.properties.depthtop, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        des: typing.Union[MetaOapg.properties.des, str, schemas.Unset] = schemas.unset,
        dttm: typing.Union[MetaOapg.properties.dttm, str, datetime, schemas.Unset] = schemas.unset,
        fluidtyp: typing.Union[MetaOapg.properties.fluidtyp, str, schemas.Unset] = schemas.unset,
        idrecdrillstringcomp: typing.Union[MetaOapg.properties.idrecdrillstringcomp, str, schemas.Unset] = schemas.unset,
        idrecgeoeval: typing.Union[MetaOapg.properties.idrecgeoeval, str, schemas.Unset] = schemas.unset,
        idrecjob: typing.Union[MetaOapg.properties.idrecjob, str, schemas.Unset] = schemas.unset,
        idrecwellbore: typing.Union[MetaOapg.properties.idrecwellbore, str, schemas.Unset] = schemas.unset,
        lenrecovered: typing.Union[MetaOapg.properties.lenrecovered, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        oriented: typing.Union[MetaOapg.properties.oriented, bool, schemas.Unset] = schemas.unset,
        proposed: typing.Union[MetaOapg.properties.proposed, bool, schemas.Unset] = schemas.unset,
        purpose: typing.Union[MetaOapg.properties.purpose, str, schemas.Unset] = schemas.unset,
        refno: typing.Union[MetaOapg.properties.refno, str, schemas.Unset] = schemas.unset,
        rqd: typing.Union[MetaOapg.properties.rqd, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        szdiacore: typing.Union[MetaOapg.properties.szdiacore, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        treatmentmethod: typing.Union[MetaOapg.properties.treatmentmethod, str, schemas.Unset] = schemas.unset,
        typ: typing.Union[MetaOapg.properties.typ, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'BottomHoleCoreData':
        return super().__new__(
            cls,
            *args,
            idrec=idrec,
            idwell=idwell,
            barrellength=barrellength,
            barreltyp=barreltyp,
            com=com,
            contractor=contractor,
            coreno=coreno,
            depthbtm=depthbtm,
            depthtop=depthtop,
            des=des,
            dttm=dttm,
            fluidtyp=fluidtyp,
            idrecdrillstringcomp=idrecdrillstringcomp,
            idrecgeoeval=idrecgeoeval,
            idrecjob=idrecjob,
            idrecwellbore=idrecwellbore,
            lenrecovered=lenrecovered,
            oriented=oriented,
            proposed=proposed,
            purpose=purpose,
            refno=refno,
            rqd=rqd,
            szdiacore=szdiacore,
            treatmentmethod=treatmentmethod,
            typ=typ,
            _configuration=_configuration,
            **kwargs,
        )
