# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class ElectricData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idrec",
            "idwell",
        }
        
        class properties:
            idrec = schemas.StrSchema
            idwell = schemas.StrSchema
            currentrating = schemas.NumberSchema
            idrecparent = schemas.StrSchema
            motorpoles = schemas.IntSchema
            nemarating = schemas.StrSchema
            typ = schemas.StrSchema
            utilityco = schemas.StrSchema
            varspddrv = schemas.BoolSchema
            varspddrvlowerfreq = schemas.NumberSchema
            varspddrvmake = schemas.StrSchema
            varspddrvmodel = schemas.StrSchema
            varspddrvupperfreq = schemas.NumberSchema
            voltagerating = schemas.NumberSchema
            __annotations__ = {
                "idrec": idrec,
                "idwell": idwell,
                "currentrating": currentrating,
                "idrecparent": idrecparent,
                "motorpoles": motorpoles,
                "nemarating": nemarating,
                "typ": typ,
                "utilityco": utilityco,
                "varspddrv": varspddrv,
                "varspddrvlowerfreq": varspddrvlowerfreq,
                "varspddrvmake": varspddrvmake,
                "varspddrvmodel": varspddrvmodel,
                "varspddrvupperfreq": varspddrvupperfreq,
                "voltagerating": voltagerating,
            }
    
    idrec: MetaOapg.properties.idrec
    idwell: MetaOapg.properties.idwell
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currentrating"]) -> MetaOapg.properties.currentrating: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecparent"]) -> MetaOapg.properties.idrecparent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["motorpoles"]) -> MetaOapg.properties.motorpoles: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nemarating"]) -> MetaOapg.properties.nemarating: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["typ"]) -> MetaOapg.properties.typ: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["utilityco"]) -> MetaOapg.properties.utilityco: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["varspddrv"]) -> MetaOapg.properties.varspddrv: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["varspddrvlowerfreq"]) -> MetaOapg.properties.varspddrvlowerfreq: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["varspddrvmake"]) -> MetaOapg.properties.varspddrvmake: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["varspddrvmodel"]) -> MetaOapg.properties.varspddrvmodel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["varspddrvupperfreq"]) -> MetaOapg.properties.varspddrvupperfreq: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["voltagerating"]) -> MetaOapg.properties.voltagerating: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "currentrating", "idrecparent", "motorpoles", "nemarating", "typ", "utilityco", "varspddrv", "varspddrvlowerfreq", "varspddrvmake", "varspddrvmodel", "varspddrvupperfreq", "voltagerating", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currentrating"]) -> typing.Union[MetaOapg.properties.currentrating, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecparent"]) -> typing.Union[MetaOapg.properties.idrecparent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["motorpoles"]) -> typing.Union[MetaOapg.properties.motorpoles, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nemarating"]) -> typing.Union[MetaOapg.properties.nemarating, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["typ"]) -> typing.Union[MetaOapg.properties.typ, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["utilityco"]) -> typing.Union[MetaOapg.properties.utilityco, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["varspddrv"]) -> typing.Union[MetaOapg.properties.varspddrv, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["varspddrvlowerfreq"]) -> typing.Union[MetaOapg.properties.varspddrvlowerfreq, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["varspddrvmake"]) -> typing.Union[MetaOapg.properties.varspddrvmake, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["varspddrvmodel"]) -> typing.Union[MetaOapg.properties.varspddrvmodel, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["varspddrvupperfreq"]) -> typing.Union[MetaOapg.properties.varspddrvupperfreq, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["voltagerating"]) -> typing.Union[MetaOapg.properties.voltagerating, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "currentrating", "idrecparent", "motorpoles", "nemarating", "typ", "utilityco", "varspddrv", "varspddrvlowerfreq", "varspddrvmake", "varspddrvmodel", "varspddrvupperfreq", "voltagerating", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idrec: typing.Union[MetaOapg.properties.idrec, str, ],
        idwell: typing.Union[MetaOapg.properties.idwell, str, ],
        currentrating: typing.Union[MetaOapg.properties.currentrating, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        idrecparent: typing.Union[MetaOapg.properties.idrecparent, str, schemas.Unset] = schemas.unset,
        motorpoles: typing.Union[MetaOapg.properties.motorpoles, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        nemarating: typing.Union[MetaOapg.properties.nemarating, str, schemas.Unset] = schemas.unset,
        typ: typing.Union[MetaOapg.properties.typ, str, schemas.Unset] = schemas.unset,
        utilityco: typing.Union[MetaOapg.properties.utilityco, str, schemas.Unset] = schemas.unset,
        varspddrv: typing.Union[MetaOapg.properties.varspddrv, bool, schemas.Unset] = schemas.unset,
        varspddrvlowerfreq: typing.Union[MetaOapg.properties.varspddrvlowerfreq, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        varspddrvmake: typing.Union[MetaOapg.properties.varspddrvmake, str, schemas.Unset] = schemas.unset,
        varspddrvmodel: typing.Union[MetaOapg.properties.varspddrvmodel, str, schemas.Unset] = schemas.unset,
        varspddrvupperfreq: typing.Union[MetaOapg.properties.varspddrvupperfreq, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        voltagerating: typing.Union[MetaOapg.properties.voltagerating, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ElectricData':
        return super().__new__(
            cls,
            *args,
            idrec=idrec,
            idwell=idwell,
            currentrating=currentrating,
            idrecparent=idrecparent,
            motorpoles=motorpoles,
            nemarating=nemarating,
            typ=typ,
            utilityco=utilityco,
            varspddrv=varspddrv,
            varspddrvlowerfreq=varspddrvlowerfreq,
            varspddrvmake=varspddrvmake,
            varspddrvmodel=varspddrvmodel,
            varspddrvupperfreq=varspddrvupperfreq,
            voltagerating=voltagerating,
            _configuration=_configuration,
            **kwargs,
        )
