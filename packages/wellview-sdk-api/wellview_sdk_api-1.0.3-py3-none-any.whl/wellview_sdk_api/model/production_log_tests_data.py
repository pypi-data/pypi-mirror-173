# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class ProductionLogTestsData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idrec",
            "idwell",
        }
        
        class properties:
            idrec = schemas.StrSchema
            idwell = schemas.StrSchema
            analyst = schemas.StrSchema
            com = schemas.StrSchema
            density = schemas.NumberSchema
            des = schemas.StrSchema
            dttm = schemas.DateTimeSchema
            durshutin = schemas.NumberSchema
            fluidlevel = schemas.NumberSchema
            idrecjob = schemas.StrSchema
            idreclog = schemas.StrSchema
            orificesz = schemas.NumberSchema
            presflowingsurf = schemas.NumberSchema
            presshutin = schemas.NumberSchema
            ratecondsurf = schemas.NumberSchema
            rategassurf = schemas.NumberSchema
            rateoilsurf = schemas.NumberSchema
            ratewatersurf = schemas.NumberSchema
            testedby = schemas.StrSchema
            tooldes = schemas.StrSchema
            typ1 = schemas.StrSchema
            typ2 = schemas.StrSchema
            __annotations__ = {
                "idrec": idrec,
                "idwell": idwell,
                "analyst": analyst,
                "com": com,
                "density": density,
                "des": des,
                "dttm": dttm,
                "durshutin": durshutin,
                "fluidlevel": fluidlevel,
                "idrecjob": idrecjob,
                "idreclog": idreclog,
                "orificesz": orificesz,
                "presflowingsurf": presflowingsurf,
                "presshutin": presshutin,
                "ratecondsurf": ratecondsurf,
                "rategassurf": rategassurf,
                "rateoilsurf": rateoilsurf,
                "ratewatersurf": ratewatersurf,
                "testedby": testedby,
                "tooldes": tooldes,
                "typ1": typ1,
                "typ2": typ2,
            }
    
    idrec: MetaOapg.properties.idrec
    idwell: MetaOapg.properties.idwell
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["analyst"]) -> MetaOapg.properties.analyst: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["com"]) -> MetaOapg.properties.com: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["density"]) -> MetaOapg.properties.density: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["des"]) -> MetaOapg.properties.des: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttm"]) -> MetaOapg.properties.dttm: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["durshutin"]) -> MetaOapg.properties.durshutin: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fluidlevel"]) -> MetaOapg.properties.fluidlevel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecjob"]) -> MetaOapg.properties.idrecjob: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idreclog"]) -> MetaOapg.properties.idreclog: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orificesz"]) -> MetaOapg.properties.orificesz: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["presflowingsurf"]) -> MetaOapg.properties.presflowingsurf: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["presshutin"]) -> MetaOapg.properties.presshutin: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ratecondsurf"]) -> MetaOapg.properties.ratecondsurf: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rategassurf"]) -> MetaOapg.properties.rategassurf: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rateoilsurf"]) -> MetaOapg.properties.rateoilsurf: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ratewatersurf"]) -> MetaOapg.properties.ratewatersurf: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["testedby"]) -> MetaOapg.properties.testedby: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tooldes"]) -> MetaOapg.properties.tooldes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["typ1"]) -> MetaOapg.properties.typ1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["typ2"]) -> MetaOapg.properties.typ2: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "analyst", "com", "density", "des", "dttm", "durshutin", "fluidlevel", "idrecjob", "idreclog", "orificesz", "presflowingsurf", "presshutin", "ratecondsurf", "rategassurf", "rateoilsurf", "ratewatersurf", "testedby", "tooldes", "typ1", "typ2", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["analyst"]) -> typing.Union[MetaOapg.properties.analyst, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["com"]) -> typing.Union[MetaOapg.properties.com, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["density"]) -> typing.Union[MetaOapg.properties.density, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["des"]) -> typing.Union[MetaOapg.properties.des, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttm"]) -> typing.Union[MetaOapg.properties.dttm, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["durshutin"]) -> typing.Union[MetaOapg.properties.durshutin, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fluidlevel"]) -> typing.Union[MetaOapg.properties.fluidlevel, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecjob"]) -> typing.Union[MetaOapg.properties.idrecjob, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idreclog"]) -> typing.Union[MetaOapg.properties.idreclog, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orificesz"]) -> typing.Union[MetaOapg.properties.orificesz, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["presflowingsurf"]) -> typing.Union[MetaOapg.properties.presflowingsurf, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["presshutin"]) -> typing.Union[MetaOapg.properties.presshutin, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ratecondsurf"]) -> typing.Union[MetaOapg.properties.ratecondsurf, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rategassurf"]) -> typing.Union[MetaOapg.properties.rategassurf, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rateoilsurf"]) -> typing.Union[MetaOapg.properties.rateoilsurf, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ratewatersurf"]) -> typing.Union[MetaOapg.properties.ratewatersurf, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["testedby"]) -> typing.Union[MetaOapg.properties.testedby, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tooldes"]) -> typing.Union[MetaOapg.properties.tooldes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["typ1"]) -> typing.Union[MetaOapg.properties.typ1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["typ2"]) -> typing.Union[MetaOapg.properties.typ2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "analyst", "com", "density", "des", "dttm", "durshutin", "fluidlevel", "idrecjob", "idreclog", "orificesz", "presflowingsurf", "presshutin", "ratecondsurf", "rategassurf", "rateoilsurf", "ratewatersurf", "testedby", "tooldes", "typ1", "typ2", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idrec: typing.Union[MetaOapg.properties.idrec, str, ],
        idwell: typing.Union[MetaOapg.properties.idwell, str, ],
        analyst: typing.Union[MetaOapg.properties.analyst, str, schemas.Unset] = schemas.unset,
        com: typing.Union[MetaOapg.properties.com, str, schemas.Unset] = schemas.unset,
        density: typing.Union[MetaOapg.properties.density, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        des: typing.Union[MetaOapg.properties.des, str, schemas.Unset] = schemas.unset,
        dttm: typing.Union[MetaOapg.properties.dttm, str, datetime, schemas.Unset] = schemas.unset,
        durshutin: typing.Union[MetaOapg.properties.durshutin, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        fluidlevel: typing.Union[MetaOapg.properties.fluidlevel, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        idrecjob: typing.Union[MetaOapg.properties.idrecjob, str, schemas.Unset] = schemas.unset,
        idreclog: typing.Union[MetaOapg.properties.idreclog, str, schemas.Unset] = schemas.unset,
        orificesz: typing.Union[MetaOapg.properties.orificesz, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        presflowingsurf: typing.Union[MetaOapg.properties.presflowingsurf, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        presshutin: typing.Union[MetaOapg.properties.presshutin, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        ratecondsurf: typing.Union[MetaOapg.properties.ratecondsurf, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        rategassurf: typing.Union[MetaOapg.properties.rategassurf, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        rateoilsurf: typing.Union[MetaOapg.properties.rateoilsurf, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        ratewatersurf: typing.Union[MetaOapg.properties.ratewatersurf, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        testedby: typing.Union[MetaOapg.properties.testedby, str, schemas.Unset] = schemas.unset,
        tooldes: typing.Union[MetaOapg.properties.tooldes, str, schemas.Unset] = schemas.unset,
        typ1: typing.Union[MetaOapg.properties.typ1, str, schemas.Unset] = schemas.unset,
        typ2: typing.Union[MetaOapg.properties.typ2, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ProductionLogTestsData':
        return super().__new__(
            cls,
            *args,
            idrec=idrec,
            idwell=idwell,
            analyst=analyst,
            com=com,
            density=density,
            des=des,
            dttm=dttm,
            durshutin=durshutin,
            fluidlevel=fluidlevel,
            idrecjob=idrecjob,
            idreclog=idreclog,
            orificesz=orificesz,
            presflowingsurf=presflowingsurf,
            presshutin=presshutin,
            ratecondsurf=ratecondsurf,
            rategassurf=rategassurf,
            rateoilsurf=rateoilsurf,
            ratewatersurf=ratewatersurf,
            testedby=testedby,
            tooldes=tooldes,
            typ1=typ1,
            typ2=typ2,
            _configuration=_configuration,
            **kwargs,
        )
