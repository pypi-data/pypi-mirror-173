# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class RodPumpDetailData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idrec",
            "idwell",
        }
        
        class properties:
            idrec = schemas.StrSchema
            idwell = schemas.StrSchema
            chokesz = schemas.NumberSchema
            crankpinsetting = schemas.IntSchema
            durop = schemas.NumberSchema
            durshutin = schemas.NumberSchema
            idrecparent = schemas.StrSchema
            loadpolishrodmax = schemas.NumberSchema
            pitmanpos = schemas.IntSchema
            rotationdir = schemas.StrSchema
            spm = schemas.NumberSchema
            strokelength = schemas.NumberSchema
            __annotations__ = {
                "idrec": idrec,
                "idwell": idwell,
                "chokesz": chokesz,
                "crankpinsetting": crankpinsetting,
                "durop": durop,
                "durshutin": durshutin,
                "idrecparent": idrecparent,
                "loadpolishrodmax": loadpolishrodmax,
                "pitmanpos": pitmanpos,
                "rotationdir": rotationdir,
                "spm": spm,
                "strokelength": strokelength,
            }
    
    idrec: MetaOapg.properties.idrec
    idwell: MetaOapg.properties.idwell
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["chokesz"]) -> MetaOapg.properties.chokesz: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["crankpinsetting"]) -> MetaOapg.properties.crankpinsetting: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["durop"]) -> MetaOapg.properties.durop: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["durshutin"]) -> MetaOapg.properties.durshutin: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecparent"]) -> MetaOapg.properties.idrecparent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["loadpolishrodmax"]) -> MetaOapg.properties.loadpolishrodmax: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pitmanpos"]) -> MetaOapg.properties.pitmanpos: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rotationdir"]) -> MetaOapg.properties.rotationdir: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["spm"]) -> MetaOapg.properties.spm: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["strokelength"]) -> MetaOapg.properties.strokelength: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "chokesz", "crankpinsetting", "durop", "durshutin", "idrecparent", "loadpolishrodmax", "pitmanpos", "rotationdir", "spm", "strokelength", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["chokesz"]) -> typing.Union[MetaOapg.properties.chokesz, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["crankpinsetting"]) -> typing.Union[MetaOapg.properties.crankpinsetting, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["durop"]) -> typing.Union[MetaOapg.properties.durop, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["durshutin"]) -> typing.Union[MetaOapg.properties.durshutin, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecparent"]) -> typing.Union[MetaOapg.properties.idrecparent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["loadpolishrodmax"]) -> typing.Union[MetaOapg.properties.loadpolishrodmax, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pitmanpos"]) -> typing.Union[MetaOapg.properties.pitmanpos, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rotationdir"]) -> typing.Union[MetaOapg.properties.rotationdir, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["spm"]) -> typing.Union[MetaOapg.properties.spm, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["strokelength"]) -> typing.Union[MetaOapg.properties.strokelength, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "chokesz", "crankpinsetting", "durop", "durshutin", "idrecparent", "loadpolishrodmax", "pitmanpos", "rotationdir", "spm", "strokelength", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idrec: typing.Union[MetaOapg.properties.idrec, str, ],
        idwell: typing.Union[MetaOapg.properties.idwell, str, ],
        chokesz: typing.Union[MetaOapg.properties.chokesz, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        crankpinsetting: typing.Union[MetaOapg.properties.crankpinsetting, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        durop: typing.Union[MetaOapg.properties.durop, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        durshutin: typing.Union[MetaOapg.properties.durshutin, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        idrecparent: typing.Union[MetaOapg.properties.idrecparent, str, schemas.Unset] = schemas.unset,
        loadpolishrodmax: typing.Union[MetaOapg.properties.loadpolishrodmax, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        pitmanpos: typing.Union[MetaOapg.properties.pitmanpos, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        rotationdir: typing.Union[MetaOapg.properties.rotationdir, str, schemas.Unset] = schemas.unset,
        spm: typing.Union[MetaOapg.properties.spm, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        strokelength: typing.Union[MetaOapg.properties.strokelength, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'RodPumpDetailData':
        return super().__new__(
            cls,
            *args,
            idrec=idrec,
            idwell=idwell,
            chokesz=chokesz,
            crankpinsetting=crankpinsetting,
            durop=durop,
            durshutin=durshutin,
            idrecparent=idrecparent,
            loadpolishrodmax=loadpolishrodmax,
            pitmanpos=pitmanpos,
            rotationdir=rotationdir,
            spm=spm,
            strokelength=strokelength,
            _configuration=_configuration,
            **kwargs,
        )
