# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class RFTFluidData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idrec",
            "idwell",
        }
        
        class properties:
            idrec = schemas.StrSchema
            idwell = schemas.StrSchema
            com = schemas.StrSchema
            densityfluid = schemas.NumberSchema
            dursample = schemas.NumberSchema
            fluidtyp = schemas.StrSchema
            idrecparent = schemas.StrSchema
            nacl = schemas.NumberSchema
            ph = schemas.NumberSchema
            preschamberend = schemas.NumberSchema
            preschambersurf = schemas.NumberSchema
            refno = schemas.StrSchema
            refnosamplechamber = schemas.StrSchema
            volfluid = schemas.NumberSchema
            __annotations__ = {
                "idrec": idrec,
                "idwell": idwell,
                "com": com,
                "densityfluid": densityfluid,
                "dursample": dursample,
                "fluidtyp": fluidtyp,
                "idrecparent": idrecparent,
                "nacl": nacl,
                "ph": ph,
                "preschamberend": preschamberend,
                "preschambersurf": preschambersurf,
                "refno": refno,
                "refnosamplechamber": refnosamplechamber,
                "volfluid": volfluid,
            }
    
    idrec: MetaOapg.properties.idrec
    idwell: MetaOapg.properties.idwell
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["com"]) -> MetaOapg.properties.com: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["densityfluid"]) -> MetaOapg.properties.densityfluid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dursample"]) -> MetaOapg.properties.dursample: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fluidtyp"]) -> MetaOapg.properties.fluidtyp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecparent"]) -> MetaOapg.properties.idrecparent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nacl"]) -> MetaOapg.properties.nacl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ph"]) -> MetaOapg.properties.ph: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["preschamberend"]) -> MetaOapg.properties.preschamberend: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["preschambersurf"]) -> MetaOapg.properties.preschambersurf: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["refno"]) -> MetaOapg.properties.refno: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["refnosamplechamber"]) -> MetaOapg.properties.refnosamplechamber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["volfluid"]) -> MetaOapg.properties.volfluid: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "com", "densityfluid", "dursample", "fluidtyp", "idrecparent", "nacl", "ph", "preschamberend", "preschambersurf", "refno", "refnosamplechamber", "volfluid", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["com"]) -> typing.Union[MetaOapg.properties.com, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["densityfluid"]) -> typing.Union[MetaOapg.properties.densityfluid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dursample"]) -> typing.Union[MetaOapg.properties.dursample, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fluidtyp"]) -> typing.Union[MetaOapg.properties.fluidtyp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecparent"]) -> typing.Union[MetaOapg.properties.idrecparent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nacl"]) -> typing.Union[MetaOapg.properties.nacl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ph"]) -> typing.Union[MetaOapg.properties.ph, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["preschamberend"]) -> typing.Union[MetaOapg.properties.preschamberend, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["preschambersurf"]) -> typing.Union[MetaOapg.properties.preschambersurf, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["refno"]) -> typing.Union[MetaOapg.properties.refno, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["refnosamplechamber"]) -> typing.Union[MetaOapg.properties.refnosamplechamber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["volfluid"]) -> typing.Union[MetaOapg.properties.volfluid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "com", "densityfluid", "dursample", "fluidtyp", "idrecparent", "nacl", "ph", "preschamberend", "preschambersurf", "refno", "refnosamplechamber", "volfluid", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idrec: typing.Union[MetaOapg.properties.idrec, str, ],
        idwell: typing.Union[MetaOapg.properties.idwell, str, ],
        com: typing.Union[MetaOapg.properties.com, str, schemas.Unset] = schemas.unset,
        densityfluid: typing.Union[MetaOapg.properties.densityfluid, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        dursample: typing.Union[MetaOapg.properties.dursample, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        fluidtyp: typing.Union[MetaOapg.properties.fluidtyp, str, schemas.Unset] = schemas.unset,
        idrecparent: typing.Union[MetaOapg.properties.idrecparent, str, schemas.Unset] = schemas.unset,
        nacl: typing.Union[MetaOapg.properties.nacl, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        ph: typing.Union[MetaOapg.properties.ph, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        preschamberend: typing.Union[MetaOapg.properties.preschamberend, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        preschambersurf: typing.Union[MetaOapg.properties.preschambersurf, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        refno: typing.Union[MetaOapg.properties.refno, str, schemas.Unset] = schemas.unset,
        refnosamplechamber: typing.Union[MetaOapg.properties.refnosamplechamber, str, schemas.Unset] = schemas.unset,
        volfluid: typing.Union[MetaOapg.properties.volfluid, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'RFTFluidData':
        return super().__new__(
            cls,
            *args,
            idrec=idrec,
            idwell=idwell,
            com=com,
            densityfluid=densityfluid,
            dursample=dursample,
            fluidtyp=fluidtyp,
            idrecparent=idrecparent,
            nacl=nacl,
            ph=ph,
            preschamberend=preschamberend,
            preschambersurf=preschambersurf,
            refno=refno,
            refnosamplechamber=refnosamplechamber,
            volfluid=volfluid,
            _configuration=_configuration,
            **kwargs,
        )
