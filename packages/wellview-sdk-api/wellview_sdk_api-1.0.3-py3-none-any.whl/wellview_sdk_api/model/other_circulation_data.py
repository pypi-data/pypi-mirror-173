# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class OtherCirculationData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idrec",
            "idwell",
        }
        
        class properties:
            idrec = schemas.StrSchema
            idwell = schemas.StrSchema
            com = schemas.StrSchema
            depthend = schemas.NumberSchema
            depthstart = schemas.NumberSchema
            des = schemas.StrSchema
            dttmend = schemas.DateTimeSchema
            dttmstart = schemas.DateTimeSchema
            fluiddes = schemas.StrSchema
            idreclink = schemas.StrSchema
            idrecparent = schemas.StrSchema
            opsinprog = schemas.StrSchema
            pres = schemas.NumberSchema
            rate = schemas.NumberSchema
            tmcirc = schemas.NumberSchema
            __annotations__ = {
                "idrec": idrec,
                "idwell": idwell,
                "com": com,
                "depthend": depthend,
                "depthstart": depthstart,
                "des": des,
                "dttmend": dttmend,
                "dttmstart": dttmstart,
                "fluiddes": fluiddes,
                "idreclink": idreclink,
                "idrecparent": idrecparent,
                "opsinprog": opsinprog,
                "pres": pres,
                "rate": rate,
                "tmcirc": tmcirc,
            }
    
    idrec: MetaOapg.properties.idrec
    idwell: MetaOapg.properties.idwell
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["com"]) -> MetaOapg.properties.com: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["depthend"]) -> MetaOapg.properties.depthend: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["depthstart"]) -> MetaOapg.properties.depthstart: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["des"]) -> MetaOapg.properties.des: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmend"]) -> MetaOapg.properties.dttmend: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmstart"]) -> MetaOapg.properties.dttmstart: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fluiddes"]) -> MetaOapg.properties.fluiddes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idreclink"]) -> MetaOapg.properties.idreclink: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecparent"]) -> MetaOapg.properties.idrecparent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["opsinprog"]) -> MetaOapg.properties.opsinprog: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pres"]) -> MetaOapg.properties.pres: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rate"]) -> MetaOapg.properties.rate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tmcirc"]) -> MetaOapg.properties.tmcirc: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "com", "depthend", "depthstart", "des", "dttmend", "dttmstart", "fluiddes", "idreclink", "idrecparent", "opsinprog", "pres", "rate", "tmcirc", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["com"]) -> typing.Union[MetaOapg.properties.com, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["depthend"]) -> typing.Union[MetaOapg.properties.depthend, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["depthstart"]) -> typing.Union[MetaOapg.properties.depthstart, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["des"]) -> typing.Union[MetaOapg.properties.des, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmend"]) -> typing.Union[MetaOapg.properties.dttmend, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmstart"]) -> typing.Union[MetaOapg.properties.dttmstart, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fluiddes"]) -> typing.Union[MetaOapg.properties.fluiddes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idreclink"]) -> typing.Union[MetaOapg.properties.idreclink, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecparent"]) -> typing.Union[MetaOapg.properties.idrecparent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["opsinprog"]) -> typing.Union[MetaOapg.properties.opsinprog, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pres"]) -> typing.Union[MetaOapg.properties.pres, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rate"]) -> typing.Union[MetaOapg.properties.rate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tmcirc"]) -> typing.Union[MetaOapg.properties.tmcirc, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "com", "depthend", "depthstart", "des", "dttmend", "dttmstart", "fluiddes", "idreclink", "idrecparent", "opsinprog", "pres", "rate", "tmcirc", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idrec: typing.Union[MetaOapg.properties.idrec, str, ],
        idwell: typing.Union[MetaOapg.properties.idwell, str, ],
        com: typing.Union[MetaOapg.properties.com, str, schemas.Unset] = schemas.unset,
        depthend: typing.Union[MetaOapg.properties.depthend, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        depthstart: typing.Union[MetaOapg.properties.depthstart, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        des: typing.Union[MetaOapg.properties.des, str, schemas.Unset] = schemas.unset,
        dttmend: typing.Union[MetaOapg.properties.dttmend, str, datetime, schemas.Unset] = schemas.unset,
        dttmstart: typing.Union[MetaOapg.properties.dttmstart, str, datetime, schemas.Unset] = schemas.unset,
        fluiddes: typing.Union[MetaOapg.properties.fluiddes, str, schemas.Unset] = schemas.unset,
        idreclink: typing.Union[MetaOapg.properties.idreclink, str, schemas.Unset] = schemas.unset,
        idrecparent: typing.Union[MetaOapg.properties.idrecparent, str, schemas.Unset] = schemas.unset,
        opsinprog: typing.Union[MetaOapg.properties.opsinprog, str, schemas.Unset] = schemas.unset,
        pres: typing.Union[MetaOapg.properties.pres, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        rate: typing.Union[MetaOapg.properties.rate, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        tmcirc: typing.Union[MetaOapg.properties.tmcirc, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'OtherCirculationData':
        return super().__new__(
            cls,
            *args,
            idrec=idrec,
            idwell=idwell,
            com=com,
            depthend=depthend,
            depthstart=depthstart,
            des=des,
            dttmend=dttmend,
            dttmstart=dttmstart,
            fluiddes=fluiddes,
            idreclink=idreclink,
            idrecparent=idrecparent,
            opsinprog=opsinprog,
            pres=pres,
            rate=rate,
            tmcirc=tmcirc,
            _configuration=_configuration,
            **kwargs,
        )
