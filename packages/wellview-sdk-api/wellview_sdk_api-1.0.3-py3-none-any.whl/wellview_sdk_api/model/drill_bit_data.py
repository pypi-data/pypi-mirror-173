# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class DrillBitData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idrec",
            "idwell",
        }
        
        class properties:
            idrec = schemas.StrSchema
            idwell = schemas.StrSchema
            bitconsid = schemas.StrSchema
            bladeno = schemas.IntSchema
            connsz = schemas.NumberSchema
            connthrd = schemas.StrSchema
            cost = schemas.NumberSchema
            depthdrilledstart = schemas.NumberSchema
            dttmmanufacture = schemas.DateTimeSchema
            iadccode1 = schemas.StrSchema
            iadccode2 = schemas.StrSchema
            iadccode3 = schemas.StrSchema
            iadccode4 = schemas.StrSchema
            iconname = schemas.StrSchema
            idrecparent = schemas.StrSchema
            length = schemas.NumberSchema
            lengthgauge = schemas.NumberSchema
            make = schemas.StrSchema
            model = schemas.StrSchema
            note = schemas.StrSchema
            owner = schemas.StrSchema
            proposed = schemas.BoolSchema
            refid = schemas.StrSchema
            sn = schemas.StrSchema
            szcutter = schemas.NumberSchema
            szoddrill = schemas.NumberSchema
            szodpass = schemas.NumberSchema
            tmstart = schemas.NumberSchema
            typ1 = schemas.StrSchema
            typ2 = schemas.StrSchema
            usedclass = schemas.StrSchema
            __annotations__ = {
                "idrec": idrec,
                "idwell": idwell,
                "bitconsid": bitconsid,
                "bladeno": bladeno,
                "connsz": connsz,
                "connthrd": connthrd,
                "cost": cost,
                "depthdrilledstart": depthdrilledstart,
                "dttmmanufacture": dttmmanufacture,
                "iadccode1": iadccode1,
                "iadccode2": iadccode2,
                "iadccode3": iadccode3,
                "iadccode4": iadccode4,
                "iconname": iconname,
                "idrecparent": idrecparent,
                "length": length,
                "lengthgauge": lengthgauge,
                "make": make,
                "model": model,
                "note": note,
                "owner": owner,
                "proposed": proposed,
                "refid": refid,
                "sn": sn,
                "szcutter": szcutter,
                "szoddrill": szoddrill,
                "szodpass": szodpass,
                "tmstart": tmstart,
                "typ1": typ1,
                "typ2": typ2,
                "usedclass": usedclass,
            }
    
    idrec: MetaOapg.properties.idrec
    idwell: MetaOapg.properties.idwell
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bitconsid"]) -> MetaOapg.properties.bitconsid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bladeno"]) -> MetaOapg.properties.bladeno: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["connsz"]) -> MetaOapg.properties.connsz: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["connthrd"]) -> MetaOapg.properties.connthrd: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cost"]) -> MetaOapg.properties.cost: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["depthdrilledstart"]) -> MetaOapg.properties.depthdrilledstart: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmmanufacture"]) -> MetaOapg.properties.dttmmanufacture: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["iadccode1"]) -> MetaOapg.properties.iadccode1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["iadccode2"]) -> MetaOapg.properties.iadccode2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["iadccode3"]) -> MetaOapg.properties.iadccode3: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["iadccode4"]) -> MetaOapg.properties.iadccode4: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["iconname"]) -> MetaOapg.properties.iconname: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecparent"]) -> MetaOapg.properties.idrecparent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["length"]) -> MetaOapg.properties.length: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lengthgauge"]) -> MetaOapg.properties.lengthgauge: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["make"]) -> MetaOapg.properties.make: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["model"]) -> MetaOapg.properties.model: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["note"]) -> MetaOapg.properties.note: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["owner"]) -> MetaOapg.properties.owner: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["proposed"]) -> MetaOapg.properties.proposed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["refid"]) -> MetaOapg.properties.refid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sn"]) -> MetaOapg.properties.sn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["szcutter"]) -> MetaOapg.properties.szcutter: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["szoddrill"]) -> MetaOapg.properties.szoddrill: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["szodpass"]) -> MetaOapg.properties.szodpass: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tmstart"]) -> MetaOapg.properties.tmstart: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["typ1"]) -> MetaOapg.properties.typ1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["typ2"]) -> MetaOapg.properties.typ2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usedclass"]) -> MetaOapg.properties.usedclass: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "bitconsid", "bladeno", "connsz", "connthrd", "cost", "depthdrilledstart", "dttmmanufacture", "iadccode1", "iadccode2", "iadccode3", "iadccode4", "iconname", "idrecparent", "length", "lengthgauge", "make", "model", "note", "owner", "proposed", "refid", "sn", "szcutter", "szoddrill", "szodpass", "tmstart", "typ1", "typ2", "usedclass", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bitconsid"]) -> typing.Union[MetaOapg.properties.bitconsid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bladeno"]) -> typing.Union[MetaOapg.properties.bladeno, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["connsz"]) -> typing.Union[MetaOapg.properties.connsz, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["connthrd"]) -> typing.Union[MetaOapg.properties.connthrd, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cost"]) -> typing.Union[MetaOapg.properties.cost, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["depthdrilledstart"]) -> typing.Union[MetaOapg.properties.depthdrilledstart, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmmanufacture"]) -> typing.Union[MetaOapg.properties.dttmmanufacture, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["iadccode1"]) -> typing.Union[MetaOapg.properties.iadccode1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["iadccode2"]) -> typing.Union[MetaOapg.properties.iadccode2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["iadccode3"]) -> typing.Union[MetaOapg.properties.iadccode3, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["iadccode4"]) -> typing.Union[MetaOapg.properties.iadccode4, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["iconname"]) -> typing.Union[MetaOapg.properties.iconname, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecparent"]) -> typing.Union[MetaOapg.properties.idrecparent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["length"]) -> typing.Union[MetaOapg.properties.length, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lengthgauge"]) -> typing.Union[MetaOapg.properties.lengthgauge, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["make"]) -> typing.Union[MetaOapg.properties.make, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["model"]) -> typing.Union[MetaOapg.properties.model, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["note"]) -> typing.Union[MetaOapg.properties.note, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["owner"]) -> typing.Union[MetaOapg.properties.owner, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["proposed"]) -> typing.Union[MetaOapg.properties.proposed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["refid"]) -> typing.Union[MetaOapg.properties.refid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sn"]) -> typing.Union[MetaOapg.properties.sn, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["szcutter"]) -> typing.Union[MetaOapg.properties.szcutter, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["szoddrill"]) -> typing.Union[MetaOapg.properties.szoddrill, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["szodpass"]) -> typing.Union[MetaOapg.properties.szodpass, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tmstart"]) -> typing.Union[MetaOapg.properties.tmstart, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["typ1"]) -> typing.Union[MetaOapg.properties.typ1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["typ2"]) -> typing.Union[MetaOapg.properties.typ2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usedclass"]) -> typing.Union[MetaOapg.properties.usedclass, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "bitconsid", "bladeno", "connsz", "connthrd", "cost", "depthdrilledstart", "dttmmanufacture", "iadccode1", "iadccode2", "iadccode3", "iadccode4", "iconname", "idrecparent", "length", "lengthgauge", "make", "model", "note", "owner", "proposed", "refid", "sn", "szcutter", "szoddrill", "szodpass", "tmstart", "typ1", "typ2", "usedclass", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idrec: typing.Union[MetaOapg.properties.idrec, str, ],
        idwell: typing.Union[MetaOapg.properties.idwell, str, ],
        bitconsid: typing.Union[MetaOapg.properties.bitconsid, str, schemas.Unset] = schemas.unset,
        bladeno: typing.Union[MetaOapg.properties.bladeno, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        connsz: typing.Union[MetaOapg.properties.connsz, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        connthrd: typing.Union[MetaOapg.properties.connthrd, str, schemas.Unset] = schemas.unset,
        cost: typing.Union[MetaOapg.properties.cost, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        depthdrilledstart: typing.Union[MetaOapg.properties.depthdrilledstart, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        dttmmanufacture: typing.Union[MetaOapg.properties.dttmmanufacture, str, datetime, schemas.Unset] = schemas.unset,
        iadccode1: typing.Union[MetaOapg.properties.iadccode1, str, schemas.Unset] = schemas.unset,
        iadccode2: typing.Union[MetaOapg.properties.iadccode2, str, schemas.Unset] = schemas.unset,
        iadccode3: typing.Union[MetaOapg.properties.iadccode3, str, schemas.Unset] = schemas.unset,
        iadccode4: typing.Union[MetaOapg.properties.iadccode4, str, schemas.Unset] = schemas.unset,
        iconname: typing.Union[MetaOapg.properties.iconname, str, schemas.Unset] = schemas.unset,
        idrecparent: typing.Union[MetaOapg.properties.idrecparent, str, schemas.Unset] = schemas.unset,
        length: typing.Union[MetaOapg.properties.length, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        lengthgauge: typing.Union[MetaOapg.properties.lengthgauge, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        make: typing.Union[MetaOapg.properties.make, str, schemas.Unset] = schemas.unset,
        model: typing.Union[MetaOapg.properties.model, str, schemas.Unset] = schemas.unset,
        note: typing.Union[MetaOapg.properties.note, str, schemas.Unset] = schemas.unset,
        owner: typing.Union[MetaOapg.properties.owner, str, schemas.Unset] = schemas.unset,
        proposed: typing.Union[MetaOapg.properties.proposed, bool, schemas.Unset] = schemas.unset,
        refid: typing.Union[MetaOapg.properties.refid, str, schemas.Unset] = schemas.unset,
        sn: typing.Union[MetaOapg.properties.sn, str, schemas.Unset] = schemas.unset,
        szcutter: typing.Union[MetaOapg.properties.szcutter, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        szoddrill: typing.Union[MetaOapg.properties.szoddrill, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        szodpass: typing.Union[MetaOapg.properties.szodpass, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        tmstart: typing.Union[MetaOapg.properties.tmstart, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        typ1: typing.Union[MetaOapg.properties.typ1, str, schemas.Unset] = schemas.unset,
        typ2: typing.Union[MetaOapg.properties.typ2, str, schemas.Unset] = schemas.unset,
        usedclass: typing.Union[MetaOapg.properties.usedclass, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DrillBitData':
        return super().__new__(
            cls,
            *args,
            idrec=idrec,
            idwell=idwell,
            bitconsid=bitconsid,
            bladeno=bladeno,
            connsz=connsz,
            connthrd=connthrd,
            cost=cost,
            depthdrilledstart=depthdrilledstart,
            dttmmanufacture=dttmmanufacture,
            iadccode1=iadccode1,
            iadccode2=iadccode2,
            iadccode3=iadccode3,
            iadccode4=iadccode4,
            iconname=iconname,
            idrecparent=idrecparent,
            length=length,
            lengthgauge=lengthgauge,
            make=make,
            model=model,
            note=note,
            owner=owner,
            proposed=proposed,
            refid=refid,
            sn=sn,
            szcutter=szcutter,
            szoddrill=szoddrill,
            szodpass=szodpass,
            tmstart=tmstart,
            typ1=typ1,
            typ2=typ2,
            usedclass=usedclass,
            _configuration=_configuration,
            **kwargs,
        )
