# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class IntervalTestsData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idrec",
            "idwell",
        }
        
        class properties:
            idrec = schemas.StrSchema
            idwell = schemas.StrSchema
            blowdes = schemas.StrSchema
            cushdensity = schemas.NumberSchema
            cushdes = schemas.StrSchema
            cushheight = schemas.NumberSchema
            fluidtosurface = schemas.StrSchema
            idrecparent = schemas.StrSchema
            piperecdes = schemas.StrSchema
            presinithydro = schemas.NumberSchema
            timetosurface = schemas.NumberSchema
            __annotations__ = {
                "idrec": idrec,
                "idwell": idwell,
                "blowdes": blowdes,
                "cushdensity": cushdensity,
                "cushdes": cushdes,
                "cushheight": cushheight,
                "fluidtosurface": fluidtosurface,
                "idrecparent": idrecparent,
                "piperecdes": piperecdes,
                "presinithydro": presinithydro,
                "timetosurface": timetosurface,
            }
    
    idrec: MetaOapg.properties.idrec
    idwell: MetaOapg.properties.idwell
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["blowdes"]) -> MetaOapg.properties.blowdes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cushdensity"]) -> MetaOapg.properties.cushdensity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cushdes"]) -> MetaOapg.properties.cushdes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cushheight"]) -> MetaOapg.properties.cushheight: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fluidtosurface"]) -> MetaOapg.properties.fluidtosurface: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecparent"]) -> MetaOapg.properties.idrecparent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["piperecdes"]) -> MetaOapg.properties.piperecdes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["presinithydro"]) -> MetaOapg.properties.presinithydro: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timetosurface"]) -> MetaOapg.properties.timetosurface: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "blowdes", "cushdensity", "cushdes", "cushheight", "fluidtosurface", "idrecparent", "piperecdes", "presinithydro", "timetosurface", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["blowdes"]) -> typing.Union[MetaOapg.properties.blowdes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cushdensity"]) -> typing.Union[MetaOapg.properties.cushdensity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cushdes"]) -> typing.Union[MetaOapg.properties.cushdes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cushheight"]) -> typing.Union[MetaOapg.properties.cushheight, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fluidtosurface"]) -> typing.Union[MetaOapg.properties.fluidtosurface, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecparent"]) -> typing.Union[MetaOapg.properties.idrecparent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["piperecdes"]) -> typing.Union[MetaOapg.properties.piperecdes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["presinithydro"]) -> typing.Union[MetaOapg.properties.presinithydro, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timetosurface"]) -> typing.Union[MetaOapg.properties.timetosurface, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "blowdes", "cushdensity", "cushdes", "cushheight", "fluidtosurface", "idrecparent", "piperecdes", "presinithydro", "timetosurface", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idrec: typing.Union[MetaOapg.properties.idrec, str, ],
        idwell: typing.Union[MetaOapg.properties.idwell, str, ],
        blowdes: typing.Union[MetaOapg.properties.blowdes, str, schemas.Unset] = schemas.unset,
        cushdensity: typing.Union[MetaOapg.properties.cushdensity, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        cushdes: typing.Union[MetaOapg.properties.cushdes, str, schemas.Unset] = schemas.unset,
        cushheight: typing.Union[MetaOapg.properties.cushheight, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        fluidtosurface: typing.Union[MetaOapg.properties.fluidtosurface, str, schemas.Unset] = schemas.unset,
        idrecparent: typing.Union[MetaOapg.properties.idrecparent, str, schemas.Unset] = schemas.unset,
        piperecdes: typing.Union[MetaOapg.properties.piperecdes, str, schemas.Unset] = schemas.unset,
        presinithydro: typing.Union[MetaOapg.properties.presinithydro, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        timetosurface: typing.Union[MetaOapg.properties.timetosurface, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'IntervalTestsData':
        return super().__new__(
            cls,
            *args,
            idrec=idrec,
            idwell=idwell,
            blowdes=blowdes,
            cushdensity=cushdensity,
            cushdes=cushdes,
            cushheight=cushheight,
            fluidtosurface=fluidtosurface,
            idrecparent=idrecparent,
            piperecdes=piperecdes,
            presinithydro=presinithydro,
            timetosurface=timetosurface,
            _configuration=_configuration,
            **kwargs,
        )
