# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class AFEData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idrec",
            "idwell",
        }
        
        class properties:
            idrec = schemas.StrSchema
            idwell = schemas.StrSchema
            afenumber = schemas.StrSchema
            afenumbersupp = schemas.StrSchema
            afestatus = schemas.StrSchema
            com = schemas.StrSchema
            costtyp = schemas.StrSchema
            dttmafe = schemas.DateTimeSchema
            dttmafeclose = schemas.DateTimeSchema
            exclude = schemas.BoolSchema
            idrecparent = schemas.StrSchema
            projectname = schemas.StrSchema
            projectrefnumber = schemas.StrSchema
            typ = schemas.StrSchema
            workingint = schemas.NumberSchema
            workingintnote = schemas.StrSchema
            __annotations__ = {
                "idrec": idrec,
                "idwell": idwell,
                "afenumber": afenumber,
                "afenumbersupp": afenumbersupp,
                "afestatus": afestatus,
                "com": com,
                "costtyp": costtyp,
                "dttmafe": dttmafe,
                "dttmafeclose": dttmafeclose,
                "exclude": exclude,
                "idrecparent": idrecparent,
                "projectname": projectname,
                "projectrefnumber": projectrefnumber,
                "typ": typ,
                "workingint": workingint,
                "workingintnote": workingintnote,
            }
    
    idrec: MetaOapg.properties.idrec
    idwell: MetaOapg.properties.idwell
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["afenumber"]) -> MetaOapg.properties.afenumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["afenumbersupp"]) -> MetaOapg.properties.afenumbersupp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["afestatus"]) -> MetaOapg.properties.afestatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["com"]) -> MetaOapg.properties.com: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["costtyp"]) -> MetaOapg.properties.costtyp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmafe"]) -> MetaOapg.properties.dttmafe: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmafeclose"]) -> MetaOapg.properties.dttmafeclose: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["exclude"]) -> MetaOapg.properties.exclude: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecparent"]) -> MetaOapg.properties.idrecparent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["projectname"]) -> MetaOapg.properties.projectname: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["projectrefnumber"]) -> MetaOapg.properties.projectrefnumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["typ"]) -> MetaOapg.properties.typ: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workingint"]) -> MetaOapg.properties.workingint: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workingintnote"]) -> MetaOapg.properties.workingintnote: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "afenumber", "afenumbersupp", "afestatus", "com", "costtyp", "dttmafe", "dttmafeclose", "exclude", "idrecparent", "projectname", "projectrefnumber", "typ", "workingint", "workingintnote", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["afenumber"]) -> typing.Union[MetaOapg.properties.afenumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["afenumbersupp"]) -> typing.Union[MetaOapg.properties.afenumbersupp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["afestatus"]) -> typing.Union[MetaOapg.properties.afestatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["com"]) -> typing.Union[MetaOapg.properties.com, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["costtyp"]) -> typing.Union[MetaOapg.properties.costtyp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmafe"]) -> typing.Union[MetaOapg.properties.dttmafe, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmafeclose"]) -> typing.Union[MetaOapg.properties.dttmafeclose, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["exclude"]) -> typing.Union[MetaOapg.properties.exclude, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecparent"]) -> typing.Union[MetaOapg.properties.idrecparent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["projectname"]) -> typing.Union[MetaOapg.properties.projectname, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["projectrefnumber"]) -> typing.Union[MetaOapg.properties.projectrefnumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["typ"]) -> typing.Union[MetaOapg.properties.typ, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workingint"]) -> typing.Union[MetaOapg.properties.workingint, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workingintnote"]) -> typing.Union[MetaOapg.properties.workingintnote, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "afenumber", "afenumbersupp", "afestatus", "com", "costtyp", "dttmafe", "dttmafeclose", "exclude", "idrecparent", "projectname", "projectrefnumber", "typ", "workingint", "workingintnote", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idrec: typing.Union[MetaOapg.properties.idrec, str, ],
        idwell: typing.Union[MetaOapg.properties.idwell, str, ],
        afenumber: typing.Union[MetaOapg.properties.afenumber, str, schemas.Unset] = schemas.unset,
        afenumbersupp: typing.Union[MetaOapg.properties.afenumbersupp, str, schemas.Unset] = schemas.unset,
        afestatus: typing.Union[MetaOapg.properties.afestatus, str, schemas.Unset] = schemas.unset,
        com: typing.Union[MetaOapg.properties.com, str, schemas.Unset] = schemas.unset,
        costtyp: typing.Union[MetaOapg.properties.costtyp, str, schemas.Unset] = schemas.unset,
        dttmafe: typing.Union[MetaOapg.properties.dttmafe, str, datetime, schemas.Unset] = schemas.unset,
        dttmafeclose: typing.Union[MetaOapg.properties.dttmafeclose, str, datetime, schemas.Unset] = schemas.unset,
        exclude: typing.Union[MetaOapg.properties.exclude, bool, schemas.Unset] = schemas.unset,
        idrecparent: typing.Union[MetaOapg.properties.idrecparent, str, schemas.Unset] = schemas.unset,
        projectname: typing.Union[MetaOapg.properties.projectname, str, schemas.Unset] = schemas.unset,
        projectrefnumber: typing.Union[MetaOapg.properties.projectrefnumber, str, schemas.Unset] = schemas.unset,
        typ: typing.Union[MetaOapg.properties.typ, str, schemas.Unset] = schemas.unset,
        workingint: typing.Union[MetaOapg.properties.workingint, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        workingintnote: typing.Union[MetaOapg.properties.workingintnote, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AFEData':
        return super().__new__(
            cls,
            *args,
            idrec=idrec,
            idwell=idwell,
            afenumber=afenumber,
            afenumbersupp=afenumbersupp,
            afestatus=afestatus,
            com=com,
            costtyp=costtyp,
            dttmafe=dttmafe,
            dttmafeclose=dttmafeclose,
            exclude=exclude,
            idrecparent=idrecparent,
            projectname=projectname,
            projectrefnumber=projectrefnumber,
            typ=typ,
            workingint=workingint,
            workingintnote=workingintnote,
            _configuration=_configuration,
            **kwargs,
        )
