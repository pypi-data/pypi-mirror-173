# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class SurveyDataData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idrec",
            "idwell",
        }
        
        class properties:
            idrec = schemas.StrSchema
            idwell = schemas.StrSchema
            annotation = schemas.StrSchema
            azimuth = schemas.NumberSchema
            calcoverride = schemas.BoolSchema
            correction = schemas.StrSchema
            dlsoverride = schemas.NumberSchema
            dontuse = schemas.BoolSchema
            dontusereason = schemas.StrSchema
            dttm = schemas.DateTimeSchema
            ewoverride = schemas.NumberSchema
            gravaxialraw = schemas.NumberSchema
            gravtran1raw = schemas.NumberSchema
            gravtran2raw = schemas.NumberSchema
            idrecparent = schemas.StrSchema
            inclination = schemas.NumberSchema
            magaxialraw = schemas.NumberSchema
            magtran1raw = schemas.NumberSchema
            magtran2raw = schemas.NumberSchema
            md = schemas.NumberSchema
            model = schemas.StrSchema
            note = schemas.StrSchema
            nsoverride = schemas.NumberSchema
            source = schemas.StrSchema
            surveyedby = schemas.StrSchema
            surveymethod = schemas.StrSchema
            tfograv = schemas.NumberSchema
            tfomag = schemas.NumberSchema
            tooltyp1 = schemas.StrSchema
            tooltyp2 = schemas.StrSchema
            tvdoverride = schemas.NumberSchema
            vsoverride = schemas.NumberSchema
            __annotations__ = {
                "idrec": idrec,
                "idwell": idwell,
                "annotation": annotation,
                "azimuth": azimuth,
                "calcoverride": calcoverride,
                "correction": correction,
                "dlsoverride": dlsoverride,
                "dontuse": dontuse,
                "dontusereason": dontusereason,
                "dttm": dttm,
                "ewoverride": ewoverride,
                "gravaxialraw": gravaxialraw,
                "gravtran1raw": gravtran1raw,
                "gravtran2raw": gravtran2raw,
                "idrecparent": idrecparent,
                "inclination": inclination,
                "magaxialraw": magaxialraw,
                "magtran1raw": magtran1raw,
                "magtran2raw": magtran2raw,
                "md": md,
                "model": model,
                "note": note,
                "nsoverride": nsoverride,
                "source": source,
                "surveyedby": surveyedby,
                "surveymethod": surveymethod,
                "tfograv": tfograv,
                "tfomag": tfomag,
                "tooltyp1": tooltyp1,
                "tooltyp2": tooltyp2,
                "tvdoverride": tvdoverride,
                "vsoverride": vsoverride,
            }
    
    idrec: MetaOapg.properties.idrec
    idwell: MetaOapg.properties.idwell
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["annotation"]) -> MetaOapg.properties.annotation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["azimuth"]) -> MetaOapg.properties.azimuth: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["calcoverride"]) -> MetaOapg.properties.calcoverride: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["correction"]) -> MetaOapg.properties.correction: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dlsoverride"]) -> MetaOapg.properties.dlsoverride: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dontuse"]) -> MetaOapg.properties.dontuse: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dontusereason"]) -> MetaOapg.properties.dontusereason: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttm"]) -> MetaOapg.properties.dttm: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ewoverride"]) -> MetaOapg.properties.ewoverride: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gravaxialraw"]) -> MetaOapg.properties.gravaxialraw: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gravtran1raw"]) -> MetaOapg.properties.gravtran1raw: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gravtran2raw"]) -> MetaOapg.properties.gravtran2raw: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecparent"]) -> MetaOapg.properties.idrecparent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["inclination"]) -> MetaOapg.properties.inclination: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["magaxialraw"]) -> MetaOapg.properties.magaxialraw: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["magtran1raw"]) -> MetaOapg.properties.magtran1raw: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["magtran2raw"]) -> MetaOapg.properties.magtran2raw: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["md"]) -> MetaOapg.properties.md: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["model"]) -> MetaOapg.properties.model: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["note"]) -> MetaOapg.properties.note: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nsoverride"]) -> MetaOapg.properties.nsoverride: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["source"]) -> MetaOapg.properties.source: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["surveyedby"]) -> MetaOapg.properties.surveyedby: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["surveymethod"]) -> MetaOapg.properties.surveymethod: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tfograv"]) -> MetaOapg.properties.tfograv: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tfomag"]) -> MetaOapg.properties.tfomag: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tooltyp1"]) -> MetaOapg.properties.tooltyp1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tooltyp2"]) -> MetaOapg.properties.tooltyp2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tvdoverride"]) -> MetaOapg.properties.tvdoverride: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vsoverride"]) -> MetaOapg.properties.vsoverride: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "annotation", "azimuth", "calcoverride", "correction", "dlsoverride", "dontuse", "dontusereason", "dttm", "ewoverride", "gravaxialraw", "gravtran1raw", "gravtran2raw", "idrecparent", "inclination", "magaxialraw", "magtran1raw", "magtran2raw", "md", "model", "note", "nsoverride", "source", "surveyedby", "surveymethod", "tfograv", "tfomag", "tooltyp1", "tooltyp2", "tvdoverride", "vsoverride", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["annotation"]) -> typing.Union[MetaOapg.properties.annotation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["azimuth"]) -> typing.Union[MetaOapg.properties.azimuth, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["calcoverride"]) -> typing.Union[MetaOapg.properties.calcoverride, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["correction"]) -> typing.Union[MetaOapg.properties.correction, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dlsoverride"]) -> typing.Union[MetaOapg.properties.dlsoverride, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dontuse"]) -> typing.Union[MetaOapg.properties.dontuse, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dontusereason"]) -> typing.Union[MetaOapg.properties.dontusereason, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttm"]) -> typing.Union[MetaOapg.properties.dttm, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ewoverride"]) -> typing.Union[MetaOapg.properties.ewoverride, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gravaxialraw"]) -> typing.Union[MetaOapg.properties.gravaxialraw, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gravtran1raw"]) -> typing.Union[MetaOapg.properties.gravtran1raw, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gravtran2raw"]) -> typing.Union[MetaOapg.properties.gravtran2raw, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecparent"]) -> typing.Union[MetaOapg.properties.idrecparent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["inclination"]) -> typing.Union[MetaOapg.properties.inclination, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["magaxialraw"]) -> typing.Union[MetaOapg.properties.magaxialraw, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["magtran1raw"]) -> typing.Union[MetaOapg.properties.magtran1raw, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["magtran2raw"]) -> typing.Union[MetaOapg.properties.magtran2raw, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["md"]) -> typing.Union[MetaOapg.properties.md, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["model"]) -> typing.Union[MetaOapg.properties.model, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["note"]) -> typing.Union[MetaOapg.properties.note, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nsoverride"]) -> typing.Union[MetaOapg.properties.nsoverride, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["source"]) -> typing.Union[MetaOapg.properties.source, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["surveyedby"]) -> typing.Union[MetaOapg.properties.surveyedby, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["surveymethod"]) -> typing.Union[MetaOapg.properties.surveymethod, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tfograv"]) -> typing.Union[MetaOapg.properties.tfograv, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tfomag"]) -> typing.Union[MetaOapg.properties.tfomag, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tooltyp1"]) -> typing.Union[MetaOapg.properties.tooltyp1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tooltyp2"]) -> typing.Union[MetaOapg.properties.tooltyp2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tvdoverride"]) -> typing.Union[MetaOapg.properties.tvdoverride, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vsoverride"]) -> typing.Union[MetaOapg.properties.vsoverride, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "annotation", "azimuth", "calcoverride", "correction", "dlsoverride", "dontuse", "dontusereason", "dttm", "ewoverride", "gravaxialraw", "gravtran1raw", "gravtran2raw", "idrecparent", "inclination", "magaxialraw", "magtran1raw", "magtran2raw", "md", "model", "note", "nsoverride", "source", "surveyedby", "surveymethod", "tfograv", "tfomag", "tooltyp1", "tooltyp2", "tvdoverride", "vsoverride", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idrec: typing.Union[MetaOapg.properties.idrec, str, ],
        idwell: typing.Union[MetaOapg.properties.idwell, str, ],
        annotation: typing.Union[MetaOapg.properties.annotation, str, schemas.Unset] = schemas.unset,
        azimuth: typing.Union[MetaOapg.properties.azimuth, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        calcoverride: typing.Union[MetaOapg.properties.calcoverride, bool, schemas.Unset] = schemas.unset,
        correction: typing.Union[MetaOapg.properties.correction, str, schemas.Unset] = schemas.unset,
        dlsoverride: typing.Union[MetaOapg.properties.dlsoverride, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        dontuse: typing.Union[MetaOapg.properties.dontuse, bool, schemas.Unset] = schemas.unset,
        dontusereason: typing.Union[MetaOapg.properties.dontusereason, str, schemas.Unset] = schemas.unset,
        dttm: typing.Union[MetaOapg.properties.dttm, str, datetime, schemas.Unset] = schemas.unset,
        ewoverride: typing.Union[MetaOapg.properties.ewoverride, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        gravaxialraw: typing.Union[MetaOapg.properties.gravaxialraw, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        gravtran1raw: typing.Union[MetaOapg.properties.gravtran1raw, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        gravtran2raw: typing.Union[MetaOapg.properties.gravtran2raw, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        idrecparent: typing.Union[MetaOapg.properties.idrecparent, str, schemas.Unset] = schemas.unset,
        inclination: typing.Union[MetaOapg.properties.inclination, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        magaxialraw: typing.Union[MetaOapg.properties.magaxialraw, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        magtran1raw: typing.Union[MetaOapg.properties.magtran1raw, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        magtran2raw: typing.Union[MetaOapg.properties.magtran2raw, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        md: typing.Union[MetaOapg.properties.md, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        model: typing.Union[MetaOapg.properties.model, str, schemas.Unset] = schemas.unset,
        note: typing.Union[MetaOapg.properties.note, str, schemas.Unset] = schemas.unset,
        nsoverride: typing.Union[MetaOapg.properties.nsoverride, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        source: typing.Union[MetaOapg.properties.source, str, schemas.Unset] = schemas.unset,
        surveyedby: typing.Union[MetaOapg.properties.surveyedby, str, schemas.Unset] = schemas.unset,
        surveymethod: typing.Union[MetaOapg.properties.surveymethod, str, schemas.Unset] = schemas.unset,
        tfograv: typing.Union[MetaOapg.properties.tfograv, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        tfomag: typing.Union[MetaOapg.properties.tfomag, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        tooltyp1: typing.Union[MetaOapg.properties.tooltyp1, str, schemas.Unset] = schemas.unset,
        tooltyp2: typing.Union[MetaOapg.properties.tooltyp2, str, schemas.Unset] = schemas.unset,
        tvdoverride: typing.Union[MetaOapg.properties.tvdoverride, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        vsoverride: typing.Union[MetaOapg.properties.vsoverride, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SurveyDataData':
        return super().__new__(
            cls,
            *args,
            idrec=idrec,
            idwell=idwell,
            annotation=annotation,
            azimuth=azimuth,
            calcoverride=calcoverride,
            correction=correction,
            dlsoverride=dlsoverride,
            dontuse=dontuse,
            dontusereason=dontusereason,
            dttm=dttm,
            ewoverride=ewoverride,
            gravaxialraw=gravaxialraw,
            gravtran1raw=gravtran1raw,
            gravtran2raw=gravtran2raw,
            idrecparent=idrecparent,
            inclination=inclination,
            magaxialraw=magaxialraw,
            magtran1raw=magtran1raw,
            magtran2raw=magtran2raw,
            md=md,
            model=model,
            note=note,
            nsoverride=nsoverride,
            source=source,
            surveyedby=surveyedby,
            surveymethod=surveymethod,
            tfograv=tfograv,
            tfomag=tfomag,
            tooltyp1=tooltyp1,
            tooltyp2=tooltyp2,
            tvdoverride=tvdoverride,
            vsoverride=vsoverride,
            _configuration=_configuration,
            **kwargs,
        )
