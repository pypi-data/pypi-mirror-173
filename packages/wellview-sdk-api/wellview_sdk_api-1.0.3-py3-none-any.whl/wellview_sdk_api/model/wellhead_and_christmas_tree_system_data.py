# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class WellheadAndChristmasTreeSystemData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idrec",
            "idwell",
        }
        
        class properties:
            idrec = schemas.StrSchema
            idwell = schemas.StrSchema
            com = schemas.StrSchema
            depthbtm = schemas.NumberSchema
            dttmend = schemas.DateTimeSchema
            dttmoverhaul = schemas.DateTimeSchema
            dttmstart = schemas.DateTimeSchema
            idrecjob = schemas.StrSchema
            make = schemas.StrSchema
            maxpres = schemas.NumberSchema
            productspeclevel = schemas.StrSchema
            profile = schemas.StrSchema
            proposed = schemas.BoolSchema
            removereason = schemas.StrSchema
            service = schemas.StrSchema
            sz = schemas.NumberSchema
            typ = schemas.StrSchema
            workpres = schemas.NumberSchema
            __annotations__ = {
                "idrec": idrec,
                "idwell": idwell,
                "com": com,
                "depthbtm": depthbtm,
                "dttmend": dttmend,
                "dttmoverhaul": dttmoverhaul,
                "dttmstart": dttmstart,
                "idrecjob": idrecjob,
                "make": make,
                "maxpres": maxpres,
                "productspeclevel": productspeclevel,
                "profile": profile,
                "proposed": proposed,
                "removereason": removereason,
                "service": service,
                "sz": sz,
                "typ": typ,
                "workpres": workpres,
            }
    
    idrec: MetaOapg.properties.idrec
    idwell: MetaOapg.properties.idwell
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["com"]) -> MetaOapg.properties.com: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["depthbtm"]) -> MetaOapg.properties.depthbtm: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmend"]) -> MetaOapg.properties.dttmend: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmoverhaul"]) -> MetaOapg.properties.dttmoverhaul: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmstart"]) -> MetaOapg.properties.dttmstart: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecjob"]) -> MetaOapg.properties.idrecjob: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["make"]) -> MetaOapg.properties.make: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maxpres"]) -> MetaOapg.properties.maxpres: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["productspeclevel"]) -> MetaOapg.properties.productspeclevel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["profile"]) -> MetaOapg.properties.profile: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["proposed"]) -> MetaOapg.properties.proposed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["removereason"]) -> MetaOapg.properties.removereason: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["service"]) -> MetaOapg.properties.service: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sz"]) -> MetaOapg.properties.sz: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["typ"]) -> MetaOapg.properties.typ: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workpres"]) -> MetaOapg.properties.workpres: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "com", "depthbtm", "dttmend", "dttmoverhaul", "dttmstart", "idrecjob", "make", "maxpres", "productspeclevel", "profile", "proposed", "removereason", "service", "sz", "typ", "workpres", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["com"]) -> typing.Union[MetaOapg.properties.com, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["depthbtm"]) -> typing.Union[MetaOapg.properties.depthbtm, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmend"]) -> typing.Union[MetaOapg.properties.dttmend, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmoverhaul"]) -> typing.Union[MetaOapg.properties.dttmoverhaul, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmstart"]) -> typing.Union[MetaOapg.properties.dttmstart, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecjob"]) -> typing.Union[MetaOapg.properties.idrecjob, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["make"]) -> typing.Union[MetaOapg.properties.make, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maxpres"]) -> typing.Union[MetaOapg.properties.maxpres, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["productspeclevel"]) -> typing.Union[MetaOapg.properties.productspeclevel, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["profile"]) -> typing.Union[MetaOapg.properties.profile, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["proposed"]) -> typing.Union[MetaOapg.properties.proposed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["removereason"]) -> typing.Union[MetaOapg.properties.removereason, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["service"]) -> typing.Union[MetaOapg.properties.service, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sz"]) -> typing.Union[MetaOapg.properties.sz, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["typ"]) -> typing.Union[MetaOapg.properties.typ, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workpres"]) -> typing.Union[MetaOapg.properties.workpres, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "com", "depthbtm", "dttmend", "dttmoverhaul", "dttmstart", "idrecjob", "make", "maxpres", "productspeclevel", "profile", "proposed", "removereason", "service", "sz", "typ", "workpres", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idrec: typing.Union[MetaOapg.properties.idrec, str, ],
        idwell: typing.Union[MetaOapg.properties.idwell, str, ],
        com: typing.Union[MetaOapg.properties.com, str, schemas.Unset] = schemas.unset,
        depthbtm: typing.Union[MetaOapg.properties.depthbtm, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        dttmend: typing.Union[MetaOapg.properties.dttmend, str, datetime, schemas.Unset] = schemas.unset,
        dttmoverhaul: typing.Union[MetaOapg.properties.dttmoverhaul, str, datetime, schemas.Unset] = schemas.unset,
        dttmstart: typing.Union[MetaOapg.properties.dttmstart, str, datetime, schemas.Unset] = schemas.unset,
        idrecjob: typing.Union[MetaOapg.properties.idrecjob, str, schemas.Unset] = schemas.unset,
        make: typing.Union[MetaOapg.properties.make, str, schemas.Unset] = schemas.unset,
        maxpres: typing.Union[MetaOapg.properties.maxpres, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        productspeclevel: typing.Union[MetaOapg.properties.productspeclevel, str, schemas.Unset] = schemas.unset,
        profile: typing.Union[MetaOapg.properties.profile, str, schemas.Unset] = schemas.unset,
        proposed: typing.Union[MetaOapg.properties.proposed, bool, schemas.Unset] = schemas.unset,
        removereason: typing.Union[MetaOapg.properties.removereason, str, schemas.Unset] = schemas.unset,
        service: typing.Union[MetaOapg.properties.service, str, schemas.Unset] = schemas.unset,
        sz: typing.Union[MetaOapg.properties.sz, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        typ: typing.Union[MetaOapg.properties.typ, str, schemas.Unset] = schemas.unset,
        workpres: typing.Union[MetaOapg.properties.workpres, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'WellheadAndChristmasTreeSystemData':
        return super().__new__(
            cls,
            *args,
            idrec=idrec,
            idwell=idwell,
            com=com,
            depthbtm=depthbtm,
            dttmend=dttmend,
            dttmoverhaul=dttmoverhaul,
            dttmstart=dttmstart,
            idrecjob=idrecjob,
            make=make,
            maxpres=maxpres,
            productspeclevel=productspeclevel,
            profile=profile,
            proposed=proposed,
            removereason=removereason,
            service=service,
            sz=sz,
            typ=typ,
            workpres=workpres,
            _configuration=_configuration,
            **kwargs,
        )
