# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class InjectivityTestData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idrec",
            "idwell",
        }
        
        class properties:
            idrec = schemas.StrSchema
            idwell = schemas.StrSchema
            com = schemas.StrSchema
            conccuttings = schemas.NumberSchema
            datasource = schemas.StrSchema
            densitygas = schemas.NumberSchema
            displayflag = schemas.BoolSchema
            dttmstart = schemas.DateTimeSchema
            duration = schemas.NumberSchema
            fractionoil = schemas.NumberSchema
            idrecjob = schemas.StrSchema
            idreczonecompletion = schemas.StrSchema
            prescas = schemas.NumberSchema
            presinject = schemas.NumberSchema
            purpose = schemas.StrSchema
            qualitysteam = schemas.NumberSchema
            rateinjectgas = schemas.NumberSchema
            rateinjectliquid = schemas.NumberSchema
            salinity = schemas.NumberSchema
            tempinject = schemas.NumberSchema
            testedby = schemas.StrSchema
            typproduct = schemas.StrSchema
            __annotations__ = {
                "idrec": idrec,
                "idwell": idwell,
                "com": com,
                "conccuttings": conccuttings,
                "datasource": datasource,
                "densitygas": densitygas,
                "displayflag": displayflag,
                "dttmstart": dttmstart,
                "duration": duration,
                "fractionoil": fractionoil,
                "idrecjob": idrecjob,
                "idreczonecompletion": idreczonecompletion,
                "prescas": prescas,
                "presinject": presinject,
                "purpose": purpose,
                "qualitysteam": qualitysteam,
                "rateinjectgas": rateinjectgas,
                "rateinjectliquid": rateinjectliquid,
                "salinity": salinity,
                "tempinject": tempinject,
                "testedby": testedby,
                "typproduct": typproduct,
            }
    
    idrec: MetaOapg.properties.idrec
    idwell: MetaOapg.properties.idwell
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["com"]) -> MetaOapg.properties.com: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["conccuttings"]) -> MetaOapg.properties.conccuttings: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["datasource"]) -> MetaOapg.properties.datasource: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["densitygas"]) -> MetaOapg.properties.densitygas: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["displayflag"]) -> MetaOapg.properties.displayflag: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmstart"]) -> MetaOapg.properties.dttmstart: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["duration"]) -> MetaOapg.properties.duration: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fractionoil"]) -> MetaOapg.properties.fractionoil: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecjob"]) -> MetaOapg.properties.idrecjob: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idreczonecompletion"]) -> MetaOapg.properties.idreczonecompletion: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["prescas"]) -> MetaOapg.properties.prescas: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["presinject"]) -> MetaOapg.properties.presinject: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["purpose"]) -> MetaOapg.properties.purpose: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["qualitysteam"]) -> MetaOapg.properties.qualitysteam: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rateinjectgas"]) -> MetaOapg.properties.rateinjectgas: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rateinjectliquid"]) -> MetaOapg.properties.rateinjectliquid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["salinity"]) -> MetaOapg.properties.salinity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tempinject"]) -> MetaOapg.properties.tempinject: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["testedby"]) -> MetaOapg.properties.testedby: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["typproduct"]) -> MetaOapg.properties.typproduct: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "com", "conccuttings", "datasource", "densitygas", "displayflag", "dttmstart", "duration", "fractionoil", "idrecjob", "idreczonecompletion", "prescas", "presinject", "purpose", "qualitysteam", "rateinjectgas", "rateinjectliquid", "salinity", "tempinject", "testedby", "typproduct", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["com"]) -> typing.Union[MetaOapg.properties.com, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["conccuttings"]) -> typing.Union[MetaOapg.properties.conccuttings, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["datasource"]) -> typing.Union[MetaOapg.properties.datasource, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["densitygas"]) -> typing.Union[MetaOapg.properties.densitygas, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["displayflag"]) -> typing.Union[MetaOapg.properties.displayflag, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmstart"]) -> typing.Union[MetaOapg.properties.dttmstart, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["duration"]) -> typing.Union[MetaOapg.properties.duration, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fractionoil"]) -> typing.Union[MetaOapg.properties.fractionoil, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecjob"]) -> typing.Union[MetaOapg.properties.idrecjob, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idreczonecompletion"]) -> typing.Union[MetaOapg.properties.idreczonecompletion, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["prescas"]) -> typing.Union[MetaOapg.properties.prescas, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["presinject"]) -> typing.Union[MetaOapg.properties.presinject, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["purpose"]) -> typing.Union[MetaOapg.properties.purpose, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["qualitysteam"]) -> typing.Union[MetaOapg.properties.qualitysteam, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rateinjectgas"]) -> typing.Union[MetaOapg.properties.rateinjectgas, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rateinjectliquid"]) -> typing.Union[MetaOapg.properties.rateinjectliquid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["salinity"]) -> typing.Union[MetaOapg.properties.salinity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tempinject"]) -> typing.Union[MetaOapg.properties.tempinject, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["testedby"]) -> typing.Union[MetaOapg.properties.testedby, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["typproduct"]) -> typing.Union[MetaOapg.properties.typproduct, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "com", "conccuttings", "datasource", "densitygas", "displayflag", "dttmstart", "duration", "fractionoil", "idrecjob", "idreczonecompletion", "prescas", "presinject", "purpose", "qualitysteam", "rateinjectgas", "rateinjectliquid", "salinity", "tempinject", "testedby", "typproduct", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idrec: typing.Union[MetaOapg.properties.idrec, str, ],
        idwell: typing.Union[MetaOapg.properties.idwell, str, ],
        com: typing.Union[MetaOapg.properties.com, str, schemas.Unset] = schemas.unset,
        conccuttings: typing.Union[MetaOapg.properties.conccuttings, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        datasource: typing.Union[MetaOapg.properties.datasource, str, schemas.Unset] = schemas.unset,
        densitygas: typing.Union[MetaOapg.properties.densitygas, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        displayflag: typing.Union[MetaOapg.properties.displayflag, bool, schemas.Unset] = schemas.unset,
        dttmstart: typing.Union[MetaOapg.properties.dttmstart, str, datetime, schemas.Unset] = schemas.unset,
        duration: typing.Union[MetaOapg.properties.duration, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        fractionoil: typing.Union[MetaOapg.properties.fractionoil, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        idrecjob: typing.Union[MetaOapg.properties.idrecjob, str, schemas.Unset] = schemas.unset,
        idreczonecompletion: typing.Union[MetaOapg.properties.idreczonecompletion, str, schemas.Unset] = schemas.unset,
        prescas: typing.Union[MetaOapg.properties.prescas, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        presinject: typing.Union[MetaOapg.properties.presinject, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        purpose: typing.Union[MetaOapg.properties.purpose, str, schemas.Unset] = schemas.unset,
        qualitysteam: typing.Union[MetaOapg.properties.qualitysteam, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        rateinjectgas: typing.Union[MetaOapg.properties.rateinjectgas, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        rateinjectliquid: typing.Union[MetaOapg.properties.rateinjectliquid, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        salinity: typing.Union[MetaOapg.properties.salinity, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        tempinject: typing.Union[MetaOapg.properties.tempinject, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        testedby: typing.Union[MetaOapg.properties.testedby, str, schemas.Unset] = schemas.unset,
        typproduct: typing.Union[MetaOapg.properties.typproduct, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'InjectivityTestData':
        return super().__new__(
            cls,
            *args,
            idrec=idrec,
            idwell=idwell,
            com=com,
            conccuttings=conccuttings,
            datasource=datasource,
            densitygas=densitygas,
            displayflag=displayflag,
            dttmstart=dttmstart,
            duration=duration,
            fractionoil=fractionoil,
            idrecjob=idrecjob,
            idreczonecompletion=idreczonecompletion,
            prescas=prescas,
            presinject=presinject,
            purpose=purpose,
            qualitysteam=qualitysteam,
            rateinjectgas=rateinjectgas,
            rateinjectliquid=rateinjectliquid,
            salinity=salinity,
            tempinject=tempinject,
            testedby=testedby,
            typproduct=typproduct,
            _configuration=_configuration,
            **kwargs,
        )
