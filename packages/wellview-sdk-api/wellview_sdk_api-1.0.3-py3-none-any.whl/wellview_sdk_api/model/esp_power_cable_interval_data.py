# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class ESPPowerCableIntervalData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idrec",
            "idwell",
        }
        
        class properties:
            idrec = schemas.StrSchema
            idwell = schemas.StrSchema
            conditionpull = schemas.StrSchema
            conditionrun = schemas.StrSchema
            cost = schemas.NumberSchema
            costunitlabel = schemas.StrSchema
            hoursstart = schemas.NumberSchema
            idrecparent = schemas.StrSchema
            pwrcablearmor = schemas.StrSchema
            pwrcablega = schemas.NumberSchema
            pwrcableinsul = schemas.StrSchema
            pwrcablelength = schemas.NumberSchema
            pwrcablemake = schemas.StrSchema
            pwrcablemodel = schemas.StrSchema
            pwrcablenosplice = schemas.IntSchema
            pwrcableprofile = schemas.StrSchema
            pwrcableshape = schemas.StrSchema
            pwrcablesheath = schemas.StrSchema
            pwrcablesn = schemas.StrSchema
            pwrcabletemprating = schemas.NumberSchema
            pwrcabletensilemax = schemas.NumberSchema
            pwrcabletyp = schemas.StrSchema
            pwrcablevolt = schemas.NumberSchema
            pwrcablewtperlength = schemas.NumberSchema
            __annotations__ = {
                "idrec": idrec,
                "idwell": idwell,
                "conditionpull": conditionpull,
                "conditionrun": conditionrun,
                "cost": cost,
                "costunitlabel": costunitlabel,
                "hoursstart": hoursstart,
                "idrecparent": idrecparent,
                "pwrcablearmor": pwrcablearmor,
                "pwrcablega": pwrcablega,
                "pwrcableinsul": pwrcableinsul,
                "pwrcablelength": pwrcablelength,
                "pwrcablemake": pwrcablemake,
                "pwrcablemodel": pwrcablemodel,
                "pwrcablenosplice": pwrcablenosplice,
                "pwrcableprofile": pwrcableprofile,
                "pwrcableshape": pwrcableshape,
                "pwrcablesheath": pwrcablesheath,
                "pwrcablesn": pwrcablesn,
                "pwrcabletemprating": pwrcabletemprating,
                "pwrcabletensilemax": pwrcabletensilemax,
                "pwrcabletyp": pwrcabletyp,
                "pwrcablevolt": pwrcablevolt,
                "pwrcablewtperlength": pwrcablewtperlength,
            }
    
    idrec: MetaOapg.properties.idrec
    idwell: MetaOapg.properties.idwell
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["conditionpull"]) -> MetaOapg.properties.conditionpull: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["conditionrun"]) -> MetaOapg.properties.conditionrun: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cost"]) -> MetaOapg.properties.cost: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["costunitlabel"]) -> MetaOapg.properties.costunitlabel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hoursstart"]) -> MetaOapg.properties.hoursstart: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecparent"]) -> MetaOapg.properties.idrecparent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pwrcablearmor"]) -> MetaOapg.properties.pwrcablearmor: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pwrcablega"]) -> MetaOapg.properties.pwrcablega: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pwrcableinsul"]) -> MetaOapg.properties.pwrcableinsul: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pwrcablelength"]) -> MetaOapg.properties.pwrcablelength: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pwrcablemake"]) -> MetaOapg.properties.pwrcablemake: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pwrcablemodel"]) -> MetaOapg.properties.pwrcablemodel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pwrcablenosplice"]) -> MetaOapg.properties.pwrcablenosplice: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pwrcableprofile"]) -> MetaOapg.properties.pwrcableprofile: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pwrcableshape"]) -> MetaOapg.properties.pwrcableshape: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pwrcablesheath"]) -> MetaOapg.properties.pwrcablesheath: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pwrcablesn"]) -> MetaOapg.properties.pwrcablesn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pwrcabletemprating"]) -> MetaOapg.properties.pwrcabletemprating: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pwrcabletensilemax"]) -> MetaOapg.properties.pwrcabletensilemax: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pwrcabletyp"]) -> MetaOapg.properties.pwrcabletyp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pwrcablevolt"]) -> MetaOapg.properties.pwrcablevolt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pwrcablewtperlength"]) -> MetaOapg.properties.pwrcablewtperlength: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "conditionpull", "conditionrun", "cost", "costunitlabel", "hoursstart", "idrecparent", "pwrcablearmor", "pwrcablega", "pwrcableinsul", "pwrcablelength", "pwrcablemake", "pwrcablemodel", "pwrcablenosplice", "pwrcableprofile", "pwrcableshape", "pwrcablesheath", "pwrcablesn", "pwrcabletemprating", "pwrcabletensilemax", "pwrcabletyp", "pwrcablevolt", "pwrcablewtperlength", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["conditionpull"]) -> typing.Union[MetaOapg.properties.conditionpull, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["conditionrun"]) -> typing.Union[MetaOapg.properties.conditionrun, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cost"]) -> typing.Union[MetaOapg.properties.cost, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["costunitlabel"]) -> typing.Union[MetaOapg.properties.costunitlabel, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hoursstart"]) -> typing.Union[MetaOapg.properties.hoursstart, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecparent"]) -> typing.Union[MetaOapg.properties.idrecparent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pwrcablearmor"]) -> typing.Union[MetaOapg.properties.pwrcablearmor, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pwrcablega"]) -> typing.Union[MetaOapg.properties.pwrcablega, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pwrcableinsul"]) -> typing.Union[MetaOapg.properties.pwrcableinsul, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pwrcablelength"]) -> typing.Union[MetaOapg.properties.pwrcablelength, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pwrcablemake"]) -> typing.Union[MetaOapg.properties.pwrcablemake, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pwrcablemodel"]) -> typing.Union[MetaOapg.properties.pwrcablemodel, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pwrcablenosplice"]) -> typing.Union[MetaOapg.properties.pwrcablenosplice, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pwrcableprofile"]) -> typing.Union[MetaOapg.properties.pwrcableprofile, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pwrcableshape"]) -> typing.Union[MetaOapg.properties.pwrcableshape, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pwrcablesheath"]) -> typing.Union[MetaOapg.properties.pwrcablesheath, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pwrcablesn"]) -> typing.Union[MetaOapg.properties.pwrcablesn, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pwrcabletemprating"]) -> typing.Union[MetaOapg.properties.pwrcabletemprating, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pwrcabletensilemax"]) -> typing.Union[MetaOapg.properties.pwrcabletensilemax, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pwrcabletyp"]) -> typing.Union[MetaOapg.properties.pwrcabletyp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pwrcablevolt"]) -> typing.Union[MetaOapg.properties.pwrcablevolt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pwrcablewtperlength"]) -> typing.Union[MetaOapg.properties.pwrcablewtperlength, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "conditionpull", "conditionrun", "cost", "costunitlabel", "hoursstart", "idrecparent", "pwrcablearmor", "pwrcablega", "pwrcableinsul", "pwrcablelength", "pwrcablemake", "pwrcablemodel", "pwrcablenosplice", "pwrcableprofile", "pwrcableshape", "pwrcablesheath", "pwrcablesn", "pwrcabletemprating", "pwrcabletensilemax", "pwrcabletyp", "pwrcablevolt", "pwrcablewtperlength", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idrec: typing.Union[MetaOapg.properties.idrec, str, ],
        idwell: typing.Union[MetaOapg.properties.idwell, str, ],
        conditionpull: typing.Union[MetaOapg.properties.conditionpull, str, schemas.Unset] = schemas.unset,
        conditionrun: typing.Union[MetaOapg.properties.conditionrun, str, schemas.Unset] = schemas.unset,
        cost: typing.Union[MetaOapg.properties.cost, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        costunitlabel: typing.Union[MetaOapg.properties.costunitlabel, str, schemas.Unset] = schemas.unset,
        hoursstart: typing.Union[MetaOapg.properties.hoursstart, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        idrecparent: typing.Union[MetaOapg.properties.idrecparent, str, schemas.Unset] = schemas.unset,
        pwrcablearmor: typing.Union[MetaOapg.properties.pwrcablearmor, str, schemas.Unset] = schemas.unset,
        pwrcablega: typing.Union[MetaOapg.properties.pwrcablega, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        pwrcableinsul: typing.Union[MetaOapg.properties.pwrcableinsul, str, schemas.Unset] = schemas.unset,
        pwrcablelength: typing.Union[MetaOapg.properties.pwrcablelength, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        pwrcablemake: typing.Union[MetaOapg.properties.pwrcablemake, str, schemas.Unset] = schemas.unset,
        pwrcablemodel: typing.Union[MetaOapg.properties.pwrcablemodel, str, schemas.Unset] = schemas.unset,
        pwrcablenosplice: typing.Union[MetaOapg.properties.pwrcablenosplice, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        pwrcableprofile: typing.Union[MetaOapg.properties.pwrcableprofile, str, schemas.Unset] = schemas.unset,
        pwrcableshape: typing.Union[MetaOapg.properties.pwrcableshape, str, schemas.Unset] = schemas.unset,
        pwrcablesheath: typing.Union[MetaOapg.properties.pwrcablesheath, str, schemas.Unset] = schemas.unset,
        pwrcablesn: typing.Union[MetaOapg.properties.pwrcablesn, str, schemas.Unset] = schemas.unset,
        pwrcabletemprating: typing.Union[MetaOapg.properties.pwrcabletemprating, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        pwrcabletensilemax: typing.Union[MetaOapg.properties.pwrcabletensilemax, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        pwrcabletyp: typing.Union[MetaOapg.properties.pwrcabletyp, str, schemas.Unset] = schemas.unset,
        pwrcablevolt: typing.Union[MetaOapg.properties.pwrcablevolt, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        pwrcablewtperlength: typing.Union[MetaOapg.properties.pwrcablewtperlength, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ESPPowerCableIntervalData':
        return super().__new__(
            cls,
            *args,
            idrec=idrec,
            idwell=idwell,
            conditionpull=conditionpull,
            conditionrun=conditionrun,
            cost=cost,
            costunitlabel=costunitlabel,
            hoursstart=hoursstart,
            idrecparent=idrecparent,
            pwrcablearmor=pwrcablearmor,
            pwrcablega=pwrcablega,
            pwrcableinsul=pwrcableinsul,
            pwrcablelength=pwrcablelength,
            pwrcablemake=pwrcablemake,
            pwrcablemodel=pwrcablemodel,
            pwrcablenosplice=pwrcablenosplice,
            pwrcableprofile=pwrcableprofile,
            pwrcableshape=pwrcableshape,
            pwrcablesheath=pwrcablesheath,
            pwrcablesn=pwrcablesn,
            pwrcabletemprating=pwrcabletemprating,
            pwrcabletensilemax=pwrcabletensilemax,
            pwrcabletyp=pwrcabletyp,
            pwrcablevolt=pwrcablevolt,
            pwrcablewtperlength=pwrcablewtperlength,
            _configuration=_configuration,
            **kwargs,
        )
