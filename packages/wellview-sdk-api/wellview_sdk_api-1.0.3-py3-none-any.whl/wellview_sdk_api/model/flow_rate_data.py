# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class FlowRateData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idrec",
            "idwell",
        }
        
        class properties:
            idrec = schemas.StrSchema
            idwell = schemas.StrSchema
            bsw = schemas.NumberSchema
            com = schemas.StrSchema
            densitygas = schemas.NumberSchema
            densityoil = schemas.NumberSchema
            dttm = schemas.DateTimeSchema
            h2s = schemas.NumberSchema
            idrecparent = schemas.StrSchema
            phwater = schemas.NumberSchema
            ratecond = schemas.NumberSchema
            rategas = schemas.NumberSchema
            rateoil = schemas.NumberSchema
            ratewater = schemas.NumberSchema
            salinitywater = schemas.NumberSchema
            sandcut = schemas.NumberSchema
            __annotations__ = {
                "idrec": idrec,
                "idwell": idwell,
                "bsw": bsw,
                "com": com,
                "densitygas": densitygas,
                "densityoil": densityoil,
                "dttm": dttm,
                "h2s": h2s,
                "idrecparent": idrecparent,
                "phwater": phwater,
                "ratecond": ratecond,
                "rategas": rategas,
                "rateoil": rateoil,
                "ratewater": ratewater,
                "salinitywater": salinitywater,
                "sandcut": sandcut,
            }
    
    idrec: MetaOapg.properties.idrec
    idwell: MetaOapg.properties.idwell
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bsw"]) -> MetaOapg.properties.bsw: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["com"]) -> MetaOapg.properties.com: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["densitygas"]) -> MetaOapg.properties.densitygas: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["densityoil"]) -> MetaOapg.properties.densityoil: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttm"]) -> MetaOapg.properties.dttm: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["h2s"]) -> MetaOapg.properties.h2s: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecparent"]) -> MetaOapg.properties.idrecparent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["phwater"]) -> MetaOapg.properties.phwater: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ratecond"]) -> MetaOapg.properties.ratecond: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rategas"]) -> MetaOapg.properties.rategas: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rateoil"]) -> MetaOapg.properties.rateoil: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ratewater"]) -> MetaOapg.properties.ratewater: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["salinitywater"]) -> MetaOapg.properties.salinitywater: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sandcut"]) -> MetaOapg.properties.sandcut: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "bsw", "com", "densitygas", "densityoil", "dttm", "h2s", "idrecparent", "phwater", "ratecond", "rategas", "rateoil", "ratewater", "salinitywater", "sandcut", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bsw"]) -> typing.Union[MetaOapg.properties.bsw, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["com"]) -> typing.Union[MetaOapg.properties.com, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["densitygas"]) -> typing.Union[MetaOapg.properties.densitygas, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["densityoil"]) -> typing.Union[MetaOapg.properties.densityoil, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttm"]) -> typing.Union[MetaOapg.properties.dttm, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["h2s"]) -> typing.Union[MetaOapg.properties.h2s, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecparent"]) -> typing.Union[MetaOapg.properties.idrecparent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["phwater"]) -> typing.Union[MetaOapg.properties.phwater, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ratecond"]) -> typing.Union[MetaOapg.properties.ratecond, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rategas"]) -> typing.Union[MetaOapg.properties.rategas, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rateoil"]) -> typing.Union[MetaOapg.properties.rateoil, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ratewater"]) -> typing.Union[MetaOapg.properties.ratewater, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["salinitywater"]) -> typing.Union[MetaOapg.properties.salinitywater, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sandcut"]) -> typing.Union[MetaOapg.properties.sandcut, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "bsw", "com", "densitygas", "densityoil", "dttm", "h2s", "idrecparent", "phwater", "ratecond", "rategas", "rateoil", "ratewater", "salinitywater", "sandcut", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idrec: typing.Union[MetaOapg.properties.idrec, str, ],
        idwell: typing.Union[MetaOapg.properties.idwell, str, ],
        bsw: typing.Union[MetaOapg.properties.bsw, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        com: typing.Union[MetaOapg.properties.com, str, schemas.Unset] = schemas.unset,
        densitygas: typing.Union[MetaOapg.properties.densitygas, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        densityoil: typing.Union[MetaOapg.properties.densityoil, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        dttm: typing.Union[MetaOapg.properties.dttm, str, datetime, schemas.Unset] = schemas.unset,
        h2s: typing.Union[MetaOapg.properties.h2s, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        idrecparent: typing.Union[MetaOapg.properties.idrecparent, str, schemas.Unset] = schemas.unset,
        phwater: typing.Union[MetaOapg.properties.phwater, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        ratecond: typing.Union[MetaOapg.properties.ratecond, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        rategas: typing.Union[MetaOapg.properties.rategas, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        rateoil: typing.Union[MetaOapg.properties.rateoil, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        ratewater: typing.Union[MetaOapg.properties.ratewater, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        salinitywater: typing.Union[MetaOapg.properties.salinitywater, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        sandcut: typing.Union[MetaOapg.properties.sandcut, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'FlowRateData':
        return super().__new__(
            cls,
            *args,
            idrec=idrec,
            idwell=idwell,
            bsw=bsw,
            com=com,
            densitygas=densitygas,
            densityoil=densityoil,
            dttm=dttm,
            h2s=h2s,
            idrecparent=idrecparent,
            phwater=phwater,
            ratecond=ratecond,
            rategas=rategas,
            rateoil=rateoil,
            ratewater=ratewater,
            salinitywater=salinitywater,
            sandcut=sandcut,
            _configuration=_configuration,
            **kwargs,
        )
