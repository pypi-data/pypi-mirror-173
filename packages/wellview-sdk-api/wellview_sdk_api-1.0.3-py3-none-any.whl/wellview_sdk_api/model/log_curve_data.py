# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class LogCurveData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idrec",
            "idwell",
        }
        
        class properties:
            idrec = schemas.StrSchema
            idwell = schemas.StrSchema
            apicode = schemas.StrSchema
            curvedata = schemas.BinarySchema
            depthbtm = schemas.NumberSchema
            depthbtmdisplay = schemas.NumberSchema
            depthtop = schemas.NumberSchema
            depthtopdisplay = schemas.NumberSchema
            des = schemas.StrSchema
            displayflag = schemas.BoolSchema
            excludefromexport = schemas.BoolSchema
            idrecparent = schemas.StrSchema
            mnemonic = schemas.StrSchema
            unitlabel = schemas.StrSchema
            __annotations__ = {
                "idrec": idrec,
                "idwell": idwell,
                "apicode": apicode,
                "curvedata": curvedata,
                "depthbtm": depthbtm,
                "depthbtmdisplay": depthbtmdisplay,
                "depthtop": depthtop,
                "depthtopdisplay": depthtopdisplay,
                "des": des,
                "displayflag": displayflag,
                "excludefromexport": excludefromexport,
                "idrecparent": idrecparent,
                "mnemonic": mnemonic,
                "unitlabel": unitlabel,
            }
    
    idrec: MetaOapg.properties.idrec
    idwell: MetaOapg.properties.idwell
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["apicode"]) -> MetaOapg.properties.apicode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["curvedata"]) -> MetaOapg.properties.curvedata: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["depthbtm"]) -> MetaOapg.properties.depthbtm: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["depthbtmdisplay"]) -> MetaOapg.properties.depthbtmdisplay: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["depthtop"]) -> MetaOapg.properties.depthtop: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["depthtopdisplay"]) -> MetaOapg.properties.depthtopdisplay: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["des"]) -> MetaOapg.properties.des: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["displayflag"]) -> MetaOapg.properties.displayflag: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["excludefromexport"]) -> MetaOapg.properties.excludefromexport: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecparent"]) -> MetaOapg.properties.idrecparent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mnemonic"]) -> MetaOapg.properties.mnemonic: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["unitlabel"]) -> MetaOapg.properties.unitlabel: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "apicode", "curvedata", "depthbtm", "depthbtmdisplay", "depthtop", "depthtopdisplay", "des", "displayflag", "excludefromexport", "idrecparent", "mnemonic", "unitlabel", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["apicode"]) -> typing.Union[MetaOapg.properties.apicode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["curvedata"]) -> typing.Union[MetaOapg.properties.curvedata, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["depthbtm"]) -> typing.Union[MetaOapg.properties.depthbtm, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["depthbtmdisplay"]) -> typing.Union[MetaOapg.properties.depthbtmdisplay, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["depthtop"]) -> typing.Union[MetaOapg.properties.depthtop, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["depthtopdisplay"]) -> typing.Union[MetaOapg.properties.depthtopdisplay, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["des"]) -> typing.Union[MetaOapg.properties.des, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["displayflag"]) -> typing.Union[MetaOapg.properties.displayflag, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["excludefromexport"]) -> typing.Union[MetaOapg.properties.excludefromexport, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecparent"]) -> typing.Union[MetaOapg.properties.idrecparent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mnemonic"]) -> typing.Union[MetaOapg.properties.mnemonic, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["unitlabel"]) -> typing.Union[MetaOapg.properties.unitlabel, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "apicode", "curvedata", "depthbtm", "depthbtmdisplay", "depthtop", "depthtopdisplay", "des", "displayflag", "excludefromexport", "idrecparent", "mnemonic", "unitlabel", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idrec: typing.Union[MetaOapg.properties.idrec, str, ],
        idwell: typing.Union[MetaOapg.properties.idwell, str, ],
        apicode: typing.Union[MetaOapg.properties.apicode, str, schemas.Unset] = schemas.unset,
        curvedata: typing.Union[MetaOapg.properties.curvedata, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        depthbtm: typing.Union[MetaOapg.properties.depthbtm, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        depthbtmdisplay: typing.Union[MetaOapg.properties.depthbtmdisplay, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        depthtop: typing.Union[MetaOapg.properties.depthtop, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        depthtopdisplay: typing.Union[MetaOapg.properties.depthtopdisplay, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        des: typing.Union[MetaOapg.properties.des, str, schemas.Unset] = schemas.unset,
        displayflag: typing.Union[MetaOapg.properties.displayflag, bool, schemas.Unset] = schemas.unset,
        excludefromexport: typing.Union[MetaOapg.properties.excludefromexport, bool, schemas.Unset] = schemas.unset,
        idrecparent: typing.Union[MetaOapg.properties.idrecparent, str, schemas.Unset] = schemas.unset,
        mnemonic: typing.Union[MetaOapg.properties.mnemonic, str, schemas.Unset] = schemas.unset,
        unitlabel: typing.Union[MetaOapg.properties.unitlabel, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'LogCurveData':
        return super().__new__(
            cls,
            *args,
            idrec=idrec,
            idwell=idwell,
            apicode=apicode,
            curvedata=curvedata,
            depthbtm=depthbtm,
            depthbtmdisplay=depthbtmdisplay,
            depthtop=depthtop,
            depthtopdisplay=depthtopdisplay,
            des=des,
            displayflag=displayflag,
            excludefromexport=excludefromexport,
            idrecparent=idrecparent,
            mnemonic=mnemonic,
            unitlabel=unitlabel,
            _configuration=_configuration,
            **kwargs,
        )
