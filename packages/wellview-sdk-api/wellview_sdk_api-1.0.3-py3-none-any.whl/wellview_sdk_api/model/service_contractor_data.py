# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class ServiceContractorData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idrec",
            "idwell",
        }
        
        class properties:
            idrec = schemas.StrSchema
            idwell = schemas.StrSchema
            approvedby = schemas.StrSchema
            contractref = schemas.StrSchema
            des = schemas.StrSchema
            dttmapproved = schemas.DateTimeSchema
            dttmendcontract = schemas.DateTimeSchema
            dttmeval = schemas.DateTimeSchema
            dttmstartcontract = schemas.DateTimeSchema
            evalperformedby = schemas.StrSchema
            evalstatus = schemas.StrSchema
            idrecparent = schemas.StrSchema
            operatorcom = schemas.StrSchema
            opscondition = schemas.StrSchema
            servicecompany = schemas.StrSchema
            servicecompanycom = schemas.StrSchema
            servicecompanyparent = schemas.StrSchema
            servicecontracttyp = schemas.StrSchema
            servicetyp = schemas.StrSchema
            __annotations__ = {
                "idrec": idrec,
                "idwell": idwell,
                "approvedby": approvedby,
                "contractref": contractref,
                "des": des,
                "dttmapproved": dttmapproved,
                "dttmendcontract": dttmendcontract,
                "dttmeval": dttmeval,
                "dttmstartcontract": dttmstartcontract,
                "evalperformedby": evalperformedby,
                "evalstatus": evalstatus,
                "idrecparent": idrecparent,
                "operatorcom": operatorcom,
                "opscondition": opscondition,
                "servicecompany": servicecompany,
                "servicecompanycom": servicecompanycom,
                "servicecompanyparent": servicecompanyparent,
                "servicecontracttyp": servicecontracttyp,
                "servicetyp": servicetyp,
            }
    
    idrec: MetaOapg.properties.idrec
    idwell: MetaOapg.properties.idwell
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["approvedby"]) -> MetaOapg.properties.approvedby: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contractref"]) -> MetaOapg.properties.contractref: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["des"]) -> MetaOapg.properties.des: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmapproved"]) -> MetaOapg.properties.dttmapproved: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmendcontract"]) -> MetaOapg.properties.dttmendcontract: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmeval"]) -> MetaOapg.properties.dttmeval: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmstartcontract"]) -> MetaOapg.properties.dttmstartcontract: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["evalperformedby"]) -> MetaOapg.properties.evalperformedby: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["evalstatus"]) -> MetaOapg.properties.evalstatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecparent"]) -> MetaOapg.properties.idrecparent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["operatorcom"]) -> MetaOapg.properties.operatorcom: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["opscondition"]) -> MetaOapg.properties.opscondition: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["servicecompany"]) -> MetaOapg.properties.servicecompany: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["servicecompanycom"]) -> MetaOapg.properties.servicecompanycom: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["servicecompanyparent"]) -> MetaOapg.properties.servicecompanyparent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["servicecontracttyp"]) -> MetaOapg.properties.servicecontracttyp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["servicetyp"]) -> MetaOapg.properties.servicetyp: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "approvedby", "contractref", "des", "dttmapproved", "dttmendcontract", "dttmeval", "dttmstartcontract", "evalperformedby", "evalstatus", "idrecparent", "operatorcom", "opscondition", "servicecompany", "servicecompanycom", "servicecompanyparent", "servicecontracttyp", "servicetyp", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["approvedby"]) -> typing.Union[MetaOapg.properties.approvedby, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contractref"]) -> typing.Union[MetaOapg.properties.contractref, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["des"]) -> typing.Union[MetaOapg.properties.des, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmapproved"]) -> typing.Union[MetaOapg.properties.dttmapproved, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmendcontract"]) -> typing.Union[MetaOapg.properties.dttmendcontract, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmeval"]) -> typing.Union[MetaOapg.properties.dttmeval, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmstartcontract"]) -> typing.Union[MetaOapg.properties.dttmstartcontract, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["evalperformedby"]) -> typing.Union[MetaOapg.properties.evalperformedby, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["evalstatus"]) -> typing.Union[MetaOapg.properties.evalstatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecparent"]) -> typing.Union[MetaOapg.properties.idrecparent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["operatorcom"]) -> typing.Union[MetaOapg.properties.operatorcom, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["opscondition"]) -> typing.Union[MetaOapg.properties.opscondition, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["servicecompany"]) -> typing.Union[MetaOapg.properties.servicecompany, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["servicecompanycom"]) -> typing.Union[MetaOapg.properties.servicecompanycom, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["servicecompanyparent"]) -> typing.Union[MetaOapg.properties.servicecompanyparent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["servicecontracttyp"]) -> typing.Union[MetaOapg.properties.servicecontracttyp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["servicetyp"]) -> typing.Union[MetaOapg.properties.servicetyp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "approvedby", "contractref", "des", "dttmapproved", "dttmendcontract", "dttmeval", "dttmstartcontract", "evalperformedby", "evalstatus", "idrecparent", "operatorcom", "opscondition", "servicecompany", "servicecompanycom", "servicecompanyparent", "servicecontracttyp", "servicetyp", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idrec: typing.Union[MetaOapg.properties.idrec, str, ],
        idwell: typing.Union[MetaOapg.properties.idwell, str, ],
        approvedby: typing.Union[MetaOapg.properties.approvedby, str, schemas.Unset] = schemas.unset,
        contractref: typing.Union[MetaOapg.properties.contractref, str, schemas.Unset] = schemas.unset,
        des: typing.Union[MetaOapg.properties.des, str, schemas.Unset] = schemas.unset,
        dttmapproved: typing.Union[MetaOapg.properties.dttmapproved, str, datetime, schemas.Unset] = schemas.unset,
        dttmendcontract: typing.Union[MetaOapg.properties.dttmendcontract, str, datetime, schemas.Unset] = schemas.unset,
        dttmeval: typing.Union[MetaOapg.properties.dttmeval, str, datetime, schemas.Unset] = schemas.unset,
        dttmstartcontract: typing.Union[MetaOapg.properties.dttmstartcontract, str, datetime, schemas.Unset] = schemas.unset,
        evalperformedby: typing.Union[MetaOapg.properties.evalperformedby, str, schemas.Unset] = schemas.unset,
        evalstatus: typing.Union[MetaOapg.properties.evalstatus, str, schemas.Unset] = schemas.unset,
        idrecparent: typing.Union[MetaOapg.properties.idrecparent, str, schemas.Unset] = schemas.unset,
        operatorcom: typing.Union[MetaOapg.properties.operatorcom, str, schemas.Unset] = schemas.unset,
        opscondition: typing.Union[MetaOapg.properties.opscondition, str, schemas.Unset] = schemas.unset,
        servicecompany: typing.Union[MetaOapg.properties.servicecompany, str, schemas.Unset] = schemas.unset,
        servicecompanycom: typing.Union[MetaOapg.properties.servicecompanycom, str, schemas.Unset] = schemas.unset,
        servicecompanyparent: typing.Union[MetaOapg.properties.servicecompanyparent, str, schemas.Unset] = schemas.unset,
        servicecontracttyp: typing.Union[MetaOapg.properties.servicecontracttyp, str, schemas.Unset] = schemas.unset,
        servicetyp: typing.Union[MetaOapg.properties.servicetyp, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ServiceContractorData':
        return super().__new__(
            cls,
            *args,
            idrec=idrec,
            idwell=idwell,
            approvedby=approvedby,
            contractref=contractref,
            des=des,
            dttmapproved=dttmapproved,
            dttmendcontract=dttmendcontract,
            dttmeval=dttmeval,
            dttmstartcontract=dttmstartcontract,
            evalperformedby=evalperformedby,
            evalstatus=evalstatus,
            idrecparent=idrecparent,
            operatorcom=operatorcom,
            opscondition=opscondition,
            servicecompany=servicecompany,
            servicecompanycom=servicecompanycom,
            servicecompanyparent=servicecompanyparent,
            servicecontracttyp=servicecontracttyp,
            servicetyp=servicetyp,
            _configuration=_configuration,
            **kwargs,
        )
