# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class OneTimeCostData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idrec",
            "idwell",
        }
        
        class properties:
            idrec = schemas.StrSchema
            idwell = schemas.StrSchema
            code1 = schemas.StrSchema
            code2 = schemas.StrSchema
            code3 = schemas.StrSchema
            code4 = schemas.StrSchema
            code5 = schemas.StrSchema
            code6 = schemas.StrSchema
            cost = schemas.NumberSchema
            des = schemas.StrSchema
            idrecafecustom = schemas.StrSchema
            idrecintervalproblemcustom = schemas.StrSchema
            idrecparent = schemas.StrSchema
            idrecphasecustom = schemas.StrSchema
            intervalproblempct = schemas.NumberSchema
            note = schemas.StrSchema
            opscategory = schemas.StrSchema
            polineno = schemas.StrSchema
            pono = schemas.StrSchema
            sn = schemas.StrSchema
            syscarryfwdp = schemas.BoolSchema
            ticketno = schemas.StrSchema
            unschedtyp = schemas.StrSchema
            userboolean1 = schemas.BoolSchema
            usertxt1 = schemas.StrSchema
            vendor = schemas.StrSchema
            vendorcode = schemas.StrSchema
            vendorsubcode = schemas.StrSchema
            workorderno = schemas.StrSchema
            __annotations__ = {
                "idrec": idrec,
                "idwell": idwell,
                "code1": code1,
                "code2": code2,
                "code3": code3,
                "code4": code4,
                "code5": code5,
                "code6": code6,
                "cost": cost,
                "des": des,
                "idrecafecustom": idrecafecustom,
                "idrecintervalproblemcustom": idrecintervalproblemcustom,
                "idrecparent": idrecparent,
                "idrecphasecustom": idrecphasecustom,
                "intervalproblempct": intervalproblempct,
                "note": note,
                "opscategory": opscategory,
                "polineno": polineno,
                "pono": pono,
                "sn": sn,
                "syscarryfwdp": syscarryfwdp,
                "ticketno": ticketno,
                "unschedtyp": unschedtyp,
                "userboolean1": userboolean1,
                "usertxt1": usertxt1,
                "vendor": vendor,
                "vendorcode": vendorcode,
                "vendorsubcode": vendorsubcode,
                "workorderno": workorderno,
            }
    
    idrec: MetaOapg.properties.idrec
    idwell: MetaOapg.properties.idwell
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["code1"]) -> MetaOapg.properties.code1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["code2"]) -> MetaOapg.properties.code2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["code3"]) -> MetaOapg.properties.code3: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["code4"]) -> MetaOapg.properties.code4: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["code5"]) -> MetaOapg.properties.code5: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["code6"]) -> MetaOapg.properties.code6: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cost"]) -> MetaOapg.properties.cost: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["des"]) -> MetaOapg.properties.des: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecafecustom"]) -> MetaOapg.properties.idrecafecustom: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecintervalproblemcustom"]) -> MetaOapg.properties.idrecintervalproblemcustom: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecparent"]) -> MetaOapg.properties.idrecparent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecphasecustom"]) -> MetaOapg.properties.idrecphasecustom: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["intervalproblempct"]) -> MetaOapg.properties.intervalproblempct: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["note"]) -> MetaOapg.properties.note: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["opscategory"]) -> MetaOapg.properties.opscategory: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["polineno"]) -> MetaOapg.properties.polineno: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pono"]) -> MetaOapg.properties.pono: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sn"]) -> MetaOapg.properties.sn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["syscarryfwdp"]) -> MetaOapg.properties.syscarryfwdp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ticketno"]) -> MetaOapg.properties.ticketno: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["unschedtyp"]) -> MetaOapg.properties.unschedtyp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userboolean1"]) -> MetaOapg.properties.userboolean1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usertxt1"]) -> MetaOapg.properties.usertxt1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vendor"]) -> MetaOapg.properties.vendor: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vendorcode"]) -> MetaOapg.properties.vendorcode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vendorsubcode"]) -> MetaOapg.properties.vendorsubcode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workorderno"]) -> MetaOapg.properties.workorderno: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "code1", "code2", "code3", "code4", "code5", "code6", "cost", "des", "idrecafecustom", "idrecintervalproblemcustom", "idrecparent", "idrecphasecustom", "intervalproblempct", "note", "opscategory", "polineno", "pono", "sn", "syscarryfwdp", "ticketno", "unschedtyp", "userboolean1", "usertxt1", "vendor", "vendorcode", "vendorsubcode", "workorderno", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["code1"]) -> typing.Union[MetaOapg.properties.code1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["code2"]) -> typing.Union[MetaOapg.properties.code2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["code3"]) -> typing.Union[MetaOapg.properties.code3, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["code4"]) -> typing.Union[MetaOapg.properties.code4, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["code5"]) -> typing.Union[MetaOapg.properties.code5, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["code6"]) -> typing.Union[MetaOapg.properties.code6, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cost"]) -> typing.Union[MetaOapg.properties.cost, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["des"]) -> typing.Union[MetaOapg.properties.des, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecafecustom"]) -> typing.Union[MetaOapg.properties.idrecafecustom, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecintervalproblemcustom"]) -> typing.Union[MetaOapg.properties.idrecintervalproblemcustom, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecparent"]) -> typing.Union[MetaOapg.properties.idrecparent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecphasecustom"]) -> typing.Union[MetaOapg.properties.idrecphasecustom, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["intervalproblempct"]) -> typing.Union[MetaOapg.properties.intervalproblempct, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["note"]) -> typing.Union[MetaOapg.properties.note, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["opscategory"]) -> typing.Union[MetaOapg.properties.opscategory, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["polineno"]) -> typing.Union[MetaOapg.properties.polineno, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pono"]) -> typing.Union[MetaOapg.properties.pono, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sn"]) -> typing.Union[MetaOapg.properties.sn, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["syscarryfwdp"]) -> typing.Union[MetaOapg.properties.syscarryfwdp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ticketno"]) -> typing.Union[MetaOapg.properties.ticketno, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["unschedtyp"]) -> typing.Union[MetaOapg.properties.unschedtyp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userboolean1"]) -> typing.Union[MetaOapg.properties.userboolean1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usertxt1"]) -> typing.Union[MetaOapg.properties.usertxt1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vendor"]) -> typing.Union[MetaOapg.properties.vendor, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vendorcode"]) -> typing.Union[MetaOapg.properties.vendorcode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vendorsubcode"]) -> typing.Union[MetaOapg.properties.vendorsubcode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workorderno"]) -> typing.Union[MetaOapg.properties.workorderno, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "code1", "code2", "code3", "code4", "code5", "code6", "cost", "des", "idrecafecustom", "idrecintervalproblemcustom", "idrecparent", "idrecphasecustom", "intervalproblempct", "note", "opscategory", "polineno", "pono", "sn", "syscarryfwdp", "ticketno", "unschedtyp", "userboolean1", "usertxt1", "vendor", "vendorcode", "vendorsubcode", "workorderno", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idrec: typing.Union[MetaOapg.properties.idrec, str, ],
        idwell: typing.Union[MetaOapg.properties.idwell, str, ],
        code1: typing.Union[MetaOapg.properties.code1, str, schemas.Unset] = schemas.unset,
        code2: typing.Union[MetaOapg.properties.code2, str, schemas.Unset] = schemas.unset,
        code3: typing.Union[MetaOapg.properties.code3, str, schemas.Unset] = schemas.unset,
        code4: typing.Union[MetaOapg.properties.code4, str, schemas.Unset] = schemas.unset,
        code5: typing.Union[MetaOapg.properties.code5, str, schemas.Unset] = schemas.unset,
        code6: typing.Union[MetaOapg.properties.code6, str, schemas.Unset] = schemas.unset,
        cost: typing.Union[MetaOapg.properties.cost, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        des: typing.Union[MetaOapg.properties.des, str, schemas.Unset] = schemas.unset,
        idrecafecustom: typing.Union[MetaOapg.properties.idrecafecustom, str, schemas.Unset] = schemas.unset,
        idrecintervalproblemcustom: typing.Union[MetaOapg.properties.idrecintervalproblemcustom, str, schemas.Unset] = schemas.unset,
        idrecparent: typing.Union[MetaOapg.properties.idrecparent, str, schemas.Unset] = schemas.unset,
        idrecphasecustom: typing.Union[MetaOapg.properties.idrecphasecustom, str, schemas.Unset] = schemas.unset,
        intervalproblempct: typing.Union[MetaOapg.properties.intervalproblempct, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        note: typing.Union[MetaOapg.properties.note, str, schemas.Unset] = schemas.unset,
        opscategory: typing.Union[MetaOapg.properties.opscategory, str, schemas.Unset] = schemas.unset,
        polineno: typing.Union[MetaOapg.properties.polineno, str, schemas.Unset] = schemas.unset,
        pono: typing.Union[MetaOapg.properties.pono, str, schemas.Unset] = schemas.unset,
        sn: typing.Union[MetaOapg.properties.sn, str, schemas.Unset] = schemas.unset,
        syscarryfwdp: typing.Union[MetaOapg.properties.syscarryfwdp, bool, schemas.Unset] = schemas.unset,
        ticketno: typing.Union[MetaOapg.properties.ticketno, str, schemas.Unset] = schemas.unset,
        unschedtyp: typing.Union[MetaOapg.properties.unschedtyp, str, schemas.Unset] = schemas.unset,
        userboolean1: typing.Union[MetaOapg.properties.userboolean1, bool, schemas.Unset] = schemas.unset,
        usertxt1: typing.Union[MetaOapg.properties.usertxt1, str, schemas.Unset] = schemas.unset,
        vendor: typing.Union[MetaOapg.properties.vendor, str, schemas.Unset] = schemas.unset,
        vendorcode: typing.Union[MetaOapg.properties.vendorcode, str, schemas.Unset] = schemas.unset,
        vendorsubcode: typing.Union[MetaOapg.properties.vendorsubcode, str, schemas.Unset] = schemas.unset,
        workorderno: typing.Union[MetaOapg.properties.workorderno, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'OneTimeCostData':
        return super().__new__(
            cls,
            *args,
            idrec=idrec,
            idwell=idwell,
            code1=code1,
            code2=code2,
            code3=code3,
            code4=code4,
            code5=code5,
            code6=code6,
            cost=cost,
            des=des,
            idrecafecustom=idrecafecustom,
            idrecintervalproblemcustom=idrecintervalproblemcustom,
            idrecparent=idrecparent,
            idrecphasecustom=idrecphasecustom,
            intervalproblempct=intervalproblempct,
            note=note,
            opscategory=opscategory,
            polineno=polineno,
            pono=pono,
            sn=sn,
            syscarryfwdp=syscarryfwdp,
            ticketno=ticketno,
            unschedtyp=unschedtyp,
            userboolean1=userboolean1,
            usertxt1=usertxt1,
            vendor=vendor,
            vendorcode=vendorcode,
            vendorsubcode=vendorsubcode,
            workorderno=workorderno,
            _configuration=_configuration,
            **kwargs,
        )
