# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class JobPhasesData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idrec",
            "idwell",
        }
        
        class properties:
            idrec = schemas.StrSchema
            idwell = schemas.StrSchema
            code1 = schemas.StrSchema
            code2 = schemas.StrSchema
            code3 = schemas.StrSchema
            code4 = schemas.StrSchema
            costmax = schemas.NumberSchema
            costmin = schemas.NumberSchema
            costml = schemas.NumberSchema
            costtechlimit = schemas.NumberSchema
            definitive = schemas.BoolSchema
            depthendplan = schemas.NumberSchema
            depthstartplan = schemas.NumberSchema
            des = schemas.StrSchema
            dttmendactual = schemas.DateTimeSchema
            dttmstartactual = schemas.DateTimeSchema
            durationmax = schemas.NumberSchema
            durationmin = schemas.NumberSchema
            durationml = schemas.NumberSchema
            durationtechlimit = schemas.NumberSchema
            exclude = schemas.BoolSchema
            hazards = schemas.StrSchema
            idrecparent = schemas.StrSchema
            idrecwellbore = schemas.StrSchema
            methodtyp1 = schemas.StrSchema
            methodtyp2 = schemas.StrSchema
            planchange = schemas.BoolSchema
            planphase = schemas.StrSchema
            source = schemas.StrSchema
            summary = schemas.StrSchema
            usertxt1 = schemas.StrSchema
            __annotations__ = {
                "idrec": idrec,
                "idwell": idwell,
                "code1": code1,
                "code2": code2,
                "code3": code3,
                "code4": code4,
                "costmax": costmax,
                "costmin": costmin,
                "costml": costml,
                "costtechlimit": costtechlimit,
                "definitive": definitive,
                "depthendplan": depthendplan,
                "depthstartplan": depthstartplan,
                "des": des,
                "dttmendactual": dttmendactual,
                "dttmstartactual": dttmstartactual,
                "durationmax": durationmax,
                "durationmin": durationmin,
                "durationml": durationml,
                "durationtechlimit": durationtechlimit,
                "exclude": exclude,
                "hazards": hazards,
                "idrecparent": idrecparent,
                "idrecwellbore": idrecwellbore,
                "methodtyp1": methodtyp1,
                "methodtyp2": methodtyp2,
                "planchange": planchange,
                "planphase": planphase,
                "source": source,
                "summary": summary,
                "usertxt1": usertxt1,
            }
    
    idrec: MetaOapg.properties.idrec
    idwell: MetaOapg.properties.idwell
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["code1"]) -> MetaOapg.properties.code1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["code2"]) -> MetaOapg.properties.code2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["code3"]) -> MetaOapg.properties.code3: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["code4"]) -> MetaOapg.properties.code4: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["costmax"]) -> MetaOapg.properties.costmax: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["costmin"]) -> MetaOapg.properties.costmin: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["costml"]) -> MetaOapg.properties.costml: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["costtechlimit"]) -> MetaOapg.properties.costtechlimit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["definitive"]) -> MetaOapg.properties.definitive: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["depthendplan"]) -> MetaOapg.properties.depthendplan: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["depthstartplan"]) -> MetaOapg.properties.depthstartplan: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["des"]) -> MetaOapg.properties.des: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmendactual"]) -> MetaOapg.properties.dttmendactual: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmstartactual"]) -> MetaOapg.properties.dttmstartactual: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["durationmax"]) -> MetaOapg.properties.durationmax: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["durationmin"]) -> MetaOapg.properties.durationmin: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["durationml"]) -> MetaOapg.properties.durationml: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["durationtechlimit"]) -> MetaOapg.properties.durationtechlimit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["exclude"]) -> MetaOapg.properties.exclude: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hazards"]) -> MetaOapg.properties.hazards: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecparent"]) -> MetaOapg.properties.idrecparent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecwellbore"]) -> MetaOapg.properties.idrecwellbore: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["methodtyp1"]) -> MetaOapg.properties.methodtyp1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["methodtyp2"]) -> MetaOapg.properties.methodtyp2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["planchange"]) -> MetaOapg.properties.planchange: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["planphase"]) -> MetaOapg.properties.planphase: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["source"]) -> MetaOapg.properties.source: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["summary"]) -> MetaOapg.properties.summary: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usertxt1"]) -> MetaOapg.properties.usertxt1: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "code1", "code2", "code3", "code4", "costmax", "costmin", "costml", "costtechlimit", "definitive", "depthendplan", "depthstartplan", "des", "dttmendactual", "dttmstartactual", "durationmax", "durationmin", "durationml", "durationtechlimit", "exclude", "hazards", "idrecparent", "idrecwellbore", "methodtyp1", "methodtyp2", "planchange", "planphase", "source", "summary", "usertxt1", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["code1"]) -> typing.Union[MetaOapg.properties.code1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["code2"]) -> typing.Union[MetaOapg.properties.code2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["code3"]) -> typing.Union[MetaOapg.properties.code3, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["code4"]) -> typing.Union[MetaOapg.properties.code4, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["costmax"]) -> typing.Union[MetaOapg.properties.costmax, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["costmin"]) -> typing.Union[MetaOapg.properties.costmin, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["costml"]) -> typing.Union[MetaOapg.properties.costml, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["costtechlimit"]) -> typing.Union[MetaOapg.properties.costtechlimit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["definitive"]) -> typing.Union[MetaOapg.properties.definitive, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["depthendplan"]) -> typing.Union[MetaOapg.properties.depthendplan, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["depthstartplan"]) -> typing.Union[MetaOapg.properties.depthstartplan, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["des"]) -> typing.Union[MetaOapg.properties.des, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmendactual"]) -> typing.Union[MetaOapg.properties.dttmendactual, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmstartactual"]) -> typing.Union[MetaOapg.properties.dttmstartactual, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["durationmax"]) -> typing.Union[MetaOapg.properties.durationmax, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["durationmin"]) -> typing.Union[MetaOapg.properties.durationmin, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["durationml"]) -> typing.Union[MetaOapg.properties.durationml, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["durationtechlimit"]) -> typing.Union[MetaOapg.properties.durationtechlimit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["exclude"]) -> typing.Union[MetaOapg.properties.exclude, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hazards"]) -> typing.Union[MetaOapg.properties.hazards, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecparent"]) -> typing.Union[MetaOapg.properties.idrecparent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecwellbore"]) -> typing.Union[MetaOapg.properties.idrecwellbore, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["methodtyp1"]) -> typing.Union[MetaOapg.properties.methodtyp1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["methodtyp2"]) -> typing.Union[MetaOapg.properties.methodtyp2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["planchange"]) -> typing.Union[MetaOapg.properties.planchange, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["planphase"]) -> typing.Union[MetaOapg.properties.planphase, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["source"]) -> typing.Union[MetaOapg.properties.source, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["summary"]) -> typing.Union[MetaOapg.properties.summary, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usertxt1"]) -> typing.Union[MetaOapg.properties.usertxt1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "code1", "code2", "code3", "code4", "costmax", "costmin", "costml", "costtechlimit", "definitive", "depthendplan", "depthstartplan", "des", "dttmendactual", "dttmstartactual", "durationmax", "durationmin", "durationml", "durationtechlimit", "exclude", "hazards", "idrecparent", "idrecwellbore", "methodtyp1", "methodtyp2", "planchange", "planphase", "source", "summary", "usertxt1", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idrec: typing.Union[MetaOapg.properties.idrec, str, ],
        idwell: typing.Union[MetaOapg.properties.idwell, str, ],
        code1: typing.Union[MetaOapg.properties.code1, str, schemas.Unset] = schemas.unset,
        code2: typing.Union[MetaOapg.properties.code2, str, schemas.Unset] = schemas.unset,
        code3: typing.Union[MetaOapg.properties.code3, str, schemas.Unset] = schemas.unset,
        code4: typing.Union[MetaOapg.properties.code4, str, schemas.Unset] = schemas.unset,
        costmax: typing.Union[MetaOapg.properties.costmax, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        costmin: typing.Union[MetaOapg.properties.costmin, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        costml: typing.Union[MetaOapg.properties.costml, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        costtechlimit: typing.Union[MetaOapg.properties.costtechlimit, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        definitive: typing.Union[MetaOapg.properties.definitive, bool, schemas.Unset] = schemas.unset,
        depthendplan: typing.Union[MetaOapg.properties.depthendplan, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        depthstartplan: typing.Union[MetaOapg.properties.depthstartplan, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        des: typing.Union[MetaOapg.properties.des, str, schemas.Unset] = schemas.unset,
        dttmendactual: typing.Union[MetaOapg.properties.dttmendactual, str, datetime, schemas.Unset] = schemas.unset,
        dttmstartactual: typing.Union[MetaOapg.properties.dttmstartactual, str, datetime, schemas.Unset] = schemas.unset,
        durationmax: typing.Union[MetaOapg.properties.durationmax, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        durationmin: typing.Union[MetaOapg.properties.durationmin, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        durationml: typing.Union[MetaOapg.properties.durationml, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        durationtechlimit: typing.Union[MetaOapg.properties.durationtechlimit, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        exclude: typing.Union[MetaOapg.properties.exclude, bool, schemas.Unset] = schemas.unset,
        hazards: typing.Union[MetaOapg.properties.hazards, str, schemas.Unset] = schemas.unset,
        idrecparent: typing.Union[MetaOapg.properties.idrecparent, str, schemas.Unset] = schemas.unset,
        idrecwellbore: typing.Union[MetaOapg.properties.idrecwellbore, str, schemas.Unset] = schemas.unset,
        methodtyp1: typing.Union[MetaOapg.properties.methodtyp1, str, schemas.Unset] = schemas.unset,
        methodtyp2: typing.Union[MetaOapg.properties.methodtyp2, str, schemas.Unset] = schemas.unset,
        planchange: typing.Union[MetaOapg.properties.planchange, bool, schemas.Unset] = schemas.unset,
        planphase: typing.Union[MetaOapg.properties.planphase, str, schemas.Unset] = schemas.unset,
        source: typing.Union[MetaOapg.properties.source, str, schemas.Unset] = schemas.unset,
        summary: typing.Union[MetaOapg.properties.summary, str, schemas.Unset] = schemas.unset,
        usertxt1: typing.Union[MetaOapg.properties.usertxt1, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'JobPhasesData':
        return super().__new__(
            cls,
            *args,
            idrec=idrec,
            idwell=idwell,
            code1=code1,
            code2=code2,
            code3=code3,
            code4=code4,
            costmax=costmax,
            costmin=costmin,
            costml=costml,
            costtechlimit=costtechlimit,
            definitive=definitive,
            depthendplan=depthendplan,
            depthstartplan=depthstartplan,
            des=des,
            dttmendactual=dttmendactual,
            dttmstartactual=dttmstartactual,
            durationmax=durationmax,
            durationmin=durationmin,
            durationml=durationml,
            durationtechlimit=durationtechlimit,
            exclude=exclude,
            hazards=hazards,
            idrecparent=idrecparent,
            idrecwellbore=idrecwellbore,
            methodtyp1=methodtyp1,
            methodtyp2=methodtyp2,
            planchange=planchange,
            planphase=planphase,
            source=source,
            summary=summary,
            usertxt1=usertxt1,
            _configuration=_configuration,
            **kwargs,
        )
