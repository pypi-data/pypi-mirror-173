# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class RigsUnitsData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idrec",
            "idwell",
        }
        
        class properties:
            idrec = schemas.StrSchema
            idwell = schemas.StrSchema
            anchorlinetyp = schemas.StrSchema
            anchormaxtension = schemas.NumberSchema
            anchorno = schemas.IntSchema
            anchortyp = schemas.StrSchema
            com = schemas.StrSchema
            contractor = schemas.StrSchema
            contractorparent = schemas.StrSchema
            contracttyp = schemas.StrSchema
            depthmax = schemas.NumberSchema
            derricktyp = schemas.StrSchema
            drawworkmake = schemas.StrSchema
            drawworkmodel = schemas.StrSchema
            drawworktyp = schemas.StrSchema
            dttmend = schemas.DateTimeSchema
            dttmstart = schemas.DateTimeSchema
            heightmastclearance = schemas.NumberSchema
            heightsubclear = schemas.NumberSchema
            hookloadmax = schemas.NumberSchema
            idrecjobcontactcontractor = schemas.StrSchema
            idrecparent = schemas.StrSchema
            inventoryno = schemas.StrSchema
            lengthchokeline = schemas.NumberSchema
            lengthkillline = schemas.NumberSchema
            maxvariableload = schemas.NumberSchema
            postyp = schemas.StrSchema
            power = schemas.NumberSchema
            powertyp = schemas.StrSchema
            proposed = schemas.BoolSchema
            purpose = schemas.StrSchema
            refheight = schemas.NumberSchema
            rigno = schemas.StrSchema
            rigrateref = schemas.NumberSchema
            rotarysystem = schemas.StrSchema
            setbackcapacity = schemas.NumberSchema
            slipjtextmax = schemas.NumberSchema
            szidchokeline = schemas.NumberSchema
            szidkillline = schemas.NumberSchema
            torquemax = schemas.NumberSchema
            transportloads = schemas.IntSchema
            typ1 = schemas.StrSchema
            typ2 = schemas.StrSchema
            volsurfline = schemas.NumberSchema
            waterdepthmax = schemas.NumberSchema
            weightblock = schemas.NumberSchema
            __annotations__ = {
                "idrec": idrec,
                "idwell": idwell,
                "anchorlinetyp": anchorlinetyp,
                "anchormaxtension": anchormaxtension,
                "anchorno": anchorno,
                "anchortyp": anchortyp,
                "com": com,
                "contractor": contractor,
                "contractorparent": contractorparent,
                "contracttyp": contracttyp,
                "depthmax": depthmax,
                "derricktyp": derricktyp,
                "drawworkmake": drawworkmake,
                "drawworkmodel": drawworkmodel,
                "drawworktyp": drawworktyp,
                "dttmend": dttmend,
                "dttmstart": dttmstart,
                "heightmastclearance": heightmastclearance,
                "heightsubclear": heightsubclear,
                "hookloadmax": hookloadmax,
                "idrecjobcontactcontractor": idrecjobcontactcontractor,
                "idrecparent": idrecparent,
                "inventoryno": inventoryno,
                "lengthchokeline": lengthchokeline,
                "lengthkillline": lengthkillline,
                "maxvariableload": maxvariableload,
                "postyp": postyp,
                "power": power,
                "powertyp": powertyp,
                "proposed": proposed,
                "purpose": purpose,
                "refheight": refheight,
                "rigno": rigno,
                "rigrateref": rigrateref,
                "rotarysystem": rotarysystem,
                "setbackcapacity": setbackcapacity,
                "slipjtextmax": slipjtextmax,
                "szidchokeline": szidchokeline,
                "szidkillline": szidkillline,
                "torquemax": torquemax,
                "transportloads": transportloads,
                "typ1": typ1,
                "typ2": typ2,
                "volsurfline": volsurfline,
                "waterdepthmax": waterdepthmax,
                "weightblock": weightblock,
            }
    
    idrec: MetaOapg.properties.idrec
    idwell: MetaOapg.properties.idwell
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["anchorlinetyp"]) -> MetaOapg.properties.anchorlinetyp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["anchormaxtension"]) -> MetaOapg.properties.anchormaxtension: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["anchorno"]) -> MetaOapg.properties.anchorno: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["anchortyp"]) -> MetaOapg.properties.anchortyp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["com"]) -> MetaOapg.properties.com: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contractor"]) -> MetaOapg.properties.contractor: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contractorparent"]) -> MetaOapg.properties.contractorparent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contracttyp"]) -> MetaOapg.properties.contracttyp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["depthmax"]) -> MetaOapg.properties.depthmax: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["derricktyp"]) -> MetaOapg.properties.derricktyp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["drawworkmake"]) -> MetaOapg.properties.drawworkmake: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["drawworkmodel"]) -> MetaOapg.properties.drawworkmodel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["drawworktyp"]) -> MetaOapg.properties.drawworktyp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmend"]) -> MetaOapg.properties.dttmend: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmstart"]) -> MetaOapg.properties.dttmstart: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["heightmastclearance"]) -> MetaOapg.properties.heightmastclearance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["heightsubclear"]) -> MetaOapg.properties.heightsubclear: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hookloadmax"]) -> MetaOapg.properties.hookloadmax: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecjobcontactcontractor"]) -> MetaOapg.properties.idrecjobcontactcontractor: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecparent"]) -> MetaOapg.properties.idrecparent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["inventoryno"]) -> MetaOapg.properties.inventoryno: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lengthchokeline"]) -> MetaOapg.properties.lengthchokeline: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lengthkillline"]) -> MetaOapg.properties.lengthkillline: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maxvariableload"]) -> MetaOapg.properties.maxvariableload: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["postyp"]) -> MetaOapg.properties.postyp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["power"]) -> MetaOapg.properties.power: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["powertyp"]) -> MetaOapg.properties.powertyp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["proposed"]) -> MetaOapg.properties.proposed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["purpose"]) -> MetaOapg.properties.purpose: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["refheight"]) -> MetaOapg.properties.refheight: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rigno"]) -> MetaOapg.properties.rigno: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rigrateref"]) -> MetaOapg.properties.rigrateref: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rotarysystem"]) -> MetaOapg.properties.rotarysystem: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["setbackcapacity"]) -> MetaOapg.properties.setbackcapacity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["slipjtextmax"]) -> MetaOapg.properties.slipjtextmax: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["szidchokeline"]) -> MetaOapg.properties.szidchokeline: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["szidkillline"]) -> MetaOapg.properties.szidkillline: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["torquemax"]) -> MetaOapg.properties.torquemax: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transportloads"]) -> MetaOapg.properties.transportloads: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["typ1"]) -> MetaOapg.properties.typ1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["typ2"]) -> MetaOapg.properties.typ2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["volsurfline"]) -> MetaOapg.properties.volsurfline: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["waterdepthmax"]) -> MetaOapg.properties.waterdepthmax: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["weightblock"]) -> MetaOapg.properties.weightblock: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "anchorlinetyp", "anchormaxtension", "anchorno", "anchortyp", "com", "contractor", "contractorparent", "contracttyp", "depthmax", "derricktyp", "drawworkmake", "drawworkmodel", "drawworktyp", "dttmend", "dttmstart", "heightmastclearance", "heightsubclear", "hookloadmax", "idrecjobcontactcontractor", "idrecparent", "inventoryno", "lengthchokeline", "lengthkillline", "maxvariableload", "postyp", "power", "powertyp", "proposed", "purpose", "refheight", "rigno", "rigrateref", "rotarysystem", "setbackcapacity", "slipjtextmax", "szidchokeline", "szidkillline", "torquemax", "transportloads", "typ1", "typ2", "volsurfline", "waterdepthmax", "weightblock", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["anchorlinetyp"]) -> typing.Union[MetaOapg.properties.anchorlinetyp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["anchormaxtension"]) -> typing.Union[MetaOapg.properties.anchormaxtension, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["anchorno"]) -> typing.Union[MetaOapg.properties.anchorno, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["anchortyp"]) -> typing.Union[MetaOapg.properties.anchortyp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["com"]) -> typing.Union[MetaOapg.properties.com, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contractor"]) -> typing.Union[MetaOapg.properties.contractor, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contractorparent"]) -> typing.Union[MetaOapg.properties.contractorparent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contracttyp"]) -> typing.Union[MetaOapg.properties.contracttyp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["depthmax"]) -> typing.Union[MetaOapg.properties.depthmax, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["derricktyp"]) -> typing.Union[MetaOapg.properties.derricktyp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["drawworkmake"]) -> typing.Union[MetaOapg.properties.drawworkmake, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["drawworkmodel"]) -> typing.Union[MetaOapg.properties.drawworkmodel, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["drawworktyp"]) -> typing.Union[MetaOapg.properties.drawworktyp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmend"]) -> typing.Union[MetaOapg.properties.dttmend, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmstart"]) -> typing.Union[MetaOapg.properties.dttmstart, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["heightmastclearance"]) -> typing.Union[MetaOapg.properties.heightmastclearance, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["heightsubclear"]) -> typing.Union[MetaOapg.properties.heightsubclear, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hookloadmax"]) -> typing.Union[MetaOapg.properties.hookloadmax, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecjobcontactcontractor"]) -> typing.Union[MetaOapg.properties.idrecjobcontactcontractor, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecparent"]) -> typing.Union[MetaOapg.properties.idrecparent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["inventoryno"]) -> typing.Union[MetaOapg.properties.inventoryno, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lengthchokeline"]) -> typing.Union[MetaOapg.properties.lengthchokeline, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lengthkillline"]) -> typing.Union[MetaOapg.properties.lengthkillline, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maxvariableload"]) -> typing.Union[MetaOapg.properties.maxvariableload, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["postyp"]) -> typing.Union[MetaOapg.properties.postyp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["power"]) -> typing.Union[MetaOapg.properties.power, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["powertyp"]) -> typing.Union[MetaOapg.properties.powertyp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["proposed"]) -> typing.Union[MetaOapg.properties.proposed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["purpose"]) -> typing.Union[MetaOapg.properties.purpose, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["refheight"]) -> typing.Union[MetaOapg.properties.refheight, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rigno"]) -> typing.Union[MetaOapg.properties.rigno, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rigrateref"]) -> typing.Union[MetaOapg.properties.rigrateref, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rotarysystem"]) -> typing.Union[MetaOapg.properties.rotarysystem, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["setbackcapacity"]) -> typing.Union[MetaOapg.properties.setbackcapacity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["slipjtextmax"]) -> typing.Union[MetaOapg.properties.slipjtextmax, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["szidchokeline"]) -> typing.Union[MetaOapg.properties.szidchokeline, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["szidkillline"]) -> typing.Union[MetaOapg.properties.szidkillline, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["torquemax"]) -> typing.Union[MetaOapg.properties.torquemax, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transportloads"]) -> typing.Union[MetaOapg.properties.transportloads, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["typ1"]) -> typing.Union[MetaOapg.properties.typ1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["typ2"]) -> typing.Union[MetaOapg.properties.typ2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["volsurfline"]) -> typing.Union[MetaOapg.properties.volsurfline, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["waterdepthmax"]) -> typing.Union[MetaOapg.properties.waterdepthmax, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["weightblock"]) -> typing.Union[MetaOapg.properties.weightblock, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "anchorlinetyp", "anchormaxtension", "anchorno", "anchortyp", "com", "contractor", "contractorparent", "contracttyp", "depthmax", "derricktyp", "drawworkmake", "drawworkmodel", "drawworktyp", "dttmend", "dttmstart", "heightmastclearance", "heightsubclear", "hookloadmax", "idrecjobcontactcontractor", "idrecparent", "inventoryno", "lengthchokeline", "lengthkillline", "maxvariableload", "postyp", "power", "powertyp", "proposed", "purpose", "refheight", "rigno", "rigrateref", "rotarysystem", "setbackcapacity", "slipjtextmax", "szidchokeline", "szidkillline", "torquemax", "transportloads", "typ1", "typ2", "volsurfline", "waterdepthmax", "weightblock", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idrec: typing.Union[MetaOapg.properties.idrec, str, ],
        idwell: typing.Union[MetaOapg.properties.idwell, str, ],
        anchorlinetyp: typing.Union[MetaOapg.properties.anchorlinetyp, str, schemas.Unset] = schemas.unset,
        anchormaxtension: typing.Union[MetaOapg.properties.anchormaxtension, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        anchorno: typing.Union[MetaOapg.properties.anchorno, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        anchortyp: typing.Union[MetaOapg.properties.anchortyp, str, schemas.Unset] = schemas.unset,
        com: typing.Union[MetaOapg.properties.com, str, schemas.Unset] = schemas.unset,
        contractor: typing.Union[MetaOapg.properties.contractor, str, schemas.Unset] = schemas.unset,
        contractorparent: typing.Union[MetaOapg.properties.contractorparent, str, schemas.Unset] = schemas.unset,
        contracttyp: typing.Union[MetaOapg.properties.contracttyp, str, schemas.Unset] = schemas.unset,
        depthmax: typing.Union[MetaOapg.properties.depthmax, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        derricktyp: typing.Union[MetaOapg.properties.derricktyp, str, schemas.Unset] = schemas.unset,
        drawworkmake: typing.Union[MetaOapg.properties.drawworkmake, str, schemas.Unset] = schemas.unset,
        drawworkmodel: typing.Union[MetaOapg.properties.drawworkmodel, str, schemas.Unset] = schemas.unset,
        drawworktyp: typing.Union[MetaOapg.properties.drawworktyp, str, schemas.Unset] = schemas.unset,
        dttmend: typing.Union[MetaOapg.properties.dttmend, str, datetime, schemas.Unset] = schemas.unset,
        dttmstart: typing.Union[MetaOapg.properties.dttmstart, str, datetime, schemas.Unset] = schemas.unset,
        heightmastclearance: typing.Union[MetaOapg.properties.heightmastclearance, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        heightsubclear: typing.Union[MetaOapg.properties.heightsubclear, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        hookloadmax: typing.Union[MetaOapg.properties.hookloadmax, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        idrecjobcontactcontractor: typing.Union[MetaOapg.properties.idrecjobcontactcontractor, str, schemas.Unset] = schemas.unset,
        idrecparent: typing.Union[MetaOapg.properties.idrecparent, str, schemas.Unset] = schemas.unset,
        inventoryno: typing.Union[MetaOapg.properties.inventoryno, str, schemas.Unset] = schemas.unset,
        lengthchokeline: typing.Union[MetaOapg.properties.lengthchokeline, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        lengthkillline: typing.Union[MetaOapg.properties.lengthkillline, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        maxvariableload: typing.Union[MetaOapg.properties.maxvariableload, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        postyp: typing.Union[MetaOapg.properties.postyp, str, schemas.Unset] = schemas.unset,
        power: typing.Union[MetaOapg.properties.power, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        powertyp: typing.Union[MetaOapg.properties.powertyp, str, schemas.Unset] = schemas.unset,
        proposed: typing.Union[MetaOapg.properties.proposed, bool, schemas.Unset] = schemas.unset,
        purpose: typing.Union[MetaOapg.properties.purpose, str, schemas.Unset] = schemas.unset,
        refheight: typing.Union[MetaOapg.properties.refheight, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        rigno: typing.Union[MetaOapg.properties.rigno, str, schemas.Unset] = schemas.unset,
        rigrateref: typing.Union[MetaOapg.properties.rigrateref, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        rotarysystem: typing.Union[MetaOapg.properties.rotarysystem, str, schemas.Unset] = schemas.unset,
        setbackcapacity: typing.Union[MetaOapg.properties.setbackcapacity, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        slipjtextmax: typing.Union[MetaOapg.properties.slipjtextmax, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        szidchokeline: typing.Union[MetaOapg.properties.szidchokeline, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        szidkillline: typing.Union[MetaOapg.properties.szidkillline, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        torquemax: typing.Union[MetaOapg.properties.torquemax, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        transportloads: typing.Union[MetaOapg.properties.transportloads, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        typ1: typing.Union[MetaOapg.properties.typ1, str, schemas.Unset] = schemas.unset,
        typ2: typing.Union[MetaOapg.properties.typ2, str, schemas.Unset] = schemas.unset,
        volsurfline: typing.Union[MetaOapg.properties.volsurfline, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        waterdepthmax: typing.Union[MetaOapg.properties.waterdepthmax, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        weightblock: typing.Union[MetaOapg.properties.weightblock, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'RigsUnitsData':
        return super().__new__(
            cls,
            *args,
            idrec=idrec,
            idwell=idwell,
            anchorlinetyp=anchorlinetyp,
            anchormaxtension=anchormaxtension,
            anchorno=anchorno,
            anchortyp=anchortyp,
            com=com,
            contractor=contractor,
            contractorparent=contractorparent,
            contracttyp=contracttyp,
            depthmax=depthmax,
            derricktyp=derricktyp,
            drawworkmake=drawworkmake,
            drawworkmodel=drawworkmodel,
            drawworktyp=drawworktyp,
            dttmend=dttmend,
            dttmstart=dttmstart,
            heightmastclearance=heightmastclearance,
            heightsubclear=heightsubclear,
            hookloadmax=hookloadmax,
            idrecjobcontactcontractor=idrecjobcontactcontractor,
            idrecparent=idrecparent,
            inventoryno=inventoryno,
            lengthchokeline=lengthchokeline,
            lengthkillline=lengthkillline,
            maxvariableload=maxvariableload,
            postyp=postyp,
            power=power,
            powertyp=powertyp,
            proposed=proposed,
            purpose=purpose,
            refheight=refheight,
            rigno=rigno,
            rigrateref=rigrateref,
            rotarysystem=rotarysystem,
            setbackcapacity=setbackcapacity,
            slipjtextmax=slipjtextmax,
            szidchokeline=szidchokeline,
            szidkillline=szidkillline,
            torquemax=torquemax,
            transportloads=transportloads,
            typ1=typ1,
            typ2=typ2,
            volsurfline=volsurfline,
            waterdepthmax=waterdepthmax,
            weightblock=weightblock,
            _configuration=_configuration,
            **kwargs,
        )
