# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class ContinuousChemicalInjectionData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idrec",
            "idwell",
        }
        
        class properties:
            idrec = schemas.StrSchema
            idwell = schemas.StrSchema
            amount = schemas.NumberSchema
            amountdesign = schemas.NumberSchema
            com = schemas.StrSchema
            cost = schemas.NumberSchema
            dttmend = schemas.DateTimeSchema
            dttmstart = schemas.DateTimeSchema
            idrecstring = schemas.StrSchema
            idrecwellbore = schemas.StrSchema
            injectionloc = schemas.StrSchema
            productname = schemas.StrSchema
            proposed = schemas.BoolSchema
            purpose = schemas.StrSchema
            rateavg = schemas.NumberSchema
            ratedesign = schemas.NumberSchema
            recurfrequency = schemas.NumberSchema
            recurnote = schemas.StrSchema
            typ = schemas.StrSchema
            unitlabel = schemas.StrSchema
            vendor = schemas.StrSchema
            __annotations__ = {
                "idrec": idrec,
                "idwell": idwell,
                "amount": amount,
                "amountdesign": amountdesign,
                "com": com,
                "cost": cost,
                "dttmend": dttmend,
                "dttmstart": dttmstart,
                "idrecstring": idrecstring,
                "idrecwellbore": idrecwellbore,
                "injectionloc": injectionloc,
                "productname": productname,
                "proposed": proposed,
                "purpose": purpose,
                "rateavg": rateavg,
                "ratedesign": ratedesign,
                "recurfrequency": recurfrequency,
                "recurnote": recurnote,
                "typ": typ,
                "unitlabel": unitlabel,
                "vendor": vendor,
            }
    
    idrec: MetaOapg.properties.idrec
    idwell: MetaOapg.properties.idwell
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amountdesign"]) -> MetaOapg.properties.amountdesign: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["com"]) -> MetaOapg.properties.com: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cost"]) -> MetaOapg.properties.cost: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmend"]) -> MetaOapg.properties.dttmend: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmstart"]) -> MetaOapg.properties.dttmstart: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecstring"]) -> MetaOapg.properties.idrecstring: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecwellbore"]) -> MetaOapg.properties.idrecwellbore: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["injectionloc"]) -> MetaOapg.properties.injectionloc: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["productname"]) -> MetaOapg.properties.productname: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["proposed"]) -> MetaOapg.properties.proposed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["purpose"]) -> MetaOapg.properties.purpose: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rateavg"]) -> MetaOapg.properties.rateavg: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ratedesign"]) -> MetaOapg.properties.ratedesign: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["recurfrequency"]) -> MetaOapg.properties.recurfrequency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["recurnote"]) -> MetaOapg.properties.recurnote: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["typ"]) -> MetaOapg.properties.typ: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["unitlabel"]) -> MetaOapg.properties.unitlabel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vendor"]) -> MetaOapg.properties.vendor: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "amount", "amountdesign", "com", "cost", "dttmend", "dttmstart", "idrecstring", "idrecwellbore", "injectionloc", "productname", "proposed", "purpose", "rateavg", "ratedesign", "recurfrequency", "recurnote", "typ", "unitlabel", "vendor", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> typing.Union[MetaOapg.properties.amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amountdesign"]) -> typing.Union[MetaOapg.properties.amountdesign, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["com"]) -> typing.Union[MetaOapg.properties.com, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cost"]) -> typing.Union[MetaOapg.properties.cost, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmend"]) -> typing.Union[MetaOapg.properties.dttmend, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmstart"]) -> typing.Union[MetaOapg.properties.dttmstart, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecstring"]) -> typing.Union[MetaOapg.properties.idrecstring, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecwellbore"]) -> typing.Union[MetaOapg.properties.idrecwellbore, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["injectionloc"]) -> typing.Union[MetaOapg.properties.injectionloc, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["productname"]) -> typing.Union[MetaOapg.properties.productname, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["proposed"]) -> typing.Union[MetaOapg.properties.proposed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["purpose"]) -> typing.Union[MetaOapg.properties.purpose, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rateavg"]) -> typing.Union[MetaOapg.properties.rateavg, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ratedesign"]) -> typing.Union[MetaOapg.properties.ratedesign, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["recurfrequency"]) -> typing.Union[MetaOapg.properties.recurfrequency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["recurnote"]) -> typing.Union[MetaOapg.properties.recurnote, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["typ"]) -> typing.Union[MetaOapg.properties.typ, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["unitlabel"]) -> typing.Union[MetaOapg.properties.unitlabel, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vendor"]) -> typing.Union[MetaOapg.properties.vendor, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "amount", "amountdesign", "com", "cost", "dttmend", "dttmstart", "idrecstring", "idrecwellbore", "injectionloc", "productname", "proposed", "purpose", "rateavg", "ratedesign", "recurfrequency", "recurnote", "typ", "unitlabel", "vendor", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idrec: typing.Union[MetaOapg.properties.idrec, str, ],
        idwell: typing.Union[MetaOapg.properties.idwell, str, ],
        amount: typing.Union[MetaOapg.properties.amount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        amountdesign: typing.Union[MetaOapg.properties.amountdesign, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        com: typing.Union[MetaOapg.properties.com, str, schemas.Unset] = schemas.unset,
        cost: typing.Union[MetaOapg.properties.cost, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        dttmend: typing.Union[MetaOapg.properties.dttmend, str, datetime, schemas.Unset] = schemas.unset,
        dttmstart: typing.Union[MetaOapg.properties.dttmstart, str, datetime, schemas.Unset] = schemas.unset,
        idrecstring: typing.Union[MetaOapg.properties.idrecstring, str, schemas.Unset] = schemas.unset,
        idrecwellbore: typing.Union[MetaOapg.properties.idrecwellbore, str, schemas.Unset] = schemas.unset,
        injectionloc: typing.Union[MetaOapg.properties.injectionloc, str, schemas.Unset] = schemas.unset,
        productname: typing.Union[MetaOapg.properties.productname, str, schemas.Unset] = schemas.unset,
        proposed: typing.Union[MetaOapg.properties.proposed, bool, schemas.Unset] = schemas.unset,
        purpose: typing.Union[MetaOapg.properties.purpose, str, schemas.Unset] = schemas.unset,
        rateavg: typing.Union[MetaOapg.properties.rateavg, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        ratedesign: typing.Union[MetaOapg.properties.ratedesign, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        recurfrequency: typing.Union[MetaOapg.properties.recurfrequency, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        recurnote: typing.Union[MetaOapg.properties.recurnote, str, schemas.Unset] = schemas.unset,
        typ: typing.Union[MetaOapg.properties.typ, str, schemas.Unset] = schemas.unset,
        unitlabel: typing.Union[MetaOapg.properties.unitlabel, str, schemas.Unset] = schemas.unset,
        vendor: typing.Union[MetaOapg.properties.vendor, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ContinuousChemicalInjectionData':
        return super().__new__(
            cls,
            *args,
            idrec=idrec,
            idwell=idwell,
            amount=amount,
            amountdesign=amountdesign,
            com=com,
            cost=cost,
            dttmend=dttmend,
            dttmstart=dttmstart,
            idrecstring=idrecstring,
            idrecwellbore=idrecwellbore,
            injectionloc=injectionloc,
            productname=productname,
            proposed=proposed,
            purpose=purpose,
            rateavg=rateavg,
            ratedesign=ratedesign,
            recurfrequency=recurfrequency,
            recurnote=recurnote,
            typ=typ,
            unitlabel=unitlabel,
            vendor=vendor,
            _configuration=_configuration,
            **kwargs,
        )
