# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class WellheadDriversData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idrec",
            "idwell",
        }
        
        class properties:
            idrec = schemas.StrSchema
            idwell = schemas.StrSchema
            bearingtyp = schemas.StrSchema
            brakesystem = schemas.StrSchema
            com = schemas.StrSchema
            conditionend = schemas.StrSchema
            conditionstart = schemas.StrSchema
            drivetyp = schemas.StrSchema
            dttmend = schemas.DateTimeSchema
            dttmlastoverhaul = schemas.DateTimeSchema
            dttmstart = schemas.DateTimeSchema
            gearboxratio = schemas.NumberSchema
            idrecrod = schemas.StrSchema
            make = schemas.StrSchema
            maxgearboxtorque = schemas.NumberSchema
            maxpower = schemas.NumberSchema
            maxspeed = schemas.NumberSchema
            maxstructureload = schemas.NumberSchema
            maxthrustbearingload = schemas.NumberSchema
            maxtorque = schemas.NumberSchema
            model = schemas.StrSchema
            refid = schemas.StrSchema
            shaftangle = schemas.NumberSchema
            shafttyp = schemas.StrSchema
            sn = schemas.StrSchema
            szodmainshaft = schemas.NumberSchema
            usertxt1 = schemas.StrSchema
            usertxt2 = schemas.StrSchema
            wellheadconn = schemas.StrSchema
            __annotations__ = {
                "idrec": idrec,
                "idwell": idwell,
                "bearingtyp": bearingtyp,
                "brakesystem": brakesystem,
                "com": com,
                "conditionend": conditionend,
                "conditionstart": conditionstart,
                "drivetyp": drivetyp,
                "dttmend": dttmend,
                "dttmlastoverhaul": dttmlastoverhaul,
                "dttmstart": dttmstart,
                "gearboxratio": gearboxratio,
                "idrecrod": idrecrod,
                "make": make,
                "maxgearboxtorque": maxgearboxtorque,
                "maxpower": maxpower,
                "maxspeed": maxspeed,
                "maxstructureload": maxstructureload,
                "maxthrustbearingload": maxthrustbearingload,
                "maxtorque": maxtorque,
                "model": model,
                "refid": refid,
                "shaftangle": shaftangle,
                "shafttyp": shafttyp,
                "sn": sn,
                "szodmainshaft": szodmainshaft,
                "usertxt1": usertxt1,
                "usertxt2": usertxt2,
                "wellheadconn": wellheadconn,
            }
    
    idrec: MetaOapg.properties.idrec
    idwell: MetaOapg.properties.idwell
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bearingtyp"]) -> MetaOapg.properties.bearingtyp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["brakesystem"]) -> MetaOapg.properties.brakesystem: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["com"]) -> MetaOapg.properties.com: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["conditionend"]) -> MetaOapg.properties.conditionend: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["conditionstart"]) -> MetaOapg.properties.conditionstart: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["drivetyp"]) -> MetaOapg.properties.drivetyp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmend"]) -> MetaOapg.properties.dttmend: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmlastoverhaul"]) -> MetaOapg.properties.dttmlastoverhaul: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmstart"]) -> MetaOapg.properties.dttmstart: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gearboxratio"]) -> MetaOapg.properties.gearboxratio: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecrod"]) -> MetaOapg.properties.idrecrod: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["make"]) -> MetaOapg.properties.make: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maxgearboxtorque"]) -> MetaOapg.properties.maxgearboxtorque: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maxpower"]) -> MetaOapg.properties.maxpower: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maxspeed"]) -> MetaOapg.properties.maxspeed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maxstructureload"]) -> MetaOapg.properties.maxstructureload: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maxthrustbearingload"]) -> MetaOapg.properties.maxthrustbearingload: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maxtorque"]) -> MetaOapg.properties.maxtorque: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["model"]) -> MetaOapg.properties.model: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["refid"]) -> MetaOapg.properties.refid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shaftangle"]) -> MetaOapg.properties.shaftangle: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shafttyp"]) -> MetaOapg.properties.shafttyp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sn"]) -> MetaOapg.properties.sn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["szodmainshaft"]) -> MetaOapg.properties.szodmainshaft: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usertxt1"]) -> MetaOapg.properties.usertxt1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usertxt2"]) -> MetaOapg.properties.usertxt2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wellheadconn"]) -> MetaOapg.properties.wellheadconn: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "bearingtyp", "brakesystem", "com", "conditionend", "conditionstart", "drivetyp", "dttmend", "dttmlastoverhaul", "dttmstart", "gearboxratio", "idrecrod", "make", "maxgearboxtorque", "maxpower", "maxspeed", "maxstructureload", "maxthrustbearingload", "maxtorque", "model", "refid", "shaftangle", "shafttyp", "sn", "szodmainshaft", "usertxt1", "usertxt2", "wellheadconn", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bearingtyp"]) -> typing.Union[MetaOapg.properties.bearingtyp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["brakesystem"]) -> typing.Union[MetaOapg.properties.brakesystem, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["com"]) -> typing.Union[MetaOapg.properties.com, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["conditionend"]) -> typing.Union[MetaOapg.properties.conditionend, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["conditionstart"]) -> typing.Union[MetaOapg.properties.conditionstart, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["drivetyp"]) -> typing.Union[MetaOapg.properties.drivetyp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmend"]) -> typing.Union[MetaOapg.properties.dttmend, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmlastoverhaul"]) -> typing.Union[MetaOapg.properties.dttmlastoverhaul, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmstart"]) -> typing.Union[MetaOapg.properties.dttmstart, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gearboxratio"]) -> typing.Union[MetaOapg.properties.gearboxratio, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecrod"]) -> typing.Union[MetaOapg.properties.idrecrod, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["make"]) -> typing.Union[MetaOapg.properties.make, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maxgearboxtorque"]) -> typing.Union[MetaOapg.properties.maxgearboxtorque, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maxpower"]) -> typing.Union[MetaOapg.properties.maxpower, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maxspeed"]) -> typing.Union[MetaOapg.properties.maxspeed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maxstructureload"]) -> typing.Union[MetaOapg.properties.maxstructureload, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maxthrustbearingload"]) -> typing.Union[MetaOapg.properties.maxthrustbearingload, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maxtorque"]) -> typing.Union[MetaOapg.properties.maxtorque, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["model"]) -> typing.Union[MetaOapg.properties.model, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["refid"]) -> typing.Union[MetaOapg.properties.refid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shaftangle"]) -> typing.Union[MetaOapg.properties.shaftangle, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shafttyp"]) -> typing.Union[MetaOapg.properties.shafttyp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sn"]) -> typing.Union[MetaOapg.properties.sn, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["szodmainshaft"]) -> typing.Union[MetaOapg.properties.szodmainshaft, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usertxt1"]) -> typing.Union[MetaOapg.properties.usertxt1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usertxt2"]) -> typing.Union[MetaOapg.properties.usertxt2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wellheadconn"]) -> typing.Union[MetaOapg.properties.wellheadconn, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "bearingtyp", "brakesystem", "com", "conditionend", "conditionstart", "drivetyp", "dttmend", "dttmlastoverhaul", "dttmstart", "gearboxratio", "idrecrod", "make", "maxgearboxtorque", "maxpower", "maxspeed", "maxstructureload", "maxthrustbearingload", "maxtorque", "model", "refid", "shaftangle", "shafttyp", "sn", "szodmainshaft", "usertxt1", "usertxt2", "wellheadconn", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idrec: typing.Union[MetaOapg.properties.idrec, str, ],
        idwell: typing.Union[MetaOapg.properties.idwell, str, ],
        bearingtyp: typing.Union[MetaOapg.properties.bearingtyp, str, schemas.Unset] = schemas.unset,
        brakesystem: typing.Union[MetaOapg.properties.brakesystem, str, schemas.Unset] = schemas.unset,
        com: typing.Union[MetaOapg.properties.com, str, schemas.Unset] = schemas.unset,
        conditionend: typing.Union[MetaOapg.properties.conditionend, str, schemas.Unset] = schemas.unset,
        conditionstart: typing.Union[MetaOapg.properties.conditionstart, str, schemas.Unset] = schemas.unset,
        drivetyp: typing.Union[MetaOapg.properties.drivetyp, str, schemas.Unset] = schemas.unset,
        dttmend: typing.Union[MetaOapg.properties.dttmend, str, datetime, schemas.Unset] = schemas.unset,
        dttmlastoverhaul: typing.Union[MetaOapg.properties.dttmlastoverhaul, str, datetime, schemas.Unset] = schemas.unset,
        dttmstart: typing.Union[MetaOapg.properties.dttmstart, str, datetime, schemas.Unset] = schemas.unset,
        gearboxratio: typing.Union[MetaOapg.properties.gearboxratio, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        idrecrod: typing.Union[MetaOapg.properties.idrecrod, str, schemas.Unset] = schemas.unset,
        make: typing.Union[MetaOapg.properties.make, str, schemas.Unset] = schemas.unset,
        maxgearboxtorque: typing.Union[MetaOapg.properties.maxgearboxtorque, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        maxpower: typing.Union[MetaOapg.properties.maxpower, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        maxspeed: typing.Union[MetaOapg.properties.maxspeed, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        maxstructureload: typing.Union[MetaOapg.properties.maxstructureload, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        maxthrustbearingload: typing.Union[MetaOapg.properties.maxthrustbearingload, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        maxtorque: typing.Union[MetaOapg.properties.maxtorque, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        model: typing.Union[MetaOapg.properties.model, str, schemas.Unset] = schemas.unset,
        refid: typing.Union[MetaOapg.properties.refid, str, schemas.Unset] = schemas.unset,
        shaftangle: typing.Union[MetaOapg.properties.shaftangle, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        shafttyp: typing.Union[MetaOapg.properties.shafttyp, str, schemas.Unset] = schemas.unset,
        sn: typing.Union[MetaOapg.properties.sn, str, schemas.Unset] = schemas.unset,
        szodmainshaft: typing.Union[MetaOapg.properties.szodmainshaft, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        usertxt1: typing.Union[MetaOapg.properties.usertxt1, str, schemas.Unset] = schemas.unset,
        usertxt2: typing.Union[MetaOapg.properties.usertxt2, str, schemas.Unset] = schemas.unset,
        wellheadconn: typing.Union[MetaOapg.properties.wellheadconn, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'WellheadDriversData':
        return super().__new__(
            cls,
            *args,
            idrec=idrec,
            idwell=idwell,
            bearingtyp=bearingtyp,
            brakesystem=brakesystem,
            com=com,
            conditionend=conditionend,
            conditionstart=conditionstart,
            drivetyp=drivetyp,
            dttmend=dttmend,
            dttmlastoverhaul=dttmlastoverhaul,
            dttmstart=dttmstart,
            gearboxratio=gearboxratio,
            idrecrod=idrecrod,
            make=make,
            maxgearboxtorque=maxgearboxtorque,
            maxpower=maxpower,
            maxspeed=maxspeed,
            maxstructureload=maxstructureload,
            maxthrustbearingload=maxthrustbearingload,
            maxtorque=maxtorque,
            model=model,
            refid=refid,
            shaftangle=shaftangle,
            shafttyp=shafttyp,
            sn=sn,
            szodmainshaft=szodmainshaft,
            usertxt1=usertxt1,
            usertxt2=usertxt2,
            wellheadconn=wellheadconn,
            _configuration=_configuration,
            **kwargs,
        )
