# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class SandControlEquipData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idrec",
            "idwell",
        }
        
        class properties:
            idrec = schemas.StrSchema
            idwell = schemas.StrSchema
            carrierdensity = schemas.NumberSchema
            carrierfluid = schemas.StrSchema
            carrierviscosity = schemas.NumberSchema
            carriervolume = schemas.NumberSchema
            contractor = schemas.StrSchema
            icdnozzlemake = schemas.StrSchema
            icdnozzleno = schemas.IntSchema
            icdnozzlesz = schemas.NumberSchema
            idrecparent = schemas.StrSchema
            sandamount = schemas.NumberSchema
            sandsz = schemas.StrSchema
            screengauge = schemas.NumberSchema
            shroudtyp = schemas.StrSchema
            slurrydensity = schemas.NumberSchema
            slurryrate = schemas.NumberSchema
            slurryvolume = schemas.NumberSchema
            typ = schemas.StrSchema
            __annotations__ = {
                "idrec": idrec,
                "idwell": idwell,
                "carrierdensity": carrierdensity,
                "carrierfluid": carrierfluid,
                "carrierviscosity": carrierviscosity,
                "carriervolume": carriervolume,
                "contractor": contractor,
                "icdnozzlemake": icdnozzlemake,
                "icdnozzleno": icdnozzleno,
                "icdnozzlesz": icdnozzlesz,
                "idrecparent": idrecparent,
                "sandamount": sandamount,
                "sandsz": sandsz,
                "screengauge": screengauge,
                "shroudtyp": shroudtyp,
                "slurrydensity": slurrydensity,
                "slurryrate": slurryrate,
                "slurryvolume": slurryvolume,
                "typ": typ,
            }
    
    idrec: MetaOapg.properties.idrec
    idwell: MetaOapg.properties.idwell
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["carrierdensity"]) -> MetaOapg.properties.carrierdensity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["carrierfluid"]) -> MetaOapg.properties.carrierfluid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["carrierviscosity"]) -> MetaOapg.properties.carrierviscosity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["carriervolume"]) -> MetaOapg.properties.carriervolume: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contractor"]) -> MetaOapg.properties.contractor: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["icdnozzlemake"]) -> MetaOapg.properties.icdnozzlemake: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["icdnozzleno"]) -> MetaOapg.properties.icdnozzleno: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["icdnozzlesz"]) -> MetaOapg.properties.icdnozzlesz: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecparent"]) -> MetaOapg.properties.idrecparent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sandamount"]) -> MetaOapg.properties.sandamount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sandsz"]) -> MetaOapg.properties.sandsz: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["screengauge"]) -> MetaOapg.properties.screengauge: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shroudtyp"]) -> MetaOapg.properties.shroudtyp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["slurrydensity"]) -> MetaOapg.properties.slurrydensity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["slurryrate"]) -> MetaOapg.properties.slurryrate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["slurryvolume"]) -> MetaOapg.properties.slurryvolume: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["typ"]) -> MetaOapg.properties.typ: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "carrierdensity", "carrierfluid", "carrierviscosity", "carriervolume", "contractor", "icdnozzlemake", "icdnozzleno", "icdnozzlesz", "idrecparent", "sandamount", "sandsz", "screengauge", "shroudtyp", "slurrydensity", "slurryrate", "slurryvolume", "typ", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["carrierdensity"]) -> typing.Union[MetaOapg.properties.carrierdensity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["carrierfluid"]) -> typing.Union[MetaOapg.properties.carrierfluid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["carrierviscosity"]) -> typing.Union[MetaOapg.properties.carrierviscosity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["carriervolume"]) -> typing.Union[MetaOapg.properties.carriervolume, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contractor"]) -> typing.Union[MetaOapg.properties.contractor, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["icdnozzlemake"]) -> typing.Union[MetaOapg.properties.icdnozzlemake, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["icdnozzleno"]) -> typing.Union[MetaOapg.properties.icdnozzleno, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["icdnozzlesz"]) -> typing.Union[MetaOapg.properties.icdnozzlesz, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecparent"]) -> typing.Union[MetaOapg.properties.idrecparent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sandamount"]) -> typing.Union[MetaOapg.properties.sandamount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sandsz"]) -> typing.Union[MetaOapg.properties.sandsz, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["screengauge"]) -> typing.Union[MetaOapg.properties.screengauge, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shroudtyp"]) -> typing.Union[MetaOapg.properties.shroudtyp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["slurrydensity"]) -> typing.Union[MetaOapg.properties.slurrydensity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["slurryrate"]) -> typing.Union[MetaOapg.properties.slurryrate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["slurryvolume"]) -> typing.Union[MetaOapg.properties.slurryvolume, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["typ"]) -> typing.Union[MetaOapg.properties.typ, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "carrierdensity", "carrierfluid", "carrierviscosity", "carriervolume", "contractor", "icdnozzlemake", "icdnozzleno", "icdnozzlesz", "idrecparent", "sandamount", "sandsz", "screengauge", "shroudtyp", "slurrydensity", "slurryrate", "slurryvolume", "typ", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idrec: typing.Union[MetaOapg.properties.idrec, str, ],
        idwell: typing.Union[MetaOapg.properties.idwell, str, ],
        carrierdensity: typing.Union[MetaOapg.properties.carrierdensity, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        carrierfluid: typing.Union[MetaOapg.properties.carrierfluid, str, schemas.Unset] = schemas.unset,
        carrierviscosity: typing.Union[MetaOapg.properties.carrierviscosity, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        carriervolume: typing.Union[MetaOapg.properties.carriervolume, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        contractor: typing.Union[MetaOapg.properties.contractor, str, schemas.Unset] = schemas.unset,
        icdnozzlemake: typing.Union[MetaOapg.properties.icdnozzlemake, str, schemas.Unset] = schemas.unset,
        icdnozzleno: typing.Union[MetaOapg.properties.icdnozzleno, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        icdnozzlesz: typing.Union[MetaOapg.properties.icdnozzlesz, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        idrecparent: typing.Union[MetaOapg.properties.idrecparent, str, schemas.Unset] = schemas.unset,
        sandamount: typing.Union[MetaOapg.properties.sandamount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        sandsz: typing.Union[MetaOapg.properties.sandsz, str, schemas.Unset] = schemas.unset,
        screengauge: typing.Union[MetaOapg.properties.screengauge, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        shroudtyp: typing.Union[MetaOapg.properties.shroudtyp, str, schemas.Unset] = schemas.unset,
        slurrydensity: typing.Union[MetaOapg.properties.slurrydensity, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        slurryrate: typing.Union[MetaOapg.properties.slurryrate, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        slurryvolume: typing.Union[MetaOapg.properties.slurryvolume, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        typ: typing.Union[MetaOapg.properties.typ, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SandControlEquipData':
        return super().__new__(
            cls,
            *args,
            idrec=idrec,
            idwell=idwell,
            carrierdensity=carrierdensity,
            carrierfluid=carrierfluid,
            carrierviscosity=carrierviscosity,
            carriervolume=carriervolume,
            contractor=contractor,
            icdnozzlemake=icdnozzlemake,
            icdnozzleno=icdnozzleno,
            icdnozzlesz=icdnozzlesz,
            idrecparent=idrecparent,
            sandamount=sandamount,
            sandsz=sandsz,
            screengauge=screengauge,
            shroudtyp=shroudtyp,
            slurrydensity=slurrydensity,
            slurryrate=slurryrate,
            slurryvolume=slurryvolume,
            typ=typ,
            _configuration=_configuration,
            **kwargs,
        )
