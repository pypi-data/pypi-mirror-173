# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class PCPStatorDetailsData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idrec",
            "idwell",
        }
        
        class properties:
            idrec = schemas.StrSchema
            idwell = schemas.StrSchema
            benchtestdttm = schemas.DateTimeSchema
            benchtestfrictiontorque = schemas.NumberSchema
            benchtestpresdiff = schemas.NumberSchema
            benchtestspeed = schemas.NumberSchema
            benchtestvoldpeff = schemas.NumberSchema
            benchtestvoldpeffzero = schemas.NumberSchema
            distancetagbar = schemas.NumberSchema
            elastomermodel = schemas.StrSchema
            elastomertyp = schemas.StrSchema
            idrecparent = schemas.StrSchema
            lengthstator = schemas.NumberSchema
            lobeconfig = schemas.StrSchema
            maxtemp = schemas.NumberSchema
            perforated = schemas.BoolSchema
            pitch = schemas.NumberSchema
            szodmin = schemas.NumberSchema
            __annotations__ = {
                "idrec": idrec,
                "idwell": idwell,
                "benchtestdttm": benchtestdttm,
                "benchtestfrictiontorque": benchtestfrictiontorque,
                "benchtestpresdiff": benchtestpresdiff,
                "benchtestspeed": benchtestspeed,
                "benchtestvoldpeff": benchtestvoldpeff,
                "benchtestvoldpeffzero": benchtestvoldpeffzero,
                "distancetagbar": distancetagbar,
                "elastomermodel": elastomermodel,
                "elastomertyp": elastomertyp,
                "idrecparent": idrecparent,
                "lengthstator": lengthstator,
                "lobeconfig": lobeconfig,
                "maxtemp": maxtemp,
                "perforated": perforated,
                "pitch": pitch,
                "szodmin": szodmin,
            }
    
    idrec: MetaOapg.properties.idrec
    idwell: MetaOapg.properties.idwell
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["benchtestdttm"]) -> MetaOapg.properties.benchtestdttm: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["benchtestfrictiontorque"]) -> MetaOapg.properties.benchtestfrictiontorque: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["benchtestpresdiff"]) -> MetaOapg.properties.benchtestpresdiff: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["benchtestspeed"]) -> MetaOapg.properties.benchtestspeed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["benchtestvoldpeff"]) -> MetaOapg.properties.benchtestvoldpeff: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["benchtestvoldpeffzero"]) -> MetaOapg.properties.benchtestvoldpeffzero: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["distancetagbar"]) -> MetaOapg.properties.distancetagbar: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["elastomermodel"]) -> MetaOapg.properties.elastomermodel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["elastomertyp"]) -> MetaOapg.properties.elastomertyp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecparent"]) -> MetaOapg.properties.idrecparent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lengthstator"]) -> MetaOapg.properties.lengthstator: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lobeconfig"]) -> MetaOapg.properties.lobeconfig: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maxtemp"]) -> MetaOapg.properties.maxtemp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["perforated"]) -> MetaOapg.properties.perforated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pitch"]) -> MetaOapg.properties.pitch: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["szodmin"]) -> MetaOapg.properties.szodmin: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "benchtestdttm", "benchtestfrictiontorque", "benchtestpresdiff", "benchtestspeed", "benchtestvoldpeff", "benchtestvoldpeffzero", "distancetagbar", "elastomermodel", "elastomertyp", "idrecparent", "lengthstator", "lobeconfig", "maxtemp", "perforated", "pitch", "szodmin", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["benchtestdttm"]) -> typing.Union[MetaOapg.properties.benchtestdttm, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["benchtestfrictiontorque"]) -> typing.Union[MetaOapg.properties.benchtestfrictiontorque, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["benchtestpresdiff"]) -> typing.Union[MetaOapg.properties.benchtestpresdiff, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["benchtestspeed"]) -> typing.Union[MetaOapg.properties.benchtestspeed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["benchtestvoldpeff"]) -> typing.Union[MetaOapg.properties.benchtestvoldpeff, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["benchtestvoldpeffzero"]) -> typing.Union[MetaOapg.properties.benchtestvoldpeffzero, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["distancetagbar"]) -> typing.Union[MetaOapg.properties.distancetagbar, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["elastomermodel"]) -> typing.Union[MetaOapg.properties.elastomermodel, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["elastomertyp"]) -> typing.Union[MetaOapg.properties.elastomertyp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecparent"]) -> typing.Union[MetaOapg.properties.idrecparent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lengthstator"]) -> typing.Union[MetaOapg.properties.lengthstator, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lobeconfig"]) -> typing.Union[MetaOapg.properties.lobeconfig, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maxtemp"]) -> typing.Union[MetaOapg.properties.maxtemp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["perforated"]) -> typing.Union[MetaOapg.properties.perforated, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pitch"]) -> typing.Union[MetaOapg.properties.pitch, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["szodmin"]) -> typing.Union[MetaOapg.properties.szodmin, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "benchtestdttm", "benchtestfrictiontorque", "benchtestpresdiff", "benchtestspeed", "benchtestvoldpeff", "benchtestvoldpeffzero", "distancetagbar", "elastomermodel", "elastomertyp", "idrecparent", "lengthstator", "lobeconfig", "maxtemp", "perforated", "pitch", "szodmin", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idrec: typing.Union[MetaOapg.properties.idrec, str, ],
        idwell: typing.Union[MetaOapg.properties.idwell, str, ],
        benchtestdttm: typing.Union[MetaOapg.properties.benchtestdttm, str, datetime, schemas.Unset] = schemas.unset,
        benchtestfrictiontorque: typing.Union[MetaOapg.properties.benchtestfrictiontorque, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        benchtestpresdiff: typing.Union[MetaOapg.properties.benchtestpresdiff, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        benchtestspeed: typing.Union[MetaOapg.properties.benchtestspeed, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        benchtestvoldpeff: typing.Union[MetaOapg.properties.benchtestvoldpeff, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        benchtestvoldpeffzero: typing.Union[MetaOapg.properties.benchtestvoldpeffzero, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        distancetagbar: typing.Union[MetaOapg.properties.distancetagbar, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        elastomermodel: typing.Union[MetaOapg.properties.elastomermodel, str, schemas.Unset] = schemas.unset,
        elastomertyp: typing.Union[MetaOapg.properties.elastomertyp, str, schemas.Unset] = schemas.unset,
        idrecparent: typing.Union[MetaOapg.properties.idrecparent, str, schemas.Unset] = schemas.unset,
        lengthstator: typing.Union[MetaOapg.properties.lengthstator, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        lobeconfig: typing.Union[MetaOapg.properties.lobeconfig, str, schemas.Unset] = schemas.unset,
        maxtemp: typing.Union[MetaOapg.properties.maxtemp, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        perforated: typing.Union[MetaOapg.properties.perforated, bool, schemas.Unset] = schemas.unset,
        pitch: typing.Union[MetaOapg.properties.pitch, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        szodmin: typing.Union[MetaOapg.properties.szodmin, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PCPStatorDetailsData':
        return super().__new__(
            cls,
            *args,
            idrec=idrec,
            idwell=idwell,
            benchtestdttm=benchtestdttm,
            benchtestfrictiontorque=benchtestfrictiontorque,
            benchtestpresdiff=benchtestpresdiff,
            benchtestspeed=benchtestspeed,
            benchtestvoldpeff=benchtestvoldpeff,
            benchtestvoldpeffzero=benchtestvoldpeffzero,
            distancetagbar=distancetagbar,
            elastomermodel=elastomermodel,
            elastomertyp=elastomertyp,
            idrecparent=idrecparent,
            lengthstator=lengthstator,
            lobeconfig=lobeconfig,
            maxtemp=maxtemp,
            perforated=perforated,
            pitch=pitch,
            szodmin=szodmin,
            _configuration=_configuration,
            **kwargs,
        )
