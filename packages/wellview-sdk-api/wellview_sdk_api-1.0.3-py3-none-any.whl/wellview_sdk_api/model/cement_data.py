# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class CementData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idrec",
            "idwell",
        }
        
        class properties:
            idrec = schemas.StrSchema
            idwell = schemas.StrSchema
            cementsubtyp = schemas.StrSchema
            cementtyp = schemas.StrSchema
            com = schemas.StrSchema
            contractor = schemas.StrSchema
            contractsupt = schemas.StrSchema
            des = schemas.StrSchema
            deseval = schemas.StrSchema
            dttmend = schemas.DateTimeSchema
            dttmstart = schemas.DateTimeSchema
            evalmethod = schemas.StrSchema
            idrecjob = schemas.StrSchema
            idrecstring = schemas.StrSchema
            idrecwellbore = schemas.StrSchema
            objective = schemas.StrSchema
            proposed = schemas.BoolSchema
            resulttechnical = schemas.StrSchema
            resulttechnicaldetail = schemas.StrSchema
            resulttechnicalnote = schemas.StrSchema
            __annotations__ = {
                "idrec": idrec,
                "idwell": idwell,
                "cementsubtyp": cementsubtyp,
                "cementtyp": cementtyp,
                "com": com,
                "contractor": contractor,
                "contractsupt": contractsupt,
                "des": des,
                "deseval": deseval,
                "dttmend": dttmend,
                "dttmstart": dttmstart,
                "evalmethod": evalmethod,
                "idrecjob": idrecjob,
                "idrecstring": idrecstring,
                "idrecwellbore": idrecwellbore,
                "objective": objective,
                "proposed": proposed,
                "resulttechnical": resulttechnical,
                "resulttechnicaldetail": resulttechnicaldetail,
                "resulttechnicalnote": resulttechnicalnote,
            }
    
    idrec: MetaOapg.properties.idrec
    idwell: MetaOapg.properties.idwell
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cementsubtyp"]) -> MetaOapg.properties.cementsubtyp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cementtyp"]) -> MetaOapg.properties.cementtyp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["com"]) -> MetaOapg.properties.com: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contractor"]) -> MetaOapg.properties.contractor: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contractsupt"]) -> MetaOapg.properties.contractsupt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["des"]) -> MetaOapg.properties.des: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deseval"]) -> MetaOapg.properties.deseval: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmend"]) -> MetaOapg.properties.dttmend: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmstart"]) -> MetaOapg.properties.dttmstart: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["evalmethod"]) -> MetaOapg.properties.evalmethod: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecjob"]) -> MetaOapg.properties.idrecjob: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecstring"]) -> MetaOapg.properties.idrecstring: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecwellbore"]) -> MetaOapg.properties.idrecwellbore: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["objective"]) -> MetaOapg.properties.objective: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["proposed"]) -> MetaOapg.properties.proposed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["resulttechnical"]) -> MetaOapg.properties.resulttechnical: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["resulttechnicaldetail"]) -> MetaOapg.properties.resulttechnicaldetail: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["resulttechnicalnote"]) -> MetaOapg.properties.resulttechnicalnote: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "cementsubtyp", "cementtyp", "com", "contractor", "contractsupt", "des", "deseval", "dttmend", "dttmstart", "evalmethod", "idrecjob", "idrecstring", "idrecwellbore", "objective", "proposed", "resulttechnical", "resulttechnicaldetail", "resulttechnicalnote", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cementsubtyp"]) -> typing.Union[MetaOapg.properties.cementsubtyp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cementtyp"]) -> typing.Union[MetaOapg.properties.cementtyp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["com"]) -> typing.Union[MetaOapg.properties.com, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contractor"]) -> typing.Union[MetaOapg.properties.contractor, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contractsupt"]) -> typing.Union[MetaOapg.properties.contractsupt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["des"]) -> typing.Union[MetaOapg.properties.des, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deseval"]) -> typing.Union[MetaOapg.properties.deseval, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmend"]) -> typing.Union[MetaOapg.properties.dttmend, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmstart"]) -> typing.Union[MetaOapg.properties.dttmstart, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["evalmethod"]) -> typing.Union[MetaOapg.properties.evalmethod, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecjob"]) -> typing.Union[MetaOapg.properties.idrecjob, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecstring"]) -> typing.Union[MetaOapg.properties.idrecstring, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecwellbore"]) -> typing.Union[MetaOapg.properties.idrecwellbore, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["objective"]) -> typing.Union[MetaOapg.properties.objective, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["proposed"]) -> typing.Union[MetaOapg.properties.proposed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["resulttechnical"]) -> typing.Union[MetaOapg.properties.resulttechnical, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["resulttechnicaldetail"]) -> typing.Union[MetaOapg.properties.resulttechnicaldetail, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["resulttechnicalnote"]) -> typing.Union[MetaOapg.properties.resulttechnicalnote, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "cementsubtyp", "cementtyp", "com", "contractor", "contractsupt", "des", "deseval", "dttmend", "dttmstart", "evalmethod", "idrecjob", "idrecstring", "idrecwellbore", "objective", "proposed", "resulttechnical", "resulttechnicaldetail", "resulttechnicalnote", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idrec: typing.Union[MetaOapg.properties.idrec, str, ],
        idwell: typing.Union[MetaOapg.properties.idwell, str, ],
        cementsubtyp: typing.Union[MetaOapg.properties.cementsubtyp, str, schemas.Unset] = schemas.unset,
        cementtyp: typing.Union[MetaOapg.properties.cementtyp, str, schemas.Unset] = schemas.unset,
        com: typing.Union[MetaOapg.properties.com, str, schemas.Unset] = schemas.unset,
        contractor: typing.Union[MetaOapg.properties.contractor, str, schemas.Unset] = schemas.unset,
        contractsupt: typing.Union[MetaOapg.properties.contractsupt, str, schemas.Unset] = schemas.unset,
        des: typing.Union[MetaOapg.properties.des, str, schemas.Unset] = schemas.unset,
        deseval: typing.Union[MetaOapg.properties.deseval, str, schemas.Unset] = schemas.unset,
        dttmend: typing.Union[MetaOapg.properties.dttmend, str, datetime, schemas.Unset] = schemas.unset,
        dttmstart: typing.Union[MetaOapg.properties.dttmstart, str, datetime, schemas.Unset] = schemas.unset,
        evalmethod: typing.Union[MetaOapg.properties.evalmethod, str, schemas.Unset] = schemas.unset,
        idrecjob: typing.Union[MetaOapg.properties.idrecjob, str, schemas.Unset] = schemas.unset,
        idrecstring: typing.Union[MetaOapg.properties.idrecstring, str, schemas.Unset] = schemas.unset,
        idrecwellbore: typing.Union[MetaOapg.properties.idrecwellbore, str, schemas.Unset] = schemas.unset,
        objective: typing.Union[MetaOapg.properties.objective, str, schemas.Unset] = schemas.unset,
        proposed: typing.Union[MetaOapg.properties.proposed, bool, schemas.Unset] = schemas.unset,
        resulttechnical: typing.Union[MetaOapg.properties.resulttechnical, str, schemas.Unset] = schemas.unset,
        resulttechnicaldetail: typing.Union[MetaOapg.properties.resulttechnicaldetail, str, schemas.Unset] = schemas.unset,
        resulttechnicalnote: typing.Union[MetaOapg.properties.resulttechnicalnote, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CementData':
        return super().__new__(
            cls,
            *args,
            idrec=idrec,
            idwell=idwell,
            cementsubtyp=cementsubtyp,
            cementtyp=cementtyp,
            com=com,
            contractor=contractor,
            contractsupt=contractsupt,
            des=des,
            deseval=deseval,
            dttmend=dttmend,
            dttmstart=dttmstart,
            evalmethod=evalmethod,
            idrecjob=idrecjob,
            idrecstring=idrecstring,
            idrecwellbore=idrecwellbore,
            objective=objective,
            proposed=proposed,
            resulttechnical=resulttechnical,
            resulttechnicaldetail=resulttechnicaldetail,
            resulttechnicalnote=resulttechnicalnote,
            _configuration=_configuration,
            **kwargs,
        )
