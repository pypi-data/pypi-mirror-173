# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class RigCrewHoursData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idrec",
            "idwell",
        }
        
        class properties:
            idrec = schemas.StrSchema
            idwell = schemas.StrSchema
            com = schemas.StrSchema
            durationoff = schemas.NumberSchema
            durationother = schemas.NumberSchema
            durationsick = schemas.NumberSchema
            durationstandby = schemas.NumberSchema
            durationworkot = schemas.NumberSchema
            durationworkreg = schemas.NumberSchema
            idrecjobrigcrew = schemas.StrSchema
            idrecparent = schemas.StrSchema
            othertyp = schemas.StrSchema
            shifttyp = schemas.StrSchema
            syscarryfwdp = schemas.BoolSchema
            __annotations__ = {
                "idrec": idrec,
                "idwell": idwell,
                "com": com,
                "durationoff": durationoff,
                "durationother": durationother,
                "durationsick": durationsick,
                "durationstandby": durationstandby,
                "durationworkot": durationworkot,
                "durationworkreg": durationworkreg,
                "idrecjobrigcrew": idrecjobrigcrew,
                "idrecparent": idrecparent,
                "othertyp": othertyp,
                "shifttyp": shifttyp,
                "syscarryfwdp": syscarryfwdp,
            }
    
    idrec: MetaOapg.properties.idrec
    idwell: MetaOapg.properties.idwell
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["com"]) -> MetaOapg.properties.com: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["durationoff"]) -> MetaOapg.properties.durationoff: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["durationother"]) -> MetaOapg.properties.durationother: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["durationsick"]) -> MetaOapg.properties.durationsick: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["durationstandby"]) -> MetaOapg.properties.durationstandby: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["durationworkot"]) -> MetaOapg.properties.durationworkot: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["durationworkreg"]) -> MetaOapg.properties.durationworkreg: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecjobrigcrew"]) -> MetaOapg.properties.idrecjobrigcrew: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecparent"]) -> MetaOapg.properties.idrecparent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["othertyp"]) -> MetaOapg.properties.othertyp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shifttyp"]) -> MetaOapg.properties.shifttyp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["syscarryfwdp"]) -> MetaOapg.properties.syscarryfwdp: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "com", "durationoff", "durationother", "durationsick", "durationstandby", "durationworkot", "durationworkreg", "idrecjobrigcrew", "idrecparent", "othertyp", "shifttyp", "syscarryfwdp", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["com"]) -> typing.Union[MetaOapg.properties.com, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["durationoff"]) -> typing.Union[MetaOapg.properties.durationoff, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["durationother"]) -> typing.Union[MetaOapg.properties.durationother, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["durationsick"]) -> typing.Union[MetaOapg.properties.durationsick, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["durationstandby"]) -> typing.Union[MetaOapg.properties.durationstandby, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["durationworkot"]) -> typing.Union[MetaOapg.properties.durationworkot, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["durationworkreg"]) -> typing.Union[MetaOapg.properties.durationworkreg, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecjobrigcrew"]) -> typing.Union[MetaOapg.properties.idrecjobrigcrew, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecparent"]) -> typing.Union[MetaOapg.properties.idrecparent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["othertyp"]) -> typing.Union[MetaOapg.properties.othertyp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shifttyp"]) -> typing.Union[MetaOapg.properties.shifttyp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["syscarryfwdp"]) -> typing.Union[MetaOapg.properties.syscarryfwdp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "com", "durationoff", "durationother", "durationsick", "durationstandby", "durationworkot", "durationworkreg", "idrecjobrigcrew", "idrecparent", "othertyp", "shifttyp", "syscarryfwdp", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idrec: typing.Union[MetaOapg.properties.idrec, str, ],
        idwell: typing.Union[MetaOapg.properties.idwell, str, ],
        com: typing.Union[MetaOapg.properties.com, str, schemas.Unset] = schemas.unset,
        durationoff: typing.Union[MetaOapg.properties.durationoff, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        durationother: typing.Union[MetaOapg.properties.durationother, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        durationsick: typing.Union[MetaOapg.properties.durationsick, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        durationstandby: typing.Union[MetaOapg.properties.durationstandby, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        durationworkot: typing.Union[MetaOapg.properties.durationworkot, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        durationworkreg: typing.Union[MetaOapg.properties.durationworkreg, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        idrecjobrigcrew: typing.Union[MetaOapg.properties.idrecjobrigcrew, str, schemas.Unset] = schemas.unset,
        idrecparent: typing.Union[MetaOapg.properties.idrecparent, str, schemas.Unset] = schemas.unset,
        othertyp: typing.Union[MetaOapg.properties.othertyp, str, schemas.Unset] = schemas.unset,
        shifttyp: typing.Union[MetaOapg.properties.shifttyp, str, schemas.Unset] = schemas.unset,
        syscarryfwdp: typing.Union[MetaOapg.properties.syscarryfwdp, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'RigCrewHoursData':
        return super().__new__(
            cls,
            *args,
            idrec=idrec,
            idwell=idwell,
            com=com,
            durationoff=durationoff,
            durationother=durationother,
            durationsick=durationsick,
            durationstandby=durationstandby,
            durationworkot=durationworkot,
            durationworkreg=durationworkreg,
            idrecjobrigcrew=idrecjobrigcrew,
            idrecparent=idrecparent,
            othertyp=othertyp,
            shifttyp=shifttyp,
            syscarryfwdp=syscarryfwdp,
            _configuration=_configuration,
            **kwargs,
        )
