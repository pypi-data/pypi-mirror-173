# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class GasEmissionData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idrec",
            "idwell",
        }
        
        class properties:
            idrec = schemas.StrSchema
            idwell = schemas.StrSchema
            amount = schemas.NumberSchema
            amountunitlabel = schemas.StrSchema
            com = schemas.StrSchema
            des = schemas.StrSchema
            dur = schemas.NumberSchema
            idrecitem = schemas.StrSchema
            idrecparent = schemas.StrSchema
            idreczonecompletion = schemas.StrSchema
            methodcalculated = schemas.StrSchema
            methodmeasured = schemas.StrSchema
            prescas = schemas.NumberSchema
            presdownstream = schemas.NumberSchema
            prestub = schemas.NumberSchema
            presupstream = schemas.NumberSchema
            ratiodisposed = schemas.NumberSchema
            reason = schemas.StrSchema
            szdiachoke = schemas.NumberSchema
            szdiaorifice = schemas.NumberSchema
            temp = schemas.NumberSchema
            typ1 = schemas.StrSchema
            typ2 = schemas.StrSchema
            __annotations__ = {
                "idrec": idrec,
                "idwell": idwell,
                "amount": amount,
                "amountunitlabel": amountunitlabel,
                "com": com,
                "des": des,
                "dur": dur,
                "idrecitem": idrecitem,
                "idrecparent": idrecparent,
                "idreczonecompletion": idreczonecompletion,
                "methodcalculated": methodcalculated,
                "methodmeasured": methodmeasured,
                "prescas": prescas,
                "presdownstream": presdownstream,
                "prestub": prestub,
                "presupstream": presupstream,
                "ratiodisposed": ratiodisposed,
                "reason": reason,
                "szdiachoke": szdiachoke,
                "szdiaorifice": szdiaorifice,
                "temp": temp,
                "typ1": typ1,
                "typ2": typ2,
            }
    
    idrec: MetaOapg.properties.idrec
    idwell: MetaOapg.properties.idwell
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amountunitlabel"]) -> MetaOapg.properties.amountunitlabel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["com"]) -> MetaOapg.properties.com: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["des"]) -> MetaOapg.properties.des: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dur"]) -> MetaOapg.properties.dur: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecitem"]) -> MetaOapg.properties.idrecitem: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecparent"]) -> MetaOapg.properties.idrecparent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idreczonecompletion"]) -> MetaOapg.properties.idreczonecompletion: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["methodcalculated"]) -> MetaOapg.properties.methodcalculated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["methodmeasured"]) -> MetaOapg.properties.methodmeasured: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["prescas"]) -> MetaOapg.properties.prescas: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["presdownstream"]) -> MetaOapg.properties.presdownstream: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["prestub"]) -> MetaOapg.properties.prestub: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["presupstream"]) -> MetaOapg.properties.presupstream: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ratiodisposed"]) -> MetaOapg.properties.ratiodisposed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reason"]) -> MetaOapg.properties.reason: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["szdiachoke"]) -> MetaOapg.properties.szdiachoke: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["szdiaorifice"]) -> MetaOapg.properties.szdiaorifice: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["temp"]) -> MetaOapg.properties.temp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["typ1"]) -> MetaOapg.properties.typ1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["typ2"]) -> MetaOapg.properties.typ2: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "amount", "amountunitlabel", "com", "des", "dur", "idrecitem", "idrecparent", "idreczonecompletion", "methodcalculated", "methodmeasured", "prescas", "presdownstream", "prestub", "presupstream", "ratiodisposed", "reason", "szdiachoke", "szdiaorifice", "temp", "typ1", "typ2", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> typing.Union[MetaOapg.properties.amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amountunitlabel"]) -> typing.Union[MetaOapg.properties.amountunitlabel, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["com"]) -> typing.Union[MetaOapg.properties.com, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["des"]) -> typing.Union[MetaOapg.properties.des, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dur"]) -> typing.Union[MetaOapg.properties.dur, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecitem"]) -> typing.Union[MetaOapg.properties.idrecitem, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecparent"]) -> typing.Union[MetaOapg.properties.idrecparent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idreczonecompletion"]) -> typing.Union[MetaOapg.properties.idreczonecompletion, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["methodcalculated"]) -> typing.Union[MetaOapg.properties.methodcalculated, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["methodmeasured"]) -> typing.Union[MetaOapg.properties.methodmeasured, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["prescas"]) -> typing.Union[MetaOapg.properties.prescas, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["presdownstream"]) -> typing.Union[MetaOapg.properties.presdownstream, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["prestub"]) -> typing.Union[MetaOapg.properties.prestub, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["presupstream"]) -> typing.Union[MetaOapg.properties.presupstream, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ratiodisposed"]) -> typing.Union[MetaOapg.properties.ratiodisposed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reason"]) -> typing.Union[MetaOapg.properties.reason, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["szdiachoke"]) -> typing.Union[MetaOapg.properties.szdiachoke, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["szdiaorifice"]) -> typing.Union[MetaOapg.properties.szdiaorifice, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["temp"]) -> typing.Union[MetaOapg.properties.temp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["typ1"]) -> typing.Union[MetaOapg.properties.typ1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["typ2"]) -> typing.Union[MetaOapg.properties.typ2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "amount", "amountunitlabel", "com", "des", "dur", "idrecitem", "idrecparent", "idreczonecompletion", "methodcalculated", "methodmeasured", "prescas", "presdownstream", "prestub", "presupstream", "ratiodisposed", "reason", "szdiachoke", "szdiaorifice", "temp", "typ1", "typ2", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idrec: typing.Union[MetaOapg.properties.idrec, str, ],
        idwell: typing.Union[MetaOapg.properties.idwell, str, ],
        amount: typing.Union[MetaOapg.properties.amount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        amountunitlabel: typing.Union[MetaOapg.properties.amountunitlabel, str, schemas.Unset] = schemas.unset,
        com: typing.Union[MetaOapg.properties.com, str, schemas.Unset] = schemas.unset,
        des: typing.Union[MetaOapg.properties.des, str, schemas.Unset] = schemas.unset,
        dur: typing.Union[MetaOapg.properties.dur, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        idrecitem: typing.Union[MetaOapg.properties.idrecitem, str, schemas.Unset] = schemas.unset,
        idrecparent: typing.Union[MetaOapg.properties.idrecparent, str, schemas.Unset] = schemas.unset,
        idreczonecompletion: typing.Union[MetaOapg.properties.idreczonecompletion, str, schemas.Unset] = schemas.unset,
        methodcalculated: typing.Union[MetaOapg.properties.methodcalculated, str, schemas.Unset] = schemas.unset,
        methodmeasured: typing.Union[MetaOapg.properties.methodmeasured, str, schemas.Unset] = schemas.unset,
        prescas: typing.Union[MetaOapg.properties.prescas, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        presdownstream: typing.Union[MetaOapg.properties.presdownstream, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        prestub: typing.Union[MetaOapg.properties.prestub, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        presupstream: typing.Union[MetaOapg.properties.presupstream, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        ratiodisposed: typing.Union[MetaOapg.properties.ratiodisposed, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        reason: typing.Union[MetaOapg.properties.reason, str, schemas.Unset] = schemas.unset,
        szdiachoke: typing.Union[MetaOapg.properties.szdiachoke, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        szdiaorifice: typing.Union[MetaOapg.properties.szdiaorifice, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        temp: typing.Union[MetaOapg.properties.temp, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        typ1: typing.Union[MetaOapg.properties.typ1, str, schemas.Unset] = schemas.unset,
        typ2: typing.Union[MetaOapg.properties.typ2, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'GasEmissionData':
        return super().__new__(
            cls,
            *args,
            idrec=idrec,
            idwell=idwell,
            amount=amount,
            amountunitlabel=amountunitlabel,
            com=com,
            des=des,
            dur=dur,
            idrecitem=idrecitem,
            idrecparent=idrecparent,
            idreczonecompletion=idreczonecompletion,
            methodcalculated=methodcalculated,
            methodmeasured=methodmeasured,
            prescas=prescas,
            presdownstream=presdownstream,
            prestub=prestub,
            presupstream=presupstream,
            ratiodisposed=ratiodisposed,
            reason=reason,
            szdiachoke=szdiachoke,
            szdiaorifice=szdiaorifice,
            temp=temp,
            typ1=typ1,
            typ2=typ2,
            _configuration=_configuration,
            **kwargs,
        )
