# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class OperatingProblemsData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idrec",
            "idwell",
        }
        
        class properties:
            idrec = schemas.StrSchema
            idwell = schemas.StrSchema
            actiontaken = schemas.StrSchema
            cause = schemas.StrSchema
            causecom = schemas.StrSchema
            causedetail = schemas.StrSchema
            com = schemas.StrSchema
            des = schemas.StrSchema
            dttmaction = schemas.DateTimeSchema
            dttmend = schemas.DateTimeSchema
            dttmstart = schemas.DateTimeSchema
            estcost = schemas.NumberSchema
            estreservelosscond = schemas.NumberSchema
            estreservelossgas = schemas.NumberSchema
            estreservelossoil = schemas.NumberSchema
            estreservelosswater = schemas.NumberSchema
            failuresymptom = schemas.StrSchema
            failuresystem = schemas.StrSchema
            idrecjob = schemas.StrSchema
            idreczonecompletion = schemas.StrSchema
            performanceaffect = schemas.BoolSchema
            priority = schemas.StrSchema
            ratefailcond = schemas.NumberSchema
            ratefailgas = schemas.NumberSchema
            ratefailoil = schemas.NumberSchema
            ratefailwater = schemas.NumberSchema
            rateoptimumcond = schemas.NumberSchema
            rateoptimumgas = schemas.NumberSchema
            rateoptimumoil = schemas.NumberSchema
            rateoptimumwater = schemas.NumberSchema
            regulatoryissue = schemas.BoolSchema
            reportto = schemas.StrSchema
            status1 = schemas.StrSchema
            status2 = schemas.StrSchema
            typ = schemas.StrSchema
            typdetail = schemas.StrSchema
            usernum1 = schemas.NumberSchema
            usernum2 = schemas.NumberSchema
            usertxt1 = schemas.StrSchema
            usertxt2 = schemas.StrSchema
            usertxt3 = schemas.StrSchema
            __annotations__ = {
                "idrec": idrec,
                "idwell": idwell,
                "actiontaken": actiontaken,
                "cause": cause,
                "causecom": causecom,
                "causedetail": causedetail,
                "com": com,
                "des": des,
                "dttmaction": dttmaction,
                "dttmend": dttmend,
                "dttmstart": dttmstart,
                "estcost": estcost,
                "estreservelosscond": estreservelosscond,
                "estreservelossgas": estreservelossgas,
                "estreservelossoil": estreservelossoil,
                "estreservelosswater": estreservelosswater,
                "failuresymptom": failuresymptom,
                "failuresystem": failuresystem,
                "idrecjob": idrecjob,
                "idreczonecompletion": idreczonecompletion,
                "performanceaffect": performanceaffect,
                "priority": priority,
                "ratefailcond": ratefailcond,
                "ratefailgas": ratefailgas,
                "ratefailoil": ratefailoil,
                "ratefailwater": ratefailwater,
                "rateoptimumcond": rateoptimumcond,
                "rateoptimumgas": rateoptimumgas,
                "rateoptimumoil": rateoptimumoil,
                "rateoptimumwater": rateoptimumwater,
                "regulatoryissue": regulatoryissue,
                "reportto": reportto,
                "status1": status1,
                "status2": status2,
                "typ": typ,
                "typdetail": typdetail,
                "usernum1": usernum1,
                "usernum2": usernum2,
                "usertxt1": usertxt1,
                "usertxt2": usertxt2,
                "usertxt3": usertxt3,
            }
    
    idrec: MetaOapg.properties.idrec
    idwell: MetaOapg.properties.idwell
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["actiontaken"]) -> MetaOapg.properties.actiontaken: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cause"]) -> MetaOapg.properties.cause: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["causecom"]) -> MetaOapg.properties.causecom: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["causedetail"]) -> MetaOapg.properties.causedetail: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["com"]) -> MetaOapg.properties.com: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["des"]) -> MetaOapg.properties.des: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmaction"]) -> MetaOapg.properties.dttmaction: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmend"]) -> MetaOapg.properties.dttmend: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmstart"]) -> MetaOapg.properties.dttmstart: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["estcost"]) -> MetaOapg.properties.estcost: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["estreservelosscond"]) -> MetaOapg.properties.estreservelosscond: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["estreservelossgas"]) -> MetaOapg.properties.estreservelossgas: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["estreservelossoil"]) -> MetaOapg.properties.estreservelossoil: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["estreservelosswater"]) -> MetaOapg.properties.estreservelosswater: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["failuresymptom"]) -> MetaOapg.properties.failuresymptom: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["failuresystem"]) -> MetaOapg.properties.failuresystem: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecjob"]) -> MetaOapg.properties.idrecjob: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idreczonecompletion"]) -> MetaOapg.properties.idreczonecompletion: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["performanceaffect"]) -> MetaOapg.properties.performanceaffect: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["priority"]) -> MetaOapg.properties.priority: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ratefailcond"]) -> MetaOapg.properties.ratefailcond: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ratefailgas"]) -> MetaOapg.properties.ratefailgas: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ratefailoil"]) -> MetaOapg.properties.ratefailoil: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ratefailwater"]) -> MetaOapg.properties.ratefailwater: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rateoptimumcond"]) -> MetaOapg.properties.rateoptimumcond: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rateoptimumgas"]) -> MetaOapg.properties.rateoptimumgas: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rateoptimumoil"]) -> MetaOapg.properties.rateoptimumoil: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rateoptimumwater"]) -> MetaOapg.properties.rateoptimumwater: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["regulatoryissue"]) -> MetaOapg.properties.regulatoryissue: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reportto"]) -> MetaOapg.properties.reportto: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status1"]) -> MetaOapg.properties.status1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status2"]) -> MetaOapg.properties.status2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["typ"]) -> MetaOapg.properties.typ: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["typdetail"]) -> MetaOapg.properties.typdetail: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usernum1"]) -> MetaOapg.properties.usernum1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usernum2"]) -> MetaOapg.properties.usernum2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usertxt1"]) -> MetaOapg.properties.usertxt1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usertxt2"]) -> MetaOapg.properties.usertxt2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usertxt3"]) -> MetaOapg.properties.usertxt3: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "actiontaken", "cause", "causecom", "causedetail", "com", "des", "dttmaction", "dttmend", "dttmstart", "estcost", "estreservelosscond", "estreservelossgas", "estreservelossoil", "estreservelosswater", "failuresymptom", "failuresystem", "idrecjob", "idreczonecompletion", "performanceaffect", "priority", "ratefailcond", "ratefailgas", "ratefailoil", "ratefailwater", "rateoptimumcond", "rateoptimumgas", "rateoptimumoil", "rateoptimumwater", "regulatoryissue", "reportto", "status1", "status2", "typ", "typdetail", "usernum1", "usernum2", "usertxt1", "usertxt2", "usertxt3", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["actiontaken"]) -> typing.Union[MetaOapg.properties.actiontaken, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cause"]) -> typing.Union[MetaOapg.properties.cause, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["causecom"]) -> typing.Union[MetaOapg.properties.causecom, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["causedetail"]) -> typing.Union[MetaOapg.properties.causedetail, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["com"]) -> typing.Union[MetaOapg.properties.com, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["des"]) -> typing.Union[MetaOapg.properties.des, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmaction"]) -> typing.Union[MetaOapg.properties.dttmaction, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmend"]) -> typing.Union[MetaOapg.properties.dttmend, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmstart"]) -> typing.Union[MetaOapg.properties.dttmstart, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["estcost"]) -> typing.Union[MetaOapg.properties.estcost, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["estreservelosscond"]) -> typing.Union[MetaOapg.properties.estreservelosscond, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["estreservelossgas"]) -> typing.Union[MetaOapg.properties.estreservelossgas, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["estreservelossoil"]) -> typing.Union[MetaOapg.properties.estreservelossoil, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["estreservelosswater"]) -> typing.Union[MetaOapg.properties.estreservelosswater, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["failuresymptom"]) -> typing.Union[MetaOapg.properties.failuresymptom, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["failuresystem"]) -> typing.Union[MetaOapg.properties.failuresystem, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecjob"]) -> typing.Union[MetaOapg.properties.idrecjob, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idreczonecompletion"]) -> typing.Union[MetaOapg.properties.idreczonecompletion, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["performanceaffect"]) -> typing.Union[MetaOapg.properties.performanceaffect, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["priority"]) -> typing.Union[MetaOapg.properties.priority, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ratefailcond"]) -> typing.Union[MetaOapg.properties.ratefailcond, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ratefailgas"]) -> typing.Union[MetaOapg.properties.ratefailgas, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ratefailoil"]) -> typing.Union[MetaOapg.properties.ratefailoil, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ratefailwater"]) -> typing.Union[MetaOapg.properties.ratefailwater, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rateoptimumcond"]) -> typing.Union[MetaOapg.properties.rateoptimumcond, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rateoptimumgas"]) -> typing.Union[MetaOapg.properties.rateoptimumgas, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rateoptimumoil"]) -> typing.Union[MetaOapg.properties.rateoptimumoil, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rateoptimumwater"]) -> typing.Union[MetaOapg.properties.rateoptimumwater, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["regulatoryissue"]) -> typing.Union[MetaOapg.properties.regulatoryissue, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reportto"]) -> typing.Union[MetaOapg.properties.reportto, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status1"]) -> typing.Union[MetaOapg.properties.status1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status2"]) -> typing.Union[MetaOapg.properties.status2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["typ"]) -> typing.Union[MetaOapg.properties.typ, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["typdetail"]) -> typing.Union[MetaOapg.properties.typdetail, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usernum1"]) -> typing.Union[MetaOapg.properties.usernum1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usernum2"]) -> typing.Union[MetaOapg.properties.usernum2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usertxt1"]) -> typing.Union[MetaOapg.properties.usertxt1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usertxt2"]) -> typing.Union[MetaOapg.properties.usertxt2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usertxt3"]) -> typing.Union[MetaOapg.properties.usertxt3, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "actiontaken", "cause", "causecom", "causedetail", "com", "des", "dttmaction", "dttmend", "dttmstart", "estcost", "estreservelosscond", "estreservelossgas", "estreservelossoil", "estreservelosswater", "failuresymptom", "failuresystem", "idrecjob", "idreczonecompletion", "performanceaffect", "priority", "ratefailcond", "ratefailgas", "ratefailoil", "ratefailwater", "rateoptimumcond", "rateoptimumgas", "rateoptimumoil", "rateoptimumwater", "regulatoryissue", "reportto", "status1", "status2", "typ", "typdetail", "usernum1", "usernum2", "usertxt1", "usertxt2", "usertxt3", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idrec: typing.Union[MetaOapg.properties.idrec, str, ],
        idwell: typing.Union[MetaOapg.properties.idwell, str, ],
        actiontaken: typing.Union[MetaOapg.properties.actiontaken, str, schemas.Unset] = schemas.unset,
        cause: typing.Union[MetaOapg.properties.cause, str, schemas.Unset] = schemas.unset,
        causecom: typing.Union[MetaOapg.properties.causecom, str, schemas.Unset] = schemas.unset,
        causedetail: typing.Union[MetaOapg.properties.causedetail, str, schemas.Unset] = schemas.unset,
        com: typing.Union[MetaOapg.properties.com, str, schemas.Unset] = schemas.unset,
        des: typing.Union[MetaOapg.properties.des, str, schemas.Unset] = schemas.unset,
        dttmaction: typing.Union[MetaOapg.properties.dttmaction, str, datetime, schemas.Unset] = schemas.unset,
        dttmend: typing.Union[MetaOapg.properties.dttmend, str, datetime, schemas.Unset] = schemas.unset,
        dttmstart: typing.Union[MetaOapg.properties.dttmstart, str, datetime, schemas.Unset] = schemas.unset,
        estcost: typing.Union[MetaOapg.properties.estcost, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        estreservelosscond: typing.Union[MetaOapg.properties.estreservelosscond, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        estreservelossgas: typing.Union[MetaOapg.properties.estreservelossgas, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        estreservelossoil: typing.Union[MetaOapg.properties.estreservelossoil, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        estreservelosswater: typing.Union[MetaOapg.properties.estreservelosswater, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        failuresymptom: typing.Union[MetaOapg.properties.failuresymptom, str, schemas.Unset] = schemas.unset,
        failuresystem: typing.Union[MetaOapg.properties.failuresystem, str, schemas.Unset] = schemas.unset,
        idrecjob: typing.Union[MetaOapg.properties.idrecjob, str, schemas.Unset] = schemas.unset,
        idreczonecompletion: typing.Union[MetaOapg.properties.idreczonecompletion, str, schemas.Unset] = schemas.unset,
        performanceaffect: typing.Union[MetaOapg.properties.performanceaffect, bool, schemas.Unset] = schemas.unset,
        priority: typing.Union[MetaOapg.properties.priority, str, schemas.Unset] = schemas.unset,
        ratefailcond: typing.Union[MetaOapg.properties.ratefailcond, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        ratefailgas: typing.Union[MetaOapg.properties.ratefailgas, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        ratefailoil: typing.Union[MetaOapg.properties.ratefailoil, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        ratefailwater: typing.Union[MetaOapg.properties.ratefailwater, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        rateoptimumcond: typing.Union[MetaOapg.properties.rateoptimumcond, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        rateoptimumgas: typing.Union[MetaOapg.properties.rateoptimumgas, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        rateoptimumoil: typing.Union[MetaOapg.properties.rateoptimumoil, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        rateoptimumwater: typing.Union[MetaOapg.properties.rateoptimumwater, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        regulatoryissue: typing.Union[MetaOapg.properties.regulatoryissue, bool, schemas.Unset] = schemas.unset,
        reportto: typing.Union[MetaOapg.properties.reportto, str, schemas.Unset] = schemas.unset,
        status1: typing.Union[MetaOapg.properties.status1, str, schemas.Unset] = schemas.unset,
        status2: typing.Union[MetaOapg.properties.status2, str, schemas.Unset] = schemas.unset,
        typ: typing.Union[MetaOapg.properties.typ, str, schemas.Unset] = schemas.unset,
        typdetail: typing.Union[MetaOapg.properties.typdetail, str, schemas.Unset] = schemas.unset,
        usernum1: typing.Union[MetaOapg.properties.usernum1, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        usernum2: typing.Union[MetaOapg.properties.usernum2, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        usertxt1: typing.Union[MetaOapg.properties.usertxt1, str, schemas.Unset] = schemas.unset,
        usertxt2: typing.Union[MetaOapg.properties.usertxt2, str, schemas.Unset] = schemas.unset,
        usertxt3: typing.Union[MetaOapg.properties.usertxt3, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'OperatingProblemsData':
        return super().__new__(
            cls,
            *args,
            idrec=idrec,
            idwell=idwell,
            actiontaken=actiontaken,
            cause=cause,
            causecom=causecom,
            causedetail=causedetail,
            com=com,
            des=des,
            dttmaction=dttmaction,
            dttmend=dttmend,
            dttmstart=dttmstart,
            estcost=estcost,
            estreservelosscond=estreservelosscond,
            estreservelossgas=estreservelossgas,
            estreservelossoil=estreservelossoil,
            estreservelosswater=estreservelosswater,
            failuresymptom=failuresymptom,
            failuresystem=failuresystem,
            idrecjob=idrecjob,
            idreczonecompletion=idreczonecompletion,
            performanceaffect=performanceaffect,
            priority=priority,
            ratefailcond=ratefailcond,
            ratefailgas=ratefailgas,
            ratefailoil=ratefailoil,
            ratefailwater=ratefailwater,
            rateoptimumcond=rateoptimumcond,
            rateoptimumgas=rateoptimumgas,
            rateoptimumoil=rateoptimumoil,
            rateoptimumwater=rateoptimumwater,
            regulatoryissue=regulatoryissue,
            reportto=reportto,
            status1=status1,
            status2=status2,
            typ=typ,
            typdetail=typdetail,
            usernum1=usernum1,
            usernum2=usernum2,
            usertxt1=usertxt1,
            usertxt2=usertxt2,
            usertxt3=usertxt3,
            _configuration=_configuration,
            **kwargs,
        )
