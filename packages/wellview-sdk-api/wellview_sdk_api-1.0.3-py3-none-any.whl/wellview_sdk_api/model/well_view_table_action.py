# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class WellViewTableAction(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def Action() -> typing.Type['WellViewTableActionEnum']:
                return WellViewTableActionEnum
            Table = schemas.StrSchema
            BlobName = schemas.StrSchema
            ReferenceId = schemas.AnyTypeSchema
        
            @staticmethod
            def Data() -> typing.Type['WellViewTableActionData']:
                return WellViewTableActionData
            __annotations__ = {
                "Action": Action,
                "Table": Table,
                "BlobName": BlobName,
                "ReferenceId": ReferenceId,
                "Data": Data,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Action"]) -> 'WellViewTableActionEnum': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Table"]) -> MetaOapg.properties.Table: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["BlobName"]) -> MetaOapg.properties.BlobName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ReferenceId"]) -> MetaOapg.properties.ReferenceId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Data"]) -> 'WellViewTableActionData': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["Action", "Table", "BlobName", "ReferenceId", "Data", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Action"]) -> typing.Union['WellViewTableActionEnum', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Table"]) -> typing.Union[MetaOapg.properties.Table, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["BlobName"]) -> typing.Union[MetaOapg.properties.BlobName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ReferenceId"]) -> typing.Union[MetaOapg.properties.ReferenceId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Data"]) -> typing.Union['WellViewTableActionData', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Action", "Table", "BlobName", "ReferenceId", "Data", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        Action: typing.Union['WellViewTableActionEnum', schemas.Unset] = schemas.unset,
        Table: typing.Union[MetaOapg.properties.Table, str, schemas.Unset] = schemas.unset,
        BlobName: typing.Union[MetaOapg.properties.BlobName, str, schemas.Unset] = schemas.unset,
        ReferenceId: typing.Union[MetaOapg.properties.ReferenceId, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        Data: typing.Union['WellViewTableActionData', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'WellViewTableAction':
        return super().__new__(
            cls,
            *args,
            Action=Action,
            Table=Table,
            BlobName=BlobName,
            ReferenceId=ReferenceId,
            Data=Data,
            _configuration=_configuration,
            **kwargs,
        )

from wellview_sdk_api.model.well_view_table_action_data import WellViewTableActionData
from wellview_sdk_api.model.well_view_table_action_enum import WellViewTableActionEnum
