# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class PCPRotorDetailData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idrec",
            "idwell",
        }
        
        class properties:
            idrec = schemas.StrSchema
            idwell = schemas.StrSchema
            btmcircpump = schemas.BoolSchema
            cavityinflowindex = schemas.NumberSchema
            chargepump = schemas.BoolSchema
            conntop = schemas.StrSchema
            displperrpm = schemas.NumberSchema
            drivetyp = schemas.StrSchema
            dttmlastinspect = schemas.DateTimeSchema
            eccentricity = schemas.NumberSchema
            efficiencyinspect = schemas.NumberSchema
            gearratio = schemas.StrSchema
            idrecparent = schemas.StrSchema
            idrectubcomp = schemas.StrSchema
            length = schemas.NumberSchema
            liftcapacity = schemas.NumberSchema
            lobeconfig = schemas.StrSchema
            noteinspect = schemas.StrSchema
            pitch = schemas.NumberSchema
            presindesign = schemas.NumberSchema
            ratedesign = schemas.NumberSchema
            rpmdesign = schemas.NumberSchema
            sweptangle = schemas.NumberSchema
            szodmax = schemas.NumberSchema
            szodmin = schemas.NumberSchema
            __annotations__ = {
                "idrec": idrec,
                "idwell": idwell,
                "btmcircpump": btmcircpump,
                "cavityinflowindex": cavityinflowindex,
                "chargepump": chargepump,
                "conntop": conntop,
                "displperrpm": displperrpm,
                "drivetyp": drivetyp,
                "dttmlastinspect": dttmlastinspect,
                "eccentricity": eccentricity,
                "efficiencyinspect": efficiencyinspect,
                "gearratio": gearratio,
                "idrecparent": idrecparent,
                "idrectubcomp": idrectubcomp,
                "length": length,
                "liftcapacity": liftcapacity,
                "lobeconfig": lobeconfig,
                "noteinspect": noteinspect,
                "pitch": pitch,
                "presindesign": presindesign,
                "ratedesign": ratedesign,
                "rpmdesign": rpmdesign,
                "sweptangle": sweptangle,
                "szodmax": szodmax,
                "szodmin": szodmin,
            }
    
    idrec: MetaOapg.properties.idrec
    idwell: MetaOapg.properties.idwell
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["btmcircpump"]) -> MetaOapg.properties.btmcircpump: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cavityinflowindex"]) -> MetaOapg.properties.cavityinflowindex: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["chargepump"]) -> MetaOapg.properties.chargepump: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["conntop"]) -> MetaOapg.properties.conntop: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["displperrpm"]) -> MetaOapg.properties.displperrpm: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["drivetyp"]) -> MetaOapg.properties.drivetyp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmlastinspect"]) -> MetaOapg.properties.dttmlastinspect: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["eccentricity"]) -> MetaOapg.properties.eccentricity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["efficiencyinspect"]) -> MetaOapg.properties.efficiencyinspect: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gearratio"]) -> MetaOapg.properties.gearratio: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecparent"]) -> MetaOapg.properties.idrecparent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrectubcomp"]) -> MetaOapg.properties.idrectubcomp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["length"]) -> MetaOapg.properties.length: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["liftcapacity"]) -> MetaOapg.properties.liftcapacity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lobeconfig"]) -> MetaOapg.properties.lobeconfig: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["noteinspect"]) -> MetaOapg.properties.noteinspect: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pitch"]) -> MetaOapg.properties.pitch: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["presindesign"]) -> MetaOapg.properties.presindesign: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ratedesign"]) -> MetaOapg.properties.ratedesign: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rpmdesign"]) -> MetaOapg.properties.rpmdesign: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sweptangle"]) -> MetaOapg.properties.sweptangle: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["szodmax"]) -> MetaOapg.properties.szodmax: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["szodmin"]) -> MetaOapg.properties.szodmin: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "btmcircpump", "cavityinflowindex", "chargepump", "conntop", "displperrpm", "drivetyp", "dttmlastinspect", "eccentricity", "efficiencyinspect", "gearratio", "idrecparent", "idrectubcomp", "length", "liftcapacity", "lobeconfig", "noteinspect", "pitch", "presindesign", "ratedesign", "rpmdesign", "sweptangle", "szodmax", "szodmin", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["btmcircpump"]) -> typing.Union[MetaOapg.properties.btmcircpump, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cavityinflowindex"]) -> typing.Union[MetaOapg.properties.cavityinflowindex, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["chargepump"]) -> typing.Union[MetaOapg.properties.chargepump, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["conntop"]) -> typing.Union[MetaOapg.properties.conntop, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["displperrpm"]) -> typing.Union[MetaOapg.properties.displperrpm, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["drivetyp"]) -> typing.Union[MetaOapg.properties.drivetyp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmlastinspect"]) -> typing.Union[MetaOapg.properties.dttmlastinspect, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["eccentricity"]) -> typing.Union[MetaOapg.properties.eccentricity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["efficiencyinspect"]) -> typing.Union[MetaOapg.properties.efficiencyinspect, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gearratio"]) -> typing.Union[MetaOapg.properties.gearratio, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecparent"]) -> typing.Union[MetaOapg.properties.idrecparent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrectubcomp"]) -> typing.Union[MetaOapg.properties.idrectubcomp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["length"]) -> typing.Union[MetaOapg.properties.length, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["liftcapacity"]) -> typing.Union[MetaOapg.properties.liftcapacity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lobeconfig"]) -> typing.Union[MetaOapg.properties.lobeconfig, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["noteinspect"]) -> typing.Union[MetaOapg.properties.noteinspect, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pitch"]) -> typing.Union[MetaOapg.properties.pitch, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["presindesign"]) -> typing.Union[MetaOapg.properties.presindesign, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ratedesign"]) -> typing.Union[MetaOapg.properties.ratedesign, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rpmdesign"]) -> typing.Union[MetaOapg.properties.rpmdesign, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sweptangle"]) -> typing.Union[MetaOapg.properties.sweptangle, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["szodmax"]) -> typing.Union[MetaOapg.properties.szodmax, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["szodmin"]) -> typing.Union[MetaOapg.properties.szodmin, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "btmcircpump", "cavityinflowindex", "chargepump", "conntop", "displperrpm", "drivetyp", "dttmlastinspect", "eccentricity", "efficiencyinspect", "gearratio", "idrecparent", "idrectubcomp", "length", "liftcapacity", "lobeconfig", "noteinspect", "pitch", "presindesign", "ratedesign", "rpmdesign", "sweptangle", "szodmax", "szodmin", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idrec: typing.Union[MetaOapg.properties.idrec, str, ],
        idwell: typing.Union[MetaOapg.properties.idwell, str, ],
        btmcircpump: typing.Union[MetaOapg.properties.btmcircpump, bool, schemas.Unset] = schemas.unset,
        cavityinflowindex: typing.Union[MetaOapg.properties.cavityinflowindex, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        chargepump: typing.Union[MetaOapg.properties.chargepump, bool, schemas.Unset] = schemas.unset,
        conntop: typing.Union[MetaOapg.properties.conntop, str, schemas.Unset] = schemas.unset,
        displperrpm: typing.Union[MetaOapg.properties.displperrpm, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        drivetyp: typing.Union[MetaOapg.properties.drivetyp, str, schemas.Unset] = schemas.unset,
        dttmlastinspect: typing.Union[MetaOapg.properties.dttmlastinspect, str, datetime, schemas.Unset] = schemas.unset,
        eccentricity: typing.Union[MetaOapg.properties.eccentricity, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        efficiencyinspect: typing.Union[MetaOapg.properties.efficiencyinspect, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        gearratio: typing.Union[MetaOapg.properties.gearratio, str, schemas.Unset] = schemas.unset,
        idrecparent: typing.Union[MetaOapg.properties.idrecparent, str, schemas.Unset] = schemas.unset,
        idrectubcomp: typing.Union[MetaOapg.properties.idrectubcomp, str, schemas.Unset] = schemas.unset,
        length: typing.Union[MetaOapg.properties.length, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        liftcapacity: typing.Union[MetaOapg.properties.liftcapacity, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        lobeconfig: typing.Union[MetaOapg.properties.lobeconfig, str, schemas.Unset] = schemas.unset,
        noteinspect: typing.Union[MetaOapg.properties.noteinspect, str, schemas.Unset] = schemas.unset,
        pitch: typing.Union[MetaOapg.properties.pitch, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        presindesign: typing.Union[MetaOapg.properties.presindesign, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        ratedesign: typing.Union[MetaOapg.properties.ratedesign, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        rpmdesign: typing.Union[MetaOapg.properties.rpmdesign, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        sweptangle: typing.Union[MetaOapg.properties.sweptangle, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        szodmax: typing.Union[MetaOapg.properties.szodmax, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        szodmin: typing.Union[MetaOapg.properties.szodmin, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PCPRotorDetailData':
        return super().__new__(
            cls,
            *args,
            idrec=idrec,
            idwell=idwell,
            btmcircpump=btmcircpump,
            cavityinflowindex=cavityinflowindex,
            chargepump=chargepump,
            conntop=conntop,
            displperrpm=displperrpm,
            drivetyp=drivetyp,
            dttmlastinspect=dttmlastinspect,
            eccentricity=eccentricity,
            efficiencyinspect=efficiencyinspect,
            gearratio=gearratio,
            idrecparent=idrecparent,
            idrectubcomp=idrectubcomp,
            length=length,
            liftcapacity=liftcapacity,
            lobeconfig=lobeconfig,
            noteinspect=noteinspect,
            pitch=pitch,
            presindesign=presindesign,
            ratedesign=ratedesign,
            rpmdesign=rpmdesign,
            sweptangle=sweptangle,
            szodmax=szodmax,
            szodmin=szodmin,
            _configuration=_configuration,
            **kwargs,
        )
