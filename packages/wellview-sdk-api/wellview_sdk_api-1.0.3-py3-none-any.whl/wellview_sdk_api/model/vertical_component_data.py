# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class VerticalComponentData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idrec",
            "idwell",
        }
        
        class properties:
            idrec = schemas.StrSchema
            idwell = schemas.StrSchema
            com = schemas.StrSchema
            connbtmsz = schemas.NumberSchema
            connbtmtyp = schemas.StrSchema
            conntopsz = schemas.NumberSchema
            conntoptyp = schemas.StrSchema
            cost = schemas.NumberSchema
            costunitlabel = schemas.StrSchema
            des = schemas.StrSchema
            dttmmanufacture = schemas.DateTimeSchema
            iconname = schemas.StrSchema
            idrecparent = schemas.StrSchema
            idrecstring = schemas.StrSchema
            length = schemas.NumberSchema
            make = schemas.StrSchema
            maxpres = schemas.NumberSchema
            minbore = schemas.NumberSchema
            model = schemas.StrSchema
            packofftype = schemas.StrSchema
            productspeclevel = schemas.StrSchema
            refid = schemas.StrSchema
            sect = schemas.StrSchema
            service = schemas.StrSchema
            sn = schemas.StrSchema
            szidnom = schemas.NumberSchema
            szodnom = schemas.NumberSchema
            typ1 = schemas.StrSchema
            typ2 = schemas.StrSchema
            usertxt = schemas.StrSchema
            workpres = schemas.NumberSchema
            workpresbtm = schemas.NumberSchema
            workprestop = schemas.NumberSchema
            __annotations__ = {
                "idrec": idrec,
                "idwell": idwell,
                "com": com,
                "connbtmsz": connbtmsz,
                "connbtmtyp": connbtmtyp,
                "conntopsz": conntopsz,
                "conntoptyp": conntoptyp,
                "cost": cost,
                "costunitlabel": costunitlabel,
                "des": des,
                "dttmmanufacture": dttmmanufacture,
                "iconname": iconname,
                "idrecparent": idrecparent,
                "idrecstring": idrecstring,
                "length": length,
                "make": make,
                "maxpres": maxpres,
                "minbore": minbore,
                "model": model,
                "packofftype": packofftype,
                "productspeclevel": productspeclevel,
                "refid": refid,
                "sect": sect,
                "service": service,
                "sn": sn,
                "szidnom": szidnom,
                "szodnom": szodnom,
                "typ1": typ1,
                "typ2": typ2,
                "usertxt": usertxt,
                "workpres": workpres,
                "workpresbtm": workpresbtm,
                "workprestop": workprestop,
            }
    
    idrec: MetaOapg.properties.idrec
    idwell: MetaOapg.properties.idwell
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["com"]) -> MetaOapg.properties.com: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["connbtmsz"]) -> MetaOapg.properties.connbtmsz: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["connbtmtyp"]) -> MetaOapg.properties.connbtmtyp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["conntopsz"]) -> MetaOapg.properties.conntopsz: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["conntoptyp"]) -> MetaOapg.properties.conntoptyp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cost"]) -> MetaOapg.properties.cost: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["costunitlabel"]) -> MetaOapg.properties.costunitlabel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["des"]) -> MetaOapg.properties.des: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmmanufacture"]) -> MetaOapg.properties.dttmmanufacture: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["iconname"]) -> MetaOapg.properties.iconname: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecparent"]) -> MetaOapg.properties.idrecparent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecstring"]) -> MetaOapg.properties.idrecstring: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["length"]) -> MetaOapg.properties.length: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["make"]) -> MetaOapg.properties.make: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maxpres"]) -> MetaOapg.properties.maxpres: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["minbore"]) -> MetaOapg.properties.minbore: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["model"]) -> MetaOapg.properties.model: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["packofftype"]) -> MetaOapg.properties.packofftype: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["productspeclevel"]) -> MetaOapg.properties.productspeclevel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["refid"]) -> MetaOapg.properties.refid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sect"]) -> MetaOapg.properties.sect: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["service"]) -> MetaOapg.properties.service: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sn"]) -> MetaOapg.properties.sn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["szidnom"]) -> MetaOapg.properties.szidnom: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["szodnom"]) -> MetaOapg.properties.szodnom: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["typ1"]) -> MetaOapg.properties.typ1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["typ2"]) -> MetaOapg.properties.typ2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usertxt"]) -> MetaOapg.properties.usertxt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workpres"]) -> MetaOapg.properties.workpres: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workpresbtm"]) -> MetaOapg.properties.workpresbtm: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workprestop"]) -> MetaOapg.properties.workprestop: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "com", "connbtmsz", "connbtmtyp", "conntopsz", "conntoptyp", "cost", "costunitlabel", "des", "dttmmanufacture", "iconname", "idrecparent", "idrecstring", "length", "make", "maxpres", "minbore", "model", "packofftype", "productspeclevel", "refid", "sect", "service", "sn", "szidnom", "szodnom", "typ1", "typ2", "usertxt", "workpres", "workpresbtm", "workprestop", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["com"]) -> typing.Union[MetaOapg.properties.com, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["connbtmsz"]) -> typing.Union[MetaOapg.properties.connbtmsz, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["connbtmtyp"]) -> typing.Union[MetaOapg.properties.connbtmtyp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["conntopsz"]) -> typing.Union[MetaOapg.properties.conntopsz, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["conntoptyp"]) -> typing.Union[MetaOapg.properties.conntoptyp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cost"]) -> typing.Union[MetaOapg.properties.cost, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["costunitlabel"]) -> typing.Union[MetaOapg.properties.costunitlabel, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["des"]) -> typing.Union[MetaOapg.properties.des, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmmanufacture"]) -> typing.Union[MetaOapg.properties.dttmmanufacture, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["iconname"]) -> typing.Union[MetaOapg.properties.iconname, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecparent"]) -> typing.Union[MetaOapg.properties.idrecparent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecstring"]) -> typing.Union[MetaOapg.properties.idrecstring, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["length"]) -> typing.Union[MetaOapg.properties.length, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["make"]) -> typing.Union[MetaOapg.properties.make, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maxpres"]) -> typing.Union[MetaOapg.properties.maxpres, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["minbore"]) -> typing.Union[MetaOapg.properties.minbore, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["model"]) -> typing.Union[MetaOapg.properties.model, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["packofftype"]) -> typing.Union[MetaOapg.properties.packofftype, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["productspeclevel"]) -> typing.Union[MetaOapg.properties.productspeclevel, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["refid"]) -> typing.Union[MetaOapg.properties.refid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sect"]) -> typing.Union[MetaOapg.properties.sect, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["service"]) -> typing.Union[MetaOapg.properties.service, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sn"]) -> typing.Union[MetaOapg.properties.sn, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["szidnom"]) -> typing.Union[MetaOapg.properties.szidnom, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["szodnom"]) -> typing.Union[MetaOapg.properties.szodnom, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["typ1"]) -> typing.Union[MetaOapg.properties.typ1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["typ2"]) -> typing.Union[MetaOapg.properties.typ2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usertxt"]) -> typing.Union[MetaOapg.properties.usertxt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workpres"]) -> typing.Union[MetaOapg.properties.workpres, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workpresbtm"]) -> typing.Union[MetaOapg.properties.workpresbtm, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workprestop"]) -> typing.Union[MetaOapg.properties.workprestop, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "com", "connbtmsz", "connbtmtyp", "conntopsz", "conntoptyp", "cost", "costunitlabel", "des", "dttmmanufacture", "iconname", "idrecparent", "idrecstring", "length", "make", "maxpres", "minbore", "model", "packofftype", "productspeclevel", "refid", "sect", "service", "sn", "szidnom", "szodnom", "typ1", "typ2", "usertxt", "workpres", "workpresbtm", "workprestop", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idrec: typing.Union[MetaOapg.properties.idrec, str, ],
        idwell: typing.Union[MetaOapg.properties.idwell, str, ],
        com: typing.Union[MetaOapg.properties.com, str, schemas.Unset] = schemas.unset,
        connbtmsz: typing.Union[MetaOapg.properties.connbtmsz, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        connbtmtyp: typing.Union[MetaOapg.properties.connbtmtyp, str, schemas.Unset] = schemas.unset,
        conntopsz: typing.Union[MetaOapg.properties.conntopsz, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        conntoptyp: typing.Union[MetaOapg.properties.conntoptyp, str, schemas.Unset] = schemas.unset,
        cost: typing.Union[MetaOapg.properties.cost, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        costunitlabel: typing.Union[MetaOapg.properties.costunitlabel, str, schemas.Unset] = schemas.unset,
        des: typing.Union[MetaOapg.properties.des, str, schemas.Unset] = schemas.unset,
        dttmmanufacture: typing.Union[MetaOapg.properties.dttmmanufacture, str, datetime, schemas.Unset] = schemas.unset,
        iconname: typing.Union[MetaOapg.properties.iconname, str, schemas.Unset] = schemas.unset,
        idrecparent: typing.Union[MetaOapg.properties.idrecparent, str, schemas.Unset] = schemas.unset,
        idrecstring: typing.Union[MetaOapg.properties.idrecstring, str, schemas.Unset] = schemas.unset,
        length: typing.Union[MetaOapg.properties.length, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        make: typing.Union[MetaOapg.properties.make, str, schemas.Unset] = schemas.unset,
        maxpres: typing.Union[MetaOapg.properties.maxpres, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        minbore: typing.Union[MetaOapg.properties.minbore, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        model: typing.Union[MetaOapg.properties.model, str, schemas.Unset] = schemas.unset,
        packofftype: typing.Union[MetaOapg.properties.packofftype, str, schemas.Unset] = schemas.unset,
        productspeclevel: typing.Union[MetaOapg.properties.productspeclevel, str, schemas.Unset] = schemas.unset,
        refid: typing.Union[MetaOapg.properties.refid, str, schemas.Unset] = schemas.unset,
        sect: typing.Union[MetaOapg.properties.sect, str, schemas.Unset] = schemas.unset,
        service: typing.Union[MetaOapg.properties.service, str, schemas.Unset] = schemas.unset,
        sn: typing.Union[MetaOapg.properties.sn, str, schemas.Unset] = schemas.unset,
        szidnom: typing.Union[MetaOapg.properties.szidnom, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        szodnom: typing.Union[MetaOapg.properties.szodnom, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        typ1: typing.Union[MetaOapg.properties.typ1, str, schemas.Unset] = schemas.unset,
        typ2: typing.Union[MetaOapg.properties.typ2, str, schemas.Unset] = schemas.unset,
        usertxt: typing.Union[MetaOapg.properties.usertxt, str, schemas.Unset] = schemas.unset,
        workpres: typing.Union[MetaOapg.properties.workpres, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        workpresbtm: typing.Union[MetaOapg.properties.workpresbtm, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        workprestop: typing.Union[MetaOapg.properties.workprestop, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'VerticalComponentData':
        return super().__new__(
            cls,
            *args,
            idrec=idrec,
            idwell=idwell,
            com=com,
            connbtmsz=connbtmsz,
            connbtmtyp=connbtmtyp,
            conntopsz=conntopsz,
            conntoptyp=conntoptyp,
            cost=cost,
            costunitlabel=costunitlabel,
            des=des,
            dttmmanufacture=dttmmanufacture,
            iconname=iconname,
            idrecparent=idrecparent,
            idrecstring=idrecstring,
            length=length,
            make=make,
            maxpres=maxpres,
            minbore=minbore,
            model=model,
            packofftype=packofftype,
            productspeclevel=productspeclevel,
            refid=refid,
            sect=sect,
            service=service,
            sn=sn,
            szidnom=szidnom,
            szodnom=szodnom,
            typ1=typ1,
            typ2=typ2,
            usertxt=usertxt,
            workpres=workpres,
            workpresbtm=workpresbtm,
            workprestop=workprestop,
            _configuration=_configuration,
            **kwargs,
        )
