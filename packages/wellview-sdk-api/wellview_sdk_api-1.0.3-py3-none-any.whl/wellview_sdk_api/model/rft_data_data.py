# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class RFTDataData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idrec",
            "idwell",
        }
        
        class properties:
            idrec = schemas.StrSchema
            idwell = schemas.StrSchema
            com = schemas.StrSchema
            densityfluid = schemas.NumberSchema
            densitymudfpe = schemas.NumberSchema
            densitymudhpe = schemas.NumberSchema
            depth = schemas.NumberSchema
            durbuildup = schemas.NumberSchema
            durtest = schemas.NumberSchema
            fluidtyp = schemas.StrSchema
            idrecparent = schemas.StrSchema
            mobilitydrawdown = schemas.NumberSchema
            presend = schemas.NumberSchema
            presform = schemas.NumberSchema
            preshydend = schemas.NumberSchema
            preshydstart = schemas.NumberSchema
            quality = schemas.StrSchema
            refno = schemas.StrSchema
            resulttechnical = schemas.StrSchema
            sample = schemas.BoolSchema
            stabilizedpres = schemas.BoolSchema
            temp = schemas.NumberSchema
            typacquisition = schemas.StrSchema
            use = schemas.BoolSchema
            volfluid = schemas.NumberSchema
            __annotations__ = {
                "idrec": idrec,
                "idwell": idwell,
                "com": com,
                "densityfluid": densityfluid,
                "densitymudfpe": densitymudfpe,
                "densitymudhpe": densitymudhpe,
                "depth": depth,
                "durbuildup": durbuildup,
                "durtest": durtest,
                "fluidtyp": fluidtyp,
                "idrecparent": idrecparent,
                "mobilitydrawdown": mobilitydrawdown,
                "presend": presend,
                "presform": presform,
                "preshydend": preshydend,
                "preshydstart": preshydstart,
                "quality": quality,
                "refno": refno,
                "resulttechnical": resulttechnical,
                "sample": sample,
                "stabilizedpres": stabilizedpres,
                "temp": temp,
                "typacquisition": typacquisition,
                "use": use,
                "volfluid": volfluid,
            }
    
    idrec: MetaOapg.properties.idrec
    idwell: MetaOapg.properties.idwell
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["com"]) -> MetaOapg.properties.com: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["densityfluid"]) -> MetaOapg.properties.densityfluid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["densitymudfpe"]) -> MetaOapg.properties.densitymudfpe: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["densitymudhpe"]) -> MetaOapg.properties.densitymudhpe: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["depth"]) -> MetaOapg.properties.depth: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["durbuildup"]) -> MetaOapg.properties.durbuildup: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["durtest"]) -> MetaOapg.properties.durtest: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fluidtyp"]) -> MetaOapg.properties.fluidtyp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecparent"]) -> MetaOapg.properties.idrecparent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mobilitydrawdown"]) -> MetaOapg.properties.mobilitydrawdown: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["presend"]) -> MetaOapg.properties.presend: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["presform"]) -> MetaOapg.properties.presform: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["preshydend"]) -> MetaOapg.properties.preshydend: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["preshydstart"]) -> MetaOapg.properties.preshydstart: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["quality"]) -> MetaOapg.properties.quality: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["refno"]) -> MetaOapg.properties.refno: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["resulttechnical"]) -> MetaOapg.properties.resulttechnical: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sample"]) -> MetaOapg.properties.sample: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stabilizedpres"]) -> MetaOapg.properties.stabilizedpres: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["temp"]) -> MetaOapg.properties.temp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["typacquisition"]) -> MetaOapg.properties.typacquisition: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["use"]) -> MetaOapg.properties.use: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["volfluid"]) -> MetaOapg.properties.volfluid: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "com", "densityfluid", "densitymudfpe", "densitymudhpe", "depth", "durbuildup", "durtest", "fluidtyp", "idrecparent", "mobilitydrawdown", "presend", "presform", "preshydend", "preshydstart", "quality", "refno", "resulttechnical", "sample", "stabilizedpres", "temp", "typacquisition", "use", "volfluid", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["com"]) -> typing.Union[MetaOapg.properties.com, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["densityfluid"]) -> typing.Union[MetaOapg.properties.densityfluid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["densitymudfpe"]) -> typing.Union[MetaOapg.properties.densitymudfpe, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["densitymudhpe"]) -> typing.Union[MetaOapg.properties.densitymudhpe, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["depth"]) -> typing.Union[MetaOapg.properties.depth, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["durbuildup"]) -> typing.Union[MetaOapg.properties.durbuildup, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["durtest"]) -> typing.Union[MetaOapg.properties.durtest, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fluidtyp"]) -> typing.Union[MetaOapg.properties.fluidtyp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecparent"]) -> typing.Union[MetaOapg.properties.idrecparent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mobilitydrawdown"]) -> typing.Union[MetaOapg.properties.mobilitydrawdown, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["presend"]) -> typing.Union[MetaOapg.properties.presend, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["presform"]) -> typing.Union[MetaOapg.properties.presform, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["preshydend"]) -> typing.Union[MetaOapg.properties.preshydend, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["preshydstart"]) -> typing.Union[MetaOapg.properties.preshydstart, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["quality"]) -> typing.Union[MetaOapg.properties.quality, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["refno"]) -> typing.Union[MetaOapg.properties.refno, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["resulttechnical"]) -> typing.Union[MetaOapg.properties.resulttechnical, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sample"]) -> typing.Union[MetaOapg.properties.sample, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stabilizedpres"]) -> typing.Union[MetaOapg.properties.stabilizedpres, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["temp"]) -> typing.Union[MetaOapg.properties.temp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["typacquisition"]) -> typing.Union[MetaOapg.properties.typacquisition, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["use"]) -> typing.Union[MetaOapg.properties.use, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["volfluid"]) -> typing.Union[MetaOapg.properties.volfluid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "com", "densityfluid", "densitymudfpe", "densitymudhpe", "depth", "durbuildup", "durtest", "fluidtyp", "idrecparent", "mobilitydrawdown", "presend", "presform", "preshydend", "preshydstart", "quality", "refno", "resulttechnical", "sample", "stabilizedpres", "temp", "typacquisition", "use", "volfluid", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idrec: typing.Union[MetaOapg.properties.idrec, str, ],
        idwell: typing.Union[MetaOapg.properties.idwell, str, ],
        com: typing.Union[MetaOapg.properties.com, str, schemas.Unset] = schemas.unset,
        densityfluid: typing.Union[MetaOapg.properties.densityfluid, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        densitymudfpe: typing.Union[MetaOapg.properties.densitymudfpe, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        densitymudhpe: typing.Union[MetaOapg.properties.densitymudhpe, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        depth: typing.Union[MetaOapg.properties.depth, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        durbuildup: typing.Union[MetaOapg.properties.durbuildup, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        durtest: typing.Union[MetaOapg.properties.durtest, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        fluidtyp: typing.Union[MetaOapg.properties.fluidtyp, str, schemas.Unset] = schemas.unset,
        idrecparent: typing.Union[MetaOapg.properties.idrecparent, str, schemas.Unset] = schemas.unset,
        mobilitydrawdown: typing.Union[MetaOapg.properties.mobilitydrawdown, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        presend: typing.Union[MetaOapg.properties.presend, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        presform: typing.Union[MetaOapg.properties.presform, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        preshydend: typing.Union[MetaOapg.properties.preshydend, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        preshydstart: typing.Union[MetaOapg.properties.preshydstart, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        quality: typing.Union[MetaOapg.properties.quality, str, schemas.Unset] = schemas.unset,
        refno: typing.Union[MetaOapg.properties.refno, str, schemas.Unset] = schemas.unset,
        resulttechnical: typing.Union[MetaOapg.properties.resulttechnical, str, schemas.Unset] = schemas.unset,
        sample: typing.Union[MetaOapg.properties.sample, bool, schemas.Unset] = schemas.unset,
        stabilizedpres: typing.Union[MetaOapg.properties.stabilizedpres, bool, schemas.Unset] = schemas.unset,
        temp: typing.Union[MetaOapg.properties.temp, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        typacquisition: typing.Union[MetaOapg.properties.typacquisition, str, schemas.Unset] = schemas.unset,
        use: typing.Union[MetaOapg.properties.use, bool, schemas.Unset] = schemas.unset,
        volfluid: typing.Union[MetaOapg.properties.volfluid, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'RFTDataData':
        return super().__new__(
            cls,
            *args,
            idrec=idrec,
            idwell=idwell,
            com=com,
            densityfluid=densityfluid,
            densitymudfpe=densitymudfpe,
            densitymudhpe=densitymudhpe,
            depth=depth,
            durbuildup=durbuildup,
            durtest=durtest,
            fluidtyp=fluidtyp,
            idrecparent=idrecparent,
            mobilitydrawdown=mobilitydrawdown,
            presend=presend,
            presform=presform,
            preshydend=preshydend,
            preshydstart=preshydstart,
            quality=quality,
            refno=refno,
            resulttechnical=resulttechnical,
            sample=sample,
            stabilizedpres=stabilizedpres,
            temp=temp,
            typacquisition=typacquisition,
            use=use,
            volfluid=volfluid,
            _configuration=_configuration,
            **kwargs,
        )
