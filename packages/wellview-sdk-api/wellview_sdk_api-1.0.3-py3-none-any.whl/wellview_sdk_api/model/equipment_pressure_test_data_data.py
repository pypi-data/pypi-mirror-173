# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class EquipmentPressureTestDataData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idrec",
            "idwell",
        }
        
        class properties:
            idrec = schemas.StrSchema
            idwell = schemas.StrSchema
            bledfluidtyp = schemas.StrSchema
            bledrate = schemas.NumberSchema
            bledvol = schemas.NumberSchema
            circpos = schemas.StrSchema
            idrecparent = schemas.StrSchema
            orificesz = schemas.NumberSchema
            pres = schemas.NumberSchema
            presannulus = schemas.NumberSchema
            presrelatedtbg = schemas.NumberSchema
            refno = schemas.StrSchema
            tm = schemas.NumberSchema
            __annotations__ = {
                "idrec": idrec,
                "idwell": idwell,
                "bledfluidtyp": bledfluidtyp,
                "bledrate": bledrate,
                "bledvol": bledvol,
                "circpos": circpos,
                "idrecparent": idrecparent,
                "orificesz": orificesz,
                "pres": pres,
                "presannulus": presannulus,
                "presrelatedtbg": presrelatedtbg,
                "refno": refno,
                "tm": tm,
            }
    
    idrec: MetaOapg.properties.idrec
    idwell: MetaOapg.properties.idwell
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bledfluidtyp"]) -> MetaOapg.properties.bledfluidtyp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bledrate"]) -> MetaOapg.properties.bledrate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bledvol"]) -> MetaOapg.properties.bledvol: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["circpos"]) -> MetaOapg.properties.circpos: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecparent"]) -> MetaOapg.properties.idrecparent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orificesz"]) -> MetaOapg.properties.orificesz: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pres"]) -> MetaOapg.properties.pres: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["presannulus"]) -> MetaOapg.properties.presannulus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["presrelatedtbg"]) -> MetaOapg.properties.presrelatedtbg: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["refno"]) -> MetaOapg.properties.refno: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tm"]) -> MetaOapg.properties.tm: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "bledfluidtyp", "bledrate", "bledvol", "circpos", "idrecparent", "orificesz", "pres", "presannulus", "presrelatedtbg", "refno", "tm", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bledfluidtyp"]) -> typing.Union[MetaOapg.properties.bledfluidtyp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bledrate"]) -> typing.Union[MetaOapg.properties.bledrate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bledvol"]) -> typing.Union[MetaOapg.properties.bledvol, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["circpos"]) -> typing.Union[MetaOapg.properties.circpos, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecparent"]) -> typing.Union[MetaOapg.properties.idrecparent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orificesz"]) -> typing.Union[MetaOapg.properties.orificesz, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pres"]) -> typing.Union[MetaOapg.properties.pres, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["presannulus"]) -> typing.Union[MetaOapg.properties.presannulus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["presrelatedtbg"]) -> typing.Union[MetaOapg.properties.presrelatedtbg, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["refno"]) -> typing.Union[MetaOapg.properties.refno, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tm"]) -> typing.Union[MetaOapg.properties.tm, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "bledfluidtyp", "bledrate", "bledvol", "circpos", "idrecparent", "orificesz", "pres", "presannulus", "presrelatedtbg", "refno", "tm", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idrec: typing.Union[MetaOapg.properties.idrec, str, ],
        idwell: typing.Union[MetaOapg.properties.idwell, str, ],
        bledfluidtyp: typing.Union[MetaOapg.properties.bledfluidtyp, str, schemas.Unset] = schemas.unset,
        bledrate: typing.Union[MetaOapg.properties.bledrate, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        bledvol: typing.Union[MetaOapg.properties.bledvol, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        circpos: typing.Union[MetaOapg.properties.circpos, str, schemas.Unset] = schemas.unset,
        idrecparent: typing.Union[MetaOapg.properties.idrecparent, str, schemas.Unset] = schemas.unset,
        orificesz: typing.Union[MetaOapg.properties.orificesz, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        pres: typing.Union[MetaOapg.properties.pres, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        presannulus: typing.Union[MetaOapg.properties.presannulus, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        presrelatedtbg: typing.Union[MetaOapg.properties.presrelatedtbg, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        refno: typing.Union[MetaOapg.properties.refno, str, schemas.Unset] = schemas.unset,
        tm: typing.Union[MetaOapg.properties.tm, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EquipmentPressureTestDataData':
        return super().__new__(
            cls,
            *args,
            idrec=idrec,
            idwell=idwell,
            bledfluidtyp=bledfluidtyp,
            bledrate=bledrate,
            bledvol=bledvol,
            circpos=circpos,
            idrecparent=idrecparent,
            orificesz=orificesz,
            pres=pres,
            presannulus=presannulus,
            presrelatedtbg=presrelatedtbg,
            refno=refno,
            tm=tm,
            _configuration=_configuration,
            **kwargs,
        )
