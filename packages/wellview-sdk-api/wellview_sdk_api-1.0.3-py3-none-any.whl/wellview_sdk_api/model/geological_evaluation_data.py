# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class GeologicalEvaluationData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idrec",
            "idwell",
        }
        
        class properties:
            idrec = schemas.StrSchema
            idwell = schemas.StrSchema
            com = schemas.StrSchema
            dttm = schemas.DateTimeSchema
            evaltyp = schemas.StrSchema
            geoevalida = schemas.StrSchema
            geoevalidb = schemas.StrSchema
            geoevalidc = schemas.StrSchema
            geologistcompany = schemas.StrSchema
            geologistname = schemas.StrSchema
            idrecwellbore = schemas.StrSchema
            __annotations__ = {
                "idrec": idrec,
                "idwell": idwell,
                "com": com,
                "dttm": dttm,
                "evaltyp": evaltyp,
                "geoevalida": geoevalida,
                "geoevalidb": geoevalidb,
                "geoevalidc": geoevalidc,
                "geologistcompany": geologistcompany,
                "geologistname": geologistname,
                "idrecwellbore": idrecwellbore,
            }
    
    idrec: MetaOapg.properties.idrec
    idwell: MetaOapg.properties.idwell
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["com"]) -> MetaOapg.properties.com: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttm"]) -> MetaOapg.properties.dttm: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["evaltyp"]) -> MetaOapg.properties.evaltyp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["geoevalida"]) -> MetaOapg.properties.geoevalida: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["geoevalidb"]) -> MetaOapg.properties.geoevalidb: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["geoevalidc"]) -> MetaOapg.properties.geoevalidc: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["geologistcompany"]) -> MetaOapg.properties.geologistcompany: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["geologistname"]) -> MetaOapg.properties.geologistname: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecwellbore"]) -> MetaOapg.properties.idrecwellbore: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "com", "dttm", "evaltyp", "geoevalida", "geoevalidb", "geoevalidc", "geologistcompany", "geologistname", "idrecwellbore", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["com"]) -> typing.Union[MetaOapg.properties.com, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttm"]) -> typing.Union[MetaOapg.properties.dttm, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["evaltyp"]) -> typing.Union[MetaOapg.properties.evaltyp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["geoevalida"]) -> typing.Union[MetaOapg.properties.geoevalida, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["geoevalidb"]) -> typing.Union[MetaOapg.properties.geoevalidb, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["geoevalidc"]) -> typing.Union[MetaOapg.properties.geoevalidc, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["geologistcompany"]) -> typing.Union[MetaOapg.properties.geologistcompany, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["geologistname"]) -> typing.Union[MetaOapg.properties.geologistname, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecwellbore"]) -> typing.Union[MetaOapg.properties.idrecwellbore, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "com", "dttm", "evaltyp", "geoevalida", "geoevalidb", "geoevalidc", "geologistcompany", "geologistname", "idrecwellbore", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idrec: typing.Union[MetaOapg.properties.idrec, str, ],
        idwell: typing.Union[MetaOapg.properties.idwell, str, ],
        com: typing.Union[MetaOapg.properties.com, str, schemas.Unset] = schemas.unset,
        dttm: typing.Union[MetaOapg.properties.dttm, str, datetime, schemas.Unset] = schemas.unset,
        evaltyp: typing.Union[MetaOapg.properties.evaltyp, str, schemas.Unset] = schemas.unset,
        geoevalida: typing.Union[MetaOapg.properties.geoevalida, str, schemas.Unset] = schemas.unset,
        geoevalidb: typing.Union[MetaOapg.properties.geoevalidb, str, schemas.Unset] = schemas.unset,
        geoevalidc: typing.Union[MetaOapg.properties.geoevalidc, str, schemas.Unset] = schemas.unset,
        geologistcompany: typing.Union[MetaOapg.properties.geologistcompany, str, schemas.Unset] = schemas.unset,
        geologistname: typing.Union[MetaOapg.properties.geologistname, str, schemas.Unset] = schemas.unset,
        idrecwellbore: typing.Union[MetaOapg.properties.idrecwellbore, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'GeologicalEvaluationData':
        return super().__new__(
            cls,
            *args,
            idrec=idrec,
            idwell=idwell,
            com=com,
            dttm=dttm,
            evaltyp=evaltyp,
            geoevalida=geoevalida,
            geoevalidb=geoevalidb,
            geoevalidc=geoevalidc,
            geologistcompany=geologistcompany,
            geologistname=geologistname,
            idrecwellbore=idrecwellbore,
            _configuration=_configuration,
            **kwargs,
        )
