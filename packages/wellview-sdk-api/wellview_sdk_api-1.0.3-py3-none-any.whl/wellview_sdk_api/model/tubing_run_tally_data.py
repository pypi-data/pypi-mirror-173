# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class TubingRunTallyData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idrec",
            "idwell",
        }
        
        class properties:
            idrec = schemas.StrSchema
            idwell = schemas.StrSchema
            centralized = schemas.BoolSchema
            centralizersdes = schemas.StrSchema
            centralizersno = schemas.IntSchema
            extjewelry = schemas.StrSchema
            idrecparent = schemas.StrSchema
            jointrun = schemas.BoolSchema
            length = schemas.NumberSchema
            refid = schemas.StrSchema
            refno = schemas.IntSchema
            __annotations__ = {
                "idrec": idrec,
                "idwell": idwell,
                "centralized": centralized,
                "centralizersdes": centralizersdes,
                "centralizersno": centralizersno,
                "extjewelry": extjewelry,
                "idrecparent": idrecparent,
                "jointrun": jointrun,
                "length": length,
                "refid": refid,
                "refno": refno,
            }
    
    idrec: MetaOapg.properties.idrec
    idwell: MetaOapg.properties.idwell
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["centralized"]) -> MetaOapg.properties.centralized: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["centralizersdes"]) -> MetaOapg.properties.centralizersdes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["centralizersno"]) -> MetaOapg.properties.centralizersno: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["extjewelry"]) -> MetaOapg.properties.extjewelry: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecparent"]) -> MetaOapg.properties.idrecparent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jointrun"]) -> MetaOapg.properties.jointrun: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["length"]) -> MetaOapg.properties.length: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["refid"]) -> MetaOapg.properties.refid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["refno"]) -> MetaOapg.properties.refno: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "centralized", "centralizersdes", "centralizersno", "extjewelry", "idrecparent", "jointrun", "length", "refid", "refno", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["centralized"]) -> typing.Union[MetaOapg.properties.centralized, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["centralizersdes"]) -> typing.Union[MetaOapg.properties.centralizersdes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["centralizersno"]) -> typing.Union[MetaOapg.properties.centralizersno, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["extjewelry"]) -> typing.Union[MetaOapg.properties.extjewelry, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecparent"]) -> typing.Union[MetaOapg.properties.idrecparent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jointrun"]) -> typing.Union[MetaOapg.properties.jointrun, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["length"]) -> typing.Union[MetaOapg.properties.length, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["refid"]) -> typing.Union[MetaOapg.properties.refid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["refno"]) -> typing.Union[MetaOapg.properties.refno, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "centralized", "centralizersdes", "centralizersno", "extjewelry", "idrecparent", "jointrun", "length", "refid", "refno", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idrec: typing.Union[MetaOapg.properties.idrec, str, ],
        idwell: typing.Union[MetaOapg.properties.idwell, str, ],
        centralized: typing.Union[MetaOapg.properties.centralized, bool, schemas.Unset] = schemas.unset,
        centralizersdes: typing.Union[MetaOapg.properties.centralizersdes, str, schemas.Unset] = schemas.unset,
        centralizersno: typing.Union[MetaOapg.properties.centralizersno, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        extjewelry: typing.Union[MetaOapg.properties.extjewelry, str, schemas.Unset] = schemas.unset,
        idrecparent: typing.Union[MetaOapg.properties.idrecparent, str, schemas.Unset] = schemas.unset,
        jointrun: typing.Union[MetaOapg.properties.jointrun, bool, schemas.Unset] = schemas.unset,
        length: typing.Union[MetaOapg.properties.length, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        refid: typing.Union[MetaOapg.properties.refid, str, schemas.Unset] = schemas.unset,
        refno: typing.Union[MetaOapg.properties.refno, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TubingRunTallyData':
        return super().__new__(
            cls,
            *args,
            idrec=idrec,
            idwell=idwell,
            centralized=centralized,
            centralizersdes=centralizersdes,
            centralizersno=centralizersno,
            extjewelry=extjewelry,
            idrecparent=idrecparent,
            jointrun=jointrun,
            length=length,
            refid=refid,
            refno=refno,
            _configuration=_configuration,
            **kwargs,
        )
