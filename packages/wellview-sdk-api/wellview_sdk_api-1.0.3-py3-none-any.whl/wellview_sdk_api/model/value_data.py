# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class ValueData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idrec",
            "idwell",
        }
        
        class properties:
            idrec = schemas.StrSchema
            idwell = schemas.StrSchema
            actionrqd = schemas.BoolSchema
            actionrqdcom = schemas.StrSchema
            actionrqdtyp = schemas.StrSchema
            com = schemas.StrSchema
            dttm = schemas.DateTimeSchema
            idrecitem = schemas.StrSchema
            idrecparent = schemas.StrSchema
            reportedby = schemas.StrSchema
            value = schemas.NumberSchema
            valuedes = schemas.StrSchema
            valueverified = schemas.BoolSchema
            __annotations__ = {
                "idrec": idrec,
                "idwell": idwell,
                "actionrqd": actionrqd,
                "actionrqdcom": actionrqdcom,
                "actionrqdtyp": actionrqdtyp,
                "com": com,
                "dttm": dttm,
                "idrecitem": idrecitem,
                "idrecparent": idrecparent,
                "reportedby": reportedby,
                "value": value,
                "valuedes": valuedes,
                "valueverified": valueverified,
            }
    
    idrec: MetaOapg.properties.idrec
    idwell: MetaOapg.properties.idwell
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["actionrqd"]) -> MetaOapg.properties.actionrqd: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["actionrqdcom"]) -> MetaOapg.properties.actionrqdcom: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["actionrqdtyp"]) -> MetaOapg.properties.actionrqdtyp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["com"]) -> MetaOapg.properties.com: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttm"]) -> MetaOapg.properties.dttm: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecitem"]) -> MetaOapg.properties.idrecitem: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecparent"]) -> MetaOapg.properties.idrecparent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reportedby"]) -> MetaOapg.properties.reportedby: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["valuedes"]) -> MetaOapg.properties.valuedes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["valueverified"]) -> MetaOapg.properties.valueverified: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "actionrqd", "actionrqdcom", "actionrqdtyp", "com", "dttm", "idrecitem", "idrecparent", "reportedby", "value", "valuedes", "valueverified", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["actionrqd"]) -> typing.Union[MetaOapg.properties.actionrqd, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["actionrqdcom"]) -> typing.Union[MetaOapg.properties.actionrqdcom, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["actionrqdtyp"]) -> typing.Union[MetaOapg.properties.actionrqdtyp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["com"]) -> typing.Union[MetaOapg.properties.com, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttm"]) -> typing.Union[MetaOapg.properties.dttm, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecitem"]) -> typing.Union[MetaOapg.properties.idrecitem, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecparent"]) -> typing.Union[MetaOapg.properties.idrecparent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reportedby"]) -> typing.Union[MetaOapg.properties.reportedby, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["value"]) -> typing.Union[MetaOapg.properties.value, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["valuedes"]) -> typing.Union[MetaOapg.properties.valuedes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["valueverified"]) -> typing.Union[MetaOapg.properties.valueverified, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "actionrqd", "actionrqdcom", "actionrqdtyp", "com", "dttm", "idrecitem", "idrecparent", "reportedby", "value", "valuedes", "valueverified", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idrec: typing.Union[MetaOapg.properties.idrec, str, ],
        idwell: typing.Union[MetaOapg.properties.idwell, str, ],
        actionrqd: typing.Union[MetaOapg.properties.actionrqd, bool, schemas.Unset] = schemas.unset,
        actionrqdcom: typing.Union[MetaOapg.properties.actionrqdcom, str, schemas.Unset] = schemas.unset,
        actionrqdtyp: typing.Union[MetaOapg.properties.actionrqdtyp, str, schemas.Unset] = schemas.unset,
        com: typing.Union[MetaOapg.properties.com, str, schemas.Unset] = schemas.unset,
        dttm: typing.Union[MetaOapg.properties.dttm, str, datetime, schemas.Unset] = schemas.unset,
        idrecitem: typing.Union[MetaOapg.properties.idrecitem, str, schemas.Unset] = schemas.unset,
        idrecparent: typing.Union[MetaOapg.properties.idrecparent, str, schemas.Unset] = schemas.unset,
        reportedby: typing.Union[MetaOapg.properties.reportedby, str, schemas.Unset] = schemas.unset,
        value: typing.Union[MetaOapg.properties.value, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        valuedes: typing.Union[MetaOapg.properties.valuedes, str, schemas.Unset] = schemas.unset,
        valueverified: typing.Union[MetaOapg.properties.valueverified, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ValueData':
        return super().__new__(
            cls,
            *args,
            idrec=idrec,
            idwell=idwell,
            actionrqd=actionrqd,
            actionrqdcom=actionrqdcom,
            actionrqdtyp=actionrqdtyp,
            com=com,
            dttm=dttm,
            idrecitem=idrecitem,
            idrecparent=idrecparent,
            reportedby=reportedby,
            value=value,
            valuedes=valuedes,
            valueverified=valueverified,
            _configuration=_configuration,
            **kwargs,
        )
