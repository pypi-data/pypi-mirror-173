# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class DeviationSurveyData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idrec",
            "idwell",
        }
        
        class properties:
            idrec = schemas.StrSchema
            idwell = schemas.StrSchema
            azimuthcorrection = schemas.StrSchema
            azimuthnorthtyp = schemas.StrSchema
            azimuthtiein = schemas.NumberSchema
            com = schemas.StrSchema
            convergence = schemas.NumberSchema
            declination = schemas.NumberSchema
            definitive = schemas.BoolSchema
            depthcorrection = schemas.StrSchema
            des = schemas.StrSchema
            dttm = schemas.DateTimeSchema
            ewtiein = schemas.NumberSchema
            idrecjob = schemas.StrSchema
            idrecparent = schemas.StrSchema
            inclinationtiein = schemas.NumberSchema
            mdtiein = schemas.NumberSchema
            notecorrection = schemas.StrSchema
            nstiein = schemas.NumberSchema
            proposed = schemas.BoolSchema
            tvdtiein = schemas.NumberSchema
            validatedbycompany = schemas.StrSchema
            validatedbyname = schemas.StrSchema
            validateddttm = schemas.DateTimeSchema
            __annotations__ = {
                "idrec": idrec,
                "idwell": idwell,
                "azimuthcorrection": azimuthcorrection,
                "azimuthnorthtyp": azimuthnorthtyp,
                "azimuthtiein": azimuthtiein,
                "com": com,
                "convergence": convergence,
                "declination": declination,
                "definitive": definitive,
                "depthcorrection": depthcorrection,
                "des": des,
                "dttm": dttm,
                "ewtiein": ewtiein,
                "idrecjob": idrecjob,
                "idrecparent": idrecparent,
                "inclinationtiein": inclinationtiein,
                "mdtiein": mdtiein,
                "notecorrection": notecorrection,
                "nstiein": nstiein,
                "proposed": proposed,
                "tvdtiein": tvdtiein,
                "validatedbycompany": validatedbycompany,
                "validatedbyname": validatedbyname,
                "validateddttm": validateddttm,
            }
    
    idrec: MetaOapg.properties.idrec
    idwell: MetaOapg.properties.idwell
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["azimuthcorrection"]) -> MetaOapg.properties.azimuthcorrection: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["azimuthnorthtyp"]) -> MetaOapg.properties.azimuthnorthtyp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["azimuthtiein"]) -> MetaOapg.properties.azimuthtiein: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["com"]) -> MetaOapg.properties.com: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["convergence"]) -> MetaOapg.properties.convergence: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["declination"]) -> MetaOapg.properties.declination: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["definitive"]) -> MetaOapg.properties.definitive: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["depthcorrection"]) -> MetaOapg.properties.depthcorrection: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["des"]) -> MetaOapg.properties.des: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttm"]) -> MetaOapg.properties.dttm: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ewtiein"]) -> MetaOapg.properties.ewtiein: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecjob"]) -> MetaOapg.properties.idrecjob: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecparent"]) -> MetaOapg.properties.idrecparent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["inclinationtiein"]) -> MetaOapg.properties.inclinationtiein: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mdtiein"]) -> MetaOapg.properties.mdtiein: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["notecorrection"]) -> MetaOapg.properties.notecorrection: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nstiein"]) -> MetaOapg.properties.nstiein: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["proposed"]) -> MetaOapg.properties.proposed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tvdtiein"]) -> MetaOapg.properties.tvdtiein: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["validatedbycompany"]) -> MetaOapg.properties.validatedbycompany: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["validatedbyname"]) -> MetaOapg.properties.validatedbyname: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["validateddttm"]) -> MetaOapg.properties.validateddttm: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "azimuthcorrection", "azimuthnorthtyp", "azimuthtiein", "com", "convergence", "declination", "definitive", "depthcorrection", "des", "dttm", "ewtiein", "idrecjob", "idrecparent", "inclinationtiein", "mdtiein", "notecorrection", "nstiein", "proposed", "tvdtiein", "validatedbycompany", "validatedbyname", "validateddttm", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["azimuthcorrection"]) -> typing.Union[MetaOapg.properties.azimuthcorrection, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["azimuthnorthtyp"]) -> typing.Union[MetaOapg.properties.azimuthnorthtyp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["azimuthtiein"]) -> typing.Union[MetaOapg.properties.azimuthtiein, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["com"]) -> typing.Union[MetaOapg.properties.com, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["convergence"]) -> typing.Union[MetaOapg.properties.convergence, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["declination"]) -> typing.Union[MetaOapg.properties.declination, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["definitive"]) -> typing.Union[MetaOapg.properties.definitive, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["depthcorrection"]) -> typing.Union[MetaOapg.properties.depthcorrection, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["des"]) -> typing.Union[MetaOapg.properties.des, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttm"]) -> typing.Union[MetaOapg.properties.dttm, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ewtiein"]) -> typing.Union[MetaOapg.properties.ewtiein, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecjob"]) -> typing.Union[MetaOapg.properties.idrecjob, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecparent"]) -> typing.Union[MetaOapg.properties.idrecparent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["inclinationtiein"]) -> typing.Union[MetaOapg.properties.inclinationtiein, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mdtiein"]) -> typing.Union[MetaOapg.properties.mdtiein, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["notecorrection"]) -> typing.Union[MetaOapg.properties.notecorrection, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nstiein"]) -> typing.Union[MetaOapg.properties.nstiein, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["proposed"]) -> typing.Union[MetaOapg.properties.proposed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tvdtiein"]) -> typing.Union[MetaOapg.properties.tvdtiein, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["validatedbycompany"]) -> typing.Union[MetaOapg.properties.validatedbycompany, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["validatedbyname"]) -> typing.Union[MetaOapg.properties.validatedbyname, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["validateddttm"]) -> typing.Union[MetaOapg.properties.validateddttm, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "azimuthcorrection", "azimuthnorthtyp", "azimuthtiein", "com", "convergence", "declination", "definitive", "depthcorrection", "des", "dttm", "ewtiein", "idrecjob", "idrecparent", "inclinationtiein", "mdtiein", "notecorrection", "nstiein", "proposed", "tvdtiein", "validatedbycompany", "validatedbyname", "validateddttm", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idrec: typing.Union[MetaOapg.properties.idrec, str, ],
        idwell: typing.Union[MetaOapg.properties.idwell, str, ],
        azimuthcorrection: typing.Union[MetaOapg.properties.azimuthcorrection, str, schemas.Unset] = schemas.unset,
        azimuthnorthtyp: typing.Union[MetaOapg.properties.azimuthnorthtyp, str, schemas.Unset] = schemas.unset,
        azimuthtiein: typing.Union[MetaOapg.properties.azimuthtiein, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        com: typing.Union[MetaOapg.properties.com, str, schemas.Unset] = schemas.unset,
        convergence: typing.Union[MetaOapg.properties.convergence, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        declination: typing.Union[MetaOapg.properties.declination, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        definitive: typing.Union[MetaOapg.properties.definitive, bool, schemas.Unset] = schemas.unset,
        depthcorrection: typing.Union[MetaOapg.properties.depthcorrection, str, schemas.Unset] = schemas.unset,
        des: typing.Union[MetaOapg.properties.des, str, schemas.Unset] = schemas.unset,
        dttm: typing.Union[MetaOapg.properties.dttm, str, datetime, schemas.Unset] = schemas.unset,
        ewtiein: typing.Union[MetaOapg.properties.ewtiein, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        idrecjob: typing.Union[MetaOapg.properties.idrecjob, str, schemas.Unset] = schemas.unset,
        idrecparent: typing.Union[MetaOapg.properties.idrecparent, str, schemas.Unset] = schemas.unset,
        inclinationtiein: typing.Union[MetaOapg.properties.inclinationtiein, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        mdtiein: typing.Union[MetaOapg.properties.mdtiein, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        notecorrection: typing.Union[MetaOapg.properties.notecorrection, str, schemas.Unset] = schemas.unset,
        nstiein: typing.Union[MetaOapg.properties.nstiein, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        proposed: typing.Union[MetaOapg.properties.proposed, bool, schemas.Unset] = schemas.unset,
        tvdtiein: typing.Union[MetaOapg.properties.tvdtiein, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        validatedbycompany: typing.Union[MetaOapg.properties.validatedbycompany, str, schemas.Unset] = schemas.unset,
        validatedbyname: typing.Union[MetaOapg.properties.validatedbyname, str, schemas.Unset] = schemas.unset,
        validateddttm: typing.Union[MetaOapg.properties.validateddttm, str, datetime, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DeviationSurveyData':
        return super().__new__(
            cls,
            *args,
            idrec=idrec,
            idwell=idwell,
            azimuthcorrection=azimuthcorrection,
            azimuthnorthtyp=azimuthnorthtyp,
            azimuthtiein=azimuthtiein,
            com=com,
            convergence=convergence,
            declination=declination,
            definitive=definitive,
            depthcorrection=depthcorrection,
            des=des,
            dttm=dttm,
            ewtiein=ewtiein,
            idrecjob=idrecjob,
            idrecparent=idrecparent,
            inclinationtiein=inclinationtiein,
            mdtiein=mdtiein,
            notecorrection=notecorrection,
            nstiein=nstiein,
            proposed=proposed,
            tvdtiein=tvdtiein,
            validatedbycompany=validatedbycompany,
            validatedbyname=validatedbyname,
            validateddttm=validateddttm,
            _configuration=_configuration,
            **kwargs,
        )
