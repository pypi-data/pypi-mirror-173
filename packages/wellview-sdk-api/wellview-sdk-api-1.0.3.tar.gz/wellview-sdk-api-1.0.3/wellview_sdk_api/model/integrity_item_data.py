# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class IntegrityItemData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idrec",
            "idwell",
        }
        
        class properties:
            idrec = schemas.StrSchema
            idwell = schemas.StrSchema
            actiontyp = schemas.StrSchema
            com = schemas.StrSchema
            des = schemas.StrSchema
            dttmend = schemas.DateTimeSchema
            dttmstart = schemas.DateTimeSchema
            idrecparent = schemas.StrSchema
            recurfrequency = schemas.NumberSchema
            recurnote = schemas.StrSchema
            requiredby = schemas.StrSchema
            requiredbyreg = schemas.BoolSchema
            responsibleperson = schemas.StrSchema
            riskdes = schemas.StrSchema
            risklevel = schemas.StrSchema
            riskmitigationcom = schemas.StrSchema
            risktyp1 = schemas.StrSchema
            risktyp2 = schemas.StrSchema
            sensorida = schemas.StrSchema
            sensoridb = schemas.StrSchema
            typ1 = schemas.StrSchema
            typ2 = schemas.StrSchema
            typ3 = schemas.StrSchema
            typ4 = schemas.StrSchema
            valuename = schemas.StrSchema
            valueunitlabel = schemas.StrSchema
            __annotations__ = {
                "idrec": idrec,
                "idwell": idwell,
                "actiontyp": actiontyp,
                "com": com,
                "des": des,
                "dttmend": dttmend,
                "dttmstart": dttmstart,
                "idrecparent": idrecparent,
                "recurfrequency": recurfrequency,
                "recurnote": recurnote,
                "requiredby": requiredby,
                "requiredbyreg": requiredbyreg,
                "responsibleperson": responsibleperson,
                "riskdes": riskdes,
                "risklevel": risklevel,
                "riskmitigationcom": riskmitigationcom,
                "risktyp1": risktyp1,
                "risktyp2": risktyp2,
                "sensorida": sensorida,
                "sensoridb": sensoridb,
                "typ1": typ1,
                "typ2": typ2,
                "typ3": typ3,
                "typ4": typ4,
                "valuename": valuename,
                "valueunitlabel": valueunitlabel,
            }
    
    idrec: MetaOapg.properties.idrec
    idwell: MetaOapg.properties.idwell
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["actiontyp"]) -> MetaOapg.properties.actiontyp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["com"]) -> MetaOapg.properties.com: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["des"]) -> MetaOapg.properties.des: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmend"]) -> MetaOapg.properties.dttmend: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmstart"]) -> MetaOapg.properties.dttmstart: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecparent"]) -> MetaOapg.properties.idrecparent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["recurfrequency"]) -> MetaOapg.properties.recurfrequency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["recurnote"]) -> MetaOapg.properties.recurnote: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["requiredby"]) -> MetaOapg.properties.requiredby: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["requiredbyreg"]) -> MetaOapg.properties.requiredbyreg: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["responsibleperson"]) -> MetaOapg.properties.responsibleperson: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["riskdes"]) -> MetaOapg.properties.riskdes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["risklevel"]) -> MetaOapg.properties.risklevel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["riskmitigationcom"]) -> MetaOapg.properties.riskmitigationcom: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["risktyp1"]) -> MetaOapg.properties.risktyp1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["risktyp2"]) -> MetaOapg.properties.risktyp2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sensorida"]) -> MetaOapg.properties.sensorida: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sensoridb"]) -> MetaOapg.properties.sensoridb: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["typ1"]) -> MetaOapg.properties.typ1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["typ2"]) -> MetaOapg.properties.typ2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["typ3"]) -> MetaOapg.properties.typ3: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["typ4"]) -> MetaOapg.properties.typ4: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["valuename"]) -> MetaOapg.properties.valuename: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["valueunitlabel"]) -> MetaOapg.properties.valueunitlabel: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "actiontyp", "com", "des", "dttmend", "dttmstart", "idrecparent", "recurfrequency", "recurnote", "requiredby", "requiredbyreg", "responsibleperson", "riskdes", "risklevel", "riskmitigationcom", "risktyp1", "risktyp2", "sensorida", "sensoridb", "typ1", "typ2", "typ3", "typ4", "valuename", "valueunitlabel", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["actiontyp"]) -> typing.Union[MetaOapg.properties.actiontyp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["com"]) -> typing.Union[MetaOapg.properties.com, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["des"]) -> typing.Union[MetaOapg.properties.des, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmend"]) -> typing.Union[MetaOapg.properties.dttmend, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmstart"]) -> typing.Union[MetaOapg.properties.dttmstart, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecparent"]) -> typing.Union[MetaOapg.properties.idrecparent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["recurfrequency"]) -> typing.Union[MetaOapg.properties.recurfrequency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["recurnote"]) -> typing.Union[MetaOapg.properties.recurnote, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["requiredby"]) -> typing.Union[MetaOapg.properties.requiredby, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["requiredbyreg"]) -> typing.Union[MetaOapg.properties.requiredbyreg, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["responsibleperson"]) -> typing.Union[MetaOapg.properties.responsibleperson, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["riskdes"]) -> typing.Union[MetaOapg.properties.riskdes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["risklevel"]) -> typing.Union[MetaOapg.properties.risklevel, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["riskmitigationcom"]) -> typing.Union[MetaOapg.properties.riskmitigationcom, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["risktyp1"]) -> typing.Union[MetaOapg.properties.risktyp1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["risktyp2"]) -> typing.Union[MetaOapg.properties.risktyp2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sensorida"]) -> typing.Union[MetaOapg.properties.sensorida, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sensoridb"]) -> typing.Union[MetaOapg.properties.sensoridb, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["typ1"]) -> typing.Union[MetaOapg.properties.typ1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["typ2"]) -> typing.Union[MetaOapg.properties.typ2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["typ3"]) -> typing.Union[MetaOapg.properties.typ3, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["typ4"]) -> typing.Union[MetaOapg.properties.typ4, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["valuename"]) -> typing.Union[MetaOapg.properties.valuename, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["valueunitlabel"]) -> typing.Union[MetaOapg.properties.valueunitlabel, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "actiontyp", "com", "des", "dttmend", "dttmstart", "idrecparent", "recurfrequency", "recurnote", "requiredby", "requiredbyreg", "responsibleperson", "riskdes", "risklevel", "riskmitigationcom", "risktyp1", "risktyp2", "sensorida", "sensoridb", "typ1", "typ2", "typ3", "typ4", "valuename", "valueunitlabel", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idrec: typing.Union[MetaOapg.properties.idrec, str, ],
        idwell: typing.Union[MetaOapg.properties.idwell, str, ],
        actiontyp: typing.Union[MetaOapg.properties.actiontyp, str, schemas.Unset] = schemas.unset,
        com: typing.Union[MetaOapg.properties.com, str, schemas.Unset] = schemas.unset,
        des: typing.Union[MetaOapg.properties.des, str, schemas.Unset] = schemas.unset,
        dttmend: typing.Union[MetaOapg.properties.dttmend, str, datetime, schemas.Unset] = schemas.unset,
        dttmstart: typing.Union[MetaOapg.properties.dttmstart, str, datetime, schemas.Unset] = schemas.unset,
        idrecparent: typing.Union[MetaOapg.properties.idrecparent, str, schemas.Unset] = schemas.unset,
        recurfrequency: typing.Union[MetaOapg.properties.recurfrequency, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        recurnote: typing.Union[MetaOapg.properties.recurnote, str, schemas.Unset] = schemas.unset,
        requiredby: typing.Union[MetaOapg.properties.requiredby, str, schemas.Unset] = schemas.unset,
        requiredbyreg: typing.Union[MetaOapg.properties.requiredbyreg, bool, schemas.Unset] = schemas.unset,
        responsibleperson: typing.Union[MetaOapg.properties.responsibleperson, str, schemas.Unset] = schemas.unset,
        riskdes: typing.Union[MetaOapg.properties.riskdes, str, schemas.Unset] = schemas.unset,
        risklevel: typing.Union[MetaOapg.properties.risklevel, str, schemas.Unset] = schemas.unset,
        riskmitigationcom: typing.Union[MetaOapg.properties.riskmitigationcom, str, schemas.Unset] = schemas.unset,
        risktyp1: typing.Union[MetaOapg.properties.risktyp1, str, schemas.Unset] = schemas.unset,
        risktyp2: typing.Union[MetaOapg.properties.risktyp2, str, schemas.Unset] = schemas.unset,
        sensorida: typing.Union[MetaOapg.properties.sensorida, str, schemas.Unset] = schemas.unset,
        sensoridb: typing.Union[MetaOapg.properties.sensoridb, str, schemas.Unset] = schemas.unset,
        typ1: typing.Union[MetaOapg.properties.typ1, str, schemas.Unset] = schemas.unset,
        typ2: typing.Union[MetaOapg.properties.typ2, str, schemas.Unset] = schemas.unset,
        typ3: typing.Union[MetaOapg.properties.typ3, str, schemas.Unset] = schemas.unset,
        typ4: typing.Union[MetaOapg.properties.typ4, str, schemas.Unset] = schemas.unset,
        valuename: typing.Union[MetaOapg.properties.valuename, str, schemas.Unset] = schemas.unset,
        valueunitlabel: typing.Union[MetaOapg.properties.valueunitlabel, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'IntegrityItemData':
        return super().__new__(
            cls,
            *args,
            idrec=idrec,
            idwell=idwell,
            actiontyp=actiontyp,
            com=com,
            des=des,
            dttmend=dttmend,
            dttmstart=dttmstart,
            idrecparent=idrecparent,
            recurfrequency=recurfrequency,
            recurnote=recurnote,
            requiredby=requiredby,
            requiredbyreg=requiredbyreg,
            responsibleperson=responsibleperson,
            riskdes=riskdes,
            risklevel=risklevel,
            riskmitigationcom=riskmitigationcom,
            risktyp1=risktyp1,
            risktyp2=risktyp2,
            sensorida=sensorida,
            sensoridb=sensoridb,
            typ1=typ1,
            typ2=typ2,
            typ3=typ3,
            typ4=typ4,
            valuename=valuename,
            valueunitlabel=valueunitlabel,
            _configuration=_configuration,
            **kwargs,
        )
