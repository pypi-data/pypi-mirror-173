# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class RiserDiverterComponentsData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idrec",
            "idwell",
        }
        
        class properties:
            idrec = schemas.StrSchema
            idwell = schemas.StrSchema
            coatinginner = schemas.StrSchema
            coatingouter = schemas.StrSchema
            com = schemas.StrSchema
            conntyp = schemas.StrSchema
            cost = schemas.NumberSchema
            costunitlabel = schemas.StrSchema
            des = schemas.StrSchema
            grade = schemas.StrSchema
            iconname = schemas.StrSchema
            idrecparent = schemas.StrSchema
            joints = schemas.IntSchema
            length = schemas.NumberSchema
            make = schemas.StrSchema
            refid = schemas.StrSchema
            szdrift = schemas.NumberSchema
            szidnom = schemas.NumberSchema
            szodnom = schemas.NumberSchema
            wtperlength = schemas.NumberSchema
            __annotations__ = {
                "idrec": idrec,
                "idwell": idwell,
                "coatinginner": coatinginner,
                "coatingouter": coatingouter,
                "com": com,
                "conntyp": conntyp,
                "cost": cost,
                "costunitlabel": costunitlabel,
                "des": des,
                "grade": grade,
                "iconname": iconname,
                "idrecparent": idrecparent,
                "joints": joints,
                "length": length,
                "make": make,
                "refid": refid,
                "szdrift": szdrift,
                "szidnom": szidnom,
                "szodnom": szodnom,
                "wtperlength": wtperlength,
            }
    
    idrec: MetaOapg.properties.idrec
    idwell: MetaOapg.properties.idwell
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["coatinginner"]) -> MetaOapg.properties.coatinginner: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["coatingouter"]) -> MetaOapg.properties.coatingouter: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["com"]) -> MetaOapg.properties.com: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["conntyp"]) -> MetaOapg.properties.conntyp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cost"]) -> MetaOapg.properties.cost: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["costunitlabel"]) -> MetaOapg.properties.costunitlabel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["des"]) -> MetaOapg.properties.des: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["grade"]) -> MetaOapg.properties.grade: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["iconname"]) -> MetaOapg.properties.iconname: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecparent"]) -> MetaOapg.properties.idrecparent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["joints"]) -> MetaOapg.properties.joints: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["length"]) -> MetaOapg.properties.length: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["make"]) -> MetaOapg.properties.make: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["refid"]) -> MetaOapg.properties.refid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["szdrift"]) -> MetaOapg.properties.szdrift: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["szidnom"]) -> MetaOapg.properties.szidnom: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["szodnom"]) -> MetaOapg.properties.szodnom: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wtperlength"]) -> MetaOapg.properties.wtperlength: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "coatinginner", "coatingouter", "com", "conntyp", "cost", "costunitlabel", "des", "grade", "iconname", "idrecparent", "joints", "length", "make", "refid", "szdrift", "szidnom", "szodnom", "wtperlength", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["coatinginner"]) -> typing.Union[MetaOapg.properties.coatinginner, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["coatingouter"]) -> typing.Union[MetaOapg.properties.coatingouter, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["com"]) -> typing.Union[MetaOapg.properties.com, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["conntyp"]) -> typing.Union[MetaOapg.properties.conntyp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cost"]) -> typing.Union[MetaOapg.properties.cost, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["costunitlabel"]) -> typing.Union[MetaOapg.properties.costunitlabel, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["des"]) -> typing.Union[MetaOapg.properties.des, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["grade"]) -> typing.Union[MetaOapg.properties.grade, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["iconname"]) -> typing.Union[MetaOapg.properties.iconname, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecparent"]) -> typing.Union[MetaOapg.properties.idrecparent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["joints"]) -> typing.Union[MetaOapg.properties.joints, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["length"]) -> typing.Union[MetaOapg.properties.length, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["make"]) -> typing.Union[MetaOapg.properties.make, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["refid"]) -> typing.Union[MetaOapg.properties.refid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["szdrift"]) -> typing.Union[MetaOapg.properties.szdrift, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["szidnom"]) -> typing.Union[MetaOapg.properties.szidnom, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["szodnom"]) -> typing.Union[MetaOapg.properties.szodnom, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wtperlength"]) -> typing.Union[MetaOapg.properties.wtperlength, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "coatinginner", "coatingouter", "com", "conntyp", "cost", "costunitlabel", "des", "grade", "iconname", "idrecparent", "joints", "length", "make", "refid", "szdrift", "szidnom", "szodnom", "wtperlength", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idrec: typing.Union[MetaOapg.properties.idrec, str, ],
        idwell: typing.Union[MetaOapg.properties.idwell, str, ],
        coatinginner: typing.Union[MetaOapg.properties.coatinginner, str, schemas.Unset] = schemas.unset,
        coatingouter: typing.Union[MetaOapg.properties.coatingouter, str, schemas.Unset] = schemas.unset,
        com: typing.Union[MetaOapg.properties.com, str, schemas.Unset] = schemas.unset,
        conntyp: typing.Union[MetaOapg.properties.conntyp, str, schemas.Unset] = schemas.unset,
        cost: typing.Union[MetaOapg.properties.cost, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        costunitlabel: typing.Union[MetaOapg.properties.costunitlabel, str, schemas.Unset] = schemas.unset,
        des: typing.Union[MetaOapg.properties.des, str, schemas.Unset] = schemas.unset,
        grade: typing.Union[MetaOapg.properties.grade, str, schemas.Unset] = schemas.unset,
        iconname: typing.Union[MetaOapg.properties.iconname, str, schemas.Unset] = schemas.unset,
        idrecparent: typing.Union[MetaOapg.properties.idrecparent, str, schemas.Unset] = schemas.unset,
        joints: typing.Union[MetaOapg.properties.joints, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        length: typing.Union[MetaOapg.properties.length, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        make: typing.Union[MetaOapg.properties.make, str, schemas.Unset] = schemas.unset,
        refid: typing.Union[MetaOapg.properties.refid, str, schemas.Unset] = schemas.unset,
        szdrift: typing.Union[MetaOapg.properties.szdrift, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        szidnom: typing.Union[MetaOapg.properties.szidnom, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        szodnom: typing.Union[MetaOapg.properties.szodnom, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        wtperlength: typing.Union[MetaOapg.properties.wtperlength, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'RiserDiverterComponentsData':
        return super().__new__(
            cls,
            *args,
            idrec=idrec,
            idwell=idwell,
            coatinginner=coatinginner,
            coatingouter=coatingouter,
            com=com,
            conntyp=conntyp,
            cost=cost,
            costunitlabel=costunitlabel,
            des=des,
            grade=grade,
            iconname=iconname,
            idrecparent=idrecparent,
            joints=joints,
            length=length,
            make=make,
            refid=refid,
            szdrift=szdrift,
            szidnom=szidnom,
            szodnom=szodnom,
            wtperlength=wtperlength,
            _configuration=_configuration,
            **kwargs,
        )
