# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class WellboreData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idrec",
            "idwell",
        }
        
        class properties:
            idrec = schemas.StrSchema
            idwell = schemas.StrSchema
            com = schemas.StrSchema
            county = schemas.StrSchema
            depthdraw = schemas.NumberSchema
            depthstart = schemas.NumberSchema
            des = schemas.StrSchema
            ewdist = schemas.NumberSchema
            ewflag = schemas.StrSchema
            exclude = schemas.BoolSchema
            fieldcode = schemas.StrSchema
            fieldname = schemas.StrSchema
            idrecdirsrvyactual = schemas.StrSchema
            idrecdirsrvyprop = schemas.StrSchema
            idrecjob = schemas.StrSchema
            idrecparent = schemas.StrSchema
            latitude = schemas.NumberSchema
            latlongdatum = schemas.StrSchema
            latlongsource = schemas.StrSchema
            legalsurveyloc = schemas.StrSchema
            legalsurveysubtyp = schemas.StrSchema
            legalsurveytyp = schemas.StrSchema
            locationnote = schemas.StrSchema
            locationref = schemas.StrSchema
            longitude = schemas.NumberSchema
            nsdist = schemas.NumberSchema
            nsflag = schemas.StrSchema
            profiletyp = schemas.StrSchema
            purpose = schemas.StrSchema
            stateprov = schemas.StrSchema
            towndist = schemas.NumberSchema
            townflag = schemas.StrSchema
            townname = schemas.StrSchema
            townstateprov = schemas.StrSchema
            usernum1 = schemas.NumberSchema
            usernum2 = schemas.NumberSchema
            usernum3 = schemas.NumberSchema
            usertxt1 = schemas.StrSchema
            usertxt2 = schemas.StrSchema
            usertxt3 = schemas.StrSchema
            utmgridzone = schemas.IntSchema
            utmsource = schemas.StrSchema
            utmx = schemas.NumberSchema
            utmy = schemas.NumberSchema
            vsdir = schemas.NumberSchema
            vsoriginew = schemas.NumberSchema
            vsoriginns = schemas.NumberSchema
            wellboreida = schemas.StrSchema
            wellboreidb = schemas.StrSchema
            wellboreidc = schemas.StrSchema
            wellboreidd = schemas.StrSchema
            wellboreide = schemas.StrSchema
            __annotations__ = {
                "idrec": idrec,
                "idwell": idwell,
                "com": com,
                "county": county,
                "depthdraw": depthdraw,
                "depthstart": depthstart,
                "des": des,
                "ewdist": ewdist,
                "ewflag": ewflag,
                "exclude": exclude,
                "fieldcode": fieldcode,
                "fieldname": fieldname,
                "idrecdirsrvyactual": idrecdirsrvyactual,
                "idrecdirsrvyprop": idrecdirsrvyprop,
                "idrecjob": idrecjob,
                "idrecparent": idrecparent,
                "latitude": latitude,
                "latlongdatum": latlongdatum,
                "latlongsource": latlongsource,
                "legalsurveyloc": legalsurveyloc,
                "legalsurveysubtyp": legalsurveysubtyp,
                "legalsurveytyp": legalsurveytyp,
                "locationnote": locationnote,
                "locationref": locationref,
                "longitude": longitude,
                "nsdist": nsdist,
                "nsflag": nsflag,
                "profiletyp": profiletyp,
                "purpose": purpose,
                "stateprov": stateprov,
                "towndist": towndist,
                "townflag": townflag,
                "townname": townname,
                "townstateprov": townstateprov,
                "usernum1": usernum1,
                "usernum2": usernum2,
                "usernum3": usernum3,
                "usertxt1": usertxt1,
                "usertxt2": usertxt2,
                "usertxt3": usertxt3,
                "utmgridzone": utmgridzone,
                "utmsource": utmsource,
                "utmx": utmx,
                "utmy": utmy,
                "vsdir": vsdir,
                "vsoriginew": vsoriginew,
                "vsoriginns": vsoriginns,
                "wellboreida": wellboreida,
                "wellboreidb": wellboreidb,
                "wellboreidc": wellboreidc,
                "wellboreidd": wellboreidd,
                "wellboreide": wellboreide,
            }
    
    idrec: MetaOapg.properties.idrec
    idwell: MetaOapg.properties.idwell
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["com"]) -> MetaOapg.properties.com: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["county"]) -> MetaOapg.properties.county: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["depthdraw"]) -> MetaOapg.properties.depthdraw: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["depthstart"]) -> MetaOapg.properties.depthstart: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["des"]) -> MetaOapg.properties.des: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ewdist"]) -> MetaOapg.properties.ewdist: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ewflag"]) -> MetaOapg.properties.ewflag: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["exclude"]) -> MetaOapg.properties.exclude: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fieldcode"]) -> MetaOapg.properties.fieldcode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fieldname"]) -> MetaOapg.properties.fieldname: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecdirsrvyactual"]) -> MetaOapg.properties.idrecdirsrvyactual: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecdirsrvyprop"]) -> MetaOapg.properties.idrecdirsrvyprop: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecjob"]) -> MetaOapg.properties.idrecjob: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecparent"]) -> MetaOapg.properties.idrecparent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["latitude"]) -> MetaOapg.properties.latitude: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["latlongdatum"]) -> MetaOapg.properties.latlongdatum: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["latlongsource"]) -> MetaOapg.properties.latlongsource: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["legalsurveyloc"]) -> MetaOapg.properties.legalsurveyloc: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["legalsurveysubtyp"]) -> MetaOapg.properties.legalsurveysubtyp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["legalsurveytyp"]) -> MetaOapg.properties.legalsurveytyp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["locationnote"]) -> MetaOapg.properties.locationnote: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["locationref"]) -> MetaOapg.properties.locationref: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["longitude"]) -> MetaOapg.properties.longitude: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nsdist"]) -> MetaOapg.properties.nsdist: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nsflag"]) -> MetaOapg.properties.nsflag: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["profiletyp"]) -> MetaOapg.properties.profiletyp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["purpose"]) -> MetaOapg.properties.purpose: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stateprov"]) -> MetaOapg.properties.stateprov: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["towndist"]) -> MetaOapg.properties.towndist: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["townflag"]) -> MetaOapg.properties.townflag: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["townname"]) -> MetaOapg.properties.townname: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["townstateprov"]) -> MetaOapg.properties.townstateprov: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usernum1"]) -> MetaOapg.properties.usernum1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usernum2"]) -> MetaOapg.properties.usernum2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usernum3"]) -> MetaOapg.properties.usernum3: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usertxt1"]) -> MetaOapg.properties.usertxt1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usertxt2"]) -> MetaOapg.properties.usertxt2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usertxt3"]) -> MetaOapg.properties.usertxt3: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["utmgridzone"]) -> MetaOapg.properties.utmgridzone: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["utmsource"]) -> MetaOapg.properties.utmsource: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["utmx"]) -> MetaOapg.properties.utmx: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["utmy"]) -> MetaOapg.properties.utmy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vsdir"]) -> MetaOapg.properties.vsdir: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vsoriginew"]) -> MetaOapg.properties.vsoriginew: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vsoriginns"]) -> MetaOapg.properties.vsoriginns: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wellboreida"]) -> MetaOapg.properties.wellboreida: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wellboreidb"]) -> MetaOapg.properties.wellboreidb: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wellboreidc"]) -> MetaOapg.properties.wellboreidc: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wellboreidd"]) -> MetaOapg.properties.wellboreidd: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wellboreide"]) -> MetaOapg.properties.wellboreide: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "com", "county", "depthdraw", "depthstart", "des", "ewdist", "ewflag", "exclude", "fieldcode", "fieldname", "idrecdirsrvyactual", "idrecdirsrvyprop", "idrecjob", "idrecparent", "latitude", "latlongdatum", "latlongsource", "legalsurveyloc", "legalsurveysubtyp", "legalsurveytyp", "locationnote", "locationref", "longitude", "nsdist", "nsflag", "profiletyp", "purpose", "stateprov", "towndist", "townflag", "townname", "townstateprov", "usernum1", "usernum2", "usernum3", "usertxt1", "usertxt2", "usertxt3", "utmgridzone", "utmsource", "utmx", "utmy", "vsdir", "vsoriginew", "vsoriginns", "wellboreida", "wellboreidb", "wellboreidc", "wellboreidd", "wellboreide", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["com"]) -> typing.Union[MetaOapg.properties.com, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["county"]) -> typing.Union[MetaOapg.properties.county, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["depthdraw"]) -> typing.Union[MetaOapg.properties.depthdraw, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["depthstart"]) -> typing.Union[MetaOapg.properties.depthstart, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["des"]) -> typing.Union[MetaOapg.properties.des, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ewdist"]) -> typing.Union[MetaOapg.properties.ewdist, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ewflag"]) -> typing.Union[MetaOapg.properties.ewflag, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["exclude"]) -> typing.Union[MetaOapg.properties.exclude, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fieldcode"]) -> typing.Union[MetaOapg.properties.fieldcode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fieldname"]) -> typing.Union[MetaOapg.properties.fieldname, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecdirsrvyactual"]) -> typing.Union[MetaOapg.properties.idrecdirsrvyactual, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecdirsrvyprop"]) -> typing.Union[MetaOapg.properties.idrecdirsrvyprop, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecjob"]) -> typing.Union[MetaOapg.properties.idrecjob, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecparent"]) -> typing.Union[MetaOapg.properties.idrecparent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["latitude"]) -> typing.Union[MetaOapg.properties.latitude, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["latlongdatum"]) -> typing.Union[MetaOapg.properties.latlongdatum, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["latlongsource"]) -> typing.Union[MetaOapg.properties.latlongsource, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["legalsurveyloc"]) -> typing.Union[MetaOapg.properties.legalsurveyloc, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["legalsurveysubtyp"]) -> typing.Union[MetaOapg.properties.legalsurveysubtyp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["legalsurveytyp"]) -> typing.Union[MetaOapg.properties.legalsurveytyp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["locationnote"]) -> typing.Union[MetaOapg.properties.locationnote, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["locationref"]) -> typing.Union[MetaOapg.properties.locationref, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["longitude"]) -> typing.Union[MetaOapg.properties.longitude, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nsdist"]) -> typing.Union[MetaOapg.properties.nsdist, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nsflag"]) -> typing.Union[MetaOapg.properties.nsflag, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["profiletyp"]) -> typing.Union[MetaOapg.properties.profiletyp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["purpose"]) -> typing.Union[MetaOapg.properties.purpose, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stateprov"]) -> typing.Union[MetaOapg.properties.stateprov, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["towndist"]) -> typing.Union[MetaOapg.properties.towndist, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["townflag"]) -> typing.Union[MetaOapg.properties.townflag, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["townname"]) -> typing.Union[MetaOapg.properties.townname, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["townstateprov"]) -> typing.Union[MetaOapg.properties.townstateprov, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usernum1"]) -> typing.Union[MetaOapg.properties.usernum1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usernum2"]) -> typing.Union[MetaOapg.properties.usernum2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usernum3"]) -> typing.Union[MetaOapg.properties.usernum3, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usertxt1"]) -> typing.Union[MetaOapg.properties.usertxt1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usertxt2"]) -> typing.Union[MetaOapg.properties.usertxt2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usertxt3"]) -> typing.Union[MetaOapg.properties.usertxt3, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["utmgridzone"]) -> typing.Union[MetaOapg.properties.utmgridzone, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["utmsource"]) -> typing.Union[MetaOapg.properties.utmsource, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["utmx"]) -> typing.Union[MetaOapg.properties.utmx, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["utmy"]) -> typing.Union[MetaOapg.properties.utmy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vsdir"]) -> typing.Union[MetaOapg.properties.vsdir, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vsoriginew"]) -> typing.Union[MetaOapg.properties.vsoriginew, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vsoriginns"]) -> typing.Union[MetaOapg.properties.vsoriginns, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wellboreida"]) -> typing.Union[MetaOapg.properties.wellboreida, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wellboreidb"]) -> typing.Union[MetaOapg.properties.wellboreidb, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wellboreidc"]) -> typing.Union[MetaOapg.properties.wellboreidc, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wellboreidd"]) -> typing.Union[MetaOapg.properties.wellboreidd, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wellboreide"]) -> typing.Union[MetaOapg.properties.wellboreide, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "com", "county", "depthdraw", "depthstart", "des", "ewdist", "ewflag", "exclude", "fieldcode", "fieldname", "idrecdirsrvyactual", "idrecdirsrvyprop", "idrecjob", "idrecparent", "latitude", "latlongdatum", "latlongsource", "legalsurveyloc", "legalsurveysubtyp", "legalsurveytyp", "locationnote", "locationref", "longitude", "nsdist", "nsflag", "profiletyp", "purpose", "stateprov", "towndist", "townflag", "townname", "townstateprov", "usernum1", "usernum2", "usernum3", "usertxt1", "usertxt2", "usertxt3", "utmgridzone", "utmsource", "utmx", "utmy", "vsdir", "vsoriginew", "vsoriginns", "wellboreida", "wellboreidb", "wellboreidc", "wellboreidd", "wellboreide", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idrec: typing.Union[MetaOapg.properties.idrec, str, ],
        idwell: typing.Union[MetaOapg.properties.idwell, str, ],
        com: typing.Union[MetaOapg.properties.com, str, schemas.Unset] = schemas.unset,
        county: typing.Union[MetaOapg.properties.county, str, schemas.Unset] = schemas.unset,
        depthdraw: typing.Union[MetaOapg.properties.depthdraw, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        depthstart: typing.Union[MetaOapg.properties.depthstart, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        des: typing.Union[MetaOapg.properties.des, str, schemas.Unset] = schemas.unset,
        ewdist: typing.Union[MetaOapg.properties.ewdist, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        ewflag: typing.Union[MetaOapg.properties.ewflag, str, schemas.Unset] = schemas.unset,
        exclude: typing.Union[MetaOapg.properties.exclude, bool, schemas.Unset] = schemas.unset,
        fieldcode: typing.Union[MetaOapg.properties.fieldcode, str, schemas.Unset] = schemas.unset,
        fieldname: typing.Union[MetaOapg.properties.fieldname, str, schemas.Unset] = schemas.unset,
        idrecdirsrvyactual: typing.Union[MetaOapg.properties.idrecdirsrvyactual, str, schemas.Unset] = schemas.unset,
        idrecdirsrvyprop: typing.Union[MetaOapg.properties.idrecdirsrvyprop, str, schemas.Unset] = schemas.unset,
        idrecjob: typing.Union[MetaOapg.properties.idrecjob, str, schemas.Unset] = schemas.unset,
        idrecparent: typing.Union[MetaOapg.properties.idrecparent, str, schemas.Unset] = schemas.unset,
        latitude: typing.Union[MetaOapg.properties.latitude, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        latlongdatum: typing.Union[MetaOapg.properties.latlongdatum, str, schemas.Unset] = schemas.unset,
        latlongsource: typing.Union[MetaOapg.properties.latlongsource, str, schemas.Unset] = schemas.unset,
        legalsurveyloc: typing.Union[MetaOapg.properties.legalsurveyloc, str, schemas.Unset] = schemas.unset,
        legalsurveysubtyp: typing.Union[MetaOapg.properties.legalsurveysubtyp, str, schemas.Unset] = schemas.unset,
        legalsurveytyp: typing.Union[MetaOapg.properties.legalsurveytyp, str, schemas.Unset] = schemas.unset,
        locationnote: typing.Union[MetaOapg.properties.locationnote, str, schemas.Unset] = schemas.unset,
        locationref: typing.Union[MetaOapg.properties.locationref, str, schemas.Unset] = schemas.unset,
        longitude: typing.Union[MetaOapg.properties.longitude, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        nsdist: typing.Union[MetaOapg.properties.nsdist, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        nsflag: typing.Union[MetaOapg.properties.nsflag, str, schemas.Unset] = schemas.unset,
        profiletyp: typing.Union[MetaOapg.properties.profiletyp, str, schemas.Unset] = schemas.unset,
        purpose: typing.Union[MetaOapg.properties.purpose, str, schemas.Unset] = schemas.unset,
        stateprov: typing.Union[MetaOapg.properties.stateprov, str, schemas.Unset] = schemas.unset,
        towndist: typing.Union[MetaOapg.properties.towndist, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        townflag: typing.Union[MetaOapg.properties.townflag, str, schemas.Unset] = schemas.unset,
        townname: typing.Union[MetaOapg.properties.townname, str, schemas.Unset] = schemas.unset,
        townstateprov: typing.Union[MetaOapg.properties.townstateprov, str, schemas.Unset] = schemas.unset,
        usernum1: typing.Union[MetaOapg.properties.usernum1, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        usernum2: typing.Union[MetaOapg.properties.usernum2, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        usernum3: typing.Union[MetaOapg.properties.usernum3, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        usertxt1: typing.Union[MetaOapg.properties.usertxt1, str, schemas.Unset] = schemas.unset,
        usertxt2: typing.Union[MetaOapg.properties.usertxt2, str, schemas.Unset] = schemas.unset,
        usertxt3: typing.Union[MetaOapg.properties.usertxt3, str, schemas.Unset] = schemas.unset,
        utmgridzone: typing.Union[MetaOapg.properties.utmgridzone, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        utmsource: typing.Union[MetaOapg.properties.utmsource, str, schemas.Unset] = schemas.unset,
        utmx: typing.Union[MetaOapg.properties.utmx, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        utmy: typing.Union[MetaOapg.properties.utmy, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        vsdir: typing.Union[MetaOapg.properties.vsdir, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        vsoriginew: typing.Union[MetaOapg.properties.vsoriginew, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        vsoriginns: typing.Union[MetaOapg.properties.vsoriginns, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        wellboreida: typing.Union[MetaOapg.properties.wellboreida, str, schemas.Unset] = schemas.unset,
        wellboreidb: typing.Union[MetaOapg.properties.wellboreidb, str, schemas.Unset] = schemas.unset,
        wellboreidc: typing.Union[MetaOapg.properties.wellboreidc, str, schemas.Unset] = schemas.unset,
        wellboreidd: typing.Union[MetaOapg.properties.wellboreidd, str, schemas.Unset] = schemas.unset,
        wellboreide: typing.Union[MetaOapg.properties.wellboreide, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'WellboreData':
        return super().__new__(
            cls,
            *args,
            idrec=idrec,
            idwell=idwell,
            com=com,
            county=county,
            depthdraw=depthdraw,
            depthstart=depthstart,
            des=des,
            ewdist=ewdist,
            ewflag=ewflag,
            exclude=exclude,
            fieldcode=fieldcode,
            fieldname=fieldname,
            idrecdirsrvyactual=idrecdirsrvyactual,
            idrecdirsrvyprop=idrecdirsrvyprop,
            idrecjob=idrecjob,
            idrecparent=idrecparent,
            latitude=latitude,
            latlongdatum=latlongdatum,
            latlongsource=latlongsource,
            legalsurveyloc=legalsurveyloc,
            legalsurveysubtyp=legalsurveysubtyp,
            legalsurveytyp=legalsurveytyp,
            locationnote=locationnote,
            locationref=locationref,
            longitude=longitude,
            nsdist=nsdist,
            nsflag=nsflag,
            profiletyp=profiletyp,
            purpose=purpose,
            stateprov=stateprov,
            towndist=towndist,
            townflag=townflag,
            townname=townname,
            townstateprov=townstateprov,
            usernum1=usernum1,
            usernum2=usernum2,
            usernum3=usernum3,
            usertxt1=usertxt1,
            usertxt2=usertxt2,
            usertxt3=usertxt3,
            utmgridzone=utmgridzone,
            utmsource=utmsource,
            utmx=utmx,
            utmy=utmy,
            vsdir=vsdir,
            vsoriginew=vsoriginew,
            vsoriginns=vsoriginns,
            wellboreida=wellboreida,
            wellboreidb=wellboreidb,
            wellboreidc=wellboreidc,
            wellboreidd=wellboreidd,
            wellboreide=wellboreide,
            _configuration=_configuration,
            **kwargs,
        )
