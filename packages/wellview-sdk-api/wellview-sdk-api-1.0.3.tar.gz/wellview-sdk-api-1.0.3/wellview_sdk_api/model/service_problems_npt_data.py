# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class ServiceProblemsNPTData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idrec",
            "idwell",
        }
        
        class properties:
            idrec = schemas.StrSchema
            idwell = schemas.StrSchema
            accountablepty = schemas.StrSchema
            actiontaken = schemas.StrSchema
            com = schemas.StrSchema
            costrecov = schemas.NumberSchema
            dateortyp = schemas.StrSchema
            depthend = schemas.NumberSchema
            depthstart = schemas.NumberSchema
            des = schemas.StrSchema
            dttmend = schemas.DateTimeSchema
            dttmstart = schemas.DateTimeSchema
            estcostoverride = schemas.NumberSchema
            estlosttime = schemas.NumberSchema
            excludefromproblemtime = schemas.BoolSchema
            idrecfaileditem = schemas.StrSchema
            idrecjobservicecontract = schemas.StrSchema
            idrecparent = schemas.StrSchema
            idrecwellbore = schemas.StrSchema
            opscondition = schemas.StrSchema
            potentialseverity = schemas.StrSchema
            problemsystem1 = schemas.StrSchema
            problemsystem2 = schemas.StrSchema
            problemsystem3 = schemas.StrSchema
            refno = schemas.StrSchema
            severity = schemas.StrSchema
            status = schemas.StrSchema
            typ = schemas.StrSchema
            typdetail = schemas.StrSchema
            __annotations__ = {
                "idrec": idrec,
                "idwell": idwell,
                "accountablepty": accountablepty,
                "actiontaken": actiontaken,
                "com": com,
                "costrecov": costrecov,
                "dateortyp": dateortyp,
                "depthend": depthend,
                "depthstart": depthstart,
                "des": des,
                "dttmend": dttmend,
                "dttmstart": dttmstart,
                "estcostoverride": estcostoverride,
                "estlosttime": estlosttime,
                "excludefromproblemtime": excludefromproblemtime,
                "idrecfaileditem": idrecfaileditem,
                "idrecjobservicecontract": idrecjobservicecontract,
                "idrecparent": idrecparent,
                "idrecwellbore": idrecwellbore,
                "opscondition": opscondition,
                "potentialseverity": potentialseverity,
                "problemsystem1": problemsystem1,
                "problemsystem2": problemsystem2,
                "problemsystem3": problemsystem3,
                "refno": refno,
                "severity": severity,
                "status": status,
                "typ": typ,
                "typdetail": typdetail,
            }
    
    idrec: MetaOapg.properties.idrec
    idwell: MetaOapg.properties.idwell
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accountablepty"]) -> MetaOapg.properties.accountablepty: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["actiontaken"]) -> MetaOapg.properties.actiontaken: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["com"]) -> MetaOapg.properties.com: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["costrecov"]) -> MetaOapg.properties.costrecov: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateortyp"]) -> MetaOapg.properties.dateortyp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["depthend"]) -> MetaOapg.properties.depthend: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["depthstart"]) -> MetaOapg.properties.depthstart: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["des"]) -> MetaOapg.properties.des: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmend"]) -> MetaOapg.properties.dttmend: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmstart"]) -> MetaOapg.properties.dttmstart: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["estcostoverride"]) -> MetaOapg.properties.estcostoverride: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["estlosttime"]) -> MetaOapg.properties.estlosttime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["excludefromproblemtime"]) -> MetaOapg.properties.excludefromproblemtime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecfaileditem"]) -> MetaOapg.properties.idrecfaileditem: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecjobservicecontract"]) -> MetaOapg.properties.idrecjobservicecontract: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecparent"]) -> MetaOapg.properties.idrecparent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecwellbore"]) -> MetaOapg.properties.idrecwellbore: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["opscondition"]) -> MetaOapg.properties.opscondition: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["potentialseverity"]) -> MetaOapg.properties.potentialseverity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["problemsystem1"]) -> MetaOapg.properties.problemsystem1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["problemsystem2"]) -> MetaOapg.properties.problemsystem2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["problemsystem3"]) -> MetaOapg.properties.problemsystem3: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["refno"]) -> MetaOapg.properties.refno: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["severity"]) -> MetaOapg.properties.severity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["typ"]) -> MetaOapg.properties.typ: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["typdetail"]) -> MetaOapg.properties.typdetail: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "accountablepty", "actiontaken", "com", "costrecov", "dateortyp", "depthend", "depthstart", "des", "dttmend", "dttmstart", "estcostoverride", "estlosttime", "excludefromproblemtime", "idrecfaileditem", "idrecjobservicecontract", "idrecparent", "idrecwellbore", "opscondition", "potentialseverity", "problemsystem1", "problemsystem2", "problemsystem3", "refno", "severity", "status", "typ", "typdetail", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accountablepty"]) -> typing.Union[MetaOapg.properties.accountablepty, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["actiontaken"]) -> typing.Union[MetaOapg.properties.actiontaken, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["com"]) -> typing.Union[MetaOapg.properties.com, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["costrecov"]) -> typing.Union[MetaOapg.properties.costrecov, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateortyp"]) -> typing.Union[MetaOapg.properties.dateortyp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["depthend"]) -> typing.Union[MetaOapg.properties.depthend, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["depthstart"]) -> typing.Union[MetaOapg.properties.depthstart, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["des"]) -> typing.Union[MetaOapg.properties.des, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmend"]) -> typing.Union[MetaOapg.properties.dttmend, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmstart"]) -> typing.Union[MetaOapg.properties.dttmstart, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["estcostoverride"]) -> typing.Union[MetaOapg.properties.estcostoverride, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["estlosttime"]) -> typing.Union[MetaOapg.properties.estlosttime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["excludefromproblemtime"]) -> typing.Union[MetaOapg.properties.excludefromproblemtime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecfaileditem"]) -> typing.Union[MetaOapg.properties.idrecfaileditem, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecjobservicecontract"]) -> typing.Union[MetaOapg.properties.idrecjobservicecontract, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecparent"]) -> typing.Union[MetaOapg.properties.idrecparent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecwellbore"]) -> typing.Union[MetaOapg.properties.idrecwellbore, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["opscondition"]) -> typing.Union[MetaOapg.properties.opscondition, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["potentialseverity"]) -> typing.Union[MetaOapg.properties.potentialseverity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["problemsystem1"]) -> typing.Union[MetaOapg.properties.problemsystem1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["problemsystem2"]) -> typing.Union[MetaOapg.properties.problemsystem2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["problemsystem3"]) -> typing.Union[MetaOapg.properties.problemsystem3, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["refno"]) -> typing.Union[MetaOapg.properties.refno, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["severity"]) -> typing.Union[MetaOapg.properties.severity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["typ"]) -> typing.Union[MetaOapg.properties.typ, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["typdetail"]) -> typing.Union[MetaOapg.properties.typdetail, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "accountablepty", "actiontaken", "com", "costrecov", "dateortyp", "depthend", "depthstart", "des", "dttmend", "dttmstart", "estcostoverride", "estlosttime", "excludefromproblemtime", "idrecfaileditem", "idrecjobservicecontract", "idrecparent", "idrecwellbore", "opscondition", "potentialseverity", "problemsystem1", "problemsystem2", "problemsystem3", "refno", "severity", "status", "typ", "typdetail", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idrec: typing.Union[MetaOapg.properties.idrec, str, ],
        idwell: typing.Union[MetaOapg.properties.idwell, str, ],
        accountablepty: typing.Union[MetaOapg.properties.accountablepty, str, schemas.Unset] = schemas.unset,
        actiontaken: typing.Union[MetaOapg.properties.actiontaken, str, schemas.Unset] = schemas.unset,
        com: typing.Union[MetaOapg.properties.com, str, schemas.Unset] = schemas.unset,
        costrecov: typing.Union[MetaOapg.properties.costrecov, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        dateortyp: typing.Union[MetaOapg.properties.dateortyp, str, schemas.Unset] = schemas.unset,
        depthend: typing.Union[MetaOapg.properties.depthend, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        depthstart: typing.Union[MetaOapg.properties.depthstart, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        des: typing.Union[MetaOapg.properties.des, str, schemas.Unset] = schemas.unset,
        dttmend: typing.Union[MetaOapg.properties.dttmend, str, datetime, schemas.Unset] = schemas.unset,
        dttmstart: typing.Union[MetaOapg.properties.dttmstart, str, datetime, schemas.Unset] = schemas.unset,
        estcostoverride: typing.Union[MetaOapg.properties.estcostoverride, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        estlosttime: typing.Union[MetaOapg.properties.estlosttime, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        excludefromproblemtime: typing.Union[MetaOapg.properties.excludefromproblemtime, bool, schemas.Unset] = schemas.unset,
        idrecfaileditem: typing.Union[MetaOapg.properties.idrecfaileditem, str, schemas.Unset] = schemas.unset,
        idrecjobservicecontract: typing.Union[MetaOapg.properties.idrecjobservicecontract, str, schemas.Unset] = schemas.unset,
        idrecparent: typing.Union[MetaOapg.properties.idrecparent, str, schemas.Unset] = schemas.unset,
        idrecwellbore: typing.Union[MetaOapg.properties.idrecwellbore, str, schemas.Unset] = schemas.unset,
        opscondition: typing.Union[MetaOapg.properties.opscondition, str, schemas.Unset] = schemas.unset,
        potentialseverity: typing.Union[MetaOapg.properties.potentialseverity, str, schemas.Unset] = schemas.unset,
        problemsystem1: typing.Union[MetaOapg.properties.problemsystem1, str, schemas.Unset] = schemas.unset,
        problemsystem2: typing.Union[MetaOapg.properties.problemsystem2, str, schemas.Unset] = schemas.unset,
        problemsystem3: typing.Union[MetaOapg.properties.problemsystem3, str, schemas.Unset] = schemas.unset,
        refno: typing.Union[MetaOapg.properties.refno, str, schemas.Unset] = schemas.unset,
        severity: typing.Union[MetaOapg.properties.severity, str, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        typ: typing.Union[MetaOapg.properties.typ, str, schemas.Unset] = schemas.unset,
        typdetail: typing.Union[MetaOapg.properties.typdetail, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ServiceProblemsNPTData':
        return super().__new__(
            cls,
            *args,
            idrec=idrec,
            idwell=idwell,
            accountablepty=accountablepty,
            actiontaken=actiontaken,
            com=com,
            costrecov=costrecov,
            dateortyp=dateortyp,
            depthend=depthend,
            depthstart=depthstart,
            des=des,
            dttmend=dttmend,
            dttmstart=dttmstart,
            estcostoverride=estcostoverride,
            estlosttime=estlosttime,
            excludefromproblemtime=excludefromproblemtime,
            idrecfaileditem=idrecfaileditem,
            idrecjobservicecontract=idrecjobservicecontract,
            idrecparent=idrecparent,
            idrecwellbore=idrecwellbore,
            opscondition=opscondition,
            potentialseverity=potentialseverity,
            problemsystem1=problemsystem1,
            problemsystem2=problemsystem2,
            problemsystem3=problemsystem3,
            refno=refno,
            severity=severity,
            status=status,
            typ=typ,
            typdetail=typdetail,
            _configuration=_configuration,
            **kwargs,
        )
