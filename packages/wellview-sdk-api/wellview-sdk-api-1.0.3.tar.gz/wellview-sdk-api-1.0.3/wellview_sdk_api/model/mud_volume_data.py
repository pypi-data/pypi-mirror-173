# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class MudVolumeData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idrec",
            "idwell",
        }
        
        class properties:
            idrec = schemas.StrSchema
            idwell = schemas.StrSchema
            com = schemas.StrSchema
            densitytankref = schemas.NumberSchema
            depthref = schemas.NumberSchema
            excludeactive = schemas.BoolSchema
            fluidtyp = schemas.StrSchema
            idrecjobrigtank = schemas.StrSchema
            idrecparent = schemas.StrSchema
            idrecwellbore = schemas.StrSchema
            syscarryfwdp = schemas.BoolSchema
            system = schemas.StrSchema
            typ1 = schemas.StrSchema
            typ2 = schemas.StrSchema
            voltyp = schemas.StrSchema
            volume = schemas.NumberSchema
            __annotations__ = {
                "idrec": idrec,
                "idwell": idwell,
                "com": com,
                "densitytankref": densitytankref,
                "depthref": depthref,
                "excludeactive": excludeactive,
                "fluidtyp": fluidtyp,
                "idrecjobrigtank": idrecjobrigtank,
                "idrecparent": idrecparent,
                "idrecwellbore": idrecwellbore,
                "syscarryfwdp": syscarryfwdp,
                "system": system,
                "typ1": typ1,
                "typ2": typ2,
                "voltyp": voltyp,
                "volume": volume,
            }
    
    idrec: MetaOapg.properties.idrec
    idwell: MetaOapg.properties.idwell
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["com"]) -> MetaOapg.properties.com: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["densitytankref"]) -> MetaOapg.properties.densitytankref: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["depthref"]) -> MetaOapg.properties.depthref: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["excludeactive"]) -> MetaOapg.properties.excludeactive: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fluidtyp"]) -> MetaOapg.properties.fluidtyp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecjobrigtank"]) -> MetaOapg.properties.idrecjobrigtank: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecparent"]) -> MetaOapg.properties.idrecparent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecwellbore"]) -> MetaOapg.properties.idrecwellbore: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["syscarryfwdp"]) -> MetaOapg.properties.syscarryfwdp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["system"]) -> MetaOapg.properties.system: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["typ1"]) -> MetaOapg.properties.typ1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["typ2"]) -> MetaOapg.properties.typ2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["voltyp"]) -> MetaOapg.properties.voltyp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["volume"]) -> MetaOapg.properties.volume: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "com", "densitytankref", "depthref", "excludeactive", "fluidtyp", "idrecjobrigtank", "idrecparent", "idrecwellbore", "syscarryfwdp", "system", "typ1", "typ2", "voltyp", "volume", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["com"]) -> typing.Union[MetaOapg.properties.com, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["densitytankref"]) -> typing.Union[MetaOapg.properties.densitytankref, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["depthref"]) -> typing.Union[MetaOapg.properties.depthref, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["excludeactive"]) -> typing.Union[MetaOapg.properties.excludeactive, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fluidtyp"]) -> typing.Union[MetaOapg.properties.fluidtyp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecjobrigtank"]) -> typing.Union[MetaOapg.properties.idrecjobrigtank, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecparent"]) -> typing.Union[MetaOapg.properties.idrecparent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecwellbore"]) -> typing.Union[MetaOapg.properties.idrecwellbore, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["syscarryfwdp"]) -> typing.Union[MetaOapg.properties.syscarryfwdp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["system"]) -> typing.Union[MetaOapg.properties.system, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["typ1"]) -> typing.Union[MetaOapg.properties.typ1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["typ2"]) -> typing.Union[MetaOapg.properties.typ2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["voltyp"]) -> typing.Union[MetaOapg.properties.voltyp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["volume"]) -> typing.Union[MetaOapg.properties.volume, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "com", "densitytankref", "depthref", "excludeactive", "fluidtyp", "idrecjobrigtank", "idrecparent", "idrecwellbore", "syscarryfwdp", "system", "typ1", "typ2", "voltyp", "volume", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idrec: typing.Union[MetaOapg.properties.idrec, str, ],
        idwell: typing.Union[MetaOapg.properties.idwell, str, ],
        com: typing.Union[MetaOapg.properties.com, str, schemas.Unset] = schemas.unset,
        densitytankref: typing.Union[MetaOapg.properties.densitytankref, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        depthref: typing.Union[MetaOapg.properties.depthref, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        excludeactive: typing.Union[MetaOapg.properties.excludeactive, bool, schemas.Unset] = schemas.unset,
        fluidtyp: typing.Union[MetaOapg.properties.fluidtyp, str, schemas.Unset] = schemas.unset,
        idrecjobrigtank: typing.Union[MetaOapg.properties.idrecjobrigtank, str, schemas.Unset] = schemas.unset,
        idrecparent: typing.Union[MetaOapg.properties.idrecparent, str, schemas.Unset] = schemas.unset,
        idrecwellbore: typing.Union[MetaOapg.properties.idrecwellbore, str, schemas.Unset] = schemas.unset,
        syscarryfwdp: typing.Union[MetaOapg.properties.syscarryfwdp, bool, schemas.Unset] = schemas.unset,
        system: typing.Union[MetaOapg.properties.system, str, schemas.Unset] = schemas.unset,
        typ1: typing.Union[MetaOapg.properties.typ1, str, schemas.Unset] = schemas.unset,
        typ2: typing.Union[MetaOapg.properties.typ2, str, schemas.Unset] = schemas.unset,
        voltyp: typing.Union[MetaOapg.properties.voltyp, str, schemas.Unset] = schemas.unset,
        volume: typing.Union[MetaOapg.properties.volume, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'MudVolumeData':
        return super().__new__(
            cls,
            *args,
            idrec=idrec,
            idwell=idwell,
            com=com,
            densitytankref=densitytankref,
            depthref=depthref,
            excludeactive=excludeactive,
            fluidtyp=fluidtyp,
            idrecjobrigtank=idrecjobrigtank,
            idrecparent=idrecparent,
            idrecwellbore=idrecwellbore,
            syscarryfwdp=syscarryfwdp,
            system=system,
            typ1=typ1,
            typ2=typ2,
            voltyp=voltyp,
            volume=volume,
            _configuration=_configuration,
            **kwargs,
        )
