# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class TestResultData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idrec",
            "idwell",
        }
        
        class properties:
            idrec = schemas.StrSchema
            idwell = schemas.StrSchema
            analysiscom = schemas.StrSchema
            analysismethod = schemas.StrSchema
            analysissoftware = schemas.StrSchema
            analyst = schemas.StrSchema
            aof = schemas.NumberSchema
            definitive = schemas.BoolSchema
            depthmpp = schemas.NumberSchema
            idrecparent = schemas.StrSchema
            investradius = schemas.NumberSchema
            mobilityratio = schemas.NumberSchema
            presresdatum = schemas.NumberSchema
            presresmpp = schemas.NumberSchema
            productivitycoef = schemas.NumberSchema
            productivityexp = schemas.NumberSchema
            productivityindex = schemas.NumberSchema
            resboundnote = schemas.StrSchema
            resboundtyp = schemas.StrSchema
            respermhor = schemas.NumberSchema
            respermratio = schemas.NumberSchema
            skin = schemas.NumberSchema
            tempres = schemas.NumberSchema
            __annotations__ = {
                "idrec": idrec,
                "idwell": idwell,
                "analysiscom": analysiscom,
                "analysismethod": analysismethod,
                "analysissoftware": analysissoftware,
                "analyst": analyst,
                "aof": aof,
                "definitive": definitive,
                "depthmpp": depthmpp,
                "idrecparent": idrecparent,
                "investradius": investradius,
                "mobilityratio": mobilityratio,
                "presresdatum": presresdatum,
                "presresmpp": presresmpp,
                "productivitycoef": productivitycoef,
                "productivityexp": productivityexp,
                "productivityindex": productivityindex,
                "resboundnote": resboundnote,
                "resboundtyp": resboundtyp,
                "respermhor": respermhor,
                "respermratio": respermratio,
                "skin": skin,
                "tempres": tempres,
            }
    
    idrec: MetaOapg.properties.idrec
    idwell: MetaOapg.properties.idwell
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["analysiscom"]) -> MetaOapg.properties.analysiscom: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["analysismethod"]) -> MetaOapg.properties.analysismethod: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["analysissoftware"]) -> MetaOapg.properties.analysissoftware: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["analyst"]) -> MetaOapg.properties.analyst: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["aof"]) -> MetaOapg.properties.aof: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["definitive"]) -> MetaOapg.properties.definitive: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["depthmpp"]) -> MetaOapg.properties.depthmpp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecparent"]) -> MetaOapg.properties.idrecparent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["investradius"]) -> MetaOapg.properties.investradius: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mobilityratio"]) -> MetaOapg.properties.mobilityratio: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["presresdatum"]) -> MetaOapg.properties.presresdatum: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["presresmpp"]) -> MetaOapg.properties.presresmpp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["productivitycoef"]) -> MetaOapg.properties.productivitycoef: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["productivityexp"]) -> MetaOapg.properties.productivityexp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["productivityindex"]) -> MetaOapg.properties.productivityindex: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["resboundnote"]) -> MetaOapg.properties.resboundnote: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["resboundtyp"]) -> MetaOapg.properties.resboundtyp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["respermhor"]) -> MetaOapg.properties.respermhor: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["respermratio"]) -> MetaOapg.properties.respermratio: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["skin"]) -> MetaOapg.properties.skin: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tempres"]) -> MetaOapg.properties.tempres: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "analysiscom", "analysismethod", "analysissoftware", "analyst", "aof", "definitive", "depthmpp", "idrecparent", "investradius", "mobilityratio", "presresdatum", "presresmpp", "productivitycoef", "productivityexp", "productivityindex", "resboundnote", "resboundtyp", "respermhor", "respermratio", "skin", "tempres", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["analysiscom"]) -> typing.Union[MetaOapg.properties.analysiscom, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["analysismethod"]) -> typing.Union[MetaOapg.properties.analysismethod, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["analysissoftware"]) -> typing.Union[MetaOapg.properties.analysissoftware, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["analyst"]) -> typing.Union[MetaOapg.properties.analyst, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["aof"]) -> typing.Union[MetaOapg.properties.aof, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["definitive"]) -> typing.Union[MetaOapg.properties.definitive, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["depthmpp"]) -> typing.Union[MetaOapg.properties.depthmpp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecparent"]) -> typing.Union[MetaOapg.properties.idrecparent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["investradius"]) -> typing.Union[MetaOapg.properties.investradius, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mobilityratio"]) -> typing.Union[MetaOapg.properties.mobilityratio, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["presresdatum"]) -> typing.Union[MetaOapg.properties.presresdatum, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["presresmpp"]) -> typing.Union[MetaOapg.properties.presresmpp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["productivitycoef"]) -> typing.Union[MetaOapg.properties.productivitycoef, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["productivityexp"]) -> typing.Union[MetaOapg.properties.productivityexp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["productivityindex"]) -> typing.Union[MetaOapg.properties.productivityindex, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["resboundnote"]) -> typing.Union[MetaOapg.properties.resboundnote, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["resboundtyp"]) -> typing.Union[MetaOapg.properties.resboundtyp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["respermhor"]) -> typing.Union[MetaOapg.properties.respermhor, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["respermratio"]) -> typing.Union[MetaOapg.properties.respermratio, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["skin"]) -> typing.Union[MetaOapg.properties.skin, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tempres"]) -> typing.Union[MetaOapg.properties.tempres, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "analysiscom", "analysismethod", "analysissoftware", "analyst", "aof", "definitive", "depthmpp", "idrecparent", "investradius", "mobilityratio", "presresdatum", "presresmpp", "productivitycoef", "productivityexp", "productivityindex", "resboundnote", "resboundtyp", "respermhor", "respermratio", "skin", "tempres", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idrec: typing.Union[MetaOapg.properties.idrec, str, ],
        idwell: typing.Union[MetaOapg.properties.idwell, str, ],
        analysiscom: typing.Union[MetaOapg.properties.analysiscom, str, schemas.Unset] = schemas.unset,
        analysismethod: typing.Union[MetaOapg.properties.analysismethod, str, schemas.Unset] = schemas.unset,
        analysissoftware: typing.Union[MetaOapg.properties.analysissoftware, str, schemas.Unset] = schemas.unset,
        analyst: typing.Union[MetaOapg.properties.analyst, str, schemas.Unset] = schemas.unset,
        aof: typing.Union[MetaOapg.properties.aof, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        definitive: typing.Union[MetaOapg.properties.definitive, bool, schemas.Unset] = schemas.unset,
        depthmpp: typing.Union[MetaOapg.properties.depthmpp, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        idrecparent: typing.Union[MetaOapg.properties.idrecparent, str, schemas.Unset] = schemas.unset,
        investradius: typing.Union[MetaOapg.properties.investradius, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        mobilityratio: typing.Union[MetaOapg.properties.mobilityratio, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        presresdatum: typing.Union[MetaOapg.properties.presresdatum, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        presresmpp: typing.Union[MetaOapg.properties.presresmpp, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        productivitycoef: typing.Union[MetaOapg.properties.productivitycoef, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        productivityexp: typing.Union[MetaOapg.properties.productivityexp, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        productivityindex: typing.Union[MetaOapg.properties.productivityindex, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        resboundnote: typing.Union[MetaOapg.properties.resboundnote, str, schemas.Unset] = schemas.unset,
        resboundtyp: typing.Union[MetaOapg.properties.resboundtyp, str, schemas.Unset] = schemas.unset,
        respermhor: typing.Union[MetaOapg.properties.respermhor, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        respermratio: typing.Union[MetaOapg.properties.respermratio, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        skin: typing.Union[MetaOapg.properties.skin, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        tempres: typing.Union[MetaOapg.properties.tempres, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TestResultData':
        return super().__new__(
            cls,
            *args,
            idrec=idrec,
            idwell=idwell,
            analysiscom=analysiscom,
            analysismethod=analysismethod,
            analysissoftware=analysissoftware,
            analyst=analyst,
            aof=aof,
            definitive=definitive,
            depthmpp=depthmpp,
            idrecparent=idrecparent,
            investradius=investradius,
            mobilityratio=mobilityratio,
            presresdatum=presresdatum,
            presresmpp=presresmpp,
            productivitycoef=productivitycoef,
            productivityexp=productivityexp,
            productivityindex=productivityindex,
            resboundnote=resboundnote,
            resboundtyp=resboundtyp,
            respermhor=respermhor,
            respermratio=respermratio,
            skin=skin,
            tempres=tempres,
            _configuration=_configuration,
            **kwargs,
        )
