# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class JobData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idrec",
            "idwell",
        }
        
        class properties:
            idrec = schemas.StrSchema
            idwell = schemas.StrSchema
            chartofaccounts = schemas.StrSchema
            client = schemas.StrSchema
            complexityindex = schemas.StrSchema
            costfinalactual = schemas.NumberSchema
            currencycode = schemas.StrSchema
            currencyexchangerate = schemas.NumberSchema
            dttmend = schemas.DateTimeSchema
            dttmspud = schemas.DateTimeSchema
            dttmstart = schemas.DateTimeSchema
            dttmstartplan = schemas.DateTimeSchema
            idrectub = schemas.StrSchema
            idrecwellbore = schemas.StrSchema
            jobida = schemas.StrSchema
            jobidb = schemas.StrSchema
            jobidc = schemas.StrSchema
            jobsubtyp = schemas.StrSchema
            jobtyp = schemas.StrSchema
            objective = schemas.StrSchema
            objectivegeo = schemas.StrSchema
            rateactualcond = schemas.NumberSchema
            rateactualgas = schemas.NumberSchema
            rateactualoil = schemas.NumberSchema
            rateactualwater = schemas.NumberSchema
            ratetargetcond = schemas.NumberSchema
            ratetargetgas = schemas.NumberSchema
            ratetargetoil = schemas.NumberSchema
            ratetargetwater = schemas.NumberSchema
            responsiblegrp1 = schemas.StrSchema
            responsiblegrp2 = schemas.StrSchema
            responsiblegrp3 = schemas.StrSchema
            resulttechnical = schemas.StrSchema
            status1 = schemas.StrSchema
            status2 = schemas.StrSchema
            summary = schemas.StrSchema
            summarygeo = schemas.StrSchema
            targetdepth = schemas.NumberSchema
            targetform = schemas.StrSchema
            userboolean1 = schemas.BoolSchema
            userboolean2 = schemas.BoolSchema
            usernum1 = schemas.NumberSchema
            usernum2 = schemas.NumberSchema
            usernum3 = schemas.NumberSchema
            usernum4 = schemas.NumberSchema
            usernum5 = schemas.NumberSchema
            usertxt1 = schemas.StrSchema
            usertxt2 = schemas.StrSchema
            usertxt3 = schemas.StrSchema
            usertxt4 = schemas.StrSchema
            usertxt5 = schemas.StrSchema
            wvtyp = schemas.StrSchema
            __annotations__ = {
                "idrec": idrec,
                "idwell": idwell,
                "chartofaccounts": chartofaccounts,
                "client": client,
                "complexityindex": complexityindex,
                "costfinalactual": costfinalactual,
                "currencycode": currencycode,
                "currencyexchangerate": currencyexchangerate,
                "dttmend": dttmend,
                "dttmspud": dttmspud,
                "dttmstart": dttmstart,
                "dttmstartplan": dttmstartplan,
                "idrectub": idrectub,
                "idrecwellbore": idrecwellbore,
                "jobida": jobida,
                "jobidb": jobidb,
                "jobidc": jobidc,
                "jobsubtyp": jobsubtyp,
                "jobtyp": jobtyp,
                "objective": objective,
                "objectivegeo": objectivegeo,
                "rateactualcond": rateactualcond,
                "rateactualgas": rateactualgas,
                "rateactualoil": rateactualoil,
                "rateactualwater": rateactualwater,
                "ratetargetcond": ratetargetcond,
                "ratetargetgas": ratetargetgas,
                "ratetargetoil": ratetargetoil,
                "ratetargetwater": ratetargetwater,
                "responsiblegrp1": responsiblegrp1,
                "responsiblegrp2": responsiblegrp2,
                "responsiblegrp3": responsiblegrp3,
                "resulttechnical": resulttechnical,
                "status1": status1,
                "status2": status2,
                "summary": summary,
                "summarygeo": summarygeo,
                "targetdepth": targetdepth,
                "targetform": targetform,
                "userboolean1": userboolean1,
                "userboolean2": userboolean2,
                "usernum1": usernum1,
                "usernum2": usernum2,
                "usernum3": usernum3,
                "usernum4": usernum4,
                "usernum5": usernum5,
                "usertxt1": usertxt1,
                "usertxt2": usertxt2,
                "usertxt3": usertxt3,
                "usertxt4": usertxt4,
                "usertxt5": usertxt5,
                "wvtyp": wvtyp,
            }
    
    idrec: MetaOapg.properties.idrec
    idwell: MetaOapg.properties.idwell
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["chartofaccounts"]) -> MetaOapg.properties.chartofaccounts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["client"]) -> MetaOapg.properties.client: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["complexityindex"]) -> MetaOapg.properties.complexityindex: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["costfinalactual"]) -> MetaOapg.properties.costfinalactual: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currencycode"]) -> MetaOapg.properties.currencycode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currencyexchangerate"]) -> MetaOapg.properties.currencyexchangerate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmend"]) -> MetaOapg.properties.dttmend: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmspud"]) -> MetaOapg.properties.dttmspud: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmstart"]) -> MetaOapg.properties.dttmstart: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmstartplan"]) -> MetaOapg.properties.dttmstartplan: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrectub"]) -> MetaOapg.properties.idrectub: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecwellbore"]) -> MetaOapg.properties.idrecwellbore: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jobida"]) -> MetaOapg.properties.jobida: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jobidb"]) -> MetaOapg.properties.jobidb: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jobidc"]) -> MetaOapg.properties.jobidc: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jobsubtyp"]) -> MetaOapg.properties.jobsubtyp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jobtyp"]) -> MetaOapg.properties.jobtyp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["objective"]) -> MetaOapg.properties.objective: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["objectivegeo"]) -> MetaOapg.properties.objectivegeo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rateactualcond"]) -> MetaOapg.properties.rateactualcond: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rateactualgas"]) -> MetaOapg.properties.rateactualgas: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rateactualoil"]) -> MetaOapg.properties.rateactualoil: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rateactualwater"]) -> MetaOapg.properties.rateactualwater: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ratetargetcond"]) -> MetaOapg.properties.ratetargetcond: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ratetargetgas"]) -> MetaOapg.properties.ratetargetgas: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ratetargetoil"]) -> MetaOapg.properties.ratetargetoil: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ratetargetwater"]) -> MetaOapg.properties.ratetargetwater: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["responsiblegrp1"]) -> MetaOapg.properties.responsiblegrp1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["responsiblegrp2"]) -> MetaOapg.properties.responsiblegrp2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["responsiblegrp3"]) -> MetaOapg.properties.responsiblegrp3: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["resulttechnical"]) -> MetaOapg.properties.resulttechnical: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status1"]) -> MetaOapg.properties.status1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status2"]) -> MetaOapg.properties.status2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["summary"]) -> MetaOapg.properties.summary: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["summarygeo"]) -> MetaOapg.properties.summarygeo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["targetdepth"]) -> MetaOapg.properties.targetdepth: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["targetform"]) -> MetaOapg.properties.targetform: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userboolean1"]) -> MetaOapg.properties.userboolean1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userboolean2"]) -> MetaOapg.properties.userboolean2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usernum1"]) -> MetaOapg.properties.usernum1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usernum2"]) -> MetaOapg.properties.usernum2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usernum3"]) -> MetaOapg.properties.usernum3: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usernum4"]) -> MetaOapg.properties.usernum4: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usernum5"]) -> MetaOapg.properties.usernum5: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usertxt1"]) -> MetaOapg.properties.usertxt1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usertxt2"]) -> MetaOapg.properties.usertxt2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usertxt3"]) -> MetaOapg.properties.usertxt3: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usertxt4"]) -> MetaOapg.properties.usertxt4: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usertxt5"]) -> MetaOapg.properties.usertxt5: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wvtyp"]) -> MetaOapg.properties.wvtyp: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "chartofaccounts", "client", "complexityindex", "costfinalactual", "currencycode", "currencyexchangerate", "dttmend", "dttmspud", "dttmstart", "dttmstartplan", "idrectub", "idrecwellbore", "jobida", "jobidb", "jobidc", "jobsubtyp", "jobtyp", "objective", "objectivegeo", "rateactualcond", "rateactualgas", "rateactualoil", "rateactualwater", "ratetargetcond", "ratetargetgas", "ratetargetoil", "ratetargetwater", "responsiblegrp1", "responsiblegrp2", "responsiblegrp3", "resulttechnical", "status1", "status2", "summary", "summarygeo", "targetdepth", "targetform", "userboolean1", "userboolean2", "usernum1", "usernum2", "usernum3", "usernum4", "usernum5", "usertxt1", "usertxt2", "usertxt3", "usertxt4", "usertxt5", "wvtyp", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["chartofaccounts"]) -> typing.Union[MetaOapg.properties.chartofaccounts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["client"]) -> typing.Union[MetaOapg.properties.client, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["complexityindex"]) -> typing.Union[MetaOapg.properties.complexityindex, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["costfinalactual"]) -> typing.Union[MetaOapg.properties.costfinalactual, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currencycode"]) -> typing.Union[MetaOapg.properties.currencycode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currencyexchangerate"]) -> typing.Union[MetaOapg.properties.currencyexchangerate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmend"]) -> typing.Union[MetaOapg.properties.dttmend, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmspud"]) -> typing.Union[MetaOapg.properties.dttmspud, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmstart"]) -> typing.Union[MetaOapg.properties.dttmstart, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmstartplan"]) -> typing.Union[MetaOapg.properties.dttmstartplan, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrectub"]) -> typing.Union[MetaOapg.properties.idrectub, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecwellbore"]) -> typing.Union[MetaOapg.properties.idrecwellbore, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jobida"]) -> typing.Union[MetaOapg.properties.jobida, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jobidb"]) -> typing.Union[MetaOapg.properties.jobidb, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jobidc"]) -> typing.Union[MetaOapg.properties.jobidc, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jobsubtyp"]) -> typing.Union[MetaOapg.properties.jobsubtyp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jobtyp"]) -> typing.Union[MetaOapg.properties.jobtyp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["objective"]) -> typing.Union[MetaOapg.properties.objective, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["objectivegeo"]) -> typing.Union[MetaOapg.properties.objectivegeo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rateactualcond"]) -> typing.Union[MetaOapg.properties.rateactualcond, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rateactualgas"]) -> typing.Union[MetaOapg.properties.rateactualgas, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rateactualoil"]) -> typing.Union[MetaOapg.properties.rateactualoil, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rateactualwater"]) -> typing.Union[MetaOapg.properties.rateactualwater, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ratetargetcond"]) -> typing.Union[MetaOapg.properties.ratetargetcond, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ratetargetgas"]) -> typing.Union[MetaOapg.properties.ratetargetgas, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ratetargetoil"]) -> typing.Union[MetaOapg.properties.ratetargetoil, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ratetargetwater"]) -> typing.Union[MetaOapg.properties.ratetargetwater, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["responsiblegrp1"]) -> typing.Union[MetaOapg.properties.responsiblegrp1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["responsiblegrp2"]) -> typing.Union[MetaOapg.properties.responsiblegrp2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["responsiblegrp3"]) -> typing.Union[MetaOapg.properties.responsiblegrp3, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["resulttechnical"]) -> typing.Union[MetaOapg.properties.resulttechnical, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status1"]) -> typing.Union[MetaOapg.properties.status1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status2"]) -> typing.Union[MetaOapg.properties.status2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["summary"]) -> typing.Union[MetaOapg.properties.summary, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["summarygeo"]) -> typing.Union[MetaOapg.properties.summarygeo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["targetdepth"]) -> typing.Union[MetaOapg.properties.targetdepth, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["targetform"]) -> typing.Union[MetaOapg.properties.targetform, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userboolean1"]) -> typing.Union[MetaOapg.properties.userboolean1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userboolean2"]) -> typing.Union[MetaOapg.properties.userboolean2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usernum1"]) -> typing.Union[MetaOapg.properties.usernum1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usernum2"]) -> typing.Union[MetaOapg.properties.usernum2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usernum3"]) -> typing.Union[MetaOapg.properties.usernum3, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usernum4"]) -> typing.Union[MetaOapg.properties.usernum4, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usernum5"]) -> typing.Union[MetaOapg.properties.usernum5, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usertxt1"]) -> typing.Union[MetaOapg.properties.usertxt1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usertxt2"]) -> typing.Union[MetaOapg.properties.usertxt2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usertxt3"]) -> typing.Union[MetaOapg.properties.usertxt3, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usertxt4"]) -> typing.Union[MetaOapg.properties.usertxt4, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usertxt5"]) -> typing.Union[MetaOapg.properties.usertxt5, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wvtyp"]) -> typing.Union[MetaOapg.properties.wvtyp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "chartofaccounts", "client", "complexityindex", "costfinalactual", "currencycode", "currencyexchangerate", "dttmend", "dttmspud", "dttmstart", "dttmstartplan", "idrectub", "idrecwellbore", "jobida", "jobidb", "jobidc", "jobsubtyp", "jobtyp", "objective", "objectivegeo", "rateactualcond", "rateactualgas", "rateactualoil", "rateactualwater", "ratetargetcond", "ratetargetgas", "ratetargetoil", "ratetargetwater", "responsiblegrp1", "responsiblegrp2", "responsiblegrp3", "resulttechnical", "status1", "status2", "summary", "summarygeo", "targetdepth", "targetform", "userboolean1", "userboolean2", "usernum1", "usernum2", "usernum3", "usernum4", "usernum5", "usertxt1", "usertxt2", "usertxt3", "usertxt4", "usertxt5", "wvtyp", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idrec: typing.Union[MetaOapg.properties.idrec, str, ],
        idwell: typing.Union[MetaOapg.properties.idwell, str, ],
        chartofaccounts: typing.Union[MetaOapg.properties.chartofaccounts, str, schemas.Unset] = schemas.unset,
        client: typing.Union[MetaOapg.properties.client, str, schemas.Unset] = schemas.unset,
        complexityindex: typing.Union[MetaOapg.properties.complexityindex, str, schemas.Unset] = schemas.unset,
        costfinalactual: typing.Union[MetaOapg.properties.costfinalactual, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        currencycode: typing.Union[MetaOapg.properties.currencycode, str, schemas.Unset] = schemas.unset,
        currencyexchangerate: typing.Union[MetaOapg.properties.currencyexchangerate, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        dttmend: typing.Union[MetaOapg.properties.dttmend, str, datetime, schemas.Unset] = schemas.unset,
        dttmspud: typing.Union[MetaOapg.properties.dttmspud, str, datetime, schemas.Unset] = schemas.unset,
        dttmstart: typing.Union[MetaOapg.properties.dttmstart, str, datetime, schemas.Unset] = schemas.unset,
        dttmstartplan: typing.Union[MetaOapg.properties.dttmstartplan, str, datetime, schemas.Unset] = schemas.unset,
        idrectub: typing.Union[MetaOapg.properties.idrectub, str, schemas.Unset] = schemas.unset,
        idrecwellbore: typing.Union[MetaOapg.properties.idrecwellbore, str, schemas.Unset] = schemas.unset,
        jobida: typing.Union[MetaOapg.properties.jobida, str, schemas.Unset] = schemas.unset,
        jobidb: typing.Union[MetaOapg.properties.jobidb, str, schemas.Unset] = schemas.unset,
        jobidc: typing.Union[MetaOapg.properties.jobidc, str, schemas.Unset] = schemas.unset,
        jobsubtyp: typing.Union[MetaOapg.properties.jobsubtyp, str, schemas.Unset] = schemas.unset,
        jobtyp: typing.Union[MetaOapg.properties.jobtyp, str, schemas.Unset] = schemas.unset,
        objective: typing.Union[MetaOapg.properties.objective, str, schemas.Unset] = schemas.unset,
        objectivegeo: typing.Union[MetaOapg.properties.objectivegeo, str, schemas.Unset] = schemas.unset,
        rateactualcond: typing.Union[MetaOapg.properties.rateactualcond, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        rateactualgas: typing.Union[MetaOapg.properties.rateactualgas, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        rateactualoil: typing.Union[MetaOapg.properties.rateactualoil, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        rateactualwater: typing.Union[MetaOapg.properties.rateactualwater, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        ratetargetcond: typing.Union[MetaOapg.properties.ratetargetcond, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        ratetargetgas: typing.Union[MetaOapg.properties.ratetargetgas, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        ratetargetoil: typing.Union[MetaOapg.properties.ratetargetoil, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        ratetargetwater: typing.Union[MetaOapg.properties.ratetargetwater, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        responsiblegrp1: typing.Union[MetaOapg.properties.responsiblegrp1, str, schemas.Unset] = schemas.unset,
        responsiblegrp2: typing.Union[MetaOapg.properties.responsiblegrp2, str, schemas.Unset] = schemas.unset,
        responsiblegrp3: typing.Union[MetaOapg.properties.responsiblegrp3, str, schemas.Unset] = schemas.unset,
        resulttechnical: typing.Union[MetaOapg.properties.resulttechnical, str, schemas.Unset] = schemas.unset,
        status1: typing.Union[MetaOapg.properties.status1, str, schemas.Unset] = schemas.unset,
        status2: typing.Union[MetaOapg.properties.status2, str, schemas.Unset] = schemas.unset,
        summary: typing.Union[MetaOapg.properties.summary, str, schemas.Unset] = schemas.unset,
        summarygeo: typing.Union[MetaOapg.properties.summarygeo, str, schemas.Unset] = schemas.unset,
        targetdepth: typing.Union[MetaOapg.properties.targetdepth, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        targetform: typing.Union[MetaOapg.properties.targetform, str, schemas.Unset] = schemas.unset,
        userboolean1: typing.Union[MetaOapg.properties.userboolean1, bool, schemas.Unset] = schemas.unset,
        userboolean2: typing.Union[MetaOapg.properties.userboolean2, bool, schemas.Unset] = schemas.unset,
        usernum1: typing.Union[MetaOapg.properties.usernum1, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        usernum2: typing.Union[MetaOapg.properties.usernum2, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        usernum3: typing.Union[MetaOapg.properties.usernum3, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        usernum4: typing.Union[MetaOapg.properties.usernum4, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        usernum5: typing.Union[MetaOapg.properties.usernum5, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        usertxt1: typing.Union[MetaOapg.properties.usertxt1, str, schemas.Unset] = schemas.unset,
        usertxt2: typing.Union[MetaOapg.properties.usertxt2, str, schemas.Unset] = schemas.unset,
        usertxt3: typing.Union[MetaOapg.properties.usertxt3, str, schemas.Unset] = schemas.unset,
        usertxt4: typing.Union[MetaOapg.properties.usertxt4, str, schemas.Unset] = schemas.unset,
        usertxt5: typing.Union[MetaOapg.properties.usertxt5, str, schemas.Unset] = schemas.unset,
        wvtyp: typing.Union[MetaOapg.properties.wvtyp, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'JobData':
        return super().__new__(
            cls,
            *args,
            idrec=idrec,
            idwell=idwell,
            chartofaccounts=chartofaccounts,
            client=client,
            complexityindex=complexityindex,
            costfinalactual=costfinalactual,
            currencycode=currencycode,
            currencyexchangerate=currencyexchangerate,
            dttmend=dttmend,
            dttmspud=dttmspud,
            dttmstart=dttmstart,
            dttmstartplan=dttmstartplan,
            idrectub=idrectub,
            idrecwellbore=idrecwellbore,
            jobida=jobida,
            jobidb=jobidb,
            jobidc=jobidc,
            jobsubtyp=jobsubtyp,
            jobtyp=jobtyp,
            objective=objective,
            objectivegeo=objectivegeo,
            rateactualcond=rateactualcond,
            rateactualgas=rateactualgas,
            rateactualoil=rateactualoil,
            rateactualwater=rateactualwater,
            ratetargetcond=ratetargetcond,
            ratetargetgas=ratetargetgas,
            ratetargetoil=ratetargetoil,
            ratetargetwater=ratetargetwater,
            responsiblegrp1=responsiblegrp1,
            responsiblegrp2=responsiblegrp2,
            responsiblegrp3=responsiblegrp3,
            resulttechnical=resulttechnical,
            status1=status1,
            status2=status2,
            summary=summary,
            summarygeo=summarygeo,
            targetdepth=targetdepth,
            targetform=targetform,
            userboolean1=userboolean1,
            userboolean2=userboolean2,
            usernum1=usernum1,
            usernum2=usernum2,
            usernum3=usernum3,
            usernum4=usernum4,
            usernum5=usernum5,
            usertxt1=usertxt1,
            usertxt2=usertxt2,
            usertxt3=usertxt3,
            usertxt4=usertxt4,
            usertxt5=usertxt5,
            wvtyp=wvtyp,
            _configuration=_configuration,
            **kwargs,
        )
