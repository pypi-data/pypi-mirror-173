# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class CongressionalLocationData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idrec",
            "idwell",
        }
        
        class properties:
            idrec = schemas.StrSchema
            idwell = schemas.StrSchema
            idrecparent = schemas.StrSchema
            irregularsection = schemas.BoolSchema
            lot = schemas.StrSchema
            meridian = schemas.StrSchema
            note = schemas.StrSchema
            quarter1 = schemas.StrSchema
            quarter2 = schemas.StrSchema
            quarter3 = schemas.StrSchema
            quarter4 = schemas.StrSchema
            range = schemas.NumberSchema
            rangedir = schemas.StrSchema
            section = schemas.NumberSchema
            sectionsuffix = schemas.StrSchema
            sectiontyp = schemas.StrSchema
            source = schemas.StrSchema
            township = schemas.NumberSchema
            townshipdir = schemas.StrSchema
            townshipname = schemas.StrSchema
            __annotations__ = {
                "idrec": idrec,
                "idwell": idwell,
                "idrecparent": idrecparent,
                "irregularsection": irregularsection,
                "lot": lot,
                "meridian": meridian,
                "note": note,
                "quarter1": quarter1,
                "quarter2": quarter2,
                "quarter3": quarter3,
                "quarter4": quarter4,
                "range": range,
                "rangedir": rangedir,
                "section": section,
                "sectionsuffix": sectionsuffix,
                "sectiontyp": sectiontyp,
                "source": source,
                "township": township,
                "townshipdir": townshipdir,
                "townshipname": townshipname,
            }
    
    idrec: MetaOapg.properties.idrec
    idwell: MetaOapg.properties.idwell
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecparent"]) -> MetaOapg.properties.idrecparent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["irregularsection"]) -> MetaOapg.properties.irregularsection: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lot"]) -> MetaOapg.properties.lot: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["meridian"]) -> MetaOapg.properties.meridian: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["note"]) -> MetaOapg.properties.note: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["quarter1"]) -> MetaOapg.properties.quarter1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["quarter2"]) -> MetaOapg.properties.quarter2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["quarter3"]) -> MetaOapg.properties.quarter3: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["quarter4"]) -> MetaOapg.properties.quarter4: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["range"]) -> MetaOapg.properties.range: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rangedir"]) -> MetaOapg.properties.rangedir: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["section"]) -> MetaOapg.properties.section: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sectionsuffix"]) -> MetaOapg.properties.sectionsuffix: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sectiontyp"]) -> MetaOapg.properties.sectiontyp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["source"]) -> MetaOapg.properties.source: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["township"]) -> MetaOapg.properties.township: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["townshipdir"]) -> MetaOapg.properties.townshipdir: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["townshipname"]) -> MetaOapg.properties.townshipname: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "idrecparent", "irregularsection", "lot", "meridian", "note", "quarter1", "quarter2", "quarter3", "quarter4", "range", "rangedir", "section", "sectionsuffix", "sectiontyp", "source", "township", "townshipdir", "townshipname", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecparent"]) -> typing.Union[MetaOapg.properties.idrecparent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["irregularsection"]) -> typing.Union[MetaOapg.properties.irregularsection, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lot"]) -> typing.Union[MetaOapg.properties.lot, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["meridian"]) -> typing.Union[MetaOapg.properties.meridian, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["note"]) -> typing.Union[MetaOapg.properties.note, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["quarter1"]) -> typing.Union[MetaOapg.properties.quarter1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["quarter2"]) -> typing.Union[MetaOapg.properties.quarter2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["quarter3"]) -> typing.Union[MetaOapg.properties.quarter3, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["quarter4"]) -> typing.Union[MetaOapg.properties.quarter4, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["range"]) -> typing.Union[MetaOapg.properties.range, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rangedir"]) -> typing.Union[MetaOapg.properties.rangedir, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["section"]) -> typing.Union[MetaOapg.properties.section, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sectionsuffix"]) -> typing.Union[MetaOapg.properties.sectionsuffix, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sectiontyp"]) -> typing.Union[MetaOapg.properties.sectiontyp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["source"]) -> typing.Union[MetaOapg.properties.source, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["township"]) -> typing.Union[MetaOapg.properties.township, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["townshipdir"]) -> typing.Union[MetaOapg.properties.townshipdir, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["townshipname"]) -> typing.Union[MetaOapg.properties.townshipname, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "idrecparent", "irregularsection", "lot", "meridian", "note", "quarter1", "quarter2", "quarter3", "quarter4", "range", "rangedir", "section", "sectionsuffix", "sectiontyp", "source", "township", "townshipdir", "townshipname", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idrec: typing.Union[MetaOapg.properties.idrec, str, ],
        idwell: typing.Union[MetaOapg.properties.idwell, str, ],
        idrecparent: typing.Union[MetaOapg.properties.idrecparent, str, schemas.Unset] = schemas.unset,
        irregularsection: typing.Union[MetaOapg.properties.irregularsection, bool, schemas.Unset] = schemas.unset,
        lot: typing.Union[MetaOapg.properties.lot, str, schemas.Unset] = schemas.unset,
        meridian: typing.Union[MetaOapg.properties.meridian, str, schemas.Unset] = schemas.unset,
        note: typing.Union[MetaOapg.properties.note, str, schemas.Unset] = schemas.unset,
        quarter1: typing.Union[MetaOapg.properties.quarter1, str, schemas.Unset] = schemas.unset,
        quarter2: typing.Union[MetaOapg.properties.quarter2, str, schemas.Unset] = schemas.unset,
        quarter3: typing.Union[MetaOapg.properties.quarter3, str, schemas.Unset] = schemas.unset,
        quarter4: typing.Union[MetaOapg.properties.quarter4, str, schemas.Unset] = schemas.unset,
        range: typing.Union[MetaOapg.properties.range, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        rangedir: typing.Union[MetaOapg.properties.rangedir, str, schemas.Unset] = schemas.unset,
        section: typing.Union[MetaOapg.properties.section, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        sectionsuffix: typing.Union[MetaOapg.properties.sectionsuffix, str, schemas.Unset] = schemas.unset,
        sectiontyp: typing.Union[MetaOapg.properties.sectiontyp, str, schemas.Unset] = schemas.unset,
        source: typing.Union[MetaOapg.properties.source, str, schemas.Unset] = schemas.unset,
        township: typing.Union[MetaOapg.properties.township, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        townshipdir: typing.Union[MetaOapg.properties.townshipdir, str, schemas.Unset] = schemas.unset,
        townshipname: typing.Union[MetaOapg.properties.townshipname, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CongressionalLocationData':
        return super().__new__(
            cls,
            *args,
            idrec=idrec,
            idwell=idwell,
            idrecparent=idrecparent,
            irregularsection=irregularsection,
            lot=lot,
            meridian=meridian,
            note=note,
            quarter1=quarter1,
            quarter2=quarter2,
            quarter3=quarter3,
            quarter4=quarter4,
            range=range,
            rangedir=rangedir,
            section=section,
            sectionsuffix=sectionsuffix,
            sectiontyp=sectiontyp,
            source=source,
            township=township,
            townshipdir=townshipdir,
            townshipname=townshipname,
            _configuration=_configuration,
            **kwargs,
        )
