# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class LeakOffAndFormationIntegrityTestData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idrec",
            "idwell",
        }
        
        class properties:
            idrec = schemas.StrSchema
            idwell = schemas.StrSchema
            com = schemas.StrSchema
            densityfluid = schemas.NumberSchema
            depth = schemas.NumberSchema
            dttm = schemas.DateTimeSchema
            fluidtyp = schemas.StrSchema
            idreccas = schemas.StrSchema
            idrecfrm = schemas.StrSchema
            leakoffoccurred = schemas.BoolSchema
            leakoffpres = schemas.NumberSchema
            testtyp = schemas.StrSchema
            volpumped = schemas.NumberSchema
            __annotations__ = {
                "idrec": idrec,
                "idwell": idwell,
                "com": com,
                "densityfluid": densityfluid,
                "depth": depth,
                "dttm": dttm,
                "fluidtyp": fluidtyp,
                "idreccas": idreccas,
                "idrecfrm": idrecfrm,
                "leakoffoccurred": leakoffoccurred,
                "leakoffpres": leakoffpres,
                "testtyp": testtyp,
                "volpumped": volpumped,
            }
    
    idrec: MetaOapg.properties.idrec
    idwell: MetaOapg.properties.idwell
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["com"]) -> MetaOapg.properties.com: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["densityfluid"]) -> MetaOapg.properties.densityfluid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["depth"]) -> MetaOapg.properties.depth: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttm"]) -> MetaOapg.properties.dttm: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fluidtyp"]) -> MetaOapg.properties.fluidtyp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idreccas"]) -> MetaOapg.properties.idreccas: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecfrm"]) -> MetaOapg.properties.idrecfrm: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["leakoffoccurred"]) -> MetaOapg.properties.leakoffoccurred: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["leakoffpres"]) -> MetaOapg.properties.leakoffpres: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["testtyp"]) -> MetaOapg.properties.testtyp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["volpumped"]) -> MetaOapg.properties.volpumped: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "com", "densityfluid", "depth", "dttm", "fluidtyp", "idreccas", "idrecfrm", "leakoffoccurred", "leakoffpres", "testtyp", "volpumped", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["com"]) -> typing.Union[MetaOapg.properties.com, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["densityfluid"]) -> typing.Union[MetaOapg.properties.densityfluid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["depth"]) -> typing.Union[MetaOapg.properties.depth, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttm"]) -> typing.Union[MetaOapg.properties.dttm, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fluidtyp"]) -> typing.Union[MetaOapg.properties.fluidtyp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idreccas"]) -> typing.Union[MetaOapg.properties.idreccas, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecfrm"]) -> typing.Union[MetaOapg.properties.idrecfrm, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["leakoffoccurred"]) -> typing.Union[MetaOapg.properties.leakoffoccurred, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["leakoffpres"]) -> typing.Union[MetaOapg.properties.leakoffpres, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["testtyp"]) -> typing.Union[MetaOapg.properties.testtyp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["volpumped"]) -> typing.Union[MetaOapg.properties.volpumped, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "com", "densityfluid", "depth", "dttm", "fluidtyp", "idreccas", "idrecfrm", "leakoffoccurred", "leakoffpres", "testtyp", "volpumped", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idrec: typing.Union[MetaOapg.properties.idrec, str, ],
        idwell: typing.Union[MetaOapg.properties.idwell, str, ],
        com: typing.Union[MetaOapg.properties.com, str, schemas.Unset] = schemas.unset,
        densityfluid: typing.Union[MetaOapg.properties.densityfluid, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        depth: typing.Union[MetaOapg.properties.depth, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        dttm: typing.Union[MetaOapg.properties.dttm, str, datetime, schemas.Unset] = schemas.unset,
        fluidtyp: typing.Union[MetaOapg.properties.fluidtyp, str, schemas.Unset] = schemas.unset,
        idreccas: typing.Union[MetaOapg.properties.idreccas, str, schemas.Unset] = schemas.unset,
        idrecfrm: typing.Union[MetaOapg.properties.idrecfrm, str, schemas.Unset] = schemas.unset,
        leakoffoccurred: typing.Union[MetaOapg.properties.leakoffoccurred, bool, schemas.Unset] = schemas.unset,
        leakoffpres: typing.Union[MetaOapg.properties.leakoffpres, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        testtyp: typing.Union[MetaOapg.properties.testtyp, str, schemas.Unset] = schemas.unset,
        volpumped: typing.Union[MetaOapg.properties.volpumped, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'LeakOffAndFormationIntegrityTestData':
        return super().__new__(
            cls,
            *args,
            idrec=idrec,
            idwell=idwell,
            com=com,
            densityfluid=densityfluid,
            depth=depth,
            dttm=dttm,
            fluidtyp=fluidtyp,
            idreccas=idreccas,
            idrecfrm=idrecfrm,
            leakoffoccurred=leakoffoccurred,
            leakoffpres=leakoffpres,
            testtyp=testtyp,
            volpumped=volpumped,
            _configuration=_configuration,
            **kwargs,
        )
