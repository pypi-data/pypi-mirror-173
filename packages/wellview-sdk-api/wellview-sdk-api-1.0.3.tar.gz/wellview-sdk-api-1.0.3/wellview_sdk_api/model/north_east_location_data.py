# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class NorthEastLocationData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idrec",
            "idwell",
        }
        
        class properties:
            idrec = schemas.StrSchema
            idwell = schemas.StrSchema
            district = schemas.StrSchema
            idrecparent = schemas.StrSchema
            irregularsection = schemas.BoolSchema
            latituderef = schemas.NumberSchema
            longituderef = schemas.NumberSchema
            lot = schemas.StrSchema
            note = schemas.StrSchema
            quadranglemin = schemas.NumberSchema
            quadranglename = schemas.StrSchema
            quadranglesect = schemas.StrSchema
            source = schemas.StrSchema
            township = schemas.StrSchema
            __annotations__ = {
                "idrec": idrec,
                "idwell": idwell,
                "district": district,
                "idrecparent": idrecparent,
                "irregularsection": irregularsection,
                "latituderef": latituderef,
                "longituderef": longituderef,
                "lot": lot,
                "note": note,
                "quadranglemin": quadranglemin,
                "quadranglename": quadranglename,
                "quadranglesect": quadranglesect,
                "source": source,
                "township": township,
            }
    
    idrec: MetaOapg.properties.idrec
    idwell: MetaOapg.properties.idwell
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["district"]) -> MetaOapg.properties.district: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecparent"]) -> MetaOapg.properties.idrecparent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["irregularsection"]) -> MetaOapg.properties.irregularsection: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["latituderef"]) -> MetaOapg.properties.latituderef: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["longituderef"]) -> MetaOapg.properties.longituderef: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lot"]) -> MetaOapg.properties.lot: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["note"]) -> MetaOapg.properties.note: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["quadranglemin"]) -> MetaOapg.properties.quadranglemin: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["quadranglename"]) -> MetaOapg.properties.quadranglename: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["quadranglesect"]) -> MetaOapg.properties.quadranglesect: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["source"]) -> MetaOapg.properties.source: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["township"]) -> MetaOapg.properties.township: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "district", "idrecparent", "irregularsection", "latituderef", "longituderef", "lot", "note", "quadranglemin", "quadranglename", "quadranglesect", "source", "township", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["district"]) -> typing.Union[MetaOapg.properties.district, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecparent"]) -> typing.Union[MetaOapg.properties.idrecparent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["irregularsection"]) -> typing.Union[MetaOapg.properties.irregularsection, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["latituderef"]) -> typing.Union[MetaOapg.properties.latituderef, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["longituderef"]) -> typing.Union[MetaOapg.properties.longituderef, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lot"]) -> typing.Union[MetaOapg.properties.lot, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["note"]) -> typing.Union[MetaOapg.properties.note, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["quadranglemin"]) -> typing.Union[MetaOapg.properties.quadranglemin, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["quadranglename"]) -> typing.Union[MetaOapg.properties.quadranglename, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["quadranglesect"]) -> typing.Union[MetaOapg.properties.quadranglesect, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["source"]) -> typing.Union[MetaOapg.properties.source, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["township"]) -> typing.Union[MetaOapg.properties.township, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "district", "idrecparent", "irregularsection", "latituderef", "longituderef", "lot", "note", "quadranglemin", "quadranglename", "quadranglesect", "source", "township", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idrec: typing.Union[MetaOapg.properties.idrec, str, ],
        idwell: typing.Union[MetaOapg.properties.idwell, str, ],
        district: typing.Union[MetaOapg.properties.district, str, schemas.Unset] = schemas.unset,
        idrecparent: typing.Union[MetaOapg.properties.idrecparent, str, schemas.Unset] = schemas.unset,
        irregularsection: typing.Union[MetaOapg.properties.irregularsection, bool, schemas.Unset] = schemas.unset,
        latituderef: typing.Union[MetaOapg.properties.latituderef, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        longituderef: typing.Union[MetaOapg.properties.longituderef, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        lot: typing.Union[MetaOapg.properties.lot, str, schemas.Unset] = schemas.unset,
        note: typing.Union[MetaOapg.properties.note, str, schemas.Unset] = schemas.unset,
        quadranglemin: typing.Union[MetaOapg.properties.quadranglemin, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        quadranglename: typing.Union[MetaOapg.properties.quadranglename, str, schemas.Unset] = schemas.unset,
        quadranglesect: typing.Union[MetaOapg.properties.quadranglesect, str, schemas.Unset] = schemas.unset,
        source: typing.Union[MetaOapg.properties.source, str, schemas.Unset] = schemas.unset,
        township: typing.Union[MetaOapg.properties.township, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'NorthEastLocationData':
        return super().__new__(
            cls,
            *args,
            idrec=idrec,
            idwell=idwell,
            district=district,
            idrecparent=idrecparent,
            irregularsection=irregularsection,
            latituderef=latituderef,
            longituderef=longituderef,
            lot=lot,
            note=note,
            quadranglemin=quadranglemin,
            quadranglename=quadranglename,
            quadranglesect=quadranglesect,
            source=source,
            township=township,
            _configuration=_configuration,
            **kwargs,
        )
