# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class DrillingParameterData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idrec",
            "idwell",
        }
        
        class properties:
            idrec = schemas.StrSchema
            idwell = schemas.StrSchema
            bhaanpres = schemas.NumberSchema
            bhtemp = schemas.NumberSchema
            depthend = schemas.NumberSchema
            depthstart = schemas.NumberSchema
            dttmend = schemas.DateTimeSchema
            dttmstart = schemas.DateTimeSchema
            ecdendoverride = schemas.NumberSchema
            excludefromnewhole = schemas.BoolSchema
            gasinjrate = schemas.NumberSchema
            gasreturnrate = schemas.NumberSchema
            hookloadoffbottom = schemas.NumberSchema
            hookloadpickup = schemas.NumberSchema
            hookloadrotating = schemas.NumberSchema
            hookloadslackoff = schemas.NumberSchema
            idrecparent = schemas.StrSchema
            idrecwellbore = schemas.StrSchema
            injtemp = schemas.NumberSchema
            liquidinjrate = schemas.NumberSchema
            liquidinjrateriser = schemas.NumberSchema
            liquidreturnrate = schemas.NumberSchema
            note = schemas.StrSchema
            refnostand = schemas.StrSchema
            ropinst = schemas.NumberSchema
            rpmmotor = schemas.NumberSchema
            rpmstring = schemas.NumberSchema
            sppdiff = schemas.NumberSchema
            sppdrill = schemas.NumberSchema
            surfannpres = schemas.NumberSchema
            surfanntemp = schemas.NumberSchema
            szodvgstab = schemas.NumberSchema
            tfo = schemas.NumberSchema
            tforef = schemas.StrSchema
            tmcirc = schemas.NumberSchema
            tmdrill = schemas.NumberSchema
            tmother = schemas.NumberSchema
            tmtrip = schemas.NumberSchema
            torquedrill = schemas.NumberSchema
            torqueoffbtm = schemas.NumberSchema
            torqueunits = schemas.StrSchema
            typ1 = schemas.StrSchema
            typ2 = schemas.StrSchema
            wob = schemas.NumberSchema
            __annotations__ = {
                "idrec": idrec,
                "idwell": idwell,
                "bhaanpres": bhaanpres,
                "bhtemp": bhtemp,
                "depthend": depthend,
                "depthstart": depthstart,
                "dttmend": dttmend,
                "dttmstart": dttmstart,
                "ecdendoverride": ecdendoverride,
                "excludefromnewhole": excludefromnewhole,
                "gasinjrate": gasinjrate,
                "gasreturnrate": gasreturnrate,
                "hookloadoffbottom": hookloadoffbottom,
                "hookloadpickup": hookloadpickup,
                "hookloadrotating": hookloadrotating,
                "hookloadslackoff": hookloadslackoff,
                "idrecparent": idrecparent,
                "idrecwellbore": idrecwellbore,
                "injtemp": injtemp,
                "liquidinjrate": liquidinjrate,
                "liquidinjrateriser": liquidinjrateriser,
                "liquidreturnrate": liquidreturnrate,
                "note": note,
                "refnostand": refnostand,
                "ropinst": ropinst,
                "rpmmotor": rpmmotor,
                "rpmstring": rpmstring,
                "sppdiff": sppdiff,
                "sppdrill": sppdrill,
                "surfannpres": surfannpres,
                "surfanntemp": surfanntemp,
                "szodvgstab": szodvgstab,
                "tfo": tfo,
                "tforef": tforef,
                "tmcirc": tmcirc,
                "tmdrill": tmdrill,
                "tmother": tmother,
                "tmtrip": tmtrip,
                "torquedrill": torquedrill,
                "torqueoffbtm": torqueoffbtm,
                "torqueunits": torqueunits,
                "typ1": typ1,
                "typ2": typ2,
                "wob": wob,
            }
    
    idrec: MetaOapg.properties.idrec
    idwell: MetaOapg.properties.idwell
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bhaanpres"]) -> MetaOapg.properties.bhaanpres: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bhtemp"]) -> MetaOapg.properties.bhtemp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["depthend"]) -> MetaOapg.properties.depthend: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["depthstart"]) -> MetaOapg.properties.depthstart: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmend"]) -> MetaOapg.properties.dttmend: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmstart"]) -> MetaOapg.properties.dttmstart: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ecdendoverride"]) -> MetaOapg.properties.ecdendoverride: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["excludefromnewhole"]) -> MetaOapg.properties.excludefromnewhole: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gasinjrate"]) -> MetaOapg.properties.gasinjrate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gasreturnrate"]) -> MetaOapg.properties.gasreturnrate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hookloadoffbottom"]) -> MetaOapg.properties.hookloadoffbottom: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hookloadpickup"]) -> MetaOapg.properties.hookloadpickup: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hookloadrotating"]) -> MetaOapg.properties.hookloadrotating: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hookloadslackoff"]) -> MetaOapg.properties.hookloadslackoff: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecparent"]) -> MetaOapg.properties.idrecparent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecwellbore"]) -> MetaOapg.properties.idrecwellbore: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["injtemp"]) -> MetaOapg.properties.injtemp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["liquidinjrate"]) -> MetaOapg.properties.liquidinjrate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["liquidinjrateriser"]) -> MetaOapg.properties.liquidinjrateriser: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["liquidreturnrate"]) -> MetaOapg.properties.liquidreturnrate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["note"]) -> MetaOapg.properties.note: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["refnostand"]) -> MetaOapg.properties.refnostand: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ropinst"]) -> MetaOapg.properties.ropinst: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rpmmotor"]) -> MetaOapg.properties.rpmmotor: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rpmstring"]) -> MetaOapg.properties.rpmstring: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sppdiff"]) -> MetaOapg.properties.sppdiff: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sppdrill"]) -> MetaOapg.properties.sppdrill: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["surfannpres"]) -> MetaOapg.properties.surfannpres: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["surfanntemp"]) -> MetaOapg.properties.surfanntemp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["szodvgstab"]) -> MetaOapg.properties.szodvgstab: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tfo"]) -> MetaOapg.properties.tfo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tforef"]) -> MetaOapg.properties.tforef: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tmcirc"]) -> MetaOapg.properties.tmcirc: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tmdrill"]) -> MetaOapg.properties.tmdrill: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tmother"]) -> MetaOapg.properties.tmother: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tmtrip"]) -> MetaOapg.properties.tmtrip: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["torquedrill"]) -> MetaOapg.properties.torquedrill: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["torqueoffbtm"]) -> MetaOapg.properties.torqueoffbtm: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["torqueunits"]) -> MetaOapg.properties.torqueunits: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["typ1"]) -> MetaOapg.properties.typ1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["typ2"]) -> MetaOapg.properties.typ2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wob"]) -> MetaOapg.properties.wob: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "bhaanpres", "bhtemp", "depthend", "depthstart", "dttmend", "dttmstart", "ecdendoverride", "excludefromnewhole", "gasinjrate", "gasreturnrate", "hookloadoffbottom", "hookloadpickup", "hookloadrotating", "hookloadslackoff", "idrecparent", "idrecwellbore", "injtemp", "liquidinjrate", "liquidinjrateriser", "liquidreturnrate", "note", "refnostand", "ropinst", "rpmmotor", "rpmstring", "sppdiff", "sppdrill", "surfannpres", "surfanntemp", "szodvgstab", "tfo", "tforef", "tmcirc", "tmdrill", "tmother", "tmtrip", "torquedrill", "torqueoffbtm", "torqueunits", "typ1", "typ2", "wob", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bhaanpres"]) -> typing.Union[MetaOapg.properties.bhaanpres, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bhtemp"]) -> typing.Union[MetaOapg.properties.bhtemp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["depthend"]) -> typing.Union[MetaOapg.properties.depthend, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["depthstart"]) -> typing.Union[MetaOapg.properties.depthstart, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmend"]) -> typing.Union[MetaOapg.properties.dttmend, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmstart"]) -> typing.Union[MetaOapg.properties.dttmstart, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ecdendoverride"]) -> typing.Union[MetaOapg.properties.ecdendoverride, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["excludefromnewhole"]) -> typing.Union[MetaOapg.properties.excludefromnewhole, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gasinjrate"]) -> typing.Union[MetaOapg.properties.gasinjrate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gasreturnrate"]) -> typing.Union[MetaOapg.properties.gasreturnrate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hookloadoffbottom"]) -> typing.Union[MetaOapg.properties.hookloadoffbottom, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hookloadpickup"]) -> typing.Union[MetaOapg.properties.hookloadpickup, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hookloadrotating"]) -> typing.Union[MetaOapg.properties.hookloadrotating, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hookloadslackoff"]) -> typing.Union[MetaOapg.properties.hookloadslackoff, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecparent"]) -> typing.Union[MetaOapg.properties.idrecparent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecwellbore"]) -> typing.Union[MetaOapg.properties.idrecwellbore, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["injtemp"]) -> typing.Union[MetaOapg.properties.injtemp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["liquidinjrate"]) -> typing.Union[MetaOapg.properties.liquidinjrate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["liquidinjrateriser"]) -> typing.Union[MetaOapg.properties.liquidinjrateriser, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["liquidreturnrate"]) -> typing.Union[MetaOapg.properties.liquidreturnrate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["note"]) -> typing.Union[MetaOapg.properties.note, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["refnostand"]) -> typing.Union[MetaOapg.properties.refnostand, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ropinst"]) -> typing.Union[MetaOapg.properties.ropinst, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rpmmotor"]) -> typing.Union[MetaOapg.properties.rpmmotor, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rpmstring"]) -> typing.Union[MetaOapg.properties.rpmstring, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sppdiff"]) -> typing.Union[MetaOapg.properties.sppdiff, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sppdrill"]) -> typing.Union[MetaOapg.properties.sppdrill, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["surfannpres"]) -> typing.Union[MetaOapg.properties.surfannpres, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["surfanntemp"]) -> typing.Union[MetaOapg.properties.surfanntemp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["szodvgstab"]) -> typing.Union[MetaOapg.properties.szodvgstab, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tfo"]) -> typing.Union[MetaOapg.properties.tfo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tforef"]) -> typing.Union[MetaOapg.properties.tforef, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tmcirc"]) -> typing.Union[MetaOapg.properties.tmcirc, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tmdrill"]) -> typing.Union[MetaOapg.properties.tmdrill, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tmother"]) -> typing.Union[MetaOapg.properties.tmother, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tmtrip"]) -> typing.Union[MetaOapg.properties.tmtrip, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["torquedrill"]) -> typing.Union[MetaOapg.properties.torquedrill, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["torqueoffbtm"]) -> typing.Union[MetaOapg.properties.torqueoffbtm, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["torqueunits"]) -> typing.Union[MetaOapg.properties.torqueunits, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["typ1"]) -> typing.Union[MetaOapg.properties.typ1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["typ2"]) -> typing.Union[MetaOapg.properties.typ2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wob"]) -> typing.Union[MetaOapg.properties.wob, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "bhaanpres", "bhtemp", "depthend", "depthstart", "dttmend", "dttmstart", "ecdendoverride", "excludefromnewhole", "gasinjrate", "gasreturnrate", "hookloadoffbottom", "hookloadpickup", "hookloadrotating", "hookloadslackoff", "idrecparent", "idrecwellbore", "injtemp", "liquidinjrate", "liquidinjrateriser", "liquidreturnrate", "note", "refnostand", "ropinst", "rpmmotor", "rpmstring", "sppdiff", "sppdrill", "surfannpres", "surfanntemp", "szodvgstab", "tfo", "tforef", "tmcirc", "tmdrill", "tmother", "tmtrip", "torquedrill", "torqueoffbtm", "torqueunits", "typ1", "typ2", "wob", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idrec: typing.Union[MetaOapg.properties.idrec, str, ],
        idwell: typing.Union[MetaOapg.properties.idwell, str, ],
        bhaanpres: typing.Union[MetaOapg.properties.bhaanpres, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        bhtemp: typing.Union[MetaOapg.properties.bhtemp, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        depthend: typing.Union[MetaOapg.properties.depthend, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        depthstart: typing.Union[MetaOapg.properties.depthstart, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        dttmend: typing.Union[MetaOapg.properties.dttmend, str, datetime, schemas.Unset] = schemas.unset,
        dttmstart: typing.Union[MetaOapg.properties.dttmstart, str, datetime, schemas.Unset] = schemas.unset,
        ecdendoverride: typing.Union[MetaOapg.properties.ecdendoverride, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        excludefromnewhole: typing.Union[MetaOapg.properties.excludefromnewhole, bool, schemas.Unset] = schemas.unset,
        gasinjrate: typing.Union[MetaOapg.properties.gasinjrate, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        gasreturnrate: typing.Union[MetaOapg.properties.gasreturnrate, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        hookloadoffbottom: typing.Union[MetaOapg.properties.hookloadoffbottom, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        hookloadpickup: typing.Union[MetaOapg.properties.hookloadpickup, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        hookloadrotating: typing.Union[MetaOapg.properties.hookloadrotating, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        hookloadslackoff: typing.Union[MetaOapg.properties.hookloadslackoff, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        idrecparent: typing.Union[MetaOapg.properties.idrecparent, str, schemas.Unset] = schemas.unset,
        idrecwellbore: typing.Union[MetaOapg.properties.idrecwellbore, str, schemas.Unset] = schemas.unset,
        injtemp: typing.Union[MetaOapg.properties.injtemp, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        liquidinjrate: typing.Union[MetaOapg.properties.liquidinjrate, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        liquidinjrateriser: typing.Union[MetaOapg.properties.liquidinjrateriser, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        liquidreturnrate: typing.Union[MetaOapg.properties.liquidreturnrate, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        note: typing.Union[MetaOapg.properties.note, str, schemas.Unset] = schemas.unset,
        refnostand: typing.Union[MetaOapg.properties.refnostand, str, schemas.Unset] = schemas.unset,
        ropinst: typing.Union[MetaOapg.properties.ropinst, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        rpmmotor: typing.Union[MetaOapg.properties.rpmmotor, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        rpmstring: typing.Union[MetaOapg.properties.rpmstring, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        sppdiff: typing.Union[MetaOapg.properties.sppdiff, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        sppdrill: typing.Union[MetaOapg.properties.sppdrill, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        surfannpres: typing.Union[MetaOapg.properties.surfannpres, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        surfanntemp: typing.Union[MetaOapg.properties.surfanntemp, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        szodvgstab: typing.Union[MetaOapg.properties.szodvgstab, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        tfo: typing.Union[MetaOapg.properties.tfo, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        tforef: typing.Union[MetaOapg.properties.tforef, str, schemas.Unset] = schemas.unset,
        tmcirc: typing.Union[MetaOapg.properties.tmcirc, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        tmdrill: typing.Union[MetaOapg.properties.tmdrill, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        tmother: typing.Union[MetaOapg.properties.tmother, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        tmtrip: typing.Union[MetaOapg.properties.tmtrip, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        torquedrill: typing.Union[MetaOapg.properties.torquedrill, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        torqueoffbtm: typing.Union[MetaOapg.properties.torqueoffbtm, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        torqueunits: typing.Union[MetaOapg.properties.torqueunits, str, schemas.Unset] = schemas.unset,
        typ1: typing.Union[MetaOapg.properties.typ1, str, schemas.Unset] = schemas.unset,
        typ2: typing.Union[MetaOapg.properties.typ2, str, schemas.Unset] = schemas.unset,
        wob: typing.Union[MetaOapg.properties.wob, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DrillingParameterData':
        return super().__new__(
            cls,
            *args,
            idrec=idrec,
            idwell=idwell,
            bhaanpres=bhaanpres,
            bhtemp=bhtemp,
            depthend=depthend,
            depthstart=depthstart,
            dttmend=dttmend,
            dttmstart=dttmstart,
            ecdendoverride=ecdendoverride,
            excludefromnewhole=excludefromnewhole,
            gasinjrate=gasinjrate,
            gasreturnrate=gasreturnrate,
            hookloadoffbottom=hookloadoffbottom,
            hookloadpickup=hookloadpickup,
            hookloadrotating=hookloadrotating,
            hookloadslackoff=hookloadslackoff,
            idrecparent=idrecparent,
            idrecwellbore=idrecwellbore,
            injtemp=injtemp,
            liquidinjrate=liquidinjrate,
            liquidinjrateriser=liquidinjrateriser,
            liquidreturnrate=liquidreturnrate,
            note=note,
            refnostand=refnostand,
            ropinst=ropinst,
            rpmmotor=rpmmotor,
            rpmstring=rpmstring,
            sppdiff=sppdiff,
            sppdrill=sppdrill,
            surfannpres=surfannpres,
            surfanntemp=surfanntemp,
            szodvgstab=szodvgstab,
            tfo=tfo,
            tforef=tforef,
            tmcirc=tmcirc,
            tmdrill=tmdrill,
            tmother=tmother,
            tmtrip=tmtrip,
            torquedrill=torquedrill,
            torqueoffbtm=torqueoffbtm,
            torqueunits=torqueunits,
            typ1=typ1,
            typ2=typ2,
            wob=wob,
            _configuration=_configuration,
            **kwargs,
        )
