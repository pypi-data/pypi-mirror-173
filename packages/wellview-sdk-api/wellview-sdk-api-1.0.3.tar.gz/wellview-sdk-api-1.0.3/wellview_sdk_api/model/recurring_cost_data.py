# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class RecurringCostData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idrec",
            "idwell",
        }
        
        class properties:
            idrec = schemas.StrSchema
            idwell = schemas.StrSchema
            costonetime = schemas.NumberSchema
            idrecafecustom = schemas.StrSchema
            idrecintervalproblemcustom = schemas.StrSchema
            idrecjobrentalitem = schemas.StrSchema
            idrecparent = schemas.StrSchema
            idrecphasecustom = schemas.StrSchema
            intervalproblempct = schemas.NumberSchema
            note = schemas.StrSchema
            opscategory = schemas.StrSchema
            qty = schemas.NumberSchema
            sn = schemas.StrSchema
            syscarryfwdp = schemas.BoolSchema
            ticketno = schemas.StrSchema
            unschedtyp = schemas.StrSchema
            useday = schemas.BoolSchema
            usedepth = schemas.NumberSchema
            usehour = schemas.NumberSchema
            useother = schemas.NumberSchema
            usertxt1 = schemas.StrSchema
            usestandby = schemas.BoolSchema
            workorderno = schemas.StrSchema
            __annotations__ = {
                "idrec": idrec,
                "idwell": idwell,
                "costonetime": costonetime,
                "idrecafecustom": idrecafecustom,
                "idrecintervalproblemcustom": idrecintervalproblemcustom,
                "idrecjobrentalitem": idrecjobrentalitem,
                "idrecparent": idrecparent,
                "idrecphasecustom": idrecphasecustom,
                "intervalproblempct": intervalproblempct,
                "note": note,
                "opscategory": opscategory,
                "qty": qty,
                "sn": sn,
                "syscarryfwdp": syscarryfwdp,
                "ticketno": ticketno,
                "unschedtyp": unschedtyp,
                "useday": useday,
                "usedepth": usedepth,
                "usehour": usehour,
                "useother": useother,
                "usertxt1": usertxt1,
                "usestandby": usestandby,
                "workorderno": workorderno,
            }
    
    idrec: MetaOapg.properties.idrec
    idwell: MetaOapg.properties.idwell
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["costonetime"]) -> MetaOapg.properties.costonetime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecafecustom"]) -> MetaOapg.properties.idrecafecustom: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecintervalproblemcustom"]) -> MetaOapg.properties.idrecintervalproblemcustom: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecjobrentalitem"]) -> MetaOapg.properties.idrecjobrentalitem: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecparent"]) -> MetaOapg.properties.idrecparent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecphasecustom"]) -> MetaOapg.properties.idrecphasecustom: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["intervalproblempct"]) -> MetaOapg.properties.intervalproblempct: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["note"]) -> MetaOapg.properties.note: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["opscategory"]) -> MetaOapg.properties.opscategory: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["qty"]) -> MetaOapg.properties.qty: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sn"]) -> MetaOapg.properties.sn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["syscarryfwdp"]) -> MetaOapg.properties.syscarryfwdp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ticketno"]) -> MetaOapg.properties.ticketno: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["unschedtyp"]) -> MetaOapg.properties.unschedtyp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["useday"]) -> MetaOapg.properties.useday: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usedepth"]) -> MetaOapg.properties.usedepth: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usehour"]) -> MetaOapg.properties.usehour: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["useother"]) -> MetaOapg.properties.useother: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usertxt1"]) -> MetaOapg.properties.usertxt1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usestandby"]) -> MetaOapg.properties.usestandby: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workorderno"]) -> MetaOapg.properties.workorderno: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "costonetime", "idrecafecustom", "idrecintervalproblemcustom", "idrecjobrentalitem", "idrecparent", "idrecphasecustom", "intervalproblempct", "note", "opscategory", "qty", "sn", "syscarryfwdp", "ticketno", "unschedtyp", "useday", "usedepth", "usehour", "useother", "usertxt1", "usestandby", "workorderno", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["costonetime"]) -> typing.Union[MetaOapg.properties.costonetime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecafecustom"]) -> typing.Union[MetaOapg.properties.idrecafecustom, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecintervalproblemcustom"]) -> typing.Union[MetaOapg.properties.idrecintervalproblemcustom, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecjobrentalitem"]) -> typing.Union[MetaOapg.properties.idrecjobrentalitem, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecparent"]) -> typing.Union[MetaOapg.properties.idrecparent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecphasecustom"]) -> typing.Union[MetaOapg.properties.idrecphasecustom, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["intervalproblempct"]) -> typing.Union[MetaOapg.properties.intervalproblempct, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["note"]) -> typing.Union[MetaOapg.properties.note, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["opscategory"]) -> typing.Union[MetaOapg.properties.opscategory, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["qty"]) -> typing.Union[MetaOapg.properties.qty, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sn"]) -> typing.Union[MetaOapg.properties.sn, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["syscarryfwdp"]) -> typing.Union[MetaOapg.properties.syscarryfwdp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ticketno"]) -> typing.Union[MetaOapg.properties.ticketno, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["unschedtyp"]) -> typing.Union[MetaOapg.properties.unschedtyp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["useday"]) -> typing.Union[MetaOapg.properties.useday, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usedepth"]) -> typing.Union[MetaOapg.properties.usedepth, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usehour"]) -> typing.Union[MetaOapg.properties.usehour, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["useother"]) -> typing.Union[MetaOapg.properties.useother, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usertxt1"]) -> typing.Union[MetaOapg.properties.usertxt1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usestandby"]) -> typing.Union[MetaOapg.properties.usestandby, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workorderno"]) -> typing.Union[MetaOapg.properties.workorderno, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "costonetime", "idrecafecustom", "idrecintervalproblemcustom", "idrecjobrentalitem", "idrecparent", "idrecphasecustom", "intervalproblempct", "note", "opscategory", "qty", "sn", "syscarryfwdp", "ticketno", "unschedtyp", "useday", "usedepth", "usehour", "useother", "usertxt1", "usestandby", "workorderno", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idrec: typing.Union[MetaOapg.properties.idrec, str, ],
        idwell: typing.Union[MetaOapg.properties.idwell, str, ],
        costonetime: typing.Union[MetaOapg.properties.costonetime, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        idrecafecustom: typing.Union[MetaOapg.properties.idrecafecustom, str, schemas.Unset] = schemas.unset,
        idrecintervalproblemcustom: typing.Union[MetaOapg.properties.idrecintervalproblemcustom, str, schemas.Unset] = schemas.unset,
        idrecjobrentalitem: typing.Union[MetaOapg.properties.idrecjobrentalitem, str, schemas.Unset] = schemas.unset,
        idrecparent: typing.Union[MetaOapg.properties.idrecparent, str, schemas.Unset] = schemas.unset,
        idrecphasecustom: typing.Union[MetaOapg.properties.idrecphasecustom, str, schemas.Unset] = schemas.unset,
        intervalproblempct: typing.Union[MetaOapg.properties.intervalproblempct, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        note: typing.Union[MetaOapg.properties.note, str, schemas.Unset] = schemas.unset,
        opscategory: typing.Union[MetaOapg.properties.opscategory, str, schemas.Unset] = schemas.unset,
        qty: typing.Union[MetaOapg.properties.qty, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        sn: typing.Union[MetaOapg.properties.sn, str, schemas.Unset] = schemas.unset,
        syscarryfwdp: typing.Union[MetaOapg.properties.syscarryfwdp, bool, schemas.Unset] = schemas.unset,
        ticketno: typing.Union[MetaOapg.properties.ticketno, str, schemas.Unset] = schemas.unset,
        unschedtyp: typing.Union[MetaOapg.properties.unschedtyp, str, schemas.Unset] = schemas.unset,
        useday: typing.Union[MetaOapg.properties.useday, bool, schemas.Unset] = schemas.unset,
        usedepth: typing.Union[MetaOapg.properties.usedepth, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        usehour: typing.Union[MetaOapg.properties.usehour, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        useother: typing.Union[MetaOapg.properties.useother, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        usertxt1: typing.Union[MetaOapg.properties.usertxt1, str, schemas.Unset] = schemas.unset,
        usestandby: typing.Union[MetaOapg.properties.usestandby, bool, schemas.Unset] = schemas.unset,
        workorderno: typing.Union[MetaOapg.properties.workorderno, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'RecurringCostData':
        return super().__new__(
            cls,
            *args,
            idrec=idrec,
            idwell=idwell,
            costonetime=costonetime,
            idrecafecustom=idrecafecustom,
            idrecintervalproblemcustom=idrecintervalproblemcustom,
            idrecjobrentalitem=idrecjobrentalitem,
            idrecparent=idrecparent,
            idrecphasecustom=idrecphasecustom,
            intervalproblempct=intervalproblempct,
            note=note,
            opscategory=opscategory,
            qty=qty,
            sn=sn,
            syscarryfwdp=syscarryfwdp,
            ticketno=ticketno,
            unschedtyp=unschedtyp,
            useday=useday,
            usedepth=usedepth,
            usehour=usehour,
            useother=useother,
            usertxt1=usertxt1,
            usestandby=usestandby,
            workorderno=workorderno,
            _configuration=_configuration,
            **kwargs,
        )
