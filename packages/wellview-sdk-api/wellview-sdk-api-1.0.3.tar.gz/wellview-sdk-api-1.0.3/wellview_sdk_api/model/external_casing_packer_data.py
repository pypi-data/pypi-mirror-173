# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class ExternalCasingPackerData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idrec",
            "idwell",
        }
        
        class properties:
            idrec = schemas.StrSchema
            idwell = schemas.StrSchema
            ecpload = schemas.NumberSchema
            equivholesz = schemas.NumberSchema
            icvpresact = schemas.NumberSchema
            icvpresset = schemas.NumberSchema
            idrecparent = schemas.StrSchema
            inflationmeth = schemas.StrSchema
            inflfluidden = schemas.NumberSchema
            inflfluidtyp = schemas.StrSchema
            inflvol = schemas.NumberSchema
            knockoffrod = schemas.BoolSchema
            reqrelease = schemas.StrSchema
            reqset = schemas.StrSchema
            sealload = schemas.NumberSchema
            selectiveinfl = schemas.BoolSchema
            svpresact = schemas.NumberSchema
            svpresset = schemas.NumberSchema
            typ = schemas.StrSchema
            __annotations__ = {
                "idrec": idrec,
                "idwell": idwell,
                "ecpload": ecpload,
                "equivholesz": equivholesz,
                "icvpresact": icvpresact,
                "icvpresset": icvpresset,
                "idrecparent": idrecparent,
                "inflationmeth": inflationmeth,
                "inflfluidden": inflfluidden,
                "inflfluidtyp": inflfluidtyp,
                "inflvol": inflvol,
                "knockoffrod": knockoffrod,
                "reqrelease": reqrelease,
                "reqset": reqset,
                "sealload": sealload,
                "selectiveinfl": selectiveinfl,
                "svpresact": svpresact,
                "svpresset": svpresset,
                "typ": typ,
            }
    
    idrec: MetaOapg.properties.idrec
    idwell: MetaOapg.properties.idwell
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ecpload"]) -> MetaOapg.properties.ecpload: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["equivholesz"]) -> MetaOapg.properties.equivholesz: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["icvpresact"]) -> MetaOapg.properties.icvpresact: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["icvpresset"]) -> MetaOapg.properties.icvpresset: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecparent"]) -> MetaOapg.properties.idrecparent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["inflationmeth"]) -> MetaOapg.properties.inflationmeth: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["inflfluidden"]) -> MetaOapg.properties.inflfluidden: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["inflfluidtyp"]) -> MetaOapg.properties.inflfluidtyp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["inflvol"]) -> MetaOapg.properties.inflvol: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["knockoffrod"]) -> MetaOapg.properties.knockoffrod: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reqrelease"]) -> MetaOapg.properties.reqrelease: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reqset"]) -> MetaOapg.properties.reqset: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sealload"]) -> MetaOapg.properties.sealload: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["selectiveinfl"]) -> MetaOapg.properties.selectiveinfl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["svpresact"]) -> MetaOapg.properties.svpresact: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["svpresset"]) -> MetaOapg.properties.svpresset: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["typ"]) -> MetaOapg.properties.typ: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "ecpload", "equivholesz", "icvpresact", "icvpresset", "idrecparent", "inflationmeth", "inflfluidden", "inflfluidtyp", "inflvol", "knockoffrod", "reqrelease", "reqset", "sealload", "selectiveinfl", "svpresact", "svpresset", "typ", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ecpload"]) -> typing.Union[MetaOapg.properties.ecpload, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["equivholesz"]) -> typing.Union[MetaOapg.properties.equivholesz, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["icvpresact"]) -> typing.Union[MetaOapg.properties.icvpresact, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["icvpresset"]) -> typing.Union[MetaOapg.properties.icvpresset, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecparent"]) -> typing.Union[MetaOapg.properties.idrecparent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["inflationmeth"]) -> typing.Union[MetaOapg.properties.inflationmeth, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["inflfluidden"]) -> typing.Union[MetaOapg.properties.inflfluidden, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["inflfluidtyp"]) -> typing.Union[MetaOapg.properties.inflfluidtyp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["inflvol"]) -> typing.Union[MetaOapg.properties.inflvol, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["knockoffrod"]) -> typing.Union[MetaOapg.properties.knockoffrod, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reqrelease"]) -> typing.Union[MetaOapg.properties.reqrelease, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reqset"]) -> typing.Union[MetaOapg.properties.reqset, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sealload"]) -> typing.Union[MetaOapg.properties.sealload, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["selectiveinfl"]) -> typing.Union[MetaOapg.properties.selectiveinfl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["svpresact"]) -> typing.Union[MetaOapg.properties.svpresact, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["svpresset"]) -> typing.Union[MetaOapg.properties.svpresset, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["typ"]) -> typing.Union[MetaOapg.properties.typ, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "ecpload", "equivholesz", "icvpresact", "icvpresset", "idrecparent", "inflationmeth", "inflfluidden", "inflfluidtyp", "inflvol", "knockoffrod", "reqrelease", "reqset", "sealload", "selectiveinfl", "svpresact", "svpresset", "typ", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idrec: typing.Union[MetaOapg.properties.idrec, str, ],
        idwell: typing.Union[MetaOapg.properties.idwell, str, ],
        ecpload: typing.Union[MetaOapg.properties.ecpload, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        equivholesz: typing.Union[MetaOapg.properties.equivholesz, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        icvpresact: typing.Union[MetaOapg.properties.icvpresact, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        icvpresset: typing.Union[MetaOapg.properties.icvpresset, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        idrecparent: typing.Union[MetaOapg.properties.idrecparent, str, schemas.Unset] = schemas.unset,
        inflationmeth: typing.Union[MetaOapg.properties.inflationmeth, str, schemas.Unset] = schemas.unset,
        inflfluidden: typing.Union[MetaOapg.properties.inflfluidden, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        inflfluidtyp: typing.Union[MetaOapg.properties.inflfluidtyp, str, schemas.Unset] = schemas.unset,
        inflvol: typing.Union[MetaOapg.properties.inflvol, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        knockoffrod: typing.Union[MetaOapg.properties.knockoffrod, bool, schemas.Unset] = schemas.unset,
        reqrelease: typing.Union[MetaOapg.properties.reqrelease, str, schemas.Unset] = schemas.unset,
        reqset: typing.Union[MetaOapg.properties.reqset, str, schemas.Unset] = schemas.unset,
        sealload: typing.Union[MetaOapg.properties.sealload, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        selectiveinfl: typing.Union[MetaOapg.properties.selectiveinfl, bool, schemas.Unset] = schemas.unset,
        svpresact: typing.Union[MetaOapg.properties.svpresact, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        svpresset: typing.Union[MetaOapg.properties.svpresset, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        typ: typing.Union[MetaOapg.properties.typ, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ExternalCasingPackerData':
        return super().__new__(
            cls,
            *args,
            idrec=idrec,
            idwell=idwell,
            ecpload=ecpload,
            equivholesz=equivholesz,
            icvpresact=icvpresact,
            icvpresset=icvpresset,
            idrecparent=idrecparent,
            inflationmeth=inflationmeth,
            inflfluidden=inflfluidden,
            inflfluidtyp=inflfluidtyp,
            inflvol=inflvol,
            knockoffrod=knockoffrod,
            reqrelease=reqrelease,
            reqset=reqset,
            sealload=sealload,
            selectiveinfl=selectiveinfl,
            svpresact=svpresact,
            svpresset=svpresset,
            typ=typ,
            _configuration=_configuration,
            **kwargs,
        )
