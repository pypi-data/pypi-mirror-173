# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class MaterialWasteTransferDetailsData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idrec",
            "idwell",
        }
        
        class properties:
            idrec = schemas.StrSchema
            idwell = schemas.StrSchema
            cond = schemas.StrSchema
            cost = schemas.NumberSchema
            costused = schemas.NumberSchema
            durequipinservice = schemas.NumberSchema
            environmenttyp = schemas.StrSchema
            idrecparent = schemas.StrSchema
            length = schemas.NumberSchema
            materialdes = schemas.StrSchema
            materialrefno = schemas.StrSchema
            materialtyp1 = schemas.StrSchema
            materialtyp2 = schemas.StrSchema
            mattransdetailida = schemas.StrSchema
            mattransdetailidb = schemas.StrSchema
            note = schemas.StrSchema
            qty = schemas.NumberSchema
            qtyunitlabel = schemas.StrSchema
            reason = schemas.StrSchema
            rental = schemas.BoolSchema
            sn = schemas.StrSchema
            usernum1 = schemas.NumberSchema
            usertxt1 = schemas.StrSchema
            __annotations__ = {
                "idrec": idrec,
                "idwell": idwell,
                "cond": cond,
                "cost": cost,
                "costused": costused,
                "durequipinservice": durequipinservice,
                "environmenttyp": environmenttyp,
                "idrecparent": idrecparent,
                "length": length,
                "materialdes": materialdes,
                "materialrefno": materialrefno,
                "materialtyp1": materialtyp1,
                "materialtyp2": materialtyp2,
                "mattransdetailida": mattransdetailida,
                "mattransdetailidb": mattransdetailidb,
                "note": note,
                "qty": qty,
                "qtyunitlabel": qtyunitlabel,
                "reason": reason,
                "rental": rental,
                "sn": sn,
                "usernum1": usernum1,
                "usertxt1": usertxt1,
            }
    
    idrec: MetaOapg.properties.idrec
    idwell: MetaOapg.properties.idwell
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cond"]) -> MetaOapg.properties.cond: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cost"]) -> MetaOapg.properties.cost: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["costused"]) -> MetaOapg.properties.costused: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["durequipinservice"]) -> MetaOapg.properties.durequipinservice: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["environmenttyp"]) -> MetaOapg.properties.environmenttyp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecparent"]) -> MetaOapg.properties.idrecparent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["length"]) -> MetaOapg.properties.length: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["materialdes"]) -> MetaOapg.properties.materialdes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["materialrefno"]) -> MetaOapg.properties.materialrefno: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["materialtyp1"]) -> MetaOapg.properties.materialtyp1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["materialtyp2"]) -> MetaOapg.properties.materialtyp2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mattransdetailida"]) -> MetaOapg.properties.mattransdetailida: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mattransdetailidb"]) -> MetaOapg.properties.mattransdetailidb: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["note"]) -> MetaOapg.properties.note: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["qty"]) -> MetaOapg.properties.qty: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["qtyunitlabel"]) -> MetaOapg.properties.qtyunitlabel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reason"]) -> MetaOapg.properties.reason: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rental"]) -> MetaOapg.properties.rental: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sn"]) -> MetaOapg.properties.sn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usernum1"]) -> MetaOapg.properties.usernum1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usertxt1"]) -> MetaOapg.properties.usertxt1: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "cond", "cost", "costused", "durequipinservice", "environmenttyp", "idrecparent", "length", "materialdes", "materialrefno", "materialtyp1", "materialtyp2", "mattransdetailida", "mattransdetailidb", "note", "qty", "qtyunitlabel", "reason", "rental", "sn", "usernum1", "usertxt1", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cond"]) -> typing.Union[MetaOapg.properties.cond, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cost"]) -> typing.Union[MetaOapg.properties.cost, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["costused"]) -> typing.Union[MetaOapg.properties.costused, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["durequipinservice"]) -> typing.Union[MetaOapg.properties.durequipinservice, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["environmenttyp"]) -> typing.Union[MetaOapg.properties.environmenttyp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecparent"]) -> typing.Union[MetaOapg.properties.idrecparent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["length"]) -> typing.Union[MetaOapg.properties.length, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["materialdes"]) -> typing.Union[MetaOapg.properties.materialdes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["materialrefno"]) -> typing.Union[MetaOapg.properties.materialrefno, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["materialtyp1"]) -> typing.Union[MetaOapg.properties.materialtyp1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["materialtyp2"]) -> typing.Union[MetaOapg.properties.materialtyp2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mattransdetailida"]) -> typing.Union[MetaOapg.properties.mattransdetailida, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mattransdetailidb"]) -> typing.Union[MetaOapg.properties.mattransdetailidb, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["note"]) -> typing.Union[MetaOapg.properties.note, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["qty"]) -> typing.Union[MetaOapg.properties.qty, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["qtyunitlabel"]) -> typing.Union[MetaOapg.properties.qtyunitlabel, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reason"]) -> typing.Union[MetaOapg.properties.reason, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rental"]) -> typing.Union[MetaOapg.properties.rental, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sn"]) -> typing.Union[MetaOapg.properties.sn, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usernum1"]) -> typing.Union[MetaOapg.properties.usernum1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usertxt1"]) -> typing.Union[MetaOapg.properties.usertxt1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "cond", "cost", "costused", "durequipinservice", "environmenttyp", "idrecparent", "length", "materialdes", "materialrefno", "materialtyp1", "materialtyp2", "mattransdetailida", "mattransdetailidb", "note", "qty", "qtyunitlabel", "reason", "rental", "sn", "usernum1", "usertxt1", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idrec: typing.Union[MetaOapg.properties.idrec, str, ],
        idwell: typing.Union[MetaOapg.properties.idwell, str, ],
        cond: typing.Union[MetaOapg.properties.cond, str, schemas.Unset] = schemas.unset,
        cost: typing.Union[MetaOapg.properties.cost, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        costused: typing.Union[MetaOapg.properties.costused, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        durequipinservice: typing.Union[MetaOapg.properties.durequipinservice, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        environmenttyp: typing.Union[MetaOapg.properties.environmenttyp, str, schemas.Unset] = schemas.unset,
        idrecparent: typing.Union[MetaOapg.properties.idrecparent, str, schemas.Unset] = schemas.unset,
        length: typing.Union[MetaOapg.properties.length, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        materialdes: typing.Union[MetaOapg.properties.materialdes, str, schemas.Unset] = schemas.unset,
        materialrefno: typing.Union[MetaOapg.properties.materialrefno, str, schemas.Unset] = schemas.unset,
        materialtyp1: typing.Union[MetaOapg.properties.materialtyp1, str, schemas.Unset] = schemas.unset,
        materialtyp2: typing.Union[MetaOapg.properties.materialtyp2, str, schemas.Unset] = schemas.unset,
        mattransdetailida: typing.Union[MetaOapg.properties.mattransdetailida, str, schemas.Unset] = schemas.unset,
        mattransdetailidb: typing.Union[MetaOapg.properties.mattransdetailidb, str, schemas.Unset] = schemas.unset,
        note: typing.Union[MetaOapg.properties.note, str, schemas.Unset] = schemas.unset,
        qty: typing.Union[MetaOapg.properties.qty, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        qtyunitlabel: typing.Union[MetaOapg.properties.qtyunitlabel, str, schemas.Unset] = schemas.unset,
        reason: typing.Union[MetaOapg.properties.reason, str, schemas.Unset] = schemas.unset,
        rental: typing.Union[MetaOapg.properties.rental, bool, schemas.Unset] = schemas.unset,
        sn: typing.Union[MetaOapg.properties.sn, str, schemas.Unset] = schemas.unset,
        usernum1: typing.Union[MetaOapg.properties.usernum1, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        usertxt1: typing.Union[MetaOapg.properties.usertxt1, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'MaterialWasteTransferDetailsData':
        return super().__new__(
            cls,
            *args,
            idrec=idrec,
            idwell=idwell,
            cond=cond,
            cost=cost,
            costused=costused,
            durequipinservice=durequipinservice,
            environmenttyp=environmenttyp,
            idrecparent=idrecparent,
            length=length,
            materialdes=materialdes,
            materialrefno=materialrefno,
            materialtyp1=materialtyp1,
            materialtyp2=materialtyp2,
            mattransdetailida=mattransdetailida,
            mattransdetailidb=mattransdetailidb,
            note=note,
            qty=qty,
            qtyunitlabel=qtyunitlabel,
            reason=reason,
            rental=rental,
            sn=sn,
            usernum1=usernum1,
            usertxt1=usertxt1,
            _configuration=_configuration,
            **kwargs,
        )
