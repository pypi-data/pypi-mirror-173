# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class VictimData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idrec",
            "idwell",
        }
        
        class properties:
            idrec = schemas.StrSchema
            idwell = schemas.StrSchema
            age = schemas.IntSchema
            com = schemas.StrSchema
            company = schemas.StrSchema
            durationlostwork = schemas.NumberSchema
            durationrestrictedwork = schemas.NumberSchema
            idrecparent = schemas.StrSchema
            incidentresult = schemas.StrSchema
            occupation = schemas.StrSchema
            permanentdisability = schemas.BoolSchema
            sex = schemas.StrSchema
            typemploy = schemas.StrSchema
            usertxt1 = schemas.StrSchema
            usertxt2 = schemas.StrSchema
            victida = schemas.StrSchema
            victidb = schemas.StrSchema
            victname = schemas.StrSchema
            __annotations__ = {
                "idrec": idrec,
                "idwell": idwell,
                "age": age,
                "com": com,
                "company": company,
                "durationlostwork": durationlostwork,
                "durationrestrictedwork": durationrestrictedwork,
                "idrecparent": idrecparent,
                "incidentresult": incidentresult,
                "occupation": occupation,
                "permanentdisability": permanentdisability,
                "sex": sex,
                "typemploy": typemploy,
                "usertxt1": usertxt1,
                "usertxt2": usertxt2,
                "victida": victida,
                "victidb": victidb,
                "victname": victname,
            }
    
    idrec: MetaOapg.properties.idrec
    idwell: MetaOapg.properties.idwell
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["age"]) -> MetaOapg.properties.age: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["com"]) -> MetaOapg.properties.com: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["company"]) -> MetaOapg.properties.company: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["durationlostwork"]) -> MetaOapg.properties.durationlostwork: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["durationrestrictedwork"]) -> MetaOapg.properties.durationrestrictedwork: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecparent"]) -> MetaOapg.properties.idrecparent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["incidentresult"]) -> MetaOapg.properties.incidentresult: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["occupation"]) -> MetaOapg.properties.occupation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["permanentdisability"]) -> MetaOapg.properties.permanentdisability: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sex"]) -> MetaOapg.properties.sex: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["typemploy"]) -> MetaOapg.properties.typemploy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usertxt1"]) -> MetaOapg.properties.usertxt1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usertxt2"]) -> MetaOapg.properties.usertxt2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["victida"]) -> MetaOapg.properties.victida: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["victidb"]) -> MetaOapg.properties.victidb: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["victname"]) -> MetaOapg.properties.victname: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "age", "com", "company", "durationlostwork", "durationrestrictedwork", "idrecparent", "incidentresult", "occupation", "permanentdisability", "sex", "typemploy", "usertxt1", "usertxt2", "victida", "victidb", "victname", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["age"]) -> typing.Union[MetaOapg.properties.age, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["com"]) -> typing.Union[MetaOapg.properties.com, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["company"]) -> typing.Union[MetaOapg.properties.company, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["durationlostwork"]) -> typing.Union[MetaOapg.properties.durationlostwork, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["durationrestrictedwork"]) -> typing.Union[MetaOapg.properties.durationrestrictedwork, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecparent"]) -> typing.Union[MetaOapg.properties.idrecparent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["incidentresult"]) -> typing.Union[MetaOapg.properties.incidentresult, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["occupation"]) -> typing.Union[MetaOapg.properties.occupation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["permanentdisability"]) -> typing.Union[MetaOapg.properties.permanentdisability, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sex"]) -> typing.Union[MetaOapg.properties.sex, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["typemploy"]) -> typing.Union[MetaOapg.properties.typemploy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usertxt1"]) -> typing.Union[MetaOapg.properties.usertxt1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usertxt2"]) -> typing.Union[MetaOapg.properties.usertxt2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["victida"]) -> typing.Union[MetaOapg.properties.victida, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["victidb"]) -> typing.Union[MetaOapg.properties.victidb, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["victname"]) -> typing.Union[MetaOapg.properties.victname, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "age", "com", "company", "durationlostwork", "durationrestrictedwork", "idrecparent", "incidentresult", "occupation", "permanentdisability", "sex", "typemploy", "usertxt1", "usertxt2", "victida", "victidb", "victname", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idrec: typing.Union[MetaOapg.properties.idrec, str, ],
        idwell: typing.Union[MetaOapg.properties.idwell, str, ],
        age: typing.Union[MetaOapg.properties.age, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        com: typing.Union[MetaOapg.properties.com, str, schemas.Unset] = schemas.unset,
        company: typing.Union[MetaOapg.properties.company, str, schemas.Unset] = schemas.unset,
        durationlostwork: typing.Union[MetaOapg.properties.durationlostwork, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        durationrestrictedwork: typing.Union[MetaOapg.properties.durationrestrictedwork, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        idrecparent: typing.Union[MetaOapg.properties.idrecparent, str, schemas.Unset] = schemas.unset,
        incidentresult: typing.Union[MetaOapg.properties.incidentresult, str, schemas.Unset] = schemas.unset,
        occupation: typing.Union[MetaOapg.properties.occupation, str, schemas.Unset] = schemas.unset,
        permanentdisability: typing.Union[MetaOapg.properties.permanentdisability, bool, schemas.Unset] = schemas.unset,
        sex: typing.Union[MetaOapg.properties.sex, str, schemas.Unset] = schemas.unset,
        typemploy: typing.Union[MetaOapg.properties.typemploy, str, schemas.Unset] = schemas.unset,
        usertxt1: typing.Union[MetaOapg.properties.usertxt1, str, schemas.Unset] = schemas.unset,
        usertxt2: typing.Union[MetaOapg.properties.usertxt2, str, schemas.Unset] = schemas.unset,
        victida: typing.Union[MetaOapg.properties.victida, str, schemas.Unset] = schemas.unset,
        victidb: typing.Union[MetaOapg.properties.victidb, str, schemas.Unset] = schemas.unset,
        victname: typing.Union[MetaOapg.properties.victname, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'VictimData':
        return super().__new__(
            cls,
            *args,
            idrec=idrec,
            idwell=idwell,
            age=age,
            com=com,
            company=company,
            durationlostwork=durationlostwork,
            durationrestrictedwork=durationrestrictedwork,
            idrecparent=idrecparent,
            incidentresult=incidentresult,
            occupation=occupation,
            permanentdisability=permanentdisability,
            sex=sex,
            typemploy=typemploy,
            usertxt1=usertxt1,
            usertxt2=usertxt2,
            victida=victida,
            victidb=victidb,
            victname=victname,
            _configuration=_configuration,
            **kwargs,
        )
