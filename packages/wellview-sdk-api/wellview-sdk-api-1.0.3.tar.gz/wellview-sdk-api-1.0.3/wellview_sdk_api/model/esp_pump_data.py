# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class ESPPumpData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idrec",
            "idwell",
        }
        
        class properties:
            idrec = schemas.StrSchema
            idwell = schemas.StrSchema
            activestgs = schemas.IntSchema
            hsngmat = schemas.StrSchema
            hsngstgs = schemas.IntSchema
            hydheaddesign = schemas.NumberSchema
            idrecparent = schemas.StrSchema
            impellermat = schemas.StrSchema
            powerrating = schemas.NumberSchema
            presindesign = schemas.NumberSchema
            volratedesign = schemas.NumberSchema
            __annotations__ = {
                "idrec": idrec,
                "idwell": idwell,
                "activestgs": activestgs,
                "hsngmat": hsngmat,
                "hsngstgs": hsngstgs,
                "hydheaddesign": hydheaddesign,
                "idrecparent": idrecparent,
                "impellermat": impellermat,
                "powerrating": powerrating,
                "presindesign": presindesign,
                "volratedesign": volratedesign,
            }
    
    idrec: MetaOapg.properties.idrec
    idwell: MetaOapg.properties.idwell
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["activestgs"]) -> MetaOapg.properties.activestgs: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hsngmat"]) -> MetaOapg.properties.hsngmat: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hsngstgs"]) -> MetaOapg.properties.hsngstgs: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hydheaddesign"]) -> MetaOapg.properties.hydheaddesign: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecparent"]) -> MetaOapg.properties.idrecparent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["impellermat"]) -> MetaOapg.properties.impellermat: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["powerrating"]) -> MetaOapg.properties.powerrating: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["presindesign"]) -> MetaOapg.properties.presindesign: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["volratedesign"]) -> MetaOapg.properties.volratedesign: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "activestgs", "hsngmat", "hsngstgs", "hydheaddesign", "idrecparent", "impellermat", "powerrating", "presindesign", "volratedesign", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["activestgs"]) -> typing.Union[MetaOapg.properties.activestgs, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hsngmat"]) -> typing.Union[MetaOapg.properties.hsngmat, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hsngstgs"]) -> typing.Union[MetaOapg.properties.hsngstgs, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hydheaddesign"]) -> typing.Union[MetaOapg.properties.hydheaddesign, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecparent"]) -> typing.Union[MetaOapg.properties.idrecparent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["impellermat"]) -> typing.Union[MetaOapg.properties.impellermat, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["powerrating"]) -> typing.Union[MetaOapg.properties.powerrating, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["presindesign"]) -> typing.Union[MetaOapg.properties.presindesign, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["volratedesign"]) -> typing.Union[MetaOapg.properties.volratedesign, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "activestgs", "hsngmat", "hsngstgs", "hydheaddesign", "idrecparent", "impellermat", "powerrating", "presindesign", "volratedesign", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idrec: typing.Union[MetaOapg.properties.idrec, str, ],
        idwell: typing.Union[MetaOapg.properties.idwell, str, ],
        activestgs: typing.Union[MetaOapg.properties.activestgs, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        hsngmat: typing.Union[MetaOapg.properties.hsngmat, str, schemas.Unset] = schemas.unset,
        hsngstgs: typing.Union[MetaOapg.properties.hsngstgs, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        hydheaddesign: typing.Union[MetaOapg.properties.hydheaddesign, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        idrecparent: typing.Union[MetaOapg.properties.idrecparent, str, schemas.Unset] = schemas.unset,
        impellermat: typing.Union[MetaOapg.properties.impellermat, str, schemas.Unset] = schemas.unset,
        powerrating: typing.Union[MetaOapg.properties.powerrating, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        presindesign: typing.Union[MetaOapg.properties.presindesign, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        volratedesign: typing.Union[MetaOapg.properties.volratedesign, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ESPPumpData':
        return super().__new__(
            cls,
            *args,
            idrec=idrec,
            idwell=idwell,
            activestgs=activestgs,
            hsngmat=hsngmat,
            hsngstgs=hsngstgs,
            hydheaddesign=hydheaddesign,
            idrecparent=idrecparent,
            impellermat=impellermat,
            powerrating=powerrating,
            presindesign=presindesign,
            volratedesign=volratedesign,
            _configuration=_configuration,
            **kwargs,
        )
