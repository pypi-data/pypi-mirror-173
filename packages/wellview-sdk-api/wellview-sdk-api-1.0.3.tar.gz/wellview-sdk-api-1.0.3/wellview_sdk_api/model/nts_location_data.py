# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class NTSLocationData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idrec",
            "idwell",
        }
        
        class properties:
            idrec = schemas.StrSchema
            idwell = schemas.StrSchema
            block = schemas.StrSchema
            eventseq = schemas.IntSchema
            idrecparent = schemas.StrSchema
            letterquad = schemas.StrSchema
            locexcept = schemas.StrSchema
            note = schemas.StrSchema
            primquad = schemas.IntSchema
            qtr = schemas.StrSchema
            six = schemas.IntSchema
            source = schemas.StrSchema
            unit = schemas.IntSchema
            __annotations__ = {
                "idrec": idrec,
                "idwell": idwell,
                "block": block,
                "eventseq": eventseq,
                "idrecparent": idrecparent,
                "letterquad": letterquad,
                "locexcept": locexcept,
                "note": note,
                "primquad": primquad,
                "qtr": qtr,
                "six": six,
                "source": source,
                "unit": unit,
            }
    
    idrec: MetaOapg.properties.idrec
    idwell: MetaOapg.properties.idwell
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["block"]) -> MetaOapg.properties.block: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["eventseq"]) -> MetaOapg.properties.eventseq: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecparent"]) -> MetaOapg.properties.idrecparent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["letterquad"]) -> MetaOapg.properties.letterquad: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["locexcept"]) -> MetaOapg.properties.locexcept: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["note"]) -> MetaOapg.properties.note: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["primquad"]) -> MetaOapg.properties.primquad: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["qtr"]) -> MetaOapg.properties.qtr: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["six"]) -> MetaOapg.properties.six: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["source"]) -> MetaOapg.properties.source: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["unit"]) -> MetaOapg.properties.unit: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "block", "eventseq", "idrecparent", "letterquad", "locexcept", "note", "primquad", "qtr", "six", "source", "unit", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["block"]) -> typing.Union[MetaOapg.properties.block, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["eventseq"]) -> typing.Union[MetaOapg.properties.eventseq, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecparent"]) -> typing.Union[MetaOapg.properties.idrecparent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["letterquad"]) -> typing.Union[MetaOapg.properties.letterquad, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["locexcept"]) -> typing.Union[MetaOapg.properties.locexcept, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["note"]) -> typing.Union[MetaOapg.properties.note, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["primquad"]) -> typing.Union[MetaOapg.properties.primquad, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["qtr"]) -> typing.Union[MetaOapg.properties.qtr, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["six"]) -> typing.Union[MetaOapg.properties.six, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["source"]) -> typing.Union[MetaOapg.properties.source, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["unit"]) -> typing.Union[MetaOapg.properties.unit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "block", "eventseq", "idrecparent", "letterquad", "locexcept", "note", "primquad", "qtr", "six", "source", "unit", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idrec: typing.Union[MetaOapg.properties.idrec, str, ],
        idwell: typing.Union[MetaOapg.properties.idwell, str, ],
        block: typing.Union[MetaOapg.properties.block, str, schemas.Unset] = schemas.unset,
        eventseq: typing.Union[MetaOapg.properties.eventseq, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        idrecparent: typing.Union[MetaOapg.properties.idrecparent, str, schemas.Unset] = schemas.unset,
        letterquad: typing.Union[MetaOapg.properties.letterquad, str, schemas.Unset] = schemas.unset,
        locexcept: typing.Union[MetaOapg.properties.locexcept, str, schemas.Unset] = schemas.unset,
        note: typing.Union[MetaOapg.properties.note, str, schemas.Unset] = schemas.unset,
        primquad: typing.Union[MetaOapg.properties.primquad, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        qtr: typing.Union[MetaOapg.properties.qtr, str, schemas.Unset] = schemas.unset,
        six: typing.Union[MetaOapg.properties.six, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        source: typing.Union[MetaOapg.properties.source, str, schemas.Unset] = schemas.unset,
        unit: typing.Union[MetaOapg.properties.unit, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'NTSLocationData':
        return super().__new__(
            cls,
            *args,
            idrec=idrec,
            idwell=idwell,
            block=block,
            eventseq=eventseq,
            idrecparent=idrecparent,
            letterquad=letterquad,
            locexcept=locexcept,
            note=note,
            primquad=primquad,
            qtr=qtr,
            six=six,
            source=source,
            unit=unit,
            _configuration=_configuration,
            **kwargs,
        )
