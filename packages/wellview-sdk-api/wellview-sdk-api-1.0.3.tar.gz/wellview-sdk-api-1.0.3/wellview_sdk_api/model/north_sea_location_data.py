# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class NorthSeaLocationData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idrec",
            "idwell",
        }
        
        class properties:
            idrec = schemas.StrSchema
            idwell = schemas.StrSchema
            blockno = schemas.IntSchema
            blocksuffix = schemas.StrSchema
            idrecparent = schemas.StrSchema
            meridian = schemas.StrSchema
            note = schemas.StrSchema
            quadrant = schemas.IntSchema
            quadrantprefix = schemas.StrSchema
            source = schemas.StrSchema
            __annotations__ = {
                "idrec": idrec,
                "idwell": idwell,
                "blockno": blockno,
                "blocksuffix": blocksuffix,
                "idrecparent": idrecparent,
                "meridian": meridian,
                "note": note,
                "quadrant": quadrant,
                "quadrantprefix": quadrantprefix,
                "source": source,
            }
    
    idrec: MetaOapg.properties.idrec
    idwell: MetaOapg.properties.idwell
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["blockno"]) -> MetaOapg.properties.blockno: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["blocksuffix"]) -> MetaOapg.properties.blocksuffix: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecparent"]) -> MetaOapg.properties.idrecparent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["meridian"]) -> MetaOapg.properties.meridian: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["note"]) -> MetaOapg.properties.note: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["quadrant"]) -> MetaOapg.properties.quadrant: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["quadrantprefix"]) -> MetaOapg.properties.quadrantprefix: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["source"]) -> MetaOapg.properties.source: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "blockno", "blocksuffix", "idrecparent", "meridian", "note", "quadrant", "quadrantprefix", "source", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["blockno"]) -> typing.Union[MetaOapg.properties.blockno, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["blocksuffix"]) -> typing.Union[MetaOapg.properties.blocksuffix, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecparent"]) -> typing.Union[MetaOapg.properties.idrecparent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["meridian"]) -> typing.Union[MetaOapg.properties.meridian, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["note"]) -> typing.Union[MetaOapg.properties.note, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["quadrant"]) -> typing.Union[MetaOapg.properties.quadrant, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["quadrantprefix"]) -> typing.Union[MetaOapg.properties.quadrantprefix, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["source"]) -> typing.Union[MetaOapg.properties.source, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "blockno", "blocksuffix", "idrecparent", "meridian", "note", "quadrant", "quadrantprefix", "source", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idrec: typing.Union[MetaOapg.properties.idrec, str, ],
        idwell: typing.Union[MetaOapg.properties.idwell, str, ],
        blockno: typing.Union[MetaOapg.properties.blockno, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        blocksuffix: typing.Union[MetaOapg.properties.blocksuffix, str, schemas.Unset] = schemas.unset,
        idrecparent: typing.Union[MetaOapg.properties.idrecparent, str, schemas.Unset] = schemas.unset,
        meridian: typing.Union[MetaOapg.properties.meridian, str, schemas.Unset] = schemas.unset,
        note: typing.Union[MetaOapg.properties.note, str, schemas.Unset] = schemas.unset,
        quadrant: typing.Union[MetaOapg.properties.quadrant, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        quadrantprefix: typing.Union[MetaOapg.properties.quadrantprefix, str, schemas.Unset] = schemas.unset,
        source: typing.Union[MetaOapg.properties.source, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'NorthSeaLocationData':
        return super().__new__(
            cls,
            *args,
            idrec=idrec,
            idwell=idwell,
            blockno=blockno,
            blocksuffix=blocksuffix,
            idrecparent=idrecparent,
            meridian=meridian,
            note=note,
            quadrant=quadrant,
            quadrantprefix=quadrantprefix,
            source=source,
            _configuration=_configuration,
            **kwargs,
        )
