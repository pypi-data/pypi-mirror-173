# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class WellHeaderData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idwell",
        }
        
        class properties:
            idwell = schemas.StrSchema
            agent = schemas.StrSchema
            area = schemas.StrSchema
            basin = schemas.StrSchema
            basincode = schemas.StrSchema
            com = schemas.StrSchema
            country = schemas.StrSchema
            county = schemas.StrSchema
            currentwellstatus1 = schemas.StrSchema
            currentwellstatus2 = schemas.StrSchema
            directionstowell = schemas.StrSchema
            district = schemas.StrSchema
            division = schemas.StrSchema
            divisioncode = schemas.StrSchema
            dttmabandon = schemas.DateTimeSchema
            dttmfirstprod = schemas.DateTimeSchema
            dttmrr = schemas.DateTimeSchema
            dttmspud = schemas.DateTimeSchema
            dttmwellclass = schemas.DateTimeSchema
            dttmwelllic = schemas.DateTimeSchema
            elvcasflange = schemas.NumberSchema
            elvground = schemas.NumberSchema
            elvlat = schemas.NumberSchema
            elvmudline = schemas.NumberSchema
            elvorigkb = schemas.NumberSchema
            elvtubhead = schemas.NumberSchema
            environmentsensitive = schemas.BoolSchema
            ewdist = schemas.NumberSchema
            ewflag = schemas.StrSchema
            fieldcode = schemas.StrSchema
            fieldname = schemas.StrSchema
            fieldoffice = schemas.StrSchema
            fieldofficecode = schemas.StrSchema
            govauthority = schemas.StrSchema
            hih2s = schemas.BoolSchema
            hisitp = schemas.BoolSchema
            idrecelvhistory = schemas.StrSchema
            latitude = schemas.NumberSchema
            latlongdatum = schemas.StrSchema
            latlongsource = schemas.StrSchema
            lease = schemas.StrSchema
            leasecode = schemas.StrSchema
            legalsurveyloc = schemas.StrSchema
            legalsurveysubtyp = schemas.StrSchema
            legalsurveytyp = schemas.StrSchema
            localtimezone = schemas.NumberSchema
            locationnote = schemas.StrSchema
            locationref = schemas.StrSchema
            locationsensitive = schemas.BoolSchema
            locationtyp = schemas.StrSchema
            longitude = schemas.NumberSchema
            nsdist = schemas.NumberSchema
            nsflag = schemas.StrSchema
            operated = schemas.BoolSchema
            operator = schemas.StrSchema
            operatorcode = schemas.StrSchema
            padcode = schemas.StrSchema
            padname = schemas.StrSchema
            platform = schemas.StrSchema
            primaryfluiddes = schemas.StrSchema
            problemflag = schemas.BoolSchema
            riskclass = schemas.StrSchema
            slot = schemas.StrSchema
            stateprov = schemas.StrSchema
            surfacerights = schemas.StrSchema
            towndist = schemas.NumberSchema
            townflag = schemas.StrSchema
            townname = schemas.StrSchema
            townstateprov = schemas.StrSchema
            userboolean1 = schemas.BoolSchema
            userboolean2 = schemas.BoolSchema
            userboolean3 = schemas.BoolSchema
            userboolean4 = schemas.BoolSchema
            userboolean5 = schemas.BoolSchema
            userdttm1 = schemas.DateTimeSchema
            userdttm2 = schemas.DateTimeSchema
            userdttm3 = schemas.DateTimeSchema
            userdttm4 = schemas.DateTimeSchema
            userdttm5 = schemas.DateTimeSchema
            usernum1 = schemas.NumberSchema
            usernum2 = schemas.NumberSchema
            usernum3 = schemas.NumberSchema
            usernum4 = schemas.NumberSchema
            usernum5 = schemas.NumberSchema
            usernum6 = schemas.NumberSchema
            usertxt1 = schemas.StrSchema
            usertxt10 = schemas.StrSchema
            usertxt2 = schemas.StrSchema
            usertxt3 = schemas.StrSchema
            usertxt4 = schemas.StrSchema
            usertxt5 = schemas.StrSchema
            usertxt6 = schemas.StrSchema
            usertxt7 = schemas.StrSchema
            usertxt8 = schemas.StrSchema
            usertxt9 = schemas.StrSchema
            utmgridzone = schemas.IntSchema
            utmsource = schemas.StrSchema
            utmx = schemas.NumberSchema
            utmy = schemas.NumberSchema
            waterdepth = schemas.NumberSchema
            waterdepthref = schemas.StrSchema
            wellclass = schemas.StrSchema
            wellconfig = schemas.StrSchema
            wellida = schemas.StrSchema
            wellidb = schemas.StrSchema
            wellidc = schemas.StrSchema
            wellidd = schemas.StrSchema
            wellide = schemas.StrSchema
            welllicensee = schemas.StrSchema
            welllicenseno = schemas.StrSchema
            wellname = schemas.StrSchema
            welltyp1 = schemas.StrSchema
            welltyp2 = schemas.StrSchema
            __annotations__ = {
                "idwell": idwell,
                "agent": agent,
                "area": area,
                "basin": basin,
                "basincode": basincode,
                "com": com,
                "country": country,
                "county": county,
                "currentwellstatus1": currentwellstatus1,
                "currentwellstatus2": currentwellstatus2,
                "directionstowell": directionstowell,
                "district": district,
                "division": division,
                "divisioncode": divisioncode,
                "dttmabandon": dttmabandon,
                "dttmfirstprod": dttmfirstprod,
                "dttmrr": dttmrr,
                "dttmspud": dttmspud,
                "dttmwellclass": dttmwellclass,
                "dttmwelllic": dttmwelllic,
                "elvcasflange": elvcasflange,
                "elvground": elvground,
                "elvlat": elvlat,
                "elvmudline": elvmudline,
                "elvorigkb": elvorigkb,
                "elvtubhead": elvtubhead,
                "environmentsensitive": environmentsensitive,
                "ewdist": ewdist,
                "ewflag": ewflag,
                "fieldcode": fieldcode,
                "fieldname": fieldname,
                "fieldoffice": fieldoffice,
                "fieldofficecode": fieldofficecode,
                "govauthority": govauthority,
                "hih2s": hih2s,
                "hisitp": hisitp,
                "idrecelvhistory": idrecelvhistory,
                "latitude": latitude,
                "latlongdatum": latlongdatum,
                "latlongsource": latlongsource,
                "lease": lease,
                "leasecode": leasecode,
                "legalsurveyloc": legalsurveyloc,
                "legalsurveysubtyp": legalsurveysubtyp,
                "legalsurveytyp": legalsurveytyp,
                "localtimezone": localtimezone,
                "locationnote": locationnote,
                "locationref": locationref,
                "locationsensitive": locationsensitive,
                "locationtyp": locationtyp,
                "longitude": longitude,
                "nsdist": nsdist,
                "nsflag": nsflag,
                "operated": operated,
                "operator": operator,
                "operatorcode": operatorcode,
                "padcode": padcode,
                "padname": padname,
                "platform": platform,
                "primaryfluiddes": primaryfluiddes,
                "problemflag": problemflag,
                "riskclass": riskclass,
                "slot": slot,
                "stateprov": stateprov,
                "surfacerights": surfacerights,
                "towndist": towndist,
                "townflag": townflag,
                "townname": townname,
                "townstateprov": townstateprov,
                "userboolean1": userboolean1,
                "userboolean2": userboolean2,
                "userboolean3": userboolean3,
                "userboolean4": userboolean4,
                "userboolean5": userboolean5,
                "userdttm1": userdttm1,
                "userdttm2": userdttm2,
                "userdttm3": userdttm3,
                "userdttm4": userdttm4,
                "userdttm5": userdttm5,
                "usernum1": usernum1,
                "usernum2": usernum2,
                "usernum3": usernum3,
                "usernum4": usernum4,
                "usernum5": usernum5,
                "usernum6": usernum6,
                "usertxt1": usertxt1,
                "usertxt10": usertxt10,
                "usertxt2": usertxt2,
                "usertxt3": usertxt3,
                "usertxt4": usertxt4,
                "usertxt5": usertxt5,
                "usertxt6": usertxt6,
                "usertxt7": usertxt7,
                "usertxt8": usertxt8,
                "usertxt9": usertxt9,
                "utmgridzone": utmgridzone,
                "utmsource": utmsource,
                "utmx": utmx,
                "utmy": utmy,
                "waterdepth": waterdepth,
                "waterdepthref": waterdepthref,
                "wellclass": wellclass,
                "wellconfig": wellconfig,
                "wellida": wellida,
                "wellidb": wellidb,
                "wellidc": wellidc,
                "wellidd": wellidd,
                "wellide": wellide,
                "welllicensee": welllicensee,
                "welllicenseno": welllicenseno,
                "wellname": wellname,
                "welltyp1": welltyp1,
                "welltyp2": welltyp2,
            }
    
    idwell: MetaOapg.properties.idwell
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["agent"]) -> MetaOapg.properties.agent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["area"]) -> MetaOapg.properties.area: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["basin"]) -> MetaOapg.properties.basin: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["basincode"]) -> MetaOapg.properties.basincode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["com"]) -> MetaOapg.properties.com: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["country"]) -> MetaOapg.properties.country: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["county"]) -> MetaOapg.properties.county: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currentwellstatus1"]) -> MetaOapg.properties.currentwellstatus1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currentwellstatus2"]) -> MetaOapg.properties.currentwellstatus2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["directionstowell"]) -> MetaOapg.properties.directionstowell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["district"]) -> MetaOapg.properties.district: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["division"]) -> MetaOapg.properties.division: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["divisioncode"]) -> MetaOapg.properties.divisioncode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmabandon"]) -> MetaOapg.properties.dttmabandon: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmfirstprod"]) -> MetaOapg.properties.dttmfirstprod: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmrr"]) -> MetaOapg.properties.dttmrr: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmspud"]) -> MetaOapg.properties.dttmspud: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmwellclass"]) -> MetaOapg.properties.dttmwellclass: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmwelllic"]) -> MetaOapg.properties.dttmwelllic: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["elvcasflange"]) -> MetaOapg.properties.elvcasflange: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["elvground"]) -> MetaOapg.properties.elvground: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["elvlat"]) -> MetaOapg.properties.elvlat: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["elvmudline"]) -> MetaOapg.properties.elvmudline: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["elvorigkb"]) -> MetaOapg.properties.elvorigkb: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["elvtubhead"]) -> MetaOapg.properties.elvtubhead: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["environmentsensitive"]) -> MetaOapg.properties.environmentsensitive: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ewdist"]) -> MetaOapg.properties.ewdist: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ewflag"]) -> MetaOapg.properties.ewflag: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fieldcode"]) -> MetaOapg.properties.fieldcode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fieldname"]) -> MetaOapg.properties.fieldname: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fieldoffice"]) -> MetaOapg.properties.fieldoffice: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fieldofficecode"]) -> MetaOapg.properties.fieldofficecode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["govauthority"]) -> MetaOapg.properties.govauthority: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hih2s"]) -> MetaOapg.properties.hih2s: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hisitp"]) -> MetaOapg.properties.hisitp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecelvhistory"]) -> MetaOapg.properties.idrecelvhistory: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["latitude"]) -> MetaOapg.properties.latitude: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["latlongdatum"]) -> MetaOapg.properties.latlongdatum: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["latlongsource"]) -> MetaOapg.properties.latlongsource: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lease"]) -> MetaOapg.properties.lease: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["leasecode"]) -> MetaOapg.properties.leasecode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["legalsurveyloc"]) -> MetaOapg.properties.legalsurveyloc: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["legalsurveysubtyp"]) -> MetaOapg.properties.legalsurveysubtyp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["legalsurveytyp"]) -> MetaOapg.properties.legalsurveytyp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["localtimezone"]) -> MetaOapg.properties.localtimezone: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["locationnote"]) -> MetaOapg.properties.locationnote: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["locationref"]) -> MetaOapg.properties.locationref: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["locationsensitive"]) -> MetaOapg.properties.locationsensitive: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["locationtyp"]) -> MetaOapg.properties.locationtyp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["longitude"]) -> MetaOapg.properties.longitude: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nsdist"]) -> MetaOapg.properties.nsdist: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nsflag"]) -> MetaOapg.properties.nsflag: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["operated"]) -> MetaOapg.properties.operated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["operator"]) -> MetaOapg.properties.operator: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["operatorcode"]) -> MetaOapg.properties.operatorcode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["padcode"]) -> MetaOapg.properties.padcode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["padname"]) -> MetaOapg.properties.padname: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["platform"]) -> MetaOapg.properties.platform: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["primaryfluiddes"]) -> MetaOapg.properties.primaryfluiddes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["problemflag"]) -> MetaOapg.properties.problemflag: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["riskclass"]) -> MetaOapg.properties.riskclass: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["slot"]) -> MetaOapg.properties.slot: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stateprov"]) -> MetaOapg.properties.stateprov: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["surfacerights"]) -> MetaOapg.properties.surfacerights: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["towndist"]) -> MetaOapg.properties.towndist: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["townflag"]) -> MetaOapg.properties.townflag: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["townname"]) -> MetaOapg.properties.townname: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["townstateprov"]) -> MetaOapg.properties.townstateprov: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userboolean1"]) -> MetaOapg.properties.userboolean1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userboolean2"]) -> MetaOapg.properties.userboolean2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userboolean3"]) -> MetaOapg.properties.userboolean3: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userboolean4"]) -> MetaOapg.properties.userboolean4: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userboolean5"]) -> MetaOapg.properties.userboolean5: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userdttm1"]) -> MetaOapg.properties.userdttm1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userdttm2"]) -> MetaOapg.properties.userdttm2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userdttm3"]) -> MetaOapg.properties.userdttm3: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userdttm4"]) -> MetaOapg.properties.userdttm4: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userdttm5"]) -> MetaOapg.properties.userdttm5: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usernum1"]) -> MetaOapg.properties.usernum1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usernum2"]) -> MetaOapg.properties.usernum2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usernum3"]) -> MetaOapg.properties.usernum3: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usernum4"]) -> MetaOapg.properties.usernum4: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usernum5"]) -> MetaOapg.properties.usernum5: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usernum6"]) -> MetaOapg.properties.usernum6: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usertxt1"]) -> MetaOapg.properties.usertxt1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usertxt10"]) -> MetaOapg.properties.usertxt10: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usertxt2"]) -> MetaOapg.properties.usertxt2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usertxt3"]) -> MetaOapg.properties.usertxt3: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usertxt4"]) -> MetaOapg.properties.usertxt4: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usertxt5"]) -> MetaOapg.properties.usertxt5: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usertxt6"]) -> MetaOapg.properties.usertxt6: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usertxt7"]) -> MetaOapg.properties.usertxt7: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usertxt8"]) -> MetaOapg.properties.usertxt8: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usertxt9"]) -> MetaOapg.properties.usertxt9: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["utmgridzone"]) -> MetaOapg.properties.utmgridzone: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["utmsource"]) -> MetaOapg.properties.utmsource: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["utmx"]) -> MetaOapg.properties.utmx: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["utmy"]) -> MetaOapg.properties.utmy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["waterdepth"]) -> MetaOapg.properties.waterdepth: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["waterdepthref"]) -> MetaOapg.properties.waterdepthref: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wellclass"]) -> MetaOapg.properties.wellclass: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wellconfig"]) -> MetaOapg.properties.wellconfig: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wellida"]) -> MetaOapg.properties.wellida: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wellidb"]) -> MetaOapg.properties.wellidb: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wellidc"]) -> MetaOapg.properties.wellidc: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wellidd"]) -> MetaOapg.properties.wellidd: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wellide"]) -> MetaOapg.properties.wellide: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["welllicensee"]) -> MetaOapg.properties.welllicensee: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["welllicenseno"]) -> MetaOapg.properties.welllicenseno: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wellname"]) -> MetaOapg.properties.wellname: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["welltyp1"]) -> MetaOapg.properties.welltyp1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["welltyp2"]) -> MetaOapg.properties.welltyp2: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idwell", "agent", "area", "basin", "basincode", "com", "country", "county", "currentwellstatus1", "currentwellstatus2", "directionstowell", "district", "division", "divisioncode", "dttmabandon", "dttmfirstprod", "dttmrr", "dttmspud", "dttmwellclass", "dttmwelllic", "elvcasflange", "elvground", "elvlat", "elvmudline", "elvorigkb", "elvtubhead", "environmentsensitive", "ewdist", "ewflag", "fieldcode", "fieldname", "fieldoffice", "fieldofficecode", "govauthority", "hih2s", "hisitp", "idrecelvhistory", "latitude", "latlongdatum", "latlongsource", "lease", "leasecode", "legalsurveyloc", "legalsurveysubtyp", "legalsurveytyp", "localtimezone", "locationnote", "locationref", "locationsensitive", "locationtyp", "longitude", "nsdist", "nsflag", "operated", "operator", "operatorcode", "padcode", "padname", "platform", "primaryfluiddes", "problemflag", "riskclass", "slot", "stateprov", "surfacerights", "towndist", "townflag", "townname", "townstateprov", "userboolean1", "userboolean2", "userboolean3", "userboolean4", "userboolean5", "userdttm1", "userdttm2", "userdttm3", "userdttm4", "userdttm5", "usernum1", "usernum2", "usernum3", "usernum4", "usernum5", "usernum6", "usertxt1", "usertxt10", "usertxt2", "usertxt3", "usertxt4", "usertxt5", "usertxt6", "usertxt7", "usertxt8", "usertxt9", "utmgridzone", "utmsource", "utmx", "utmy", "waterdepth", "waterdepthref", "wellclass", "wellconfig", "wellida", "wellidb", "wellidc", "wellidd", "wellide", "welllicensee", "welllicenseno", "wellname", "welltyp1", "welltyp2", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["agent"]) -> typing.Union[MetaOapg.properties.agent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["area"]) -> typing.Union[MetaOapg.properties.area, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["basin"]) -> typing.Union[MetaOapg.properties.basin, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["basincode"]) -> typing.Union[MetaOapg.properties.basincode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["com"]) -> typing.Union[MetaOapg.properties.com, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["country"]) -> typing.Union[MetaOapg.properties.country, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["county"]) -> typing.Union[MetaOapg.properties.county, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currentwellstatus1"]) -> typing.Union[MetaOapg.properties.currentwellstatus1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currentwellstatus2"]) -> typing.Union[MetaOapg.properties.currentwellstatus2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["directionstowell"]) -> typing.Union[MetaOapg.properties.directionstowell, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["district"]) -> typing.Union[MetaOapg.properties.district, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["division"]) -> typing.Union[MetaOapg.properties.division, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["divisioncode"]) -> typing.Union[MetaOapg.properties.divisioncode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmabandon"]) -> typing.Union[MetaOapg.properties.dttmabandon, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmfirstprod"]) -> typing.Union[MetaOapg.properties.dttmfirstprod, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmrr"]) -> typing.Union[MetaOapg.properties.dttmrr, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmspud"]) -> typing.Union[MetaOapg.properties.dttmspud, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmwellclass"]) -> typing.Union[MetaOapg.properties.dttmwellclass, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmwelllic"]) -> typing.Union[MetaOapg.properties.dttmwelllic, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["elvcasflange"]) -> typing.Union[MetaOapg.properties.elvcasflange, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["elvground"]) -> typing.Union[MetaOapg.properties.elvground, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["elvlat"]) -> typing.Union[MetaOapg.properties.elvlat, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["elvmudline"]) -> typing.Union[MetaOapg.properties.elvmudline, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["elvorigkb"]) -> typing.Union[MetaOapg.properties.elvorigkb, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["elvtubhead"]) -> typing.Union[MetaOapg.properties.elvtubhead, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["environmentsensitive"]) -> typing.Union[MetaOapg.properties.environmentsensitive, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ewdist"]) -> typing.Union[MetaOapg.properties.ewdist, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ewflag"]) -> typing.Union[MetaOapg.properties.ewflag, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fieldcode"]) -> typing.Union[MetaOapg.properties.fieldcode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fieldname"]) -> typing.Union[MetaOapg.properties.fieldname, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fieldoffice"]) -> typing.Union[MetaOapg.properties.fieldoffice, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fieldofficecode"]) -> typing.Union[MetaOapg.properties.fieldofficecode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["govauthority"]) -> typing.Union[MetaOapg.properties.govauthority, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hih2s"]) -> typing.Union[MetaOapg.properties.hih2s, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hisitp"]) -> typing.Union[MetaOapg.properties.hisitp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecelvhistory"]) -> typing.Union[MetaOapg.properties.idrecelvhistory, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["latitude"]) -> typing.Union[MetaOapg.properties.latitude, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["latlongdatum"]) -> typing.Union[MetaOapg.properties.latlongdatum, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["latlongsource"]) -> typing.Union[MetaOapg.properties.latlongsource, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lease"]) -> typing.Union[MetaOapg.properties.lease, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["leasecode"]) -> typing.Union[MetaOapg.properties.leasecode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["legalsurveyloc"]) -> typing.Union[MetaOapg.properties.legalsurveyloc, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["legalsurveysubtyp"]) -> typing.Union[MetaOapg.properties.legalsurveysubtyp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["legalsurveytyp"]) -> typing.Union[MetaOapg.properties.legalsurveytyp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["localtimezone"]) -> typing.Union[MetaOapg.properties.localtimezone, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["locationnote"]) -> typing.Union[MetaOapg.properties.locationnote, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["locationref"]) -> typing.Union[MetaOapg.properties.locationref, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["locationsensitive"]) -> typing.Union[MetaOapg.properties.locationsensitive, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["locationtyp"]) -> typing.Union[MetaOapg.properties.locationtyp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["longitude"]) -> typing.Union[MetaOapg.properties.longitude, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nsdist"]) -> typing.Union[MetaOapg.properties.nsdist, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nsflag"]) -> typing.Union[MetaOapg.properties.nsflag, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["operated"]) -> typing.Union[MetaOapg.properties.operated, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["operator"]) -> typing.Union[MetaOapg.properties.operator, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["operatorcode"]) -> typing.Union[MetaOapg.properties.operatorcode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["padcode"]) -> typing.Union[MetaOapg.properties.padcode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["padname"]) -> typing.Union[MetaOapg.properties.padname, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["platform"]) -> typing.Union[MetaOapg.properties.platform, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["primaryfluiddes"]) -> typing.Union[MetaOapg.properties.primaryfluiddes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["problemflag"]) -> typing.Union[MetaOapg.properties.problemflag, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["riskclass"]) -> typing.Union[MetaOapg.properties.riskclass, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["slot"]) -> typing.Union[MetaOapg.properties.slot, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stateprov"]) -> typing.Union[MetaOapg.properties.stateprov, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["surfacerights"]) -> typing.Union[MetaOapg.properties.surfacerights, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["towndist"]) -> typing.Union[MetaOapg.properties.towndist, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["townflag"]) -> typing.Union[MetaOapg.properties.townflag, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["townname"]) -> typing.Union[MetaOapg.properties.townname, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["townstateprov"]) -> typing.Union[MetaOapg.properties.townstateprov, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userboolean1"]) -> typing.Union[MetaOapg.properties.userboolean1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userboolean2"]) -> typing.Union[MetaOapg.properties.userboolean2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userboolean3"]) -> typing.Union[MetaOapg.properties.userboolean3, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userboolean4"]) -> typing.Union[MetaOapg.properties.userboolean4, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userboolean5"]) -> typing.Union[MetaOapg.properties.userboolean5, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userdttm1"]) -> typing.Union[MetaOapg.properties.userdttm1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userdttm2"]) -> typing.Union[MetaOapg.properties.userdttm2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userdttm3"]) -> typing.Union[MetaOapg.properties.userdttm3, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userdttm4"]) -> typing.Union[MetaOapg.properties.userdttm4, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userdttm5"]) -> typing.Union[MetaOapg.properties.userdttm5, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usernum1"]) -> typing.Union[MetaOapg.properties.usernum1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usernum2"]) -> typing.Union[MetaOapg.properties.usernum2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usernum3"]) -> typing.Union[MetaOapg.properties.usernum3, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usernum4"]) -> typing.Union[MetaOapg.properties.usernum4, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usernum5"]) -> typing.Union[MetaOapg.properties.usernum5, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usernum6"]) -> typing.Union[MetaOapg.properties.usernum6, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usertxt1"]) -> typing.Union[MetaOapg.properties.usertxt1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usertxt10"]) -> typing.Union[MetaOapg.properties.usertxt10, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usertxt2"]) -> typing.Union[MetaOapg.properties.usertxt2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usertxt3"]) -> typing.Union[MetaOapg.properties.usertxt3, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usertxt4"]) -> typing.Union[MetaOapg.properties.usertxt4, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usertxt5"]) -> typing.Union[MetaOapg.properties.usertxt5, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usertxt6"]) -> typing.Union[MetaOapg.properties.usertxt6, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usertxt7"]) -> typing.Union[MetaOapg.properties.usertxt7, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usertxt8"]) -> typing.Union[MetaOapg.properties.usertxt8, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usertxt9"]) -> typing.Union[MetaOapg.properties.usertxt9, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["utmgridzone"]) -> typing.Union[MetaOapg.properties.utmgridzone, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["utmsource"]) -> typing.Union[MetaOapg.properties.utmsource, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["utmx"]) -> typing.Union[MetaOapg.properties.utmx, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["utmy"]) -> typing.Union[MetaOapg.properties.utmy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["waterdepth"]) -> typing.Union[MetaOapg.properties.waterdepth, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["waterdepthref"]) -> typing.Union[MetaOapg.properties.waterdepthref, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wellclass"]) -> typing.Union[MetaOapg.properties.wellclass, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wellconfig"]) -> typing.Union[MetaOapg.properties.wellconfig, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wellida"]) -> typing.Union[MetaOapg.properties.wellida, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wellidb"]) -> typing.Union[MetaOapg.properties.wellidb, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wellidc"]) -> typing.Union[MetaOapg.properties.wellidc, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wellidd"]) -> typing.Union[MetaOapg.properties.wellidd, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wellide"]) -> typing.Union[MetaOapg.properties.wellide, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["welllicensee"]) -> typing.Union[MetaOapg.properties.welllicensee, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["welllicenseno"]) -> typing.Union[MetaOapg.properties.welllicenseno, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wellname"]) -> typing.Union[MetaOapg.properties.wellname, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["welltyp1"]) -> typing.Union[MetaOapg.properties.welltyp1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["welltyp2"]) -> typing.Union[MetaOapg.properties.welltyp2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idwell", "agent", "area", "basin", "basincode", "com", "country", "county", "currentwellstatus1", "currentwellstatus2", "directionstowell", "district", "division", "divisioncode", "dttmabandon", "dttmfirstprod", "dttmrr", "dttmspud", "dttmwellclass", "dttmwelllic", "elvcasflange", "elvground", "elvlat", "elvmudline", "elvorigkb", "elvtubhead", "environmentsensitive", "ewdist", "ewflag", "fieldcode", "fieldname", "fieldoffice", "fieldofficecode", "govauthority", "hih2s", "hisitp", "idrecelvhistory", "latitude", "latlongdatum", "latlongsource", "lease", "leasecode", "legalsurveyloc", "legalsurveysubtyp", "legalsurveytyp", "localtimezone", "locationnote", "locationref", "locationsensitive", "locationtyp", "longitude", "nsdist", "nsflag", "operated", "operator", "operatorcode", "padcode", "padname", "platform", "primaryfluiddes", "problemflag", "riskclass", "slot", "stateprov", "surfacerights", "towndist", "townflag", "townname", "townstateprov", "userboolean1", "userboolean2", "userboolean3", "userboolean4", "userboolean5", "userdttm1", "userdttm2", "userdttm3", "userdttm4", "userdttm5", "usernum1", "usernum2", "usernum3", "usernum4", "usernum5", "usernum6", "usertxt1", "usertxt10", "usertxt2", "usertxt3", "usertxt4", "usertxt5", "usertxt6", "usertxt7", "usertxt8", "usertxt9", "utmgridzone", "utmsource", "utmx", "utmy", "waterdepth", "waterdepthref", "wellclass", "wellconfig", "wellida", "wellidb", "wellidc", "wellidd", "wellide", "welllicensee", "welllicenseno", "wellname", "welltyp1", "welltyp2", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idwell: typing.Union[MetaOapg.properties.idwell, str, ],
        agent: typing.Union[MetaOapg.properties.agent, str, schemas.Unset] = schemas.unset,
        area: typing.Union[MetaOapg.properties.area, str, schemas.Unset] = schemas.unset,
        basin: typing.Union[MetaOapg.properties.basin, str, schemas.Unset] = schemas.unset,
        basincode: typing.Union[MetaOapg.properties.basincode, str, schemas.Unset] = schemas.unset,
        com: typing.Union[MetaOapg.properties.com, str, schemas.Unset] = schemas.unset,
        country: typing.Union[MetaOapg.properties.country, str, schemas.Unset] = schemas.unset,
        county: typing.Union[MetaOapg.properties.county, str, schemas.Unset] = schemas.unset,
        currentwellstatus1: typing.Union[MetaOapg.properties.currentwellstatus1, str, schemas.Unset] = schemas.unset,
        currentwellstatus2: typing.Union[MetaOapg.properties.currentwellstatus2, str, schemas.Unset] = schemas.unset,
        directionstowell: typing.Union[MetaOapg.properties.directionstowell, str, schemas.Unset] = schemas.unset,
        district: typing.Union[MetaOapg.properties.district, str, schemas.Unset] = schemas.unset,
        division: typing.Union[MetaOapg.properties.division, str, schemas.Unset] = schemas.unset,
        divisioncode: typing.Union[MetaOapg.properties.divisioncode, str, schemas.Unset] = schemas.unset,
        dttmabandon: typing.Union[MetaOapg.properties.dttmabandon, str, datetime, schemas.Unset] = schemas.unset,
        dttmfirstprod: typing.Union[MetaOapg.properties.dttmfirstprod, str, datetime, schemas.Unset] = schemas.unset,
        dttmrr: typing.Union[MetaOapg.properties.dttmrr, str, datetime, schemas.Unset] = schemas.unset,
        dttmspud: typing.Union[MetaOapg.properties.dttmspud, str, datetime, schemas.Unset] = schemas.unset,
        dttmwellclass: typing.Union[MetaOapg.properties.dttmwellclass, str, datetime, schemas.Unset] = schemas.unset,
        dttmwelllic: typing.Union[MetaOapg.properties.dttmwelllic, str, datetime, schemas.Unset] = schemas.unset,
        elvcasflange: typing.Union[MetaOapg.properties.elvcasflange, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        elvground: typing.Union[MetaOapg.properties.elvground, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        elvlat: typing.Union[MetaOapg.properties.elvlat, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        elvmudline: typing.Union[MetaOapg.properties.elvmudline, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        elvorigkb: typing.Union[MetaOapg.properties.elvorigkb, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        elvtubhead: typing.Union[MetaOapg.properties.elvtubhead, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        environmentsensitive: typing.Union[MetaOapg.properties.environmentsensitive, bool, schemas.Unset] = schemas.unset,
        ewdist: typing.Union[MetaOapg.properties.ewdist, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        ewflag: typing.Union[MetaOapg.properties.ewflag, str, schemas.Unset] = schemas.unset,
        fieldcode: typing.Union[MetaOapg.properties.fieldcode, str, schemas.Unset] = schemas.unset,
        fieldname: typing.Union[MetaOapg.properties.fieldname, str, schemas.Unset] = schemas.unset,
        fieldoffice: typing.Union[MetaOapg.properties.fieldoffice, str, schemas.Unset] = schemas.unset,
        fieldofficecode: typing.Union[MetaOapg.properties.fieldofficecode, str, schemas.Unset] = schemas.unset,
        govauthority: typing.Union[MetaOapg.properties.govauthority, str, schemas.Unset] = schemas.unset,
        hih2s: typing.Union[MetaOapg.properties.hih2s, bool, schemas.Unset] = schemas.unset,
        hisitp: typing.Union[MetaOapg.properties.hisitp, bool, schemas.Unset] = schemas.unset,
        idrecelvhistory: typing.Union[MetaOapg.properties.idrecelvhistory, str, schemas.Unset] = schemas.unset,
        latitude: typing.Union[MetaOapg.properties.latitude, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        latlongdatum: typing.Union[MetaOapg.properties.latlongdatum, str, schemas.Unset] = schemas.unset,
        latlongsource: typing.Union[MetaOapg.properties.latlongsource, str, schemas.Unset] = schemas.unset,
        lease: typing.Union[MetaOapg.properties.lease, str, schemas.Unset] = schemas.unset,
        leasecode: typing.Union[MetaOapg.properties.leasecode, str, schemas.Unset] = schemas.unset,
        legalsurveyloc: typing.Union[MetaOapg.properties.legalsurveyloc, str, schemas.Unset] = schemas.unset,
        legalsurveysubtyp: typing.Union[MetaOapg.properties.legalsurveysubtyp, str, schemas.Unset] = schemas.unset,
        legalsurveytyp: typing.Union[MetaOapg.properties.legalsurveytyp, str, schemas.Unset] = schemas.unset,
        localtimezone: typing.Union[MetaOapg.properties.localtimezone, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        locationnote: typing.Union[MetaOapg.properties.locationnote, str, schemas.Unset] = schemas.unset,
        locationref: typing.Union[MetaOapg.properties.locationref, str, schemas.Unset] = schemas.unset,
        locationsensitive: typing.Union[MetaOapg.properties.locationsensitive, bool, schemas.Unset] = schemas.unset,
        locationtyp: typing.Union[MetaOapg.properties.locationtyp, str, schemas.Unset] = schemas.unset,
        longitude: typing.Union[MetaOapg.properties.longitude, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        nsdist: typing.Union[MetaOapg.properties.nsdist, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        nsflag: typing.Union[MetaOapg.properties.nsflag, str, schemas.Unset] = schemas.unset,
        operated: typing.Union[MetaOapg.properties.operated, bool, schemas.Unset] = schemas.unset,
        operator: typing.Union[MetaOapg.properties.operator, str, schemas.Unset] = schemas.unset,
        operatorcode: typing.Union[MetaOapg.properties.operatorcode, str, schemas.Unset] = schemas.unset,
        padcode: typing.Union[MetaOapg.properties.padcode, str, schemas.Unset] = schemas.unset,
        padname: typing.Union[MetaOapg.properties.padname, str, schemas.Unset] = schemas.unset,
        platform: typing.Union[MetaOapg.properties.platform, str, schemas.Unset] = schemas.unset,
        primaryfluiddes: typing.Union[MetaOapg.properties.primaryfluiddes, str, schemas.Unset] = schemas.unset,
        problemflag: typing.Union[MetaOapg.properties.problemflag, bool, schemas.Unset] = schemas.unset,
        riskclass: typing.Union[MetaOapg.properties.riskclass, str, schemas.Unset] = schemas.unset,
        slot: typing.Union[MetaOapg.properties.slot, str, schemas.Unset] = schemas.unset,
        stateprov: typing.Union[MetaOapg.properties.stateprov, str, schemas.Unset] = schemas.unset,
        surfacerights: typing.Union[MetaOapg.properties.surfacerights, str, schemas.Unset] = schemas.unset,
        towndist: typing.Union[MetaOapg.properties.towndist, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        townflag: typing.Union[MetaOapg.properties.townflag, str, schemas.Unset] = schemas.unset,
        townname: typing.Union[MetaOapg.properties.townname, str, schemas.Unset] = schemas.unset,
        townstateprov: typing.Union[MetaOapg.properties.townstateprov, str, schemas.Unset] = schemas.unset,
        userboolean1: typing.Union[MetaOapg.properties.userboolean1, bool, schemas.Unset] = schemas.unset,
        userboolean2: typing.Union[MetaOapg.properties.userboolean2, bool, schemas.Unset] = schemas.unset,
        userboolean3: typing.Union[MetaOapg.properties.userboolean3, bool, schemas.Unset] = schemas.unset,
        userboolean4: typing.Union[MetaOapg.properties.userboolean4, bool, schemas.Unset] = schemas.unset,
        userboolean5: typing.Union[MetaOapg.properties.userboolean5, bool, schemas.Unset] = schemas.unset,
        userdttm1: typing.Union[MetaOapg.properties.userdttm1, str, datetime, schemas.Unset] = schemas.unset,
        userdttm2: typing.Union[MetaOapg.properties.userdttm2, str, datetime, schemas.Unset] = schemas.unset,
        userdttm3: typing.Union[MetaOapg.properties.userdttm3, str, datetime, schemas.Unset] = schemas.unset,
        userdttm4: typing.Union[MetaOapg.properties.userdttm4, str, datetime, schemas.Unset] = schemas.unset,
        userdttm5: typing.Union[MetaOapg.properties.userdttm5, str, datetime, schemas.Unset] = schemas.unset,
        usernum1: typing.Union[MetaOapg.properties.usernum1, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        usernum2: typing.Union[MetaOapg.properties.usernum2, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        usernum3: typing.Union[MetaOapg.properties.usernum3, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        usernum4: typing.Union[MetaOapg.properties.usernum4, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        usernum5: typing.Union[MetaOapg.properties.usernum5, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        usernum6: typing.Union[MetaOapg.properties.usernum6, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        usertxt1: typing.Union[MetaOapg.properties.usertxt1, str, schemas.Unset] = schemas.unset,
        usertxt10: typing.Union[MetaOapg.properties.usertxt10, str, schemas.Unset] = schemas.unset,
        usertxt2: typing.Union[MetaOapg.properties.usertxt2, str, schemas.Unset] = schemas.unset,
        usertxt3: typing.Union[MetaOapg.properties.usertxt3, str, schemas.Unset] = schemas.unset,
        usertxt4: typing.Union[MetaOapg.properties.usertxt4, str, schemas.Unset] = schemas.unset,
        usertxt5: typing.Union[MetaOapg.properties.usertxt5, str, schemas.Unset] = schemas.unset,
        usertxt6: typing.Union[MetaOapg.properties.usertxt6, str, schemas.Unset] = schemas.unset,
        usertxt7: typing.Union[MetaOapg.properties.usertxt7, str, schemas.Unset] = schemas.unset,
        usertxt8: typing.Union[MetaOapg.properties.usertxt8, str, schemas.Unset] = schemas.unset,
        usertxt9: typing.Union[MetaOapg.properties.usertxt9, str, schemas.Unset] = schemas.unset,
        utmgridzone: typing.Union[MetaOapg.properties.utmgridzone, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        utmsource: typing.Union[MetaOapg.properties.utmsource, str, schemas.Unset] = schemas.unset,
        utmx: typing.Union[MetaOapg.properties.utmx, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        utmy: typing.Union[MetaOapg.properties.utmy, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        waterdepth: typing.Union[MetaOapg.properties.waterdepth, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        waterdepthref: typing.Union[MetaOapg.properties.waterdepthref, str, schemas.Unset] = schemas.unset,
        wellclass: typing.Union[MetaOapg.properties.wellclass, str, schemas.Unset] = schemas.unset,
        wellconfig: typing.Union[MetaOapg.properties.wellconfig, str, schemas.Unset] = schemas.unset,
        wellida: typing.Union[MetaOapg.properties.wellida, str, schemas.Unset] = schemas.unset,
        wellidb: typing.Union[MetaOapg.properties.wellidb, str, schemas.Unset] = schemas.unset,
        wellidc: typing.Union[MetaOapg.properties.wellidc, str, schemas.Unset] = schemas.unset,
        wellidd: typing.Union[MetaOapg.properties.wellidd, str, schemas.Unset] = schemas.unset,
        wellide: typing.Union[MetaOapg.properties.wellide, str, schemas.Unset] = schemas.unset,
        welllicensee: typing.Union[MetaOapg.properties.welllicensee, str, schemas.Unset] = schemas.unset,
        welllicenseno: typing.Union[MetaOapg.properties.welllicenseno, str, schemas.Unset] = schemas.unset,
        wellname: typing.Union[MetaOapg.properties.wellname, str, schemas.Unset] = schemas.unset,
        welltyp1: typing.Union[MetaOapg.properties.welltyp1, str, schemas.Unset] = schemas.unset,
        welltyp2: typing.Union[MetaOapg.properties.welltyp2, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'WellHeaderData':
        return super().__new__(
            cls,
            *args,
            idwell=idwell,
            agent=agent,
            area=area,
            basin=basin,
            basincode=basincode,
            com=com,
            country=country,
            county=county,
            currentwellstatus1=currentwellstatus1,
            currentwellstatus2=currentwellstatus2,
            directionstowell=directionstowell,
            district=district,
            division=division,
            divisioncode=divisioncode,
            dttmabandon=dttmabandon,
            dttmfirstprod=dttmfirstprod,
            dttmrr=dttmrr,
            dttmspud=dttmspud,
            dttmwellclass=dttmwellclass,
            dttmwelllic=dttmwelllic,
            elvcasflange=elvcasflange,
            elvground=elvground,
            elvlat=elvlat,
            elvmudline=elvmudline,
            elvorigkb=elvorigkb,
            elvtubhead=elvtubhead,
            environmentsensitive=environmentsensitive,
            ewdist=ewdist,
            ewflag=ewflag,
            fieldcode=fieldcode,
            fieldname=fieldname,
            fieldoffice=fieldoffice,
            fieldofficecode=fieldofficecode,
            govauthority=govauthority,
            hih2s=hih2s,
            hisitp=hisitp,
            idrecelvhistory=idrecelvhistory,
            latitude=latitude,
            latlongdatum=latlongdatum,
            latlongsource=latlongsource,
            lease=lease,
            leasecode=leasecode,
            legalsurveyloc=legalsurveyloc,
            legalsurveysubtyp=legalsurveysubtyp,
            legalsurveytyp=legalsurveytyp,
            localtimezone=localtimezone,
            locationnote=locationnote,
            locationref=locationref,
            locationsensitive=locationsensitive,
            locationtyp=locationtyp,
            longitude=longitude,
            nsdist=nsdist,
            nsflag=nsflag,
            operated=operated,
            operator=operator,
            operatorcode=operatorcode,
            padcode=padcode,
            padname=padname,
            platform=platform,
            primaryfluiddes=primaryfluiddes,
            problemflag=problemflag,
            riskclass=riskclass,
            slot=slot,
            stateprov=stateprov,
            surfacerights=surfacerights,
            towndist=towndist,
            townflag=townflag,
            townname=townname,
            townstateprov=townstateprov,
            userboolean1=userboolean1,
            userboolean2=userboolean2,
            userboolean3=userboolean3,
            userboolean4=userboolean4,
            userboolean5=userboolean5,
            userdttm1=userdttm1,
            userdttm2=userdttm2,
            userdttm3=userdttm3,
            userdttm4=userdttm4,
            userdttm5=userdttm5,
            usernum1=usernum1,
            usernum2=usernum2,
            usernum3=usernum3,
            usernum4=usernum4,
            usernum5=usernum5,
            usernum6=usernum6,
            usertxt1=usertxt1,
            usertxt10=usertxt10,
            usertxt2=usertxt2,
            usertxt3=usertxt3,
            usertxt4=usertxt4,
            usertxt5=usertxt5,
            usertxt6=usertxt6,
            usertxt7=usertxt7,
            usertxt8=usertxt8,
            usertxt9=usertxt9,
            utmgridzone=utmgridzone,
            utmsource=utmsource,
            utmx=utmx,
            utmy=utmy,
            waterdepth=waterdepth,
            waterdepthref=waterdepthref,
            wellclass=wellclass,
            wellconfig=wellconfig,
            wellida=wellida,
            wellidb=wellidb,
            wellidc=wellidc,
            wellidd=wellidd,
            wellide=wellide,
            welllicensee=welllicensee,
            welllicenseno=welllicenseno,
            wellname=wellname,
            welltyp1=welltyp1,
            welltyp2=welltyp2,
            _configuration=_configuration,
            **kwargs,
        )
