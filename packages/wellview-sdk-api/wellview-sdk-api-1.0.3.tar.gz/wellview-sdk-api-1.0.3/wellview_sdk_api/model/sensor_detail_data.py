# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class SensorDetailData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idrec",
            "idwell",
        }
        
        class properties:
            idrec = schemas.StrSchema
            idwell = schemas.StrSchema
            connecttyp = schemas.StrSchema
            dttmlastcal = schemas.DateTimeSchema
            idrecparent = schemas.StrSchema
            lengthwire = schemas.NumberSchema
            make = schemas.StrSchema
            model = schemas.StrSchema
            presaccuracy = schemas.NumberSchema
            presmax = schemas.NumberSchema
            purpose = schemas.StrSchema
            refid = schemas.StrSchema
            sn = schemas.StrSchema
            tempaccuracy = schemas.NumberSchema
            tempmax = schemas.NumberSchema
            typ = schemas.StrSchema
            __annotations__ = {
                "idrec": idrec,
                "idwell": idwell,
                "connecttyp": connecttyp,
                "dttmlastcal": dttmlastcal,
                "idrecparent": idrecparent,
                "lengthwire": lengthwire,
                "make": make,
                "model": model,
                "presaccuracy": presaccuracy,
                "presmax": presmax,
                "purpose": purpose,
                "refid": refid,
                "sn": sn,
                "tempaccuracy": tempaccuracy,
                "tempmax": tempmax,
                "typ": typ,
            }
    
    idrec: MetaOapg.properties.idrec
    idwell: MetaOapg.properties.idwell
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["connecttyp"]) -> MetaOapg.properties.connecttyp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmlastcal"]) -> MetaOapg.properties.dttmlastcal: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecparent"]) -> MetaOapg.properties.idrecparent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lengthwire"]) -> MetaOapg.properties.lengthwire: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["make"]) -> MetaOapg.properties.make: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["model"]) -> MetaOapg.properties.model: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["presaccuracy"]) -> MetaOapg.properties.presaccuracy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["presmax"]) -> MetaOapg.properties.presmax: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["purpose"]) -> MetaOapg.properties.purpose: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["refid"]) -> MetaOapg.properties.refid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sn"]) -> MetaOapg.properties.sn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tempaccuracy"]) -> MetaOapg.properties.tempaccuracy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tempmax"]) -> MetaOapg.properties.tempmax: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["typ"]) -> MetaOapg.properties.typ: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "connecttyp", "dttmlastcal", "idrecparent", "lengthwire", "make", "model", "presaccuracy", "presmax", "purpose", "refid", "sn", "tempaccuracy", "tempmax", "typ", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["connecttyp"]) -> typing.Union[MetaOapg.properties.connecttyp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmlastcal"]) -> typing.Union[MetaOapg.properties.dttmlastcal, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecparent"]) -> typing.Union[MetaOapg.properties.idrecparent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lengthwire"]) -> typing.Union[MetaOapg.properties.lengthwire, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["make"]) -> typing.Union[MetaOapg.properties.make, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["model"]) -> typing.Union[MetaOapg.properties.model, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["presaccuracy"]) -> typing.Union[MetaOapg.properties.presaccuracy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["presmax"]) -> typing.Union[MetaOapg.properties.presmax, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["purpose"]) -> typing.Union[MetaOapg.properties.purpose, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["refid"]) -> typing.Union[MetaOapg.properties.refid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sn"]) -> typing.Union[MetaOapg.properties.sn, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tempaccuracy"]) -> typing.Union[MetaOapg.properties.tempaccuracy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tempmax"]) -> typing.Union[MetaOapg.properties.tempmax, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["typ"]) -> typing.Union[MetaOapg.properties.typ, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "connecttyp", "dttmlastcal", "idrecparent", "lengthwire", "make", "model", "presaccuracy", "presmax", "purpose", "refid", "sn", "tempaccuracy", "tempmax", "typ", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idrec: typing.Union[MetaOapg.properties.idrec, str, ],
        idwell: typing.Union[MetaOapg.properties.idwell, str, ],
        connecttyp: typing.Union[MetaOapg.properties.connecttyp, str, schemas.Unset] = schemas.unset,
        dttmlastcal: typing.Union[MetaOapg.properties.dttmlastcal, str, datetime, schemas.Unset] = schemas.unset,
        idrecparent: typing.Union[MetaOapg.properties.idrecparent, str, schemas.Unset] = schemas.unset,
        lengthwire: typing.Union[MetaOapg.properties.lengthwire, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        make: typing.Union[MetaOapg.properties.make, str, schemas.Unset] = schemas.unset,
        model: typing.Union[MetaOapg.properties.model, str, schemas.Unset] = schemas.unset,
        presaccuracy: typing.Union[MetaOapg.properties.presaccuracy, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        presmax: typing.Union[MetaOapg.properties.presmax, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        purpose: typing.Union[MetaOapg.properties.purpose, str, schemas.Unset] = schemas.unset,
        refid: typing.Union[MetaOapg.properties.refid, str, schemas.Unset] = schemas.unset,
        sn: typing.Union[MetaOapg.properties.sn, str, schemas.Unset] = schemas.unset,
        tempaccuracy: typing.Union[MetaOapg.properties.tempaccuracy, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        tempmax: typing.Union[MetaOapg.properties.tempmax, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        typ: typing.Union[MetaOapg.properties.typ, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SensorDetailData':
        return super().__new__(
            cls,
            *args,
            idrec=idrec,
            idwell=idwell,
            connecttyp=connecttyp,
            dttmlastcal=dttmlastcal,
            idrecparent=idrecparent,
            lengthwire=lengthwire,
            make=make,
            model=model,
            presaccuracy=presaccuracy,
            presmax=presmax,
            purpose=purpose,
            refid=refid,
            sn=sn,
            tempaccuracy=tempaccuracy,
            tempmax=tempmax,
            typ=typ,
            _configuration=_configuration,
            **kwargs,
        )
