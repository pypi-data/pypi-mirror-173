# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class WaterCompositionData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idrec",
            "idwell",
        }
        
        class properties:
            idrec = schemas.StrSchema
            idwell = schemas.StrSchema
            cationanion = schemas.StrSchema
            density = schemas.NumberSchema
            densityequiv = schemas.NumberSchema
            idrecparent = schemas.StrSchema
            ion = schemas.StrSchema
            massfrac = schemas.NumberSchema
            note = schemas.StrSchema
            __annotations__ = {
                "idrec": idrec,
                "idwell": idwell,
                "cationanion": cationanion,
                "density": density,
                "densityequiv": densityequiv,
                "idrecparent": idrecparent,
                "ion": ion,
                "massfrac": massfrac,
                "note": note,
            }
    
    idrec: MetaOapg.properties.idrec
    idwell: MetaOapg.properties.idwell
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cationanion"]) -> MetaOapg.properties.cationanion: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["density"]) -> MetaOapg.properties.density: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["densityequiv"]) -> MetaOapg.properties.densityequiv: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecparent"]) -> MetaOapg.properties.idrecparent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ion"]) -> MetaOapg.properties.ion: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["massfrac"]) -> MetaOapg.properties.massfrac: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["note"]) -> MetaOapg.properties.note: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "cationanion", "density", "densityequiv", "idrecparent", "ion", "massfrac", "note", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cationanion"]) -> typing.Union[MetaOapg.properties.cationanion, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["density"]) -> typing.Union[MetaOapg.properties.density, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["densityequiv"]) -> typing.Union[MetaOapg.properties.densityequiv, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecparent"]) -> typing.Union[MetaOapg.properties.idrecparent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ion"]) -> typing.Union[MetaOapg.properties.ion, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["massfrac"]) -> typing.Union[MetaOapg.properties.massfrac, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["note"]) -> typing.Union[MetaOapg.properties.note, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "cationanion", "density", "densityequiv", "idrecparent", "ion", "massfrac", "note", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idrec: typing.Union[MetaOapg.properties.idrec, str, ],
        idwell: typing.Union[MetaOapg.properties.idwell, str, ],
        cationanion: typing.Union[MetaOapg.properties.cationanion, str, schemas.Unset] = schemas.unset,
        density: typing.Union[MetaOapg.properties.density, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        densityequiv: typing.Union[MetaOapg.properties.densityequiv, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        idrecparent: typing.Union[MetaOapg.properties.idrecparent, str, schemas.Unset] = schemas.unset,
        ion: typing.Union[MetaOapg.properties.ion, str, schemas.Unset] = schemas.unset,
        massfrac: typing.Union[MetaOapg.properties.massfrac, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        note: typing.Union[MetaOapg.properties.note, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'WaterCompositionData':
        return super().__new__(
            cls,
            *args,
            idrec=idrec,
            idwell=idwell,
            cationanion=cationanion,
            density=density,
            densityequiv=densityequiv,
            idrecparent=idrecparent,
            ion=ion,
            massfrac=massfrac,
            note=note,
            _configuration=_configuration,
            **kwargs,
        )
