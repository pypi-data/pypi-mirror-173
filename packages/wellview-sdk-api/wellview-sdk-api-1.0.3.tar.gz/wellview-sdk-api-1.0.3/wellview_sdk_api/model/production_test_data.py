# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class ProductionTestData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idrec",
            "idwell",
        }
        
        class properties:
            idrec = schemas.StrSchema
            idwell = schemas.StrSchema
            bsw = schemas.NumberSchema
            com = schemas.StrSchema
            datasource = schemas.StrSchema
            densitygas = schemas.NumberSchema
            densityoilcond = schemas.NumberSchema
            des = schemas.StrSchema
            displayflag = schemas.BoolSchema
            dttm = schemas.DateTimeSchema
            duration = schemas.NumberSchema
            h2s = schemas.NumberSchema
            idrecjob = schemas.StrSchema
            idreczonecompletion = schemas.StrSchema
            phwater = schemas.NumberSchema
            presbh = schemas.NumberSchema
            prescas = schemas.NumberSchema
            presinjectgasliftgas = schemas.NumberSchema
            presprodsep = schemas.NumberSchema
            prestestsep = schemas.NumberSchema
            preswh = schemas.NumberSchema
            purposealloc = schemas.BoolSchema
            purposedeliv = schemas.BoolSchema
            purposereg = schemas.BoolSchema
            qualitysteam = schemas.NumberSchema
            ratecond = schemas.NumberSchema
            rategas = schemas.NumberSchema
            rateinjectdiluent = schemas.NumberSchema
            rateinjectgasliftgas = schemas.NumberSchema
            rateoil = schemas.NumberSchema
            ratesteam = schemas.NumberSchema
            ratewater = schemas.NumberSchema
            salinity = schemas.NumberSchema
            sandcut = schemas.NumberSchema
            szdiachoke = schemas.NumberSchema
            tempbh = schemas.NumberSchema
            tempprodsep = schemas.NumberSchema
            temptestsep = schemas.NumberSchema
            tempwh = schemas.NumberSchema
            testedby = schemas.StrSchema
            typ1 = schemas.StrSchema
            typ2 = schemas.StrSchema
            typvolpctother = schemas.StrSchema
            volpctco2 = schemas.NumberSchema
            volpctn2 = schemas.NumberSchema
            volpctother = schemas.NumberSchema
            __annotations__ = {
                "idrec": idrec,
                "idwell": idwell,
                "bsw": bsw,
                "com": com,
                "datasource": datasource,
                "densitygas": densitygas,
                "densityoilcond": densityoilcond,
                "des": des,
                "displayflag": displayflag,
                "dttm": dttm,
                "duration": duration,
                "h2s": h2s,
                "idrecjob": idrecjob,
                "idreczonecompletion": idreczonecompletion,
                "phwater": phwater,
                "presbh": presbh,
                "prescas": prescas,
                "presinjectgasliftgas": presinjectgasliftgas,
                "presprodsep": presprodsep,
                "prestestsep": prestestsep,
                "preswh": preswh,
                "purposealloc": purposealloc,
                "purposedeliv": purposedeliv,
                "purposereg": purposereg,
                "qualitysteam": qualitysteam,
                "ratecond": ratecond,
                "rategas": rategas,
                "rateinjectdiluent": rateinjectdiluent,
                "rateinjectgasliftgas": rateinjectgasliftgas,
                "rateoil": rateoil,
                "ratesteam": ratesteam,
                "ratewater": ratewater,
                "salinity": salinity,
                "sandcut": sandcut,
                "szdiachoke": szdiachoke,
                "tempbh": tempbh,
                "tempprodsep": tempprodsep,
                "temptestsep": temptestsep,
                "tempwh": tempwh,
                "testedby": testedby,
                "typ1": typ1,
                "typ2": typ2,
                "typvolpctother": typvolpctother,
                "volpctco2": volpctco2,
                "volpctn2": volpctn2,
                "volpctother": volpctother,
            }
    
    idrec: MetaOapg.properties.idrec
    idwell: MetaOapg.properties.idwell
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bsw"]) -> MetaOapg.properties.bsw: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["com"]) -> MetaOapg.properties.com: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["datasource"]) -> MetaOapg.properties.datasource: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["densitygas"]) -> MetaOapg.properties.densitygas: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["densityoilcond"]) -> MetaOapg.properties.densityoilcond: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["des"]) -> MetaOapg.properties.des: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["displayflag"]) -> MetaOapg.properties.displayflag: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttm"]) -> MetaOapg.properties.dttm: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["duration"]) -> MetaOapg.properties.duration: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["h2s"]) -> MetaOapg.properties.h2s: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecjob"]) -> MetaOapg.properties.idrecjob: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idreczonecompletion"]) -> MetaOapg.properties.idreczonecompletion: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["phwater"]) -> MetaOapg.properties.phwater: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["presbh"]) -> MetaOapg.properties.presbh: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["prescas"]) -> MetaOapg.properties.prescas: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["presinjectgasliftgas"]) -> MetaOapg.properties.presinjectgasliftgas: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["presprodsep"]) -> MetaOapg.properties.presprodsep: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["prestestsep"]) -> MetaOapg.properties.prestestsep: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["preswh"]) -> MetaOapg.properties.preswh: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["purposealloc"]) -> MetaOapg.properties.purposealloc: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["purposedeliv"]) -> MetaOapg.properties.purposedeliv: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["purposereg"]) -> MetaOapg.properties.purposereg: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["qualitysteam"]) -> MetaOapg.properties.qualitysteam: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ratecond"]) -> MetaOapg.properties.ratecond: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rategas"]) -> MetaOapg.properties.rategas: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rateinjectdiluent"]) -> MetaOapg.properties.rateinjectdiluent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rateinjectgasliftgas"]) -> MetaOapg.properties.rateinjectgasliftgas: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rateoil"]) -> MetaOapg.properties.rateoil: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ratesteam"]) -> MetaOapg.properties.ratesteam: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ratewater"]) -> MetaOapg.properties.ratewater: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["salinity"]) -> MetaOapg.properties.salinity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sandcut"]) -> MetaOapg.properties.sandcut: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["szdiachoke"]) -> MetaOapg.properties.szdiachoke: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tempbh"]) -> MetaOapg.properties.tempbh: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tempprodsep"]) -> MetaOapg.properties.tempprodsep: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["temptestsep"]) -> MetaOapg.properties.temptestsep: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tempwh"]) -> MetaOapg.properties.tempwh: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["testedby"]) -> MetaOapg.properties.testedby: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["typ1"]) -> MetaOapg.properties.typ1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["typ2"]) -> MetaOapg.properties.typ2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["typvolpctother"]) -> MetaOapg.properties.typvolpctother: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["volpctco2"]) -> MetaOapg.properties.volpctco2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["volpctn2"]) -> MetaOapg.properties.volpctn2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["volpctother"]) -> MetaOapg.properties.volpctother: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "bsw", "com", "datasource", "densitygas", "densityoilcond", "des", "displayflag", "dttm", "duration", "h2s", "idrecjob", "idreczonecompletion", "phwater", "presbh", "prescas", "presinjectgasliftgas", "presprodsep", "prestestsep", "preswh", "purposealloc", "purposedeliv", "purposereg", "qualitysteam", "ratecond", "rategas", "rateinjectdiluent", "rateinjectgasliftgas", "rateoil", "ratesteam", "ratewater", "salinity", "sandcut", "szdiachoke", "tempbh", "tempprodsep", "temptestsep", "tempwh", "testedby", "typ1", "typ2", "typvolpctother", "volpctco2", "volpctn2", "volpctother", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bsw"]) -> typing.Union[MetaOapg.properties.bsw, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["com"]) -> typing.Union[MetaOapg.properties.com, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["datasource"]) -> typing.Union[MetaOapg.properties.datasource, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["densitygas"]) -> typing.Union[MetaOapg.properties.densitygas, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["densityoilcond"]) -> typing.Union[MetaOapg.properties.densityoilcond, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["des"]) -> typing.Union[MetaOapg.properties.des, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["displayflag"]) -> typing.Union[MetaOapg.properties.displayflag, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttm"]) -> typing.Union[MetaOapg.properties.dttm, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["duration"]) -> typing.Union[MetaOapg.properties.duration, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["h2s"]) -> typing.Union[MetaOapg.properties.h2s, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecjob"]) -> typing.Union[MetaOapg.properties.idrecjob, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idreczonecompletion"]) -> typing.Union[MetaOapg.properties.idreczonecompletion, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["phwater"]) -> typing.Union[MetaOapg.properties.phwater, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["presbh"]) -> typing.Union[MetaOapg.properties.presbh, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["prescas"]) -> typing.Union[MetaOapg.properties.prescas, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["presinjectgasliftgas"]) -> typing.Union[MetaOapg.properties.presinjectgasliftgas, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["presprodsep"]) -> typing.Union[MetaOapg.properties.presprodsep, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["prestestsep"]) -> typing.Union[MetaOapg.properties.prestestsep, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["preswh"]) -> typing.Union[MetaOapg.properties.preswh, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["purposealloc"]) -> typing.Union[MetaOapg.properties.purposealloc, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["purposedeliv"]) -> typing.Union[MetaOapg.properties.purposedeliv, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["purposereg"]) -> typing.Union[MetaOapg.properties.purposereg, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["qualitysteam"]) -> typing.Union[MetaOapg.properties.qualitysteam, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ratecond"]) -> typing.Union[MetaOapg.properties.ratecond, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rategas"]) -> typing.Union[MetaOapg.properties.rategas, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rateinjectdiluent"]) -> typing.Union[MetaOapg.properties.rateinjectdiluent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rateinjectgasliftgas"]) -> typing.Union[MetaOapg.properties.rateinjectgasliftgas, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rateoil"]) -> typing.Union[MetaOapg.properties.rateoil, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ratesteam"]) -> typing.Union[MetaOapg.properties.ratesteam, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ratewater"]) -> typing.Union[MetaOapg.properties.ratewater, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["salinity"]) -> typing.Union[MetaOapg.properties.salinity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sandcut"]) -> typing.Union[MetaOapg.properties.sandcut, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["szdiachoke"]) -> typing.Union[MetaOapg.properties.szdiachoke, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tempbh"]) -> typing.Union[MetaOapg.properties.tempbh, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tempprodsep"]) -> typing.Union[MetaOapg.properties.tempprodsep, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["temptestsep"]) -> typing.Union[MetaOapg.properties.temptestsep, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tempwh"]) -> typing.Union[MetaOapg.properties.tempwh, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["testedby"]) -> typing.Union[MetaOapg.properties.testedby, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["typ1"]) -> typing.Union[MetaOapg.properties.typ1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["typ2"]) -> typing.Union[MetaOapg.properties.typ2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["typvolpctother"]) -> typing.Union[MetaOapg.properties.typvolpctother, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["volpctco2"]) -> typing.Union[MetaOapg.properties.volpctco2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["volpctn2"]) -> typing.Union[MetaOapg.properties.volpctn2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["volpctother"]) -> typing.Union[MetaOapg.properties.volpctother, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "bsw", "com", "datasource", "densitygas", "densityoilcond", "des", "displayflag", "dttm", "duration", "h2s", "idrecjob", "idreczonecompletion", "phwater", "presbh", "prescas", "presinjectgasliftgas", "presprodsep", "prestestsep", "preswh", "purposealloc", "purposedeliv", "purposereg", "qualitysteam", "ratecond", "rategas", "rateinjectdiluent", "rateinjectgasliftgas", "rateoil", "ratesteam", "ratewater", "salinity", "sandcut", "szdiachoke", "tempbh", "tempprodsep", "temptestsep", "tempwh", "testedby", "typ1", "typ2", "typvolpctother", "volpctco2", "volpctn2", "volpctother", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idrec: typing.Union[MetaOapg.properties.idrec, str, ],
        idwell: typing.Union[MetaOapg.properties.idwell, str, ],
        bsw: typing.Union[MetaOapg.properties.bsw, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        com: typing.Union[MetaOapg.properties.com, str, schemas.Unset] = schemas.unset,
        datasource: typing.Union[MetaOapg.properties.datasource, str, schemas.Unset] = schemas.unset,
        densitygas: typing.Union[MetaOapg.properties.densitygas, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        densityoilcond: typing.Union[MetaOapg.properties.densityoilcond, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        des: typing.Union[MetaOapg.properties.des, str, schemas.Unset] = schemas.unset,
        displayflag: typing.Union[MetaOapg.properties.displayflag, bool, schemas.Unset] = schemas.unset,
        dttm: typing.Union[MetaOapg.properties.dttm, str, datetime, schemas.Unset] = schemas.unset,
        duration: typing.Union[MetaOapg.properties.duration, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        h2s: typing.Union[MetaOapg.properties.h2s, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        idrecjob: typing.Union[MetaOapg.properties.idrecjob, str, schemas.Unset] = schemas.unset,
        idreczonecompletion: typing.Union[MetaOapg.properties.idreczonecompletion, str, schemas.Unset] = schemas.unset,
        phwater: typing.Union[MetaOapg.properties.phwater, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        presbh: typing.Union[MetaOapg.properties.presbh, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        prescas: typing.Union[MetaOapg.properties.prescas, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        presinjectgasliftgas: typing.Union[MetaOapg.properties.presinjectgasliftgas, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        presprodsep: typing.Union[MetaOapg.properties.presprodsep, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        prestestsep: typing.Union[MetaOapg.properties.prestestsep, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        preswh: typing.Union[MetaOapg.properties.preswh, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        purposealloc: typing.Union[MetaOapg.properties.purposealloc, bool, schemas.Unset] = schemas.unset,
        purposedeliv: typing.Union[MetaOapg.properties.purposedeliv, bool, schemas.Unset] = schemas.unset,
        purposereg: typing.Union[MetaOapg.properties.purposereg, bool, schemas.Unset] = schemas.unset,
        qualitysteam: typing.Union[MetaOapg.properties.qualitysteam, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        ratecond: typing.Union[MetaOapg.properties.ratecond, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        rategas: typing.Union[MetaOapg.properties.rategas, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        rateinjectdiluent: typing.Union[MetaOapg.properties.rateinjectdiluent, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        rateinjectgasliftgas: typing.Union[MetaOapg.properties.rateinjectgasliftgas, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        rateoil: typing.Union[MetaOapg.properties.rateoil, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        ratesteam: typing.Union[MetaOapg.properties.ratesteam, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        ratewater: typing.Union[MetaOapg.properties.ratewater, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        salinity: typing.Union[MetaOapg.properties.salinity, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        sandcut: typing.Union[MetaOapg.properties.sandcut, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        szdiachoke: typing.Union[MetaOapg.properties.szdiachoke, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        tempbh: typing.Union[MetaOapg.properties.tempbh, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        tempprodsep: typing.Union[MetaOapg.properties.tempprodsep, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        temptestsep: typing.Union[MetaOapg.properties.temptestsep, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        tempwh: typing.Union[MetaOapg.properties.tempwh, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        testedby: typing.Union[MetaOapg.properties.testedby, str, schemas.Unset] = schemas.unset,
        typ1: typing.Union[MetaOapg.properties.typ1, str, schemas.Unset] = schemas.unset,
        typ2: typing.Union[MetaOapg.properties.typ2, str, schemas.Unset] = schemas.unset,
        typvolpctother: typing.Union[MetaOapg.properties.typvolpctother, str, schemas.Unset] = schemas.unset,
        volpctco2: typing.Union[MetaOapg.properties.volpctco2, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        volpctn2: typing.Union[MetaOapg.properties.volpctn2, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        volpctother: typing.Union[MetaOapg.properties.volpctother, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ProductionTestData':
        return super().__new__(
            cls,
            *args,
            idrec=idrec,
            idwell=idwell,
            bsw=bsw,
            com=com,
            datasource=datasource,
            densitygas=densitygas,
            densityoilcond=densityoilcond,
            des=des,
            displayflag=displayflag,
            dttm=dttm,
            duration=duration,
            h2s=h2s,
            idrecjob=idrecjob,
            idreczonecompletion=idreczonecompletion,
            phwater=phwater,
            presbh=presbh,
            prescas=prescas,
            presinjectgasliftgas=presinjectgasliftgas,
            presprodsep=presprodsep,
            prestestsep=prestestsep,
            preswh=preswh,
            purposealloc=purposealloc,
            purposedeliv=purposedeliv,
            purposereg=purposereg,
            qualitysteam=qualitysteam,
            ratecond=ratecond,
            rategas=rategas,
            rateinjectdiluent=rateinjectdiluent,
            rateinjectgasliftgas=rateinjectgasliftgas,
            rateoil=rateoil,
            ratesteam=ratesteam,
            ratewater=ratewater,
            salinity=salinity,
            sandcut=sandcut,
            szdiachoke=szdiachoke,
            tempbh=tempbh,
            tempprodsep=tempprodsep,
            temptestsep=temptestsep,
            tempwh=tempwh,
            testedby=testedby,
            typ1=typ1,
            typ2=typ2,
            typvolpctother=typvolpctother,
            volpctco2=volpctco2,
            volpctn2=volpctn2,
            volpctother=volpctother,
            _configuration=_configuration,
            **kwargs,
        )
