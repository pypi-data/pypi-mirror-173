# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class WellReviewData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idrec",
            "idwell",
        }
        
        class properties:
            idrec = schemas.StrSchema
            idwell = schemas.StrSchema
            com = schemas.StrSchema
            compliancepriority = schemas.StrSchema
            dttm = schemas.DateTimeSchema
            idrecjob = schemas.StrSchema
            idreczonecompletion = schemas.StrSchema
            prescas = schemas.NumberSchema
            presline = schemas.NumberSchema
            presnote = schemas.StrSchema
            prestargetline = schemas.NumberSchema
            prestub = schemas.NumberSchema
            productdestination = schemas.StrSchema
            proposedprojcost = schemas.NumberSchema
            proposedprojdes = schemas.StrSchema
            proposedprojdur = schemas.NumberSchema
            proposedprojpriority = schemas.StrSchema
            proposedprojstatus = schemas.StrSchema
            proposedprojtyp = schemas.StrSchema
            ratemaxdelivcond = schemas.NumberSchema
            ratemaxdelivgas = schemas.NumberSchema
            ratemaxdelivoil = schemas.NumberSchema
            ratemaxdelivwater = schemas.NumberSchema
            rateoptimumcond = schemas.NumberSchema
            rateoptimumgas = schemas.NumberSchema
            rateoptimumoil = schemas.NumberSchema
            rateoptimumwater = schemas.NumberSchema
            ratetargetcond = schemas.NumberSchema
            ratetargetgas = schemas.NumberSchema
            ratetargetoil = schemas.NumberSchema
            ratetargetwater = schemas.NumberSchema
            reviewedby = schemas.StrSchema
            typ = schemas.StrSchema
            usernum1 = schemas.NumberSchema
            usertxt1 = schemas.StrSchema
            __annotations__ = {
                "idrec": idrec,
                "idwell": idwell,
                "com": com,
                "compliancepriority": compliancepriority,
                "dttm": dttm,
                "idrecjob": idrecjob,
                "idreczonecompletion": idreczonecompletion,
                "prescas": prescas,
                "presline": presline,
                "presnote": presnote,
                "prestargetline": prestargetline,
                "prestub": prestub,
                "productdestination": productdestination,
                "proposedprojcost": proposedprojcost,
                "proposedprojdes": proposedprojdes,
                "proposedprojdur": proposedprojdur,
                "proposedprojpriority": proposedprojpriority,
                "proposedprojstatus": proposedprojstatus,
                "proposedprojtyp": proposedprojtyp,
                "ratemaxdelivcond": ratemaxdelivcond,
                "ratemaxdelivgas": ratemaxdelivgas,
                "ratemaxdelivoil": ratemaxdelivoil,
                "ratemaxdelivwater": ratemaxdelivwater,
                "rateoptimumcond": rateoptimumcond,
                "rateoptimumgas": rateoptimumgas,
                "rateoptimumoil": rateoptimumoil,
                "rateoptimumwater": rateoptimumwater,
                "ratetargetcond": ratetargetcond,
                "ratetargetgas": ratetargetgas,
                "ratetargetoil": ratetargetoil,
                "ratetargetwater": ratetargetwater,
                "reviewedby": reviewedby,
                "typ": typ,
                "usernum1": usernum1,
                "usertxt1": usertxt1,
            }
    
    idrec: MetaOapg.properties.idrec
    idwell: MetaOapg.properties.idwell
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["com"]) -> MetaOapg.properties.com: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["compliancepriority"]) -> MetaOapg.properties.compliancepriority: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttm"]) -> MetaOapg.properties.dttm: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecjob"]) -> MetaOapg.properties.idrecjob: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idreczonecompletion"]) -> MetaOapg.properties.idreczonecompletion: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["prescas"]) -> MetaOapg.properties.prescas: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["presline"]) -> MetaOapg.properties.presline: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["presnote"]) -> MetaOapg.properties.presnote: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["prestargetline"]) -> MetaOapg.properties.prestargetline: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["prestub"]) -> MetaOapg.properties.prestub: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["productdestination"]) -> MetaOapg.properties.productdestination: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["proposedprojcost"]) -> MetaOapg.properties.proposedprojcost: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["proposedprojdes"]) -> MetaOapg.properties.proposedprojdes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["proposedprojdur"]) -> MetaOapg.properties.proposedprojdur: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["proposedprojpriority"]) -> MetaOapg.properties.proposedprojpriority: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["proposedprojstatus"]) -> MetaOapg.properties.proposedprojstatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["proposedprojtyp"]) -> MetaOapg.properties.proposedprojtyp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ratemaxdelivcond"]) -> MetaOapg.properties.ratemaxdelivcond: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ratemaxdelivgas"]) -> MetaOapg.properties.ratemaxdelivgas: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ratemaxdelivoil"]) -> MetaOapg.properties.ratemaxdelivoil: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ratemaxdelivwater"]) -> MetaOapg.properties.ratemaxdelivwater: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rateoptimumcond"]) -> MetaOapg.properties.rateoptimumcond: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rateoptimumgas"]) -> MetaOapg.properties.rateoptimumgas: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rateoptimumoil"]) -> MetaOapg.properties.rateoptimumoil: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rateoptimumwater"]) -> MetaOapg.properties.rateoptimumwater: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ratetargetcond"]) -> MetaOapg.properties.ratetargetcond: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ratetargetgas"]) -> MetaOapg.properties.ratetargetgas: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ratetargetoil"]) -> MetaOapg.properties.ratetargetoil: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ratetargetwater"]) -> MetaOapg.properties.ratetargetwater: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reviewedby"]) -> MetaOapg.properties.reviewedby: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["typ"]) -> MetaOapg.properties.typ: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usernum1"]) -> MetaOapg.properties.usernum1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usertxt1"]) -> MetaOapg.properties.usertxt1: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "com", "compliancepriority", "dttm", "idrecjob", "idreczonecompletion", "prescas", "presline", "presnote", "prestargetline", "prestub", "productdestination", "proposedprojcost", "proposedprojdes", "proposedprojdur", "proposedprojpriority", "proposedprojstatus", "proposedprojtyp", "ratemaxdelivcond", "ratemaxdelivgas", "ratemaxdelivoil", "ratemaxdelivwater", "rateoptimumcond", "rateoptimumgas", "rateoptimumoil", "rateoptimumwater", "ratetargetcond", "ratetargetgas", "ratetargetoil", "ratetargetwater", "reviewedby", "typ", "usernum1", "usertxt1", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["com"]) -> typing.Union[MetaOapg.properties.com, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["compliancepriority"]) -> typing.Union[MetaOapg.properties.compliancepriority, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttm"]) -> typing.Union[MetaOapg.properties.dttm, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecjob"]) -> typing.Union[MetaOapg.properties.idrecjob, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idreczonecompletion"]) -> typing.Union[MetaOapg.properties.idreczonecompletion, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["prescas"]) -> typing.Union[MetaOapg.properties.prescas, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["presline"]) -> typing.Union[MetaOapg.properties.presline, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["presnote"]) -> typing.Union[MetaOapg.properties.presnote, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["prestargetline"]) -> typing.Union[MetaOapg.properties.prestargetline, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["prestub"]) -> typing.Union[MetaOapg.properties.prestub, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["productdestination"]) -> typing.Union[MetaOapg.properties.productdestination, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["proposedprojcost"]) -> typing.Union[MetaOapg.properties.proposedprojcost, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["proposedprojdes"]) -> typing.Union[MetaOapg.properties.proposedprojdes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["proposedprojdur"]) -> typing.Union[MetaOapg.properties.proposedprojdur, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["proposedprojpriority"]) -> typing.Union[MetaOapg.properties.proposedprojpriority, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["proposedprojstatus"]) -> typing.Union[MetaOapg.properties.proposedprojstatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["proposedprojtyp"]) -> typing.Union[MetaOapg.properties.proposedprojtyp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ratemaxdelivcond"]) -> typing.Union[MetaOapg.properties.ratemaxdelivcond, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ratemaxdelivgas"]) -> typing.Union[MetaOapg.properties.ratemaxdelivgas, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ratemaxdelivoil"]) -> typing.Union[MetaOapg.properties.ratemaxdelivoil, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ratemaxdelivwater"]) -> typing.Union[MetaOapg.properties.ratemaxdelivwater, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rateoptimumcond"]) -> typing.Union[MetaOapg.properties.rateoptimumcond, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rateoptimumgas"]) -> typing.Union[MetaOapg.properties.rateoptimumgas, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rateoptimumoil"]) -> typing.Union[MetaOapg.properties.rateoptimumoil, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rateoptimumwater"]) -> typing.Union[MetaOapg.properties.rateoptimumwater, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ratetargetcond"]) -> typing.Union[MetaOapg.properties.ratetargetcond, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ratetargetgas"]) -> typing.Union[MetaOapg.properties.ratetargetgas, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ratetargetoil"]) -> typing.Union[MetaOapg.properties.ratetargetoil, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ratetargetwater"]) -> typing.Union[MetaOapg.properties.ratetargetwater, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reviewedby"]) -> typing.Union[MetaOapg.properties.reviewedby, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["typ"]) -> typing.Union[MetaOapg.properties.typ, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usernum1"]) -> typing.Union[MetaOapg.properties.usernum1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usertxt1"]) -> typing.Union[MetaOapg.properties.usertxt1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "com", "compliancepriority", "dttm", "idrecjob", "idreczonecompletion", "prescas", "presline", "presnote", "prestargetline", "prestub", "productdestination", "proposedprojcost", "proposedprojdes", "proposedprojdur", "proposedprojpriority", "proposedprojstatus", "proposedprojtyp", "ratemaxdelivcond", "ratemaxdelivgas", "ratemaxdelivoil", "ratemaxdelivwater", "rateoptimumcond", "rateoptimumgas", "rateoptimumoil", "rateoptimumwater", "ratetargetcond", "ratetargetgas", "ratetargetoil", "ratetargetwater", "reviewedby", "typ", "usernum1", "usertxt1", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idrec: typing.Union[MetaOapg.properties.idrec, str, ],
        idwell: typing.Union[MetaOapg.properties.idwell, str, ],
        com: typing.Union[MetaOapg.properties.com, str, schemas.Unset] = schemas.unset,
        compliancepriority: typing.Union[MetaOapg.properties.compliancepriority, str, schemas.Unset] = schemas.unset,
        dttm: typing.Union[MetaOapg.properties.dttm, str, datetime, schemas.Unset] = schemas.unset,
        idrecjob: typing.Union[MetaOapg.properties.idrecjob, str, schemas.Unset] = schemas.unset,
        idreczonecompletion: typing.Union[MetaOapg.properties.idreczonecompletion, str, schemas.Unset] = schemas.unset,
        prescas: typing.Union[MetaOapg.properties.prescas, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        presline: typing.Union[MetaOapg.properties.presline, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        presnote: typing.Union[MetaOapg.properties.presnote, str, schemas.Unset] = schemas.unset,
        prestargetline: typing.Union[MetaOapg.properties.prestargetline, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        prestub: typing.Union[MetaOapg.properties.prestub, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        productdestination: typing.Union[MetaOapg.properties.productdestination, str, schemas.Unset] = schemas.unset,
        proposedprojcost: typing.Union[MetaOapg.properties.proposedprojcost, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        proposedprojdes: typing.Union[MetaOapg.properties.proposedprojdes, str, schemas.Unset] = schemas.unset,
        proposedprojdur: typing.Union[MetaOapg.properties.proposedprojdur, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        proposedprojpriority: typing.Union[MetaOapg.properties.proposedprojpriority, str, schemas.Unset] = schemas.unset,
        proposedprojstatus: typing.Union[MetaOapg.properties.proposedprojstatus, str, schemas.Unset] = schemas.unset,
        proposedprojtyp: typing.Union[MetaOapg.properties.proposedprojtyp, str, schemas.Unset] = schemas.unset,
        ratemaxdelivcond: typing.Union[MetaOapg.properties.ratemaxdelivcond, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        ratemaxdelivgas: typing.Union[MetaOapg.properties.ratemaxdelivgas, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        ratemaxdelivoil: typing.Union[MetaOapg.properties.ratemaxdelivoil, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        ratemaxdelivwater: typing.Union[MetaOapg.properties.ratemaxdelivwater, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        rateoptimumcond: typing.Union[MetaOapg.properties.rateoptimumcond, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        rateoptimumgas: typing.Union[MetaOapg.properties.rateoptimumgas, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        rateoptimumoil: typing.Union[MetaOapg.properties.rateoptimumoil, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        rateoptimumwater: typing.Union[MetaOapg.properties.rateoptimumwater, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        ratetargetcond: typing.Union[MetaOapg.properties.ratetargetcond, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        ratetargetgas: typing.Union[MetaOapg.properties.ratetargetgas, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        ratetargetoil: typing.Union[MetaOapg.properties.ratetargetoil, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        ratetargetwater: typing.Union[MetaOapg.properties.ratetargetwater, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        reviewedby: typing.Union[MetaOapg.properties.reviewedby, str, schemas.Unset] = schemas.unset,
        typ: typing.Union[MetaOapg.properties.typ, str, schemas.Unset] = schemas.unset,
        usernum1: typing.Union[MetaOapg.properties.usernum1, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        usertxt1: typing.Union[MetaOapg.properties.usertxt1, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'WellReviewData':
        return super().__new__(
            cls,
            *args,
            idrec=idrec,
            idwell=idwell,
            com=com,
            compliancepriority=compliancepriority,
            dttm=dttm,
            idrecjob=idrecjob,
            idreczonecompletion=idreczonecompletion,
            prescas=prescas,
            presline=presline,
            presnote=presnote,
            prestargetline=prestargetline,
            prestub=prestub,
            productdestination=productdestination,
            proposedprojcost=proposedprojcost,
            proposedprojdes=proposedprojdes,
            proposedprojdur=proposedprojdur,
            proposedprojpriority=proposedprojpriority,
            proposedprojstatus=proposedprojstatus,
            proposedprojtyp=proposedprojtyp,
            ratemaxdelivcond=ratemaxdelivcond,
            ratemaxdelivgas=ratemaxdelivgas,
            ratemaxdelivoil=ratemaxdelivoil,
            ratemaxdelivwater=ratemaxdelivwater,
            rateoptimumcond=rateoptimumcond,
            rateoptimumgas=rateoptimumgas,
            rateoptimumoil=rateoptimumoil,
            rateoptimumwater=rateoptimumwater,
            ratetargetcond=ratetargetcond,
            ratetargetgas=ratetargetgas,
            ratetargetoil=ratetargetoil,
            ratetargetwater=ratetargetwater,
            reviewedby=reviewedby,
            typ=typ,
            usernum1=usernum1,
            usertxt1=usertxt1,
            _configuration=_configuration,
            **kwargs,
        )
