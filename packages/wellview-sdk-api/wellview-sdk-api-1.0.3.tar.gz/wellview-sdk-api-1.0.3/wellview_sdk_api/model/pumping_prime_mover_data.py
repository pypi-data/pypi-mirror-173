# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class PumpingPrimeMoverData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idrec",
            "idwell",
        }
        
        class properties:
            idrec = schemas.StrSchema
            idwell = schemas.StrSchema
            beltlength = schemas.NumberSchema
            beltmodel = schemas.StrSchema
            beltno = schemas.IntSchema
            beltpowertranseff = schemas.NumberSchema
            beltreductionratio = schemas.NumberSchema
            beltxsect = schemas.StrSchema
            com = schemas.StrSchema
            conditionend = schemas.StrSchema
            conditionstart = schemas.StrSchema
            dttmend = schemas.DateTimeSchema
            dttmlastoverhaul = schemas.DateTimeSchema
            dttmstart = schemas.DateTimeSchema
            frame = schemas.StrSchema
            idrecjob = schemas.StrSchema
            idrecrod = schemas.StrSchema
            make = schemas.StrSchema
            model = schemas.StrSchema
            pmtyp = schemas.StrSchema
            powerrating = schemas.NumberSchema
            proposed = schemas.BoolSchema
            refid = schemas.StrSchema
            rpmrating = schemas.NumberSchema
            servicefact = schemas.NumberSchema
            sn = schemas.StrSchema
            speeddes = schemas.StrSchema
            szsheave = schemas.NumberSchema
            __annotations__ = {
                "idrec": idrec,
                "idwell": idwell,
                "beltlength": beltlength,
                "beltmodel": beltmodel,
                "beltno": beltno,
                "beltpowertranseff": beltpowertranseff,
                "beltreductionratio": beltreductionratio,
                "beltxsect": beltxsect,
                "com": com,
                "conditionend": conditionend,
                "conditionstart": conditionstart,
                "dttmend": dttmend,
                "dttmlastoverhaul": dttmlastoverhaul,
                "dttmstart": dttmstart,
                "frame": frame,
                "idrecjob": idrecjob,
                "idrecrod": idrecrod,
                "make": make,
                "model": model,
                "pmtyp": pmtyp,
                "powerrating": powerrating,
                "proposed": proposed,
                "refid": refid,
                "rpmrating": rpmrating,
                "servicefact": servicefact,
                "sn": sn,
                "speeddes": speeddes,
                "szsheave": szsheave,
            }
    
    idrec: MetaOapg.properties.idrec
    idwell: MetaOapg.properties.idwell
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["beltlength"]) -> MetaOapg.properties.beltlength: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["beltmodel"]) -> MetaOapg.properties.beltmodel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["beltno"]) -> MetaOapg.properties.beltno: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["beltpowertranseff"]) -> MetaOapg.properties.beltpowertranseff: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["beltreductionratio"]) -> MetaOapg.properties.beltreductionratio: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["beltxsect"]) -> MetaOapg.properties.beltxsect: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["com"]) -> MetaOapg.properties.com: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["conditionend"]) -> MetaOapg.properties.conditionend: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["conditionstart"]) -> MetaOapg.properties.conditionstart: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmend"]) -> MetaOapg.properties.dttmend: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmlastoverhaul"]) -> MetaOapg.properties.dttmlastoverhaul: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmstart"]) -> MetaOapg.properties.dttmstart: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["frame"]) -> MetaOapg.properties.frame: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecjob"]) -> MetaOapg.properties.idrecjob: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecrod"]) -> MetaOapg.properties.idrecrod: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["make"]) -> MetaOapg.properties.make: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["model"]) -> MetaOapg.properties.model: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pmtyp"]) -> MetaOapg.properties.pmtyp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["powerrating"]) -> MetaOapg.properties.powerrating: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["proposed"]) -> MetaOapg.properties.proposed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["refid"]) -> MetaOapg.properties.refid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rpmrating"]) -> MetaOapg.properties.rpmrating: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["servicefact"]) -> MetaOapg.properties.servicefact: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sn"]) -> MetaOapg.properties.sn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["speeddes"]) -> MetaOapg.properties.speeddes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["szsheave"]) -> MetaOapg.properties.szsheave: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "beltlength", "beltmodel", "beltno", "beltpowertranseff", "beltreductionratio", "beltxsect", "com", "conditionend", "conditionstart", "dttmend", "dttmlastoverhaul", "dttmstart", "frame", "idrecjob", "idrecrod", "make", "model", "pmtyp", "powerrating", "proposed", "refid", "rpmrating", "servicefact", "sn", "speeddes", "szsheave", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["beltlength"]) -> typing.Union[MetaOapg.properties.beltlength, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["beltmodel"]) -> typing.Union[MetaOapg.properties.beltmodel, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["beltno"]) -> typing.Union[MetaOapg.properties.beltno, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["beltpowertranseff"]) -> typing.Union[MetaOapg.properties.beltpowertranseff, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["beltreductionratio"]) -> typing.Union[MetaOapg.properties.beltreductionratio, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["beltxsect"]) -> typing.Union[MetaOapg.properties.beltxsect, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["com"]) -> typing.Union[MetaOapg.properties.com, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["conditionend"]) -> typing.Union[MetaOapg.properties.conditionend, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["conditionstart"]) -> typing.Union[MetaOapg.properties.conditionstart, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmend"]) -> typing.Union[MetaOapg.properties.dttmend, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmlastoverhaul"]) -> typing.Union[MetaOapg.properties.dttmlastoverhaul, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmstart"]) -> typing.Union[MetaOapg.properties.dttmstart, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["frame"]) -> typing.Union[MetaOapg.properties.frame, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecjob"]) -> typing.Union[MetaOapg.properties.idrecjob, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecrod"]) -> typing.Union[MetaOapg.properties.idrecrod, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["make"]) -> typing.Union[MetaOapg.properties.make, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["model"]) -> typing.Union[MetaOapg.properties.model, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pmtyp"]) -> typing.Union[MetaOapg.properties.pmtyp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["powerrating"]) -> typing.Union[MetaOapg.properties.powerrating, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["proposed"]) -> typing.Union[MetaOapg.properties.proposed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["refid"]) -> typing.Union[MetaOapg.properties.refid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rpmrating"]) -> typing.Union[MetaOapg.properties.rpmrating, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["servicefact"]) -> typing.Union[MetaOapg.properties.servicefact, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sn"]) -> typing.Union[MetaOapg.properties.sn, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["speeddes"]) -> typing.Union[MetaOapg.properties.speeddes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["szsheave"]) -> typing.Union[MetaOapg.properties.szsheave, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "beltlength", "beltmodel", "beltno", "beltpowertranseff", "beltreductionratio", "beltxsect", "com", "conditionend", "conditionstart", "dttmend", "dttmlastoverhaul", "dttmstart", "frame", "idrecjob", "idrecrod", "make", "model", "pmtyp", "powerrating", "proposed", "refid", "rpmrating", "servicefact", "sn", "speeddes", "szsheave", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idrec: typing.Union[MetaOapg.properties.idrec, str, ],
        idwell: typing.Union[MetaOapg.properties.idwell, str, ],
        beltlength: typing.Union[MetaOapg.properties.beltlength, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        beltmodel: typing.Union[MetaOapg.properties.beltmodel, str, schemas.Unset] = schemas.unset,
        beltno: typing.Union[MetaOapg.properties.beltno, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        beltpowertranseff: typing.Union[MetaOapg.properties.beltpowertranseff, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        beltreductionratio: typing.Union[MetaOapg.properties.beltreductionratio, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        beltxsect: typing.Union[MetaOapg.properties.beltxsect, str, schemas.Unset] = schemas.unset,
        com: typing.Union[MetaOapg.properties.com, str, schemas.Unset] = schemas.unset,
        conditionend: typing.Union[MetaOapg.properties.conditionend, str, schemas.Unset] = schemas.unset,
        conditionstart: typing.Union[MetaOapg.properties.conditionstart, str, schemas.Unset] = schemas.unset,
        dttmend: typing.Union[MetaOapg.properties.dttmend, str, datetime, schemas.Unset] = schemas.unset,
        dttmlastoverhaul: typing.Union[MetaOapg.properties.dttmlastoverhaul, str, datetime, schemas.Unset] = schemas.unset,
        dttmstart: typing.Union[MetaOapg.properties.dttmstart, str, datetime, schemas.Unset] = schemas.unset,
        frame: typing.Union[MetaOapg.properties.frame, str, schemas.Unset] = schemas.unset,
        idrecjob: typing.Union[MetaOapg.properties.idrecjob, str, schemas.Unset] = schemas.unset,
        idrecrod: typing.Union[MetaOapg.properties.idrecrod, str, schemas.Unset] = schemas.unset,
        make: typing.Union[MetaOapg.properties.make, str, schemas.Unset] = schemas.unset,
        model: typing.Union[MetaOapg.properties.model, str, schemas.Unset] = schemas.unset,
        pmtyp: typing.Union[MetaOapg.properties.pmtyp, str, schemas.Unset] = schemas.unset,
        powerrating: typing.Union[MetaOapg.properties.powerrating, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        proposed: typing.Union[MetaOapg.properties.proposed, bool, schemas.Unset] = schemas.unset,
        refid: typing.Union[MetaOapg.properties.refid, str, schemas.Unset] = schemas.unset,
        rpmrating: typing.Union[MetaOapg.properties.rpmrating, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        servicefact: typing.Union[MetaOapg.properties.servicefact, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        sn: typing.Union[MetaOapg.properties.sn, str, schemas.Unset] = schemas.unset,
        speeddes: typing.Union[MetaOapg.properties.speeddes, str, schemas.Unset] = schemas.unset,
        szsheave: typing.Union[MetaOapg.properties.szsheave, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PumpingPrimeMoverData':
        return super().__new__(
            cls,
            *args,
            idrec=idrec,
            idwell=idwell,
            beltlength=beltlength,
            beltmodel=beltmodel,
            beltno=beltno,
            beltpowertranseff=beltpowertranseff,
            beltreductionratio=beltreductionratio,
            beltxsect=beltxsect,
            com=com,
            conditionend=conditionend,
            conditionstart=conditionstart,
            dttmend=dttmend,
            dttmlastoverhaul=dttmlastoverhaul,
            dttmstart=dttmstart,
            frame=frame,
            idrecjob=idrecjob,
            idrecrod=idrecrod,
            make=make,
            model=model,
            pmtyp=pmtyp,
            powerrating=powerrating,
            proposed=proposed,
            refid=refid,
            rpmrating=rpmrating,
            servicefact=servicefact,
            sn=sn,
            speeddes=speeddes,
            szsheave=szsheave,
            _configuration=_configuration,
            **kwargs,
        )
