# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class RFTData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idrec",
            "idwell",
        }
        
        class properties:
            idrec = schemas.StrSchema
            idwell = schemas.StrSchema
            analysiscom = schemas.StrSchema
            analyst = schemas.StrSchema
            com = schemas.StrSchema
            dttm = schemas.DateTimeSchema
            durpretestmax = schemas.NumberSchema
            durrun = schemas.NumberSchema
            idrecgaugeused = schemas.StrSchema
            idreclog = schemas.StrSchema
            idrecwellbore = schemas.StrSchema
            lengthprobe = schemas.NumberSchema
            probetyp = schemas.StrSchema
            qtytestexecute = schemas.IntSchema
            qtytestplan = schemas.IntSchema
            qtytestreliable = schemas.IntSchema
            ratepretestsample = schemas.NumberSchema
            runmethod = schemas.StrSchema
            runno = schemas.StrSchema
            surfacetestunitname = schemas.StrSchema
            testedby = schemas.StrSchema
            toolconfig = schemas.StrSchema
            tooltyp = schemas.StrSchema
            volpretestsample = schemas.NumberSchema
            wellsituation = schemas.StrSchema
            __annotations__ = {
                "idrec": idrec,
                "idwell": idwell,
                "analysiscom": analysiscom,
                "analyst": analyst,
                "com": com,
                "dttm": dttm,
                "durpretestmax": durpretestmax,
                "durrun": durrun,
                "idrecgaugeused": idrecgaugeused,
                "idreclog": idreclog,
                "idrecwellbore": idrecwellbore,
                "lengthprobe": lengthprobe,
                "probetyp": probetyp,
                "qtytestexecute": qtytestexecute,
                "qtytestplan": qtytestplan,
                "qtytestreliable": qtytestreliable,
                "ratepretestsample": ratepretestsample,
                "runmethod": runmethod,
                "runno": runno,
                "surfacetestunitname": surfacetestunitname,
                "testedby": testedby,
                "toolconfig": toolconfig,
                "tooltyp": tooltyp,
                "volpretestsample": volpretestsample,
                "wellsituation": wellsituation,
            }
    
    idrec: MetaOapg.properties.idrec
    idwell: MetaOapg.properties.idwell
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["analysiscom"]) -> MetaOapg.properties.analysiscom: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["analyst"]) -> MetaOapg.properties.analyst: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["com"]) -> MetaOapg.properties.com: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttm"]) -> MetaOapg.properties.dttm: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["durpretestmax"]) -> MetaOapg.properties.durpretestmax: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["durrun"]) -> MetaOapg.properties.durrun: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecgaugeused"]) -> MetaOapg.properties.idrecgaugeused: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idreclog"]) -> MetaOapg.properties.idreclog: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecwellbore"]) -> MetaOapg.properties.idrecwellbore: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lengthprobe"]) -> MetaOapg.properties.lengthprobe: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["probetyp"]) -> MetaOapg.properties.probetyp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["qtytestexecute"]) -> MetaOapg.properties.qtytestexecute: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["qtytestplan"]) -> MetaOapg.properties.qtytestplan: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["qtytestreliable"]) -> MetaOapg.properties.qtytestreliable: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ratepretestsample"]) -> MetaOapg.properties.ratepretestsample: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["runmethod"]) -> MetaOapg.properties.runmethod: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["runno"]) -> MetaOapg.properties.runno: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["surfacetestunitname"]) -> MetaOapg.properties.surfacetestunitname: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["testedby"]) -> MetaOapg.properties.testedby: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["toolconfig"]) -> MetaOapg.properties.toolconfig: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tooltyp"]) -> MetaOapg.properties.tooltyp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["volpretestsample"]) -> MetaOapg.properties.volpretestsample: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wellsituation"]) -> MetaOapg.properties.wellsituation: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "analysiscom", "analyst", "com", "dttm", "durpretestmax", "durrun", "idrecgaugeused", "idreclog", "idrecwellbore", "lengthprobe", "probetyp", "qtytestexecute", "qtytestplan", "qtytestreliable", "ratepretestsample", "runmethod", "runno", "surfacetestunitname", "testedby", "toolconfig", "tooltyp", "volpretestsample", "wellsituation", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["analysiscom"]) -> typing.Union[MetaOapg.properties.analysiscom, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["analyst"]) -> typing.Union[MetaOapg.properties.analyst, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["com"]) -> typing.Union[MetaOapg.properties.com, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttm"]) -> typing.Union[MetaOapg.properties.dttm, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["durpretestmax"]) -> typing.Union[MetaOapg.properties.durpretestmax, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["durrun"]) -> typing.Union[MetaOapg.properties.durrun, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecgaugeused"]) -> typing.Union[MetaOapg.properties.idrecgaugeused, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idreclog"]) -> typing.Union[MetaOapg.properties.idreclog, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecwellbore"]) -> typing.Union[MetaOapg.properties.idrecwellbore, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lengthprobe"]) -> typing.Union[MetaOapg.properties.lengthprobe, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["probetyp"]) -> typing.Union[MetaOapg.properties.probetyp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["qtytestexecute"]) -> typing.Union[MetaOapg.properties.qtytestexecute, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["qtytestplan"]) -> typing.Union[MetaOapg.properties.qtytestplan, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["qtytestreliable"]) -> typing.Union[MetaOapg.properties.qtytestreliable, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ratepretestsample"]) -> typing.Union[MetaOapg.properties.ratepretestsample, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["runmethod"]) -> typing.Union[MetaOapg.properties.runmethod, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["runno"]) -> typing.Union[MetaOapg.properties.runno, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["surfacetestunitname"]) -> typing.Union[MetaOapg.properties.surfacetestunitname, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["testedby"]) -> typing.Union[MetaOapg.properties.testedby, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["toolconfig"]) -> typing.Union[MetaOapg.properties.toolconfig, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tooltyp"]) -> typing.Union[MetaOapg.properties.tooltyp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["volpretestsample"]) -> typing.Union[MetaOapg.properties.volpretestsample, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wellsituation"]) -> typing.Union[MetaOapg.properties.wellsituation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "analysiscom", "analyst", "com", "dttm", "durpretestmax", "durrun", "idrecgaugeused", "idreclog", "idrecwellbore", "lengthprobe", "probetyp", "qtytestexecute", "qtytestplan", "qtytestreliable", "ratepretestsample", "runmethod", "runno", "surfacetestunitname", "testedby", "toolconfig", "tooltyp", "volpretestsample", "wellsituation", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idrec: typing.Union[MetaOapg.properties.idrec, str, ],
        idwell: typing.Union[MetaOapg.properties.idwell, str, ],
        analysiscom: typing.Union[MetaOapg.properties.analysiscom, str, schemas.Unset] = schemas.unset,
        analyst: typing.Union[MetaOapg.properties.analyst, str, schemas.Unset] = schemas.unset,
        com: typing.Union[MetaOapg.properties.com, str, schemas.Unset] = schemas.unset,
        dttm: typing.Union[MetaOapg.properties.dttm, str, datetime, schemas.Unset] = schemas.unset,
        durpretestmax: typing.Union[MetaOapg.properties.durpretestmax, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        durrun: typing.Union[MetaOapg.properties.durrun, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        idrecgaugeused: typing.Union[MetaOapg.properties.idrecgaugeused, str, schemas.Unset] = schemas.unset,
        idreclog: typing.Union[MetaOapg.properties.idreclog, str, schemas.Unset] = schemas.unset,
        idrecwellbore: typing.Union[MetaOapg.properties.idrecwellbore, str, schemas.Unset] = schemas.unset,
        lengthprobe: typing.Union[MetaOapg.properties.lengthprobe, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        probetyp: typing.Union[MetaOapg.properties.probetyp, str, schemas.Unset] = schemas.unset,
        qtytestexecute: typing.Union[MetaOapg.properties.qtytestexecute, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        qtytestplan: typing.Union[MetaOapg.properties.qtytestplan, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        qtytestreliable: typing.Union[MetaOapg.properties.qtytestreliable, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        ratepretestsample: typing.Union[MetaOapg.properties.ratepretestsample, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        runmethod: typing.Union[MetaOapg.properties.runmethod, str, schemas.Unset] = schemas.unset,
        runno: typing.Union[MetaOapg.properties.runno, str, schemas.Unset] = schemas.unset,
        surfacetestunitname: typing.Union[MetaOapg.properties.surfacetestunitname, str, schemas.Unset] = schemas.unset,
        testedby: typing.Union[MetaOapg.properties.testedby, str, schemas.Unset] = schemas.unset,
        toolconfig: typing.Union[MetaOapg.properties.toolconfig, str, schemas.Unset] = schemas.unset,
        tooltyp: typing.Union[MetaOapg.properties.tooltyp, str, schemas.Unset] = schemas.unset,
        volpretestsample: typing.Union[MetaOapg.properties.volpretestsample, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        wellsituation: typing.Union[MetaOapg.properties.wellsituation, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'RFTData':
        return super().__new__(
            cls,
            *args,
            idrec=idrec,
            idwell=idwell,
            analysiscom=analysiscom,
            analyst=analyst,
            com=com,
            dttm=dttm,
            durpretestmax=durpretestmax,
            durrun=durrun,
            idrecgaugeused=idrecgaugeused,
            idreclog=idreclog,
            idrecwellbore=idrecwellbore,
            lengthprobe=lengthprobe,
            probetyp=probetyp,
            qtytestexecute=qtytestexecute,
            qtytestplan=qtytestplan,
            qtytestreliable=qtytestreliable,
            ratepretestsample=ratepretestsample,
            runmethod=runmethod,
            runno=runno,
            surfacetestunitname=surfacetestunitname,
            testedby=testedby,
            toolconfig=toolconfig,
            tooltyp=tooltyp,
            volpretestsample=volpretestsample,
            wellsituation=wellsituation,
            _configuration=_configuration,
            **kwargs,
        )
