# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class MaterialWasteTransferData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idrec",
            "idwell",
        }
        
        class properties:
            idrec = schemas.StrSchema
            idwell = schemas.StrSchema
            acctnofrom = schemas.StrSchema
            acctnoto = schemas.StrSchema
            approvebyname = schemas.StrSchema
            carrier = schemas.StrSchema
            carrierdrivername = schemas.StrSchema
            carrierrefno = schemas.StrSchema
            com = schemas.StrSchema
            dttm = schemas.DateTimeSchema
            dttmapprove = schemas.DateTimeSchema
            dttmmaterialtrans = schemas.DateTimeSchema
            idrecafecustom = schemas.StrSchema
            idrecjobcontact = schemas.StrSchema
            idrecjobsupportvessel = schemas.StrSchema
            idrecparent = schemas.StrSchema
            locationdes = schemas.StrSchema
            locationtyp1 = schemas.StrSchema
            locationtyp2 = schemas.StrSchema
            materialtransno = schemas.StrSchema
            materialtransreason = schemas.StrSchema
            mattransida = schemas.StrSchema
            mattransidb = schemas.StrSchema
            status = schemas.StrSchema
            tofrom = schemas.StrSchema
            usertxt1 = schemas.StrSchema
            __annotations__ = {
                "idrec": idrec,
                "idwell": idwell,
                "acctnofrom": acctnofrom,
                "acctnoto": acctnoto,
                "approvebyname": approvebyname,
                "carrier": carrier,
                "carrierdrivername": carrierdrivername,
                "carrierrefno": carrierrefno,
                "com": com,
                "dttm": dttm,
                "dttmapprove": dttmapprove,
                "dttmmaterialtrans": dttmmaterialtrans,
                "idrecafecustom": idrecafecustom,
                "idrecjobcontact": idrecjobcontact,
                "idrecjobsupportvessel": idrecjobsupportvessel,
                "idrecparent": idrecparent,
                "locationdes": locationdes,
                "locationtyp1": locationtyp1,
                "locationtyp2": locationtyp2,
                "materialtransno": materialtransno,
                "materialtransreason": materialtransreason,
                "mattransida": mattransida,
                "mattransidb": mattransidb,
                "status": status,
                "tofrom": tofrom,
                "usertxt1": usertxt1,
            }
    
    idrec: MetaOapg.properties.idrec
    idwell: MetaOapg.properties.idwell
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["acctnofrom"]) -> MetaOapg.properties.acctnofrom: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["acctnoto"]) -> MetaOapg.properties.acctnoto: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["approvebyname"]) -> MetaOapg.properties.approvebyname: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["carrier"]) -> MetaOapg.properties.carrier: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["carrierdrivername"]) -> MetaOapg.properties.carrierdrivername: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["carrierrefno"]) -> MetaOapg.properties.carrierrefno: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["com"]) -> MetaOapg.properties.com: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttm"]) -> MetaOapg.properties.dttm: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmapprove"]) -> MetaOapg.properties.dttmapprove: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmmaterialtrans"]) -> MetaOapg.properties.dttmmaterialtrans: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecafecustom"]) -> MetaOapg.properties.idrecafecustom: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecjobcontact"]) -> MetaOapg.properties.idrecjobcontact: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecjobsupportvessel"]) -> MetaOapg.properties.idrecjobsupportvessel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecparent"]) -> MetaOapg.properties.idrecparent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["locationdes"]) -> MetaOapg.properties.locationdes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["locationtyp1"]) -> MetaOapg.properties.locationtyp1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["locationtyp2"]) -> MetaOapg.properties.locationtyp2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["materialtransno"]) -> MetaOapg.properties.materialtransno: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["materialtransreason"]) -> MetaOapg.properties.materialtransreason: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mattransida"]) -> MetaOapg.properties.mattransida: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mattransidb"]) -> MetaOapg.properties.mattransidb: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tofrom"]) -> MetaOapg.properties.tofrom: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usertxt1"]) -> MetaOapg.properties.usertxt1: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "acctnofrom", "acctnoto", "approvebyname", "carrier", "carrierdrivername", "carrierrefno", "com", "dttm", "dttmapprove", "dttmmaterialtrans", "idrecafecustom", "idrecjobcontact", "idrecjobsupportvessel", "idrecparent", "locationdes", "locationtyp1", "locationtyp2", "materialtransno", "materialtransreason", "mattransida", "mattransidb", "status", "tofrom", "usertxt1", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["acctnofrom"]) -> typing.Union[MetaOapg.properties.acctnofrom, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["acctnoto"]) -> typing.Union[MetaOapg.properties.acctnoto, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["approvebyname"]) -> typing.Union[MetaOapg.properties.approvebyname, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["carrier"]) -> typing.Union[MetaOapg.properties.carrier, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["carrierdrivername"]) -> typing.Union[MetaOapg.properties.carrierdrivername, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["carrierrefno"]) -> typing.Union[MetaOapg.properties.carrierrefno, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["com"]) -> typing.Union[MetaOapg.properties.com, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttm"]) -> typing.Union[MetaOapg.properties.dttm, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmapprove"]) -> typing.Union[MetaOapg.properties.dttmapprove, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmmaterialtrans"]) -> typing.Union[MetaOapg.properties.dttmmaterialtrans, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecafecustom"]) -> typing.Union[MetaOapg.properties.idrecafecustom, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecjobcontact"]) -> typing.Union[MetaOapg.properties.idrecjobcontact, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecjobsupportvessel"]) -> typing.Union[MetaOapg.properties.idrecjobsupportvessel, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecparent"]) -> typing.Union[MetaOapg.properties.idrecparent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["locationdes"]) -> typing.Union[MetaOapg.properties.locationdes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["locationtyp1"]) -> typing.Union[MetaOapg.properties.locationtyp1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["locationtyp2"]) -> typing.Union[MetaOapg.properties.locationtyp2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["materialtransno"]) -> typing.Union[MetaOapg.properties.materialtransno, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["materialtransreason"]) -> typing.Union[MetaOapg.properties.materialtransreason, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mattransida"]) -> typing.Union[MetaOapg.properties.mattransida, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mattransidb"]) -> typing.Union[MetaOapg.properties.mattransidb, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tofrom"]) -> typing.Union[MetaOapg.properties.tofrom, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usertxt1"]) -> typing.Union[MetaOapg.properties.usertxt1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "acctnofrom", "acctnoto", "approvebyname", "carrier", "carrierdrivername", "carrierrefno", "com", "dttm", "dttmapprove", "dttmmaterialtrans", "idrecafecustom", "idrecjobcontact", "idrecjobsupportvessel", "idrecparent", "locationdes", "locationtyp1", "locationtyp2", "materialtransno", "materialtransreason", "mattransida", "mattransidb", "status", "tofrom", "usertxt1", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idrec: typing.Union[MetaOapg.properties.idrec, str, ],
        idwell: typing.Union[MetaOapg.properties.idwell, str, ],
        acctnofrom: typing.Union[MetaOapg.properties.acctnofrom, str, schemas.Unset] = schemas.unset,
        acctnoto: typing.Union[MetaOapg.properties.acctnoto, str, schemas.Unset] = schemas.unset,
        approvebyname: typing.Union[MetaOapg.properties.approvebyname, str, schemas.Unset] = schemas.unset,
        carrier: typing.Union[MetaOapg.properties.carrier, str, schemas.Unset] = schemas.unset,
        carrierdrivername: typing.Union[MetaOapg.properties.carrierdrivername, str, schemas.Unset] = schemas.unset,
        carrierrefno: typing.Union[MetaOapg.properties.carrierrefno, str, schemas.Unset] = schemas.unset,
        com: typing.Union[MetaOapg.properties.com, str, schemas.Unset] = schemas.unset,
        dttm: typing.Union[MetaOapg.properties.dttm, str, datetime, schemas.Unset] = schemas.unset,
        dttmapprove: typing.Union[MetaOapg.properties.dttmapprove, str, datetime, schemas.Unset] = schemas.unset,
        dttmmaterialtrans: typing.Union[MetaOapg.properties.dttmmaterialtrans, str, datetime, schemas.Unset] = schemas.unset,
        idrecafecustom: typing.Union[MetaOapg.properties.idrecafecustom, str, schemas.Unset] = schemas.unset,
        idrecjobcontact: typing.Union[MetaOapg.properties.idrecjobcontact, str, schemas.Unset] = schemas.unset,
        idrecjobsupportvessel: typing.Union[MetaOapg.properties.idrecjobsupportvessel, str, schemas.Unset] = schemas.unset,
        idrecparent: typing.Union[MetaOapg.properties.idrecparent, str, schemas.Unset] = schemas.unset,
        locationdes: typing.Union[MetaOapg.properties.locationdes, str, schemas.Unset] = schemas.unset,
        locationtyp1: typing.Union[MetaOapg.properties.locationtyp1, str, schemas.Unset] = schemas.unset,
        locationtyp2: typing.Union[MetaOapg.properties.locationtyp2, str, schemas.Unset] = schemas.unset,
        materialtransno: typing.Union[MetaOapg.properties.materialtransno, str, schemas.Unset] = schemas.unset,
        materialtransreason: typing.Union[MetaOapg.properties.materialtransreason, str, schemas.Unset] = schemas.unset,
        mattransida: typing.Union[MetaOapg.properties.mattransida, str, schemas.Unset] = schemas.unset,
        mattransidb: typing.Union[MetaOapg.properties.mattransidb, str, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        tofrom: typing.Union[MetaOapg.properties.tofrom, str, schemas.Unset] = schemas.unset,
        usertxt1: typing.Union[MetaOapg.properties.usertxt1, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'MaterialWasteTransferData':
        return super().__new__(
            cls,
            *args,
            idrec=idrec,
            idwell=idwell,
            acctnofrom=acctnofrom,
            acctnoto=acctnoto,
            approvebyname=approvebyname,
            carrier=carrier,
            carrierdrivername=carrierdrivername,
            carrierrefno=carrierrefno,
            com=com,
            dttm=dttm,
            dttmapprove=dttmapprove,
            dttmmaterialtrans=dttmmaterialtrans,
            idrecafecustom=idrecafecustom,
            idrecjobcontact=idrecjobcontact,
            idrecjobsupportvessel=idrecjobsupportvessel,
            idrecparent=idrecparent,
            locationdes=locationdes,
            locationtyp1=locationtyp1,
            locationtyp2=locationtyp2,
            materialtransno=materialtransno,
            materialtransreason=materialtransreason,
            mattransida=mattransida,
            mattransidb=mattransidb,
            status=status,
            tofrom=tofrom,
            usertxt1=usertxt1,
            _configuration=_configuration,
            **kwargs,
        )
