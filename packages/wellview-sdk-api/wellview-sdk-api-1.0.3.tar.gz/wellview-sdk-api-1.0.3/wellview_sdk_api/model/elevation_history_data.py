# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class ElevationHistoryData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idrec",
            "idwell",
        }
        
        class properties:
            idrec = schemas.StrSchema
            idwell = schemas.StrSchema
            elvdttmend = schemas.DateTimeSchema
            elvdttmstart = schemas.DateTimeSchema
            elvother = schemas.NumberSchema
            elvotherlabel = schemas.StrSchema
            elvothernote = schemas.StrSchema
            __annotations__ = {
                "idrec": idrec,
                "idwell": idwell,
                "elvdttmend": elvdttmend,
                "elvdttmstart": elvdttmstart,
                "elvother": elvother,
                "elvotherlabel": elvotherlabel,
                "elvothernote": elvothernote,
            }
    
    idrec: MetaOapg.properties.idrec
    idwell: MetaOapg.properties.idwell
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["elvdttmend"]) -> MetaOapg.properties.elvdttmend: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["elvdttmstart"]) -> MetaOapg.properties.elvdttmstart: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["elvother"]) -> MetaOapg.properties.elvother: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["elvotherlabel"]) -> MetaOapg.properties.elvotherlabel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["elvothernote"]) -> MetaOapg.properties.elvothernote: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "elvdttmend", "elvdttmstart", "elvother", "elvotherlabel", "elvothernote", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["elvdttmend"]) -> typing.Union[MetaOapg.properties.elvdttmend, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["elvdttmstart"]) -> typing.Union[MetaOapg.properties.elvdttmstart, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["elvother"]) -> typing.Union[MetaOapg.properties.elvother, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["elvotherlabel"]) -> typing.Union[MetaOapg.properties.elvotherlabel, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["elvothernote"]) -> typing.Union[MetaOapg.properties.elvothernote, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "elvdttmend", "elvdttmstart", "elvother", "elvotherlabel", "elvothernote", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idrec: typing.Union[MetaOapg.properties.idrec, str, ],
        idwell: typing.Union[MetaOapg.properties.idwell, str, ],
        elvdttmend: typing.Union[MetaOapg.properties.elvdttmend, str, datetime, schemas.Unset] = schemas.unset,
        elvdttmstart: typing.Union[MetaOapg.properties.elvdttmstart, str, datetime, schemas.Unset] = schemas.unset,
        elvother: typing.Union[MetaOapg.properties.elvother, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        elvotherlabel: typing.Union[MetaOapg.properties.elvotherlabel, str, schemas.Unset] = schemas.unset,
        elvothernote: typing.Union[MetaOapg.properties.elvothernote, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ElevationHistoryData':
        return super().__new__(
            cls,
            *args,
            idrec=idrec,
            idwell=idwell,
            elvdttmend=elvdttmend,
            elvdttmstart=elvdttmstart,
            elvother=elvother,
            elvotherlabel=elvotherlabel,
            elvothernote=elvothernote,
            _configuration=_configuration,
            **kwargs,
        )
