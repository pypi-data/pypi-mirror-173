# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class OtherInHoleData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idrec",
            "idwell",
        }
        
        class properties:
            idrec = schemas.StrSchema
            idwell = schemas.StrSchema
            coating = schemas.StrSchema
            com = schemas.StrSchema
            compsubtyp = schemas.StrSchema
            conditionpull = schemas.StrSchema
            conditionrun = schemas.StrSchema
            cost = schemas.NumberSchema
            costunitlabel = schemas.StrSchema
            depthbtm = schemas.NumberSchema
            depthtop = schemas.NumberSchema
            des = schemas.StrSchema
            dttmmanufacture = schemas.DateTimeSchema
            dttmonbottom = schemas.DateTimeSchema
            dttmoutofhole = schemas.DateTimeSchema
            dttmpickup = schemas.DateTimeSchema
            dttmpull = schemas.DateTimeSchema
            dttmrun = schemas.DateTimeSchema
            fishnecklength = schemas.NumberSchema
            fishneckod = schemas.NumberSchema
            hoursstart = schemas.NumberSchema
            iconname = schemas.StrSchema
            idrecjobpull = schemas.StrSchema
            idrecjobrun = schemas.StrSchema
            idrecstring = schemas.StrSchema
            idrecwellbore = schemas.StrSchema
            latposition = schemas.NumberSchema
            make = schemas.StrSchema
            material = schemas.StrSchema
            model = schemas.StrSchema
            presrating = schemas.NumberSchema
            proposedpull = schemas.BoolSchema
            proposedrun = schemas.BoolSchema
            pullreason = schemas.StrSchema
            pullreasondetail = schemas.StrSchema
            refid = schemas.StrSchema
            sn = schemas.StrSchema
            szdrift = schemas.NumberSchema
            szidnom = schemas.NumberSchema
            szodmax = schemas.NumberSchema
            szodnom = schemas.NumberSchema
            temprating = schemas.NumberSchema
            __annotations__ = {
                "idrec": idrec,
                "idwell": idwell,
                "coating": coating,
                "com": com,
                "compsubtyp": compsubtyp,
                "conditionpull": conditionpull,
                "conditionrun": conditionrun,
                "cost": cost,
                "costunitlabel": costunitlabel,
                "depthbtm": depthbtm,
                "depthtop": depthtop,
                "des": des,
                "dttmmanufacture": dttmmanufacture,
                "dttmonbottom": dttmonbottom,
                "dttmoutofhole": dttmoutofhole,
                "dttmpickup": dttmpickup,
                "dttmpull": dttmpull,
                "dttmrun": dttmrun,
                "fishnecklength": fishnecklength,
                "fishneckod": fishneckod,
                "hoursstart": hoursstart,
                "iconname": iconname,
                "idrecjobpull": idrecjobpull,
                "idrecjobrun": idrecjobrun,
                "idrecstring": idrecstring,
                "idrecwellbore": idrecwellbore,
                "latposition": latposition,
                "make": make,
                "material": material,
                "model": model,
                "presrating": presrating,
                "proposedpull": proposedpull,
                "proposedrun": proposedrun,
                "pullreason": pullreason,
                "pullreasondetail": pullreasondetail,
                "refid": refid,
                "sn": sn,
                "szdrift": szdrift,
                "szidnom": szidnom,
                "szodmax": szodmax,
                "szodnom": szodnom,
                "temprating": temprating,
            }
    
    idrec: MetaOapg.properties.idrec
    idwell: MetaOapg.properties.idwell
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["coating"]) -> MetaOapg.properties.coating: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["com"]) -> MetaOapg.properties.com: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["compsubtyp"]) -> MetaOapg.properties.compsubtyp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["conditionpull"]) -> MetaOapg.properties.conditionpull: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["conditionrun"]) -> MetaOapg.properties.conditionrun: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cost"]) -> MetaOapg.properties.cost: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["costunitlabel"]) -> MetaOapg.properties.costunitlabel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["depthbtm"]) -> MetaOapg.properties.depthbtm: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["depthtop"]) -> MetaOapg.properties.depthtop: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["des"]) -> MetaOapg.properties.des: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmmanufacture"]) -> MetaOapg.properties.dttmmanufacture: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmonbottom"]) -> MetaOapg.properties.dttmonbottom: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmoutofhole"]) -> MetaOapg.properties.dttmoutofhole: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmpickup"]) -> MetaOapg.properties.dttmpickup: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmpull"]) -> MetaOapg.properties.dttmpull: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmrun"]) -> MetaOapg.properties.dttmrun: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fishnecklength"]) -> MetaOapg.properties.fishnecklength: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fishneckod"]) -> MetaOapg.properties.fishneckod: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hoursstart"]) -> MetaOapg.properties.hoursstart: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["iconname"]) -> MetaOapg.properties.iconname: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecjobpull"]) -> MetaOapg.properties.idrecjobpull: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecjobrun"]) -> MetaOapg.properties.idrecjobrun: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecstring"]) -> MetaOapg.properties.idrecstring: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecwellbore"]) -> MetaOapg.properties.idrecwellbore: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["latposition"]) -> MetaOapg.properties.latposition: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["make"]) -> MetaOapg.properties.make: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["material"]) -> MetaOapg.properties.material: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["model"]) -> MetaOapg.properties.model: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["presrating"]) -> MetaOapg.properties.presrating: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["proposedpull"]) -> MetaOapg.properties.proposedpull: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["proposedrun"]) -> MetaOapg.properties.proposedrun: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pullreason"]) -> MetaOapg.properties.pullreason: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pullreasondetail"]) -> MetaOapg.properties.pullreasondetail: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["refid"]) -> MetaOapg.properties.refid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sn"]) -> MetaOapg.properties.sn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["szdrift"]) -> MetaOapg.properties.szdrift: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["szidnom"]) -> MetaOapg.properties.szidnom: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["szodmax"]) -> MetaOapg.properties.szodmax: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["szodnom"]) -> MetaOapg.properties.szodnom: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["temprating"]) -> MetaOapg.properties.temprating: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "coating", "com", "compsubtyp", "conditionpull", "conditionrun", "cost", "costunitlabel", "depthbtm", "depthtop", "des", "dttmmanufacture", "dttmonbottom", "dttmoutofhole", "dttmpickup", "dttmpull", "dttmrun", "fishnecklength", "fishneckod", "hoursstart", "iconname", "idrecjobpull", "idrecjobrun", "idrecstring", "idrecwellbore", "latposition", "make", "material", "model", "presrating", "proposedpull", "proposedrun", "pullreason", "pullreasondetail", "refid", "sn", "szdrift", "szidnom", "szodmax", "szodnom", "temprating", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["coating"]) -> typing.Union[MetaOapg.properties.coating, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["com"]) -> typing.Union[MetaOapg.properties.com, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["compsubtyp"]) -> typing.Union[MetaOapg.properties.compsubtyp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["conditionpull"]) -> typing.Union[MetaOapg.properties.conditionpull, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["conditionrun"]) -> typing.Union[MetaOapg.properties.conditionrun, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cost"]) -> typing.Union[MetaOapg.properties.cost, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["costunitlabel"]) -> typing.Union[MetaOapg.properties.costunitlabel, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["depthbtm"]) -> typing.Union[MetaOapg.properties.depthbtm, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["depthtop"]) -> typing.Union[MetaOapg.properties.depthtop, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["des"]) -> typing.Union[MetaOapg.properties.des, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmmanufacture"]) -> typing.Union[MetaOapg.properties.dttmmanufacture, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmonbottom"]) -> typing.Union[MetaOapg.properties.dttmonbottom, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmoutofhole"]) -> typing.Union[MetaOapg.properties.dttmoutofhole, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmpickup"]) -> typing.Union[MetaOapg.properties.dttmpickup, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmpull"]) -> typing.Union[MetaOapg.properties.dttmpull, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmrun"]) -> typing.Union[MetaOapg.properties.dttmrun, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fishnecklength"]) -> typing.Union[MetaOapg.properties.fishnecklength, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fishneckod"]) -> typing.Union[MetaOapg.properties.fishneckod, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hoursstart"]) -> typing.Union[MetaOapg.properties.hoursstart, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["iconname"]) -> typing.Union[MetaOapg.properties.iconname, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecjobpull"]) -> typing.Union[MetaOapg.properties.idrecjobpull, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecjobrun"]) -> typing.Union[MetaOapg.properties.idrecjobrun, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecstring"]) -> typing.Union[MetaOapg.properties.idrecstring, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecwellbore"]) -> typing.Union[MetaOapg.properties.idrecwellbore, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["latposition"]) -> typing.Union[MetaOapg.properties.latposition, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["make"]) -> typing.Union[MetaOapg.properties.make, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["material"]) -> typing.Union[MetaOapg.properties.material, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["model"]) -> typing.Union[MetaOapg.properties.model, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["presrating"]) -> typing.Union[MetaOapg.properties.presrating, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["proposedpull"]) -> typing.Union[MetaOapg.properties.proposedpull, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["proposedrun"]) -> typing.Union[MetaOapg.properties.proposedrun, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pullreason"]) -> typing.Union[MetaOapg.properties.pullreason, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pullreasondetail"]) -> typing.Union[MetaOapg.properties.pullreasondetail, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["refid"]) -> typing.Union[MetaOapg.properties.refid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sn"]) -> typing.Union[MetaOapg.properties.sn, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["szdrift"]) -> typing.Union[MetaOapg.properties.szdrift, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["szidnom"]) -> typing.Union[MetaOapg.properties.szidnom, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["szodmax"]) -> typing.Union[MetaOapg.properties.szodmax, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["szodnom"]) -> typing.Union[MetaOapg.properties.szodnom, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["temprating"]) -> typing.Union[MetaOapg.properties.temprating, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "coating", "com", "compsubtyp", "conditionpull", "conditionrun", "cost", "costunitlabel", "depthbtm", "depthtop", "des", "dttmmanufacture", "dttmonbottom", "dttmoutofhole", "dttmpickup", "dttmpull", "dttmrun", "fishnecklength", "fishneckod", "hoursstart", "iconname", "idrecjobpull", "idrecjobrun", "idrecstring", "idrecwellbore", "latposition", "make", "material", "model", "presrating", "proposedpull", "proposedrun", "pullreason", "pullreasondetail", "refid", "sn", "szdrift", "szidnom", "szodmax", "szodnom", "temprating", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idrec: typing.Union[MetaOapg.properties.idrec, str, ],
        idwell: typing.Union[MetaOapg.properties.idwell, str, ],
        coating: typing.Union[MetaOapg.properties.coating, str, schemas.Unset] = schemas.unset,
        com: typing.Union[MetaOapg.properties.com, str, schemas.Unset] = schemas.unset,
        compsubtyp: typing.Union[MetaOapg.properties.compsubtyp, str, schemas.Unset] = schemas.unset,
        conditionpull: typing.Union[MetaOapg.properties.conditionpull, str, schemas.Unset] = schemas.unset,
        conditionrun: typing.Union[MetaOapg.properties.conditionrun, str, schemas.Unset] = schemas.unset,
        cost: typing.Union[MetaOapg.properties.cost, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        costunitlabel: typing.Union[MetaOapg.properties.costunitlabel, str, schemas.Unset] = schemas.unset,
        depthbtm: typing.Union[MetaOapg.properties.depthbtm, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        depthtop: typing.Union[MetaOapg.properties.depthtop, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        des: typing.Union[MetaOapg.properties.des, str, schemas.Unset] = schemas.unset,
        dttmmanufacture: typing.Union[MetaOapg.properties.dttmmanufacture, str, datetime, schemas.Unset] = schemas.unset,
        dttmonbottom: typing.Union[MetaOapg.properties.dttmonbottom, str, datetime, schemas.Unset] = schemas.unset,
        dttmoutofhole: typing.Union[MetaOapg.properties.dttmoutofhole, str, datetime, schemas.Unset] = schemas.unset,
        dttmpickup: typing.Union[MetaOapg.properties.dttmpickup, str, datetime, schemas.Unset] = schemas.unset,
        dttmpull: typing.Union[MetaOapg.properties.dttmpull, str, datetime, schemas.Unset] = schemas.unset,
        dttmrun: typing.Union[MetaOapg.properties.dttmrun, str, datetime, schemas.Unset] = schemas.unset,
        fishnecklength: typing.Union[MetaOapg.properties.fishnecklength, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        fishneckod: typing.Union[MetaOapg.properties.fishneckod, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        hoursstart: typing.Union[MetaOapg.properties.hoursstart, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        iconname: typing.Union[MetaOapg.properties.iconname, str, schemas.Unset] = schemas.unset,
        idrecjobpull: typing.Union[MetaOapg.properties.idrecjobpull, str, schemas.Unset] = schemas.unset,
        idrecjobrun: typing.Union[MetaOapg.properties.idrecjobrun, str, schemas.Unset] = schemas.unset,
        idrecstring: typing.Union[MetaOapg.properties.idrecstring, str, schemas.Unset] = schemas.unset,
        idrecwellbore: typing.Union[MetaOapg.properties.idrecwellbore, str, schemas.Unset] = schemas.unset,
        latposition: typing.Union[MetaOapg.properties.latposition, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        make: typing.Union[MetaOapg.properties.make, str, schemas.Unset] = schemas.unset,
        material: typing.Union[MetaOapg.properties.material, str, schemas.Unset] = schemas.unset,
        model: typing.Union[MetaOapg.properties.model, str, schemas.Unset] = schemas.unset,
        presrating: typing.Union[MetaOapg.properties.presrating, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        proposedpull: typing.Union[MetaOapg.properties.proposedpull, bool, schemas.Unset] = schemas.unset,
        proposedrun: typing.Union[MetaOapg.properties.proposedrun, bool, schemas.Unset] = schemas.unset,
        pullreason: typing.Union[MetaOapg.properties.pullreason, str, schemas.Unset] = schemas.unset,
        pullreasondetail: typing.Union[MetaOapg.properties.pullreasondetail, str, schemas.Unset] = schemas.unset,
        refid: typing.Union[MetaOapg.properties.refid, str, schemas.Unset] = schemas.unset,
        sn: typing.Union[MetaOapg.properties.sn, str, schemas.Unset] = schemas.unset,
        szdrift: typing.Union[MetaOapg.properties.szdrift, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        szidnom: typing.Union[MetaOapg.properties.szidnom, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        szodmax: typing.Union[MetaOapg.properties.szodmax, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        szodnom: typing.Union[MetaOapg.properties.szodnom, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        temprating: typing.Union[MetaOapg.properties.temprating, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'OtherInHoleData':
        return super().__new__(
            cls,
            *args,
            idrec=idrec,
            idwell=idwell,
            coating=coating,
            com=com,
            compsubtyp=compsubtyp,
            conditionpull=conditionpull,
            conditionrun=conditionrun,
            cost=cost,
            costunitlabel=costunitlabel,
            depthbtm=depthbtm,
            depthtop=depthtop,
            des=des,
            dttmmanufacture=dttmmanufacture,
            dttmonbottom=dttmonbottom,
            dttmoutofhole=dttmoutofhole,
            dttmpickup=dttmpickup,
            dttmpull=dttmpull,
            dttmrun=dttmrun,
            fishnecklength=fishnecklength,
            fishneckod=fishneckod,
            hoursstart=hoursstart,
            iconname=iconname,
            idrecjobpull=idrecjobpull,
            idrecjobrun=idrecjobrun,
            idrecstring=idrecstring,
            idrecwellbore=idrecwellbore,
            latposition=latposition,
            make=make,
            material=material,
            model=model,
            presrating=presrating,
            proposedpull=proposedpull,
            proposedrun=proposedrun,
            pullreason=pullreason,
            pullreasondetail=pullreasondetail,
            refid=refid,
            sn=sn,
            szdrift=szdrift,
            szidnom=szidnom,
            szodmax=szodmax,
            szodnom=szodnom,
            temprating=temprating,
            _configuration=_configuration,
            **kwargs,
        )
