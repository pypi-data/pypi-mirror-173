# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class SourceDestinationData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idrec",
            "idwell",
        }
        
        class properties:
            idrec = schemas.StrSchema
            idwell = schemas.StrSchema
            com = schemas.StrSchema
            des = schemas.StrSchema
            diversionauth = schemas.StrSchema
            diversiontyp1 = schemas.StrSchema
            diversiontyp2 = schemas.StrSchema
            dttmlicenseend = schemas.DateTimeSchema
            dttmlicensestart = schemas.DateTimeSchema
            geologicaldes = schemas.StrSchema
            idrecsvsite = schemas.StrSchema
            idrecsvwatersource = schemas.StrSchema
            idrecsvwatersourcedetail = schemas.StrSchema
            licenseno = schemas.StrSchema
            ratediversionmax = schemas.NumberSchema
            refid = schemas.StrSchema
            typ1 = schemas.StrSchema
            typ2 = schemas.StrSchema
            __annotations__ = {
                "idrec": idrec,
                "idwell": idwell,
                "com": com,
                "des": des,
                "diversionauth": diversionauth,
                "diversiontyp1": diversiontyp1,
                "diversiontyp2": diversiontyp2,
                "dttmlicenseend": dttmlicenseend,
                "dttmlicensestart": dttmlicensestart,
                "geologicaldes": geologicaldes,
                "idrecsvsite": idrecsvsite,
                "idrecsvwatersource": idrecsvwatersource,
                "idrecsvwatersourcedetail": idrecsvwatersourcedetail,
                "licenseno": licenseno,
                "ratediversionmax": ratediversionmax,
                "refid": refid,
                "typ1": typ1,
                "typ2": typ2,
            }
    
    idrec: MetaOapg.properties.idrec
    idwell: MetaOapg.properties.idwell
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["com"]) -> MetaOapg.properties.com: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["des"]) -> MetaOapg.properties.des: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["diversionauth"]) -> MetaOapg.properties.diversionauth: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["diversiontyp1"]) -> MetaOapg.properties.diversiontyp1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["diversiontyp2"]) -> MetaOapg.properties.diversiontyp2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmlicenseend"]) -> MetaOapg.properties.dttmlicenseend: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmlicensestart"]) -> MetaOapg.properties.dttmlicensestart: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["geologicaldes"]) -> MetaOapg.properties.geologicaldes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecsvsite"]) -> MetaOapg.properties.idrecsvsite: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecsvwatersource"]) -> MetaOapg.properties.idrecsvwatersource: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecsvwatersourcedetail"]) -> MetaOapg.properties.idrecsvwatersourcedetail: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["licenseno"]) -> MetaOapg.properties.licenseno: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ratediversionmax"]) -> MetaOapg.properties.ratediversionmax: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["refid"]) -> MetaOapg.properties.refid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["typ1"]) -> MetaOapg.properties.typ1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["typ2"]) -> MetaOapg.properties.typ2: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "com", "des", "diversionauth", "diversiontyp1", "diversiontyp2", "dttmlicenseend", "dttmlicensestart", "geologicaldes", "idrecsvsite", "idrecsvwatersource", "idrecsvwatersourcedetail", "licenseno", "ratediversionmax", "refid", "typ1", "typ2", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["com"]) -> typing.Union[MetaOapg.properties.com, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["des"]) -> typing.Union[MetaOapg.properties.des, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["diversionauth"]) -> typing.Union[MetaOapg.properties.diversionauth, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["diversiontyp1"]) -> typing.Union[MetaOapg.properties.diversiontyp1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["diversiontyp2"]) -> typing.Union[MetaOapg.properties.diversiontyp2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmlicenseend"]) -> typing.Union[MetaOapg.properties.dttmlicenseend, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmlicensestart"]) -> typing.Union[MetaOapg.properties.dttmlicensestart, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["geologicaldes"]) -> typing.Union[MetaOapg.properties.geologicaldes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecsvsite"]) -> typing.Union[MetaOapg.properties.idrecsvsite, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecsvwatersource"]) -> typing.Union[MetaOapg.properties.idrecsvwatersource, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecsvwatersourcedetail"]) -> typing.Union[MetaOapg.properties.idrecsvwatersourcedetail, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["licenseno"]) -> typing.Union[MetaOapg.properties.licenseno, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ratediversionmax"]) -> typing.Union[MetaOapg.properties.ratediversionmax, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["refid"]) -> typing.Union[MetaOapg.properties.refid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["typ1"]) -> typing.Union[MetaOapg.properties.typ1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["typ2"]) -> typing.Union[MetaOapg.properties.typ2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "com", "des", "diversionauth", "diversiontyp1", "diversiontyp2", "dttmlicenseend", "dttmlicensestart", "geologicaldes", "idrecsvsite", "idrecsvwatersource", "idrecsvwatersourcedetail", "licenseno", "ratediversionmax", "refid", "typ1", "typ2", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idrec: typing.Union[MetaOapg.properties.idrec, str, ],
        idwell: typing.Union[MetaOapg.properties.idwell, str, ],
        com: typing.Union[MetaOapg.properties.com, str, schemas.Unset] = schemas.unset,
        des: typing.Union[MetaOapg.properties.des, str, schemas.Unset] = schemas.unset,
        diversionauth: typing.Union[MetaOapg.properties.diversionauth, str, schemas.Unset] = schemas.unset,
        diversiontyp1: typing.Union[MetaOapg.properties.diversiontyp1, str, schemas.Unset] = schemas.unset,
        diversiontyp2: typing.Union[MetaOapg.properties.diversiontyp2, str, schemas.Unset] = schemas.unset,
        dttmlicenseend: typing.Union[MetaOapg.properties.dttmlicenseend, str, datetime, schemas.Unset] = schemas.unset,
        dttmlicensestart: typing.Union[MetaOapg.properties.dttmlicensestart, str, datetime, schemas.Unset] = schemas.unset,
        geologicaldes: typing.Union[MetaOapg.properties.geologicaldes, str, schemas.Unset] = schemas.unset,
        idrecsvsite: typing.Union[MetaOapg.properties.idrecsvsite, str, schemas.Unset] = schemas.unset,
        idrecsvwatersource: typing.Union[MetaOapg.properties.idrecsvwatersource, str, schemas.Unset] = schemas.unset,
        idrecsvwatersourcedetail: typing.Union[MetaOapg.properties.idrecsvwatersourcedetail, str, schemas.Unset] = schemas.unset,
        licenseno: typing.Union[MetaOapg.properties.licenseno, str, schemas.Unset] = schemas.unset,
        ratediversionmax: typing.Union[MetaOapg.properties.ratediversionmax, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        refid: typing.Union[MetaOapg.properties.refid, str, schemas.Unset] = schemas.unset,
        typ1: typing.Union[MetaOapg.properties.typ1, str, schemas.Unset] = schemas.unset,
        typ2: typing.Union[MetaOapg.properties.typ2, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SourceDestinationData':
        return super().__new__(
            cls,
            *args,
            idrec=idrec,
            idwell=idwell,
            com=com,
            des=des,
            diversionauth=diversionauth,
            diversiontyp1=diversiontyp1,
            diversiontyp2=diversiontyp2,
            dttmlicenseend=dttmlicenseend,
            dttmlicensestart=dttmlicensestart,
            geologicaldes=geologicaldes,
            idrecsvsite=idrecsvsite,
            idrecsvwatersource=idrecsvwatersource,
            idrecsvwatersourcedetail=idrecsvwatersourcedetail,
            licenseno=licenseno,
            ratediversionmax=ratediversionmax,
            refid=refid,
            typ1=typ1,
            typ2=typ2,
            _configuration=_configuration,
            **kwargs,
        )
