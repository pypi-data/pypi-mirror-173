# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class AccessoryData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idrec",
            "idwell",
        }
        
        class properties:
            idrec = schemas.StrSchema
            idwell = schemas.StrSchema
            conditionpull = schemas.StrSchema
            conditionrun = schemas.StrSchema
            cost = schemas.NumberSchema
            costunitlabel = schemas.StrSchema
            des = schemas.StrSchema
            distancefrombtm = schemas.NumberSchema
            dttmend = schemas.DateTimeSchema
            dttmmanufacture = schemas.DateTimeSchema
            dttmstart = schemas.DateTimeSchema
            hoursstart = schemas.NumberSchema
            idrecparent = schemas.StrSchema
            length = schemas.NumberSchema
            make = schemas.StrSchema
            material = schemas.StrSchema
            maxpres = schemas.NumberSchema
            model = schemas.StrSchema
            modifydes = schemas.StrSchema
            note = schemas.StrSchema
            refid = schemas.StrSchema
            sn = schemas.StrSchema
            sz = schemas.NumberSchema
            szdes = schemas.StrSchema
            typ1 = schemas.StrSchema
            typ2 = schemas.StrSchema
            __annotations__ = {
                "idrec": idrec,
                "idwell": idwell,
                "conditionpull": conditionpull,
                "conditionrun": conditionrun,
                "cost": cost,
                "costunitlabel": costunitlabel,
                "des": des,
                "distancefrombtm": distancefrombtm,
                "dttmend": dttmend,
                "dttmmanufacture": dttmmanufacture,
                "dttmstart": dttmstart,
                "hoursstart": hoursstart,
                "idrecparent": idrecparent,
                "length": length,
                "make": make,
                "material": material,
                "maxpres": maxpres,
                "model": model,
                "modifydes": modifydes,
                "note": note,
                "refid": refid,
                "sn": sn,
                "sz": sz,
                "szdes": szdes,
                "typ1": typ1,
                "typ2": typ2,
            }
    
    idrec: MetaOapg.properties.idrec
    idwell: MetaOapg.properties.idwell
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["conditionpull"]) -> MetaOapg.properties.conditionpull: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["conditionrun"]) -> MetaOapg.properties.conditionrun: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cost"]) -> MetaOapg.properties.cost: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["costunitlabel"]) -> MetaOapg.properties.costunitlabel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["des"]) -> MetaOapg.properties.des: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["distancefrombtm"]) -> MetaOapg.properties.distancefrombtm: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmend"]) -> MetaOapg.properties.dttmend: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmmanufacture"]) -> MetaOapg.properties.dttmmanufacture: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmstart"]) -> MetaOapg.properties.dttmstart: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hoursstart"]) -> MetaOapg.properties.hoursstart: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecparent"]) -> MetaOapg.properties.idrecparent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["length"]) -> MetaOapg.properties.length: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["make"]) -> MetaOapg.properties.make: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["material"]) -> MetaOapg.properties.material: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maxpres"]) -> MetaOapg.properties.maxpres: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["model"]) -> MetaOapg.properties.model: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["modifydes"]) -> MetaOapg.properties.modifydes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["note"]) -> MetaOapg.properties.note: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["refid"]) -> MetaOapg.properties.refid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sn"]) -> MetaOapg.properties.sn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sz"]) -> MetaOapg.properties.sz: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["szdes"]) -> MetaOapg.properties.szdes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["typ1"]) -> MetaOapg.properties.typ1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["typ2"]) -> MetaOapg.properties.typ2: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "conditionpull", "conditionrun", "cost", "costunitlabel", "des", "distancefrombtm", "dttmend", "dttmmanufacture", "dttmstart", "hoursstart", "idrecparent", "length", "make", "material", "maxpres", "model", "modifydes", "note", "refid", "sn", "sz", "szdes", "typ1", "typ2", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["conditionpull"]) -> typing.Union[MetaOapg.properties.conditionpull, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["conditionrun"]) -> typing.Union[MetaOapg.properties.conditionrun, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cost"]) -> typing.Union[MetaOapg.properties.cost, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["costunitlabel"]) -> typing.Union[MetaOapg.properties.costunitlabel, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["des"]) -> typing.Union[MetaOapg.properties.des, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["distancefrombtm"]) -> typing.Union[MetaOapg.properties.distancefrombtm, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmend"]) -> typing.Union[MetaOapg.properties.dttmend, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmmanufacture"]) -> typing.Union[MetaOapg.properties.dttmmanufacture, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmstart"]) -> typing.Union[MetaOapg.properties.dttmstart, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hoursstart"]) -> typing.Union[MetaOapg.properties.hoursstart, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecparent"]) -> typing.Union[MetaOapg.properties.idrecparent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["length"]) -> typing.Union[MetaOapg.properties.length, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["make"]) -> typing.Union[MetaOapg.properties.make, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["material"]) -> typing.Union[MetaOapg.properties.material, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maxpres"]) -> typing.Union[MetaOapg.properties.maxpres, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["model"]) -> typing.Union[MetaOapg.properties.model, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["modifydes"]) -> typing.Union[MetaOapg.properties.modifydes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["note"]) -> typing.Union[MetaOapg.properties.note, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["refid"]) -> typing.Union[MetaOapg.properties.refid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sn"]) -> typing.Union[MetaOapg.properties.sn, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sz"]) -> typing.Union[MetaOapg.properties.sz, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["szdes"]) -> typing.Union[MetaOapg.properties.szdes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["typ1"]) -> typing.Union[MetaOapg.properties.typ1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["typ2"]) -> typing.Union[MetaOapg.properties.typ2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "conditionpull", "conditionrun", "cost", "costunitlabel", "des", "distancefrombtm", "dttmend", "dttmmanufacture", "dttmstart", "hoursstart", "idrecparent", "length", "make", "material", "maxpres", "model", "modifydes", "note", "refid", "sn", "sz", "szdes", "typ1", "typ2", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idrec: typing.Union[MetaOapg.properties.idrec, str, ],
        idwell: typing.Union[MetaOapg.properties.idwell, str, ],
        conditionpull: typing.Union[MetaOapg.properties.conditionpull, str, schemas.Unset] = schemas.unset,
        conditionrun: typing.Union[MetaOapg.properties.conditionrun, str, schemas.Unset] = schemas.unset,
        cost: typing.Union[MetaOapg.properties.cost, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        costunitlabel: typing.Union[MetaOapg.properties.costunitlabel, str, schemas.Unset] = schemas.unset,
        des: typing.Union[MetaOapg.properties.des, str, schemas.Unset] = schemas.unset,
        distancefrombtm: typing.Union[MetaOapg.properties.distancefrombtm, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        dttmend: typing.Union[MetaOapg.properties.dttmend, str, datetime, schemas.Unset] = schemas.unset,
        dttmmanufacture: typing.Union[MetaOapg.properties.dttmmanufacture, str, datetime, schemas.Unset] = schemas.unset,
        dttmstart: typing.Union[MetaOapg.properties.dttmstart, str, datetime, schemas.Unset] = schemas.unset,
        hoursstart: typing.Union[MetaOapg.properties.hoursstart, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        idrecparent: typing.Union[MetaOapg.properties.idrecparent, str, schemas.Unset] = schemas.unset,
        length: typing.Union[MetaOapg.properties.length, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        make: typing.Union[MetaOapg.properties.make, str, schemas.Unset] = schemas.unset,
        material: typing.Union[MetaOapg.properties.material, str, schemas.Unset] = schemas.unset,
        maxpres: typing.Union[MetaOapg.properties.maxpres, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        model: typing.Union[MetaOapg.properties.model, str, schemas.Unset] = schemas.unset,
        modifydes: typing.Union[MetaOapg.properties.modifydes, str, schemas.Unset] = schemas.unset,
        note: typing.Union[MetaOapg.properties.note, str, schemas.Unset] = schemas.unset,
        refid: typing.Union[MetaOapg.properties.refid, str, schemas.Unset] = schemas.unset,
        sn: typing.Union[MetaOapg.properties.sn, str, schemas.Unset] = schemas.unset,
        sz: typing.Union[MetaOapg.properties.sz, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        szdes: typing.Union[MetaOapg.properties.szdes, str, schemas.Unset] = schemas.unset,
        typ1: typing.Union[MetaOapg.properties.typ1, str, schemas.Unset] = schemas.unset,
        typ2: typing.Union[MetaOapg.properties.typ2, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AccessoryData':
        return super().__new__(
            cls,
            *args,
            idrec=idrec,
            idwell=idwell,
            conditionpull=conditionpull,
            conditionrun=conditionrun,
            cost=cost,
            costunitlabel=costunitlabel,
            des=des,
            distancefrombtm=distancefrombtm,
            dttmend=dttmend,
            dttmmanufacture=dttmmanufacture,
            dttmstart=dttmstart,
            hoursstart=hoursstart,
            idrecparent=idrecparent,
            length=length,
            make=make,
            material=material,
            maxpres=maxpres,
            model=model,
            modifydes=modifydes,
            note=note,
            refid=refid,
            sn=sn,
            sz=sz,
            szdes=szdes,
            typ1=typ1,
            typ2=typ2,
            _configuration=_configuration,
            **kwargs,
        )
