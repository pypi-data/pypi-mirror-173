# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class DeliverableData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idrec",
            "idwell",
        }
        
        class properties:
            idrec = schemas.StrSchema
            idwell = schemas.StrSchema
            assigntodept = schemas.StrSchema
            assigntoemail = schemas.StrSchema
            assigntoname = schemas.StrSchema
            com = schemas.StrSchema
            completed = schemas.BoolSchema
            completedby = schemas.StrSchema
            des = schemas.StrSchema
            dttmcomplete = schemas.DateTimeSchema
            idrecparent = schemas.StrSchema
            typ1 = schemas.StrSchema
            typ2 = schemas.StrSchema
            __annotations__ = {
                "idrec": idrec,
                "idwell": idwell,
                "assigntodept": assigntodept,
                "assigntoemail": assigntoemail,
                "assigntoname": assigntoname,
                "com": com,
                "completed": completed,
                "completedby": completedby,
                "des": des,
                "dttmcomplete": dttmcomplete,
                "idrecparent": idrecparent,
                "typ1": typ1,
                "typ2": typ2,
            }
    
    idrec: MetaOapg.properties.idrec
    idwell: MetaOapg.properties.idwell
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["assigntodept"]) -> MetaOapg.properties.assigntodept: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["assigntoemail"]) -> MetaOapg.properties.assigntoemail: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["assigntoname"]) -> MetaOapg.properties.assigntoname: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["com"]) -> MetaOapg.properties.com: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["completed"]) -> MetaOapg.properties.completed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["completedby"]) -> MetaOapg.properties.completedby: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["des"]) -> MetaOapg.properties.des: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmcomplete"]) -> MetaOapg.properties.dttmcomplete: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecparent"]) -> MetaOapg.properties.idrecparent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["typ1"]) -> MetaOapg.properties.typ1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["typ2"]) -> MetaOapg.properties.typ2: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "assigntodept", "assigntoemail", "assigntoname", "com", "completed", "completedby", "des", "dttmcomplete", "idrecparent", "typ1", "typ2", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["assigntodept"]) -> typing.Union[MetaOapg.properties.assigntodept, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["assigntoemail"]) -> typing.Union[MetaOapg.properties.assigntoemail, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["assigntoname"]) -> typing.Union[MetaOapg.properties.assigntoname, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["com"]) -> typing.Union[MetaOapg.properties.com, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["completed"]) -> typing.Union[MetaOapg.properties.completed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["completedby"]) -> typing.Union[MetaOapg.properties.completedby, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["des"]) -> typing.Union[MetaOapg.properties.des, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmcomplete"]) -> typing.Union[MetaOapg.properties.dttmcomplete, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecparent"]) -> typing.Union[MetaOapg.properties.idrecparent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["typ1"]) -> typing.Union[MetaOapg.properties.typ1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["typ2"]) -> typing.Union[MetaOapg.properties.typ2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "assigntodept", "assigntoemail", "assigntoname", "com", "completed", "completedby", "des", "dttmcomplete", "idrecparent", "typ1", "typ2", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idrec: typing.Union[MetaOapg.properties.idrec, str, ],
        idwell: typing.Union[MetaOapg.properties.idwell, str, ],
        assigntodept: typing.Union[MetaOapg.properties.assigntodept, str, schemas.Unset] = schemas.unset,
        assigntoemail: typing.Union[MetaOapg.properties.assigntoemail, str, schemas.Unset] = schemas.unset,
        assigntoname: typing.Union[MetaOapg.properties.assigntoname, str, schemas.Unset] = schemas.unset,
        com: typing.Union[MetaOapg.properties.com, str, schemas.Unset] = schemas.unset,
        completed: typing.Union[MetaOapg.properties.completed, bool, schemas.Unset] = schemas.unset,
        completedby: typing.Union[MetaOapg.properties.completedby, str, schemas.Unset] = schemas.unset,
        des: typing.Union[MetaOapg.properties.des, str, schemas.Unset] = schemas.unset,
        dttmcomplete: typing.Union[MetaOapg.properties.dttmcomplete, str, datetime, schemas.Unset] = schemas.unset,
        idrecparent: typing.Union[MetaOapg.properties.idrecparent, str, schemas.Unset] = schemas.unset,
        typ1: typing.Union[MetaOapg.properties.typ1, str, schemas.Unset] = schemas.unset,
        typ2: typing.Union[MetaOapg.properties.typ2, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DeliverableData':
        return super().__new__(
            cls,
            *args,
            idrec=idrec,
            idwell=idwell,
            assigntodept=assigntodept,
            assigntoemail=assigntoemail,
            assigntoname=assigntoname,
            com=com,
            completed=completed,
            completedby=completedby,
            des=des,
            dttmcomplete=dttmcomplete,
            idrecparent=idrecparent,
            typ1=typ1,
            typ2=typ2,
            _configuration=_configuration,
            **kwargs,
        )
