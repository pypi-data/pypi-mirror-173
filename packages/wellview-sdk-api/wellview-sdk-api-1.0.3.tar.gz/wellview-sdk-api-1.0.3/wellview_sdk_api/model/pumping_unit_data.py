# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class PumpingUnitData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idrec",
            "idwell",
        }
        
        class properties:
            idrec = schemas.StrSchema
            idwell = schemas.StrSchema
            codeapi = schemas.StrSchema
            codenonapi = schemas.StrSchema
            com = schemas.StrSchema
            conditionend = schemas.StrSchema
            conditionstart = schemas.StrSchema
            crankpinholeno = schemas.IntSchema
            cranktyp = schemas.StrSchema
            des = schemas.StrSchema
            dttmend = schemas.DateTimeSchema
            dttmlastoverhaul = schemas.DateTimeSchema
            dttmstart = schemas.DateTimeSchema
            gearboxdes = schemas.StrSchema
            gearboxratio = schemas.NumberSchema
            gearboxsn = schemas.StrSchema
            gearboxtorquemaxin = schemas.NumberSchema
            idrecjob = schemas.StrSchema
            idrecrod = schemas.StrSchema
            lengthbeam = schemas.NumberSchema
            loadpolishrodmax = schemas.NumberSchema
            make = schemas.StrSchema
            model = schemas.StrSchema
            pitmanposmax = schemas.IntSchema
            proposed = schemas.BoolSchema
            refid = schemas.StrSchema
            sn = schemas.StrSchema
            strokelengthmax = schemas.NumberSchema
            szsheave = schemas.NumberSchema
            typ = schemas.StrSchema
            usertxt1 = schemas.StrSchema
            usertxt2 = schemas.StrSchema
            __annotations__ = {
                "idrec": idrec,
                "idwell": idwell,
                "codeapi": codeapi,
                "codenonapi": codenonapi,
                "com": com,
                "conditionend": conditionend,
                "conditionstart": conditionstart,
                "crankpinholeno": crankpinholeno,
                "cranktyp": cranktyp,
                "des": des,
                "dttmend": dttmend,
                "dttmlastoverhaul": dttmlastoverhaul,
                "dttmstart": dttmstart,
                "gearboxdes": gearboxdes,
                "gearboxratio": gearboxratio,
                "gearboxsn": gearboxsn,
                "gearboxtorquemaxin": gearboxtorquemaxin,
                "idrecjob": idrecjob,
                "idrecrod": idrecrod,
                "lengthbeam": lengthbeam,
                "loadpolishrodmax": loadpolishrodmax,
                "make": make,
                "model": model,
                "pitmanposmax": pitmanposmax,
                "proposed": proposed,
                "refid": refid,
                "sn": sn,
                "strokelengthmax": strokelengthmax,
                "szsheave": szsheave,
                "typ": typ,
                "usertxt1": usertxt1,
                "usertxt2": usertxt2,
            }
    
    idrec: MetaOapg.properties.idrec
    idwell: MetaOapg.properties.idwell
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["codeapi"]) -> MetaOapg.properties.codeapi: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["codenonapi"]) -> MetaOapg.properties.codenonapi: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["com"]) -> MetaOapg.properties.com: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["conditionend"]) -> MetaOapg.properties.conditionend: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["conditionstart"]) -> MetaOapg.properties.conditionstart: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["crankpinholeno"]) -> MetaOapg.properties.crankpinholeno: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cranktyp"]) -> MetaOapg.properties.cranktyp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["des"]) -> MetaOapg.properties.des: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmend"]) -> MetaOapg.properties.dttmend: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmlastoverhaul"]) -> MetaOapg.properties.dttmlastoverhaul: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmstart"]) -> MetaOapg.properties.dttmstart: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gearboxdes"]) -> MetaOapg.properties.gearboxdes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gearboxratio"]) -> MetaOapg.properties.gearboxratio: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gearboxsn"]) -> MetaOapg.properties.gearboxsn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gearboxtorquemaxin"]) -> MetaOapg.properties.gearboxtorquemaxin: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecjob"]) -> MetaOapg.properties.idrecjob: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecrod"]) -> MetaOapg.properties.idrecrod: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lengthbeam"]) -> MetaOapg.properties.lengthbeam: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["loadpolishrodmax"]) -> MetaOapg.properties.loadpolishrodmax: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["make"]) -> MetaOapg.properties.make: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["model"]) -> MetaOapg.properties.model: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pitmanposmax"]) -> MetaOapg.properties.pitmanposmax: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["proposed"]) -> MetaOapg.properties.proposed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["refid"]) -> MetaOapg.properties.refid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sn"]) -> MetaOapg.properties.sn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["strokelengthmax"]) -> MetaOapg.properties.strokelengthmax: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["szsheave"]) -> MetaOapg.properties.szsheave: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["typ"]) -> MetaOapg.properties.typ: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usertxt1"]) -> MetaOapg.properties.usertxt1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usertxt2"]) -> MetaOapg.properties.usertxt2: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "codeapi", "codenonapi", "com", "conditionend", "conditionstart", "crankpinholeno", "cranktyp", "des", "dttmend", "dttmlastoverhaul", "dttmstart", "gearboxdes", "gearboxratio", "gearboxsn", "gearboxtorquemaxin", "idrecjob", "idrecrod", "lengthbeam", "loadpolishrodmax", "make", "model", "pitmanposmax", "proposed", "refid", "sn", "strokelengthmax", "szsheave", "typ", "usertxt1", "usertxt2", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["codeapi"]) -> typing.Union[MetaOapg.properties.codeapi, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["codenonapi"]) -> typing.Union[MetaOapg.properties.codenonapi, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["com"]) -> typing.Union[MetaOapg.properties.com, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["conditionend"]) -> typing.Union[MetaOapg.properties.conditionend, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["conditionstart"]) -> typing.Union[MetaOapg.properties.conditionstart, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["crankpinholeno"]) -> typing.Union[MetaOapg.properties.crankpinholeno, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cranktyp"]) -> typing.Union[MetaOapg.properties.cranktyp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["des"]) -> typing.Union[MetaOapg.properties.des, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmend"]) -> typing.Union[MetaOapg.properties.dttmend, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmlastoverhaul"]) -> typing.Union[MetaOapg.properties.dttmlastoverhaul, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmstart"]) -> typing.Union[MetaOapg.properties.dttmstart, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gearboxdes"]) -> typing.Union[MetaOapg.properties.gearboxdes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gearboxratio"]) -> typing.Union[MetaOapg.properties.gearboxratio, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gearboxsn"]) -> typing.Union[MetaOapg.properties.gearboxsn, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gearboxtorquemaxin"]) -> typing.Union[MetaOapg.properties.gearboxtorquemaxin, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecjob"]) -> typing.Union[MetaOapg.properties.idrecjob, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecrod"]) -> typing.Union[MetaOapg.properties.idrecrod, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lengthbeam"]) -> typing.Union[MetaOapg.properties.lengthbeam, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["loadpolishrodmax"]) -> typing.Union[MetaOapg.properties.loadpolishrodmax, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["make"]) -> typing.Union[MetaOapg.properties.make, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["model"]) -> typing.Union[MetaOapg.properties.model, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pitmanposmax"]) -> typing.Union[MetaOapg.properties.pitmanposmax, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["proposed"]) -> typing.Union[MetaOapg.properties.proposed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["refid"]) -> typing.Union[MetaOapg.properties.refid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sn"]) -> typing.Union[MetaOapg.properties.sn, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["strokelengthmax"]) -> typing.Union[MetaOapg.properties.strokelengthmax, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["szsheave"]) -> typing.Union[MetaOapg.properties.szsheave, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["typ"]) -> typing.Union[MetaOapg.properties.typ, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usertxt1"]) -> typing.Union[MetaOapg.properties.usertxt1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usertxt2"]) -> typing.Union[MetaOapg.properties.usertxt2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "codeapi", "codenonapi", "com", "conditionend", "conditionstart", "crankpinholeno", "cranktyp", "des", "dttmend", "dttmlastoverhaul", "dttmstart", "gearboxdes", "gearboxratio", "gearboxsn", "gearboxtorquemaxin", "idrecjob", "idrecrod", "lengthbeam", "loadpolishrodmax", "make", "model", "pitmanposmax", "proposed", "refid", "sn", "strokelengthmax", "szsheave", "typ", "usertxt1", "usertxt2", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idrec: typing.Union[MetaOapg.properties.idrec, str, ],
        idwell: typing.Union[MetaOapg.properties.idwell, str, ],
        codeapi: typing.Union[MetaOapg.properties.codeapi, str, schemas.Unset] = schemas.unset,
        codenonapi: typing.Union[MetaOapg.properties.codenonapi, str, schemas.Unset] = schemas.unset,
        com: typing.Union[MetaOapg.properties.com, str, schemas.Unset] = schemas.unset,
        conditionend: typing.Union[MetaOapg.properties.conditionend, str, schemas.Unset] = schemas.unset,
        conditionstart: typing.Union[MetaOapg.properties.conditionstart, str, schemas.Unset] = schemas.unset,
        crankpinholeno: typing.Union[MetaOapg.properties.crankpinholeno, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        cranktyp: typing.Union[MetaOapg.properties.cranktyp, str, schemas.Unset] = schemas.unset,
        des: typing.Union[MetaOapg.properties.des, str, schemas.Unset] = schemas.unset,
        dttmend: typing.Union[MetaOapg.properties.dttmend, str, datetime, schemas.Unset] = schemas.unset,
        dttmlastoverhaul: typing.Union[MetaOapg.properties.dttmlastoverhaul, str, datetime, schemas.Unset] = schemas.unset,
        dttmstart: typing.Union[MetaOapg.properties.dttmstart, str, datetime, schemas.Unset] = schemas.unset,
        gearboxdes: typing.Union[MetaOapg.properties.gearboxdes, str, schemas.Unset] = schemas.unset,
        gearboxratio: typing.Union[MetaOapg.properties.gearboxratio, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        gearboxsn: typing.Union[MetaOapg.properties.gearboxsn, str, schemas.Unset] = schemas.unset,
        gearboxtorquemaxin: typing.Union[MetaOapg.properties.gearboxtorquemaxin, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        idrecjob: typing.Union[MetaOapg.properties.idrecjob, str, schemas.Unset] = schemas.unset,
        idrecrod: typing.Union[MetaOapg.properties.idrecrod, str, schemas.Unset] = schemas.unset,
        lengthbeam: typing.Union[MetaOapg.properties.lengthbeam, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        loadpolishrodmax: typing.Union[MetaOapg.properties.loadpolishrodmax, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        make: typing.Union[MetaOapg.properties.make, str, schemas.Unset] = schemas.unset,
        model: typing.Union[MetaOapg.properties.model, str, schemas.Unset] = schemas.unset,
        pitmanposmax: typing.Union[MetaOapg.properties.pitmanposmax, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        proposed: typing.Union[MetaOapg.properties.proposed, bool, schemas.Unset] = schemas.unset,
        refid: typing.Union[MetaOapg.properties.refid, str, schemas.Unset] = schemas.unset,
        sn: typing.Union[MetaOapg.properties.sn, str, schemas.Unset] = schemas.unset,
        strokelengthmax: typing.Union[MetaOapg.properties.strokelengthmax, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        szsheave: typing.Union[MetaOapg.properties.szsheave, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        typ: typing.Union[MetaOapg.properties.typ, str, schemas.Unset] = schemas.unset,
        usertxt1: typing.Union[MetaOapg.properties.usertxt1, str, schemas.Unset] = schemas.unset,
        usertxt2: typing.Union[MetaOapg.properties.usertxt2, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PumpingUnitData':
        return super().__new__(
            cls,
            *args,
            idrec=idrec,
            idwell=idwell,
            codeapi=codeapi,
            codenonapi=codenonapi,
            com=com,
            conditionend=conditionend,
            conditionstart=conditionstart,
            crankpinholeno=crankpinholeno,
            cranktyp=cranktyp,
            des=des,
            dttmend=dttmend,
            dttmlastoverhaul=dttmlastoverhaul,
            dttmstart=dttmstart,
            gearboxdes=gearboxdes,
            gearboxratio=gearboxratio,
            gearboxsn=gearboxsn,
            gearboxtorquemaxin=gearboxtorquemaxin,
            idrecjob=idrecjob,
            idrecrod=idrecrod,
            lengthbeam=lengthbeam,
            loadpolishrodmax=loadpolishrodmax,
            make=make,
            model=model,
            pitmanposmax=pitmanposmax,
            proposed=proposed,
            refid=refid,
            sn=sn,
            strokelengthmax=strokelengthmax,
            szsheave=szsheave,
            typ=typ,
            usertxt1=usertxt1,
            usertxt2=usertxt2,
            _configuration=_configuration,
            **kwargs,
        )
