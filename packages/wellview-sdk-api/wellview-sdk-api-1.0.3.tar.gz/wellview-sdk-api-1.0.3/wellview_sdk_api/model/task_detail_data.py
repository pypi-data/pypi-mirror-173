# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class TaskDetailData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idrec",
            "idwell",
        }
        
        class properties:
            idrec = schemas.StrSchema
            idwell = schemas.StrSchema
            actioncom = schemas.StrSchema
            actioncomplete = schemas.BoolSchema
            assigntodept = schemas.StrSchema
            assigntoemail = schemas.StrSchema
            assigntoname = schemas.StrSchema
            des = schemas.StrSchema
            dttmactionrqd = schemas.DateTimeSchema
            dttmassigned = schemas.DateTimeSchema
            dttmcomplete = schemas.DateTimeSchema
            dttmrequest = schemas.DateTimeSchema
            idrecitem = schemas.StrSchema
            idrecparent = schemas.StrSchema
            priority = schemas.StrSchema
            requestbydept = schemas.StrSchema
            requestbyemail = schemas.StrSchema
            requestbyname = schemas.StrSchema
            requestcom = schemas.StrSchema
            status = schemas.StrSchema
            typ1 = schemas.StrSchema
            typ2 = schemas.StrSchema
            usertxt1 = schemas.StrSchema
            usertxt2 = schemas.StrSchema
            __annotations__ = {
                "idrec": idrec,
                "idwell": idwell,
                "actioncom": actioncom,
                "actioncomplete": actioncomplete,
                "assigntodept": assigntodept,
                "assigntoemail": assigntoemail,
                "assigntoname": assigntoname,
                "des": des,
                "dttmactionrqd": dttmactionrqd,
                "dttmassigned": dttmassigned,
                "dttmcomplete": dttmcomplete,
                "dttmrequest": dttmrequest,
                "idrecitem": idrecitem,
                "idrecparent": idrecparent,
                "priority": priority,
                "requestbydept": requestbydept,
                "requestbyemail": requestbyemail,
                "requestbyname": requestbyname,
                "requestcom": requestcom,
                "status": status,
                "typ1": typ1,
                "typ2": typ2,
                "usertxt1": usertxt1,
                "usertxt2": usertxt2,
            }
    
    idrec: MetaOapg.properties.idrec
    idwell: MetaOapg.properties.idwell
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["actioncom"]) -> MetaOapg.properties.actioncom: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["actioncomplete"]) -> MetaOapg.properties.actioncomplete: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["assigntodept"]) -> MetaOapg.properties.assigntodept: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["assigntoemail"]) -> MetaOapg.properties.assigntoemail: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["assigntoname"]) -> MetaOapg.properties.assigntoname: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["des"]) -> MetaOapg.properties.des: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmactionrqd"]) -> MetaOapg.properties.dttmactionrqd: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmassigned"]) -> MetaOapg.properties.dttmassigned: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmcomplete"]) -> MetaOapg.properties.dttmcomplete: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmrequest"]) -> MetaOapg.properties.dttmrequest: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecitem"]) -> MetaOapg.properties.idrecitem: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecparent"]) -> MetaOapg.properties.idrecparent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["priority"]) -> MetaOapg.properties.priority: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["requestbydept"]) -> MetaOapg.properties.requestbydept: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["requestbyemail"]) -> MetaOapg.properties.requestbyemail: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["requestbyname"]) -> MetaOapg.properties.requestbyname: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["requestcom"]) -> MetaOapg.properties.requestcom: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["typ1"]) -> MetaOapg.properties.typ1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["typ2"]) -> MetaOapg.properties.typ2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usertxt1"]) -> MetaOapg.properties.usertxt1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usertxt2"]) -> MetaOapg.properties.usertxt2: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "actioncom", "actioncomplete", "assigntodept", "assigntoemail", "assigntoname", "des", "dttmactionrqd", "dttmassigned", "dttmcomplete", "dttmrequest", "idrecitem", "idrecparent", "priority", "requestbydept", "requestbyemail", "requestbyname", "requestcom", "status", "typ1", "typ2", "usertxt1", "usertxt2", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["actioncom"]) -> typing.Union[MetaOapg.properties.actioncom, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["actioncomplete"]) -> typing.Union[MetaOapg.properties.actioncomplete, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["assigntodept"]) -> typing.Union[MetaOapg.properties.assigntodept, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["assigntoemail"]) -> typing.Union[MetaOapg.properties.assigntoemail, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["assigntoname"]) -> typing.Union[MetaOapg.properties.assigntoname, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["des"]) -> typing.Union[MetaOapg.properties.des, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmactionrqd"]) -> typing.Union[MetaOapg.properties.dttmactionrqd, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmassigned"]) -> typing.Union[MetaOapg.properties.dttmassigned, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmcomplete"]) -> typing.Union[MetaOapg.properties.dttmcomplete, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmrequest"]) -> typing.Union[MetaOapg.properties.dttmrequest, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecitem"]) -> typing.Union[MetaOapg.properties.idrecitem, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecparent"]) -> typing.Union[MetaOapg.properties.idrecparent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["priority"]) -> typing.Union[MetaOapg.properties.priority, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["requestbydept"]) -> typing.Union[MetaOapg.properties.requestbydept, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["requestbyemail"]) -> typing.Union[MetaOapg.properties.requestbyemail, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["requestbyname"]) -> typing.Union[MetaOapg.properties.requestbyname, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["requestcom"]) -> typing.Union[MetaOapg.properties.requestcom, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["typ1"]) -> typing.Union[MetaOapg.properties.typ1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["typ2"]) -> typing.Union[MetaOapg.properties.typ2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usertxt1"]) -> typing.Union[MetaOapg.properties.usertxt1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usertxt2"]) -> typing.Union[MetaOapg.properties.usertxt2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "actioncom", "actioncomplete", "assigntodept", "assigntoemail", "assigntoname", "des", "dttmactionrqd", "dttmassigned", "dttmcomplete", "dttmrequest", "idrecitem", "idrecparent", "priority", "requestbydept", "requestbyemail", "requestbyname", "requestcom", "status", "typ1", "typ2", "usertxt1", "usertxt2", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idrec: typing.Union[MetaOapg.properties.idrec, str, ],
        idwell: typing.Union[MetaOapg.properties.idwell, str, ],
        actioncom: typing.Union[MetaOapg.properties.actioncom, str, schemas.Unset] = schemas.unset,
        actioncomplete: typing.Union[MetaOapg.properties.actioncomplete, bool, schemas.Unset] = schemas.unset,
        assigntodept: typing.Union[MetaOapg.properties.assigntodept, str, schemas.Unset] = schemas.unset,
        assigntoemail: typing.Union[MetaOapg.properties.assigntoemail, str, schemas.Unset] = schemas.unset,
        assigntoname: typing.Union[MetaOapg.properties.assigntoname, str, schemas.Unset] = schemas.unset,
        des: typing.Union[MetaOapg.properties.des, str, schemas.Unset] = schemas.unset,
        dttmactionrqd: typing.Union[MetaOapg.properties.dttmactionrqd, str, datetime, schemas.Unset] = schemas.unset,
        dttmassigned: typing.Union[MetaOapg.properties.dttmassigned, str, datetime, schemas.Unset] = schemas.unset,
        dttmcomplete: typing.Union[MetaOapg.properties.dttmcomplete, str, datetime, schemas.Unset] = schemas.unset,
        dttmrequest: typing.Union[MetaOapg.properties.dttmrequest, str, datetime, schemas.Unset] = schemas.unset,
        idrecitem: typing.Union[MetaOapg.properties.idrecitem, str, schemas.Unset] = schemas.unset,
        idrecparent: typing.Union[MetaOapg.properties.idrecparent, str, schemas.Unset] = schemas.unset,
        priority: typing.Union[MetaOapg.properties.priority, str, schemas.Unset] = schemas.unset,
        requestbydept: typing.Union[MetaOapg.properties.requestbydept, str, schemas.Unset] = schemas.unset,
        requestbyemail: typing.Union[MetaOapg.properties.requestbyemail, str, schemas.Unset] = schemas.unset,
        requestbyname: typing.Union[MetaOapg.properties.requestbyname, str, schemas.Unset] = schemas.unset,
        requestcom: typing.Union[MetaOapg.properties.requestcom, str, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        typ1: typing.Union[MetaOapg.properties.typ1, str, schemas.Unset] = schemas.unset,
        typ2: typing.Union[MetaOapg.properties.typ2, str, schemas.Unset] = schemas.unset,
        usertxt1: typing.Union[MetaOapg.properties.usertxt1, str, schemas.Unset] = schemas.unset,
        usertxt2: typing.Union[MetaOapg.properties.usertxt2, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TaskDetailData':
        return super().__new__(
            cls,
            *args,
            idrec=idrec,
            idwell=idwell,
            actioncom=actioncom,
            actioncomplete=actioncomplete,
            assigntodept=assigntodept,
            assigntoemail=assigntoemail,
            assigntoname=assigntoname,
            des=des,
            dttmactionrqd=dttmactionrqd,
            dttmassigned=dttmassigned,
            dttmcomplete=dttmcomplete,
            dttmrequest=dttmrequest,
            idrecitem=idrecitem,
            idrecparent=idrecparent,
            priority=priority,
            requestbydept=requestbydept,
            requestbyemail=requestbyemail,
            requestbyname=requestbyname,
            requestcom=requestcom,
            status=status,
            typ1=typ1,
            typ2=typ2,
            usertxt1=usertxt1,
            usertxt2=usertxt2,
            _configuration=_configuration,
            **kwargs,
        )
