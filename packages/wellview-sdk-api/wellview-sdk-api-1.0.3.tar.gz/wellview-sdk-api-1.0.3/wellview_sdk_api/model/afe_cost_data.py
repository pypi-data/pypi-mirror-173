# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class AFECostData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idrec",
            "idwell",
        }
        
        class properties:
            idrec = schemas.StrSchema
            idwell = schemas.StrSchema
            afenumbersupprev = schemas.StrSchema
            amount = schemas.NumberSchema
            amountsupp = schemas.NumberSchema
            amountsuppdttm = schemas.DateTimeSchema
            code1 = schemas.StrSchema
            code2 = schemas.StrSchema
            code3 = schemas.StrSchema
            code4 = schemas.StrSchema
            code5 = schemas.StrSchema
            code6 = schemas.StrSchema
            des = schemas.StrSchema
            dttmforecast = schemas.DateTimeSchema
            dttmforecastspend = schemas.DateTimeSchema
            forecast = schemas.NumberSchema
            idrecparent = schemas.StrSchema
            idrecphasecustom = schemas.StrSchema
            justification = schemas.StrSchema
            note = schemas.StrSchema
            syscarryfwdp = schemas.BoolSchema
            __annotations__ = {
                "idrec": idrec,
                "idwell": idwell,
                "afenumbersupprev": afenumbersupprev,
                "amount": amount,
                "amountsupp": amountsupp,
                "amountsuppdttm": amountsuppdttm,
                "code1": code1,
                "code2": code2,
                "code3": code3,
                "code4": code4,
                "code5": code5,
                "code6": code6,
                "des": des,
                "dttmforecast": dttmforecast,
                "dttmforecastspend": dttmforecastspend,
                "forecast": forecast,
                "idrecparent": idrecparent,
                "idrecphasecustom": idrecphasecustom,
                "justification": justification,
                "note": note,
                "syscarryfwdp": syscarryfwdp,
            }
    
    idrec: MetaOapg.properties.idrec
    idwell: MetaOapg.properties.idwell
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["afenumbersupprev"]) -> MetaOapg.properties.afenumbersupprev: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amountsupp"]) -> MetaOapg.properties.amountsupp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amountsuppdttm"]) -> MetaOapg.properties.amountsuppdttm: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["code1"]) -> MetaOapg.properties.code1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["code2"]) -> MetaOapg.properties.code2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["code3"]) -> MetaOapg.properties.code3: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["code4"]) -> MetaOapg.properties.code4: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["code5"]) -> MetaOapg.properties.code5: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["code6"]) -> MetaOapg.properties.code6: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["des"]) -> MetaOapg.properties.des: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmforecast"]) -> MetaOapg.properties.dttmforecast: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmforecastspend"]) -> MetaOapg.properties.dttmforecastspend: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["forecast"]) -> MetaOapg.properties.forecast: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecparent"]) -> MetaOapg.properties.idrecparent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecphasecustom"]) -> MetaOapg.properties.idrecphasecustom: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["justification"]) -> MetaOapg.properties.justification: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["note"]) -> MetaOapg.properties.note: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["syscarryfwdp"]) -> MetaOapg.properties.syscarryfwdp: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "afenumbersupprev", "amount", "amountsupp", "amountsuppdttm", "code1", "code2", "code3", "code4", "code5", "code6", "des", "dttmforecast", "dttmforecastspend", "forecast", "idrecparent", "idrecphasecustom", "justification", "note", "syscarryfwdp", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["afenumbersupprev"]) -> typing.Union[MetaOapg.properties.afenumbersupprev, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> typing.Union[MetaOapg.properties.amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amountsupp"]) -> typing.Union[MetaOapg.properties.amountsupp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amountsuppdttm"]) -> typing.Union[MetaOapg.properties.amountsuppdttm, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["code1"]) -> typing.Union[MetaOapg.properties.code1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["code2"]) -> typing.Union[MetaOapg.properties.code2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["code3"]) -> typing.Union[MetaOapg.properties.code3, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["code4"]) -> typing.Union[MetaOapg.properties.code4, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["code5"]) -> typing.Union[MetaOapg.properties.code5, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["code6"]) -> typing.Union[MetaOapg.properties.code6, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["des"]) -> typing.Union[MetaOapg.properties.des, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmforecast"]) -> typing.Union[MetaOapg.properties.dttmforecast, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmforecastspend"]) -> typing.Union[MetaOapg.properties.dttmforecastspend, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["forecast"]) -> typing.Union[MetaOapg.properties.forecast, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecparent"]) -> typing.Union[MetaOapg.properties.idrecparent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecphasecustom"]) -> typing.Union[MetaOapg.properties.idrecphasecustom, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["justification"]) -> typing.Union[MetaOapg.properties.justification, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["note"]) -> typing.Union[MetaOapg.properties.note, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["syscarryfwdp"]) -> typing.Union[MetaOapg.properties.syscarryfwdp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "afenumbersupprev", "amount", "amountsupp", "amountsuppdttm", "code1", "code2", "code3", "code4", "code5", "code6", "des", "dttmforecast", "dttmforecastspend", "forecast", "idrecparent", "idrecphasecustom", "justification", "note", "syscarryfwdp", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idrec: typing.Union[MetaOapg.properties.idrec, str, ],
        idwell: typing.Union[MetaOapg.properties.idwell, str, ],
        afenumbersupprev: typing.Union[MetaOapg.properties.afenumbersupprev, str, schemas.Unset] = schemas.unset,
        amount: typing.Union[MetaOapg.properties.amount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        amountsupp: typing.Union[MetaOapg.properties.amountsupp, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        amountsuppdttm: typing.Union[MetaOapg.properties.amountsuppdttm, str, datetime, schemas.Unset] = schemas.unset,
        code1: typing.Union[MetaOapg.properties.code1, str, schemas.Unset] = schemas.unset,
        code2: typing.Union[MetaOapg.properties.code2, str, schemas.Unset] = schemas.unset,
        code3: typing.Union[MetaOapg.properties.code3, str, schemas.Unset] = schemas.unset,
        code4: typing.Union[MetaOapg.properties.code4, str, schemas.Unset] = schemas.unset,
        code5: typing.Union[MetaOapg.properties.code5, str, schemas.Unset] = schemas.unset,
        code6: typing.Union[MetaOapg.properties.code6, str, schemas.Unset] = schemas.unset,
        des: typing.Union[MetaOapg.properties.des, str, schemas.Unset] = schemas.unset,
        dttmforecast: typing.Union[MetaOapg.properties.dttmforecast, str, datetime, schemas.Unset] = schemas.unset,
        dttmforecastspend: typing.Union[MetaOapg.properties.dttmforecastspend, str, datetime, schemas.Unset] = schemas.unset,
        forecast: typing.Union[MetaOapg.properties.forecast, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        idrecparent: typing.Union[MetaOapg.properties.idrecparent, str, schemas.Unset] = schemas.unset,
        idrecphasecustom: typing.Union[MetaOapg.properties.idrecphasecustom, str, schemas.Unset] = schemas.unset,
        justification: typing.Union[MetaOapg.properties.justification, str, schemas.Unset] = schemas.unset,
        note: typing.Union[MetaOapg.properties.note, str, schemas.Unset] = schemas.unset,
        syscarryfwdp: typing.Union[MetaOapg.properties.syscarryfwdp, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AFECostData':
        return super().__new__(
            cls,
            *args,
            idrec=idrec,
            idwell=idwell,
            afenumbersupprev=afenumbersupprev,
            amount=amount,
            amountsupp=amountsupp,
            amountsuppdttm=amountsuppdttm,
            code1=code1,
            code2=code2,
            code3=code3,
            code4=code4,
            code5=code5,
            code6=code6,
            des=des,
            dttmforecast=dttmforecast,
            dttmforecastspend=dttmforecastspend,
            forecast=forecast,
            idrecparent=idrecparent,
            idrecphasecustom=idrecphasecustom,
            justification=justification,
            note=note,
            syscarryfwdp=syscarryfwdp,
            _configuration=_configuration,
            **kwargs,
        )
