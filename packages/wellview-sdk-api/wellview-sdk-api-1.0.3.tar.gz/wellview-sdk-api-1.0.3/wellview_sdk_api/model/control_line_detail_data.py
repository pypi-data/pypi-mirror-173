# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class ControlLineDetailData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idrec",
            "idwell",
        }
        
        class properties:
            idrec = schemas.StrSchema
            idwell = schemas.StrSchema
            controlfluidtyp = schemas.StrSchema
            encapsulated = schemas.BoolSchema
            encapsulatedtyp = schemas.StrSchema
            idrecparent = schemas.StrSchema
            idrecwellheadcompsub = schemas.StrSchema
            material = schemas.StrSchema
            presrating = schemas.NumberSchema
            refno = schemas.StrSchema
            szid = schemas.NumberSchema
            szod = schemas.NumberSchema
            temprating = schemas.NumberSchema
            typ1 = schemas.StrSchema
            typ2 = schemas.StrSchema
            __annotations__ = {
                "idrec": idrec,
                "idwell": idwell,
                "controlfluidtyp": controlfluidtyp,
                "encapsulated": encapsulated,
                "encapsulatedtyp": encapsulatedtyp,
                "idrecparent": idrecparent,
                "idrecwellheadcompsub": idrecwellheadcompsub,
                "material": material,
                "presrating": presrating,
                "refno": refno,
                "szid": szid,
                "szod": szod,
                "temprating": temprating,
                "typ1": typ1,
                "typ2": typ2,
            }
    
    idrec: MetaOapg.properties.idrec
    idwell: MetaOapg.properties.idwell
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["controlfluidtyp"]) -> MetaOapg.properties.controlfluidtyp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["encapsulated"]) -> MetaOapg.properties.encapsulated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["encapsulatedtyp"]) -> MetaOapg.properties.encapsulatedtyp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecparent"]) -> MetaOapg.properties.idrecparent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecwellheadcompsub"]) -> MetaOapg.properties.idrecwellheadcompsub: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["material"]) -> MetaOapg.properties.material: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["presrating"]) -> MetaOapg.properties.presrating: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["refno"]) -> MetaOapg.properties.refno: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["szid"]) -> MetaOapg.properties.szid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["szod"]) -> MetaOapg.properties.szod: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["temprating"]) -> MetaOapg.properties.temprating: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["typ1"]) -> MetaOapg.properties.typ1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["typ2"]) -> MetaOapg.properties.typ2: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "controlfluidtyp", "encapsulated", "encapsulatedtyp", "idrecparent", "idrecwellheadcompsub", "material", "presrating", "refno", "szid", "szod", "temprating", "typ1", "typ2", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["controlfluidtyp"]) -> typing.Union[MetaOapg.properties.controlfluidtyp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["encapsulated"]) -> typing.Union[MetaOapg.properties.encapsulated, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["encapsulatedtyp"]) -> typing.Union[MetaOapg.properties.encapsulatedtyp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecparent"]) -> typing.Union[MetaOapg.properties.idrecparent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecwellheadcompsub"]) -> typing.Union[MetaOapg.properties.idrecwellheadcompsub, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["material"]) -> typing.Union[MetaOapg.properties.material, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["presrating"]) -> typing.Union[MetaOapg.properties.presrating, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["refno"]) -> typing.Union[MetaOapg.properties.refno, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["szid"]) -> typing.Union[MetaOapg.properties.szid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["szod"]) -> typing.Union[MetaOapg.properties.szod, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["temprating"]) -> typing.Union[MetaOapg.properties.temprating, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["typ1"]) -> typing.Union[MetaOapg.properties.typ1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["typ2"]) -> typing.Union[MetaOapg.properties.typ2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "controlfluidtyp", "encapsulated", "encapsulatedtyp", "idrecparent", "idrecwellheadcompsub", "material", "presrating", "refno", "szid", "szod", "temprating", "typ1", "typ2", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idrec: typing.Union[MetaOapg.properties.idrec, str, ],
        idwell: typing.Union[MetaOapg.properties.idwell, str, ],
        controlfluidtyp: typing.Union[MetaOapg.properties.controlfluidtyp, str, schemas.Unset] = schemas.unset,
        encapsulated: typing.Union[MetaOapg.properties.encapsulated, bool, schemas.Unset] = schemas.unset,
        encapsulatedtyp: typing.Union[MetaOapg.properties.encapsulatedtyp, str, schemas.Unset] = schemas.unset,
        idrecparent: typing.Union[MetaOapg.properties.idrecparent, str, schemas.Unset] = schemas.unset,
        idrecwellheadcompsub: typing.Union[MetaOapg.properties.idrecwellheadcompsub, str, schemas.Unset] = schemas.unset,
        material: typing.Union[MetaOapg.properties.material, str, schemas.Unset] = schemas.unset,
        presrating: typing.Union[MetaOapg.properties.presrating, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        refno: typing.Union[MetaOapg.properties.refno, str, schemas.Unset] = schemas.unset,
        szid: typing.Union[MetaOapg.properties.szid, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        szod: typing.Union[MetaOapg.properties.szod, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        temprating: typing.Union[MetaOapg.properties.temprating, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        typ1: typing.Union[MetaOapg.properties.typ1, str, schemas.Unset] = schemas.unset,
        typ2: typing.Union[MetaOapg.properties.typ2, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ControlLineDetailData':
        return super().__new__(
            cls,
            *args,
            idrec=idrec,
            idwell=idwell,
            controlfluidtyp=controlfluidtyp,
            encapsulated=encapsulated,
            encapsulatedtyp=encapsulatedtyp,
            idrecparent=idrecparent,
            idrecwellheadcompsub=idrecwellheadcompsub,
            material=material,
            presrating=presrating,
            refno=refno,
            szid=szid,
            szod=szod,
            temprating=temprating,
            typ1=typ1,
            typ2=typ2,
            _configuration=_configuration,
            **kwargs,
        )
