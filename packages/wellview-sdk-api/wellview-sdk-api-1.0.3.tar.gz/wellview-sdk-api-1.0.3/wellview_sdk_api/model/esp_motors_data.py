# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class ESPMotorsData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idrec",
            "idwell",
        }
        
        class properties:
            idrec = schemas.StrSchema
            idwell = schemas.StrSchema
            housingmetallurgy = schemas.StrSchema
            idrecparent = schemas.StrSchema
            mtrcablearmor = schemas.StrSchema
            mtrcableconditionpull = schemas.StrSchema
            mtrcableconditionrun = schemas.StrSchema
            mtrcablega = schemas.NumberSchema
            mtrcableinsul = schemas.StrSchema
            mtrcablelength = schemas.NumberSchema
            mtrcablemake = schemas.StrSchema
            mtrcableprotectqty = schemas.StrSchema
            mtrcableprotecttyp = schemas.StrSchema
            mtrcableshape = schemas.StrSchema
            mtrcablesheath = schemas.StrSchema
            mtrcablesn = schemas.StrSchema
            mtrcabletyp = schemas.StrSchema
            mtrcablevolt = schemas.NumberSchema
            mtrcurrentrating = schemas.NumberSchema
            mtrfreqrating = schemas.NumberSchema
            mtrlubr = schemas.StrSchema
            mtrpowerrating = schemas.NumberSchema
            mtrtyp = schemas.StrSchema
            mtrvoltagerating = schemas.NumberSchema
            penetratortyp = schemas.StrSchema
            pwrcablebandqty = schemas.StrSchema
            pwrcablebandtyp = schemas.StrSchema
            pwrcableguardqty = schemas.StrSchema
            pwrcableguardtyp = schemas.StrSchema
            shaftmetallurgy = schemas.StrSchema
            __annotations__ = {
                "idrec": idrec,
                "idwell": idwell,
                "housingmetallurgy": housingmetallurgy,
                "idrecparent": idrecparent,
                "mtrcablearmor": mtrcablearmor,
                "mtrcableconditionpull": mtrcableconditionpull,
                "mtrcableconditionrun": mtrcableconditionrun,
                "mtrcablega": mtrcablega,
                "mtrcableinsul": mtrcableinsul,
                "mtrcablelength": mtrcablelength,
                "mtrcablemake": mtrcablemake,
                "mtrcableprotectqty": mtrcableprotectqty,
                "mtrcableprotecttyp": mtrcableprotecttyp,
                "mtrcableshape": mtrcableshape,
                "mtrcablesheath": mtrcablesheath,
                "mtrcablesn": mtrcablesn,
                "mtrcabletyp": mtrcabletyp,
                "mtrcablevolt": mtrcablevolt,
                "mtrcurrentrating": mtrcurrentrating,
                "mtrfreqrating": mtrfreqrating,
                "mtrlubr": mtrlubr,
                "mtrpowerrating": mtrpowerrating,
                "mtrtyp": mtrtyp,
                "mtrvoltagerating": mtrvoltagerating,
                "penetratortyp": penetratortyp,
                "pwrcablebandqty": pwrcablebandqty,
                "pwrcablebandtyp": pwrcablebandtyp,
                "pwrcableguardqty": pwrcableguardqty,
                "pwrcableguardtyp": pwrcableguardtyp,
                "shaftmetallurgy": shaftmetallurgy,
            }
    
    idrec: MetaOapg.properties.idrec
    idwell: MetaOapg.properties.idwell
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["housingmetallurgy"]) -> MetaOapg.properties.housingmetallurgy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecparent"]) -> MetaOapg.properties.idrecparent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mtrcablearmor"]) -> MetaOapg.properties.mtrcablearmor: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mtrcableconditionpull"]) -> MetaOapg.properties.mtrcableconditionpull: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mtrcableconditionrun"]) -> MetaOapg.properties.mtrcableconditionrun: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mtrcablega"]) -> MetaOapg.properties.mtrcablega: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mtrcableinsul"]) -> MetaOapg.properties.mtrcableinsul: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mtrcablelength"]) -> MetaOapg.properties.mtrcablelength: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mtrcablemake"]) -> MetaOapg.properties.mtrcablemake: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mtrcableprotectqty"]) -> MetaOapg.properties.mtrcableprotectqty: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mtrcableprotecttyp"]) -> MetaOapg.properties.mtrcableprotecttyp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mtrcableshape"]) -> MetaOapg.properties.mtrcableshape: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mtrcablesheath"]) -> MetaOapg.properties.mtrcablesheath: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mtrcablesn"]) -> MetaOapg.properties.mtrcablesn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mtrcabletyp"]) -> MetaOapg.properties.mtrcabletyp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mtrcablevolt"]) -> MetaOapg.properties.mtrcablevolt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mtrcurrentrating"]) -> MetaOapg.properties.mtrcurrentrating: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mtrfreqrating"]) -> MetaOapg.properties.mtrfreqrating: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mtrlubr"]) -> MetaOapg.properties.mtrlubr: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mtrpowerrating"]) -> MetaOapg.properties.mtrpowerrating: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mtrtyp"]) -> MetaOapg.properties.mtrtyp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mtrvoltagerating"]) -> MetaOapg.properties.mtrvoltagerating: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["penetratortyp"]) -> MetaOapg.properties.penetratortyp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pwrcablebandqty"]) -> MetaOapg.properties.pwrcablebandqty: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pwrcablebandtyp"]) -> MetaOapg.properties.pwrcablebandtyp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pwrcableguardqty"]) -> MetaOapg.properties.pwrcableguardqty: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pwrcableguardtyp"]) -> MetaOapg.properties.pwrcableguardtyp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shaftmetallurgy"]) -> MetaOapg.properties.shaftmetallurgy: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "housingmetallurgy", "idrecparent", "mtrcablearmor", "mtrcableconditionpull", "mtrcableconditionrun", "mtrcablega", "mtrcableinsul", "mtrcablelength", "mtrcablemake", "mtrcableprotectqty", "mtrcableprotecttyp", "mtrcableshape", "mtrcablesheath", "mtrcablesn", "mtrcabletyp", "mtrcablevolt", "mtrcurrentrating", "mtrfreqrating", "mtrlubr", "mtrpowerrating", "mtrtyp", "mtrvoltagerating", "penetratortyp", "pwrcablebandqty", "pwrcablebandtyp", "pwrcableguardqty", "pwrcableguardtyp", "shaftmetallurgy", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["housingmetallurgy"]) -> typing.Union[MetaOapg.properties.housingmetallurgy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecparent"]) -> typing.Union[MetaOapg.properties.idrecparent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mtrcablearmor"]) -> typing.Union[MetaOapg.properties.mtrcablearmor, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mtrcableconditionpull"]) -> typing.Union[MetaOapg.properties.mtrcableconditionpull, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mtrcableconditionrun"]) -> typing.Union[MetaOapg.properties.mtrcableconditionrun, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mtrcablega"]) -> typing.Union[MetaOapg.properties.mtrcablega, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mtrcableinsul"]) -> typing.Union[MetaOapg.properties.mtrcableinsul, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mtrcablelength"]) -> typing.Union[MetaOapg.properties.mtrcablelength, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mtrcablemake"]) -> typing.Union[MetaOapg.properties.mtrcablemake, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mtrcableprotectqty"]) -> typing.Union[MetaOapg.properties.mtrcableprotectqty, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mtrcableprotecttyp"]) -> typing.Union[MetaOapg.properties.mtrcableprotecttyp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mtrcableshape"]) -> typing.Union[MetaOapg.properties.mtrcableshape, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mtrcablesheath"]) -> typing.Union[MetaOapg.properties.mtrcablesheath, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mtrcablesn"]) -> typing.Union[MetaOapg.properties.mtrcablesn, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mtrcabletyp"]) -> typing.Union[MetaOapg.properties.mtrcabletyp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mtrcablevolt"]) -> typing.Union[MetaOapg.properties.mtrcablevolt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mtrcurrentrating"]) -> typing.Union[MetaOapg.properties.mtrcurrentrating, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mtrfreqrating"]) -> typing.Union[MetaOapg.properties.mtrfreqrating, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mtrlubr"]) -> typing.Union[MetaOapg.properties.mtrlubr, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mtrpowerrating"]) -> typing.Union[MetaOapg.properties.mtrpowerrating, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mtrtyp"]) -> typing.Union[MetaOapg.properties.mtrtyp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mtrvoltagerating"]) -> typing.Union[MetaOapg.properties.mtrvoltagerating, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["penetratortyp"]) -> typing.Union[MetaOapg.properties.penetratortyp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pwrcablebandqty"]) -> typing.Union[MetaOapg.properties.pwrcablebandqty, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pwrcablebandtyp"]) -> typing.Union[MetaOapg.properties.pwrcablebandtyp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pwrcableguardqty"]) -> typing.Union[MetaOapg.properties.pwrcableguardqty, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pwrcableguardtyp"]) -> typing.Union[MetaOapg.properties.pwrcableguardtyp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shaftmetallurgy"]) -> typing.Union[MetaOapg.properties.shaftmetallurgy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "housingmetallurgy", "idrecparent", "mtrcablearmor", "mtrcableconditionpull", "mtrcableconditionrun", "mtrcablega", "mtrcableinsul", "mtrcablelength", "mtrcablemake", "mtrcableprotectqty", "mtrcableprotecttyp", "mtrcableshape", "mtrcablesheath", "mtrcablesn", "mtrcabletyp", "mtrcablevolt", "mtrcurrentrating", "mtrfreqrating", "mtrlubr", "mtrpowerrating", "mtrtyp", "mtrvoltagerating", "penetratortyp", "pwrcablebandqty", "pwrcablebandtyp", "pwrcableguardqty", "pwrcableguardtyp", "shaftmetallurgy", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idrec: typing.Union[MetaOapg.properties.idrec, str, ],
        idwell: typing.Union[MetaOapg.properties.idwell, str, ],
        housingmetallurgy: typing.Union[MetaOapg.properties.housingmetallurgy, str, schemas.Unset] = schemas.unset,
        idrecparent: typing.Union[MetaOapg.properties.idrecparent, str, schemas.Unset] = schemas.unset,
        mtrcablearmor: typing.Union[MetaOapg.properties.mtrcablearmor, str, schemas.Unset] = schemas.unset,
        mtrcableconditionpull: typing.Union[MetaOapg.properties.mtrcableconditionpull, str, schemas.Unset] = schemas.unset,
        mtrcableconditionrun: typing.Union[MetaOapg.properties.mtrcableconditionrun, str, schemas.Unset] = schemas.unset,
        mtrcablega: typing.Union[MetaOapg.properties.mtrcablega, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        mtrcableinsul: typing.Union[MetaOapg.properties.mtrcableinsul, str, schemas.Unset] = schemas.unset,
        mtrcablelength: typing.Union[MetaOapg.properties.mtrcablelength, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        mtrcablemake: typing.Union[MetaOapg.properties.mtrcablemake, str, schemas.Unset] = schemas.unset,
        mtrcableprotectqty: typing.Union[MetaOapg.properties.mtrcableprotectqty, str, schemas.Unset] = schemas.unset,
        mtrcableprotecttyp: typing.Union[MetaOapg.properties.mtrcableprotecttyp, str, schemas.Unset] = schemas.unset,
        mtrcableshape: typing.Union[MetaOapg.properties.mtrcableshape, str, schemas.Unset] = schemas.unset,
        mtrcablesheath: typing.Union[MetaOapg.properties.mtrcablesheath, str, schemas.Unset] = schemas.unset,
        mtrcablesn: typing.Union[MetaOapg.properties.mtrcablesn, str, schemas.Unset] = schemas.unset,
        mtrcabletyp: typing.Union[MetaOapg.properties.mtrcabletyp, str, schemas.Unset] = schemas.unset,
        mtrcablevolt: typing.Union[MetaOapg.properties.mtrcablevolt, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        mtrcurrentrating: typing.Union[MetaOapg.properties.mtrcurrentrating, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        mtrfreqrating: typing.Union[MetaOapg.properties.mtrfreqrating, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        mtrlubr: typing.Union[MetaOapg.properties.mtrlubr, str, schemas.Unset] = schemas.unset,
        mtrpowerrating: typing.Union[MetaOapg.properties.mtrpowerrating, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        mtrtyp: typing.Union[MetaOapg.properties.mtrtyp, str, schemas.Unset] = schemas.unset,
        mtrvoltagerating: typing.Union[MetaOapg.properties.mtrvoltagerating, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        penetratortyp: typing.Union[MetaOapg.properties.penetratortyp, str, schemas.Unset] = schemas.unset,
        pwrcablebandqty: typing.Union[MetaOapg.properties.pwrcablebandqty, str, schemas.Unset] = schemas.unset,
        pwrcablebandtyp: typing.Union[MetaOapg.properties.pwrcablebandtyp, str, schemas.Unset] = schemas.unset,
        pwrcableguardqty: typing.Union[MetaOapg.properties.pwrcableguardqty, str, schemas.Unset] = schemas.unset,
        pwrcableguardtyp: typing.Union[MetaOapg.properties.pwrcableguardtyp, str, schemas.Unset] = schemas.unset,
        shaftmetallurgy: typing.Union[MetaOapg.properties.shaftmetallurgy, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ESPMotorsData':
        return super().__new__(
            cls,
            *args,
            idrec=idrec,
            idwell=idwell,
            housingmetallurgy=housingmetallurgy,
            idrecparent=idrecparent,
            mtrcablearmor=mtrcablearmor,
            mtrcableconditionpull=mtrcableconditionpull,
            mtrcableconditionrun=mtrcableconditionrun,
            mtrcablega=mtrcablega,
            mtrcableinsul=mtrcableinsul,
            mtrcablelength=mtrcablelength,
            mtrcablemake=mtrcablemake,
            mtrcableprotectqty=mtrcableprotectqty,
            mtrcableprotecttyp=mtrcableprotecttyp,
            mtrcableshape=mtrcableshape,
            mtrcablesheath=mtrcablesheath,
            mtrcablesn=mtrcablesn,
            mtrcabletyp=mtrcabletyp,
            mtrcablevolt=mtrcablevolt,
            mtrcurrentrating=mtrcurrentrating,
            mtrfreqrating=mtrfreqrating,
            mtrlubr=mtrlubr,
            mtrpowerrating=mtrpowerrating,
            mtrtyp=mtrtyp,
            mtrvoltagerating=mtrvoltagerating,
            penetratortyp=penetratortyp,
            pwrcablebandqty=pwrcablebandqty,
            pwrcablebandtyp=pwrcablebandtyp,
            pwrcableguardqty=pwrcableguardqty,
            pwrcableguardtyp=pwrcableguardtyp,
            shaftmetallurgy=shaftmetallurgy,
            _configuration=_configuration,
            **kwargs,
        )
