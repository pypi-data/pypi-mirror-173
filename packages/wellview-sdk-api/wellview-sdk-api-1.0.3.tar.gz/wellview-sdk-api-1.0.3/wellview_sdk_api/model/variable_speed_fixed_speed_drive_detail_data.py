# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class VariableSpeedFixedSpeedDriveDetailData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idrec",
            "idwell",
        }
        
        class properties:
            idrec = schemas.StrSchema
            idwell = schemas.StrSchema
            currentrating = schemas.NumberSchema
            fusesz = schemas.StrSchema
            harmonicfilterinput = schemas.BoolSchema
            harmonicfilteroutput = schemas.BoolSchema
            idrecparent = schemas.StrSchema
            inputfreq = schemas.NumberSchema
            kvarating = schemas.NumberSchema
            lowerfreq = schemas.NumberSchema
            mtrcontrollerdes = schemas.StrSchema
            note = schemas.StrSchema
            ratioctfinal = schemas.StrSchema
            ratioctinitial = schemas.StrSchema
            tvssdes = schemas.StrSchema
            tvssinstalled = schemas.BoolSchema
            upperfreq = schemas.NumberSchema
            voltageinput = schemas.NumberSchema
            voltageoutput = schemas.NumberSchema
            __annotations__ = {
                "idrec": idrec,
                "idwell": idwell,
                "currentrating": currentrating,
                "fusesz": fusesz,
                "harmonicfilterinput": harmonicfilterinput,
                "harmonicfilteroutput": harmonicfilteroutput,
                "idrecparent": idrecparent,
                "inputfreq": inputfreq,
                "kvarating": kvarating,
                "lowerfreq": lowerfreq,
                "mtrcontrollerdes": mtrcontrollerdes,
                "note": note,
                "ratioctfinal": ratioctfinal,
                "ratioctinitial": ratioctinitial,
                "tvssdes": tvssdes,
                "tvssinstalled": tvssinstalled,
                "upperfreq": upperfreq,
                "voltageinput": voltageinput,
                "voltageoutput": voltageoutput,
            }
    
    idrec: MetaOapg.properties.idrec
    idwell: MetaOapg.properties.idwell
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currentrating"]) -> MetaOapg.properties.currentrating: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fusesz"]) -> MetaOapg.properties.fusesz: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["harmonicfilterinput"]) -> MetaOapg.properties.harmonicfilterinput: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["harmonicfilteroutput"]) -> MetaOapg.properties.harmonicfilteroutput: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecparent"]) -> MetaOapg.properties.idrecparent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["inputfreq"]) -> MetaOapg.properties.inputfreq: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["kvarating"]) -> MetaOapg.properties.kvarating: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lowerfreq"]) -> MetaOapg.properties.lowerfreq: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mtrcontrollerdes"]) -> MetaOapg.properties.mtrcontrollerdes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["note"]) -> MetaOapg.properties.note: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ratioctfinal"]) -> MetaOapg.properties.ratioctfinal: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ratioctinitial"]) -> MetaOapg.properties.ratioctinitial: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tvssdes"]) -> MetaOapg.properties.tvssdes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tvssinstalled"]) -> MetaOapg.properties.tvssinstalled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["upperfreq"]) -> MetaOapg.properties.upperfreq: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["voltageinput"]) -> MetaOapg.properties.voltageinput: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["voltageoutput"]) -> MetaOapg.properties.voltageoutput: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "currentrating", "fusesz", "harmonicfilterinput", "harmonicfilteroutput", "idrecparent", "inputfreq", "kvarating", "lowerfreq", "mtrcontrollerdes", "note", "ratioctfinal", "ratioctinitial", "tvssdes", "tvssinstalled", "upperfreq", "voltageinput", "voltageoutput", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currentrating"]) -> typing.Union[MetaOapg.properties.currentrating, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fusesz"]) -> typing.Union[MetaOapg.properties.fusesz, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["harmonicfilterinput"]) -> typing.Union[MetaOapg.properties.harmonicfilterinput, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["harmonicfilteroutput"]) -> typing.Union[MetaOapg.properties.harmonicfilteroutput, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecparent"]) -> typing.Union[MetaOapg.properties.idrecparent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["inputfreq"]) -> typing.Union[MetaOapg.properties.inputfreq, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["kvarating"]) -> typing.Union[MetaOapg.properties.kvarating, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lowerfreq"]) -> typing.Union[MetaOapg.properties.lowerfreq, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mtrcontrollerdes"]) -> typing.Union[MetaOapg.properties.mtrcontrollerdes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["note"]) -> typing.Union[MetaOapg.properties.note, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ratioctfinal"]) -> typing.Union[MetaOapg.properties.ratioctfinal, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ratioctinitial"]) -> typing.Union[MetaOapg.properties.ratioctinitial, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tvssdes"]) -> typing.Union[MetaOapg.properties.tvssdes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tvssinstalled"]) -> typing.Union[MetaOapg.properties.tvssinstalled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["upperfreq"]) -> typing.Union[MetaOapg.properties.upperfreq, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["voltageinput"]) -> typing.Union[MetaOapg.properties.voltageinput, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["voltageoutput"]) -> typing.Union[MetaOapg.properties.voltageoutput, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "currentrating", "fusesz", "harmonicfilterinput", "harmonicfilteroutput", "idrecparent", "inputfreq", "kvarating", "lowerfreq", "mtrcontrollerdes", "note", "ratioctfinal", "ratioctinitial", "tvssdes", "tvssinstalled", "upperfreq", "voltageinput", "voltageoutput", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idrec: typing.Union[MetaOapg.properties.idrec, str, ],
        idwell: typing.Union[MetaOapg.properties.idwell, str, ],
        currentrating: typing.Union[MetaOapg.properties.currentrating, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        fusesz: typing.Union[MetaOapg.properties.fusesz, str, schemas.Unset] = schemas.unset,
        harmonicfilterinput: typing.Union[MetaOapg.properties.harmonicfilterinput, bool, schemas.Unset] = schemas.unset,
        harmonicfilteroutput: typing.Union[MetaOapg.properties.harmonicfilteroutput, bool, schemas.Unset] = schemas.unset,
        idrecparent: typing.Union[MetaOapg.properties.idrecparent, str, schemas.Unset] = schemas.unset,
        inputfreq: typing.Union[MetaOapg.properties.inputfreq, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        kvarating: typing.Union[MetaOapg.properties.kvarating, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        lowerfreq: typing.Union[MetaOapg.properties.lowerfreq, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        mtrcontrollerdes: typing.Union[MetaOapg.properties.mtrcontrollerdes, str, schemas.Unset] = schemas.unset,
        note: typing.Union[MetaOapg.properties.note, str, schemas.Unset] = schemas.unset,
        ratioctfinal: typing.Union[MetaOapg.properties.ratioctfinal, str, schemas.Unset] = schemas.unset,
        ratioctinitial: typing.Union[MetaOapg.properties.ratioctinitial, str, schemas.Unset] = schemas.unset,
        tvssdes: typing.Union[MetaOapg.properties.tvssdes, str, schemas.Unset] = schemas.unset,
        tvssinstalled: typing.Union[MetaOapg.properties.tvssinstalled, bool, schemas.Unset] = schemas.unset,
        upperfreq: typing.Union[MetaOapg.properties.upperfreq, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        voltageinput: typing.Union[MetaOapg.properties.voltageinput, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        voltageoutput: typing.Union[MetaOapg.properties.voltageoutput, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'VariableSpeedFixedSpeedDriveDetailData':
        return super().__new__(
            cls,
            *args,
            idrec=idrec,
            idwell=idwell,
            currentrating=currentrating,
            fusesz=fusesz,
            harmonicfilterinput=harmonicfilterinput,
            harmonicfilteroutput=harmonicfilteroutput,
            idrecparent=idrecparent,
            inputfreq=inputfreq,
            kvarating=kvarating,
            lowerfreq=lowerfreq,
            mtrcontrollerdes=mtrcontrollerdes,
            note=note,
            ratioctfinal=ratioctfinal,
            ratioctinitial=ratioctinitial,
            tvssdes=tvssdes,
            tvssinstalled=tvssinstalled,
            upperfreq=upperfreq,
            voltageinput=voltageinput,
            voltageoutput=voltageoutput,
            _configuration=_configuration,
            **kwargs,
        )
