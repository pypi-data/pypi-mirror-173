# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class RisersDiverterData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idrec",
            "idwell",
        }
        
        class properties:
            idrec = schemas.StrSchema
            idwell = schemas.StrSchema
            com = schemas.StrSchema
            depthbtm = schemas.NumberSchema
            des = schemas.StrSchema
            dttmpull = schemas.DateTimeSchema
            dttmrun = schemas.DateTimeSchema
            proposedpull = schemas.BoolSchema
            proposedrun = schemas.BoolSchema
            tension = schemas.NumberSchema
            wthangprelatch = schemas.NumberSchema
            wthangunlatch = schemas.NumberSchema
            __annotations__ = {
                "idrec": idrec,
                "idwell": idwell,
                "com": com,
                "depthbtm": depthbtm,
                "des": des,
                "dttmpull": dttmpull,
                "dttmrun": dttmrun,
                "proposedpull": proposedpull,
                "proposedrun": proposedrun,
                "tension": tension,
                "wthangprelatch": wthangprelatch,
                "wthangunlatch": wthangunlatch,
            }
    
    idrec: MetaOapg.properties.idrec
    idwell: MetaOapg.properties.idwell
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["com"]) -> MetaOapg.properties.com: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["depthbtm"]) -> MetaOapg.properties.depthbtm: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["des"]) -> MetaOapg.properties.des: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmpull"]) -> MetaOapg.properties.dttmpull: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmrun"]) -> MetaOapg.properties.dttmrun: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["proposedpull"]) -> MetaOapg.properties.proposedpull: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["proposedrun"]) -> MetaOapg.properties.proposedrun: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tension"]) -> MetaOapg.properties.tension: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wthangprelatch"]) -> MetaOapg.properties.wthangprelatch: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wthangunlatch"]) -> MetaOapg.properties.wthangunlatch: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "com", "depthbtm", "des", "dttmpull", "dttmrun", "proposedpull", "proposedrun", "tension", "wthangprelatch", "wthangunlatch", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["com"]) -> typing.Union[MetaOapg.properties.com, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["depthbtm"]) -> typing.Union[MetaOapg.properties.depthbtm, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["des"]) -> typing.Union[MetaOapg.properties.des, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmpull"]) -> typing.Union[MetaOapg.properties.dttmpull, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmrun"]) -> typing.Union[MetaOapg.properties.dttmrun, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["proposedpull"]) -> typing.Union[MetaOapg.properties.proposedpull, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["proposedrun"]) -> typing.Union[MetaOapg.properties.proposedrun, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tension"]) -> typing.Union[MetaOapg.properties.tension, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wthangprelatch"]) -> typing.Union[MetaOapg.properties.wthangprelatch, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wthangunlatch"]) -> typing.Union[MetaOapg.properties.wthangunlatch, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "com", "depthbtm", "des", "dttmpull", "dttmrun", "proposedpull", "proposedrun", "tension", "wthangprelatch", "wthangunlatch", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idrec: typing.Union[MetaOapg.properties.idrec, str, ],
        idwell: typing.Union[MetaOapg.properties.idwell, str, ],
        com: typing.Union[MetaOapg.properties.com, str, schemas.Unset] = schemas.unset,
        depthbtm: typing.Union[MetaOapg.properties.depthbtm, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        des: typing.Union[MetaOapg.properties.des, str, schemas.Unset] = schemas.unset,
        dttmpull: typing.Union[MetaOapg.properties.dttmpull, str, datetime, schemas.Unset] = schemas.unset,
        dttmrun: typing.Union[MetaOapg.properties.dttmrun, str, datetime, schemas.Unset] = schemas.unset,
        proposedpull: typing.Union[MetaOapg.properties.proposedpull, bool, schemas.Unset] = schemas.unset,
        proposedrun: typing.Union[MetaOapg.properties.proposedrun, bool, schemas.Unset] = schemas.unset,
        tension: typing.Union[MetaOapg.properties.tension, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        wthangprelatch: typing.Union[MetaOapg.properties.wthangprelatch, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        wthangunlatch: typing.Union[MetaOapg.properties.wthangunlatch, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'RisersDiverterData':
        return super().__new__(
            cls,
            *args,
            idrec=idrec,
            idwell=idwell,
            com=com,
            depthbtm=depthbtm,
            des=des,
            dttmpull=dttmpull,
            dttmrun=dttmrun,
            proposedpull=proposedpull,
            proposedrun=proposedrun,
            tension=tension,
            wthangprelatch=wthangprelatch,
            wthangunlatch=wthangunlatch,
            _configuration=_configuration,
            **kwargs,
        )
