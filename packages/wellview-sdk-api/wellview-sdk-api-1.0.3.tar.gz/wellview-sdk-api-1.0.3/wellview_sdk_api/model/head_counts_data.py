# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class HeadCountsData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idrec",
            "idwell",
        }
        
        class properties:
            idrec = schemas.StrSchema
            idwell = schemas.StrSchema
            company = schemas.StrSchema
            companytyp = schemas.StrSchema
            durationworkot = schemas.NumberSchema
            durationworkreg = schemas.NumberSchema
            employeename = schemas.StrSchema
            employeetyp = schemas.StrSchema
            exclude = schemas.BoolSchema
            headcount = schemas.IntSchema
            idrecparent = schemas.StrSchema
            note = schemas.StrSchema
            refderrick = schemas.StrSchema
            syscarryfwdp = schemas.BoolSchema
            __annotations__ = {
                "idrec": idrec,
                "idwell": idwell,
                "company": company,
                "companytyp": companytyp,
                "durationworkot": durationworkot,
                "durationworkreg": durationworkreg,
                "employeename": employeename,
                "employeetyp": employeetyp,
                "exclude": exclude,
                "headcount": headcount,
                "idrecparent": idrecparent,
                "note": note,
                "refderrick": refderrick,
                "syscarryfwdp": syscarryfwdp,
            }
    
    idrec: MetaOapg.properties.idrec
    idwell: MetaOapg.properties.idwell
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["company"]) -> MetaOapg.properties.company: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["companytyp"]) -> MetaOapg.properties.companytyp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["durationworkot"]) -> MetaOapg.properties.durationworkot: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["durationworkreg"]) -> MetaOapg.properties.durationworkreg: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeename"]) -> MetaOapg.properties.employeename: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeetyp"]) -> MetaOapg.properties.employeetyp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["exclude"]) -> MetaOapg.properties.exclude: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["headcount"]) -> MetaOapg.properties.headcount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecparent"]) -> MetaOapg.properties.idrecparent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["note"]) -> MetaOapg.properties.note: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["refderrick"]) -> MetaOapg.properties.refderrick: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["syscarryfwdp"]) -> MetaOapg.properties.syscarryfwdp: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "company", "companytyp", "durationworkot", "durationworkreg", "employeename", "employeetyp", "exclude", "headcount", "idrecparent", "note", "refderrick", "syscarryfwdp", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["company"]) -> typing.Union[MetaOapg.properties.company, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["companytyp"]) -> typing.Union[MetaOapg.properties.companytyp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["durationworkot"]) -> typing.Union[MetaOapg.properties.durationworkot, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["durationworkreg"]) -> typing.Union[MetaOapg.properties.durationworkreg, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeename"]) -> typing.Union[MetaOapg.properties.employeename, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeetyp"]) -> typing.Union[MetaOapg.properties.employeetyp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["exclude"]) -> typing.Union[MetaOapg.properties.exclude, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["headcount"]) -> typing.Union[MetaOapg.properties.headcount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecparent"]) -> typing.Union[MetaOapg.properties.idrecparent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["note"]) -> typing.Union[MetaOapg.properties.note, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["refderrick"]) -> typing.Union[MetaOapg.properties.refderrick, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["syscarryfwdp"]) -> typing.Union[MetaOapg.properties.syscarryfwdp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "company", "companytyp", "durationworkot", "durationworkreg", "employeename", "employeetyp", "exclude", "headcount", "idrecparent", "note", "refderrick", "syscarryfwdp", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idrec: typing.Union[MetaOapg.properties.idrec, str, ],
        idwell: typing.Union[MetaOapg.properties.idwell, str, ],
        company: typing.Union[MetaOapg.properties.company, str, schemas.Unset] = schemas.unset,
        companytyp: typing.Union[MetaOapg.properties.companytyp, str, schemas.Unset] = schemas.unset,
        durationworkot: typing.Union[MetaOapg.properties.durationworkot, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        durationworkreg: typing.Union[MetaOapg.properties.durationworkreg, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        employeename: typing.Union[MetaOapg.properties.employeename, str, schemas.Unset] = schemas.unset,
        employeetyp: typing.Union[MetaOapg.properties.employeetyp, str, schemas.Unset] = schemas.unset,
        exclude: typing.Union[MetaOapg.properties.exclude, bool, schemas.Unset] = schemas.unset,
        headcount: typing.Union[MetaOapg.properties.headcount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        idrecparent: typing.Union[MetaOapg.properties.idrecparent, str, schemas.Unset] = schemas.unset,
        note: typing.Union[MetaOapg.properties.note, str, schemas.Unset] = schemas.unset,
        refderrick: typing.Union[MetaOapg.properties.refderrick, str, schemas.Unset] = schemas.unset,
        syscarryfwdp: typing.Union[MetaOapg.properties.syscarryfwdp, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'HeadCountsData':
        return super().__new__(
            cls,
            *args,
            idrec=idrec,
            idwell=idwell,
            company=company,
            companytyp=companytyp,
            durationworkot=durationworkot,
            durationworkreg=durationworkreg,
            employeename=employeename,
            employeetyp=employeetyp,
            exclude=exclude,
            headcount=headcount,
            idrecparent=idrecparent,
            note=note,
            refderrick=refderrick,
            syscarryfwdp=syscarryfwdp,
            _configuration=_configuration,
            **kwargs,
        )
