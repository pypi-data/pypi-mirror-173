# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class GeologicalSamplingRequirementData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idrec",
            "idwell",
        }
        
        class properties:
            idrec = schemas.StrSchema
            idwell = schemas.StrSchema
            com = schemas.StrSchema
            depthbtm = schemas.NumberSchema
            depthtop = schemas.NumberSchema
            dttmrequired = schemas.DateTimeSchema
            dttmrevision = schemas.DateTimeSchema
            idrecparent = schemas.StrSchema
            idrecwellbore = schemas.StrSchema
            noteintervalbtm = schemas.StrSchema
            noteintervaltop = schemas.StrSchema
            requiredby = schemas.StrSchema
            revisionno = schemas.StrSchema
            sampledby = schemas.StrSchema
            __annotations__ = {
                "idrec": idrec,
                "idwell": idwell,
                "com": com,
                "depthbtm": depthbtm,
                "depthtop": depthtop,
                "dttmrequired": dttmrequired,
                "dttmrevision": dttmrevision,
                "idrecparent": idrecparent,
                "idrecwellbore": idrecwellbore,
                "noteintervalbtm": noteintervalbtm,
                "noteintervaltop": noteintervaltop,
                "requiredby": requiredby,
                "revisionno": revisionno,
                "sampledby": sampledby,
            }
    
    idrec: MetaOapg.properties.idrec
    idwell: MetaOapg.properties.idwell
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["com"]) -> MetaOapg.properties.com: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["depthbtm"]) -> MetaOapg.properties.depthbtm: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["depthtop"]) -> MetaOapg.properties.depthtop: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmrequired"]) -> MetaOapg.properties.dttmrequired: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmrevision"]) -> MetaOapg.properties.dttmrevision: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecparent"]) -> MetaOapg.properties.idrecparent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecwellbore"]) -> MetaOapg.properties.idrecwellbore: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["noteintervalbtm"]) -> MetaOapg.properties.noteintervalbtm: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["noteintervaltop"]) -> MetaOapg.properties.noteintervaltop: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["requiredby"]) -> MetaOapg.properties.requiredby: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["revisionno"]) -> MetaOapg.properties.revisionno: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sampledby"]) -> MetaOapg.properties.sampledby: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "com", "depthbtm", "depthtop", "dttmrequired", "dttmrevision", "idrecparent", "idrecwellbore", "noteintervalbtm", "noteintervaltop", "requiredby", "revisionno", "sampledby", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["com"]) -> typing.Union[MetaOapg.properties.com, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["depthbtm"]) -> typing.Union[MetaOapg.properties.depthbtm, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["depthtop"]) -> typing.Union[MetaOapg.properties.depthtop, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmrequired"]) -> typing.Union[MetaOapg.properties.dttmrequired, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmrevision"]) -> typing.Union[MetaOapg.properties.dttmrevision, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecparent"]) -> typing.Union[MetaOapg.properties.idrecparent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecwellbore"]) -> typing.Union[MetaOapg.properties.idrecwellbore, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["noteintervalbtm"]) -> typing.Union[MetaOapg.properties.noteintervalbtm, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["noteintervaltop"]) -> typing.Union[MetaOapg.properties.noteintervaltop, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["requiredby"]) -> typing.Union[MetaOapg.properties.requiredby, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["revisionno"]) -> typing.Union[MetaOapg.properties.revisionno, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sampledby"]) -> typing.Union[MetaOapg.properties.sampledby, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "com", "depthbtm", "depthtop", "dttmrequired", "dttmrevision", "idrecparent", "idrecwellbore", "noteintervalbtm", "noteintervaltop", "requiredby", "revisionno", "sampledby", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idrec: typing.Union[MetaOapg.properties.idrec, str, ],
        idwell: typing.Union[MetaOapg.properties.idwell, str, ],
        com: typing.Union[MetaOapg.properties.com, str, schemas.Unset] = schemas.unset,
        depthbtm: typing.Union[MetaOapg.properties.depthbtm, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        depthtop: typing.Union[MetaOapg.properties.depthtop, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        dttmrequired: typing.Union[MetaOapg.properties.dttmrequired, str, datetime, schemas.Unset] = schemas.unset,
        dttmrevision: typing.Union[MetaOapg.properties.dttmrevision, str, datetime, schemas.Unset] = schemas.unset,
        idrecparent: typing.Union[MetaOapg.properties.idrecparent, str, schemas.Unset] = schemas.unset,
        idrecwellbore: typing.Union[MetaOapg.properties.idrecwellbore, str, schemas.Unset] = schemas.unset,
        noteintervalbtm: typing.Union[MetaOapg.properties.noteintervalbtm, str, schemas.Unset] = schemas.unset,
        noteintervaltop: typing.Union[MetaOapg.properties.noteintervaltop, str, schemas.Unset] = schemas.unset,
        requiredby: typing.Union[MetaOapg.properties.requiredby, str, schemas.Unset] = schemas.unset,
        revisionno: typing.Union[MetaOapg.properties.revisionno, str, schemas.Unset] = schemas.unset,
        sampledby: typing.Union[MetaOapg.properties.sampledby, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'GeologicalSamplingRequirementData':
        return super().__new__(
            cls,
            *args,
            idrec=idrec,
            idwell=idwell,
            com=com,
            depthbtm=depthbtm,
            depthtop=depthtop,
            dttmrequired=dttmrequired,
            dttmrevision=dttmrevision,
            idrecparent=idrecparent,
            idrecwellbore=idrecwellbore,
            noteintervalbtm=noteintervalbtm,
            noteintervaltop=noteintervaltop,
            requiredby=requiredby,
            revisionno=revisionno,
            sampledby=sampledby,
            _configuration=_configuration,
            **kwargs,
        )
