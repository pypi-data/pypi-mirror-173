# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class WellboreReservoirData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idrec",
            "idwell",
        }
        
        class properties:
            idrec = schemas.StrSchema
            idwell = schemas.StrSchema
            com = schemas.StrSchema
            depthbtm = schemas.NumberSchema
            depthresdatum = schemas.NumberSchema
            depthssresdatum = schemas.NumberSchema
            depthtop = schemas.NumberSchema
            des = schemas.StrSchema
            idrecparent = schemas.StrSchema
            rescode = schemas.StrSchema
            resida = schemas.StrSchema
            residb = schemas.StrSchema
            residc = schemas.StrSchema
            resname = schemas.StrSchema
            __annotations__ = {
                "idrec": idrec,
                "idwell": idwell,
                "com": com,
                "depthbtm": depthbtm,
                "depthresdatum": depthresdatum,
                "depthssresdatum": depthssresdatum,
                "depthtop": depthtop,
                "des": des,
                "idrecparent": idrecparent,
                "rescode": rescode,
                "resida": resida,
                "residb": residb,
                "residc": residc,
                "resname": resname,
            }
    
    idrec: MetaOapg.properties.idrec
    idwell: MetaOapg.properties.idwell
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["com"]) -> MetaOapg.properties.com: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["depthbtm"]) -> MetaOapg.properties.depthbtm: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["depthresdatum"]) -> MetaOapg.properties.depthresdatum: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["depthssresdatum"]) -> MetaOapg.properties.depthssresdatum: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["depthtop"]) -> MetaOapg.properties.depthtop: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["des"]) -> MetaOapg.properties.des: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecparent"]) -> MetaOapg.properties.idrecparent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rescode"]) -> MetaOapg.properties.rescode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["resida"]) -> MetaOapg.properties.resida: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["residb"]) -> MetaOapg.properties.residb: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["residc"]) -> MetaOapg.properties.residc: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["resname"]) -> MetaOapg.properties.resname: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "com", "depthbtm", "depthresdatum", "depthssresdatum", "depthtop", "des", "idrecparent", "rescode", "resida", "residb", "residc", "resname", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["com"]) -> typing.Union[MetaOapg.properties.com, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["depthbtm"]) -> typing.Union[MetaOapg.properties.depthbtm, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["depthresdatum"]) -> typing.Union[MetaOapg.properties.depthresdatum, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["depthssresdatum"]) -> typing.Union[MetaOapg.properties.depthssresdatum, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["depthtop"]) -> typing.Union[MetaOapg.properties.depthtop, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["des"]) -> typing.Union[MetaOapg.properties.des, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecparent"]) -> typing.Union[MetaOapg.properties.idrecparent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rescode"]) -> typing.Union[MetaOapg.properties.rescode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["resida"]) -> typing.Union[MetaOapg.properties.resida, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["residb"]) -> typing.Union[MetaOapg.properties.residb, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["residc"]) -> typing.Union[MetaOapg.properties.residc, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["resname"]) -> typing.Union[MetaOapg.properties.resname, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "com", "depthbtm", "depthresdatum", "depthssresdatum", "depthtop", "des", "idrecparent", "rescode", "resida", "residb", "residc", "resname", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idrec: typing.Union[MetaOapg.properties.idrec, str, ],
        idwell: typing.Union[MetaOapg.properties.idwell, str, ],
        com: typing.Union[MetaOapg.properties.com, str, schemas.Unset] = schemas.unset,
        depthbtm: typing.Union[MetaOapg.properties.depthbtm, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        depthresdatum: typing.Union[MetaOapg.properties.depthresdatum, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        depthssresdatum: typing.Union[MetaOapg.properties.depthssresdatum, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        depthtop: typing.Union[MetaOapg.properties.depthtop, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        des: typing.Union[MetaOapg.properties.des, str, schemas.Unset] = schemas.unset,
        idrecparent: typing.Union[MetaOapg.properties.idrecparent, str, schemas.Unset] = schemas.unset,
        rescode: typing.Union[MetaOapg.properties.rescode, str, schemas.Unset] = schemas.unset,
        resida: typing.Union[MetaOapg.properties.resida, str, schemas.Unset] = schemas.unset,
        residb: typing.Union[MetaOapg.properties.residb, str, schemas.Unset] = schemas.unset,
        residc: typing.Union[MetaOapg.properties.residc, str, schemas.Unset] = schemas.unset,
        resname: typing.Union[MetaOapg.properties.resname, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'WellboreReservoirData':
        return super().__new__(
            cls,
            *args,
            idrec=idrec,
            idwell=idwell,
            com=com,
            depthbtm=depthbtm,
            depthresdatum=depthresdatum,
            depthssresdatum=depthssresdatum,
            depthtop=depthtop,
            des=des,
            idrecparent=idrecparent,
            rescode=rescode,
            resida=resida,
            residb=residb,
            residc=residc,
            resname=resname,
            _configuration=_configuration,
            **kwargs,
        )
