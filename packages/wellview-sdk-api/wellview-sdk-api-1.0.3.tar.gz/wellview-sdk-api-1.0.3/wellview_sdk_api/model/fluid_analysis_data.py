# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class FluidAnalysisData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idrec",
            "idwell",
        }
        
        class properties:
            idrec = schemas.StrSchema
            idwell = schemas.StrSchema
            analysistyp = schemas.StrSchema
            analyst = schemas.StrSchema
            com = schemas.StrSchema
            depthbtm = schemas.NumberSchema
            depthtop = schemas.NumberSchema
            des = schemas.StrSchema
            dttmreceived = schemas.DateTimeSchema
            dttmreport = schemas.DateTimeSchema
            dttmsample = schemas.DateTimeSchema
            idreczonecompletion = schemas.StrSchema
            locsample = schemas.StrSchema
            presgaugesource = schemas.NumberSchema
            presreservoir = schemas.NumberSchema
            pressample = schemas.NumberSchema
            pressamplerec = schemas.NumberSchema
            presseparator = schemas.NumberSchema
            refnolaboratory = schemas.StrSchema
            refnosample = schemas.StrSchema
            refnotest = schemas.StrSchema
            sampletyp1 = schemas.StrSchema
            tempgaugesource = schemas.NumberSchema
            tempreservoir = schemas.NumberSchema
            tempsample = schemas.NumberSchema
            tempsamplerec = schemas.NumberSchema
            tempseparator = schemas.NumberSchema
            testedby = schemas.StrSchema
            __annotations__ = {
                "idrec": idrec,
                "idwell": idwell,
                "analysistyp": analysistyp,
                "analyst": analyst,
                "com": com,
                "depthbtm": depthbtm,
                "depthtop": depthtop,
                "des": des,
                "dttmreceived": dttmreceived,
                "dttmreport": dttmreport,
                "dttmsample": dttmsample,
                "idreczonecompletion": idreczonecompletion,
                "locsample": locsample,
                "presgaugesource": presgaugesource,
                "presreservoir": presreservoir,
                "pressample": pressample,
                "pressamplerec": pressamplerec,
                "presseparator": presseparator,
                "refnolaboratory": refnolaboratory,
                "refnosample": refnosample,
                "refnotest": refnotest,
                "sampletyp1": sampletyp1,
                "tempgaugesource": tempgaugesource,
                "tempreservoir": tempreservoir,
                "tempsample": tempsample,
                "tempsamplerec": tempsamplerec,
                "tempseparator": tempseparator,
                "testedby": testedby,
            }
    
    idrec: MetaOapg.properties.idrec
    idwell: MetaOapg.properties.idwell
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["analysistyp"]) -> MetaOapg.properties.analysistyp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["analyst"]) -> MetaOapg.properties.analyst: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["com"]) -> MetaOapg.properties.com: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["depthbtm"]) -> MetaOapg.properties.depthbtm: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["depthtop"]) -> MetaOapg.properties.depthtop: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["des"]) -> MetaOapg.properties.des: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmreceived"]) -> MetaOapg.properties.dttmreceived: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmreport"]) -> MetaOapg.properties.dttmreport: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmsample"]) -> MetaOapg.properties.dttmsample: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idreczonecompletion"]) -> MetaOapg.properties.idreczonecompletion: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["locsample"]) -> MetaOapg.properties.locsample: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["presgaugesource"]) -> MetaOapg.properties.presgaugesource: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["presreservoir"]) -> MetaOapg.properties.presreservoir: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pressample"]) -> MetaOapg.properties.pressample: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pressamplerec"]) -> MetaOapg.properties.pressamplerec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["presseparator"]) -> MetaOapg.properties.presseparator: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["refnolaboratory"]) -> MetaOapg.properties.refnolaboratory: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["refnosample"]) -> MetaOapg.properties.refnosample: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["refnotest"]) -> MetaOapg.properties.refnotest: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sampletyp1"]) -> MetaOapg.properties.sampletyp1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tempgaugesource"]) -> MetaOapg.properties.tempgaugesource: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tempreservoir"]) -> MetaOapg.properties.tempreservoir: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tempsample"]) -> MetaOapg.properties.tempsample: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tempsamplerec"]) -> MetaOapg.properties.tempsamplerec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tempseparator"]) -> MetaOapg.properties.tempseparator: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["testedby"]) -> MetaOapg.properties.testedby: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "analysistyp", "analyst", "com", "depthbtm", "depthtop", "des", "dttmreceived", "dttmreport", "dttmsample", "idreczonecompletion", "locsample", "presgaugesource", "presreservoir", "pressample", "pressamplerec", "presseparator", "refnolaboratory", "refnosample", "refnotest", "sampletyp1", "tempgaugesource", "tempreservoir", "tempsample", "tempsamplerec", "tempseparator", "testedby", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["analysistyp"]) -> typing.Union[MetaOapg.properties.analysistyp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["analyst"]) -> typing.Union[MetaOapg.properties.analyst, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["com"]) -> typing.Union[MetaOapg.properties.com, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["depthbtm"]) -> typing.Union[MetaOapg.properties.depthbtm, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["depthtop"]) -> typing.Union[MetaOapg.properties.depthtop, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["des"]) -> typing.Union[MetaOapg.properties.des, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmreceived"]) -> typing.Union[MetaOapg.properties.dttmreceived, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmreport"]) -> typing.Union[MetaOapg.properties.dttmreport, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmsample"]) -> typing.Union[MetaOapg.properties.dttmsample, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idreczonecompletion"]) -> typing.Union[MetaOapg.properties.idreczonecompletion, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["locsample"]) -> typing.Union[MetaOapg.properties.locsample, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["presgaugesource"]) -> typing.Union[MetaOapg.properties.presgaugesource, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["presreservoir"]) -> typing.Union[MetaOapg.properties.presreservoir, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pressample"]) -> typing.Union[MetaOapg.properties.pressample, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pressamplerec"]) -> typing.Union[MetaOapg.properties.pressamplerec, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["presseparator"]) -> typing.Union[MetaOapg.properties.presseparator, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["refnolaboratory"]) -> typing.Union[MetaOapg.properties.refnolaboratory, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["refnosample"]) -> typing.Union[MetaOapg.properties.refnosample, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["refnotest"]) -> typing.Union[MetaOapg.properties.refnotest, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sampletyp1"]) -> typing.Union[MetaOapg.properties.sampletyp1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tempgaugesource"]) -> typing.Union[MetaOapg.properties.tempgaugesource, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tempreservoir"]) -> typing.Union[MetaOapg.properties.tempreservoir, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tempsample"]) -> typing.Union[MetaOapg.properties.tempsample, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tempsamplerec"]) -> typing.Union[MetaOapg.properties.tempsamplerec, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tempseparator"]) -> typing.Union[MetaOapg.properties.tempseparator, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["testedby"]) -> typing.Union[MetaOapg.properties.testedby, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "analysistyp", "analyst", "com", "depthbtm", "depthtop", "des", "dttmreceived", "dttmreport", "dttmsample", "idreczonecompletion", "locsample", "presgaugesource", "presreservoir", "pressample", "pressamplerec", "presseparator", "refnolaboratory", "refnosample", "refnotest", "sampletyp1", "tempgaugesource", "tempreservoir", "tempsample", "tempsamplerec", "tempseparator", "testedby", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idrec: typing.Union[MetaOapg.properties.idrec, str, ],
        idwell: typing.Union[MetaOapg.properties.idwell, str, ],
        analysistyp: typing.Union[MetaOapg.properties.analysistyp, str, schemas.Unset] = schemas.unset,
        analyst: typing.Union[MetaOapg.properties.analyst, str, schemas.Unset] = schemas.unset,
        com: typing.Union[MetaOapg.properties.com, str, schemas.Unset] = schemas.unset,
        depthbtm: typing.Union[MetaOapg.properties.depthbtm, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        depthtop: typing.Union[MetaOapg.properties.depthtop, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        des: typing.Union[MetaOapg.properties.des, str, schemas.Unset] = schemas.unset,
        dttmreceived: typing.Union[MetaOapg.properties.dttmreceived, str, datetime, schemas.Unset] = schemas.unset,
        dttmreport: typing.Union[MetaOapg.properties.dttmreport, str, datetime, schemas.Unset] = schemas.unset,
        dttmsample: typing.Union[MetaOapg.properties.dttmsample, str, datetime, schemas.Unset] = schemas.unset,
        idreczonecompletion: typing.Union[MetaOapg.properties.idreczonecompletion, str, schemas.Unset] = schemas.unset,
        locsample: typing.Union[MetaOapg.properties.locsample, str, schemas.Unset] = schemas.unset,
        presgaugesource: typing.Union[MetaOapg.properties.presgaugesource, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        presreservoir: typing.Union[MetaOapg.properties.presreservoir, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        pressample: typing.Union[MetaOapg.properties.pressample, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        pressamplerec: typing.Union[MetaOapg.properties.pressamplerec, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        presseparator: typing.Union[MetaOapg.properties.presseparator, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        refnolaboratory: typing.Union[MetaOapg.properties.refnolaboratory, str, schemas.Unset] = schemas.unset,
        refnosample: typing.Union[MetaOapg.properties.refnosample, str, schemas.Unset] = schemas.unset,
        refnotest: typing.Union[MetaOapg.properties.refnotest, str, schemas.Unset] = schemas.unset,
        sampletyp1: typing.Union[MetaOapg.properties.sampletyp1, str, schemas.Unset] = schemas.unset,
        tempgaugesource: typing.Union[MetaOapg.properties.tempgaugesource, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        tempreservoir: typing.Union[MetaOapg.properties.tempreservoir, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        tempsample: typing.Union[MetaOapg.properties.tempsample, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        tempsamplerec: typing.Union[MetaOapg.properties.tempsamplerec, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        tempseparator: typing.Union[MetaOapg.properties.tempseparator, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        testedby: typing.Union[MetaOapg.properties.testedby, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'FluidAnalysisData':
        return super().__new__(
            cls,
            *args,
            idrec=idrec,
            idwell=idwell,
            analysistyp=analysistyp,
            analyst=analyst,
            com=com,
            depthbtm=depthbtm,
            depthtop=depthtop,
            des=des,
            dttmreceived=dttmreceived,
            dttmreport=dttmreport,
            dttmsample=dttmsample,
            idreczonecompletion=idreczonecompletion,
            locsample=locsample,
            presgaugesource=presgaugesource,
            presreservoir=presreservoir,
            pressample=pressample,
            pressamplerec=pressamplerec,
            presseparator=presseparator,
            refnolaboratory=refnolaboratory,
            refnosample=refnosample,
            refnotest=refnotest,
            sampletyp1=sampletyp1,
            tempgaugesource=tempgaugesource,
            tempreservoir=tempreservoir,
            tempsample=tempsample,
            tempsamplerec=tempsamplerec,
            tempseparator=tempseparator,
            testedby=testedby,
            _configuration=_configuration,
            **kwargs,
        )
