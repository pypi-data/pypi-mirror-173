# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class STOPCardsAndJSAData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idrec",
            "idwell",
        }
        
        class properties:
            idrec = schemas.StrSchema
            idwell = schemas.StrSchema
            actiontyp = schemas.StrSchema
            com = schemas.StrSchema
            company = schemas.StrSchema
            companytyp = schemas.StrSchema
            des = schemas.StrSchema
            dttmend = schemas.DateTimeSchema
            dttmstart = schemas.DateTimeSchema
            employeename = schemas.StrSchema
            employeetyp = schemas.StrSchema
            hazardida = schemas.StrSchema
            hazardidb = schemas.StrSchema
            hazardidc = schemas.StrSchema
            idrecparent = schemas.StrSchema
            norpt = schemas.IntSchema
            potentialseverity = schemas.StrSchema
            refno = schemas.StrSchema
            severity = schemas.StrSchema
            solution = schemas.StrSchema
            status = schemas.StrSchema
            tour = schemas.StrSchema
            typ1 = schemas.StrSchema
            typ2 = schemas.StrSchema
            __annotations__ = {
                "idrec": idrec,
                "idwell": idwell,
                "actiontyp": actiontyp,
                "com": com,
                "company": company,
                "companytyp": companytyp,
                "des": des,
                "dttmend": dttmend,
                "dttmstart": dttmstart,
                "employeename": employeename,
                "employeetyp": employeetyp,
                "hazardida": hazardida,
                "hazardidb": hazardidb,
                "hazardidc": hazardidc,
                "idrecparent": idrecparent,
                "norpt": norpt,
                "potentialseverity": potentialseverity,
                "refno": refno,
                "severity": severity,
                "solution": solution,
                "status": status,
                "tour": tour,
                "typ1": typ1,
                "typ2": typ2,
            }
    
    idrec: MetaOapg.properties.idrec
    idwell: MetaOapg.properties.idwell
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["actiontyp"]) -> MetaOapg.properties.actiontyp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["com"]) -> MetaOapg.properties.com: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["company"]) -> MetaOapg.properties.company: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["companytyp"]) -> MetaOapg.properties.companytyp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["des"]) -> MetaOapg.properties.des: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmend"]) -> MetaOapg.properties.dttmend: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmstart"]) -> MetaOapg.properties.dttmstart: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeename"]) -> MetaOapg.properties.employeename: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeetyp"]) -> MetaOapg.properties.employeetyp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hazardida"]) -> MetaOapg.properties.hazardida: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hazardidb"]) -> MetaOapg.properties.hazardidb: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hazardidc"]) -> MetaOapg.properties.hazardidc: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecparent"]) -> MetaOapg.properties.idrecparent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["norpt"]) -> MetaOapg.properties.norpt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["potentialseverity"]) -> MetaOapg.properties.potentialseverity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["refno"]) -> MetaOapg.properties.refno: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["severity"]) -> MetaOapg.properties.severity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["solution"]) -> MetaOapg.properties.solution: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tour"]) -> MetaOapg.properties.tour: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["typ1"]) -> MetaOapg.properties.typ1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["typ2"]) -> MetaOapg.properties.typ2: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "actiontyp", "com", "company", "companytyp", "des", "dttmend", "dttmstart", "employeename", "employeetyp", "hazardida", "hazardidb", "hazardidc", "idrecparent", "norpt", "potentialseverity", "refno", "severity", "solution", "status", "tour", "typ1", "typ2", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["actiontyp"]) -> typing.Union[MetaOapg.properties.actiontyp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["com"]) -> typing.Union[MetaOapg.properties.com, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["company"]) -> typing.Union[MetaOapg.properties.company, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["companytyp"]) -> typing.Union[MetaOapg.properties.companytyp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["des"]) -> typing.Union[MetaOapg.properties.des, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmend"]) -> typing.Union[MetaOapg.properties.dttmend, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmstart"]) -> typing.Union[MetaOapg.properties.dttmstart, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeename"]) -> typing.Union[MetaOapg.properties.employeename, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeetyp"]) -> typing.Union[MetaOapg.properties.employeetyp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hazardida"]) -> typing.Union[MetaOapg.properties.hazardida, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hazardidb"]) -> typing.Union[MetaOapg.properties.hazardidb, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hazardidc"]) -> typing.Union[MetaOapg.properties.hazardidc, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecparent"]) -> typing.Union[MetaOapg.properties.idrecparent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["norpt"]) -> typing.Union[MetaOapg.properties.norpt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["potentialseverity"]) -> typing.Union[MetaOapg.properties.potentialseverity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["refno"]) -> typing.Union[MetaOapg.properties.refno, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["severity"]) -> typing.Union[MetaOapg.properties.severity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["solution"]) -> typing.Union[MetaOapg.properties.solution, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tour"]) -> typing.Union[MetaOapg.properties.tour, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["typ1"]) -> typing.Union[MetaOapg.properties.typ1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["typ2"]) -> typing.Union[MetaOapg.properties.typ2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "actiontyp", "com", "company", "companytyp", "des", "dttmend", "dttmstart", "employeename", "employeetyp", "hazardida", "hazardidb", "hazardidc", "idrecparent", "norpt", "potentialseverity", "refno", "severity", "solution", "status", "tour", "typ1", "typ2", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idrec: typing.Union[MetaOapg.properties.idrec, str, ],
        idwell: typing.Union[MetaOapg.properties.idwell, str, ],
        actiontyp: typing.Union[MetaOapg.properties.actiontyp, str, schemas.Unset] = schemas.unset,
        com: typing.Union[MetaOapg.properties.com, str, schemas.Unset] = schemas.unset,
        company: typing.Union[MetaOapg.properties.company, str, schemas.Unset] = schemas.unset,
        companytyp: typing.Union[MetaOapg.properties.companytyp, str, schemas.Unset] = schemas.unset,
        des: typing.Union[MetaOapg.properties.des, str, schemas.Unset] = schemas.unset,
        dttmend: typing.Union[MetaOapg.properties.dttmend, str, datetime, schemas.Unset] = schemas.unset,
        dttmstart: typing.Union[MetaOapg.properties.dttmstart, str, datetime, schemas.Unset] = schemas.unset,
        employeename: typing.Union[MetaOapg.properties.employeename, str, schemas.Unset] = schemas.unset,
        employeetyp: typing.Union[MetaOapg.properties.employeetyp, str, schemas.Unset] = schemas.unset,
        hazardida: typing.Union[MetaOapg.properties.hazardida, str, schemas.Unset] = schemas.unset,
        hazardidb: typing.Union[MetaOapg.properties.hazardidb, str, schemas.Unset] = schemas.unset,
        hazardidc: typing.Union[MetaOapg.properties.hazardidc, str, schemas.Unset] = schemas.unset,
        idrecparent: typing.Union[MetaOapg.properties.idrecparent, str, schemas.Unset] = schemas.unset,
        norpt: typing.Union[MetaOapg.properties.norpt, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        potentialseverity: typing.Union[MetaOapg.properties.potentialseverity, str, schemas.Unset] = schemas.unset,
        refno: typing.Union[MetaOapg.properties.refno, str, schemas.Unset] = schemas.unset,
        severity: typing.Union[MetaOapg.properties.severity, str, schemas.Unset] = schemas.unset,
        solution: typing.Union[MetaOapg.properties.solution, str, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        tour: typing.Union[MetaOapg.properties.tour, str, schemas.Unset] = schemas.unset,
        typ1: typing.Union[MetaOapg.properties.typ1, str, schemas.Unset] = schemas.unset,
        typ2: typing.Union[MetaOapg.properties.typ2, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'STOPCardsAndJSAData':
        return super().__new__(
            cls,
            *args,
            idrec=idrec,
            idwell=idwell,
            actiontyp=actiontyp,
            com=com,
            company=company,
            companytyp=companytyp,
            des=des,
            dttmend=dttmend,
            dttmstart=dttmstart,
            employeename=employeename,
            employeetyp=employeetyp,
            hazardida=hazardida,
            hazardidb=hazardidb,
            hazardidc=hazardidc,
            idrecparent=idrecparent,
            norpt=norpt,
            potentialseverity=potentialseverity,
            refno=refno,
            severity=severity,
            solution=solution,
            status=status,
            tour=tour,
            typ1=typ1,
            typ2=typ2,
            _configuration=_configuration,
            **kwargs,
        )
