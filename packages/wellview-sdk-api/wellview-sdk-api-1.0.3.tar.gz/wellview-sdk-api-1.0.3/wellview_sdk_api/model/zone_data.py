# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class ZoneData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idrec",
            "idwell",
        }
        
        class properties:
            idrec = schemas.StrSchema
            idwell = schemas.StrSchema
            com = schemas.StrSchema
            datasource = schemas.StrSchema
            depthbtm = schemas.NumberSchema
            depthref = schemas.NumberSchema
            depthtop = schemas.NumberSchema
            dttmzoneabandon = schemas.DateTimeSchema
            dttmzonelic = schemas.DateTimeSchema
            dttmzoneonprod = schemas.DateTimeSchema
            fieldcode = schemas.StrSchema
            fieldname = schemas.StrSchema
            iconname = schemas.StrSchema
            idrecwellbore = schemas.StrSchema
            objective = schemas.StrSchema
            unitcode = schemas.StrSchema
            unitname = schemas.StrSchema
            usertxt1 = schemas.StrSchema
            usertxt2 = schemas.StrSchema
            usertxt3 = schemas.StrSchema
            usertxt4 = schemas.StrSchema
            usertxt5 = schemas.StrSchema
            usertxt6 = schemas.StrSchema
            zonecode = schemas.StrSchema
            zoneida = schemas.StrSchema
            zoneidb = schemas.StrSchema
            zoneidc = schemas.StrSchema
            zoneidd = schemas.StrSchema
            zoneide = schemas.StrSchema
            zonelicensee = schemas.StrSchema
            zonelicenseno = schemas.StrSchema
            zonename = schemas.StrSchema
            __annotations__ = {
                "idrec": idrec,
                "idwell": idwell,
                "com": com,
                "datasource": datasource,
                "depthbtm": depthbtm,
                "depthref": depthref,
                "depthtop": depthtop,
                "dttmzoneabandon": dttmzoneabandon,
                "dttmzonelic": dttmzonelic,
                "dttmzoneonprod": dttmzoneonprod,
                "fieldcode": fieldcode,
                "fieldname": fieldname,
                "iconname": iconname,
                "idrecwellbore": idrecwellbore,
                "objective": objective,
                "unitcode": unitcode,
                "unitname": unitname,
                "usertxt1": usertxt1,
                "usertxt2": usertxt2,
                "usertxt3": usertxt3,
                "usertxt4": usertxt4,
                "usertxt5": usertxt5,
                "usertxt6": usertxt6,
                "zonecode": zonecode,
                "zoneida": zoneida,
                "zoneidb": zoneidb,
                "zoneidc": zoneidc,
                "zoneidd": zoneidd,
                "zoneide": zoneide,
                "zonelicensee": zonelicensee,
                "zonelicenseno": zonelicenseno,
                "zonename": zonename,
            }
    
    idrec: MetaOapg.properties.idrec
    idwell: MetaOapg.properties.idwell
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["com"]) -> MetaOapg.properties.com: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["datasource"]) -> MetaOapg.properties.datasource: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["depthbtm"]) -> MetaOapg.properties.depthbtm: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["depthref"]) -> MetaOapg.properties.depthref: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["depthtop"]) -> MetaOapg.properties.depthtop: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmzoneabandon"]) -> MetaOapg.properties.dttmzoneabandon: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmzonelic"]) -> MetaOapg.properties.dttmzonelic: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmzoneonprod"]) -> MetaOapg.properties.dttmzoneonprod: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fieldcode"]) -> MetaOapg.properties.fieldcode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fieldname"]) -> MetaOapg.properties.fieldname: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["iconname"]) -> MetaOapg.properties.iconname: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecwellbore"]) -> MetaOapg.properties.idrecwellbore: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["objective"]) -> MetaOapg.properties.objective: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["unitcode"]) -> MetaOapg.properties.unitcode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["unitname"]) -> MetaOapg.properties.unitname: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usertxt1"]) -> MetaOapg.properties.usertxt1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usertxt2"]) -> MetaOapg.properties.usertxt2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usertxt3"]) -> MetaOapg.properties.usertxt3: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usertxt4"]) -> MetaOapg.properties.usertxt4: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usertxt5"]) -> MetaOapg.properties.usertxt5: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usertxt6"]) -> MetaOapg.properties.usertxt6: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["zonecode"]) -> MetaOapg.properties.zonecode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["zoneida"]) -> MetaOapg.properties.zoneida: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["zoneidb"]) -> MetaOapg.properties.zoneidb: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["zoneidc"]) -> MetaOapg.properties.zoneidc: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["zoneidd"]) -> MetaOapg.properties.zoneidd: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["zoneide"]) -> MetaOapg.properties.zoneide: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["zonelicensee"]) -> MetaOapg.properties.zonelicensee: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["zonelicenseno"]) -> MetaOapg.properties.zonelicenseno: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["zonename"]) -> MetaOapg.properties.zonename: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "com", "datasource", "depthbtm", "depthref", "depthtop", "dttmzoneabandon", "dttmzonelic", "dttmzoneonprod", "fieldcode", "fieldname", "iconname", "idrecwellbore", "objective", "unitcode", "unitname", "usertxt1", "usertxt2", "usertxt3", "usertxt4", "usertxt5", "usertxt6", "zonecode", "zoneida", "zoneidb", "zoneidc", "zoneidd", "zoneide", "zonelicensee", "zonelicenseno", "zonename", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["com"]) -> typing.Union[MetaOapg.properties.com, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["datasource"]) -> typing.Union[MetaOapg.properties.datasource, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["depthbtm"]) -> typing.Union[MetaOapg.properties.depthbtm, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["depthref"]) -> typing.Union[MetaOapg.properties.depthref, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["depthtop"]) -> typing.Union[MetaOapg.properties.depthtop, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmzoneabandon"]) -> typing.Union[MetaOapg.properties.dttmzoneabandon, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmzonelic"]) -> typing.Union[MetaOapg.properties.dttmzonelic, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmzoneonprod"]) -> typing.Union[MetaOapg.properties.dttmzoneonprod, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fieldcode"]) -> typing.Union[MetaOapg.properties.fieldcode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fieldname"]) -> typing.Union[MetaOapg.properties.fieldname, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["iconname"]) -> typing.Union[MetaOapg.properties.iconname, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecwellbore"]) -> typing.Union[MetaOapg.properties.idrecwellbore, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["objective"]) -> typing.Union[MetaOapg.properties.objective, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["unitcode"]) -> typing.Union[MetaOapg.properties.unitcode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["unitname"]) -> typing.Union[MetaOapg.properties.unitname, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usertxt1"]) -> typing.Union[MetaOapg.properties.usertxt1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usertxt2"]) -> typing.Union[MetaOapg.properties.usertxt2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usertxt3"]) -> typing.Union[MetaOapg.properties.usertxt3, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usertxt4"]) -> typing.Union[MetaOapg.properties.usertxt4, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usertxt5"]) -> typing.Union[MetaOapg.properties.usertxt5, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usertxt6"]) -> typing.Union[MetaOapg.properties.usertxt6, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["zonecode"]) -> typing.Union[MetaOapg.properties.zonecode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["zoneida"]) -> typing.Union[MetaOapg.properties.zoneida, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["zoneidb"]) -> typing.Union[MetaOapg.properties.zoneidb, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["zoneidc"]) -> typing.Union[MetaOapg.properties.zoneidc, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["zoneidd"]) -> typing.Union[MetaOapg.properties.zoneidd, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["zoneide"]) -> typing.Union[MetaOapg.properties.zoneide, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["zonelicensee"]) -> typing.Union[MetaOapg.properties.zonelicensee, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["zonelicenseno"]) -> typing.Union[MetaOapg.properties.zonelicenseno, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["zonename"]) -> typing.Union[MetaOapg.properties.zonename, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "com", "datasource", "depthbtm", "depthref", "depthtop", "dttmzoneabandon", "dttmzonelic", "dttmzoneonprod", "fieldcode", "fieldname", "iconname", "idrecwellbore", "objective", "unitcode", "unitname", "usertxt1", "usertxt2", "usertxt3", "usertxt4", "usertxt5", "usertxt6", "zonecode", "zoneida", "zoneidb", "zoneidc", "zoneidd", "zoneide", "zonelicensee", "zonelicenseno", "zonename", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idrec: typing.Union[MetaOapg.properties.idrec, str, ],
        idwell: typing.Union[MetaOapg.properties.idwell, str, ],
        com: typing.Union[MetaOapg.properties.com, str, schemas.Unset] = schemas.unset,
        datasource: typing.Union[MetaOapg.properties.datasource, str, schemas.Unset] = schemas.unset,
        depthbtm: typing.Union[MetaOapg.properties.depthbtm, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        depthref: typing.Union[MetaOapg.properties.depthref, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        depthtop: typing.Union[MetaOapg.properties.depthtop, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        dttmzoneabandon: typing.Union[MetaOapg.properties.dttmzoneabandon, str, datetime, schemas.Unset] = schemas.unset,
        dttmzonelic: typing.Union[MetaOapg.properties.dttmzonelic, str, datetime, schemas.Unset] = schemas.unset,
        dttmzoneonprod: typing.Union[MetaOapg.properties.dttmzoneonprod, str, datetime, schemas.Unset] = schemas.unset,
        fieldcode: typing.Union[MetaOapg.properties.fieldcode, str, schemas.Unset] = schemas.unset,
        fieldname: typing.Union[MetaOapg.properties.fieldname, str, schemas.Unset] = schemas.unset,
        iconname: typing.Union[MetaOapg.properties.iconname, str, schemas.Unset] = schemas.unset,
        idrecwellbore: typing.Union[MetaOapg.properties.idrecwellbore, str, schemas.Unset] = schemas.unset,
        objective: typing.Union[MetaOapg.properties.objective, str, schemas.Unset] = schemas.unset,
        unitcode: typing.Union[MetaOapg.properties.unitcode, str, schemas.Unset] = schemas.unset,
        unitname: typing.Union[MetaOapg.properties.unitname, str, schemas.Unset] = schemas.unset,
        usertxt1: typing.Union[MetaOapg.properties.usertxt1, str, schemas.Unset] = schemas.unset,
        usertxt2: typing.Union[MetaOapg.properties.usertxt2, str, schemas.Unset] = schemas.unset,
        usertxt3: typing.Union[MetaOapg.properties.usertxt3, str, schemas.Unset] = schemas.unset,
        usertxt4: typing.Union[MetaOapg.properties.usertxt4, str, schemas.Unset] = schemas.unset,
        usertxt5: typing.Union[MetaOapg.properties.usertxt5, str, schemas.Unset] = schemas.unset,
        usertxt6: typing.Union[MetaOapg.properties.usertxt6, str, schemas.Unset] = schemas.unset,
        zonecode: typing.Union[MetaOapg.properties.zonecode, str, schemas.Unset] = schemas.unset,
        zoneida: typing.Union[MetaOapg.properties.zoneida, str, schemas.Unset] = schemas.unset,
        zoneidb: typing.Union[MetaOapg.properties.zoneidb, str, schemas.Unset] = schemas.unset,
        zoneidc: typing.Union[MetaOapg.properties.zoneidc, str, schemas.Unset] = schemas.unset,
        zoneidd: typing.Union[MetaOapg.properties.zoneidd, str, schemas.Unset] = schemas.unset,
        zoneide: typing.Union[MetaOapg.properties.zoneide, str, schemas.Unset] = schemas.unset,
        zonelicensee: typing.Union[MetaOapg.properties.zonelicensee, str, schemas.Unset] = schemas.unset,
        zonelicenseno: typing.Union[MetaOapg.properties.zonelicenseno, str, schemas.Unset] = schemas.unset,
        zonename: typing.Union[MetaOapg.properties.zonename, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ZoneData':
        return super().__new__(
            cls,
            *args,
            idrec=idrec,
            idwell=idwell,
            com=com,
            datasource=datasource,
            depthbtm=depthbtm,
            depthref=depthref,
            depthtop=depthtop,
            dttmzoneabandon=dttmzoneabandon,
            dttmzonelic=dttmzonelic,
            dttmzoneonprod=dttmzoneonprod,
            fieldcode=fieldcode,
            fieldname=fieldname,
            iconname=iconname,
            idrecwellbore=idrecwellbore,
            objective=objective,
            unitcode=unitcode,
            unitname=unitname,
            usertxt1=usertxt1,
            usertxt2=usertxt2,
            usertxt3=usertxt3,
            usertxt4=usertxt4,
            usertxt5=usertxt5,
            usertxt6=usertxt6,
            zonecode=zonecode,
            zoneida=zoneida,
            zoneidb=zoneidb,
            zoneidc=zoneidc,
            zoneidd=zoneidd,
            zoneide=zoneide,
            zonelicensee=zonelicensee,
            zonelicenseno=zonelicenseno,
            zonename=zonename,
            _configuration=_configuration,
            **kwargs,
        )
