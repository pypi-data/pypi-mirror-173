# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class LeaseFluidData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idrec",
            "idwell",
        }
        
        class properties:
            idrec = schemas.StrSchema
            idwell = schemas.StrSchema
            actiontyp = schemas.StrSchema
            bsw = schemas.NumberSchema
            carrier = schemas.StrSchema
            density = schemas.NumberSchema
            dest = schemas.StrSchema
            environmenttyp = schemas.StrSchema
            fluidtyp = schemas.StrSchema
            fromlease = schemas.NumberSchema
            idrecdest = schemas.StrSchema
            idrecparent = schemas.StrSchema
            idrecsource = schemas.StrSchema
            note = schemas.StrSchema
            purpose = schemas.StrSchema
            ratediversionref = schemas.NumberSchema
            refnocarrier = schemas.StrSchema
            sandcut = schemas.NumberSchema
            source = schemas.StrSchema
            tolease = schemas.NumberSchema
            __annotations__ = {
                "idrec": idrec,
                "idwell": idwell,
                "actiontyp": actiontyp,
                "bsw": bsw,
                "carrier": carrier,
                "density": density,
                "dest": dest,
                "environmenttyp": environmenttyp,
                "fluidtyp": fluidtyp,
                "fromlease": fromlease,
                "idrecdest": idrecdest,
                "idrecparent": idrecparent,
                "idrecsource": idrecsource,
                "note": note,
                "purpose": purpose,
                "ratediversionref": ratediversionref,
                "refnocarrier": refnocarrier,
                "sandcut": sandcut,
                "source": source,
                "tolease": tolease,
            }
    
    idrec: MetaOapg.properties.idrec
    idwell: MetaOapg.properties.idwell
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["actiontyp"]) -> MetaOapg.properties.actiontyp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bsw"]) -> MetaOapg.properties.bsw: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["carrier"]) -> MetaOapg.properties.carrier: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["density"]) -> MetaOapg.properties.density: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dest"]) -> MetaOapg.properties.dest: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["environmenttyp"]) -> MetaOapg.properties.environmenttyp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fluidtyp"]) -> MetaOapg.properties.fluidtyp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fromlease"]) -> MetaOapg.properties.fromlease: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecdest"]) -> MetaOapg.properties.idrecdest: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecparent"]) -> MetaOapg.properties.idrecparent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecsource"]) -> MetaOapg.properties.idrecsource: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["note"]) -> MetaOapg.properties.note: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["purpose"]) -> MetaOapg.properties.purpose: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ratediversionref"]) -> MetaOapg.properties.ratediversionref: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["refnocarrier"]) -> MetaOapg.properties.refnocarrier: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sandcut"]) -> MetaOapg.properties.sandcut: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["source"]) -> MetaOapg.properties.source: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tolease"]) -> MetaOapg.properties.tolease: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "actiontyp", "bsw", "carrier", "density", "dest", "environmenttyp", "fluidtyp", "fromlease", "idrecdest", "idrecparent", "idrecsource", "note", "purpose", "ratediversionref", "refnocarrier", "sandcut", "source", "tolease", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["actiontyp"]) -> typing.Union[MetaOapg.properties.actiontyp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bsw"]) -> typing.Union[MetaOapg.properties.bsw, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["carrier"]) -> typing.Union[MetaOapg.properties.carrier, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["density"]) -> typing.Union[MetaOapg.properties.density, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dest"]) -> typing.Union[MetaOapg.properties.dest, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["environmenttyp"]) -> typing.Union[MetaOapg.properties.environmenttyp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fluidtyp"]) -> typing.Union[MetaOapg.properties.fluidtyp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fromlease"]) -> typing.Union[MetaOapg.properties.fromlease, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecdest"]) -> typing.Union[MetaOapg.properties.idrecdest, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecparent"]) -> typing.Union[MetaOapg.properties.idrecparent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecsource"]) -> typing.Union[MetaOapg.properties.idrecsource, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["note"]) -> typing.Union[MetaOapg.properties.note, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["purpose"]) -> typing.Union[MetaOapg.properties.purpose, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ratediversionref"]) -> typing.Union[MetaOapg.properties.ratediversionref, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["refnocarrier"]) -> typing.Union[MetaOapg.properties.refnocarrier, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sandcut"]) -> typing.Union[MetaOapg.properties.sandcut, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["source"]) -> typing.Union[MetaOapg.properties.source, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tolease"]) -> typing.Union[MetaOapg.properties.tolease, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "actiontyp", "bsw", "carrier", "density", "dest", "environmenttyp", "fluidtyp", "fromlease", "idrecdest", "idrecparent", "idrecsource", "note", "purpose", "ratediversionref", "refnocarrier", "sandcut", "source", "tolease", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idrec: typing.Union[MetaOapg.properties.idrec, str, ],
        idwell: typing.Union[MetaOapg.properties.idwell, str, ],
        actiontyp: typing.Union[MetaOapg.properties.actiontyp, str, schemas.Unset] = schemas.unset,
        bsw: typing.Union[MetaOapg.properties.bsw, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        carrier: typing.Union[MetaOapg.properties.carrier, str, schemas.Unset] = schemas.unset,
        density: typing.Union[MetaOapg.properties.density, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        dest: typing.Union[MetaOapg.properties.dest, str, schemas.Unset] = schemas.unset,
        environmenttyp: typing.Union[MetaOapg.properties.environmenttyp, str, schemas.Unset] = schemas.unset,
        fluidtyp: typing.Union[MetaOapg.properties.fluidtyp, str, schemas.Unset] = schemas.unset,
        fromlease: typing.Union[MetaOapg.properties.fromlease, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        idrecdest: typing.Union[MetaOapg.properties.idrecdest, str, schemas.Unset] = schemas.unset,
        idrecparent: typing.Union[MetaOapg.properties.idrecparent, str, schemas.Unset] = schemas.unset,
        idrecsource: typing.Union[MetaOapg.properties.idrecsource, str, schemas.Unset] = schemas.unset,
        note: typing.Union[MetaOapg.properties.note, str, schemas.Unset] = schemas.unset,
        purpose: typing.Union[MetaOapg.properties.purpose, str, schemas.Unset] = schemas.unset,
        ratediversionref: typing.Union[MetaOapg.properties.ratediversionref, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        refnocarrier: typing.Union[MetaOapg.properties.refnocarrier, str, schemas.Unset] = schemas.unset,
        sandcut: typing.Union[MetaOapg.properties.sandcut, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        source: typing.Union[MetaOapg.properties.source, str, schemas.Unset] = schemas.unset,
        tolease: typing.Union[MetaOapg.properties.tolease, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'LeaseFluidData':
        return super().__new__(
            cls,
            *args,
            idrec=idrec,
            idwell=idwell,
            actiontyp=actiontyp,
            bsw=bsw,
            carrier=carrier,
            density=density,
            dest=dest,
            environmenttyp=environmenttyp,
            fluidtyp=fluidtyp,
            fromlease=fromlease,
            idrecdest=idrecdest,
            idrecparent=idrecparent,
            idrecsource=idrecsource,
            note=note,
            purpose=purpose,
            ratediversionref=ratediversionref,
            refnocarrier=refnocarrier,
            sandcut=sandcut,
            source=source,
            tolease=tolease,
            _configuration=_configuration,
            **kwargs,
        )
