# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class EquipmentPressureTestData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idrec",
            "idwell",
        }
        
        class properties:
            idrec = schemas.StrSchema
            idwell = schemas.StrSchema
            com = schemas.StrSchema
            des = schemas.StrSchema
            dttm = schemas.DateTimeSchema
            dttmnexttest = schemas.DateTimeSchema
            failflag = schemas.BoolSchema
            fluiddensity = schemas.NumberSchema
            idrecjob = schemas.StrSchema
            idrectestitem = schemas.StrSchema
            operator = schemas.StrSchema
            presrefmeasure = schemas.StrSchema
            refnochart = schemas.StrSchema
            testfluidtyp = schemas.StrSchema
            testsubtyp = schemas.StrSchema
            testtyp = schemas.StrSchema
            usernum1 = schemas.NumberSchema
            usernum2 = schemas.NumberSchema
            usernum3 = schemas.NumberSchema
            usertxt1 = schemas.StrSchema
            vollost = schemas.NumberSchema
            volpumped = schemas.NumberSchema
            wellpresused = schemas.BoolSchema
            __annotations__ = {
                "idrec": idrec,
                "idwell": idwell,
                "com": com,
                "des": des,
                "dttm": dttm,
                "dttmnexttest": dttmnexttest,
                "failflag": failflag,
                "fluiddensity": fluiddensity,
                "idrecjob": idrecjob,
                "idrectestitem": idrectestitem,
                "operator": operator,
                "presrefmeasure": presrefmeasure,
                "refnochart": refnochart,
                "testfluidtyp": testfluidtyp,
                "testsubtyp": testsubtyp,
                "testtyp": testtyp,
                "usernum1": usernum1,
                "usernum2": usernum2,
                "usernum3": usernum3,
                "usertxt1": usertxt1,
                "vollost": vollost,
                "volpumped": volpumped,
                "wellpresused": wellpresused,
            }
    
    idrec: MetaOapg.properties.idrec
    idwell: MetaOapg.properties.idwell
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["com"]) -> MetaOapg.properties.com: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["des"]) -> MetaOapg.properties.des: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttm"]) -> MetaOapg.properties.dttm: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmnexttest"]) -> MetaOapg.properties.dttmnexttest: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["failflag"]) -> MetaOapg.properties.failflag: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fluiddensity"]) -> MetaOapg.properties.fluiddensity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecjob"]) -> MetaOapg.properties.idrecjob: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrectestitem"]) -> MetaOapg.properties.idrectestitem: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["operator"]) -> MetaOapg.properties.operator: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["presrefmeasure"]) -> MetaOapg.properties.presrefmeasure: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["refnochart"]) -> MetaOapg.properties.refnochart: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["testfluidtyp"]) -> MetaOapg.properties.testfluidtyp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["testsubtyp"]) -> MetaOapg.properties.testsubtyp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["testtyp"]) -> MetaOapg.properties.testtyp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usernum1"]) -> MetaOapg.properties.usernum1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usernum2"]) -> MetaOapg.properties.usernum2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usernum3"]) -> MetaOapg.properties.usernum3: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usertxt1"]) -> MetaOapg.properties.usertxt1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vollost"]) -> MetaOapg.properties.vollost: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["volpumped"]) -> MetaOapg.properties.volpumped: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wellpresused"]) -> MetaOapg.properties.wellpresused: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "com", "des", "dttm", "dttmnexttest", "failflag", "fluiddensity", "idrecjob", "idrectestitem", "operator", "presrefmeasure", "refnochart", "testfluidtyp", "testsubtyp", "testtyp", "usernum1", "usernum2", "usernum3", "usertxt1", "vollost", "volpumped", "wellpresused", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["com"]) -> typing.Union[MetaOapg.properties.com, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["des"]) -> typing.Union[MetaOapg.properties.des, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttm"]) -> typing.Union[MetaOapg.properties.dttm, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmnexttest"]) -> typing.Union[MetaOapg.properties.dttmnexttest, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["failflag"]) -> typing.Union[MetaOapg.properties.failflag, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fluiddensity"]) -> typing.Union[MetaOapg.properties.fluiddensity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecjob"]) -> typing.Union[MetaOapg.properties.idrecjob, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrectestitem"]) -> typing.Union[MetaOapg.properties.idrectestitem, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["operator"]) -> typing.Union[MetaOapg.properties.operator, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["presrefmeasure"]) -> typing.Union[MetaOapg.properties.presrefmeasure, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["refnochart"]) -> typing.Union[MetaOapg.properties.refnochart, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["testfluidtyp"]) -> typing.Union[MetaOapg.properties.testfluidtyp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["testsubtyp"]) -> typing.Union[MetaOapg.properties.testsubtyp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["testtyp"]) -> typing.Union[MetaOapg.properties.testtyp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usernum1"]) -> typing.Union[MetaOapg.properties.usernum1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usernum2"]) -> typing.Union[MetaOapg.properties.usernum2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usernum3"]) -> typing.Union[MetaOapg.properties.usernum3, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usertxt1"]) -> typing.Union[MetaOapg.properties.usertxt1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vollost"]) -> typing.Union[MetaOapg.properties.vollost, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["volpumped"]) -> typing.Union[MetaOapg.properties.volpumped, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wellpresused"]) -> typing.Union[MetaOapg.properties.wellpresused, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "com", "des", "dttm", "dttmnexttest", "failflag", "fluiddensity", "idrecjob", "idrectestitem", "operator", "presrefmeasure", "refnochart", "testfluidtyp", "testsubtyp", "testtyp", "usernum1", "usernum2", "usernum3", "usertxt1", "vollost", "volpumped", "wellpresused", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idrec: typing.Union[MetaOapg.properties.idrec, str, ],
        idwell: typing.Union[MetaOapg.properties.idwell, str, ],
        com: typing.Union[MetaOapg.properties.com, str, schemas.Unset] = schemas.unset,
        des: typing.Union[MetaOapg.properties.des, str, schemas.Unset] = schemas.unset,
        dttm: typing.Union[MetaOapg.properties.dttm, str, datetime, schemas.Unset] = schemas.unset,
        dttmnexttest: typing.Union[MetaOapg.properties.dttmnexttest, str, datetime, schemas.Unset] = schemas.unset,
        failflag: typing.Union[MetaOapg.properties.failflag, bool, schemas.Unset] = schemas.unset,
        fluiddensity: typing.Union[MetaOapg.properties.fluiddensity, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        idrecjob: typing.Union[MetaOapg.properties.idrecjob, str, schemas.Unset] = schemas.unset,
        idrectestitem: typing.Union[MetaOapg.properties.idrectestitem, str, schemas.Unset] = schemas.unset,
        operator: typing.Union[MetaOapg.properties.operator, str, schemas.Unset] = schemas.unset,
        presrefmeasure: typing.Union[MetaOapg.properties.presrefmeasure, str, schemas.Unset] = schemas.unset,
        refnochart: typing.Union[MetaOapg.properties.refnochart, str, schemas.Unset] = schemas.unset,
        testfluidtyp: typing.Union[MetaOapg.properties.testfluidtyp, str, schemas.Unset] = schemas.unset,
        testsubtyp: typing.Union[MetaOapg.properties.testsubtyp, str, schemas.Unset] = schemas.unset,
        testtyp: typing.Union[MetaOapg.properties.testtyp, str, schemas.Unset] = schemas.unset,
        usernum1: typing.Union[MetaOapg.properties.usernum1, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        usernum2: typing.Union[MetaOapg.properties.usernum2, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        usernum3: typing.Union[MetaOapg.properties.usernum3, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        usertxt1: typing.Union[MetaOapg.properties.usertxt1, str, schemas.Unset] = schemas.unset,
        vollost: typing.Union[MetaOapg.properties.vollost, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        volpumped: typing.Union[MetaOapg.properties.volpumped, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        wellpresused: typing.Union[MetaOapg.properties.wellpresused, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EquipmentPressureTestData':
        return super().__new__(
            cls,
            *args,
            idrec=idrec,
            idwell=idwell,
            com=com,
            des=des,
            dttm=dttm,
            dttmnexttest=dttmnexttest,
            failflag=failflag,
            fluiddensity=fluiddensity,
            idrecjob=idrecjob,
            idrectestitem=idrectestitem,
            operator=operator,
            presrefmeasure=presrefmeasure,
            refnochart=refnochart,
            testfluidtyp=testfluidtyp,
            testsubtyp=testsubtyp,
            testtyp=testtyp,
            usernum1=usernum1,
            usernum2=usernum2,
            usernum3=usernum3,
            usertxt1=usertxt1,
            vollost=vollost,
            volpumped=volpumped,
            wellpresused=wellpresused,
            _configuration=_configuration,
            **kwargs,
        )
