# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class PlungerLiftData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idrec",
            "idwell",
        }
        
        class properties:
            idrec = schemas.StrSchema
            idwell = schemas.StrSchema
            com = schemas.StrSchema
            dttmpull = schemas.DateTimeSchema
            dttmrun = schemas.DateTimeSchema
            idrecparent = schemas.StrSchema
            length = schemas.NumberSchema
            make = schemas.StrSchema
            model = schemas.StrSchema
            pullreason = schemas.StrSchema
            refid = schemas.StrSchema
            refno = schemas.StrSchema
            sn = schemas.StrSchema
            szod = schemas.NumberSchema
            typ = schemas.StrSchema
            __annotations__ = {
                "idrec": idrec,
                "idwell": idwell,
                "com": com,
                "dttmpull": dttmpull,
                "dttmrun": dttmrun,
                "idrecparent": idrecparent,
                "length": length,
                "make": make,
                "model": model,
                "pullreason": pullreason,
                "refid": refid,
                "refno": refno,
                "sn": sn,
                "szod": szod,
                "typ": typ,
            }
    
    idrec: MetaOapg.properties.idrec
    idwell: MetaOapg.properties.idwell
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["com"]) -> MetaOapg.properties.com: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmpull"]) -> MetaOapg.properties.dttmpull: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmrun"]) -> MetaOapg.properties.dttmrun: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecparent"]) -> MetaOapg.properties.idrecparent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["length"]) -> MetaOapg.properties.length: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["make"]) -> MetaOapg.properties.make: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["model"]) -> MetaOapg.properties.model: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pullreason"]) -> MetaOapg.properties.pullreason: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["refid"]) -> MetaOapg.properties.refid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["refno"]) -> MetaOapg.properties.refno: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sn"]) -> MetaOapg.properties.sn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["szod"]) -> MetaOapg.properties.szod: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["typ"]) -> MetaOapg.properties.typ: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "com", "dttmpull", "dttmrun", "idrecparent", "length", "make", "model", "pullreason", "refid", "refno", "sn", "szod", "typ", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["com"]) -> typing.Union[MetaOapg.properties.com, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmpull"]) -> typing.Union[MetaOapg.properties.dttmpull, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmrun"]) -> typing.Union[MetaOapg.properties.dttmrun, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecparent"]) -> typing.Union[MetaOapg.properties.idrecparent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["length"]) -> typing.Union[MetaOapg.properties.length, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["make"]) -> typing.Union[MetaOapg.properties.make, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["model"]) -> typing.Union[MetaOapg.properties.model, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pullreason"]) -> typing.Union[MetaOapg.properties.pullreason, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["refid"]) -> typing.Union[MetaOapg.properties.refid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["refno"]) -> typing.Union[MetaOapg.properties.refno, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sn"]) -> typing.Union[MetaOapg.properties.sn, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["szod"]) -> typing.Union[MetaOapg.properties.szod, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["typ"]) -> typing.Union[MetaOapg.properties.typ, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "com", "dttmpull", "dttmrun", "idrecparent", "length", "make", "model", "pullreason", "refid", "refno", "sn", "szod", "typ", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idrec: typing.Union[MetaOapg.properties.idrec, str, ],
        idwell: typing.Union[MetaOapg.properties.idwell, str, ],
        com: typing.Union[MetaOapg.properties.com, str, schemas.Unset] = schemas.unset,
        dttmpull: typing.Union[MetaOapg.properties.dttmpull, str, datetime, schemas.Unset] = schemas.unset,
        dttmrun: typing.Union[MetaOapg.properties.dttmrun, str, datetime, schemas.Unset] = schemas.unset,
        idrecparent: typing.Union[MetaOapg.properties.idrecparent, str, schemas.Unset] = schemas.unset,
        length: typing.Union[MetaOapg.properties.length, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        make: typing.Union[MetaOapg.properties.make, str, schemas.Unset] = schemas.unset,
        model: typing.Union[MetaOapg.properties.model, str, schemas.Unset] = schemas.unset,
        pullreason: typing.Union[MetaOapg.properties.pullreason, str, schemas.Unset] = schemas.unset,
        refid: typing.Union[MetaOapg.properties.refid, str, schemas.Unset] = schemas.unset,
        refno: typing.Union[MetaOapg.properties.refno, str, schemas.Unset] = schemas.unset,
        sn: typing.Union[MetaOapg.properties.sn, str, schemas.Unset] = schemas.unset,
        szod: typing.Union[MetaOapg.properties.szod, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        typ: typing.Union[MetaOapg.properties.typ, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PlungerLiftData':
        return super().__new__(
            cls,
            *args,
            idrec=idrec,
            idwell=idwell,
            com=com,
            dttmpull=dttmpull,
            dttmrun=dttmrun,
            idrecparent=idrecparent,
            length=length,
            make=make,
            model=model,
            pullreason=pullreason,
            refid=refid,
            refno=refno,
            sn=sn,
            szod=szod,
            typ=typ,
            _configuration=_configuration,
            **kwargs,
        )
