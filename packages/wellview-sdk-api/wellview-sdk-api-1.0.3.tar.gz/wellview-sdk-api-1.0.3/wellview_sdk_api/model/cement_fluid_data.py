# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class CementFluidData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idrec",
            "idwell",
        }
        
        class properties:
            idrec = schemas.StrSchema
            idwell = schemas.StrSchema
            amtcement = schemas.NumberSchema
            cmtclass = schemas.StrSchema
            com = schemas.StrSchema
            comprstr1 = schemas.NumberSchema
            comprstr2 = schemas.NumberSchema
            comprstrtemp = schemas.NumberSchema
            comprstrtm1 = schemas.NumberSchema
            comprstrtm2 = schemas.NumberSchema
            density = schemas.NumberSchema
            depthbtmest = schemas.NumberSchema
            depthtopest = schemas.NumberSchema
            desfluid = schemas.StrSchema
            dttmendpump = schemas.DateTimeSchema
            dttmmix = schemas.DateTimeSchema
            dttmstartpump = schemas.DateTimeSchema
            excesspumped = schemas.NumberSchema
            filtrate = schemas.NumberSchema
            freewater = schemas.NumberSchema
            idrecparent = schemas.StrSchema
            mixwaterratio = schemas.NumberSchema
            objective = schemas.StrSchema
            plasticvis = schemas.NumberSchema
            presfinal = schemas.NumberSchema
            presfrictionloss = schemas.NumberSchema
            rateavg = schemas.NumberSchema
            tempvisc = schemas.NumberSchema
            thickentemp = schemas.NumberSchema
            thickentm = schemas.NumberSchema
            typ = schemas.StrSchema
            volpumped = schemas.NumberSchema
            watersource = schemas.StrSchema
            _yield = schemas.NumberSchema
            yieldpt = schemas.NumberSchema
            __annotations__ = {
                "idrec": idrec,
                "idwell": idwell,
                "amtcement": amtcement,
                "cmtclass": cmtclass,
                "com": com,
                "comprstr1": comprstr1,
                "comprstr2": comprstr2,
                "comprstrtemp": comprstrtemp,
                "comprstrtm1": comprstrtm1,
                "comprstrtm2": comprstrtm2,
                "density": density,
                "depthbtmest": depthbtmest,
                "depthtopest": depthtopest,
                "desfluid": desfluid,
                "dttmendpump": dttmendpump,
                "dttmmix": dttmmix,
                "dttmstartpump": dttmstartpump,
                "excesspumped": excesspumped,
                "filtrate": filtrate,
                "freewater": freewater,
                "idrecparent": idrecparent,
                "mixwaterratio": mixwaterratio,
                "objective": objective,
                "plasticvis": plasticvis,
                "presfinal": presfinal,
                "presfrictionloss": presfrictionloss,
                "rateavg": rateavg,
                "tempvisc": tempvisc,
                "thickentemp": thickentemp,
                "thickentm": thickentm,
                "typ": typ,
                "volpumped": volpumped,
                "watersource": watersource,
                "yield": _yield,
                "yieldpt": yieldpt,
            }
    
    idrec: MetaOapg.properties.idrec
    idwell: MetaOapg.properties.idwell
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amtcement"]) -> MetaOapg.properties.amtcement: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cmtclass"]) -> MetaOapg.properties.cmtclass: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["com"]) -> MetaOapg.properties.com: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["comprstr1"]) -> MetaOapg.properties.comprstr1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["comprstr2"]) -> MetaOapg.properties.comprstr2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["comprstrtemp"]) -> MetaOapg.properties.comprstrtemp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["comprstrtm1"]) -> MetaOapg.properties.comprstrtm1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["comprstrtm2"]) -> MetaOapg.properties.comprstrtm2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["density"]) -> MetaOapg.properties.density: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["depthbtmest"]) -> MetaOapg.properties.depthbtmest: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["depthtopest"]) -> MetaOapg.properties.depthtopest: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["desfluid"]) -> MetaOapg.properties.desfluid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmendpump"]) -> MetaOapg.properties.dttmendpump: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmmix"]) -> MetaOapg.properties.dttmmix: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmstartpump"]) -> MetaOapg.properties.dttmstartpump: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["excesspumped"]) -> MetaOapg.properties.excesspumped: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["filtrate"]) -> MetaOapg.properties.filtrate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["freewater"]) -> MetaOapg.properties.freewater: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecparent"]) -> MetaOapg.properties.idrecparent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mixwaterratio"]) -> MetaOapg.properties.mixwaterratio: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["objective"]) -> MetaOapg.properties.objective: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["plasticvis"]) -> MetaOapg.properties.plasticvis: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["presfinal"]) -> MetaOapg.properties.presfinal: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["presfrictionloss"]) -> MetaOapg.properties.presfrictionloss: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rateavg"]) -> MetaOapg.properties.rateavg: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tempvisc"]) -> MetaOapg.properties.tempvisc: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["thickentemp"]) -> MetaOapg.properties.thickentemp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["thickentm"]) -> MetaOapg.properties.thickentm: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["typ"]) -> MetaOapg.properties.typ: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["volpumped"]) -> MetaOapg.properties.volpumped: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["watersource"]) -> MetaOapg.properties.watersource: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["yield"]) -> MetaOapg.properties._yield: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["yieldpt"]) -> MetaOapg.properties.yieldpt: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "amtcement", "cmtclass", "com", "comprstr1", "comprstr2", "comprstrtemp", "comprstrtm1", "comprstrtm2", "density", "depthbtmest", "depthtopest", "desfluid", "dttmendpump", "dttmmix", "dttmstartpump", "excesspumped", "filtrate", "freewater", "idrecparent", "mixwaterratio", "objective", "plasticvis", "presfinal", "presfrictionloss", "rateavg", "tempvisc", "thickentemp", "thickentm", "typ", "volpumped", "watersource", "yield", "yieldpt", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amtcement"]) -> typing.Union[MetaOapg.properties.amtcement, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cmtclass"]) -> typing.Union[MetaOapg.properties.cmtclass, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["com"]) -> typing.Union[MetaOapg.properties.com, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["comprstr1"]) -> typing.Union[MetaOapg.properties.comprstr1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["comprstr2"]) -> typing.Union[MetaOapg.properties.comprstr2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["comprstrtemp"]) -> typing.Union[MetaOapg.properties.comprstrtemp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["comprstrtm1"]) -> typing.Union[MetaOapg.properties.comprstrtm1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["comprstrtm2"]) -> typing.Union[MetaOapg.properties.comprstrtm2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["density"]) -> typing.Union[MetaOapg.properties.density, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["depthbtmest"]) -> typing.Union[MetaOapg.properties.depthbtmest, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["depthtopest"]) -> typing.Union[MetaOapg.properties.depthtopest, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["desfluid"]) -> typing.Union[MetaOapg.properties.desfluid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmendpump"]) -> typing.Union[MetaOapg.properties.dttmendpump, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmmix"]) -> typing.Union[MetaOapg.properties.dttmmix, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmstartpump"]) -> typing.Union[MetaOapg.properties.dttmstartpump, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["excesspumped"]) -> typing.Union[MetaOapg.properties.excesspumped, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["filtrate"]) -> typing.Union[MetaOapg.properties.filtrate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["freewater"]) -> typing.Union[MetaOapg.properties.freewater, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecparent"]) -> typing.Union[MetaOapg.properties.idrecparent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mixwaterratio"]) -> typing.Union[MetaOapg.properties.mixwaterratio, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["objective"]) -> typing.Union[MetaOapg.properties.objective, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["plasticvis"]) -> typing.Union[MetaOapg.properties.plasticvis, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["presfinal"]) -> typing.Union[MetaOapg.properties.presfinal, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["presfrictionloss"]) -> typing.Union[MetaOapg.properties.presfrictionloss, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rateavg"]) -> typing.Union[MetaOapg.properties.rateavg, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tempvisc"]) -> typing.Union[MetaOapg.properties.tempvisc, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["thickentemp"]) -> typing.Union[MetaOapg.properties.thickentemp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["thickentm"]) -> typing.Union[MetaOapg.properties.thickentm, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["typ"]) -> typing.Union[MetaOapg.properties.typ, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["volpumped"]) -> typing.Union[MetaOapg.properties.volpumped, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["watersource"]) -> typing.Union[MetaOapg.properties.watersource, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["yield"]) -> typing.Union[MetaOapg.properties._yield, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["yieldpt"]) -> typing.Union[MetaOapg.properties.yieldpt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "amtcement", "cmtclass", "com", "comprstr1", "comprstr2", "comprstrtemp", "comprstrtm1", "comprstrtm2", "density", "depthbtmest", "depthtopest", "desfluid", "dttmendpump", "dttmmix", "dttmstartpump", "excesspumped", "filtrate", "freewater", "idrecparent", "mixwaterratio", "objective", "plasticvis", "presfinal", "presfrictionloss", "rateavg", "tempvisc", "thickentemp", "thickentm", "typ", "volpumped", "watersource", "yield", "yieldpt", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idrec: typing.Union[MetaOapg.properties.idrec, str, ],
        idwell: typing.Union[MetaOapg.properties.idwell, str, ],
        amtcement: typing.Union[MetaOapg.properties.amtcement, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        cmtclass: typing.Union[MetaOapg.properties.cmtclass, str, schemas.Unset] = schemas.unset,
        com: typing.Union[MetaOapg.properties.com, str, schemas.Unset] = schemas.unset,
        comprstr1: typing.Union[MetaOapg.properties.comprstr1, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        comprstr2: typing.Union[MetaOapg.properties.comprstr2, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        comprstrtemp: typing.Union[MetaOapg.properties.comprstrtemp, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        comprstrtm1: typing.Union[MetaOapg.properties.comprstrtm1, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        comprstrtm2: typing.Union[MetaOapg.properties.comprstrtm2, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        density: typing.Union[MetaOapg.properties.density, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        depthbtmest: typing.Union[MetaOapg.properties.depthbtmest, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        depthtopest: typing.Union[MetaOapg.properties.depthtopest, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        desfluid: typing.Union[MetaOapg.properties.desfluid, str, schemas.Unset] = schemas.unset,
        dttmendpump: typing.Union[MetaOapg.properties.dttmendpump, str, datetime, schemas.Unset] = schemas.unset,
        dttmmix: typing.Union[MetaOapg.properties.dttmmix, str, datetime, schemas.Unset] = schemas.unset,
        dttmstartpump: typing.Union[MetaOapg.properties.dttmstartpump, str, datetime, schemas.Unset] = schemas.unset,
        excesspumped: typing.Union[MetaOapg.properties.excesspumped, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        filtrate: typing.Union[MetaOapg.properties.filtrate, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        freewater: typing.Union[MetaOapg.properties.freewater, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        idrecparent: typing.Union[MetaOapg.properties.idrecparent, str, schemas.Unset] = schemas.unset,
        mixwaterratio: typing.Union[MetaOapg.properties.mixwaterratio, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        objective: typing.Union[MetaOapg.properties.objective, str, schemas.Unset] = schemas.unset,
        plasticvis: typing.Union[MetaOapg.properties.plasticvis, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        presfinal: typing.Union[MetaOapg.properties.presfinal, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        presfrictionloss: typing.Union[MetaOapg.properties.presfrictionloss, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        rateavg: typing.Union[MetaOapg.properties.rateavg, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        tempvisc: typing.Union[MetaOapg.properties.tempvisc, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        thickentemp: typing.Union[MetaOapg.properties.thickentemp, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        thickentm: typing.Union[MetaOapg.properties.thickentm, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        typ: typing.Union[MetaOapg.properties.typ, str, schemas.Unset] = schemas.unset,
        volpumped: typing.Union[MetaOapg.properties.volpumped, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        watersource: typing.Union[MetaOapg.properties.watersource, str, schemas.Unset] = schemas.unset,
        yieldpt: typing.Union[MetaOapg.properties.yieldpt, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CementFluidData':
        return super().__new__(
            cls,
            *args,
            idrec=idrec,
            idwell=idwell,
            amtcement=amtcement,
            cmtclass=cmtclass,
            com=com,
            comprstr1=comprstr1,
            comprstr2=comprstr2,
            comprstrtemp=comprstrtemp,
            comprstrtm1=comprstrtm1,
            comprstrtm2=comprstrtm2,
            density=density,
            depthbtmest=depthbtmest,
            depthtopest=depthtopest,
            desfluid=desfluid,
            dttmendpump=dttmendpump,
            dttmmix=dttmmix,
            dttmstartpump=dttmstartpump,
            excesspumped=excesspumped,
            filtrate=filtrate,
            freewater=freewater,
            idrecparent=idrecparent,
            mixwaterratio=mixwaterratio,
            objective=objective,
            plasticvis=plasticvis,
            presfinal=presfinal,
            presfrictionloss=presfrictionloss,
            rateavg=rateavg,
            tempvisc=tempvisc,
            thickentemp=thickentemp,
            thickentm=thickentm,
            typ=typ,
            volpumped=volpumped,
            watersource=watersource,
            yieldpt=yieldpt,
            _configuration=_configuration,
            **kwargs,
        )
