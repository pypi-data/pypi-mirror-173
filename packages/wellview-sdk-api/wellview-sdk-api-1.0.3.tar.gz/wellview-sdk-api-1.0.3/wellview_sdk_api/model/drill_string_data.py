# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class DrillStringData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idrec",
            "idwell",
        }
        
        class properties:
            idrec = schemas.StrSchema
            idwell = schemas.StrSchema
            bitno = schemas.StrSchema
            bittfa = schemas.NumberSchema
            com = schemas.StrSchema
            des = schemas.StrSchema
            dircontrolmethod = schemas.StrSchema
            dttmoutofhole = schemas.DateTimeSchema
            dttmpickup = schemas.DateTimeSchema
            idrecbit = schemas.StrSchema
            idrecparent = schemas.StrSchema
            proposed = schemas.BoolSchema
            stringno = schemas.IntSchema
            stringobjective = schemas.StrSchema
            stringresult = schemas.StrSchema
            stringresultdetail = schemas.StrSchema
            stringresultnote = schemas.StrSchema
            travelequipwt = schemas.NumberSchema
            triphookloadmax = schemas.NumberSchema
            tripnote = schemas.StrSchema
            tripoverpullmax = schemas.NumberSchema
            triprateinavg = schemas.NumberSchema
            triprateinmax = schemas.NumberSchema
            triprateoutavg = schemas.NumberSchema
            triprateoutmax = schemas.NumberSchema
            wearbearing = schemas.StrSchema
            weardull = schemas.StrSchema
            weargauge = schemas.StrSchema
            wearinner = schemas.IntSchema
            wearloc = schemas.StrSchema
            wearother = schemas.StrSchema
            wearouter = schemas.IntSchema
            wearpulled = schemas.StrSchema
            __annotations__ = {
                "idrec": idrec,
                "idwell": idwell,
                "bitno": bitno,
                "bittfa": bittfa,
                "com": com,
                "des": des,
                "dircontrolmethod": dircontrolmethod,
                "dttmoutofhole": dttmoutofhole,
                "dttmpickup": dttmpickup,
                "idrecbit": idrecbit,
                "idrecparent": idrecparent,
                "proposed": proposed,
                "stringno": stringno,
                "stringobjective": stringobjective,
                "stringresult": stringresult,
                "stringresultdetail": stringresultdetail,
                "stringresultnote": stringresultnote,
                "travelequipwt": travelequipwt,
                "triphookloadmax": triphookloadmax,
                "tripnote": tripnote,
                "tripoverpullmax": tripoverpullmax,
                "triprateinavg": triprateinavg,
                "triprateinmax": triprateinmax,
                "triprateoutavg": triprateoutavg,
                "triprateoutmax": triprateoutmax,
                "wearbearing": wearbearing,
                "weardull": weardull,
                "weargauge": weargauge,
                "wearinner": wearinner,
                "wearloc": wearloc,
                "wearother": wearother,
                "wearouter": wearouter,
                "wearpulled": wearpulled,
            }
    
    idrec: MetaOapg.properties.idrec
    idwell: MetaOapg.properties.idwell
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bitno"]) -> MetaOapg.properties.bitno: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bittfa"]) -> MetaOapg.properties.bittfa: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["com"]) -> MetaOapg.properties.com: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["des"]) -> MetaOapg.properties.des: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dircontrolmethod"]) -> MetaOapg.properties.dircontrolmethod: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmoutofhole"]) -> MetaOapg.properties.dttmoutofhole: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmpickup"]) -> MetaOapg.properties.dttmpickup: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecbit"]) -> MetaOapg.properties.idrecbit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecparent"]) -> MetaOapg.properties.idrecparent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["proposed"]) -> MetaOapg.properties.proposed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stringno"]) -> MetaOapg.properties.stringno: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stringobjective"]) -> MetaOapg.properties.stringobjective: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stringresult"]) -> MetaOapg.properties.stringresult: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stringresultdetail"]) -> MetaOapg.properties.stringresultdetail: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stringresultnote"]) -> MetaOapg.properties.stringresultnote: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["travelequipwt"]) -> MetaOapg.properties.travelequipwt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["triphookloadmax"]) -> MetaOapg.properties.triphookloadmax: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tripnote"]) -> MetaOapg.properties.tripnote: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tripoverpullmax"]) -> MetaOapg.properties.tripoverpullmax: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["triprateinavg"]) -> MetaOapg.properties.triprateinavg: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["triprateinmax"]) -> MetaOapg.properties.triprateinmax: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["triprateoutavg"]) -> MetaOapg.properties.triprateoutavg: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["triprateoutmax"]) -> MetaOapg.properties.triprateoutmax: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wearbearing"]) -> MetaOapg.properties.wearbearing: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["weardull"]) -> MetaOapg.properties.weardull: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["weargauge"]) -> MetaOapg.properties.weargauge: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wearinner"]) -> MetaOapg.properties.wearinner: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wearloc"]) -> MetaOapg.properties.wearloc: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wearother"]) -> MetaOapg.properties.wearother: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wearouter"]) -> MetaOapg.properties.wearouter: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wearpulled"]) -> MetaOapg.properties.wearpulled: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "bitno", "bittfa", "com", "des", "dircontrolmethod", "dttmoutofhole", "dttmpickup", "idrecbit", "idrecparent", "proposed", "stringno", "stringobjective", "stringresult", "stringresultdetail", "stringresultnote", "travelequipwt", "triphookloadmax", "tripnote", "tripoverpullmax", "triprateinavg", "triprateinmax", "triprateoutavg", "triprateoutmax", "wearbearing", "weardull", "weargauge", "wearinner", "wearloc", "wearother", "wearouter", "wearpulled", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bitno"]) -> typing.Union[MetaOapg.properties.bitno, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bittfa"]) -> typing.Union[MetaOapg.properties.bittfa, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["com"]) -> typing.Union[MetaOapg.properties.com, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["des"]) -> typing.Union[MetaOapg.properties.des, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dircontrolmethod"]) -> typing.Union[MetaOapg.properties.dircontrolmethod, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmoutofhole"]) -> typing.Union[MetaOapg.properties.dttmoutofhole, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmpickup"]) -> typing.Union[MetaOapg.properties.dttmpickup, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecbit"]) -> typing.Union[MetaOapg.properties.idrecbit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecparent"]) -> typing.Union[MetaOapg.properties.idrecparent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["proposed"]) -> typing.Union[MetaOapg.properties.proposed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stringno"]) -> typing.Union[MetaOapg.properties.stringno, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stringobjective"]) -> typing.Union[MetaOapg.properties.stringobjective, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stringresult"]) -> typing.Union[MetaOapg.properties.stringresult, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stringresultdetail"]) -> typing.Union[MetaOapg.properties.stringresultdetail, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stringresultnote"]) -> typing.Union[MetaOapg.properties.stringresultnote, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["travelequipwt"]) -> typing.Union[MetaOapg.properties.travelequipwt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["triphookloadmax"]) -> typing.Union[MetaOapg.properties.triphookloadmax, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tripnote"]) -> typing.Union[MetaOapg.properties.tripnote, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tripoverpullmax"]) -> typing.Union[MetaOapg.properties.tripoverpullmax, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["triprateinavg"]) -> typing.Union[MetaOapg.properties.triprateinavg, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["triprateinmax"]) -> typing.Union[MetaOapg.properties.triprateinmax, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["triprateoutavg"]) -> typing.Union[MetaOapg.properties.triprateoutavg, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["triprateoutmax"]) -> typing.Union[MetaOapg.properties.triprateoutmax, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wearbearing"]) -> typing.Union[MetaOapg.properties.wearbearing, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["weardull"]) -> typing.Union[MetaOapg.properties.weardull, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["weargauge"]) -> typing.Union[MetaOapg.properties.weargauge, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wearinner"]) -> typing.Union[MetaOapg.properties.wearinner, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wearloc"]) -> typing.Union[MetaOapg.properties.wearloc, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wearother"]) -> typing.Union[MetaOapg.properties.wearother, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wearouter"]) -> typing.Union[MetaOapg.properties.wearouter, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wearpulled"]) -> typing.Union[MetaOapg.properties.wearpulled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "bitno", "bittfa", "com", "des", "dircontrolmethod", "dttmoutofhole", "dttmpickup", "idrecbit", "idrecparent", "proposed", "stringno", "stringobjective", "stringresult", "stringresultdetail", "stringresultnote", "travelequipwt", "triphookloadmax", "tripnote", "tripoverpullmax", "triprateinavg", "triprateinmax", "triprateoutavg", "triprateoutmax", "wearbearing", "weardull", "weargauge", "wearinner", "wearloc", "wearother", "wearouter", "wearpulled", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idrec: typing.Union[MetaOapg.properties.idrec, str, ],
        idwell: typing.Union[MetaOapg.properties.idwell, str, ],
        bitno: typing.Union[MetaOapg.properties.bitno, str, schemas.Unset] = schemas.unset,
        bittfa: typing.Union[MetaOapg.properties.bittfa, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        com: typing.Union[MetaOapg.properties.com, str, schemas.Unset] = schemas.unset,
        des: typing.Union[MetaOapg.properties.des, str, schemas.Unset] = schemas.unset,
        dircontrolmethod: typing.Union[MetaOapg.properties.dircontrolmethod, str, schemas.Unset] = schemas.unset,
        dttmoutofhole: typing.Union[MetaOapg.properties.dttmoutofhole, str, datetime, schemas.Unset] = schemas.unset,
        dttmpickup: typing.Union[MetaOapg.properties.dttmpickup, str, datetime, schemas.Unset] = schemas.unset,
        idrecbit: typing.Union[MetaOapg.properties.idrecbit, str, schemas.Unset] = schemas.unset,
        idrecparent: typing.Union[MetaOapg.properties.idrecparent, str, schemas.Unset] = schemas.unset,
        proposed: typing.Union[MetaOapg.properties.proposed, bool, schemas.Unset] = schemas.unset,
        stringno: typing.Union[MetaOapg.properties.stringno, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        stringobjective: typing.Union[MetaOapg.properties.stringobjective, str, schemas.Unset] = schemas.unset,
        stringresult: typing.Union[MetaOapg.properties.stringresult, str, schemas.Unset] = schemas.unset,
        stringresultdetail: typing.Union[MetaOapg.properties.stringresultdetail, str, schemas.Unset] = schemas.unset,
        stringresultnote: typing.Union[MetaOapg.properties.stringresultnote, str, schemas.Unset] = schemas.unset,
        travelequipwt: typing.Union[MetaOapg.properties.travelequipwt, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        triphookloadmax: typing.Union[MetaOapg.properties.triphookloadmax, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        tripnote: typing.Union[MetaOapg.properties.tripnote, str, schemas.Unset] = schemas.unset,
        tripoverpullmax: typing.Union[MetaOapg.properties.tripoverpullmax, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        triprateinavg: typing.Union[MetaOapg.properties.triprateinavg, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        triprateinmax: typing.Union[MetaOapg.properties.triprateinmax, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        triprateoutavg: typing.Union[MetaOapg.properties.triprateoutavg, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        triprateoutmax: typing.Union[MetaOapg.properties.triprateoutmax, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        wearbearing: typing.Union[MetaOapg.properties.wearbearing, str, schemas.Unset] = schemas.unset,
        weardull: typing.Union[MetaOapg.properties.weardull, str, schemas.Unset] = schemas.unset,
        weargauge: typing.Union[MetaOapg.properties.weargauge, str, schemas.Unset] = schemas.unset,
        wearinner: typing.Union[MetaOapg.properties.wearinner, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        wearloc: typing.Union[MetaOapg.properties.wearloc, str, schemas.Unset] = schemas.unset,
        wearother: typing.Union[MetaOapg.properties.wearother, str, schemas.Unset] = schemas.unset,
        wearouter: typing.Union[MetaOapg.properties.wearouter, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        wearpulled: typing.Union[MetaOapg.properties.wearpulled, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DrillStringData':
        return super().__new__(
            cls,
            *args,
            idrec=idrec,
            idwell=idwell,
            bitno=bitno,
            bittfa=bittfa,
            com=com,
            des=des,
            dircontrolmethod=dircontrolmethod,
            dttmoutofhole=dttmoutofhole,
            dttmpickup=dttmpickup,
            idrecbit=idrecbit,
            idrecparent=idrecparent,
            proposed=proposed,
            stringno=stringno,
            stringobjective=stringobjective,
            stringresult=stringresult,
            stringresultdetail=stringresultdetail,
            stringresultnote=stringresultnote,
            travelequipwt=travelequipwt,
            triphookloadmax=triphookloadmax,
            tripnote=tripnote,
            tripoverpullmax=tripoverpullmax,
            triprateinavg=triprateinavg,
            triprateinmax=triprateinmax,
            triprateoutavg=triprateoutavg,
            triprateoutmax=triprateoutmax,
            wearbearing=wearbearing,
            weardull=weardull,
            weargauge=weargauge,
            wearinner=wearinner,
            wearloc=wearloc,
            wearother=wearother,
            wearouter=wearouter,
            wearpulled=wearpulled,
            _configuration=_configuration,
            **kwargs,
        )
