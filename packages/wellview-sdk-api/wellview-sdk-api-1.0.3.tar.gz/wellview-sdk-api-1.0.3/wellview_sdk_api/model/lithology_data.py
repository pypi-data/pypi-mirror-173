# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class LithologyData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idrec",
            "idwell",
        }
        
        class properties:
            idrec = schemas.StrSchema
            idwell = schemas.StrSchema
            _class = schemas.StrSchema
            codetyp = schemas.StrSchema
            color = schemas.StrSchema
            com = schemas.StrSchema
            depthbtm = schemas.NumberSchema
            depthtop = schemas.NumberSchema
            des = schemas.StrSchema
            dunhamclass = schemas.StrSchema
            grainsizenote = schemas.StrSchema
            graintyp = schemas.StrSchema
            hardness = schemas.StrSchema
            iconname = schemas.StrSchema
            idrecparent = schemas.StrSchema
            matrixcement = schemas.StrSchema
            permcat = schemas.StrSchema
            permhzntl = schemas.NumberSchema
            permnote = schemas.StrSchema
            permvert = schemas.NumberSchema
            porosity = schemas.NumberSchema
            porositytyp = schemas.StrSchema
            refno = schemas.StrSchema
            roundness = schemas.StrSchema
            shaledes = schemas.StrSchema
            sorting = schemas.StrSchema
            texture = schemas.StrSchema
            typ = schemas.StrSchema
            volpercent = schemas.NumberSchema
            volpercentca = schemas.NumberSchema
            volpercentmax = schemas.NumberSchema
            volpercentmg = schemas.NumberSchema
            volpercentmin = schemas.NumberSchema
            __annotations__ = {
                "idrec": idrec,
                "idwell": idwell,
                "class": _class,
                "codetyp": codetyp,
                "color": color,
                "com": com,
                "depthbtm": depthbtm,
                "depthtop": depthtop,
                "des": des,
                "dunhamclass": dunhamclass,
                "grainsizenote": grainsizenote,
                "graintyp": graintyp,
                "hardness": hardness,
                "iconname": iconname,
                "idrecparent": idrecparent,
                "matrixcement": matrixcement,
                "permcat": permcat,
                "permhzntl": permhzntl,
                "permnote": permnote,
                "permvert": permvert,
                "porosity": porosity,
                "porositytyp": porositytyp,
                "refno": refno,
                "roundness": roundness,
                "shaledes": shaledes,
                "sorting": sorting,
                "texture": texture,
                "typ": typ,
                "volpercent": volpercent,
                "volpercentca": volpercentca,
                "volpercentmax": volpercentmax,
                "volpercentmg": volpercentmg,
                "volpercentmin": volpercentmin,
            }
    
    idrec: MetaOapg.properties.idrec
    idwell: MetaOapg.properties.idwell
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["class"]) -> MetaOapg.properties._class: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["codetyp"]) -> MetaOapg.properties.codetyp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["color"]) -> MetaOapg.properties.color: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["com"]) -> MetaOapg.properties.com: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["depthbtm"]) -> MetaOapg.properties.depthbtm: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["depthtop"]) -> MetaOapg.properties.depthtop: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["des"]) -> MetaOapg.properties.des: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dunhamclass"]) -> MetaOapg.properties.dunhamclass: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["grainsizenote"]) -> MetaOapg.properties.grainsizenote: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["graintyp"]) -> MetaOapg.properties.graintyp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hardness"]) -> MetaOapg.properties.hardness: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["iconname"]) -> MetaOapg.properties.iconname: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecparent"]) -> MetaOapg.properties.idrecparent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["matrixcement"]) -> MetaOapg.properties.matrixcement: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["permcat"]) -> MetaOapg.properties.permcat: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["permhzntl"]) -> MetaOapg.properties.permhzntl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["permnote"]) -> MetaOapg.properties.permnote: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["permvert"]) -> MetaOapg.properties.permvert: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["porosity"]) -> MetaOapg.properties.porosity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["porositytyp"]) -> MetaOapg.properties.porositytyp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["refno"]) -> MetaOapg.properties.refno: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["roundness"]) -> MetaOapg.properties.roundness: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shaledes"]) -> MetaOapg.properties.shaledes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sorting"]) -> MetaOapg.properties.sorting: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["texture"]) -> MetaOapg.properties.texture: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["typ"]) -> MetaOapg.properties.typ: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["volpercent"]) -> MetaOapg.properties.volpercent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["volpercentca"]) -> MetaOapg.properties.volpercentca: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["volpercentmax"]) -> MetaOapg.properties.volpercentmax: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["volpercentmg"]) -> MetaOapg.properties.volpercentmg: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["volpercentmin"]) -> MetaOapg.properties.volpercentmin: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "class", "codetyp", "color", "com", "depthbtm", "depthtop", "des", "dunhamclass", "grainsizenote", "graintyp", "hardness", "iconname", "idrecparent", "matrixcement", "permcat", "permhzntl", "permnote", "permvert", "porosity", "porositytyp", "refno", "roundness", "shaledes", "sorting", "texture", "typ", "volpercent", "volpercentca", "volpercentmax", "volpercentmg", "volpercentmin", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["class"]) -> typing.Union[MetaOapg.properties._class, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["codetyp"]) -> typing.Union[MetaOapg.properties.codetyp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["color"]) -> typing.Union[MetaOapg.properties.color, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["com"]) -> typing.Union[MetaOapg.properties.com, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["depthbtm"]) -> typing.Union[MetaOapg.properties.depthbtm, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["depthtop"]) -> typing.Union[MetaOapg.properties.depthtop, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["des"]) -> typing.Union[MetaOapg.properties.des, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dunhamclass"]) -> typing.Union[MetaOapg.properties.dunhamclass, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["grainsizenote"]) -> typing.Union[MetaOapg.properties.grainsizenote, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["graintyp"]) -> typing.Union[MetaOapg.properties.graintyp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hardness"]) -> typing.Union[MetaOapg.properties.hardness, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["iconname"]) -> typing.Union[MetaOapg.properties.iconname, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecparent"]) -> typing.Union[MetaOapg.properties.idrecparent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["matrixcement"]) -> typing.Union[MetaOapg.properties.matrixcement, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["permcat"]) -> typing.Union[MetaOapg.properties.permcat, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["permhzntl"]) -> typing.Union[MetaOapg.properties.permhzntl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["permnote"]) -> typing.Union[MetaOapg.properties.permnote, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["permvert"]) -> typing.Union[MetaOapg.properties.permvert, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["porosity"]) -> typing.Union[MetaOapg.properties.porosity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["porositytyp"]) -> typing.Union[MetaOapg.properties.porositytyp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["refno"]) -> typing.Union[MetaOapg.properties.refno, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["roundness"]) -> typing.Union[MetaOapg.properties.roundness, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shaledes"]) -> typing.Union[MetaOapg.properties.shaledes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sorting"]) -> typing.Union[MetaOapg.properties.sorting, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["texture"]) -> typing.Union[MetaOapg.properties.texture, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["typ"]) -> typing.Union[MetaOapg.properties.typ, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["volpercent"]) -> typing.Union[MetaOapg.properties.volpercent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["volpercentca"]) -> typing.Union[MetaOapg.properties.volpercentca, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["volpercentmax"]) -> typing.Union[MetaOapg.properties.volpercentmax, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["volpercentmg"]) -> typing.Union[MetaOapg.properties.volpercentmg, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["volpercentmin"]) -> typing.Union[MetaOapg.properties.volpercentmin, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "class", "codetyp", "color", "com", "depthbtm", "depthtop", "des", "dunhamclass", "grainsizenote", "graintyp", "hardness", "iconname", "idrecparent", "matrixcement", "permcat", "permhzntl", "permnote", "permvert", "porosity", "porositytyp", "refno", "roundness", "shaledes", "sorting", "texture", "typ", "volpercent", "volpercentca", "volpercentmax", "volpercentmg", "volpercentmin", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idrec: typing.Union[MetaOapg.properties.idrec, str, ],
        idwell: typing.Union[MetaOapg.properties.idwell, str, ],
        codetyp: typing.Union[MetaOapg.properties.codetyp, str, schemas.Unset] = schemas.unset,
        color: typing.Union[MetaOapg.properties.color, str, schemas.Unset] = schemas.unset,
        com: typing.Union[MetaOapg.properties.com, str, schemas.Unset] = schemas.unset,
        depthbtm: typing.Union[MetaOapg.properties.depthbtm, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        depthtop: typing.Union[MetaOapg.properties.depthtop, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        des: typing.Union[MetaOapg.properties.des, str, schemas.Unset] = schemas.unset,
        dunhamclass: typing.Union[MetaOapg.properties.dunhamclass, str, schemas.Unset] = schemas.unset,
        grainsizenote: typing.Union[MetaOapg.properties.grainsizenote, str, schemas.Unset] = schemas.unset,
        graintyp: typing.Union[MetaOapg.properties.graintyp, str, schemas.Unset] = schemas.unset,
        hardness: typing.Union[MetaOapg.properties.hardness, str, schemas.Unset] = schemas.unset,
        iconname: typing.Union[MetaOapg.properties.iconname, str, schemas.Unset] = schemas.unset,
        idrecparent: typing.Union[MetaOapg.properties.idrecparent, str, schemas.Unset] = schemas.unset,
        matrixcement: typing.Union[MetaOapg.properties.matrixcement, str, schemas.Unset] = schemas.unset,
        permcat: typing.Union[MetaOapg.properties.permcat, str, schemas.Unset] = schemas.unset,
        permhzntl: typing.Union[MetaOapg.properties.permhzntl, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        permnote: typing.Union[MetaOapg.properties.permnote, str, schemas.Unset] = schemas.unset,
        permvert: typing.Union[MetaOapg.properties.permvert, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        porosity: typing.Union[MetaOapg.properties.porosity, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        porositytyp: typing.Union[MetaOapg.properties.porositytyp, str, schemas.Unset] = schemas.unset,
        refno: typing.Union[MetaOapg.properties.refno, str, schemas.Unset] = schemas.unset,
        roundness: typing.Union[MetaOapg.properties.roundness, str, schemas.Unset] = schemas.unset,
        shaledes: typing.Union[MetaOapg.properties.shaledes, str, schemas.Unset] = schemas.unset,
        sorting: typing.Union[MetaOapg.properties.sorting, str, schemas.Unset] = schemas.unset,
        texture: typing.Union[MetaOapg.properties.texture, str, schemas.Unset] = schemas.unset,
        typ: typing.Union[MetaOapg.properties.typ, str, schemas.Unset] = schemas.unset,
        volpercent: typing.Union[MetaOapg.properties.volpercent, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        volpercentca: typing.Union[MetaOapg.properties.volpercentca, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        volpercentmax: typing.Union[MetaOapg.properties.volpercentmax, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        volpercentmg: typing.Union[MetaOapg.properties.volpercentmg, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        volpercentmin: typing.Union[MetaOapg.properties.volpercentmin, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'LithologyData':
        return super().__new__(
            cls,
            *args,
            idrec=idrec,
            idwell=idwell,
            codetyp=codetyp,
            color=color,
            com=com,
            depthbtm=depthbtm,
            depthtop=depthtop,
            des=des,
            dunhamclass=dunhamclass,
            grainsizenote=grainsizenote,
            graintyp=graintyp,
            hardness=hardness,
            iconname=iconname,
            idrecparent=idrecparent,
            matrixcement=matrixcement,
            permcat=permcat,
            permhzntl=permhzntl,
            permnote=permnote,
            permvert=permvert,
            porosity=porosity,
            porositytyp=porositytyp,
            refno=refno,
            roundness=roundness,
            shaledes=shaledes,
            sorting=sorting,
            texture=texture,
            typ=typ,
            volpercent=volpercent,
            volpercentca=volpercentca,
            volpercentmax=volpercentmax,
            volpercentmg=volpercentmg,
            volpercentmin=volpercentmin,
            _configuration=_configuration,
            **kwargs,
        )
