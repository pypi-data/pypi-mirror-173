# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class WellTestData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idrec",
            "idwell",
        }
        
        class properties:
            idrec = schemas.StrSchema
            idwell = schemas.StrSchema
            com = schemas.StrSchema
            depthbtm = schemas.NumberSchema
            depthtop = schemas.NumberSchema
            des = schemas.StrSchema
            displayflag = schemas.BoolSchema
            dttm = schemas.DateTimeSchema
            idrecjob = schemas.StrSchema
            idrecwellbore = schemas.StrSchema
            idreczonecompletion = schemas.StrSchema
            loadfluidtyp = schemas.StrSchema
            phasesepmethod = schemas.StrSchema
            porosity = schemas.NumberSchema
            porositysource = schemas.StrSchema
            producedto = schemas.StrSchema
            subtyp = schemas.StrSchema
            surfacetestequip = schemas.StrSchema
            testedby = schemas.StrSchema
            typ = schemas.StrSchema
            volloadfluid = schemas.NumberSchema
            volloadfluidunrecov = schemas.NumberSchema
            volumemethod = schemas.StrSchema
            __annotations__ = {
                "idrec": idrec,
                "idwell": idwell,
                "com": com,
                "depthbtm": depthbtm,
                "depthtop": depthtop,
                "des": des,
                "displayflag": displayflag,
                "dttm": dttm,
                "idrecjob": idrecjob,
                "idrecwellbore": idrecwellbore,
                "idreczonecompletion": idreczonecompletion,
                "loadfluidtyp": loadfluidtyp,
                "phasesepmethod": phasesepmethod,
                "porosity": porosity,
                "porositysource": porositysource,
                "producedto": producedto,
                "subtyp": subtyp,
                "surfacetestequip": surfacetestequip,
                "testedby": testedby,
                "typ": typ,
                "volloadfluid": volloadfluid,
                "volloadfluidunrecov": volloadfluidunrecov,
                "volumemethod": volumemethod,
            }
    
    idrec: MetaOapg.properties.idrec
    idwell: MetaOapg.properties.idwell
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["com"]) -> MetaOapg.properties.com: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["depthbtm"]) -> MetaOapg.properties.depthbtm: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["depthtop"]) -> MetaOapg.properties.depthtop: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["des"]) -> MetaOapg.properties.des: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["displayflag"]) -> MetaOapg.properties.displayflag: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttm"]) -> MetaOapg.properties.dttm: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecjob"]) -> MetaOapg.properties.idrecjob: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecwellbore"]) -> MetaOapg.properties.idrecwellbore: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idreczonecompletion"]) -> MetaOapg.properties.idreczonecompletion: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["loadfluidtyp"]) -> MetaOapg.properties.loadfluidtyp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["phasesepmethod"]) -> MetaOapg.properties.phasesepmethod: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["porosity"]) -> MetaOapg.properties.porosity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["porositysource"]) -> MetaOapg.properties.porositysource: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["producedto"]) -> MetaOapg.properties.producedto: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subtyp"]) -> MetaOapg.properties.subtyp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["surfacetestequip"]) -> MetaOapg.properties.surfacetestequip: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["testedby"]) -> MetaOapg.properties.testedby: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["typ"]) -> MetaOapg.properties.typ: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["volloadfluid"]) -> MetaOapg.properties.volloadfluid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["volloadfluidunrecov"]) -> MetaOapg.properties.volloadfluidunrecov: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["volumemethod"]) -> MetaOapg.properties.volumemethod: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "com", "depthbtm", "depthtop", "des", "displayflag", "dttm", "idrecjob", "idrecwellbore", "idreczonecompletion", "loadfluidtyp", "phasesepmethod", "porosity", "porositysource", "producedto", "subtyp", "surfacetestequip", "testedby", "typ", "volloadfluid", "volloadfluidunrecov", "volumemethod", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["com"]) -> typing.Union[MetaOapg.properties.com, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["depthbtm"]) -> typing.Union[MetaOapg.properties.depthbtm, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["depthtop"]) -> typing.Union[MetaOapg.properties.depthtop, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["des"]) -> typing.Union[MetaOapg.properties.des, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["displayflag"]) -> typing.Union[MetaOapg.properties.displayflag, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttm"]) -> typing.Union[MetaOapg.properties.dttm, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecjob"]) -> typing.Union[MetaOapg.properties.idrecjob, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecwellbore"]) -> typing.Union[MetaOapg.properties.idrecwellbore, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idreczonecompletion"]) -> typing.Union[MetaOapg.properties.idreczonecompletion, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["loadfluidtyp"]) -> typing.Union[MetaOapg.properties.loadfluidtyp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["phasesepmethod"]) -> typing.Union[MetaOapg.properties.phasesepmethod, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["porosity"]) -> typing.Union[MetaOapg.properties.porosity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["porositysource"]) -> typing.Union[MetaOapg.properties.porositysource, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["producedto"]) -> typing.Union[MetaOapg.properties.producedto, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subtyp"]) -> typing.Union[MetaOapg.properties.subtyp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["surfacetestequip"]) -> typing.Union[MetaOapg.properties.surfacetestequip, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["testedby"]) -> typing.Union[MetaOapg.properties.testedby, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["typ"]) -> typing.Union[MetaOapg.properties.typ, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["volloadfluid"]) -> typing.Union[MetaOapg.properties.volloadfluid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["volloadfluidunrecov"]) -> typing.Union[MetaOapg.properties.volloadfluidunrecov, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["volumemethod"]) -> typing.Union[MetaOapg.properties.volumemethod, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "com", "depthbtm", "depthtop", "des", "displayflag", "dttm", "idrecjob", "idrecwellbore", "idreczonecompletion", "loadfluidtyp", "phasesepmethod", "porosity", "porositysource", "producedto", "subtyp", "surfacetestequip", "testedby", "typ", "volloadfluid", "volloadfluidunrecov", "volumemethod", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idrec: typing.Union[MetaOapg.properties.idrec, str, ],
        idwell: typing.Union[MetaOapg.properties.idwell, str, ],
        com: typing.Union[MetaOapg.properties.com, str, schemas.Unset] = schemas.unset,
        depthbtm: typing.Union[MetaOapg.properties.depthbtm, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        depthtop: typing.Union[MetaOapg.properties.depthtop, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        des: typing.Union[MetaOapg.properties.des, str, schemas.Unset] = schemas.unset,
        displayflag: typing.Union[MetaOapg.properties.displayflag, bool, schemas.Unset] = schemas.unset,
        dttm: typing.Union[MetaOapg.properties.dttm, str, datetime, schemas.Unset] = schemas.unset,
        idrecjob: typing.Union[MetaOapg.properties.idrecjob, str, schemas.Unset] = schemas.unset,
        idrecwellbore: typing.Union[MetaOapg.properties.idrecwellbore, str, schemas.Unset] = schemas.unset,
        idreczonecompletion: typing.Union[MetaOapg.properties.idreczonecompletion, str, schemas.Unset] = schemas.unset,
        loadfluidtyp: typing.Union[MetaOapg.properties.loadfluidtyp, str, schemas.Unset] = schemas.unset,
        phasesepmethod: typing.Union[MetaOapg.properties.phasesepmethod, str, schemas.Unset] = schemas.unset,
        porosity: typing.Union[MetaOapg.properties.porosity, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        porositysource: typing.Union[MetaOapg.properties.porositysource, str, schemas.Unset] = schemas.unset,
        producedto: typing.Union[MetaOapg.properties.producedto, str, schemas.Unset] = schemas.unset,
        subtyp: typing.Union[MetaOapg.properties.subtyp, str, schemas.Unset] = schemas.unset,
        surfacetestequip: typing.Union[MetaOapg.properties.surfacetestequip, str, schemas.Unset] = schemas.unset,
        testedby: typing.Union[MetaOapg.properties.testedby, str, schemas.Unset] = schemas.unset,
        typ: typing.Union[MetaOapg.properties.typ, str, schemas.Unset] = schemas.unset,
        volloadfluid: typing.Union[MetaOapg.properties.volloadfluid, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        volloadfluidunrecov: typing.Union[MetaOapg.properties.volloadfluidunrecov, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        volumemethod: typing.Union[MetaOapg.properties.volumemethod, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'WellTestData':
        return super().__new__(
            cls,
            *args,
            idrec=idrec,
            idwell=idwell,
            com=com,
            depthbtm=depthbtm,
            depthtop=depthtop,
            des=des,
            displayflag=displayflag,
            dttm=dttm,
            idrecjob=idrecjob,
            idrecwellbore=idrecwellbore,
            idreczonecompletion=idreczonecompletion,
            loadfluidtyp=loadfluidtyp,
            phasesepmethod=phasesepmethod,
            porosity=porosity,
            porositysource=porositysource,
            producedto=producedto,
            subtyp=subtyp,
            surfacetestequip=surfacetestequip,
            testedby=testedby,
            typ=typ,
            volloadfluid=volloadfluid,
            volloadfluidunrecov=volloadfluidunrecov,
            volumemethod=volumemethod,
            _configuration=_configuration,
            **kwargs,
        )
