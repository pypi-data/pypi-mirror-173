# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class SurveillanceNotesData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idrec",
            "idwell",
        }
        
        class properties:
            idrec = schemas.StrSchema
            idwell = schemas.StrSchema
            com = schemas.StrSchema
            des = schemas.StrSchema
            dttmendrecur = schemas.DateTimeSchema
            dttmstartrecur = schemas.DateTimeSchema
            idrecitem = schemas.StrSchema
            recurfrequency = schemas.NumberSchema
            recurnote = schemas.StrSchema
            requiredby = schemas.StrSchema
            typ1 = schemas.StrSchema
            typ2 = schemas.StrSchema
            __annotations__ = {
                "idrec": idrec,
                "idwell": idwell,
                "com": com,
                "des": des,
                "dttmendrecur": dttmendrecur,
                "dttmstartrecur": dttmstartrecur,
                "idrecitem": idrecitem,
                "recurfrequency": recurfrequency,
                "recurnote": recurnote,
                "requiredby": requiredby,
                "typ1": typ1,
                "typ2": typ2,
            }
    
    idrec: MetaOapg.properties.idrec
    idwell: MetaOapg.properties.idwell
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["com"]) -> MetaOapg.properties.com: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["des"]) -> MetaOapg.properties.des: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmendrecur"]) -> MetaOapg.properties.dttmendrecur: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmstartrecur"]) -> MetaOapg.properties.dttmstartrecur: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecitem"]) -> MetaOapg.properties.idrecitem: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["recurfrequency"]) -> MetaOapg.properties.recurfrequency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["recurnote"]) -> MetaOapg.properties.recurnote: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["requiredby"]) -> MetaOapg.properties.requiredby: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["typ1"]) -> MetaOapg.properties.typ1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["typ2"]) -> MetaOapg.properties.typ2: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "com", "des", "dttmendrecur", "dttmstartrecur", "idrecitem", "recurfrequency", "recurnote", "requiredby", "typ1", "typ2", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["com"]) -> typing.Union[MetaOapg.properties.com, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["des"]) -> typing.Union[MetaOapg.properties.des, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmendrecur"]) -> typing.Union[MetaOapg.properties.dttmendrecur, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmstartrecur"]) -> typing.Union[MetaOapg.properties.dttmstartrecur, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecitem"]) -> typing.Union[MetaOapg.properties.idrecitem, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["recurfrequency"]) -> typing.Union[MetaOapg.properties.recurfrequency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["recurnote"]) -> typing.Union[MetaOapg.properties.recurnote, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["requiredby"]) -> typing.Union[MetaOapg.properties.requiredby, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["typ1"]) -> typing.Union[MetaOapg.properties.typ1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["typ2"]) -> typing.Union[MetaOapg.properties.typ2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "com", "des", "dttmendrecur", "dttmstartrecur", "idrecitem", "recurfrequency", "recurnote", "requiredby", "typ1", "typ2", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idrec: typing.Union[MetaOapg.properties.idrec, str, ],
        idwell: typing.Union[MetaOapg.properties.idwell, str, ],
        com: typing.Union[MetaOapg.properties.com, str, schemas.Unset] = schemas.unset,
        des: typing.Union[MetaOapg.properties.des, str, schemas.Unset] = schemas.unset,
        dttmendrecur: typing.Union[MetaOapg.properties.dttmendrecur, str, datetime, schemas.Unset] = schemas.unset,
        dttmstartrecur: typing.Union[MetaOapg.properties.dttmstartrecur, str, datetime, schemas.Unset] = schemas.unset,
        idrecitem: typing.Union[MetaOapg.properties.idrecitem, str, schemas.Unset] = schemas.unset,
        recurfrequency: typing.Union[MetaOapg.properties.recurfrequency, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        recurnote: typing.Union[MetaOapg.properties.recurnote, str, schemas.Unset] = schemas.unset,
        requiredby: typing.Union[MetaOapg.properties.requiredby, str, schemas.Unset] = schemas.unset,
        typ1: typing.Union[MetaOapg.properties.typ1, str, schemas.Unset] = schemas.unset,
        typ2: typing.Union[MetaOapg.properties.typ2, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SurveillanceNotesData':
        return super().__new__(
            cls,
            *args,
            idrec=idrec,
            idwell=idwell,
            com=com,
            des=des,
            dttmendrecur=dttmendrecur,
            dttmstartrecur=dttmstartrecur,
            idrecitem=idrecitem,
            recurfrequency=recurfrequency,
            recurnote=recurnote,
            requiredby=requiredby,
            typ1=typ1,
            typ2=typ2,
            _configuration=_configuration,
            **kwargs,
        )
