# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class HydrocarbonLiquidPropertiesData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idrec",
            "idwell",
        }
        
        class properties:
            idrec = schemas.StrSchema
            idwell = schemas.StrSchema
            apic7 = schemas.NumberSchema
            apisample = schemas.NumberSchema
            com = schemas.StrSchema
            densityc7 = schemas.NumberSchema
            densityrelc7 = schemas.NumberSchema
            densityrelsample = schemas.NumberSchema
            densitysample = schemas.NumberSchema
            factorgasequiv = schemas.NumberSchema
            idrecparent = schemas.StrSchema
            molecularmassrel = schemas.NumberSchema
            molecularmasssample = schemas.NumberSchema
            temprefapic7 = schemas.NumberSchema
            temprefapisample = schemas.NumberSchema
            temprefc7 = schemas.NumberSchema
            temprefsample = schemas.NumberSchema
            __annotations__ = {
                "idrec": idrec,
                "idwell": idwell,
                "apic7": apic7,
                "apisample": apisample,
                "com": com,
                "densityc7": densityc7,
                "densityrelc7": densityrelc7,
                "densityrelsample": densityrelsample,
                "densitysample": densitysample,
                "factorgasequiv": factorgasequiv,
                "idrecparent": idrecparent,
                "molecularmassrel": molecularmassrel,
                "molecularmasssample": molecularmasssample,
                "temprefapic7": temprefapic7,
                "temprefapisample": temprefapisample,
                "temprefc7": temprefc7,
                "temprefsample": temprefsample,
            }
    
    idrec: MetaOapg.properties.idrec
    idwell: MetaOapg.properties.idwell
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["apic7"]) -> MetaOapg.properties.apic7: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["apisample"]) -> MetaOapg.properties.apisample: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["com"]) -> MetaOapg.properties.com: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["densityc7"]) -> MetaOapg.properties.densityc7: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["densityrelc7"]) -> MetaOapg.properties.densityrelc7: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["densityrelsample"]) -> MetaOapg.properties.densityrelsample: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["densitysample"]) -> MetaOapg.properties.densitysample: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["factorgasequiv"]) -> MetaOapg.properties.factorgasequiv: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecparent"]) -> MetaOapg.properties.idrecparent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["molecularmassrel"]) -> MetaOapg.properties.molecularmassrel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["molecularmasssample"]) -> MetaOapg.properties.molecularmasssample: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["temprefapic7"]) -> MetaOapg.properties.temprefapic7: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["temprefapisample"]) -> MetaOapg.properties.temprefapisample: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["temprefc7"]) -> MetaOapg.properties.temprefc7: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["temprefsample"]) -> MetaOapg.properties.temprefsample: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "apic7", "apisample", "com", "densityc7", "densityrelc7", "densityrelsample", "densitysample", "factorgasequiv", "idrecparent", "molecularmassrel", "molecularmasssample", "temprefapic7", "temprefapisample", "temprefc7", "temprefsample", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["apic7"]) -> typing.Union[MetaOapg.properties.apic7, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["apisample"]) -> typing.Union[MetaOapg.properties.apisample, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["com"]) -> typing.Union[MetaOapg.properties.com, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["densityc7"]) -> typing.Union[MetaOapg.properties.densityc7, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["densityrelc7"]) -> typing.Union[MetaOapg.properties.densityrelc7, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["densityrelsample"]) -> typing.Union[MetaOapg.properties.densityrelsample, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["densitysample"]) -> typing.Union[MetaOapg.properties.densitysample, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["factorgasequiv"]) -> typing.Union[MetaOapg.properties.factorgasequiv, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecparent"]) -> typing.Union[MetaOapg.properties.idrecparent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["molecularmassrel"]) -> typing.Union[MetaOapg.properties.molecularmassrel, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["molecularmasssample"]) -> typing.Union[MetaOapg.properties.molecularmasssample, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["temprefapic7"]) -> typing.Union[MetaOapg.properties.temprefapic7, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["temprefapisample"]) -> typing.Union[MetaOapg.properties.temprefapisample, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["temprefc7"]) -> typing.Union[MetaOapg.properties.temprefc7, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["temprefsample"]) -> typing.Union[MetaOapg.properties.temprefsample, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "apic7", "apisample", "com", "densityc7", "densityrelc7", "densityrelsample", "densitysample", "factorgasequiv", "idrecparent", "molecularmassrel", "molecularmasssample", "temprefapic7", "temprefapisample", "temprefc7", "temprefsample", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idrec: typing.Union[MetaOapg.properties.idrec, str, ],
        idwell: typing.Union[MetaOapg.properties.idwell, str, ],
        apic7: typing.Union[MetaOapg.properties.apic7, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        apisample: typing.Union[MetaOapg.properties.apisample, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        com: typing.Union[MetaOapg.properties.com, str, schemas.Unset] = schemas.unset,
        densityc7: typing.Union[MetaOapg.properties.densityc7, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        densityrelc7: typing.Union[MetaOapg.properties.densityrelc7, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        densityrelsample: typing.Union[MetaOapg.properties.densityrelsample, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        densitysample: typing.Union[MetaOapg.properties.densitysample, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        factorgasequiv: typing.Union[MetaOapg.properties.factorgasequiv, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        idrecparent: typing.Union[MetaOapg.properties.idrecparent, str, schemas.Unset] = schemas.unset,
        molecularmassrel: typing.Union[MetaOapg.properties.molecularmassrel, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        molecularmasssample: typing.Union[MetaOapg.properties.molecularmasssample, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        temprefapic7: typing.Union[MetaOapg.properties.temprefapic7, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        temprefapisample: typing.Union[MetaOapg.properties.temprefapisample, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        temprefc7: typing.Union[MetaOapg.properties.temprefc7, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        temprefsample: typing.Union[MetaOapg.properties.temprefsample, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'HydrocarbonLiquidPropertiesData':
        return super().__new__(
            cls,
            *args,
            idrec=idrec,
            idwell=idwell,
            apic7=apic7,
            apisample=apisample,
            com=com,
            densityc7=densityc7,
            densityrelc7=densityrelc7,
            densityrelsample=densityrelsample,
            densitysample=densitysample,
            factorgasequiv=factorgasequiv,
            idrecparent=idrecparent,
            molecularmassrel=molecularmassrel,
            molecularmasssample=molecularmasssample,
            temprefapic7=temprefapic7,
            temprefapisample=temprefapisample,
            temprefc7=temprefc7,
            temprefsample=temprefsample,
            _configuration=_configuration,
            **kwargs,
        )
