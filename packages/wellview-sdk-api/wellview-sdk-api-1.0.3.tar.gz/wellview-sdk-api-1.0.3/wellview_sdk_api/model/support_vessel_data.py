# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class SupportVesselData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idrec",
            "idwell",
        }
        
        class properties:
            idrec = schemas.StrSchema
            idwell = schemas.StrSchema
            des = schemas.StrSchema
            dttmarrive = schemas.DateTimeSchema
            dttmarriveplan = schemas.DateTimeSchema
            dttmdepart = schemas.DateTimeSchema
            dttmdepartplan = schemas.DateTimeSchema
            idrecparent = schemas.StrSchema
            locdest = schemas.StrSchema
            locorigin = schemas.StrSchema
            note = schemas.StrSchema
            passengercapacity = schemas.IntSchema
            qty = schemas.IntSchema
            refnovessel = schemas.StrSchema
            supplier = schemas.StrSchema
            typ1 = schemas.StrSchema
            typ2 = schemas.StrSchema
            vesselname = schemas.StrSchema
            __annotations__ = {
                "idrec": idrec,
                "idwell": idwell,
                "des": des,
                "dttmarrive": dttmarrive,
                "dttmarriveplan": dttmarriveplan,
                "dttmdepart": dttmdepart,
                "dttmdepartplan": dttmdepartplan,
                "idrecparent": idrecparent,
                "locdest": locdest,
                "locorigin": locorigin,
                "note": note,
                "passengercapacity": passengercapacity,
                "qty": qty,
                "refnovessel": refnovessel,
                "supplier": supplier,
                "typ1": typ1,
                "typ2": typ2,
                "vesselname": vesselname,
            }
    
    idrec: MetaOapg.properties.idrec
    idwell: MetaOapg.properties.idwell
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["des"]) -> MetaOapg.properties.des: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmarrive"]) -> MetaOapg.properties.dttmarrive: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmarriveplan"]) -> MetaOapg.properties.dttmarriveplan: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmdepart"]) -> MetaOapg.properties.dttmdepart: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmdepartplan"]) -> MetaOapg.properties.dttmdepartplan: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecparent"]) -> MetaOapg.properties.idrecparent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["locdest"]) -> MetaOapg.properties.locdest: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["locorigin"]) -> MetaOapg.properties.locorigin: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["note"]) -> MetaOapg.properties.note: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["passengercapacity"]) -> MetaOapg.properties.passengercapacity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["qty"]) -> MetaOapg.properties.qty: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["refnovessel"]) -> MetaOapg.properties.refnovessel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["supplier"]) -> MetaOapg.properties.supplier: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["typ1"]) -> MetaOapg.properties.typ1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["typ2"]) -> MetaOapg.properties.typ2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vesselname"]) -> MetaOapg.properties.vesselname: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "des", "dttmarrive", "dttmarriveplan", "dttmdepart", "dttmdepartplan", "idrecparent", "locdest", "locorigin", "note", "passengercapacity", "qty", "refnovessel", "supplier", "typ1", "typ2", "vesselname", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["des"]) -> typing.Union[MetaOapg.properties.des, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmarrive"]) -> typing.Union[MetaOapg.properties.dttmarrive, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmarriveplan"]) -> typing.Union[MetaOapg.properties.dttmarriveplan, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmdepart"]) -> typing.Union[MetaOapg.properties.dttmdepart, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmdepartplan"]) -> typing.Union[MetaOapg.properties.dttmdepartplan, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecparent"]) -> typing.Union[MetaOapg.properties.idrecparent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["locdest"]) -> typing.Union[MetaOapg.properties.locdest, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["locorigin"]) -> typing.Union[MetaOapg.properties.locorigin, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["note"]) -> typing.Union[MetaOapg.properties.note, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["passengercapacity"]) -> typing.Union[MetaOapg.properties.passengercapacity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["qty"]) -> typing.Union[MetaOapg.properties.qty, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["refnovessel"]) -> typing.Union[MetaOapg.properties.refnovessel, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["supplier"]) -> typing.Union[MetaOapg.properties.supplier, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["typ1"]) -> typing.Union[MetaOapg.properties.typ1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["typ2"]) -> typing.Union[MetaOapg.properties.typ2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vesselname"]) -> typing.Union[MetaOapg.properties.vesselname, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "des", "dttmarrive", "dttmarriveplan", "dttmdepart", "dttmdepartplan", "idrecparent", "locdest", "locorigin", "note", "passengercapacity", "qty", "refnovessel", "supplier", "typ1", "typ2", "vesselname", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idrec: typing.Union[MetaOapg.properties.idrec, str, ],
        idwell: typing.Union[MetaOapg.properties.idwell, str, ],
        des: typing.Union[MetaOapg.properties.des, str, schemas.Unset] = schemas.unset,
        dttmarrive: typing.Union[MetaOapg.properties.dttmarrive, str, datetime, schemas.Unset] = schemas.unset,
        dttmarriveplan: typing.Union[MetaOapg.properties.dttmarriveplan, str, datetime, schemas.Unset] = schemas.unset,
        dttmdepart: typing.Union[MetaOapg.properties.dttmdepart, str, datetime, schemas.Unset] = schemas.unset,
        dttmdepartplan: typing.Union[MetaOapg.properties.dttmdepartplan, str, datetime, schemas.Unset] = schemas.unset,
        idrecparent: typing.Union[MetaOapg.properties.idrecparent, str, schemas.Unset] = schemas.unset,
        locdest: typing.Union[MetaOapg.properties.locdest, str, schemas.Unset] = schemas.unset,
        locorigin: typing.Union[MetaOapg.properties.locorigin, str, schemas.Unset] = schemas.unset,
        note: typing.Union[MetaOapg.properties.note, str, schemas.Unset] = schemas.unset,
        passengercapacity: typing.Union[MetaOapg.properties.passengercapacity, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        qty: typing.Union[MetaOapg.properties.qty, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        refnovessel: typing.Union[MetaOapg.properties.refnovessel, str, schemas.Unset] = schemas.unset,
        supplier: typing.Union[MetaOapg.properties.supplier, str, schemas.Unset] = schemas.unset,
        typ1: typing.Union[MetaOapg.properties.typ1, str, schemas.Unset] = schemas.unset,
        typ2: typing.Union[MetaOapg.properties.typ2, str, schemas.Unset] = schemas.unset,
        vesselname: typing.Union[MetaOapg.properties.vesselname, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SupportVesselData':
        return super().__new__(
            cls,
            *args,
            idrec=idrec,
            idwell=idwell,
            des=des,
            dttmarrive=dttmarrive,
            dttmarriveplan=dttmarriveplan,
            dttmdepart=dttmdepart,
            dttmdepartplan=dttmdepartplan,
            idrecparent=idrecparent,
            locdest=locdest,
            locorigin=locorigin,
            note=note,
            passengercapacity=passengercapacity,
            qty=qty,
            refnovessel=refnovessel,
            supplier=supplier,
            typ1=typ1,
            typ2=typ2,
            vesselname=vesselname,
            _configuration=_configuration,
            **kwargs,
        )
