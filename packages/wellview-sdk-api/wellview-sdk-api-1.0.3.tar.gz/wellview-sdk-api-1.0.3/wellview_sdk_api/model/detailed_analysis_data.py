# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class DetailedAnalysisData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idrec",
            "idwell",
        }
        
        class properties:
            idrec = schemas.StrSchema
            idwell = schemas.StrSchema
            actionrqd = schemas.BoolSchema
            analysistyp = schemas.StrSchema
            analyst = schemas.StrSchema
            com = schemas.StrSchema
            condition = schemas.StrSchema
            dttminspect = schemas.DateTimeSchema
            durequip = schemas.NumberSchema
            idrecparent = schemas.StrSchema
            material = schemas.StrSchema
            metallurgy = schemas.StrSchema
            partcost = schemas.NumberSchema
            partdes = schemas.StrSchema
            partrefno = schemas.StrSchema
            parttyp1 = schemas.StrSchema
            parttyp2 = schemas.StrSchema
            rootcause1 = schemas.StrSchema
            rootcause2 = schemas.StrSchema
            __annotations__ = {
                "idrec": idrec,
                "idwell": idwell,
                "actionrqd": actionrqd,
                "analysistyp": analysistyp,
                "analyst": analyst,
                "com": com,
                "condition": condition,
                "dttminspect": dttminspect,
                "durequip": durequip,
                "idrecparent": idrecparent,
                "material": material,
                "metallurgy": metallurgy,
                "partcost": partcost,
                "partdes": partdes,
                "partrefno": partrefno,
                "parttyp1": parttyp1,
                "parttyp2": parttyp2,
                "rootcause1": rootcause1,
                "rootcause2": rootcause2,
            }
    
    idrec: MetaOapg.properties.idrec
    idwell: MetaOapg.properties.idwell
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["actionrqd"]) -> MetaOapg.properties.actionrqd: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["analysistyp"]) -> MetaOapg.properties.analysistyp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["analyst"]) -> MetaOapg.properties.analyst: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["com"]) -> MetaOapg.properties.com: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["condition"]) -> MetaOapg.properties.condition: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttminspect"]) -> MetaOapg.properties.dttminspect: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["durequip"]) -> MetaOapg.properties.durequip: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecparent"]) -> MetaOapg.properties.idrecparent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["material"]) -> MetaOapg.properties.material: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metallurgy"]) -> MetaOapg.properties.metallurgy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["partcost"]) -> MetaOapg.properties.partcost: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["partdes"]) -> MetaOapg.properties.partdes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["partrefno"]) -> MetaOapg.properties.partrefno: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["parttyp1"]) -> MetaOapg.properties.parttyp1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["parttyp2"]) -> MetaOapg.properties.parttyp2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rootcause1"]) -> MetaOapg.properties.rootcause1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rootcause2"]) -> MetaOapg.properties.rootcause2: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "actionrqd", "analysistyp", "analyst", "com", "condition", "dttminspect", "durequip", "idrecparent", "material", "metallurgy", "partcost", "partdes", "partrefno", "parttyp1", "parttyp2", "rootcause1", "rootcause2", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["actionrqd"]) -> typing.Union[MetaOapg.properties.actionrqd, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["analysistyp"]) -> typing.Union[MetaOapg.properties.analysistyp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["analyst"]) -> typing.Union[MetaOapg.properties.analyst, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["com"]) -> typing.Union[MetaOapg.properties.com, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["condition"]) -> typing.Union[MetaOapg.properties.condition, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttminspect"]) -> typing.Union[MetaOapg.properties.dttminspect, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["durequip"]) -> typing.Union[MetaOapg.properties.durequip, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecparent"]) -> typing.Union[MetaOapg.properties.idrecparent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["material"]) -> typing.Union[MetaOapg.properties.material, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metallurgy"]) -> typing.Union[MetaOapg.properties.metallurgy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["partcost"]) -> typing.Union[MetaOapg.properties.partcost, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["partdes"]) -> typing.Union[MetaOapg.properties.partdes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["partrefno"]) -> typing.Union[MetaOapg.properties.partrefno, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["parttyp1"]) -> typing.Union[MetaOapg.properties.parttyp1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["parttyp2"]) -> typing.Union[MetaOapg.properties.parttyp2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rootcause1"]) -> typing.Union[MetaOapg.properties.rootcause1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rootcause2"]) -> typing.Union[MetaOapg.properties.rootcause2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "actionrqd", "analysistyp", "analyst", "com", "condition", "dttminspect", "durequip", "idrecparent", "material", "metallurgy", "partcost", "partdes", "partrefno", "parttyp1", "parttyp2", "rootcause1", "rootcause2", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idrec: typing.Union[MetaOapg.properties.idrec, str, ],
        idwell: typing.Union[MetaOapg.properties.idwell, str, ],
        actionrqd: typing.Union[MetaOapg.properties.actionrqd, bool, schemas.Unset] = schemas.unset,
        analysistyp: typing.Union[MetaOapg.properties.analysistyp, str, schemas.Unset] = schemas.unset,
        analyst: typing.Union[MetaOapg.properties.analyst, str, schemas.Unset] = schemas.unset,
        com: typing.Union[MetaOapg.properties.com, str, schemas.Unset] = schemas.unset,
        condition: typing.Union[MetaOapg.properties.condition, str, schemas.Unset] = schemas.unset,
        dttminspect: typing.Union[MetaOapg.properties.dttminspect, str, datetime, schemas.Unset] = schemas.unset,
        durequip: typing.Union[MetaOapg.properties.durequip, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        idrecparent: typing.Union[MetaOapg.properties.idrecparent, str, schemas.Unset] = schemas.unset,
        material: typing.Union[MetaOapg.properties.material, str, schemas.Unset] = schemas.unset,
        metallurgy: typing.Union[MetaOapg.properties.metallurgy, str, schemas.Unset] = schemas.unset,
        partcost: typing.Union[MetaOapg.properties.partcost, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        partdes: typing.Union[MetaOapg.properties.partdes, str, schemas.Unset] = schemas.unset,
        partrefno: typing.Union[MetaOapg.properties.partrefno, str, schemas.Unset] = schemas.unset,
        parttyp1: typing.Union[MetaOapg.properties.parttyp1, str, schemas.Unset] = schemas.unset,
        parttyp2: typing.Union[MetaOapg.properties.parttyp2, str, schemas.Unset] = schemas.unset,
        rootcause1: typing.Union[MetaOapg.properties.rootcause1, str, schemas.Unset] = schemas.unset,
        rootcause2: typing.Union[MetaOapg.properties.rootcause2, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DetailedAnalysisData':
        return super().__new__(
            cls,
            *args,
            idrec=idrec,
            idwell=idwell,
            actionrqd=actionrqd,
            analysistyp=analysistyp,
            analyst=analyst,
            com=com,
            condition=condition,
            dttminspect=dttminspect,
            durequip=durequip,
            idrecparent=idrecparent,
            material=material,
            metallurgy=metallurgy,
            partcost=partcost,
            partdes=partdes,
            partrefno=partrefno,
            parttyp1=parttyp1,
            parttyp2=parttyp2,
            rootcause1=rootcause1,
            rootcause2=rootcause2,
            _configuration=_configuration,
            **kwargs,
        )
