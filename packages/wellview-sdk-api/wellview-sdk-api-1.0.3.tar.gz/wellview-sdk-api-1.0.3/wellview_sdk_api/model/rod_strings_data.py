# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class RodStringsData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idrec",
            "idwell",
        }
        
        class properties:
            idrec = schemas.StrSchema
            idwell = schemas.StrSchema
            com = schemas.StrSchema
            depthbtm = schemas.NumberSchema
            des = schemas.StrSchema
            dttmonbottom = schemas.DateTimeSchema
            dttmoutofhole = schemas.DateTimeSchema
            dttmpickup = schemas.DateTimeSchema
            dttmpull = schemas.DateTimeSchema
            dttmrun = schemas.DateTimeSchema
            idrecjobpull = schemas.StrSchema
            idrecjobrun = schemas.StrSchema
            idrectub = schemas.StrSchema
            idrecwellbore = schemas.StrSchema
            proposedpull = schemas.BoolSchema
            proposedrun = schemas.BoolSchema
            pullreason = schemas.StrSchema
            pullreasondetail = schemas.StrSchema
            usertxt1 = schemas.StrSchema
            usertxt2 = schemas.StrSchema
            usertxt3 = schemas.StrSchema
            __annotations__ = {
                "idrec": idrec,
                "idwell": idwell,
                "com": com,
                "depthbtm": depthbtm,
                "des": des,
                "dttmonbottom": dttmonbottom,
                "dttmoutofhole": dttmoutofhole,
                "dttmpickup": dttmpickup,
                "dttmpull": dttmpull,
                "dttmrun": dttmrun,
                "idrecjobpull": idrecjobpull,
                "idrecjobrun": idrecjobrun,
                "idrectub": idrectub,
                "idrecwellbore": idrecwellbore,
                "proposedpull": proposedpull,
                "proposedrun": proposedrun,
                "pullreason": pullreason,
                "pullreasondetail": pullreasondetail,
                "usertxt1": usertxt1,
                "usertxt2": usertxt2,
                "usertxt3": usertxt3,
            }
    
    idrec: MetaOapg.properties.idrec
    idwell: MetaOapg.properties.idwell
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["com"]) -> MetaOapg.properties.com: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["depthbtm"]) -> MetaOapg.properties.depthbtm: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["des"]) -> MetaOapg.properties.des: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmonbottom"]) -> MetaOapg.properties.dttmonbottom: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmoutofhole"]) -> MetaOapg.properties.dttmoutofhole: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmpickup"]) -> MetaOapg.properties.dttmpickup: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmpull"]) -> MetaOapg.properties.dttmpull: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmrun"]) -> MetaOapg.properties.dttmrun: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecjobpull"]) -> MetaOapg.properties.idrecjobpull: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecjobrun"]) -> MetaOapg.properties.idrecjobrun: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrectub"]) -> MetaOapg.properties.idrectub: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecwellbore"]) -> MetaOapg.properties.idrecwellbore: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["proposedpull"]) -> MetaOapg.properties.proposedpull: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["proposedrun"]) -> MetaOapg.properties.proposedrun: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pullreason"]) -> MetaOapg.properties.pullreason: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pullreasondetail"]) -> MetaOapg.properties.pullreasondetail: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usertxt1"]) -> MetaOapg.properties.usertxt1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usertxt2"]) -> MetaOapg.properties.usertxt2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usertxt3"]) -> MetaOapg.properties.usertxt3: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "com", "depthbtm", "des", "dttmonbottom", "dttmoutofhole", "dttmpickup", "dttmpull", "dttmrun", "idrecjobpull", "idrecjobrun", "idrectub", "idrecwellbore", "proposedpull", "proposedrun", "pullreason", "pullreasondetail", "usertxt1", "usertxt2", "usertxt3", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["com"]) -> typing.Union[MetaOapg.properties.com, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["depthbtm"]) -> typing.Union[MetaOapg.properties.depthbtm, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["des"]) -> typing.Union[MetaOapg.properties.des, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmonbottom"]) -> typing.Union[MetaOapg.properties.dttmonbottom, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmoutofhole"]) -> typing.Union[MetaOapg.properties.dttmoutofhole, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmpickup"]) -> typing.Union[MetaOapg.properties.dttmpickup, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmpull"]) -> typing.Union[MetaOapg.properties.dttmpull, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmrun"]) -> typing.Union[MetaOapg.properties.dttmrun, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecjobpull"]) -> typing.Union[MetaOapg.properties.idrecjobpull, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecjobrun"]) -> typing.Union[MetaOapg.properties.idrecjobrun, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrectub"]) -> typing.Union[MetaOapg.properties.idrectub, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecwellbore"]) -> typing.Union[MetaOapg.properties.idrecwellbore, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["proposedpull"]) -> typing.Union[MetaOapg.properties.proposedpull, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["proposedrun"]) -> typing.Union[MetaOapg.properties.proposedrun, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pullreason"]) -> typing.Union[MetaOapg.properties.pullreason, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pullreasondetail"]) -> typing.Union[MetaOapg.properties.pullreasondetail, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usertxt1"]) -> typing.Union[MetaOapg.properties.usertxt1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usertxt2"]) -> typing.Union[MetaOapg.properties.usertxt2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usertxt3"]) -> typing.Union[MetaOapg.properties.usertxt3, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "com", "depthbtm", "des", "dttmonbottom", "dttmoutofhole", "dttmpickup", "dttmpull", "dttmrun", "idrecjobpull", "idrecjobrun", "idrectub", "idrecwellbore", "proposedpull", "proposedrun", "pullreason", "pullreasondetail", "usertxt1", "usertxt2", "usertxt3", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idrec: typing.Union[MetaOapg.properties.idrec, str, ],
        idwell: typing.Union[MetaOapg.properties.idwell, str, ],
        com: typing.Union[MetaOapg.properties.com, str, schemas.Unset] = schemas.unset,
        depthbtm: typing.Union[MetaOapg.properties.depthbtm, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        des: typing.Union[MetaOapg.properties.des, str, schemas.Unset] = schemas.unset,
        dttmonbottom: typing.Union[MetaOapg.properties.dttmonbottom, str, datetime, schemas.Unset] = schemas.unset,
        dttmoutofhole: typing.Union[MetaOapg.properties.dttmoutofhole, str, datetime, schemas.Unset] = schemas.unset,
        dttmpickup: typing.Union[MetaOapg.properties.dttmpickup, str, datetime, schemas.Unset] = schemas.unset,
        dttmpull: typing.Union[MetaOapg.properties.dttmpull, str, datetime, schemas.Unset] = schemas.unset,
        dttmrun: typing.Union[MetaOapg.properties.dttmrun, str, datetime, schemas.Unset] = schemas.unset,
        idrecjobpull: typing.Union[MetaOapg.properties.idrecjobpull, str, schemas.Unset] = schemas.unset,
        idrecjobrun: typing.Union[MetaOapg.properties.idrecjobrun, str, schemas.Unset] = schemas.unset,
        idrectub: typing.Union[MetaOapg.properties.idrectub, str, schemas.Unset] = schemas.unset,
        idrecwellbore: typing.Union[MetaOapg.properties.idrecwellbore, str, schemas.Unset] = schemas.unset,
        proposedpull: typing.Union[MetaOapg.properties.proposedpull, bool, schemas.Unset] = schemas.unset,
        proposedrun: typing.Union[MetaOapg.properties.proposedrun, bool, schemas.Unset] = schemas.unset,
        pullreason: typing.Union[MetaOapg.properties.pullreason, str, schemas.Unset] = schemas.unset,
        pullreasondetail: typing.Union[MetaOapg.properties.pullreasondetail, str, schemas.Unset] = schemas.unset,
        usertxt1: typing.Union[MetaOapg.properties.usertxt1, str, schemas.Unset] = schemas.unset,
        usertxt2: typing.Union[MetaOapg.properties.usertxt2, str, schemas.Unset] = schemas.unset,
        usertxt3: typing.Union[MetaOapg.properties.usertxt3, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'RodStringsData':
        return super().__new__(
            cls,
            *args,
            idrec=idrec,
            idwell=idwell,
            com=com,
            depthbtm=depthbtm,
            des=des,
            dttmonbottom=dttmonbottom,
            dttmoutofhole=dttmoutofhole,
            dttmpickup=dttmpickup,
            dttmpull=dttmpull,
            dttmrun=dttmrun,
            idrecjobpull=idrecjobpull,
            idrecjobrun=idrecjobrun,
            idrectub=idrectub,
            idrecwellbore=idrecwellbore,
            proposedpull=proposedpull,
            proposedrun=proposedrun,
            pullreason=pullreason,
            pullreasondetail=pullreasondetail,
            usertxt1=usertxt1,
            usertxt2=usertxt2,
            usertxt3=usertxt3,
            _configuration=_configuration,
            **kwargs,
        )
