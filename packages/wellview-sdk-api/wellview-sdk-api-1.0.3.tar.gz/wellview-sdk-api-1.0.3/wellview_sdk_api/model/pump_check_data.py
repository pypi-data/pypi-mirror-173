# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class PumpCheckData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idrec",
            "idwell",
        }
        
        class properties:
            idrec = schemas.StrSchema
            idwell = schemas.StrSchema
            depth = schemas.NumberSchema
            dttm = schemas.DateTimeSchema
            idrecparent = schemas.StrSchema
            pres = schemas.NumberSchema
            presclf = schemas.NumberSchema
            presklf = schemas.NumberSchema
            pumpingmode = schemas.StrSchema
            slowspeed = schemas.BoolSchema
            spm = schemas.IntSchema
            volefficiency = schemas.NumberSchema
            __annotations__ = {
                "idrec": idrec,
                "idwell": idwell,
                "depth": depth,
                "dttm": dttm,
                "idrecparent": idrecparent,
                "pres": pres,
                "presclf": presclf,
                "presklf": presklf,
                "pumpingmode": pumpingmode,
                "slowspeed": slowspeed,
                "spm": spm,
                "volefficiency": volefficiency,
            }
    
    idrec: MetaOapg.properties.idrec
    idwell: MetaOapg.properties.idwell
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["depth"]) -> MetaOapg.properties.depth: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttm"]) -> MetaOapg.properties.dttm: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecparent"]) -> MetaOapg.properties.idrecparent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pres"]) -> MetaOapg.properties.pres: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["presclf"]) -> MetaOapg.properties.presclf: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["presklf"]) -> MetaOapg.properties.presklf: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pumpingmode"]) -> MetaOapg.properties.pumpingmode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["slowspeed"]) -> MetaOapg.properties.slowspeed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["spm"]) -> MetaOapg.properties.spm: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["volefficiency"]) -> MetaOapg.properties.volefficiency: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "depth", "dttm", "idrecparent", "pres", "presclf", "presklf", "pumpingmode", "slowspeed", "spm", "volefficiency", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["depth"]) -> typing.Union[MetaOapg.properties.depth, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttm"]) -> typing.Union[MetaOapg.properties.dttm, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecparent"]) -> typing.Union[MetaOapg.properties.idrecparent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pres"]) -> typing.Union[MetaOapg.properties.pres, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["presclf"]) -> typing.Union[MetaOapg.properties.presclf, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["presklf"]) -> typing.Union[MetaOapg.properties.presklf, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pumpingmode"]) -> typing.Union[MetaOapg.properties.pumpingmode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["slowspeed"]) -> typing.Union[MetaOapg.properties.slowspeed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["spm"]) -> typing.Union[MetaOapg.properties.spm, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["volefficiency"]) -> typing.Union[MetaOapg.properties.volefficiency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "depth", "dttm", "idrecparent", "pres", "presclf", "presklf", "pumpingmode", "slowspeed", "spm", "volefficiency", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idrec: typing.Union[MetaOapg.properties.idrec, str, ],
        idwell: typing.Union[MetaOapg.properties.idwell, str, ],
        depth: typing.Union[MetaOapg.properties.depth, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        dttm: typing.Union[MetaOapg.properties.dttm, str, datetime, schemas.Unset] = schemas.unset,
        idrecparent: typing.Union[MetaOapg.properties.idrecparent, str, schemas.Unset] = schemas.unset,
        pres: typing.Union[MetaOapg.properties.pres, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        presclf: typing.Union[MetaOapg.properties.presclf, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        presklf: typing.Union[MetaOapg.properties.presklf, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        pumpingmode: typing.Union[MetaOapg.properties.pumpingmode, str, schemas.Unset] = schemas.unset,
        slowspeed: typing.Union[MetaOapg.properties.slowspeed, bool, schemas.Unset] = schemas.unset,
        spm: typing.Union[MetaOapg.properties.spm, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        volefficiency: typing.Union[MetaOapg.properties.volefficiency, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PumpCheckData':
        return super().__new__(
            cls,
            *args,
            idrec=idrec,
            idwell=idwell,
            depth=depth,
            dttm=dttm,
            idrecparent=idrecparent,
            pres=pres,
            presclf=presclf,
            presklf=presklf,
            pumpingmode=pumpingmode,
            slowspeed=slowspeed,
            spm=spm,
            volefficiency=volefficiency,
            _configuration=_configuration,
            **kwargs,
        )
