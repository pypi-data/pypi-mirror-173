# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class FPSLocationData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idrec",
            "idwell",
        }
        
        class properties:
            idrec = schemas.StrSchema
            idwell = schemas.StrSchema
            eventseq = schemas.IntSchema
            grid = schemas.StrSchema
            idrecparent = schemas.StrSchema
            latituderef = schemas.NumberSchema
            locexcept = schemas.StrSchema
            longituderef = schemas.NumberSchema
            note = schemas.StrSchema
            section = schemas.IntSchema
            source = schemas.StrSchema
            unit = schemas.StrSchema
            __annotations__ = {
                "idrec": idrec,
                "idwell": idwell,
                "eventseq": eventseq,
                "grid": grid,
                "idrecparent": idrecparent,
                "latituderef": latituderef,
                "locexcept": locexcept,
                "longituderef": longituderef,
                "note": note,
                "section": section,
                "source": source,
                "unit": unit,
            }
    
    idrec: MetaOapg.properties.idrec
    idwell: MetaOapg.properties.idwell
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["eventseq"]) -> MetaOapg.properties.eventseq: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["grid"]) -> MetaOapg.properties.grid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecparent"]) -> MetaOapg.properties.idrecparent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["latituderef"]) -> MetaOapg.properties.latituderef: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["locexcept"]) -> MetaOapg.properties.locexcept: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["longituderef"]) -> MetaOapg.properties.longituderef: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["note"]) -> MetaOapg.properties.note: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["section"]) -> MetaOapg.properties.section: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["source"]) -> MetaOapg.properties.source: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["unit"]) -> MetaOapg.properties.unit: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "eventseq", "grid", "idrecparent", "latituderef", "locexcept", "longituderef", "note", "section", "source", "unit", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["eventseq"]) -> typing.Union[MetaOapg.properties.eventseq, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["grid"]) -> typing.Union[MetaOapg.properties.grid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecparent"]) -> typing.Union[MetaOapg.properties.idrecparent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["latituderef"]) -> typing.Union[MetaOapg.properties.latituderef, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["locexcept"]) -> typing.Union[MetaOapg.properties.locexcept, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["longituderef"]) -> typing.Union[MetaOapg.properties.longituderef, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["note"]) -> typing.Union[MetaOapg.properties.note, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["section"]) -> typing.Union[MetaOapg.properties.section, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["source"]) -> typing.Union[MetaOapg.properties.source, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["unit"]) -> typing.Union[MetaOapg.properties.unit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "eventseq", "grid", "idrecparent", "latituderef", "locexcept", "longituderef", "note", "section", "source", "unit", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idrec: typing.Union[MetaOapg.properties.idrec, str, ],
        idwell: typing.Union[MetaOapg.properties.idwell, str, ],
        eventseq: typing.Union[MetaOapg.properties.eventseq, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        grid: typing.Union[MetaOapg.properties.grid, str, schemas.Unset] = schemas.unset,
        idrecparent: typing.Union[MetaOapg.properties.idrecparent, str, schemas.Unset] = schemas.unset,
        latituderef: typing.Union[MetaOapg.properties.latituderef, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        locexcept: typing.Union[MetaOapg.properties.locexcept, str, schemas.Unset] = schemas.unset,
        longituderef: typing.Union[MetaOapg.properties.longituderef, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        note: typing.Union[MetaOapg.properties.note, str, schemas.Unset] = schemas.unset,
        section: typing.Union[MetaOapg.properties.section, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        source: typing.Union[MetaOapg.properties.source, str, schemas.Unset] = schemas.unset,
        unit: typing.Union[MetaOapg.properties.unit, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'FPSLocationData':
        return super().__new__(
            cls,
            *args,
            idrec=idrec,
            idwell=idwell,
            eventseq=eventseq,
            grid=grid,
            idrecparent=idrecparent,
            latituderef=latituderef,
            locexcept=locexcept,
            longituderef=longituderef,
            note=note,
            section=section,
            source=source,
            unit=unit,
            _configuration=_configuration,
            **kwargs,
        )
