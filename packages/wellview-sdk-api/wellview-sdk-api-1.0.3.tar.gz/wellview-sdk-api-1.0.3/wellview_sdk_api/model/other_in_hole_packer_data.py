# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class OtherInHolePackerData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idrec",
            "idwell",
        }
        
        class properties:
            idrec = schemas.StrSchema
            idwell = schemas.StrSchema
            elastomertyp = schemas.StrSchema
            elemcenter = schemas.NumberSchema
            idrecparent = schemas.StrSchema
            lenpolishbore = schemas.NumberSchema
            presdiffmax = schemas.NumberSchema
            retrievable = schemas.BoolSchema
            retrievemeth = schemas.StrSchema
            setfluidtyp = schemas.StrSchema
            setmech = schemas.StrSchema
            setprocedure = schemas.StrSchema
            shearrelease = schemas.NumberSchema
            slips = schemas.StrSchema
            szpolishbore = schemas.NumberSchema
            unsettingprocedure = schemas.StrSchema
            __annotations__ = {
                "idrec": idrec,
                "idwell": idwell,
                "elastomertyp": elastomertyp,
                "elemcenter": elemcenter,
                "idrecparent": idrecparent,
                "lenpolishbore": lenpolishbore,
                "presdiffmax": presdiffmax,
                "retrievable": retrievable,
                "retrievemeth": retrievemeth,
                "setfluidtyp": setfluidtyp,
                "setmech": setmech,
                "setprocedure": setprocedure,
                "shearrelease": shearrelease,
                "slips": slips,
                "szpolishbore": szpolishbore,
                "unsettingprocedure": unsettingprocedure,
            }
    
    idrec: MetaOapg.properties.idrec
    idwell: MetaOapg.properties.idwell
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["elastomertyp"]) -> MetaOapg.properties.elastomertyp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["elemcenter"]) -> MetaOapg.properties.elemcenter: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrecparent"]) -> MetaOapg.properties.idrecparent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lenpolishbore"]) -> MetaOapg.properties.lenpolishbore: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["presdiffmax"]) -> MetaOapg.properties.presdiffmax: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["retrievable"]) -> MetaOapg.properties.retrievable: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["retrievemeth"]) -> MetaOapg.properties.retrievemeth: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["setfluidtyp"]) -> MetaOapg.properties.setfluidtyp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["setmech"]) -> MetaOapg.properties.setmech: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["setprocedure"]) -> MetaOapg.properties.setprocedure: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shearrelease"]) -> MetaOapg.properties.shearrelease: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["slips"]) -> MetaOapg.properties.slips: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["szpolishbore"]) -> MetaOapg.properties.szpolishbore: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["unsettingprocedure"]) -> MetaOapg.properties.unsettingprocedure: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "elastomertyp", "elemcenter", "idrecparent", "lenpolishbore", "presdiffmax", "retrievable", "retrievemeth", "setfluidtyp", "setmech", "setprocedure", "shearrelease", "slips", "szpolishbore", "unsettingprocedure", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["elastomertyp"]) -> typing.Union[MetaOapg.properties.elastomertyp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["elemcenter"]) -> typing.Union[MetaOapg.properties.elemcenter, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrecparent"]) -> typing.Union[MetaOapg.properties.idrecparent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lenpolishbore"]) -> typing.Union[MetaOapg.properties.lenpolishbore, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["presdiffmax"]) -> typing.Union[MetaOapg.properties.presdiffmax, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["retrievable"]) -> typing.Union[MetaOapg.properties.retrievable, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["retrievemeth"]) -> typing.Union[MetaOapg.properties.retrievemeth, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["setfluidtyp"]) -> typing.Union[MetaOapg.properties.setfluidtyp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["setmech"]) -> typing.Union[MetaOapg.properties.setmech, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["setprocedure"]) -> typing.Union[MetaOapg.properties.setprocedure, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shearrelease"]) -> typing.Union[MetaOapg.properties.shearrelease, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["slips"]) -> typing.Union[MetaOapg.properties.slips, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["szpolishbore"]) -> typing.Union[MetaOapg.properties.szpolishbore, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["unsettingprocedure"]) -> typing.Union[MetaOapg.properties.unsettingprocedure, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "elastomertyp", "elemcenter", "idrecparent", "lenpolishbore", "presdiffmax", "retrievable", "retrievemeth", "setfluidtyp", "setmech", "setprocedure", "shearrelease", "slips", "szpolishbore", "unsettingprocedure", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idrec: typing.Union[MetaOapg.properties.idrec, str, ],
        idwell: typing.Union[MetaOapg.properties.idwell, str, ],
        elastomertyp: typing.Union[MetaOapg.properties.elastomertyp, str, schemas.Unset] = schemas.unset,
        elemcenter: typing.Union[MetaOapg.properties.elemcenter, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        idrecparent: typing.Union[MetaOapg.properties.idrecparent, str, schemas.Unset] = schemas.unset,
        lenpolishbore: typing.Union[MetaOapg.properties.lenpolishbore, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        presdiffmax: typing.Union[MetaOapg.properties.presdiffmax, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        retrievable: typing.Union[MetaOapg.properties.retrievable, bool, schemas.Unset] = schemas.unset,
        retrievemeth: typing.Union[MetaOapg.properties.retrievemeth, str, schemas.Unset] = schemas.unset,
        setfluidtyp: typing.Union[MetaOapg.properties.setfluidtyp, str, schemas.Unset] = schemas.unset,
        setmech: typing.Union[MetaOapg.properties.setmech, str, schemas.Unset] = schemas.unset,
        setprocedure: typing.Union[MetaOapg.properties.setprocedure, str, schemas.Unset] = schemas.unset,
        shearrelease: typing.Union[MetaOapg.properties.shearrelease, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        slips: typing.Union[MetaOapg.properties.slips, str, schemas.Unset] = schemas.unset,
        szpolishbore: typing.Union[MetaOapg.properties.szpolishbore, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        unsettingprocedure: typing.Union[MetaOapg.properties.unsettingprocedure, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'OtherInHolePackerData':
        return super().__new__(
            cls,
            *args,
            idrec=idrec,
            idwell=idwell,
            elastomertyp=elastomertyp,
            elemcenter=elemcenter,
            idrecparent=idrecparent,
            lenpolishbore=lenpolishbore,
            presdiffmax=presdiffmax,
            retrievable=retrievable,
            retrievemeth=retrievemeth,
            setfluidtyp=setfluidtyp,
            setmech=setmech,
            setprocedure=setprocedure,
            shearrelease=shearrelease,
            slips=slips,
            szpolishbore=szpolishbore,
            unsettingprocedure=unsettingprocedure,
            _configuration=_configuration,
            **kwargs,
        )
