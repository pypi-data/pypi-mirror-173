# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wellview_sdk_api import schemas  # noqa: F401


class CompletionData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idrec",
            "idwell",
        }
        
        class properties:
            idrec = schemas.StrSchema
            idwell = schemas.StrSchema
            com = schemas.StrSchema
            compidpa = schemas.StrSchema
            completioncode = schemas.StrSchema
            completionida = schemas.StrSchema
            completionidb = schemas.StrSchema
            completionidc = schemas.StrSchema
            completionidd = schemas.StrSchema
            completionide = schemas.StrSchema
            completionlicensee = schemas.StrSchema
            completionlicenseno = schemas.StrSchema
            completionname = schemas.StrSchema
            depthrefbtm = schemas.NumberSchema
            depthreftop = schemas.NumberSchema
            dttmabandon = schemas.DateTimeSchema
            dttmlicense = schemas.DateTimeSchema
            dttmonprod = schemas.DateTimeSchema
            fieldcode = schemas.StrSchema
            fieldname = schemas.StrSchema
            unitcode = schemas.StrSchema
            unitname = schemas.StrSchema
            usertxt1 = schemas.StrSchema
            usertxt2 = schemas.StrSchema
            usertxt3 = schemas.StrSchema
            usertxt4 = schemas.StrSchema
            usertxt5 = schemas.StrSchema
            __annotations__ = {
                "idrec": idrec,
                "idwell": idwell,
                "com": com,
                "compidpa": compidpa,
                "completioncode": completioncode,
                "completionida": completionida,
                "completionidb": completionidb,
                "completionidc": completionidc,
                "completionidd": completionidd,
                "completionide": completionide,
                "completionlicensee": completionlicensee,
                "completionlicenseno": completionlicenseno,
                "completionname": completionname,
                "depthrefbtm": depthrefbtm,
                "depthreftop": depthreftop,
                "dttmabandon": dttmabandon,
                "dttmlicense": dttmlicense,
                "dttmonprod": dttmonprod,
                "fieldcode": fieldcode,
                "fieldname": fieldname,
                "unitcode": unitcode,
                "unitname": unitname,
                "usertxt1": usertxt1,
                "usertxt2": usertxt2,
                "usertxt3": usertxt3,
                "usertxt4": usertxt4,
                "usertxt5": usertxt5,
            }
    
    idrec: MetaOapg.properties.idrec
    idwell: MetaOapg.properties.idwell
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["com"]) -> MetaOapg.properties.com: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["compidpa"]) -> MetaOapg.properties.compidpa: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["completioncode"]) -> MetaOapg.properties.completioncode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["completionida"]) -> MetaOapg.properties.completionida: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["completionidb"]) -> MetaOapg.properties.completionidb: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["completionidc"]) -> MetaOapg.properties.completionidc: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["completionidd"]) -> MetaOapg.properties.completionidd: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["completionide"]) -> MetaOapg.properties.completionide: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["completionlicensee"]) -> MetaOapg.properties.completionlicensee: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["completionlicenseno"]) -> MetaOapg.properties.completionlicenseno: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["completionname"]) -> MetaOapg.properties.completionname: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["depthrefbtm"]) -> MetaOapg.properties.depthrefbtm: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["depthreftop"]) -> MetaOapg.properties.depthreftop: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmabandon"]) -> MetaOapg.properties.dttmabandon: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmlicense"]) -> MetaOapg.properties.dttmlicense: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dttmonprod"]) -> MetaOapg.properties.dttmonprod: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fieldcode"]) -> MetaOapg.properties.fieldcode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fieldname"]) -> MetaOapg.properties.fieldname: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["unitcode"]) -> MetaOapg.properties.unitcode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["unitname"]) -> MetaOapg.properties.unitname: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usertxt1"]) -> MetaOapg.properties.usertxt1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usertxt2"]) -> MetaOapg.properties.usertxt2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usertxt3"]) -> MetaOapg.properties.usertxt3: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usertxt4"]) -> MetaOapg.properties.usertxt4: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usertxt5"]) -> MetaOapg.properties.usertxt5: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "com", "compidpa", "completioncode", "completionida", "completionidb", "completionidc", "completionidd", "completionide", "completionlicensee", "completionlicenseno", "completionname", "depthrefbtm", "depthreftop", "dttmabandon", "dttmlicense", "dttmonprod", "fieldcode", "fieldname", "unitcode", "unitname", "usertxt1", "usertxt2", "usertxt3", "usertxt4", "usertxt5", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idrec"]) -> MetaOapg.properties.idrec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idwell"]) -> MetaOapg.properties.idwell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["com"]) -> typing.Union[MetaOapg.properties.com, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["compidpa"]) -> typing.Union[MetaOapg.properties.compidpa, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["completioncode"]) -> typing.Union[MetaOapg.properties.completioncode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["completionida"]) -> typing.Union[MetaOapg.properties.completionida, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["completionidb"]) -> typing.Union[MetaOapg.properties.completionidb, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["completionidc"]) -> typing.Union[MetaOapg.properties.completionidc, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["completionidd"]) -> typing.Union[MetaOapg.properties.completionidd, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["completionide"]) -> typing.Union[MetaOapg.properties.completionide, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["completionlicensee"]) -> typing.Union[MetaOapg.properties.completionlicensee, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["completionlicenseno"]) -> typing.Union[MetaOapg.properties.completionlicenseno, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["completionname"]) -> typing.Union[MetaOapg.properties.completionname, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["depthrefbtm"]) -> typing.Union[MetaOapg.properties.depthrefbtm, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["depthreftop"]) -> typing.Union[MetaOapg.properties.depthreftop, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmabandon"]) -> typing.Union[MetaOapg.properties.dttmabandon, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmlicense"]) -> typing.Union[MetaOapg.properties.dttmlicense, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dttmonprod"]) -> typing.Union[MetaOapg.properties.dttmonprod, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fieldcode"]) -> typing.Union[MetaOapg.properties.fieldcode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fieldname"]) -> typing.Union[MetaOapg.properties.fieldname, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["unitcode"]) -> typing.Union[MetaOapg.properties.unitcode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["unitname"]) -> typing.Union[MetaOapg.properties.unitname, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usertxt1"]) -> typing.Union[MetaOapg.properties.usertxt1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usertxt2"]) -> typing.Union[MetaOapg.properties.usertxt2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usertxt3"]) -> typing.Union[MetaOapg.properties.usertxt3, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usertxt4"]) -> typing.Union[MetaOapg.properties.usertxt4, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usertxt5"]) -> typing.Union[MetaOapg.properties.usertxt5, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idrec", "idwell", "com", "compidpa", "completioncode", "completionida", "completionidb", "completionidc", "completionidd", "completionide", "completionlicensee", "completionlicenseno", "completionname", "depthrefbtm", "depthreftop", "dttmabandon", "dttmlicense", "dttmonprod", "fieldcode", "fieldname", "unitcode", "unitname", "usertxt1", "usertxt2", "usertxt3", "usertxt4", "usertxt5", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idrec: typing.Union[MetaOapg.properties.idrec, str, ],
        idwell: typing.Union[MetaOapg.properties.idwell, str, ],
        com: typing.Union[MetaOapg.properties.com, str, schemas.Unset] = schemas.unset,
        compidpa: typing.Union[MetaOapg.properties.compidpa, str, schemas.Unset] = schemas.unset,
        completioncode: typing.Union[MetaOapg.properties.completioncode, str, schemas.Unset] = schemas.unset,
        completionida: typing.Union[MetaOapg.properties.completionida, str, schemas.Unset] = schemas.unset,
        completionidb: typing.Union[MetaOapg.properties.completionidb, str, schemas.Unset] = schemas.unset,
        completionidc: typing.Union[MetaOapg.properties.completionidc, str, schemas.Unset] = schemas.unset,
        completionidd: typing.Union[MetaOapg.properties.completionidd, str, schemas.Unset] = schemas.unset,
        completionide: typing.Union[MetaOapg.properties.completionide, str, schemas.Unset] = schemas.unset,
        completionlicensee: typing.Union[MetaOapg.properties.completionlicensee, str, schemas.Unset] = schemas.unset,
        completionlicenseno: typing.Union[MetaOapg.properties.completionlicenseno, str, schemas.Unset] = schemas.unset,
        completionname: typing.Union[MetaOapg.properties.completionname, str, schemas.Unset] = schemas.unset,
        depthrefbtm: typing.Union[MetaOapg.properties.depthrefbtm, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        depthreftop: typing.Union[MetaOapg.properties.depthreftop, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        dttmabandon: typing.Union[MetaOapg.properties.dttmabandon, str, datetime, schemas.Unset] = schemas.unset,
        dttmlicense: typing.Union[MetaOapg.properties.dttmlicense, str, datetime, schemas.Unset] = schemas.unset,
        dttmonprod: typing.Union[MetaOapg.properties.dttmonprod, str, datetime, schemas.Unset] = schemas.unset,
        fieldcode: typing.Union[MetaOapg.properties.fieldcode, str, schemas.Unset] = schemas.unset,
        fieldname: typing.Union[MetaOapg.properties.fieldname, str, schemas.Unset] = schemas.unset,
        unitcode: typing.Union[MetaOapg.properties.unitcode, str, schemas.Unset] = schemas.unset,
        unitname: typing.Union[MetaOapg.properties.unitname, str, schemas.Unset] = schemas.unset,
        usertxt1: typing.Union[MetaOapg.properties.usertxt1, str, schemas.Unset] = schemas.unset,
        usertxt2: typing.Union[MetaOapg.properties.usertxt2, str, schemas.Unset] = schemas.unset,
        usertxt3: typing.Union[MetaOapg.properties.usertxt3, str, schemas.Unset] = schemas.unset,
        usertxt4: typing.Union[MetaOapg.properties.usertxt4, str, schemas.Unset] = schemas.unset,
        usertxt5: typing.Union[MetaOapg.properties.usertxt5, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CompletionData':
        return super().__new__(
            cls,
            *args,
            idrec=idrec,
            idwell=idwell,
            com=com,
            compidpa=compidpa,
            completioncode=completioncode,
            completionida=completionida,
            completionidb=completionidb,
            completionidc=completionidc,
            completionidd=completionidd,
            completionide=completionide,
            completionlicensee=completionlicensee,
            completionlicenseno=completionlicenseno,
            completionname=completionname,
            depthrefbtm=depthrefbtm,
            depthreftop=depthreftop,
            dttmabandon=dttmabandon,
            dttmlicense=dttmlicense,
            dttmonprod=dttmonprod,
            fieldcode=fieldcode,
            fieldname=fieldname,
            unitcode=unitcode,
            unitname=unitname,
            usertxt1=usertxt1,
            usertxt2=usertxt2,
            usertxt3=usertxt3,
            usertxt4=usertxt4,
            usertxt5=usertxt5,
            _configuration=_configuration,
            **kwargs,
        )
