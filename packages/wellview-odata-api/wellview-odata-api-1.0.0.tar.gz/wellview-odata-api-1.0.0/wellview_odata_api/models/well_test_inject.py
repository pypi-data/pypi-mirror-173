# coding: utf-8

"""
    OData Service for namespace Default

    This OData service is located at http://localhost  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WellTestInject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'com': 'str',
        'conccuttings': 'OneOfWellTestInjectConccuttings',
        'datasource': 'str',
        'densitygas': 'OneOfWellTestInjectDensitygas',
        'displayflag': 'int',
        'dttmstart': 'datetime',
        'duration': 'OneOfWellTestInjectDuration',
        'fractionoil': 'OneOfWellTestInjectFractionoil',
        'idrec': 'str',
        'idrecjob': 'str',
        'idrecjobtk': 'str',
        'idreczonecompletion': 'str',
        'idreczonecompletiontk': 'str',
        'idwell': 'str',
        'prescas': 'OneOfWellTestInjectPrescas',
        'presinject': 'OneOfWellTestInjectPresinject',
        'purpose': 'str',
        'qualitysteam': 'OneOfWellTestInjectQualitysteam',
        'rateinjectgas': 'OneOfWellTestInjectRateinjectgas',
        'rateinjectliquid': 'OneOfWellTestInjectRateinjectliquid',
        'salinity': 'OneOfWellTestInjectSalinity',
        'syscreatedate': 'datetime',
        'syscreateuser': 'str',
        'syslockchildren': 'int',
        'syslockchildrenui': 'int',
        'syslockdate': 'datetime',
        'syslockme': 'int',
        'syslockmeui': 'int',
        'sysmoddate': 'datetime',
        'sysmoduser': 'str',
        'systag': 'str',
        'tempinject': 'OneOfWellTestInjectTempinject',
        'testedby': 'str',
        'typproduct': 'str',
        'wellheader': 'AnyOfWellTestInjectWellheader'
    }

    attribute_map = {
        'com': 'com',
        'conccuttings': 'conccuttings',
        'datasource': 'datasource',
        'densitygas': 'densitygas',
        'displayflag': 'displayflag',
        'dttmstart': 'dttmstart',
        'duration': 'duration',
        'fractionoil': 'fractionoil',
        'idrec': 'idrec',
        'idrecjob': 'idrecjob',
        'idrecjobtk': 'idrecjobtk',
        'idreczonecompletion': 'idreczonecompletion',
        'idreczonecompletiontk': 'idreczonecompletiontk',
        'idwell': 'idwell',
        'prescas': 'prescas',
        'presinject': 'presinject',
        'purpose': 'purpose',
        'qualitysteam': 'qualitysteam',
        'rateinjectgas': 'rateinjectgas',
        'rateinjectliquid': 'rateinjectliquid',
        'salinity': 'salinity',
        'syscreatedate': 'syscreatedate',
        'syscreateuser': 'syscreateuser',
        'syslockchildren': 'syslockchildren',
        'syslockchildrenui': 'syslockchildrenui',
        'syslockdate': 'syslockdate',
        'syslockme': 'syslockme',
        'syslockmeui': 'syslockmeui',
        'sysmoddate': 'sysmoddate',
        'sysmoduser': 'sysmoduser',
        'systag': 'systag',
        'tempinject': 'tempinject',
        'testedby': 'testedby',
        'typproduct': 'typproduct',
        'wellheader': 'wellheader'
    }

    def __init__(self, com=None, conccuttings=None, datasource=None, densitygas=None, displayflag=None, dttmstart=None, duration=None, fractionoil=None, idrec=None, idrecjob=None, idrecjobtk=None, idreczonecompletion=None, idreczonecompletiontk=None, idwell=None, prescas=None, presinject=None, purpose=None, qualitysteam=None, rateinjectgas=None, rateinjectliquid=None, salinity=None, syscreatedate=None, syscreateuser=None, syslockchildren=None, syslockchildrenui=None, syslockdate=None, syslockme=None, syslockmeui=None, sysmoddate=None, sysmoduser=None, systag=None, tempinject=None, testedby=None, typproduct=None, wellheader=None):  # noqa: E501
        """WellTestInject - a model defined in Swagger"""  # noqa: E501
        self._com = None
        self._conccuttings = None
        self._datasource = None
        self._densitygas = None
        self._displayflag = None
        self._dttmstart = None
        self._duration = None
        self._fractionoil = None
        self._idrec = None
        self._idrecjob = None
        self._idrecjobtk = None
        self._idreczonecompletion = None
        self._idreczonecompletiontk = None
        self._idwell = None
        self._prescas = None
        self._presinject = None
        self._purpose = None
        self._qualitysteam = None
        self._rateinjectgas = None
        self._rateinjectliquid = None
        self._salinity = None
        self._syscreatedate = None
        self._syscreateuser = None
        self._syslockchildren = None
        self._syslockchildrenui = None
        self._syslockdate = None
        self._syslockme = None
        self._syslockmeui = None
        self._sysmoddate = None
        self._sysmoduser = None
        self._systag = None
        self._tempinject = None
        self._testedby = None
        self._typproduct = None
        self._wellheader = None
        self.discriminator = None
        if com is not None:
            self.com = com
        if conccuttings is not None:
            self.conccuttings = conccuttings
        if datasource is not None:
            self.datasource = datasource
        if densitygas is not None:
            self.densitygas = densitygas
        if displayflag is not None:
            self.displayflag = displayflag
        if dttmstart is not None:
            self.dttmstart = dttmstart
        if duration is not None:
            self.duration = duration
        if fractionoil is not None:
            self.fractionoil = fractionoil
        if idrec is not None:
            self.idrec = idrec
        if idrecjob is not None:
            self.idrecjob = idrecjob
        if idrecjobtk is not None:
            self.idrecjobtk = idrecjobtk
        if idreczonecompletion is not None:
            self.idreczonecompletion = idreczonecompletion
        if idreczonecompletiontk is not None:
            self.idreczonecompletiontk = idreczonecompletiontk
        if idwell is not None:
            self.idwell = idwell
        if prescas is not None:
            self.prescas = prescas
        if presinject is not None:
            self.presinject = presinject
        if purpose is not None:
            self.purpose = purpose
        if qualitysteam is not None:
            self.qualitysteam = qualitysteam
        if rateinjectgas is not None:
            self.rateinjectgas = rateinjectgas
        if rateinjectliquid is not None:
            self.rateinjectliquid = rateinjectliquid
        if salinity is not None:
            self.salinity = salinity
        if syscreatedate is not None:
            self.syscreatedate = syscreatedate
        if syscreateuser is not None:
            self.syscreateuser = syscreateuser
        if syslockchildren is not None:
            self.syslockchildren = syslockchildren
        if syslockchildrenui is not None:
            self.syslockchildrenui = syslockchildrenui
        if syslockdate is not None:
            self.syslockdate = syslockdate
        if syslockme is not None:
            self.syslockme = syslockme
        if syslockmeui is not None:
            self.syslockmeui = syslockmeui
        if sysmoddate is not None:
            self.sysmoddate = sysmoddate
        if sysmoduser is not None:
            self.sysmoduser = sysmoduser
        if systag is not None:
            self.systag = systag
        if tempinject is not None:
            self.tempinject = tempinject
        if testedby is not None:
            self.testedby = testedby
        if typproduct is not None:
            self.typproduct = typproduct
        if wellheader is not None:
            self.wellheader = wellheader

    @property
    def com(self):
        """Gets the com of this WellTestInject.  # noqa: E501


        :return: The com of this WellTestInject.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this WellTestInject.


        :param com: The com of this WellTestInject.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def conccuttings(self):
        """Gets the conccuttings of this WellTestInject.  # noqa: E501


        :return: The conccuttings of this WellTestInject.  # noqa: E501
        :rtype: OneOfWellTestInjectConccuttings
        """
        return self._conccuttings

    @conccuttings.setter
    def conccuttings(self, conccuttings):
        """Sets the conccuttings of this WellTestInject.


        :param conccuttings: The conccuttings of this WellTestInject.  # noqa: E501
        :type: OneOfWellTestInjectConccuttings
        """

        self._conccuttings = conccuttings

    @property
    def datasource(self):
        """Gets the datasource of this WellTestInject.  # noqa: E501


        :return: The datasource of this WellTestInject.  # noqa: E501
        :rtype: str
        """
        return self._datasource

    @datasource.setter
    def datasource(self, datasource):
        """Sets the datasource of this WellTestInject.


        :param datasource: The datasource of this WellTestInject.  # noqa: E501
        :type: str
        """

        self._datasource = datasource

    @property
    def densitygas(self):
        """Gets the densitygas of this WellTestInject.  # noqa: E501


        :return: The densitygas of this WellTestInject.  # noqa: E501
        :rtype: OneOfWellTestInjectDensitygas
        """
        return self._densitygas

    @densitygas.setter
    def densitygas(self, densitygas):
        """Sets the densitygas of this WellTestInject.


        :param densitygas: The densitygas of this WellTestInject.  # noqa: E501
        :type: OneOfWellTestInjectDensitygas
        """

        self._densitygas = densitygas

    @property
    def displayflag(self):
        """Gets the displayflag of this WellTestInject.  # noqa: E501


        :return: The displayflag of this WellTestInject.  # noqa: E501
        :rtype: int
        """
        return self._displayflag

    @displayflag.setter
    def displayflag(self, displayflag):
        """Sets the displayflag of this WellTestInject.


        :param displayflag: The displayflag of this WellTestInject.  # noqa: E501
        :type: int
        """

        self._displayflag = displayflag

    @property
    def dttmstart(self):
        """Gets the dttmstart of this WellTestInject.  # noqa: E501


        :return: The dttmstart of this WellTestInject.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmstart

    @dttmstart.setter
    def dttmstart(self, dttmstart):
        """Sets the dttmstart of this WellTestInject.


        :param dttmstart: The dttmstart of this WellTestInject.  # noqa: E501
        :type: datetime
        """

        self._dttmstart = dttmstart

    @property
    def duration(self):
        """Gets the duration of this WellTestInject.  # noqa: E501


        :return: The duration of this WellTestInject.  # noqa: E501
        :rtype: OneOfWellTestInjectDuration
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this WellTestInject.


        :param duration: The duration of this WellTestInject.  # noqa: E501
        :type: OneOfWellTestInjectDuration
        """

        self._duration = duration

    @property
    def fractionoil(self):
        """Gets the fractionoil of this WellTestInject.  # noqa: E501


        :return: The fractionoil of this WellTestInject.  # noqa: E501
        :rtype: OneOfWellTestInjectFractionoil
        """
        return self._fractionoil

    @fractionoil.setter
    def fractionoil(self, fractionoil):
        """Sets the fractionoil of this WellTestInject.


        :param fractionoil: The fractionoil of this WellTestInject.  # noqa: E501
        :type: OneOfWellTestInjectFractionoil
        """

        self._fractionoil = fractionoil

    @property
    def idrec(self):
        """Gets the idrec of this WellTestInject.  # noqa: E501


        :return: The idrec of this WellTestInject.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this WellTestInject.


        :param idrec: The idrec of this WellTestInject.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecjob(self):
        """Gets the idrecjob of this WellTestInject.  # noqa: E501


        :return: The idrecjob of this WellTestInject.  # noqa: E501
        :rtype: str
        """
        return self._idrecjob

    @idrecjob.setter
    def idrecjob(self, idrecjob):
        """Sets the idrecjob of this WellTestInject.


        :param idrecjob: The idrecjob of this WellTestInject.  # noqa: E501
        :type: str
        """

        self._idrecjob = idrecjob

    @property
    def idrecjobtk(self):
        """Gets the idrecjobtk of this WellTestInject.  # noqa: E501


        :return: The idrecjobtk of this WellTestInject.  # noqa: E501
        :rtype: str
        """
        return self._idrecjobtk

    @idrecjobtk.setter
    def idrecjobtk(self, idrecjobtk):
        """Sets the idrecjobtk of this WellTestInject.


        :param idrecjobtk: The idrecjobtk of this WellTestInject.  # noqa: E501
        :type: str
        """

        self._idrecjobtk = idrecjobtk

    @property
    def idreczonecompletion(self):
        """Gets the idreczonecompletion of this WellTestInject.  # noqa: E501


        :return: The idreczonecompletion of this WellTestInject.  # noqa: E501
        :rtype: str
        """
        return self._idreczonecompletion

    @idreczonecompletion.setter
    def idreczonecompletion(self, idreczonecompletion):
        """Sets the idreczonecompletion of this WellTestInject.


        :param idreczonecompletion: The idreczonecompletion of this WellTestInject.  # noqa: E501
        :type: str
        """

        self._idreczonecompletion = idreczonecompletion

    @property
    def idreczonecompletiontk(self):
        """Gets the idreczonecompletiontk of this WellTestInject.  # noqa: E501


        :return: The idreczonecompletiontk of this WellTestInject.  # noqa: E501
        :rtype: str
        """
        return self._idreczonecompletiontk

    @idreczonecompletiontk.setter
    def idreczonecompletiontk(self, idreczonecompletiontk):
        """Sets the idreczonecompletiontk of this WellTestInject.


        :param idreczonecompletiontk: The idreczonecompletiontk of this WellTestInject.  # noqa: E501
        :type: str
        """

        self._idreczonecompletiontk = idreczonecompletiontk

    @property
    def idwell(self):
        """Gets the idwell of this WellTestInject.  # noqa: E501


        :return: The idwell of this WellTestInject.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this WellTestInject.


        :param idwell: The idwell of this WellTestInject.  # noqa: E501
        :type: str
        """

        self._idwell = idwell

    @property
    def prescas(self):
        """Gets the prescas of this WellTestInject.  # noqa: E501


        :return: The prescas of this WellTestInject.  # noqa: E501
        :rtype: OneOfWellTestInjectPrescas
        """
        return self._prescas

    @prescas.setter
    def prescas(self, prescas):
        """Sets the prescas of this WellTestInject.


        :param prescas: The prescas of this WellTestInject.  # noqa: E501
        :type: OneOfWellTestInjectPrescas
        """

        self._prescas = prescas

    @property
    def presinject(self):
        """Gets the presinject of this WellTestInject.  # noqa: E501


        :return: The presinject of this WellTestInject.  # noqa: E501
        :rtype: OneOfWellTestInjectPresinject
        """
        return self._presinject

    @presinject.setter
    def presinject(self, presinject):
        """Sets the presinject of this WellTestInject.


        :param presinject: The presinject of this WellTestInject.  # noqa: E501
        :type: OneOfWellTestInjectPresinject
        """

        self._presinject = presinject

    @property
    def purpose(self):
        """Gets the purpose of this WellTestInject.  # noqa: E501


        :return: The purpose of this WellTestInject.  # noqa: E501
        :rtype: str
        """
        return self._purpose

    @purpose.setter
    def purpose(self, purpose):
        """Sets the purpose of this WellTestInject.


        :param purpose: The purpose of this WellTestInject.  # noqa: E501
        :type: str
        """

        self._purpose = purpose

    @property
    def qualitysteam(self):
        """Gets the qualitysteam of this WellTestInject.  # noqa: E501


        :return: The qualitysteam of this WellTestInject.  # noqa: E501
        :rtype: OneOfWellTestInjectQualitysteam
        """
        return self._qualitysteam

    @qualitysteam.setter
    def qualitysteam(self, qualitysteam):
        """Sets the qualitysteam of this WellTestInject.


        :param qualitysteam: The qualitysteam of this WellTestInject.  # noqa: E501
        :type: OneOfWellTestInjectQualitysteam
        """

        self._qualitysteam = qualitysteam

    @property
    def rateinjectgas(self):
        """Gets the rateinjectgas of this WellTestInject.  # noqa: E501


        :return: The rateinjectgas of this WellTestInject.  # noqa: E501
        :rtype: OneOfWellTestInjectRateinjectgas
        """
        return self._rateinjectgas

    @rateinjectgas.setter
    def rateinjectgas(self, rateinjectgas):
        """Sets the rateinjectgas of this WellTestInject.


        :param rateinjectgas: The rateinjectgas of this WellTestInject.  # noqa: E501
        :type: OneOfWellTestInjectRateinjectgas
        """

        self._rateinjectgas = rateinjectgas

    @property
    def rateinjectliquid(self):
        """Gets the rateinjectliquid of this WellTestInject.  # noqa: E501


        :return: The rateinjectliquid of this WellTestInject.  # noqa: E501
        :rtype: OneOfWellTestInjectRateinjectliquid
        """
        return self._rateinjectliquid

    @rateinjectliquid.setter
    def rateinjectliquid(self, rateinjectliquid):
        """Sets the rateinjectliquid of this WellTestInject.


        :param rateinjectliquid: The rateinjectliquid of this WellTestInject.  # noqa: E501
        :type: OneOfWellTestInjectRateinjectliquid
        """

        self._rateinjectliquid = rateinjectliquid

    @property
    def salinity(self):
        """Gets the salinity of this WellTestInject.  # noqa: E501


        :return: The salinity of this WellTestInject.  # noqa: E501
        :rtype: OneOfWellTestInjectSalinity
        """
        return self._salinity

    @salinity.setter
    def salinity(self, salinity):
        """Sets the salinity of this WellTestInject.


        :param salinity: The salinity of this WellTestInject.  # noqa: E501
        :type: OneOfWellTestInjectSalinity
        """

        self._salinity = salinity

    @property
    def syscreatedate(self):
        """Gets the syscreatedate of this WellTestInject.  # noqa: E501


        :return: The syscreatedate of this WellTestInject.  # noqa: E501
        :rtype: datetime
        """
        return self._syscreatedate

    @syscreatedate.setter
    def syscreatedate(self, syscreatedate):
        """Sets the syscreatedate of this WellTestInject.


        :param syscreatedate: The syscreatedate of this WellTestInject.  # noqa: E501
        :type: datetime
        """

        self._syscreatedate = syscreatedate

    @property
    def syscreateuser(self):
        """Gets the syscreateuser of this WellTestInject.  # noqa: E501


        :return: The syscreateuser of this WellTestInject.  # noqa: E501
        :rtype: str
        """
        return self._syscreateuser

    @syscreateuser.setter
    def syscreateuser(self, syscreateuser):
        """Sets the syscreateuser of this WellTestInject.


        :param syscreateuser: The syscreateuser of this WellTestInject.  # noqa: E501
        :type: str
        """

        self._syscreateuser = syscreateuser

    @property
    def syslockchildren(self):
        """Gets the syslockchildren of this WellTestInject.  # noqa: E501


        :return: The syslockchildren of this WellTestInject.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildren

    @syslockchildren.setter
    def syslockchildren(self, syslockchildren):
        """Sets the syslockchildren of this WellTestInject.


        :param syslockchildren: The syslockchildren of this WellTestInject.  # noqa: E501
        :type: int
        """

        self._syslockchildren = syslockchildren

    @property
    def syslockchildrenui(self):
        """Gets the syslockchildrenui of this WellTestInject.  # noqa: E501


        :return: The syslockchildrenui of this WellTestInject.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildrenui

    @syslockchildrenui.setter
    def syslockchildrenui(self, syslockchildrenui):
        """Sets the syslockchildrenui of this WellTestInject.


        :param syslockchildrenui: The syslockchildrenui of this WellTestInject.  # noqa: E501
        :type: int
        """

        self._syslockchildrenui = syslockchildrenui

    @property
    def syslockdate(self):
        """Gets the syslockdate of this WellTestInject.  # noqa: E501


        :return: The syslockdate of this WellTestInject.  # noqa: E501
        :rtype: datetime
        """
        return self._syslockdate

    @syslockdate.setter
    def syslockdate(self, syslockdate):
        """Sets the syslockdate of this WellTestInject.


        :param syslockdate: The syslockdate of this WellTestInject.  # noqa: E501
        :type: datetime
        """

        self._syslockdate = syslockdate

    @property
    def syslockme(self):
        """Gets the syslockme of this WellTestInject.  # noqa: E501


        :return: The syslockme of this WellTestInject.  # noqa: E501
        :rtype: int
        """
        return self._syslockme

    @syslockme.setter
    def syslockme(self, syslockme):
        """Sets the syslockme of this WellTestInject.


        :param syslockme: The syslockme of this WellTestInject.  # noqa: E501
        :type: int
        """

        self._syslockme = syslockme

    @property
    def syslockmeui(self):
        """Gets the syslockmeui of this WellTestInject.  # noqa: E501


        :return: The syslockmeui of this WellTestInject.  # noqa: E501
        :rtype: int
        """
        return self._syslockmeui

    @syslockmeui.setter
    def syslockmeui(self, syslockmeui):
        """Sets the syslockmeui of this WellTestInject.


        :param syslockmeui: The syslockmeui of this WellTestInject.  # noqa: E501
        :type: int
        """

        self._syslockmeui = syslockmeui

    @property
    def sysmoddate(self):
        """Gets the sysmoddate of this WellTestInject.  # noqa: E501


        :return: The sysmoddate of this WellTestInject.  # noqa: E501
        :rtype: datetime
        """
        return self._sysmoddate

    @sysmoddate.setter
    def sysmoddate(self, sysmoddate):
        """Sets the sysmoddate of this WellTestInject.


        :param sysmoddate: The sysmoddate of this WellTestInject.  # noqa: E501
        :type: datetime
        """

        self._sysmoddate = sysmoddate

    @property
    def sysmoduser(self):
        """Gets the sysmoduser of this WellTestInject.  # noqa: E501


        :return: The sysmoduser of this WellTestInject.  # noqa: E501
        :rtype: str
        """
        return self._sysmoduser

    @sysmoduser.setter
    def sysmoduser(self, sysmoduser):
        """Sets the sysmoduser of this WellTestInject.


        :param sysmoduser: The sysmoduser of this WellTestInject.  # noqa: E501
        :type: str
        """

        self._sysmoduser = sysmoduser

    @property
    def systag(self):
        """Gets the systag of this WellTestInject.  # noqa: E501


        :return: The systag of this WellTestInject.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this WellTestInject.


        :param systag: The systag of this WellTestInject.  # noqa: E501
        :type: str
        """

        self._systag = systag

    @property
    def tempinject(self):
        """Gets the tempinject of this WellTestInject.  # noqa: E501


        :return: The tempinject of this WellTestInject.  # noqa: E501
        :rtype: OneOfWellTestInjectTempinject
        """
        return self._tempinject

    @tempinject.setter
    def tempinject(self, tempinject):
        """Sets the tempinject of this WellTestInject.


        :param tempinject: The tempinject of this WellTestInject.  # noqa: E501
        :type: OneOfWellTestInjectTempinject
        """

        self._tempinject = tempinject

    @property
    def testedby(self):
        """Gets the testedby of this WellTestInject.  # noqa: E501


        :return: The testedby of this WellTestInject.  # noqa: E501
        :rtype: str
        """
        return self._testedby

    @testedby.setter
    def testedby(self, testedby):
        """Sets the testedby of this WellTestInject.


        :param testedby: The testedby of this WellTestInject.  # noqa: E501
        :type: str
        """

        self._testedby = testedby

    @property
    def typproduct(self):
        """Gets the typproduct of this WellTestInject.  # noqa: E501


        :return: The typproduct of this WellTestInject.  # noqa: E501
        :rtype: str
        """
        return self._typproduct

    @typproduct.setter
    def typproduct(self, typproduct):
        """Sets the typproduct of this WellTestInject.


        :param typproduct: The typproduct of this WellTestInject.  # noqa: E501
        :type: str
        """

        self._typproduct = typproduct

    @property
    def wellheader(self):
        """Gets the wellheader of this WellTestInject.  # noqa: E501


        :return: The wellheader of this WellTestInject.  # noqa: E501
        :rtype: AnyOfWellTestInjectWellheader
        """
        return self._wellheader

    @wellheader.setter
    def wellheader(self, wellheader):
        """Sets the wellheader of this WellTestInject.


        :param wellheader: The wellheader of this WellTestInject.  # noqa: E501
        :type: AnyOfWellTestInjectWellheader
        """

        self._wellheader = wellheader

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WellTestInject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WellTestInject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
