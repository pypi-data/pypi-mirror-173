# coding: utf-8

"""
    OData Service for namespace Default

    This OData service is located at http://localhost  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TubCompMandrelInsert(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'com': 'str',
        'dttmpull': 'datetime',
        'dttmrun': 'datetime',
        'idrec': 'str',
        'idrecparent': 'str',
        'idwell': 'str',
        'latchmaterial': 'str',
        'latchtyp': 'str',
        'make': 'str',
        'model': 'str',
        'orificematerial': 'str',
        'pressurfgaugeclose': 'OneOfTubCompMandrelInsertPressurfgaugeclose',
        'pressurfgaugeopen': 'OneOfTubCompMandrelInsertPressurfgaugeopen',
        'pullreason': 'str',
        'refid': 'str',
        'retrievemeth': 'str',
        'service': 'str',
        'sn': 'str',
        'syscreatedate': 'datetime',
        'syscreateuser': 'str',
        'syslockchildren': 'int',
        'syslockchildrenui': 'int',
        'syslockdate': 'datetime',
        'syslockme': 'int',
        'syslockmeui': 'int',
        'sysmoddate': 'datetime',
        'sysmoduser': 'str',
        'systag': 'str',
        'szod': 'OneOfTubCompMandrelInsertSzod',
        'szport': 'OneOfTubCompMandrelInsertSzport',
        'temp': 'OneOfTubCompMandrelInsertTemp',
        'tropull': 'OneOfTubCompMandrelInsertTropull',
        'trorun': 'OneOfTubCompMandrelInsertTrorun',
        'tub_comp_mandrel': 'AnyOfTubCompMandrelInsertTubCompMandrel',
        'valvematerial': 'str',
        'valvepacking': 'str',
        'valvetyp': 'str'
    }

    attribute_map = {
        'com': 'com',
        'dttmpull': 'dttmpull',
        'dttmrun': 'dttmrun',
        'idrec': 'idrec',
        'idrecparent': 'idrecparent',
        'idwell': 'idwell',
        'latchmaterial': 'latchmaterial',
        'latchtyp': 'latchtyp',
        'make': 'make',
        'model': 'model',
        'orificematerial': 'orificematerial',
        'pressurfgaugeclose': 'pressurfgaugeclose',
        'pressurfgaugeopen': 'pressurfgaugeopen',
        'pullreason': 'pullreason',
        'refid': 'refid',
        'retrievemeth': 'retrievemeth',
        'service': 'service',
        'sn': 'sn',
        'syscreatedate': 'syscreatedate',
        'syscreateuser': 'syscreateuser',
        'syslockchildren': 'syslockchildren',
        'syslockchildrenui': 'syslockchildrenui',
        'syslockdate': 'syslockdate',
        'syslockme': 'syslockme',
        'syslockmeui': 'syslockmeui',
        'sysmoddate': 'sysmoddate',
        'sysmoduser': 'sysmoduser',
        'systag': 'systag',
        'szod': 'szod',
        'szport': 'szport',
        'temp': 'temp',
        'tropull': 'tropull',
        'trorun': 'trorun',
        'tub_comp_mandrel': 'tubCompMandrel',
        'valvematerial': 'valvematerial',
        'valvepacking': 'valvepacking',
        'valvetyp': 'valvetyp'
    }

    def __init__(self, com=None, dttmpull=None, dttmrun=None, idrec=None, idrecparent=None, idwell=None, latchmaterial=None, latchtyp=None, make=None, model=None, orificematerial=None, pressurfgaugeclose=None, pressurfgaugeopen=None, pullreason=None, refid=None, retrievemeth=None, service=None, sn=None, syscreatedate=None, syscreateuser=None, syslockchildren=None, syslockchildrenui=None, syslockdate=None, syslockme=None, syslockmeui=None, sysmoddate=None, sysmoduser=None, systag=None, szod=None, szport=None, temp=None, tropull=None, trorun=None, tub_comp_mandrel=None, valvematerial=None, valvepacking=None, valvetyp=None):  # noqa: E501
        """TubCompMandrelInsert - a model defined in Swagger"""  # noqa: E501
        self._com = None
        self._dttmpull = None
        self._dttmrun = None
        self._idrec = None
        self._idrecparent = None
        self._idwell = None
        self._latchmaterial = None
        self._latchtyp = None
        self._make = None
        self._model = None
        self._orificematerial = None
        self._pressurfgaugeclose = None
        self._pressurfgaugeopen = None
        self._pullreason = None
        self._refid = None
        self._retrievemeth = None
        self._service = None
        self._sn = None
        self._syscreatedate = None
        self._syscreateuser = None
        self._syslockchildren = None
        self._syslockchildrenui = None
        self._syslockdate = None
        self._syslockme = None
        self._syslockmeui = None
        self._sysmoddate = None
        self._sysmoduser = None
        self._systag = None
        self._szod = None
        self._szport = None
        self._temp = None
        self._tropull = None
        self._trorun = None
        self._tub_comp_mandrel = None
        self._valvematerial = None
        self._valvepacking = None
        self._valvetyp = None
        self.discriminator = None
        if com is not None:
            self.com = com
        if dttmpull is not None:
            self.dttmpull = dttmpull
        if dttmrun is not None:
            self.dttmrun = dttmrun
        if idrec is not None:
            self.idrec = idrec
        if idrecparent is not None:
            self.idrecparent = idrecparent
        if idwell is not None:
            self.idwell = idwell
        if latchmaterial is not None:
            self.latchmaterial = latchmaterial
        if latchtyp is not None:
            self.latchtyp = latchtyp
        if make is not None:
            self.make = make
        if model is not None:
            self.model = model
        if orificematerial is not None:
            self.orificematerial = orificematerial
        if pressurfgaugeclose is not None:
            self.pressurfgaugeclose = pressurfgaugeclose
        if pressurfgaugeopen is not None:
            self.pressurfgaugeopen = pressurfgaugeopen
        if pullreason is not None:
            self.pullreason = pullreason
        if refid is not None:
            self.refid = refid
        if retrievemeth is not None:
            self.retrievemeth = retrievemeth
        if service is not None:
            self.service = service
        if sn is not None:
            self.sn = sn
        if syscreatedate is not None:
            self.syscreatedate = syscreatedate
        if syscreateuser is not None:
            self.syscreateuser = syscreateuser
        if syslockchildren is not None:
            self.syslockchildren = syslockchildren
        if syslockchildrenui is not None:
            self.syslockchildrenui = syslockchildrenui
        if syslockdate is not None:
            self.syslockdate = syslockdate
        if syslockme is not None:
            self.syslockme = syslockme
        if syslockmeui is not None:
            self.syslockmeui = syslockmeui
        if sysmoddate is not None:
            self.sysmoddate = sysmoddate
        if sysmoduser is not None:
            self.sysmoduser = sysmoduser
        if systag is not None:
            self.systag = systag
        if szod is not None:
            self.szod = szod
        if szport is not None:
            self.szport = szport
        if temp is not None:
            self.temp = temp
        if tropull is not None:
            self.tropull = tropull
        if trorun is not None:
            self.trorun = trorun
        if tub_comp_mandrel is not None:
            self.tub_comp_mandrel = tub_comp_mandrel
        if valvematerial is not None:
            self.valvematerial = valvematerial
        if valvepacking is not None:
            self.valvepacking = valvepacking
        if valvetyp is not None:
            self.valvetyp = valvetyp

    @property
    def com(self):
        """Gets the com of this TubCompMandrelInsert.  # noqa: E501


        :return: The com of this TubCompMandrelInsert.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this TubCompMandrelInsert.


        :param com: The com of this TubCompMandrelInsert.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def dttmpull(self):
        """Gets the dttmpull of this TubCompMandrelInsert.  # noqa: E501


        :return: The dttmpull of this TubCompMandrelInsert.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmpull

    @dttmpull.setter
    def dttmpull(self, dttmpull):
        """Sets the dttmpull of this TubCompMandrelInsert.


        :param dttmpull: The dttmpull of this TubCompMandrelInsert.  # noqa: E501
        :type: datetime
        """

        self._dttmpull = dttmpull

    @property
    def dttmrun(self):
        """Gets the dttmrun of this TubCompMandrelInsert.  # noqa: E501


        :return: The dttmrun of this TubCompMandrelInsert.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmrun

    @dttmrun.setter
    def dttmrun(self, dttmrun):
        """Sets the dttmrun of this TubCompMandrelInsert.


        :param dttmrun: The dttmrun of this TubCompMandrelInsert.  # noqa: E501
        :type: datetime
        """

        self._dttmrun = dttmrun

    @property
    def idrec(self):
        """Gets the idrec of this TubCompMandrelInsert.  # noqa: E501


        :return: The idrec of this TubCompMandrelInsert.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this TubCompMandrelInsert.


        :param idrec: The idrec of this TubCompMandrelInsert.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecparent(self):
        """Gets the idrecparent of this TubCompMandrelInsert.  # noqa: E501


        :return: The idrecparent of this TubCompMandrelInsert.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this TubCompMandrelInsert.


        :param idrecparent: The idrecparent of this TubCompMandrelInsert.  # noqa: E501
        :type: str
        """

        self._idrecparent = idrecparent

    @property
    def idwell(self):
        """Gets the idwell of this TubCompMandrelInsert.  # noqa: E501


        :return: The idwell of this TubCompMandrelInsert.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this TubCompMandrelInsert.


        :param idwell: The idwell of this TubCompMandrelInsert.  # noqa: E501
        :type: str
        """

        self._idwell = idwell

    @property
    def latchmaterial(self):
        """Gets the latchmaterial of this TubCompMandrelInsert.  # noqa: E501


        :return: The latchmaterial of this TubCompMandrelInsert.  # noqa: E501
        :rtype: str
        """
        return self._latchmaterial

    @latchmaterial.setter
    def latchmaterial(self, latchmaterial):
        """Sets the latchmaterial of this TubCompMandrelInsert.


        :param latchmaterial: The latchmaterial of this TubCompMandrelInsert.  # noqa: E501
        :type: str
        """

        self._latchmaterial = latchmaterial

    @property
    def latchtyp(self):
        """Gets the latchtyp of this TubCompMandrelInsert.  # noqa: E501


        :return: The latchtyp of this TubCompMandrelInsert.  # noqa: E501
        :rtype: str
        """
        return self._latchtyp

    @latchtyp.setter
    def latchtyp(self, latchtyp):
        """Sets the latchtyp of this TubCompMandrelInsert.


        :param latchtyp: The latchtyp of this TubCompMandrelInsert.  # noqa: E501
        :type: str
        """

        self._latchtyp = latchtyp

    @property
    def make(self):
        """Gets the make of this TubCompMandrelInsert.  # noqa: E501


        :return: The make of this TubCompMandrelInsert.  # noqa: E501
        :rtype: str
        """
        return self._make

    @make.setter
    def make(self, make):
        """Sets the make of this TubCompMandrelInsert.


        :param make: The make of this TubCompMandrelInsert.  # noqa: E501
        :type: str
        """

        self._make = make

    @property
    def model(self):
        """Gets the model of this TubCompMandrelInsert.  # noqa: E501


        :return: The model of this TubCompMandrelInsert.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this TubCompMandrelInsert.


        :param model: The model of this TubCompMandrelInsert.  # noqa: E501
        :type: str
        """

        self._model = model

    @property
    def orificematerial(self):
        """Gets the orificematerial of this TubCompMandrelInsert.  # noqa: E501


        :return: The orificematerial of this TubCompMandrelInsert.  # noqa: E501
        :rtype: str
        """
        return self._orificematerial

    @orificematerial.setter
    def orificematerial(self, orificematerial):
        """Sets the orificematerial of this TubCompMandrelInsert.


        :param orificematerial: The orificematerial of this TubCompMandrelInsert.  # noqa: E501
        :type: str
        """

        self._orificematerial = orificematerial

    @property
    def pressurfgaugeclose(self):
        """Gets the pressurfgaugeclose of this TubCompMandrelInsert.  # noqa: E501


        :return: The pressurfgaugeclose of this TubCompMandrelInsert.  # noqa: E501
        :rtype: OneOfTubCompMandrelInsertPressurfgaugeclose
        """
        return self._pressurfgaugeclose

    @pressurfgaugeclose.setter
    def pressurfgaugeclose(self, pressurfgaugeclose):
        """Sets the pressurfgaugeclose of this TubCompMandrelInsert.


        :param pressurfgaugeclose: The pressurfgaugeclose of this TubCompMandrelInsert.  # noqa: E501
        :type: OneOfTubCompMandrelInsertPressurfgaugeclose
        """

        self._pressurfgaugeclose = pressurfgaugeclose

    @property
    def pressurfgaugeopen(self):
        """Gets the pressurfgaugeopen of this TubCompMandrelInsert.  # noqa: E501


        :return: The pressurfgaugeopen of this TubCompMandrelInsert.  # noqa: E501
        :rtype: OneOfTubCompMandrelInsertPressurfgaugeopen
        """
        return self._pressurfgaugeopen

    @pressurfgaugeopen.setter
    def pressurfgaugeopen(self, pressurfgaugeopen):
        """Sets the pressurfgaugeopen of this TubCompMandrelInsert.


        :param pressurfgaugeopen: The pressurfgaugeopen of this TubCompMandrelInsert.  # noqa: E501
        :type: OneOfTubCompMandrelInsertPressurfgaugeopen
        """

        self._pressurfgaugeopen = pressurfgaugeopen

    @property
    def pullreason(self):
        """Gets the pullreason of this TubCompMandrelInsert.  # noqa: E501


        :return: The pullreason of this TubCompMandrelInsert.  # noqa: E501
        :rtype: str
        """
        return self._pullreason

    @pullreason.setter
    def pullreason(self, pullreason):
        """Sets the pullreason of this TubCompMandrelInsert.


        :param pullreason: The pullreason of this TubCompMandrelInsert.  # noqa: E501
        :type: str
        """

        self._pullreason = pullreason

    @property
    def refid(self):
        """Gets the refid of this TubCompMandrelInsert.  # noqa: E501


        :return: The refid of this TubCompMandrelInsert.  # noqa: E501
        :rtype: str
        """
        return self._refid

    @refid.setter
    def refid(self, refid):
        """Sets the refid of this TubCompMandrelInsert.


        :param refid: The refid of this TubCompMandrelInsert.  # noqa: E501
        :type: str
        """

        self._refid = refid

    @property
    def retrievemeth(self):
        """Gets the retrievemeth of this TubCompMandrelInsert.  # noqa: E501


        :return: The retrievemeth of this TubCompMandrelInsert.  # noqa: E501
        :rtype: str
        """
        return self._retrievemeth

    @retrievemeth.setter
    def retrievemeth(self, retrievemeth):
        """Sets the retrievemeth of this TubCompMandrelInsert.


        :param retrievemeth: The retrievemeth of this TubCompMandrelInsert.  # noqa: E501
        :type: str
        """

        self._retrievemeth = retrievemeth

    @property
    def service(self):
        """Gets the service of this TubCompMandrelInsert.  # noqa: E501


        :return: The service of this TubCompMandrelInsert.  # noqa: E501
        :rtype: str
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this TubCompMandrelInsert.


        :param service: The service of this TubCompMandrelInsert.  # noqa: E501
        :type: str
        """

        self._service = service

    @property
    def sn(self):
        """Gets the sn of this TubCompMandrelInsert.  # noqa: E501


        :return: The sn of this TubCompMandrelInsert.  # noqa: E501
        :rtype: str
        """
        return self._sn

    @sn.setter
    def sn(self, sn):
        """Sets the sn of this TubCompMandrelInsert.


        :param sn: The sn of this TubCompMandrelInsert.  # noqa: E501
        :type: str
        """

        self._sn = sn

    @property
    def syscreatedate(self):
        """Gets the syscreatedate of this TubCompMandrelInsert.  # noqa: E501


        :return: The syscreatedate of this TubCompMandrelInsert.  # noqa: E501
        :rtype: datetime
        """
        return self._syscreatedate

    @syscreatedate.setter
    def syscreatedate(self, syscreatedate):
        """Sets the syscreatedate of this TubCompMandrelInsert.


        :param syscreatedate: The syscreatedate of this TubCompMandrelInsert.  # noqa: E501
        :type: datetime
        """

        self._syscreatedate = syscreatedate

    @property
    def syscreateuser(self):
        """Gets the syscreateuser of this TubCompMandrelInsert.  # noqa: E501


        :return: The syscreateuser of this TubCompMandrelInsert.  # noqa: E501
        :rtype: str
        """
        return self._syscreateuser

    @syscreateuser.setter
    def syscreateuser(self, syscreateuser):
        """Sets the syscreateuser of this TubCompMandrelInsert.


        :param syscreateuser: The syscreateuser of this TubCompMandrelInsert.  # noqa: E501
        :type: str
        """

        self._syscreateuser = syscreateuser

    @property
    def syslockchildren(self):
        """Gets the syslockchildren of this TubCompMandrelInsert.  # noqa: E501


        :return: The syslockchildren of this TubCompMandrelInsert.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildren

    @syslockchildren.setter
    def syslockchildren(self, syslockchildren):
        """Sets the syslockchildren of this TubCompMandrelInsert.


        :param syslockchildren: The syslockchildren of this TubCompMandrelInsert.  # noqa: E501
        :type: int
        """

        self._syslockchildren = syslockchildren

    @property
    def syslockchildrenui(self):
        """Gets the syslockchildrenui of this TubCompMandrelInsert.  # noqa: E501


        :return: The syslockchildrenui of this TubCompMandrelInsert.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildrenui

    @syslockchildrenui.setter
    def syslockchildrenui(self, syslockchildrenui):
        """Sets the syslockchildrenui of this TubCompMandrelInsert.


        :param syslockchildrenui: The syslockchildrenui of this TubCompMandrelInsert.  # noqa: E501
        :type: int
        """

        self._syslockchildrenui = syslockchildrenui

    @property
    def syslockdate(self):
        """Gets the syslockdate of this TubCompMandrelInsert.  # noqa: E501


        :return: The syslockdate of this TubCompMandrelInsert.  # noqa: E501
        :rtype: datetime
        """
        return self._syslockdate

    @syslockdate.setter
    def syslockdate(self, syslockdate):
        """Sets the syslockdate of this TubCompMandrelInsert.


        :param syslockdate: The syslockdate of this TubCompMandrelInsert.  # noqa: E501
        :type: datetime
        """

        self._syslockdate = syslockdate

    @property
    def syslockme(self):
        """Gets the syslockme of this TubCompMandrelInsert.  # noqa: E501


        :return: The syslockme of this TubCompMandrelInsert.  # noqa: E501
        :rtype: int
        """
        return self._syslockme

    @syslockme.setter
    def syslockme(self, syslockme):
        """Sets the syslockme of this TubCompMandrelInsert.


        :param syslockme: The syslockme of this TubCompMandrelInsert.  # noqa: E501
        :type: int
        """

        self._syslockme = syslockme

    @property
    def syslockmeui(self):
        """Gets the syslockmeui of this TubCompMandrelInsert.  # noqa: E501


        :return: The syslockmeui of this TubCompMandrelInsert.  # noqa: E501
        :rtype: int
        """
        return self._syslockmeui

    @syslockmeui.setter
    def syslockmeui(self, syslockmeui):
        """Sets the syslockmeui of this TubCompMandrelInsert.


        :param syslockmeui: The syslockmeui of this TubCompMandrelInsert.  # noqa: E501
        :type: int
        """

        self._syslockmeui = syslockmeui

    @property
    def sysmoddate(self):
        """Gets the sysmoddate of this TubCompMandrelInsert.  # noqa: E501


        :return: The sysmoddate of this TubCompMandrelInsert.  # noqa: E501
        :rtype: datetime
        """
        return self._sysmoddate

    @sysmoddate.setter
    def sysmoddate(self, sysmoddate):
        """Sets the sysmoddate of this TubCompMandrelInsert.


        :param sysmoddate: The sysmoddate of this TubCompMandrelInsert.  # noqa: E501
        :type: datetime
        """

        self._sysmoddate = sysmoddate

    @property
    def sysmoduser(self):
        """Gets the sysmoduser of this TubCompMandrelInsert.  # noqa: E501


        :return: The sysmoduser of this TubCompMandrelInsert.  # noqa: E501
        :rtype: str
        """
        return self._sysmoduser

    @sysmoduser.setter
    def sysmoduser(self, sysmoduser):
        """Sets the sysmoduser of this TubCompMandrelInsert.


        :param sysmoduser: The sysmoduser of this TubCompMandrelInsert.  # noqa: E501
        :type: str
        """

        self._sysmoduser = sysmoduser

    @property
    def systag(self):
        """Gets the systag of this TubCompMandrelInsert.  # noqa: E501


        :return: The systag of this TubCompMandrelInsert.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this TubCompMandrelInsert.


        :param systag: The systag of this TubCompMandrelInsert.  # noqa: E501
        :type: str
        """

        self._systag = systag

    @property
    def szod(self):
        """Gets the szod of this TubCompMandrelInsert.  # noqa: E501


        :return: The szod of this TubCompMandrelInsert.  # noqa: E501
        :rtype: OneOfTubCompMandrelInsertSzod
        """
        return self._szod

    @szod.setter
    def szod(self, szod):
        """Sets the szod of this TubCompMandrelInsert.


        :param szod: The szod of this TubCompMandrelInsert.  # noqa: E501
        :type: OneOfTubCompMandrelInsertSzod
        """

        self._szod = szod

    @property
    def szport(self):
        """Gets the szport of this TubCompMandrelInsert.  # noqa: E501


        :return: The szport of this TubCompMandrelInsert.  # noqa: E501
        :rtype: OneOfTubCompMandrelInsertSzport
        """
        return self._szport

    @szport.setter
    def szport(self, szport):
        """Sets the szport of this TubCompMandrelInsert.


        :param szport: The szport of this TubCompMandrelInsert.  # noqa: E501
        :type: OneOfTubCompMandrelInsertSzport
        """

        self._szport = szport

    @property
    def temp(self):
        """Gets the temp of this TubCompMandrelInsert.  # noqa: E501


        :return: The temp of this TubCompMandrelInsert.  # noqa: E501
        :rtype: OneOfTubCompMandrelInsertTemp
        """
        return self._temp

    @temp.setter
    def temp(self, temp):
        """Sets the temp of this TubCompMandrelInsert.


        :param temp: The temp of this TubCompMandrelInsert.  # noqa: E501
        :type: OneOfTubCompMandrelInsertTemp
        """

        self._temp = temp

    @property
    def tropull(self):
        """Gets the tropull of this TubCompMandrelInsert.  # noqa: E501


        :return: The tropull of this TubCompMandrelInsert.  # noqa: E501
        :rtype: OneOfTubCompMandrelInsertTropull
        """
        return self._tropull

    @tropull.setter
    def tropull(self, tropull):
        """Sets the tropull of this TubCompMandrelInsert.


        :param tropull: The tropull of this TubCompMandrelInsert.  # noqa: E501
        :type: OneOfTubCompMandrelInsertTropull
        """

        self._tropull = tropull

    @property
    def trorun(self):
        """Gets the trorun of this TubCompMandrelInsert.  # noqa: E501


        :return: The trorun of this TubCompMandrelInsert.  # noqa: E501
        :rtype: OneOfTubCompMandrelInsertTrorun
        """
        return self._trorun

    @trorun.setter
    def trorun(self, trorun):
        """Sets the trorun of this TubCompMandrelInsert.


        :param trorun: The trorun of this TubCompMandrelInsert.  # noqa: E501
        :type: OneOfTubCompMandrelInsertTrorun
        """

        self._trorun = trorun

    @property
    def tub_comp_mandrel(self):
        """Gets the tub_comp_mandrel of this TubCompMandrelInsert.  # noqa: E501


        :return: The tub_comp_mandrel of this TubCompMandrelInsert.  # noqa: E501
        :rtype: AnyOfTubCompMandrelInsertTubCompMandrel
        """
        return self._tub_comp_mandrel

    @tub_comp_mandrel.setter
    def tub_comp_mandrel(self, tub_comp_mandrel):
        """Sets the tub_comp_mandrel of this TubCompMandrelInsert.


        :param tub_comp_mandrel: The tub_comp_mandrel of this TubCompMandrelInsert.  # noqa: E501
        :type: AnyOfTubCompMandrelInsertTubCompMandrel
        """

        self._tub_comp_mandrel = tub_comp_mandrel

    @property
    def valvematerial(self):
        """Gets the valvematerial of this TubCompMandrelInsert.  # noqa: E501


        :return: The valvematerial of this TubCompMandrelInsert.  # noqa: E501
        :rtype: str
        """
        return self._valvematerial

    @valvematerial.setter
    def valvematerial(self, valvematerial):
        """Sets the valvematerial of this TubCompMandrelInsert.


        :param valvematerial: The valvematerial of this TubCompMandrelInsert.  # noqa: E501
        :type: str
        """

        self._valvematerial = valvematerial

    @property
    def valvepacking(self):
        """Gets the valvepacking of this TubCompMandrelInsert.  # noqa: E501


        :return: The valvepacking of this TubCompMandrelInsert.  # noqa: E501
        :rtype: str
        """
        return self._valvepacking

    @valvepacking.setter
    def valvepacking(self, valvepacking):
        """Sets the valvepacking of this TubCompMandrelInsert.


        :param valvepacking: The valvepacking of this TubCompMandrelInsert.  # noqa: E501
        :type: str
        """

        self._valvepacking = valvepacking

    @property
    def valvetyp(self):
        """Gets the valvetyp of this TubCompMandrelInsert.  # noqa: E501


        :return: The valvetyp of this TubCompMandrelInsert.  # noqa: E501
        :rtype: str
        """
        return self._valvetyp

    @valvetyp.setter
    def valvetyp(self, valvetyp):
        """Sets the valvetyp of this TubCompMandrelInsert.


        :param valvetyp: The valvetyp of this TubCompMandrelInsert.  # noqa: E501
        :type: str
        """

        self._valvetyp = valvetyp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TubCompMandrelInsert, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TubCompMandrelInsert):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
