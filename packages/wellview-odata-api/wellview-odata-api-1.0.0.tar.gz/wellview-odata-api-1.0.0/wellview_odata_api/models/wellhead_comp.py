# coding: utf-8

"""
    OData Service for namespace Default

    This OData service is located at http://localhost  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WellheadComp(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'com': 'str',
        'connbtmsz': 'OneOfWellheadCompConnbtmsz',
        'connbtmtyp': 'str',
        'conntopsz': 'OneOfWellheadCompConntopsz',
        'conntoptyp': 'str',
        'cost': 'OneOfWellheadCompCost',
        'costunitlabel': 'str',
        'des': 'str',
        'dttmmanufacture': 'datetime',
        'iconname': 'str',
        'idrec': 'str',
        'idrecparent': 'str',
        'idrecstring': 'str',
        'idrecstringtk': 'str',
        'idwell': 'str',
        'length': 'OneOfWellheadCompLength',
        'make': 'str',
        'maxpres': 'OneOfWellheadCompMaxpres',
        'minbore': 'OneOfWellheadCompMinbore',
        'model': 'str',
        'packofftype': 'str',
        'productspeclevel': 'str',
        'refid': 'str',
        'sect': 'str',
        'service': 'str',
        'sn': 'str',
        'syscreatedate': 'datetime',
        'syscreateuser': 'str',
        'syslockchildren': 'int',
        'syslockchildrenui': 'int',
        'syslockdate': 'datetime',
        'syslockme': 'int',
        'syslockmeui': 'int',
        'sysmoddate': 'datetime',
        'sysmoduser': 'str',
        'sysseq': 'int',
        'systag': 'str',
        'szidnom': 'OneOfWellheadCompSzidnom',
        'szodnom': 'OneOfWellheadCompSzodnom',
        'typ1': 'str',
        'typ2': 'str',
        'usertxt': 'str',
        'wellhead': 'AnyOfWellheadCompWellhead',
        'wellhead_comp_accs': 'list[WellheadCompAcc]',
        'wellhead_comp_subs': 'list[WellheadCompSub]',
        'workpres': 'OneOfWellheadCompWorkpres',
        'workpresbtm': 'OneOfWellheadCompWorkpresbtm',
        'workprestop': 'OneOfWellheadCompWorkprestop'
    }

    attribute_map = {
        'com': 'com',
        'connbtmsz': 'connbtmsz',
        'connbtmtyp': 'connbtmtyp',
        'conntopsz': 'conntopsz',
        'conntoptyp': 'conntoptyp',
        'cost': 'cost',
        'costunitlabel': 'costunitlabel',
        'des': 'des',
        'dttmmanufacture': 'dttmmanufacture',
        'iconname': 'iconname',
        'idrec': 'idrec',
        'idrecparent': 'idrecparent',
        'idrecstring': 'idrecstring',
        'idrecstringtk': 'idrecstringtk',
        'idwell': 'idwell',
        'length': 'length',
        'make': 'make',
        'maxpres': 'maxpres',
        'minbore': 'minbore',
        'model': 'model',
        'packofftype': 'packofftype',
        'productspeclevel': 'productspeclevel',
        'refid': 'refid',
        'sect': 'sect',
        'service': 'service',
        'sn': 'sn',
        'syscreatedate': 'syscreatedate',
        'syscreateuser': 'syscreateuser',
        'syslockchildren': 'syslockchildren',
        'syslockchildrenui': 'syslockchildrenui',
        'syslockdate': 'syslockdate',
        'syslockme': 'syslockme',
        'syslockmeui': 'syslockmeui',
        'sysmoddate': 'sysmoddate',
        'sysmoduser': 'sysmoduser',
        'sysseq': 'sysseq',
        'systag': 'systag',
        'szidnom': 'szidnom',
        'szodnom': 'szodnom',
        'typ1': 'typ1',
        'typ2': 'typ2',
        'usertxt': 'usertxt',
        'wellhead': 'wellhead',
        'wellhead_comp_accs': 'wellheadCompAccs',
        'wellhead_comp_subs': 'wellheadCompSubs',
        'workpres': 'workpres',
        'workpresbtm': 'workpresbtm',
        'workprestop': 'workprestop'
    }

    def __init__(self, com=None, connbtmsz=None, connbtmtyp=None, conntopsz=None, conntoptyp=None, cost=None, costunitlabel=None, des=None, dttmmanufacture=None, iconname=None, idrec=None, idrecparent=None, idrecstring=None, idrecstringtk=None, idwell=None, length=None, make=None, maxpres=None, minbore=None, model=None, packofftype=None, productspeclevel=None, refid=None, sect=None, service=None, sn=None, syscreatedate=None, syscreateuser=None, syslockchildren=None, syslockchildrenui=None, syslockdate=None, syslockme=None, syslockmeui=None, sysmoddate=None, sysmoduser=None, sysseq=None, systag=None, szidnom=None, szodnom=None, typ1=None, typ2=None, usertxt=None, wellhead=None, wellhead_comp_accs=None, wellhead_comp_subs=None, workpres=None, workpresbtm=None, workprestop=None):  # noqa: E501
        """WellheadComp - a model defined in Swagger"""  # noqa: E501
        self._com = None
        self._connbtmsz = None
        self._connbtmtyp = None
        self._conntopsz = None
        self._conntoptyp = None
        self._cost = None
        self._costunitlabel = None
        self._des = None
        self._dttmmanufacture = None
        self._iconname = None
        self._idrec = None
        self._idrecparent = None
        self._idrecstring = None
        self._idrecstringtk = None
        self._idwell = None
        self._length = None
        self._make = None
        self._maxpres = None
        self._minbore = None
        self._model = None
        self._packofftype = None
        self._productspeclevel = None
        self._refid = None
        self._sect = None
        self._service = None
        self._sn = None
        self._syscreatedate = None
        self._syscreateuser = None
        self._syslockchildren = None
        self._syslockchildrenui = None
        self._syslockdate = None
        self._syslockme = None
        self._syslockmeui = None
        self._sysmoddate = None
        self._sysmoduser = None
        self._sysseq = None
        self._systag = None
        self._szidnom = None
        self._szodnom = None
        self._typ1 = None
        self._typ2 = None
        self._usertxt = None
        self._wellhead = None
        self._wellhead_comp_accs = None
        self._wellhead_comp_subs = None
        self._workpres = None
        self._workpresbtm = None
        self._workprestop = None
        self.discriminator = None
        if com is not None:
            self.com = com
        if connbtmsz is not None:
            self.connbtmsz = connbtmsz
        if connbtmtyp is not None:
            self.connbtmtyp = connbtmtyp
        if conntopsz is not None:
            self.conntopsz = conntopsz
        if conntoptyp is not None:
            self.conntoptyp = conntoptyp
        if cost is not None:
            self.cost = cost
        if costunitlabel is not None:
            self.costunitlabel = costunitlabel
        if des is not None:
            self.des = des
        if dttmmanufacture is not None:
            self.dttmmanufacture = dttmmanufacture
        if iconname is not None:
            self.iconname = iconname
        if idrec is not None:
            self.idrec = idrec
        if idrecparent is not None:
            self.idrecparent = idrecparent
        if idrecstring is not None:
            self.idrecstring = idrecstring
        if idrecstringtk is not None:
            self.idrecstringtk = idrecstringtk
        if idwell is not None:
            self.idwell = idwell
        if length is not None:
            self.length = length
        if make is not None:
            self.make = make
        if maxpres is not None:
            self.maxpres = maxpres
        if minbore is not None:
            self.minbore = minbore
        if model is not None:
            self.model = model
        if packofftype is not None:
            self.packofftype = packofftype
        if productspeclevel is not None:
            self.productspeclevel = productspeclevel
        if refid is not None:
            self.refid = refid
        if sect is not None:
            self.sect = sect
        if service is not None:
            self.service = service
        if sn is not None:
            self.sn = sn
        if syscreatedate is not None:
            self.syscreatedate = syscreatedate
        if syscreateuser is not None:
            self.syscreateuser = syscreateuser
        if syslockchildren is not None:
            self.syslockchildren = syslockchildren
        if syslockchildrenui is not None:
            self.syslockchildrenui = syslockchildrenui
        if syslockdate is not None:
            self.syslockdate = syslockdate
        if syslockme is not None:
            self.syslockme = syslockme
        if syslockmeui is not None:
            self.syslockmeui = syslockmeui
        if sysmoddate is not None:
            self.sysmoddate = sysmoddate
        if sysmoduser is not None:
            self.sysmoduser = sysmoduser
        if sysseq is not None:
            self.sysseq = sysseq
        if systag is not None:
            self.systag = systag
        if szidnom is not None:
            self.szidnom = szidnom
        if szodnom is not None:
            self.szodnom = szodnom
        if typ1 is not None:
            self.typ1 = typ1
        if typ2 is not None:
            self.typ2 = typ2
        if usertxt is not None:
            self.usertxt = usertxt
        if wellhead is not None:
            self.wellhead = wellhead
        if wellhead_comp_accs is not None:
            self.wellhead_comp_accs = wellhead_comp_accs
        if wellhead_comp_subs is not None:
            self.wellhead_comp_subs = wellhead_comp_subs
        if workpres is not None:
            self.workpres = workpres
        if workpresbtm is not None:
            self.workpresbtm = workpresbtm
        if workprestop is not None:
            self.workprestop = workprestop

    @property
    def com(self):
        """Gets the com of this WellheadComp.  # noqa: E501


        :return: The com of this WellheadComp.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this WellheadComp.


        :param com: The com of this WellheadComp.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def connbtmsz(self):
        """Gets the connbtmsz of this WellheadComp.  # noqa: E501


        :return: The connbtmsz of this WellheadComp.  # noqa: E501
        :rtype: OneOfWellheadCompConnbtmsz
        """
        return self._connbtmsz

    @connbtmsz.setter
    def connbtmsz(self, connbtmsz):
        """Sets the connbtmsz of this WellheadComp.


        :param connbtmsz: The connbtmsz of this WellheadComp.  # noqa: E501
        :type: OneOfWellheadCompConnbtmsz
        """

        self._connbtmsz = connbtmsz

    @property
    def connbtmtyp(self):
        """Gets the connbtmtyp of this WellheadComp.  # noqa: E501


        :return: The connbtmtyp of this WellheadComp.  # noqa: E501
        :rtype: str
        """
        return self._connbtmtyp

    @connbtmtyp.setter
    def connbtmtyp(self, connbtmtyp):
        """Sets the connbtmtyp of this WellheadComp.


        :param connbtmtyp: The connbtmtyp of this WellheadComp.  # noqa: E501
        :type: str
        """

        self._connbtmtyp = connbtmtyp

    @property
    def conntopsz(self):
        """Gets the conntopsz of this WellheadComp.  # noqa: E501


        :return: The conntopsz of this WellheadComp.  # noqa: E501
        :rtype: OneOfWellheadCompConntopsz
        """
        return self._conntopsz

    @conntopsz.setter
    def conntopsz(self, conntopsz):
        """Sets the conntopsz of this WellheadComp.


        :param conntopsz: The conntopsz of this WellheadComp.  # noqa: E501
        :type: OneOfWellheadCompConntopsz
        """

        self._conntopsz = conntopsz

    @property
    def conntoptyp(self):
        """Gets the conntoptyp of this WellheadComp.  # noqa: E501


        :return: The conntoptyp of this WellheadComp.  # noqa: E501
        :rtype: str
        """
        return self._conntoptyp

    @conntoptyp.setter
    def conntoptyp(self, conntoptyp):
        """Sets the conntoptyp of this WellheadComp.


        :param conntoptyp: The conntoptyp of this WellheadComp.  # noqa: E501
        :type: str
        """

        self._conntoptyp = conntoptyp

    @property
    def cost(self):
        """Gets the cost of this WellheadComp.  # noqa: E501


        :return: The cost of this WellheadComp.  # noqa: E501
        :rtype: OneOfWellheadCompCost
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this WellheadComp.


        :param cost: The cost of this WellheadComp.  # noqa: E501
        :type: OneOfWellheadCompCost
        """

        self._cost = cost

    @property
    def costunitlabel(self):
        """Gets the costunitlabel of this WellheadComp.  # noqa: E501


        :return: The costunitlabel of this WellheadComp.  # noqa: E501
        :rtype: str
        """
        return self._costunitlabel

    @costunitlabel.setter
    def costunitlabel(self, costunitlabel):
        """Sets the costunitlabel of this WellheadComp.


        :param costunitlabel: The costunitlabel of this WellheadComp.  # noqa: E501
        :type: str
        """

        self._costunitlabel = costunitlabel

    @property
    def des(self):
        """Gets the des of this WellheadComp.  # noqa: E501


        :return: The des of this WellheadComp.  # noqa: E501
        :rtype: str
        """
        return self._des

    @des.setter
    def des(self, des):
        """Sets the des of this WellheadComp.


        :param des: The des of this WellheadComp.  # noqa: E501
        :type: str
        """

        self._des = des

    @property
    def dttmmanufacture(self):
        """Gets the dttmmanufacture of this WellheadComp.  # noqa: E501


        :return: The dttmmanufacture of this WellheadComp.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmmanufacture

    @dttmmanufacture.setter
    def dttmmanufacture(self, dttmmanufacture):
        """Sets the dttmmanufacture of this WellheadComp.


        :param dttmmanufacture: The dttmmanufacture of this WellheadComp.  # noqa: E501
        :type: datetime
        """

        self._dttmmanufacture = dttmmanufacture

    @property
    def iconname(self):
        """Gets the iconname of this WellheadComp.  # noqa: E501


        :return: The iconname of this WellheadComp.  # noqa: E501
        :rtype: str
        """
        return self._iconname

    @iconname.setter
    def iconname(self, iconname):
        """Sets the iconname of this WellheadComp.


        :param iconname: The iconname of this WellheadComp.  # noqa: E501
        :type: str
        """

        self._iconname = iconname

    @property
    def idrec(self):
        """Gets the idrec of this WellheadComp.  # noqa: E501


        :return: The idrec of this WellheadComp.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this WellheadComp.


        :param idrec: The idrec of this WellheadComp.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecparent(self):
        """Gets the idrecparent of this WellheadComp.  # noqa: E501


        :return: The idrecparent of this WellheadComp.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this WellheadComp.


        :param idrecparent: The idrecparent of this WellheadComp.  # noqa: E501
        :type: str
        """

        self._idrecparent = idrecparent

    @property
    def idrecstring(self):
        """Gets the idrecstring of this WellheadComp.  # noqa: E501


        :return: The idrecstring of this WellheadComp.  # noqa: E501
        :rtype: str
        """
        return self._idrecstring

    @idrecstring.setter
    def idrecstring(self, idrecstring):
        """Sets the idrecstring of this WellheadComp.


        :param idrecstring: The idrecstring of this WellheadComp.  # noqa: E501
        :type: str
        """

        self._idrecstring = idrecstring

    @property
    def idrecstringtk(self):
        """Gets the idrecstringtk of this WellheadComp.  # noqa: E501


        :return: The idrecstringtk of this WellheadComp.  # noqa: E501
        :rtype: str
        """
        return self._idrecstringtk

    @idrecstringtk.setter
    def idrecstringtk(self, idrecstringtk):
        """Sets the idrecstringtk of this WellheadComp.


        :param idrecstringtk: The idrecstringtk of this WellheadComp.  # noqa: E501
        :type: str
        """

        self._idrecstringtk = idrecstringtk

    @property
    def idwell(self):
        """Gets the idwell of this WellheadComp.  # noqa: E501


        :return: The idwell of this WellheadComp.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this WellheadComp.


        :param idwell: The idwell of this WellheadComp.  # noqa: E501
        :type: str
        """

        self._idwell = idwell

    @property
    def length(self):
        """Gets the length of this WellheadComp.  # noqa: E501


        :return: The length of this WellheadComp.  # noqa: E501
        :rtype: OneOfWellheadCompLength
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this WellheadComp.


        :param length: The length of this WellheadComp.  # noqa: E501
        :type: OneOfWellheadCompLength
        """

        self._length = length

    @property
    def make(self):
        """Gets the make of this WellheadComp.  # noqa: E501


        :return: The make of this WellheadComp.  # noqa: E501
        :rtype: str
        """
        return self._make

    @make.setter
    def make(self, make):
        """Sets the make of this WellheadComp.


        :param make: The make of this WellheadComp.  # noqa: E501
        :type: str
        """

        self._make = make

    @property
    def maxpres(self):
        """Gets the maxpres of this WellheadComp.  # noqa: E501


        :return: The maxpres of this WellheadComp.  # noqa: E501
        :rtype: OneOfWellheadCompMaxpres
        """
        return self._maxpres

    @maxpres.setter
    def maxpres(self, maxpres):
        """Sets the maxpres of this WellheadComp.


        :param maxpres: The maxpres of this WellheadComp.  # noqa: E501
        :type: OneOfWellheadCompMaxpres
        """

        self._maxpres = maxpres

    @property
    def minbore(self):
        """Gets the minbore of this WellheadComp.  # noqa: E501


        :return: The minbore of this WellheadComp.  # noqa: E501
        :rtype: OneOfWellheadCompMinbore
        """
        return self._minbore

    @minbore.setter
    def minbore(self, minbore):
        """Sets the minbore of this WellheadComp.


        :param minbore: The minbore of this WellheadComp.  # noqa: E501
        :type: OneOfWellheadCompMinbore
        """

        self._minbore = minbore

    @property
    def model(self):
        """Gets the model of this WellheadComp.  # noqa: E501


        :return: The model of this WellheadComp.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this WellheadComp.


        :param model: The model of this WellheadComp.  # noqa: E501
        :type: str
        """

        self._model = model

    @property
    def packofftype(self):
        """Gets the packofftype of this WellheadComp.  # noqa: E501


        :return: The packofftype of this WellheadComp.  # noqa: E501
        :rtype: str
        """
        return self._packofftype

    @packofftype.setter
    def packofftype(self, packofftype):
        """Sets the packofftype of this WellheadComp.


        :param packofftype: The packofftype of this WellheadComp.  # noqa: E501
        :type: str
        """

        self._packofftype = packofftype

    @property
    def productspeclevel(self):
        """Gets the productspeclevel of this WellheadComp.  # noqa: E501


        :return: The productspeclevel of this WellheadComp.  # noqa: E501
        :rtype: str
        """
        return self._productspeclevel

    @productspeclevel.setter
    def productspeclevel(self, productspeclevel):
        """Sets the productspeclevel of this WellheadComp.


        :param productspeclevel: The productspeclevel of this WellheadComp.  # noqa: E501
        :type: str
        """

        self._productspeclevel = productspeclevel

    @property
    def refid(self):
        """Gets the refid of this WellheadComp.  # noqa: E501


        :return: The refid of this WellheadComp.  # noqa: E501
        :rtype: str
        """
        return self._refid

    @refid.setter
    def refid(self, refid):
        """Sets the refid of this WellheadComp.


        :param refid: The refid of this WellheadComp.  # noqa: E501
        :type: str
        """

        self._refid = refid

    @property
    def sect(self):
        """Gets the sect of this WellheadComp.  # noqa: E501


        :return: The sect of this WellheadComp.  # noqa: E501
        :rtype: str
        """
        return self._sect

    @sect.setter
    def sect(self, sect):
        """Sets the sect of this WellheadComp.


        :param sect: The sect of this WellheadComp.  # noqa: E501
        :type: str
        """

        self._sect = sect

    @property
    def service(self):
        """Gets the service of this WellheadComp.  # noqa: E501


        :return: The service of this WellheadComp.  # noqa: E501
        :rtype: str
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this WellheadComp.


        :param service: The service of this WellheadComp.  # noqa: E501
        :type: str
        """

        self._service = service

    @property
    def sn(self):
        """Gets the sn of this WellheadComp.  # noqa: E501


        :return: The sn of this WellheadComp.  # noqa: E501
        :rtype: str
        """
        return self._sn

    @sn.setter
    def sn(self, sn):
        """Sets the sn of this WellheadComp.


        :param sn: The sn of this WellheadComp.  # noqa: E501
        :type: str
        """

        self._sn = sn

    @property
    def syscreatedate(self):
        """Gets the syscreatedate of this WellheadComp.  # noqa: E501


        :return: The syscreatedate of this WellheadComp.  # noqa: E501
        :rtype: datetime
        """
        return self._syscreatedate

    @syscreatedate.setter
    def syscreatedate(self, syscreatedate):
        """Sets the syscreatedate of this WellheadComp.


        :param syscreatedate: The syscreatedate of this WellheadComp.  # noqa: E501
        :type: datetime
        """

        self._syscreatedate = syscreatedate

    @property
    def syscreateuser(self):
        """Gets the syscreateuser of this WellheadComp.  # noqa: E501


        :return: The syscreateuser of this WellheadComp.  # noqa: E501
        :rtype: str
        """
        return self._syscreateuser

    @syscreateuser.setter
    def syscreateuser(self, syscreateuser):
        """Sets the syscreateuser of this WellheadComp.


        :param syscreateuser: The syscreateuser of this WellheadComp.  # noqa: E501
        :type: str
        """

        self._syscreateuser = syscreateuser

    @property
    def syslockchildren(self):
        """Gets the syslockchildren of this WellheadComp.  # noqa: E501


        :return: The syslockchildren of this WellheadComp.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildren

    @syslockchildren.setter
    def syslockchildren(self, syslockchildren):
        """Sets the syslockchildren of this WellheadComp.


        :param syslockchildren: The syslockchildren of this WellheadComp.  # noqa: E501
        :type: int
        """

        self._syslockchildren = syslockchildren

    @property
    def syslockchildrenui(self):
        """Gets the syslockchildrenui of this WellheadComp.  # noqa: E501


        :return: The syslockchildrenui of this WellheadComp.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildrenui

    @syslockchildrenui.setter
    def syslockchildrenui(self, syslockchildrenui):
        """Sets the syslockchildrenui of this WellheadComp.


        :param syslockchildrenui: The syslockchildrenui of this WellheadComp.  # noqa: E501
        :type: int
        """

        self._syslockchildrenui = syslockchildrenui

    @property
    def syslockdate(self):
        """Gets the syslockdate of this WellheadComp.  # noqa: E501


        :return: The syslockdate of this WellheadComp.  # noqa: E501
        :rtype: datetime
        """
        return self._syslockdate

    @syslockdate.setter
    def syslockdate(self, syslockdate):
        """Sets the syslockdate of this WellheadComp.


        :param syslockdate: The syslockdate of this WellheadComp.  # noqa: E501
        :type: datetime
        """

        self._syslockdate = syslockdate

    @property
    def syslockme(self):
        """Gets the syslockme of this WellheadComp.  # noqa: E501


        :return: The syslockme of this WellheadComp.  # noqa: E501
        :rtype: int
        """
        return self._syslockme

    @syslockme.setter
    def syslockme(self, syslockme):
        """Sets the syslockme of this WellheadComp.


        :param syslockme: The syslockme of this WellheadComp.  # noqa: E501
        :type: int
        """

        self._syslockme = syslockme

    @property
    def syslockmeui(self):
        """Gets the syslockmeui of this WellheadComp.  # noqa: E501


        :return: The syslockmeui of this WellheadComp.  # noqa: E501
        :rtype: int
        """
        return self._syslockmeui

    @syslockmeui.setter
    def syslockmeui(self, syslockmeui):
        """Sets the syslockmeui of this WellheadComp.


        :param syslockmeui: The syslockmeui of this WellheadComp.  # noqa: E501
        :type: int
        """

        self._syslockmeui = syslockmeui

    @property
    def sysmoddate(self):
        """Gets the sysmoddate of this WellheadComp.  # noqa: E501


        :return: The sysmoddate of this WellheadComp.  # noqa: E501
        :rtype: datetime
        """
        return self._sysmoddate

    @sysmoddate.setter
    def sysmoddate(self, sysmoddate):
        """Sets the sysmoddate of this WellheadComp.


        :param sysmoddate: The sysmoddate of this WellheadComp.  # noqa: E501
        :type: datetime
        """

        self._sysmoddate = sysmoddate

    @property
    def sysmoduser(self):
        """Gets the sysmoduser of this WellheadComp.  # noqa: E501


        :return: The sysmoduser of this WellheadComp.  # noqa: E501
        :rtype: str
        """
        return self._sysmoduser

    @sysmoduser.setter
    def sysmoduser(self, sysmoduser):
        """Sets the sysmoduser of this WellheadComp.


        :param sysmoduser: The sysmoduser of this WellheadComp.  # noqa: E501
        :type: str
        """

        self._sysmoduser = sysmoduser

    @property
    def sysseq(self):
        """Gets the sysseq of this WellheadComp.  # noqa: E501


        :return: The sysseq of this WellheadComp.  # noqa: E501
        :rtype: int
        """
        return self._sysseq

    @sysseq.setter
    def sysseq(self, sysseq):
        """Sets the sysseq of this WellheadComp.


        :param sysseq: The sysseq of this WellheadComp.  # noqa: E501
        :type: int
        """

        self._sysseq = sysseq

    @property
    def systag(self):
        """Gets the systag of this WellheadComp.  # noqa: E501


        :return: The systag of this WellheadComp.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this WellheadComp.


        :param systag: The systag of this WellheadComp.  # noqa: E501
        :type: str
        """

        self._systag = systag

    @property
    def szidnom(self):
        """Gets the szidnom of this WellheadComp.  # noqa: E501


        :return: The szidnom of this WellheadComp.  # noqa: E501
        :rtype: OneOfWellheadCompSzidnom
        """
        return self._szidnom

    @szidnom.setter
    def szidnom(self, szidnom):
        """Sets the szidnom of this WellheadComp.


        :param szidnom: The szidnom of this WellheadComp.  # noqa: E501
        :type: OneOfWellheadCompSzidnom
        """

        self._szidnom = szidnom

    @property
    def szodnom(self):
        """Gets the szodnom of this WellheadComp.  # noqa: E501


        :return: The szodnom of this WellheadComp.  # noqa: E501
        :rtype: OneOfWellheadCompSzodnom
        """
        return self._szodnom

    @szodnom.setter
    def szodnom(self, szodnom):
        """Sets the szodnom of this WellheadComp.


        :param szodnom: The szodnom of this WellheadComp.  # noqa: E501
        :type: OneOfWellheadCompSzodnom
        """

        self._szodnom = szodnom

    @property
    def typ1(self):
        """Gets the typ1 of this WellheadComp.  # noqa: E501


        :return: The typ1 of this WellheadComp.  # noqa: E501
        :rtype: str
        """
        return self._typ1

    @typ1.setter
    def typ1(self, typ1):
        """Sets the typ1 of this WellheadComp.


        :param typ1: The typ1 of this WellheadComp.  # noqa: E501
        :type: str
        """

        self._typ1 = typ1

    @property
    def typ2(self):
        """Gets the typ2 of this WellheadComp.  # noqa: E501


        :return: The typ2 of this WellheadComp.  # noqa: E501
        :rtype: str
        """
        return self._typ2

    @typ2.setter
    def typ2(self, typ2):
        """Sets the typ2 of this WellheadComp.


        :param typ2: The typ2 of this WellheadComp.  # noqa: E501
        :type: str
        """

        self._typ2 = typ2

    @property
    def usertxt(self):
        """Gets the usertxt of this WellheadComp.  # noqa: E501


        :return: The usertxt of this WellheadComp.  # noqa: E501
        :rtype: str
        """
        return self._usertxt

    @usertxt.setter
    def usertxt(self, usertxt):
        """Sets the usertxt of this WellheadComp.


        :param usertxt: The usertxt of this WellheadComp.  # noqa: E501
        :type: str
        """

        self._usertxt = usertxt

    @property
    def wellhead(self):
        """Gets the wellhead of this WellheadComp.  # noqa: E501


        :return: The wellhead of this WellheadComp.  # noqa: E501
        :rtype: AnyOfWellheadCompWellhead
        """
        return self._wellhead

    @wellhead.setter
    def wellhead(self, wellhead):
        """Sets the wellhead of this WellheadComp.


        :param wellhead: The wellhead of this WellheadComp.  # noqa: E501
        :type: AnyOfWellheadCompWellhead
        """

        self._wellhead = wellhead

    @property
    def wellhead_comp_accs(self):
        """Gets the wellhead_comp_accs of this WellheadComp.  # noqa: E501


        :return: The wellhead_comp_accs of this WellheadComp.  # noqa: E501
        :rtype: list[WellheadCompAcc]
        """
        return self._wellhead_comp_accs

    @wellhead_comp_accs.setter
    def wellhead_comp_accs(self, wellhead_comp_accs):
        """Sets the wellhead_comp_accs of this WellheadComp.


        :param wellhead_comp_accs: The wellhead_comp_accs of this WellheadComp.  # noqa: E501
        :type: list[WellheadCompAcc]
        """

        self._wellhead_comp_accs = wellhead_comp_accs

    @property
    def wellhead_comp_subs(self):
        """Gets the wellhead_comp_subs of this WellheadComp.  # noqa: E501


        :return: The wellhead_comp_subs of this WellheadComp.  # noqa: E501
        :rtype: list[WellheadCompSub]
        """
        return self._wellhead_comp_subs

    @wellhead_comp_subs.setter
    def wellhead_comp_subs(self, wellhead_comp_subs):
        """Sets the wellhead_comp_subs of this WellheadComp.


        :param wellhead_comp_subs: The wellhead_comp_subs of this WellheadComp.  # noqa: E501
        :type: list[WellheadCompSub]
        """

        self._wellhead_comp_subs = wellhead_comp_subs

    @property
    def workpres(self):
        """Gets the workpres of this WellheadComp.  # noqa: E501


        :return: The workpres of this WellheadComp.  # noqa: E501
        :rtype: OneOfWellheadCompWorkpres
        """
        return self._workpres

    @workpres.setter
    def workpres(self, workpres):
        """Sets the workpres of this WellheadComp.


        :param workpres: The workpres of this WellheadComp.  # noqa: E501
        :type: OneOfWellheadCompWorkpres
        """

        self._workpres = workpres

    @property
    def workpresbtm(self):
        """Gets the workpresbtm of this WellheadComp.  # noqa: E501


        :return: The workpresbtm of this WellheadComp.  # noqa: E501
        :rtype: OneOfWellheadCompWorkpresbtm
        """
        return self._workpresbtm

    @workpresbtm.setter
    def workpresbtm(self, workpresbtm):
        """Sets the workpresbtm of this WellheadComp.


        :param workpresbtm: The workpresbtm of this WellheadComp.  # noqa: E501
        :type: OneOfWellheadCompWorkpresbtm
        """

        self._workpresbtm = workpresbtm

    @property
    def workprestop(self):
        """Gets the workprestop of this WellheadComp.  # noqa: E501


        :return: The workprestop of this WellheadComp.  # noqa: E501
        :rtype: OneOfWellheadCompWorkprestop
        """
        return self._workprestop

    @workprestop.setter
    def workprestop(self, workprestop):
        """Sets the workprestop of this WellheadComp.


        :param workprestop: The workprestop of this WellheadComp.  # noqa: E501
        :type: OneOfWellheadCompWorkprestop
        """

        self._workprestop = workprestop

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WellheadComp, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WellheadComp):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
