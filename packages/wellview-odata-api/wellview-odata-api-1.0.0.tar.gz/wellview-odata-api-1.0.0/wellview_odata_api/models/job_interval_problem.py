# coding: utf-8

"""
    OData Service for namespace Default

    This OData service is located at http://localhost  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class JobIntervalProblem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'accountablepty': 'str',
        'actiontaken': 'str',
        'com': 'str',
        'costcalc': 'OneOfJobIntervalProblemCostcalc',
        'costrecov': 'OneOfJobIntervalProblemCostrecov',
        'dateortyp': 'str',
        'daysfromspudcalc': 'OneOfJobIntervalProblemDaysfromspudcalc',
        'depthend': 'OneOfJobIntervalProblemDepthend',
        'depthstart': 'OneOfJobIntervalProblemDepthstart',
        'depthtvdendcalc': 'OneOfJobIntervalProblemDepthtvdendcalc',
        'depthtvdstartcalc': 'OneOfJobIntervalProblemDepthtvdstartcalc',
        'des': 'str',
        'dttmend': 'datetime',
        'dttmendorcalc': 'datetime',
        'dttmstart': 'datetime',
        'dttmstartorcalc': 'datetime',
        'durationfactorcalc': 'OneOfJobIntervalProblemDurationfactorcalc',
        'durationgrosscalc': 'OneOfJobIntervalProblemDurationgrosscalc',
        'durationnetcalc': 'OneOfJobIntervalProblemDurationnetcalc',
        'durationtimelogcumspudcalc': 'OneOfJobIntervalProblemDurationtimelogcumspudcalc',
        'durationtimelogtotcumcalc': 'OneOfJobIntervalProblemDurationtimelogtotcumcalc',
        'estcostoverride': 'OneOfJobIntervalProblemEstcostoverride',
        'estlosttime': 'OneOfJobIntervalProblemEstlosttime',
        'excludefromproblemtime': 'int',
        'formationcalc': 'str',
        'idrec': 'str',
        'idrecfaileditem': 'str',
        'idrecfaileditemtk': 'str',
        'idrecjobprogramphasecalc': 'str',
        'idrecjobprogramphasecalctk': 'str',
        'idrecjobservicecontract': 'str',
        'idrecjobservicecontracttk': 'str',
        'idreclastrigcalc': 'str',
        'idreclastrigcalctk': 'str',
        'idrecparent': 'str',
        'idrecwellbore': 'str',
        'idrecwellboretk': 'str',
        'idwell': 'str',
        'inclbtmcalc': 'OneOfJobIntervalProblemInclbtmcalc',
        'inclmaxcalc': 'OneOfJobIntervalProblemInclmaxcalc',
        'incltopcalc': 'OneOfJobIntervalProblemIncltopcalc',
        'job': 'AnyOfJobIntervalProblemJob',
        'job_interval_problem_actions': 'list[JobIntervalProblemAction]',
        'job_interval_problem_causes': 'list[JobIntervalProblemCause]',
        'job_interval_problem_date_ors': 'list[JobIntervalProblemDateOr]',
        'opscondition': 'str',
        'potentialseverity': 'str',
        'problemsystem1': 'str',
        'problemsystem2': 'str',
        'problemsystem3': 'str',
        'refno': 'str',
        'reportdaycalc': 'OneOfJobIntervalProblemReportdaycalc',
        'reportnocalc': 'OneOfJobIntervalProblemReportnocalc',
        'rigcrewnamecalc': 'str',
        'severity': 'str',
        'status': 'str',
        'syscreatedate': 'datetime',
        'syscreateuser': 'str',
        'syslockchildren': 'int',
        'syslockchildrenui': 'int',
        'syslockdate': 'datetime',
        'syslockme': 'int',
        'syslockmeui': 'int',
        'sysmoddate': 'datetime',
        'sysmoduser': 'str',
        'sysseq': 'int',
        'systag': 'str',
        'typ': 'str',
        'typdetail': 'str'
    }

    attribute_map = {
        'accountablepty': 'accountablepty',
        'actiontaken': 'actiontaken',
        'com': 'com',
        'costcalc': 'costcalc',
        'costrecov': 'costrecov',
        'dateortyp': 'dateortyp',
        'daysfromspudcalc': 'daysfromspudcalc',
        'depthend': 'depthend',
        'depthstart': 'depthstart',
        'depthtvdendcalc': 'depthtvdendcalc',
        'depthtvdstartcalc': 'depthtvdstartcalc',
        'des': 'des',
        'dttmend': 'dttmend',
        'dttmendorcalc': 'dttmendorcalc',
        'dttmstart': 'dttmstart',
        'dttmstartorcalc': 'dttmstartorcalc',
        'durationfactorcalc': 'durationfactorcalc',
        'durationgrosscalc': 'durationgrosscalc',
        'durationnetcalc': 'durationnetcalc',
        'durationtimelogcumspudcalc': 'durationtimelogcumspudcalc',
        'durationtimelogtotcumcalc': 'durationtimelogtotcumcalc',
        'estcostoverride': 'estcostoverride',
        'estlosttime': 'estlosttime',
        'excludefromproblemtime': 'excludefromproblemtime',
        'formationcalc': 'formationcalc',
        'idrec': 'idrec',
        'idrecfaileditem': 'idrecfaileditem',
        'idrecfaileditemtk': 'idrecfaileditemtk',
        'idrecjobprogramphasecalc': 'idrecjobprogramphasecalc',
        'idrecjobprogramphasecalctk': 'idrecjobprogramphasecalctk',
        'idrecjobservicecontract': 'idrecjobservicecontract',
        'idrecjobservicecontracttk': 'idrecjobservicecontracttk',
        'idreclastrigcalc': 'idreclastrigcalc',
        'idreclastrigcalctk': 'idreclastrigcalctk',
        'idrecparent': 'idrecparent',
        'idrecwellbore': 'idrecwellbore',
        'idrecwellboretk': 'idrecwellboretk',
        'idwell': 'idwell',
        'inclbtmcalc': 'inclbtmcalc',
        'inclmaxcalc': 'inclmaxcalc',
        'incltopcalc': 'incltopcalc',
        'job': 'job',
        'job_interval_problem_actions': 'jobIntervalProblemActions',
        'job_interval_problem_causes': 'jobIntervalProblemCauses',
        'job_interval_problem_date_ors': 'jobIntervalProblemDateOrs',
        'opscondition': 'opscondition',
        'potentialseverity': 'potentialseverity',
        'problemsystem1': 'problemsystem1',
        'problemsystem2': 'problemsystem2',
        'problemsystem3': 'problemsystem3',
        'refno': 'refno',
        'reportdaycalc': 'reportdaycalc',
        'reportnocalc': 'reportnocalc',
        'rigcrewnamecalc': 'rigcrewnamecalc',
        'severity': 'severity',
        'status': 'status',
        'syscreatedate': 'syscreatedate',
        'syscreateuser': 'syscreateuser',
        'syslockchildren': 'syslockchildren',
        'syslockchildrenui': 'syslockchildrenui',
        'syslockdate': 'syslockdate',
        'syslockme': 'syslockme',
        'syslockmeui': 'syslockmeui',
        'sysmoddate': 'sysmoddate',
        'sysmoduser': 'sysmoduser',
        'sysseq': 'sysseq',
        'systag': 'systag',
        'typ': 'typ',
        'typdetail': 'typdetail'
    }

    def __init__(self, accountablepty=None, actiontaken=None, com=None, costcalc=None, costrecov=None, dateortyp=None, daysfromspudcalc=None, depthend=None, depthstart=None, depthtvdendcalc=None, depthtvdstartcalc=None, des=None, dttmend=None, dttmendorcalc=None, dttmstart=None, dttmstartorcalc=None, durationfactorcalc=None, durationgrosscalc=None, durationnetcalc=None, durationtimelogcumspudcalc=None, durationtimelogtotcumcalc=None, estcostoverride=None, estlosttime=None, excludefromproblemtime=None, formationcalc=None, idrec=None, idrecfaileditem=None, idrecfaileditemtk=None, idrecjobprogramphasecalc=None, idrecjobprogramphasecalctk=None, idrecjobservicecontract=None, idrecjobservicecontracttk=None, idreclastrigcalc=None, idreclastrigcalctk=None, idrecparent=None, idrecwellbore=None, idrecwellboretk=None, idwell=None, inclbtmcalc=None, inclmaxcalc=None, incltopcalc=None, job=None, job_interval_problem_actions=None, job_interval_problem_causes=None, job_interval_problem_date_ors=None, opscondition=None, potentialseverity=None, problemsystem1=None, problemsystem2=None, problemsystem3=None, refno=None, reportdaycalc=None, reportnocalc=None, rigcrewnamecalc=None, severity=None, status=None, syscreatedate=None, syscreateuser=None, syslockchildren=None, syslockchildrenui=None, syslockdate=None, syslockme=None, syslockmeui=None, sysmoddate=None, sysmoduser=None, sysseq=None, systag=None, typ=None, typdetail=None):  # noqa: E501
        """JobIntervalProblem - a model defined in Swagger"""  # noqa: E501
        self._accountablepty = None
        self._actiontaken = None
        self._com = None
        self._costcalc = None
        self._costrecov = None
        self._dateortyp = None
        self._daysfromspudcalc = None
        self._depthend = None
        self._depthstart = None
        self._depthtvdendcalc = None
        self._depthtvdstartcalc = None
        self._des = None
        self._dttmend = None
        self._dttmendorcalc = None
        self._dttmstart = None
        self._dttmstartorcalc = None
        self._durationfactorcalc = None
        self._durationgrosscalc = None
        self._durationnetcalc = None
        self._durationtimelogcumspudcalc = None
        self._durationtimelogtotcumcalc = None
        self._estcostoverride = None
        self._estlosttime = None
        self._excludefromproblemtime = None
        self._formationcalc = None
        self._idrec = None
        self._idrecfaileditem = None
        self._idrecfaileditemtk = None
        self._idrecjobprogramphasecalc = None
        self._idrecjobprogramphasecalctk = None
        self._idrecjobservicecontract = None
        self._idrecjobservicecontracttk = None
        self._idreclastrigcalc = None
        self._idreclastrigcalctk = None
        self._idrecparent = None
        self._idrecwellbore = None
        self._idrecwellboretk = None
        self._idwell = None
        self._inclbtmcalc = None
        self._inclmaxcalc = None
        self._incltopcalc = None
        self._job = None
        self._job_interval_problem_actions = None
        self._job_interval_problem_causes = None
        self._job_interval_problem_date_ors = None
        self._opscondition = None
        self._potentialseverity = None
        self._problemsystem1 = None
        self._problemsystem2 = None
        self._problemsystem3 = None
        self._refno = None
        self._reportdaycalc = None
        self._reportnocalc = None
        self._rigcrewnamecalc = None
        self._severity = None
        self._status = None
        self._syscreatedate = None
        self._syscreateuser = None
        self._syslockchildren = None
        self._syslockchildrenui = None
        self._syslockdate = None
        self._syslockme = None
        self._syslockmeui = None
        self._sysmoddate = None
        self._sysmoduser = None
        self._sysseq = None
        self._systag = None
        self._typ = None
        self._typdetail = None
        self.discriminator = None
        if accountablepty is not None:
            self.accountablepty = accountablepty
        if actiontaken is not None:
            self.actiontaken = actiontaken
        if com is not None:
            self.com = com
        if costcalc is not None:
            self.costcalc = costcalc
        if costrecov is not None:
            self.costrecov = costrecov
        if dateortyp is not None:
            self.dateortyp = dateortyp
        if daysfromspudcalc is not None:
            self.daysfromspudcalc = daysfromspudcalc
        if depthend is not None:
            self.depthend = depthend
        if depthstart is not None:
            self.depthstart = depthstart
        if depthtvdendcalc is not None:
            self.depthtvdendcalc = depthtvdendcalc
        if depthtvdstartcalc is not None:
            self.depthtvdstartcalc = depthtvdstartcalc
        if des is not None:
            self.des = des
        if dttmend is not None:
            self.dttmend = dttmend
        if dttmendorcalc is not None:
            self.dttmendorcalc = dttmendorcalc
        if dttmstart is not None:
            self.dttmstart = dttmstart
        if dttmstartorcalc is not None:
            self.dttmstartorcalc = dttmstartorcalc
        if durationfactorcalc is not None:
            self.durationfactorcalc = durationfactorcalc
        if durationgrosscalc is not None:
            self.durationgrosscalc = durationgrosscalc
        if durationnetcalc is not None:
            self.durationnetcalc = durationnetcalc
        if durationtimelogcumspudcalc is not None:
            self.durationtimelogcumspudcalc = durationtimelogcumspudcalc
        if durationtimelogtotcumcalc is not None:
            self.durationtimelogtotcumcalc = durationtimelogtotcumcalc
        if estcostoverride is not None:
            self.estcostoverride = estcostoverride
        if estlosttime is not None:
            self.estlosttime = estlosttime
        if excludefromproblemtime is not None:
            self.excludefromproblemtime = excludefromproblemtime
        if formationcalc is not None:
            self.formationcalc = formationcalc
        if idrec is not None:
            self.idrec = idrec
        if idrecfaileditem is not None:
            self.idrecfaileditem = idrecfaileditem
        if idrecfaileditemtk is not None:
            self.idrecfaileditemtk = idrecfaileditemtk
        if idrecjobprogramphasecalc is not None:
            self.idrecjobprogramphasecalc = idrecjobprogramphasecalc
        if idrecjobprogramphasecalctk is not None:
            self.idrecjobprogramphasecalctk = idrecjobprogramphasecalctk
        if idrecjobservicecontract is not None:
            self.idrecjobservicecontract = idrecjobservicecontract
        if idrecjobservicecontracttk is not None:
            self.idrecjobservicecontracttk = idrecjobservicecontracttk
        if idreclastrigcalc is not None:
            self.idreclastrigcalc = idreclastrigcalc
        if idreclastrigcalctk is not None:
            self.idreclastrigcalctk = idreclastrigcalctk
        if idrecparent is not None:
            self.idrecparent = idrecparent
        if idrecwellbore is not None:
            self.idrecwellbore = idrecwellbore
        if idrecwellboretk is not None:
            self.idrecwellboretk = idrecwellboretk
        if idwell is not None:
            self.idwell = idwell
        if inclbtmcalc is not None:
            self.inclbtmcalc = inclbtmcalc
        if inclmaxcalc is not None:
            self.inclmaxcalc = inclmaxcalc
        if incltopcalc is not None:
            self.incltopcalc = incltopcalc
        if job is not None:
            self.job = job
        if job_interval_problem_actions is not None:
            self.job_interval_problem_actions = job_interval_problem_actions
        if job_interval_problem_causes is not None:
            self.job_interval_problem_causes = job_interval_problem_causes
        if job_interval_problem_date_ors is not None:
            self.job_interval_problem_date_ors = job_interval_problem_date_ors
        if opscondition is not None:
            self.opscondition = opscondition
        if potentialseverity is not None:
            self.potentialseverity = potentialseverity
        if problemsystem1 is not None:
            self.problemsystem1 = problemsystem1
        if problemsystem2 is not None:
            self.problemsystem2 = problemsystem2
        if problemsystem3 is not None:
            self.problemsystem3 = problemsystem3
        if refno is not None:
            self.refno = refno
        if reportdaycalc is not None:
            self.reportdaycalc = reportdaycalc
        if reportnocalc is not None:
            self.reportnocalc = reportnocalc
        if rigcrewnamecalc is not None:
            self.rigcrewnamecalc = rigcrewnamecalc
        if severity is not None:
            self.severity = severity
        if status is not None:
            self.status = status
        if syscreatedate is not None:
            self.syscreatedate = syscreatedate
        if syscreateuser is not None:
            self.syscreateuser = syscreateuser
        if syslockchildren is not None:
            self.syslockchildren = syslockchildren
        if syslockchildrenui is not None:
            self.syslockchildrenui = syslockchildrenui
        if syslockdate is not None:
            self.syslockdate = syslockdate
        if syslockme is not None:
            self.syslockme = syslockme
        if syslockmeui is not None:
            self.syslockmeui = syslockmeui
        if sysmoddate is not None:
            self.sysmoddate = sysmoddate
        if sysmoduser is not None:
            self.sysmoduser = sysmoduser
        if sysseq is not None:
            self.sysseq = sysseq
        if systag is not None:
            self.systag = systag
        if typ is not None:
            self.typ = typ
        if typdetail is not None:
            self.typdetail = typdetail

    @property
    def accountablepty(self):
        """Gets the accountablepty of this JobIntervalProblem.  # noqa: E501


        :return: The accountablepty of this JobIntervalProblem.  # noqa: E501
        :rtype: str
        """
        return self._accountablepty

    @accountablepty.setter
    def accountablepty(self, accountablepty):
        """Sets the accountablepty of this JobIntervalProblem.


        :param accountablepty: The accountablepty of this JobIntervalProblem.  # noqa: E501
        :type: str
        """

        self._accountablepty = accountablepty

    @property
    def actiontaken(self):
        """Gets the actiontaken of this JobIntervalProblem.  # noqa: E501


        :return: The actiontaken of this JobIntervalProblem.  # noqa: E501
        :rtype: str
        """
        return self._actiontaken

    @actiontaken.setter
    def actiontaken(self, actiontaken):
        """Sets the actiontaken of this JobIntervalProblem.


        :param actiontaken: The actiontaken of this JobIntervalProblem.  # noqa: E501
        :type: str
        """

        self._actiontaken = actiontaken

    @property
    def com(self):
        """Gets the com of this JobIntervalProblem.  # noqa: E501


        :return: The com of this JobIntervalProblem.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this JobIntervalProblem.


        :param com: The com of this JobIntervalProblem.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def costcalc(self):
        """Gets the costcalc of this JobIntervalProblem.  # noqa: E501


        :return: The costcalc of this JobIntervalProblem.  # noqa: E501
        :rtype: OneOfJobIntervalProblemCostcalc
        """
        return self._costcalc

    @costcalc.setter
    def costcalc(self, costcalc):
        """Sets the costcalc of this JobIntervalProblem.


        :param costcalc: The costcalc of this JobIntervalProblem.  # noqa: E501
        :type: OneOfJobIntervalProblemCostcalc
        """

        self._costcalc = costcalc

    @property
    def costrecov(self):
        """Gets the costrecov of this JobIntervalProblem.  # noqa: E501


        :return: The costrecov of this JobIntervalProblem.  # noqa: E501
        :rtype: OneOfJobIntervalProblemCostrecov
        """
        return self._costrecov

    @costrecov.setter
    def costrecov(self, costrecov):
        """Sets the costrecov of this JobIntervalProblem.


        :param costrecov: The costrecov of this JobIntervalProblem.  # noqa: E501
        :type: OneOfJobIntervalProblemCostrecov
        """

        self._costrecov = costrecov

    @property
    def dateortyp(self):
        """Gets the dateortyp of this JobIntervalProblem.  # noqa: E501


        :return: The dateortyp of this JobIntervalProblem.  # noqa: E501
        :rtype: str
        """
        return self._dateortyp

    @dateortyp.setter
    def dateortyp(self, dateortyp):
        """Sets the dateortyp of this JobIntervalProblem.


        :param dateortyp: The dateortyp of this JobIntervalProblem.  # noqa: E501
        :type: str
        """

        self._dateortyp = dateortyp

    @property
    def daysfromspudcalc(self):
        """Gets the daysfromspudcalc of this JobIntervalProblem.  # noqa: E501


        :return: The daysfromspudcalc of this JobIntervalProblem.  # noqa: E501
        :rtype: OneOfJobIntervalProblemDaysfromspudcalc
        """
        return self._daysfromspudcalc

    @daysfromspudcalc.setter
    def daysfromspudcalc(self, daysfromspudcalc):
        """Sets the daysfromspudcalc of this JobIntervalProblem.


        :param daysfromspudcalc: The daysfromspudcalc of this JobIntervalProblem.  # noqa: E501
        :type: OneOfJobIntervalProblemDaysfromspudcalc
        """

        self._daysfromspudcalc = daysfromspudcalc

    @property
    def depthend(self):
        """Gets the depthend of this JobIntervalProblem.  # noqa: E501


        :return: The depthend of this JobIntervalProblem.  # noqa: E501
        :rtype: OneOfJobIntervalProblemDepthend
        """
        return self._depthend

    @depthend.setter
    def depthend(self, depthend):
        """Sets the depthend of this JobIntervalProblem.


        :param depthend: The depthend of this JobIntervalProblem.  # noqa: E501
        :type: OneOfJobIntervalProblemDepthend
        """

        self._depthend = depthend

    @property
    def depthstart(self):
        """Gets the depthstart of this JobIntervalProblem.  # noqa: E501


        :return: The depthstart of this JobIntervalProblem.  # noqa: E501
        :rtype: OneOfJobIntervalProblemDepthstart
        """
        return self._depthstart

    @depthstart.setter
    def depthstart(self, depthstart):
        """Sets the depthstart of this JobIntervalProblem.


        :param depthstart: The depthstart of this JobIntervalProblem.  # noqa: E501
        :type: OneOfJobIntervalProblemDepthstart
        """

        self._depthstart = depthstart

    @property
    def depthtvdendcalc(self):
        """Gets the depthtvdendcalc of this JobIntervalProblem.  # noqa: E501


        :return: The depthtvdendcalc of this JobIntervalProblem.  # noqa: E501
        :rtype: OneOfJobIntervalProblemDepthtvdendcalc
        """
        return self._depthtvdendcalc

    @depthtvdendcalc.setter
    def depthtvdendcalc(self, depthtvdendcalc):
        """Sets the depthtvdendcalc of this JobIntervalProblem.


        :param depthtvdendcalc: The depthtvdendcalc of this JobIntervalProblem.  # noqa: E501
        :type: OneOfJobIntervalProblemDepthtvdendcalc
        """

        self._depthtvdendcalc = depthtvdendcalc

    @property
    def depthtvdstartcalc(self):
        """Gets the depthtvdstartcalc of this JobIntervalProblem.  # noqa: E501


        :return: The depthtvdstartcalc of this JobIntervalProblem.  # noqa: E501
        :rtype: OneOfJobIntervalProblemDepthtvdstartcalc
        """
        return self._depthtvdstartcalc

    @depthtvdstartcalc.setter
    def depthtvdstartcalc(self, depthtvdstartcalc):
        """Sets the depthtvdstartcalc of this JobIntervalProblem.


        :param depthtvdstartcalc: The depthtvdstartcalc of this JobIntervalProblem.  # noqa: E501
        :type: OneOfJobIntervalProblemDepthtvdstartcalc
        """

        self._depthtvdstartcalc = depthtvdstartcalc

    @property
    def des(self):
        """Gets the des of this JobIntervalProblem.  # noqa: E501


        :return: The des of this JobIntervalProblem.  # noqa: E501
        :rtype: str
        """
        return self._des

    @des.setter
    def des(self, des):
        """Sets the des of this JobIntervalProblem.


        :param des: The des of this JobIntervalProblem.  # noqa: E501
        :type: str
        """

        self._des = des

    @property
    def dttmend(self):
        """Gets the dttmend of this JobIntervalProblem.  # noqa: E501


        :return: The dttmend of this JobIntervalProblem.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmend

    @dttmend.setter
    def dttmend(self, dttmend):
        """Sets the dttmend of this JobIntervalProblem.


        :param dttmend: The dttmend of this JobIntervalProblem.  # noqa: E501
        :type: datetime
        """

        self._dttmend = dttmend

    @property
    def dttmendorcalc(self):
        """Gets the dttmendorcalc of this JobIntervalProblem.  # noqa: E501


        :return: The dttmendorcalc of this JobIntervalProblem.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmendorcalc

    @dttmendorcalc.setter
    def dttmendorcalc(self, dttmendorcalc):
        """Sets the dttmendorcalc of this JobIntervalProblem.


        :param dttmendorcalc: The dttmendorcalc of this JobIntervalProblem.  # noqa: E501
        :type: datetime
        """

        self._dttmendorcalc = dttmendorcalc

    @property
    def dttmstart(self):
        """Gets the dttmstart of this JobIntervalProblem.  # noqa: E501


        :return: The dttmstart of this JobIntervalProblem.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmstart

    @dttmstart.setter
    def dttmstart(self, dttmstart):
        """Sets the dttmstart of this JobIntervalProblem.


        :param dttmstart: The dttmstart of this JobIntervalProblem.  # noqa: E501
        :type: datetime
        """

        self._dttmstart = dttmstart

    @property
    def dttmstartorcalc(self):
        """Gets the dttmstartorcalc of this JobIntervalProblem.  # noqa: E501


        :return: The dttmstartorcalc of this JobIntervalProblem.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmstartorcalc

    @dttmstartorcalc.setter
    def dttmstartorcalc(self, dttmstartorcalc):
        """Sets the dttmstartorcalc of this JobIntervalProblem.


        :param dttmstartorcalc: The dttmstartorcalc of this JobIntervalProblem.  # noqa: E501
        :type: datetime
        """

        self._dttmstartorcalc = dttmstartorcalc

    @property
    def durationfactorcalc(self):
        """Gets the durationfactorcalc of this JobIntervalProblem.  # noqa: E501


        :return: The durationfactorcalc of this JobIntervalProblem.  # noqa: E501
        :rtype: OneOfJobIntervalProblemDurationfactorcalc
        """
        return self._durationfactorcalc

    @durationfactorcalc.setter
    def durationfactorcalc(self, durationfactorcalc):
        """Sets the durationfactorcalc of this JobIntervalProblem.


        :param durationfactorcalc: The durationfactorcalc of this JobIntervalProblem.  # noqa: E501
        :type: OneOfJobIntervalProblemDurationfactorcalc
        """

        self._durationfactorcalc = durationfactorcalc

    @property
    def durationgrosscalc(self):
        """Gets the durationgrosscalc of this JobIntervalProblem.  # noqa: E501


        :return: The durationgrosscalc of this JobIntervalProblem.  # noqa: E501
        :rtype: OneOfJobIntervalProblemDurationgrosscalc
        """
        return self._durationgrosscalc

    @durationgrosscalc.setter
    def durationgrosscalc(self, durationgrosscalc):
        """Sets the durationgrosscalc of this JobIntervalProblem.


        :param durationgrosscalc: The durationgrosscalc of this JobIntervalProblem.  # noqa: E501
        :type: OneOfJobIntervalProblemDurationgrosscalc
        """

        self._durationgrosscalc = durationgrosscalc

    @property
    def durationnetcalc(self):
        """Gets the durationnetcalc of this JobIntervalProblem.  # noqa: E501


        :return: The durationnetcalc of this JobIntervalProblem.  # noqa: E501
        :rtype: OneOfJobIntervalProblemDurationnetcalc
        """
        return self._durationnetcalc

    @durationnetcalc.setter
    def durationnetcalc(self, durationnetcalc):
        """Sets the durationnetcalc of this JobIntervalProblem.


        :param durationnetcalc: The durationnetcalc of this JobIntervalProblem.  # noqa: E501
        :type: OneOfJobIntervalProblemDurationnetcalc
        """

        self._durationnetcalc = durationnetcalc

    @property
    def durationtimelogcumspudcalc(self):
        """Gets the durationtimelogcumspudcalc of this JobIntervalProblem.  # noqa: E501


        :return: The durationtimelogcumspudcalc of this JobIntervalProblem.  # noqa: E501
        :rtype: OneOfJobIntervalProblemDurationtimelogcumspudcalc
        """
        return self._durationtimelogcumspudcalc

    @durationtimelogcumspudcalc.setter
    def durationtimelogcumspudcalc(self, durationtimelogcumspudcalc):
        """Sets the durationtimelogcumspudcalc of this JobIntervalProblem.


        :param durationtimelogcumspudcalc: The durationtimelogcumspudcalc of this JobIntervalProblem.  # noqa: E501
        :type: OneOfJobIntervalProblemDurationtimelogcumspudcalc
        """

        self._durationtimelogcumspudcalc = durationtimelogcumspudcalc

    @property
    def durationtimelogtotcumcalc(self):
        """Gets the durationtimelogtotcumcalc of this JobIntervalProblem.  # noqa: E501


        :return: The durationtimelogtotcumcalc of this JobIntervalProblem.  # noqa: E501
        :rtype: OneOfJobIntervalProblemDurationtimelogtotcumcalc
        """
        return self._durationtimelogtotcumcalc

    @durationtimelogtotcumcalc.setter
    def durationtimelogtotcumcalc(self, durationtimelogtotcumcalc):
        """Sets the durationtimelogtotcumcalc of this JobIntervalProblem.


        :param durationtimelogtotcumcalc: The durationtimelogtotcumcalc of this JobIntervalProblem.  # noqa: E501
        :type: OneOfJobIntervalProblemDurationtimelogtotcumcalc
        """

        self._durationtimelogtotcumcalc = durationtimelogtotcumcalc

    @property
    def estcostoverride(self):
        """Gets the estcostoverride of this JobIntervalProblem.  # noqa: E501


        :return: The estcostoverride of this JobIntervalProblem.  # noqa: E501
        :rtype: OneOfJobIntervalProblemEstcostoverride
        """
        return self._estcostoverride

    @estcostoverride.setter
    def estcostoverride(self, estcostoverride):
        """Sets the estcostoverride of this JobIntervalProblem.


        :param estcostoverride: The estcostoverride of this JobIntervalProblem.  # noqa: E501
        :type: OneOfJobIntervalProblemEstcostoverride
        """

        self._estcostoverride = estcostoverride

    @property
    def estlosttime(self):
        """Gets the estlosttime of this JobIntervalProblem.  # noqa: E501


        :return: The estlosttime of this JobIntervalProblem.  # noqa: E501
        :rtype: OneOfJobIntervalProblemEstlosttime
        """
        return self._estlosttime

    @estlosttime.setter
    def estlosttime(self, estlosttime):
        """Sets the estlosttime of this JobIntervalProblem.


        :param estlosttime: The estlosttime of this JobIntervalProblem.  # noqa: E501
        :type: OneOfJobIntervalProblemEstlosttime
        """

        self._estlosttime = estlosttime

    @property
    def excludefromproblemtime(self):
        """Gets the excludefromproblemtime of this JobIntervalProblem.  # noqa: E501


        :return: The excludefromproblemtime of this JobIntervalProblem.  # noqa: E501
        :rtype: int
        """
        return self._excludefromproblemtime

    @excludefromproblemtime.setter
    def excludefromproblemtime(self, excludefromproblemtime):
        """Sets the excludefromproblemtime of this JobIntervalProblem.


        :param excludefromproblemtime: The excludefromproblemtime of this JobIntervalProblem.  # noqa: E501
        :type: int
        """

        self._excludefromproblemtime = excludefromproblemtime

    @property
    def formationcalc(self):
        """Gets the formationcalc of this JobIntervalProblem.  # noqa: E501


        :return: The formationcalc of this JobIntervalProblem.  # noqa: E501
        :rtype: str
        """
        return self._formationcalc

    @formationcalc.setter
    def formationcalc(self, formationcalc):
        """Sets the formationcalc of this JobIntervalProblem.


        :param formationcalc: The formationcalc of this JobIntervalProblem.  # noqa: E501
        :type: str
        """

        self._formationcalc = formationcalc

    @property
    def idrec(self):
        """Gets the idrec of this JobIntervalProblem.  # noqa: E501


        :return: The idrec of this JobIntervalProblem.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this JobIntervalProblem.


        :param idrec: The idrec of this JobIntervalProblem.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecfaileditem(self):
        """Gets the idrecfaileditem of this JobIntervalProblem.  # noqa: E501


        :return: The idrecfaileditem of this JobIntervalProblem.  # noqa: E501
        :rtype: str
        """
        return self._idrecfaileditem

    @idrecfaileditem.setter
    def idrecfaileditem(self, idrecfaileditem):
        """Sets the idrecfaileditem of this JobIntervalProblem.


        :param idrecfaileditem: The idrecfaileditem of this JobIntervalProblem.  # noqa: E501
        :type: str
        """

        self._idrecfaileditem = idrecfaileditem

    @property
    def idrecfaileditemtk(self):
        """Gets the idrecfaileditemtk of this JobIntervalProblem.  # noqa: E501


        :return: The idrecfaileditemtk of this JobIntervalProblem.  # noqa: E501
        :rtype: str
        """
        return self._idrecfaileditemtk

    @idrecfaileditemtk.setter
    def idrecfaileditemtk(self, idrecfaileditemtk):
        """Sets the idrecfaileditemtk of this JobIntervalProblem.


        :param idrecfaileditemtk: The idrecfaileditemtk of this JobIntervalProblem.  # noqa: E501
        :type: str
        """

        self._idrecfaileditemtk = idrecfaileditemtk

    @property
    def idrecjobprogramphasecalc(self):
        """Gets the idrecjobprogramphasecalc of this JobIntervalProblem.  # noqa: E501


        :return: The idrecjobprogramphasecalc of this JobIntervalProblem.  # noqa: E501
        :rtype: str
        """
        return self._idrecjobprogramphasecalc

    @idrecjobprogramphasecalc.setter
    def idrecjobprogramphasecalc(self, idrecjobprogramphasecalc):
        """Sets the idrecjobprogramphasecalc of this JobIntervalProblem.


        :param idrecjobprogramphasecalc: The idrecjobprogramphasecalc of this JobIntervalProblem.  # noqa: E501
        :type: str
        """

        self._idrecjobprogramphasecalc = idrecjobprogramphasecalc

    @property
    def idrecjobprogramphasecalctk(self):
        """Gets the idrecjobprogramphasecalctk of this JobIntervalProblem.  # noqa: E501


        :return: The idrecjobprogramphasecalctk of this JobIntervalProblem.  # noqa: E501
        :rtype: str
        """
        return self._idrecjobprogramphasecalctk

    @idrecjobprogramphasecalctk.setter
    def idrecjobprogramphasecalctk(self, idrecjobprogramphasecalctk):
        """Sets the idrecjobprogramphasecalctk of this JobIntervalProblem.


        :param idrecjobprogramphasecalctk: The idrecjobprogramphasecalctk of this JobIntervalProblem.  # noqa: E501
        :type: str
        """

        self._idrecjobprogramphasecalctk = idrecjobprogramphasecalctk

    @property
    def idrecjobservicecontract(self):
        """Gets the idrecjobservicecontract of this JobIntervalProblem.  # noqa: E501


        :return: The idrecjobservicecontract of this JobIntervalProblem.  # noqa: E501
        :rtype: str
        """
        return self._idrecjobservicecontract

    @idrecjobservicecontract.setter
    def idrecjobservicecontract(self, idrecjobservicecontract):
        """Sets the idrecjobservicecontract of this JobIntervalProblem.


        :param idrecjobservicecontract: The idrecjobservicecontract of this JobIntervalProblem.  # noqa: E501
        :type: str
        """

        self._idrecjobservicecontract = idrecjobservicecontract

    @property
    def idrecjobservicecontracttk(self):
        """Gets the idrecjobservicecontracttk of this JobIntervalProblem.  # noqa: E501


        :return: The idrecjobservicecontracttk of this JobIntervalProblem.  # noqa: E501
        :rtype: str
        """
        return self._idrecjobservicecontracttk

    @idrecjobservicecontracttk.setter
    def idrecjobservicecontracttk(self, idrecjobservicecontracttk):
        """Sets the idrecjobservicecontracttk of this JobIntervalProblem.


        :param idrecjobservicecontracttk: The idrecjobservicecontracttk of this JobIntervalProblem.  # noqa: E501
        :type: str
        """

        self._idrecjobservicecontracttk = idrecjobservicecontracttk

    @property
    def idreclastrigcalc(self):
        """Gets the idreclastrigcalc of this JobIntervalProblem.  # noqa: E501


        :return: The idreclastrigcalc of this JobIntervalProblem.  # noqa: E501
        :rtype: str
        """
        return self._idreclastrigcalc

    @idreclastrigcalc.setter
    def idreclastrigcalc(self, idreclastrigcalc):
        """Sets the idreclastrigcalc of this JobIntervalProblem.


        :param idreclastrigcalc: The idreclastrigcalc of this JobIntervalProblem.  # noqa: E501
        :type: str
        """

        self._idreclastrigcalc = idreclastrigcalc

    @property
    def idreclastrigcalctk(self):
        """Gets the idreclastrigcalctk of this JobIntervalProblem.  # noqa: E501


        :return: The idreclastrigcalctk of this JobIntervalProblem.  # noqa: E501
        :rtype: str
        """
        return self._idreclastrigcalctk

    @idreclastrigcalctk.setter
    def idreclastrigcalctk(self, idreclastrigcalctk):
        """Sets the idreclastrigcalctk of this JobIntervalProblem.


        :param idreclastrigcalctk: The idreclastrigcalctk of this JobIntervalProblem.  # noqa: E501
        :type: str
        """

        self._idreclastrigcalctk = idreclastrigcalctk

    @property
    def idrecparent(self):
        """Gets the idrecparent of this JobIntervalProblem.  # noqa: E501


        :return: The idrecparent of this JobIntervalProblem.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this JobIntervalProblem.


        :param idrecparent: The idrecparent of this JobIntervalProblem.  # noqa: E501
        :type: str
        """

        self._idrecparent = idrecparent

    @property
    def idrecwellbore(self):
        """Gets the idrecwellbore of this JobIntervalProblem.  # noqa: E501


        :return: The idrecwellbore of this JobIntervalProblem.  # noqa: E501
        :rtype: str
        """
        return self._idrecwellbore

    @idrecwellbore.setter
    def idrecwellbore(self, idrecwellbore):
        """Sets the idrecwellbore of this JobIntervalProblem.


        :param idrecwellbore: The idrecwellbore of this JobIntervalProblem.  # noqa: E501
        :type: str
        """

        self._idrecwellbore = idrecwellbore

    @property
    def idrecwellboretk(self):
        """Gets the idrecwellboretk of this JobIntervalProblem.  # noqa: E501


        :return: The idrecwellboretk of this JobIntervalProblem.  # noqa: E501
        :rtype: str
        """
        return self._idrecwellboretk

    @idrecwellboretk.setter
    def idrecwellboretk(self, idrecwellboretk):
        """Sets the idrecwellboretk of this JobIntervalProblem.


        :param idrecwellboretk: The idrecwellboretk of this JobIntervalProblem.  # noqa: E501
        :type: str
        """

        self._idrecwellboretk = idrecwellboretk

    @property
    def idwell(self):
        """Gets the idwell of this JobIntervalProblem.  # noqa: E501


        :return: The idwell of this JobIntervalProblem.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this JobIntervalProblem.


        :param idwell: The idwell of this JobIntervalProblem.  # noqa: E501
        :type: str
        """

        self._idwell = idwell

    @property
    def inclbtmcalc(self):
        """Gets the inclbtmcalc of this JobIntervalProblem.  # noqa: E501


        :return: The inclbtmcalc of this JobIntervalProblem.  # noqa: E501
        :rtype: OneOfJobIntervalProblemInclbtmcalc
        """
        return self._inclbtmcalc

    @inclbtmcalc.setter
    def inclbtmcalc(self, inclbtmcalc):
        """Sets the inclbtmcalc of this JobIntervalProblem.


        :param inclbtmcalc: The inclbtmcalc of this JobIntervalProblem.  # noqa: E501
        :type: OneOfJobIntervalProblemInclbtmcalc
        """

        self._inclbtmcalc = inclbtmcalc

    @property
    def inclmaxcalc(self):
        """Gets the inclmaxcalc of this JobIntervalProblem.  # noqa: E501


        :return: The inclmaxcalc of this JobIntervalProblem.  # noqa: E501
        :rtype: OneOfJobIntervalProblemInclmaxcalc
        """
        return self._inclmaxcalc

    @inclmaxcalc.setter
    def inclmaxcalc(self, inclmaxcalc):
        """Sets the inclmaxcalc of this JobIntervalProblem.


        :param inclmaxcalc: The inclmaxcalc of this JobIntervalProblem.  # noqa: E501
        :type: OneOfJobIntervalProblemInclmaxcalc
        """

        self._inclmaxcalc = inclmaxcalc

    @property
    def incltopcalc(self):
        """Gets the incltopcalc of this JobIntervalProblem.  # noqa: E501


        :return: The incltopcalc of this JobIntervalProblem.  # noqa: E501
        :rtype: OneOfJobIntervalProblemIncltopcalc
        """
        return self._incltopcalc

    @incltopcalc.setter
    def incltopcalc(self, incltopcalc):
        """Sets the incltopcalc of this JobIntervalProblem.


        :param incltopcalc: The incltopcalc of this JobIntervalProblem.  # noqa: E501
        :type: OneOfJobIntervalProblemIncltopcalc
        """

        self._incltopcalc = incltopcalc

    @property
    def job(self):
        """Gets the job of this JobIntervalProblem.  # noqa: E501


        :return: The job of this JobIntervalProblem.  # noqa: E501
        :rtype: AnyOfJobIntervalProblemJob
        """
        return self._job

    @job.setter
    def job(self, job):
        """Sets the job of this JobIntervalProblem.


        :param job: The job of this JobIntervalProblem.  # noqa: E501
        :type: AnyOfJobIntervalProblemJob
        """

        self._job = job

    @property
    def job_interval_problem_actions(self):
        """Gets the job_interval_problem_actions of this JobIntervalProblem.  # noqa: E501


        :return: The job_interval_problem_actions of this JobIntervalProblem.  # noqa: E501
        :rtype: list[JobIntervalProblemAction]
        """
        return self._job_interval_problem_actions

    @job_interval_problem_actions.setter
    def job_interval_problem_actions(self, job_interval_problem_actions):
        """Sets the job_interval_problem_actions of this JobIntervalProblem.


        :param job_interval_problem_actions: The job_interval_problem_actions of this JobIntervalProblem.  # noqa: E501
        :type: list[JobIntervalProblemAction]
        """

        self._job_interval_problem_actions = job_interval_problem_actions

    @property
    def job_interval_problem_causes(self):
        """Gets the job_interval_problem_causes of this JobIntervalProblem.  # noqa: E501


        :return: The job_interval_problem_causes of this JobIntervalProblem.  # noqa: E501
        :rtype: list[JobIntervalProblemCause]
        """
        return self._job_interval_problem_causes

    @job_interval_problem_causes.setter
    def job_interval_problem_causes(self, job_interval_problem_causes):
        """Sets the job_interval_problem_causes of this JobIntervalProblem.


        :param job_interval_problem_causes: The job_interval_problem_causes of this JobIntervalProblem.  # noqa: E501
        :type: list[JobIntervalProblemCause]
        """

        self._job_interval_problem_causes = job_interval_problem_causes

    @property
    def job_interval_problem_date_ors(self):
        """Gets the job_interval_problem_date_ors of this JobIntervalProblem.  # noqa: E501


        :return: The job_interval_problem_date_ors of this JobIntervalProblem.  # noqa: E501
        :rtype: list[JobIntervalProblemDateOr]
        """
        return self._job_interval_problem_date_ors

    @job_interval_problem_date_ors.setter
    def job_interval_problem_date_ors(self, job_interval_problem_date_ors):
        """Sets the job_interval_problem_date_ors of this JobIntervalProblem.


        :param job_interval_problem_date_ors: The job_interval_problem_date_ors of this JobIntervalProblem.  # noqa: E501
        :type: list[JobIntervalProblemDateOr]
        """

        self._job_interval_problem_date_ors = job_interval_problem_date_ors

    @property
    def opscondition(self):
        """Gets the opscondition of this JobIntervalProblem.  # noqa: E501


        :return: The opscondition of this JobIntervalProblem.  # noqa: E501
        :rtype: str
        """
        return self._opscondition

    @opscondition.setter
    def opscondition(self, opscondition):
        """Sets the opscondition of this JobIntervalProblem.


        :param opscondition: The opscondition of this JobIntervalProblem.  # noqa: E501
        :type: str
        """

        self._opscondition = opscondition

    @property
    def potentialseverity(self):
        """Gets the potentialseverity of this JobIntervalProblem.  # noqa: E501


        :return: The potentialseverity of this JobIntervalProblem.  # noqa: E501
        :rtype: str
        """
        return self._potentialseverity

    @potentialseverity.setter
    def potentialseverity(self, potentialseverity):
        """Sets the potentialseverity of this JobIntervalProblem.


        :param potentialseverity: The potentialseverity of this JobIntervalProblem.  # noqa: E501
        :type: str
        """

        self._potentialseverity = potentialseverity

    @property
    def problemsystem1(self):
        """Gets the problemsystem1 of this JobIntervalProblem.  # noqa: E501


        :return: The problemsystem1 of this JobIntervalProblem.  # noqa: E501
        :rtype: str
        """
        return self._problemsystem1

    @problemsystem1.setter
    def problemsystem1(self, problemsystem1):
        """Sets the problemsystem1 of this JobIntervalProblem.


        :param problemsystem1: The problemsystem1 of this JobIntervalProblem.  # noqa: E501
        :type: str
        """

        self._problemsystem1 = problemsystem1

    @property
    def problemsystem2(self):
        """Gets the problemsystem2 of this JobIntervalProblem.  # noqa: E501


        :return: The problemsystem2 of this JobIntervalProblem.  # noqa: E501
        :rtype: str
        """
        return self._problemsystem2

    @problemsystem2.setter
    def problemsystem2(self, problemsystem2):
        """Sets the problemsystem2 of this JobIntervalProblem.


        :param problemsystem2: The problemsystem2 of this JobIntervalProblem.  # noqa: E501
        :type: str
        """

        self._problemsystem2 = problemsystem2

    @property
    def problemsystem3(self):
        """Gets the problemsystem3 of this JobIntervalProblem.  # noqa: E501


        :return: The problemsystem3 of this JobIntervalProblem.  # noqa: E501
        :rtype: str
        """
        return self._problemsystem3

    @problemsystem3.setter
    def problemsystem3(self, problemsystem3):
        """Sets the problemsystem3 of this JobIntervalProblem.


        :param problemsystem3: The problemsystem3 of this JobIntervalProblem.  # noqa: E501
        :type: str
        """

        self._problemsystem3 = problemsystem3

    @property
    def refno(self):
        """Gets the refno of this JobIntervalProblem.  # noqa: E501


        :return: The refno of this JobIntervalProblem.  # noqa: E501
        :rtype: str
        """
        return self._refno

    @refno.setter
    def refno(self, refno):
        """Sets the refno of this JobIntervalProblem.


        :param refno: The refno of this JobIntervalProblem.  # noqa: E501
        :type: str
        """

        self._refno = refno

    @property
    def reportdaycalc(self):
        """Gets the reportdaycalc of this JobIntervalProblem.  # noqa: E501


        :return: The reportdaycalc of this JobIntervalProblem.  # noqa: E501
        :rtype: OneOfJobIntervalProblemReportdaycalc
        """
        return self._reportdaycalc

    @reportdaycalc.setter
    def reportdaycalc(self, reportdaycalc):
        """Sets the reportdaycalc of this JobIntervalProblem.


        :param reportdaycalc: The reportdaycalc of this JobIntervalProblem.  # noqa: E501
        :type: OneOfJobIntervalProblemReportdaycalc
        """

        self._reportdaycalc = reportdaycalc

    @property
    def reportnocalc(self):
        """Gets the reportnocalc of this JobIntervalProblem.  # noqa: E501


        :return: The reportnocalc of this JobIntervalProblem.  # noqa: E501
        :rtype: OneOfJobIntervalProblemReportnocalc
        """
        return self._reportnocalc

    @reportnocalc.setter
    def reportnocalc(self, reportnocalc):
        """Sets the reportnocalc of this JobIntervalProblem.


        :param reportnocalc: The reportnocalc of this JobIntervalProblem.  # noqa: E501
        :type: OneOfJobIntervalProblemReportnocalc
        """

        self._reportnocalc = reportnocalc

    @property
    def rigcrewnamecalc(self):
        """Gets the rigcrewnamecalc of this JobIntervalProblem.  # noqa: E501


        :return: The rigcrewnamecalc of this JobIntervalProblem.  # noqa: E501
        :rtype: str
        """
        return self._rigcrewnamecalc

    @rigcrewnamecalc.setter
    def rigcrewnamecalc(self, rigcrewnamecalc):
        """Sets the rigcrewnamecalc of this JobIntervalProblem.


        :param rigcrewnamecalc: The rigcrewnamecalc of this JobIntervalProblem.  # noqa: E501
        :type: str
        """

        self._rigcrewnamecalc = rigcrewnamecalc

    @property
    def severity(self):
        """Gets the severity of this JobIntervalProblem.  # noqa: E501


        :return: The severity of this JobIntervalProblem.  # noqa: E501
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this JobIntervalProblem.


        :param severity: The severity of this JobIntervalProblem.  # noqa: E501
        :type: str
        """

        self._severity = severity

    @property
    def status(self):
        """Gets the status of this JobIntervalProblem.  # noqa: E501


        :return: The status of this JobIntervalProblem.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this JobIntervalProblem.


        :param status: The status of this JobIntervalProblem.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def syscreatedate(self):
        """Gets the syscreatedate of this JobIntervalProblem.  # noqa: E501


        :return: The syscreatedate of this JobIntervalProblem.  # noqa: E501
        :rtype: datetime
        """
        return self._syscreatedate

    @syscreatedate.setter
    def syscreatedate(self, syscreatedate):
        """Sets the syscreatedate of this JobIntervalProblem.


        :param syscreatedate: The syscreatedate of this JobIntervalProblem.  # noqa: E501
        :type: datetime
        """

        self._syscreatedate = syscreatedate

    @property
    def syscreateuser(self):
        """Gets the syscreateuser of this JobIntervalProblem.  # noqa: E501


        :return: The syscreateuser of this JobIntervalProblem.  # noqa: E501
        :rtype: str
        """
        return self._syscreateuser

    @syscreateuser.setter
    def syscreateuser(self, syscreateuser):
        """Sets the syscreateuser of this JobIntervalProblem.


        :param syscreateuser: The syscreateuser of this JobIntervalProblem.  # noqa: E501
        :type: str
        """

        self._syscreateuser = syscreateuser

    @property
    def syslockchildren(self):
        """Gets the syslockchildren of this JobIntervalProblem.  # noqa: E501


        :return: The syslockchildren of this JobIntervalProblem.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildren

    @syslockchildren.setter
    def syslockchildren(self, syslockchildren):
        """Sets the syslockchildren of this JobIntervalProblem.


        :param syslockchildren: The syslockchildren of this JobIntervalProblem.  # noqa: E501
        :type: int
        """

        self._syslockchildren = syslockchildren

    @property
    def syslockchildrenui(self):
        """Gets the syslockchildrenui of this JobIntervalProblem.  # noqa: E501


        :return: The syslockchildrenui of this JobIntervalProblem.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildrenui

    @syslockchildrenui.setter
    def syslockchildrenui(self, syslockchildrenui):
        """Sets the syslockchildrenui of this JobIntervalProblem.


        :param syslockchildrenui: The syslockchildrenui of this JobIntervalProblem.  # noqa: E501
        :type: int
        """

        self._syslockchildrenui = syslockchildrenui

    @property
    def syslockdate(self):
        """Gets the syslockdate of this JobIntervalProblem.  # noqa: E501


        :return: The syslockdate of this JobIntervalProblem.  # noqa: E501
        :rtype: datetime
        """
        return self._syslockdate

    @syslockdate.setter
    def syslockdate(self, syslockdate):
        """Sets the syslockdate of this JobIntervalProblem.


        :param syslockdate: The syslockdate of this JobIntervalProblem.  # noqa: E501
        :type: datetime
        """

        self._syslockdate = syslockdate

    @property
    def syslockme(self):
        """Gets the syslockme of this JobIntervalProblem.  # noqa: E501


        :return: The syslockme of this JobIntervalProblem.  # noqa: E501
        :rtype: int
        """
        return self._syslockme

    @syslockme.setter
    def syslockme(self, syslockme):
        """Sets the syslockme of this JobIntervalProblem.


        :param syslockme: The syslockme of this JobIntervalProblem.  # noqa: E501
        :type: int
        """

        self._syslockme = syslockme

    @property
    def syslockmeui(self):
        """Gets the syslockmeui of this JobIntervalProblem.  # noqa: E501


        :return: The syslockmeui of this JobIntervalProblem.  # noqa: E501
        :rtype: int
        """
        return self._syslockmeui

    @syslockmeui.setter
    def syslockmeui(self, syslockmeui):
        """Sets the syslockmeui of this JobIntervalProblem.


        :param syslockmeui: The syslockmeui of this JobIntervalProblem.  # noqa: E501
        :type: int
        """

        self._syslockmeui = syslockmeui

    @property
    def sysmoddate(self):
        """Gets the sysmoddate of this JobIntervalProblem.  # noqa: E501


        :return: The sysmoddate of this JobIntervalProblem.  # noqa: E501
        :rtype: datetime
        """
        return self._sysmoddate

    @sysmoddate.setter
    def sysmoddate(self, sysmoddate):
        """Sets the sysmoddate of this JobIntervalProblem.


        :param sysmoddate: The sysmoddate of this JobIntervalProblem.  # noqa: E501
        :type: datetime
        """

        self._sysmoddate = sysmoddate

    @property
    def sysmoduser(self):
        """Gets the sysmoduser of this JobIntervalProblem.  # noqa: E501


        :return: The sysmoduser of this JobIntervalProblem.  # noqa: E501
        :rtype: str
        """
        return self._sysmoduser

    @sysmoduser.setter
    def sysmoduser(self, sysmoduser):
        """Sets the sysmoduser of this JobIntervalProblem.


        :param sysmoduser: The sysmoduser of this JobIntervalProblem.  # noqa: E501
        :type: str
        """

        self._sysmoduser = sysmoduser

    @property
    def sysseq(self):
        """Gets the sysseq of this JobIntervalProblem.  # noqa: E501


        :return: The sysseq of this JobIntervalProblem.  # noqa: E501
        :rtype: int
        """
        return self._sysseq

    @sysseq.setter
    def sysseq(self, sysseq):
        """Sets the sysseq of this JobIntervalProblem.


        :param sysseq: The sysseq of this JobIntervalProblem.  # noqa: E501
        :type: int
        """

        self._sysseq = sysseq

    @property
    def systag(self):
        """Gets the systag of this JobIntervalProblem.  # noqa: E501


        :return: The systag of this JobIntervalProblem.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this JobIntervalProblem.


        :param systag: The systag of this JobIntervalProblem.  # noqa: E501
        :type: str
        """

        self._systag = systag

    @property
    def typ(self):
        """Gets the typ of this JobIntervalProblem.  # noqa: E501


        :return: The typ of this JobIntervalProblem.  # noqa: E501
        :rtype: str
        """
        return self._typ

    @typ.setter
    def typ(self, typ):
        """Sets the typ of this JobIntervalProblem.


        :param typ: The typ of this JobIntervalProblem.  # noqa: E501
        :type: str
        """

        self._typ = typ

    @property
    def typdetail(self):
        """Gets the typdetail of this JobIntervalProblem.  # noqa: E501


        :return: The typdetail of this JobIntervalProblem.  # noqa: E501
        :rtype: str
        """
        return self._typdetail

    @typdetail.setter
    def typdetail(self, typdetail):
        """Sets the typdetail of this JobIntervalProblem.


        :param typdetail: The typdetail of this JobIntervalProblem.  # noqa: E501
        :type: str
        """

        self._typdetail = typdetail

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JobIntervalProblem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobIntervalProblem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
