# coding: utf-8

"""
    OData Service for namespace Default

    This OData service is located at http://localhost  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class StimIntFluid(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'com': 'str',
        'des': 'str',
        'environmenttyp': 'str',
        'evalmethod': 'str',
        'filtersz': 'OneOfStimIntFluidFiltersz',
        'fluiddensity': 'OneOfStimIntFluidFluiddensity',
        'fluidname': 'str',
        'idrec': 'str',
        'idrecparent': 'str',
        'idwell': 'str',
        'masstotal': 'OneOfStimIntFluidMasstotal',
        'ph': 'OneOfStimIntFluidPh',
        'presvapor': 'OneOfStimIntFluidPresvapor',
        'purpose': 'str',
        'source': 'str',
        'stim_int': 'AnyOfStimIntFluidStimInt',
        'stim_int_fluid_adds': 'list[StimIntFluidAdd]',
        'syscreatedate': 'datetime',
        'syscreateuser': 'str',
        'syslockchildren': 'int',
        'syslockchildrenui': 'int',
        'syslockdate': 'datetime',
        'syslockme': 'int',
        'syslockmeui': 'int',
        'sysmoddate': 'datetime',
        'sysmoduser': 'str',
        'systag': 'str',
        'tempref': 'OneOfStimIntFluidTempref',
        'typ1': 'str',
        'typ2': 'str',
        'usernum1': 'OneOfStimIntFluidUsernum1',
        'usertxt1': 'str',
        'vendor': 'str',
        'vendorcode': 'str',
        'vendorfluidname': 'str',
        'viscosity': 'OneOfStimIntFluidViscosity',
        'volume': 'OneOfStimIntFluidVolume',
        'volumedesign': 'OneOfStimIntFluidVolumedesign'
    }

    attribute_map = {
        'com': 'com',
        'des': 'des',
        'environmenttyp': 'environmenttyp',
        'evalmethod': 'evalmethod',
        'filtersz': 'filtersz',
        'fluiddensity': 'fluiddensity',
        'fluidname': 'fluidname',
        'idrec': 'idrec',
        'idrecparent': 'idrecparent',
        'idwell': 'idwell',
        'masstotal': 'masstotal',
        'ph': 'ph',
        'presvapor': 'presvapor',
        'purpose': 'purpose',
        'source': 'source',
        'stim_int': 'stimInt',
        'stim_int_fluid_adds': 'stimIntFluidAdds',
        'syscreatedate': 'syscreatedate',
        'syscreateuser': 'syscreateuser',
        'syslockchildren': 'syslockchildren',
        'syslockchildrenui': 'syslockchildrenui',
        'syslockdate': 'syslockdate',
        'syslockme': 'syslockme',
        'syslockmeui': 'syslockmeui',
        'sysmoddate': 'sysmoddate',
        'sysmoduser': 'sysmoduser',
        'systag': 'systag',
        'tempref': 'tempref',
        'typ1': 'typ1',
        'typ2': 'typ2',
        'usernum1': 'usernum1',
        'usertxt1': 'usertxt1',
        'vendor': 'vendor',
        'vendorcode': 'vendorcode',
        'vendorfluidname': 'vendorfluidname',
        'viscosity': 'viscosity',
        'volume': 'volume',
        'volumedesign': 'volumedesign'
    }

    def __init__(self, com=None, des=None, environmenttyp=None, evalmethod=None, filtersz=None, fluiddensity=None, fluidname=None, idrec=None, idrecparent=None, idwell=None, masstotal=None, ph=None, presvapor=None, purpose=None, source=None, stim_int=None, stim_int_fluid_adds=None, syscreatedate=None, syscreateuser=None, syslockchildren=None, syslockchildrenui=None, syslockdate=None, syslockme=None, syslockmeui=None, sysmoddate=None, sysmoduser=None, systag=None, tempref=None, typ1=None, typ2=None, usernum1=None, usertxt1=None, vendor=None, vendorcode=None, vendorfluidname=None, viscosity=None, volume=None, volumedesign=None):  # noqa: E501
        """StimIntFluid - a model defined in Swagger"""  # noqa: E501
        self._com = None
        self._des = None
        self._environmenttyp = None
        self._evalmethod = None
        self._filtersz = None
        self._fluiddensity = None
        self._fluidname = None
        self._idrec = None
        self._idrecparent = None
        self._idwell = None
        self._masstotal = None
        self._ph = None
        self._presvapor = None
        self._purpose = None
        self._source = None
        self._stim_int = None
        self._stim_int_fluid_adds = None
        self._syscreatedate = None
        self._syscreateuser = None
        self._syslockchildren = None
        self._syslockchildrenui = None
        self._syslockdate = None
        self._syslockme = None
        self._syslockmeui = None
        self._sysmoddate = None
        self._sysmoduser = None
        self._systag = None
        self._tempref = None
        self._typ1 = None
        self._typ2 = None
        self._usernum1 = None
        self._usertxt1 = None
        self._vendor = None
        self._vendorcode = None
        self._vendorfluidname = None
        self._viscosity = None
        self._volume = None
        self._volumedesign = None
        self.discriminator = None
        if com is not None:
            self.com = com
        if des is not None:
            self.des = des
        if environmenttyp is not None:
            self.environmenttyp = environmenttyp
        if evalmethod is not None:
            self.evalmethod = evalmethod
        if filtersz is not None:
            self.filtersz = filtersz
        if fluiddensity is not None:
            self.fluiddensity = fluiddensity
        if fluidname is not None:
            self.fluidname = fluidname
        if idrec is not None:
            self.idrec = idrec
        if idrecparent is not None:
            self.idrecparent = idrecparent
        if idwell is not None:
            self.idwell = idwell
        if masstotal is not None:
            self.masstotal = masstotal
        if ph is not None:
            self.ph = ph
        if presvapor is not None:
            self.presvapor = presvapor
        if purpose is not None:
            self.purpose = purpose
        if source is not None:
            self.source = source
        if stim_int is not None:
            self.stim_int = stim_int
        if stim_int_fluid_adds is not None:
            self.stim_int_fluid_adds = stim_int_fluid_adds
        if syscreatedate is not None:
            self.syscreatedate = syscreatedate
        if syscreateuser is not None:
            self.syscreateuser = syscreateuser
        if syslockchildren is not None:
            self.syslockchildren = syslockchildren
        if syslockchildrenui is not None:
            self.syslockchildrenui = syslockchildrenui
        if syslockdate is not None:
            self.syslockdate = syslockdate
        if syslockme is not None:
            self.syslockme = syslockme
        if syslockmeui is not None:
            self.syslockmeui = syslockmeui
        if sysmoddate is not None:
            self.sysmoddate = sysmoddate
        if sysmoduser is not None:
            self.sysmoduser = sysmoduser
        if systag is not None:
            self.systag = systag
        if tempref is not None:
            self.tempref = tempref
        if typ1 is not None:
            self.typ1 = typ1
        if typ2 is not None:
            self.typ2 = typ2
        if usernum1 is not None:
            self.usernum1 = usernum1
        if usertxt1 is not None:
            self.usertxt1 = usertxt1
        if vendor is not None:
            self.vendor = vendor
        if vendorcode is not None:
            self.vendorcode = vendorcode
        if vendorfluidname is not None:
            self.vendorfluidname = vendorfluidname
        if viscosity is not None:
            self.viscosity = viscosity
        if volume is not None:
            self.volume = volume
        if volumedesign is not None:
            self.volumedesign = volumedesign

    @property
    def com(self):
        """Gets the com of this StimIntFluid.  # noqa: E501


        :return: The com of this StimIntFluid.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this StimIntFluid.


        :param com: The com of this StimIntFluid.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def des(self):
        """Gets the des of this StimIntFluid.  # noqa: E501


        :return: The des of this StimIntFluid.  # noqa: E501
        :rtype: str
        """
        return self._des

    @des.setter
    def des(self, des):
        """Sets the des of this StimIntFluid.


        :param des: The des of this StimIntFluid.  # noqa: E501
        :type: str
        """

        self._des = des

    @property
    def environmenttyp(self):
        """Gets the environmenttyp of this StimIntFluid.  # noqa: E501


        :return: The environmenttyp of this StimIntFluid.  # noqa: E501
        :rtype: str
        """
        return self._environmenttyp

    @environmenttyp.setter
    def environmenttyp(self, environmenttyp):
        """Sets the environmenttyp of this StimIntFluid.


        :param environmenttyp: The environmenttyp of this StimIntFluid.  # noqa: E501
        :type: str
        """

        self._environmenttyp = environmenttyp

    @property
    def evalmethod(self):
        """Gets the evalmethod of this StimIntFluid.  # noqa: E501


        :return: The evalmethod of this StimIntFluid.  # noqa: E501
        :rtype: str
        """
        return self._evalmethod

    @evalmethod.setter
    def evalmethod(self, evalmethod):
        """Sets the evalmethod of this StimIntFluid.


        :param evalmethod: The evalmethod of this StimIntFluid.  # noqa: E501
        :type: str
        """

        self._evalmethod = evalmethod

    @property
    def filtersz(self):
        """Gets the filtersz of this StimIntFluid.  # noqa: E501


        :return: The filtersz of this StimIntFluid.  # noqa: E501
        :rtype: OneOfStimIntFluidFiltersz
        """
        return self._filtersz

    @filtersz.setter
    def filtersz(self, filtersz):
        """Sets the filtersz of this StimIntFluid.


        :param filtersz: The filtersz of this StimIntFluid.  # noqa: E501
        :type: OneOfStimIntFluidFiltersz
        """

        self._filtersz = filtersz

    @property
    def fluiddensity(self):
        """Gets the fluiddensity of this StimIntFluid.  # noqa: E501


        :return: The fluiddensity of this StimIntFluid.  # noqa: E501
        :rtype: OneOfStimIntFluidFluiddensity
        """
        return self._fluiddensity

    @fluiddensity.setter
    def fluiddensity(self, fluiddensity):
        """Sets the fluiddensity of this StimIntFluid.


        :param fluiddensity: The fluiddensity of this StimIntFluid.  # noqa: E501
        :type: OneOfStimIntFluidFluiddensity
        """

        self._fluiddensity = fluiddensity

    @property
    def fluidname(self):
        """Gets the fluidname of this StimIntFluid.  # noqa: E501


        :return: The fluidname of this StimIntFluid.  # noqa: E501
        :rtype: str
        """
        return self._fluidname

    @fluidname.setter
    def fluidname(self, fluidname):
        """Sets the fluidname of this StimIntFluid.


        :param fluidname: The fluidname of this StimIntFluid.  # noqa: E501
        :type: str
        """

        self._fluidname = fluidname

    @property
    def idrec(self):
        """Gets the idrec of this StimIntFluid.  # noqa: E501


        :return: The idrec of this StimIntFluid.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this StimIntFluid.


        :param idrec: The idrec of this StimIntFluid.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecparent(self):
        """Gets the idrecparent of this StimIntFluid.  # noqa: E501


        :return: The idrecparent of this StimIntFluid.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this StimIntFluid.


        :param idrecparent: The idrecparent of this StimIntFluid.  # noqa: E501
        :type: str
        """

        self._idrecparent = idrecparent

    @property
    def idwell(self):
        """Gets the idwell of this StimIntFluid.  # noqa: E501


        :return: The idwell of this StimIntFluid.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this StimIntFluid.


        :param idwell: The idwell of this StimIntFluid.  # noqa: E501
        :type: str
        """

        self._idwell = idwell

    @property
    def masstotal(self):
        """Gets the masstotal of this StimIntFluid.  # noqa: E501


        :return: The masstotal of this StimIntFluid.  # noqa: E501
        :rtype: OneOfStimIntFluidMasstotal
        """
        return self._masstotal

    @masstotal.setter
    def masstotal(self, masstotal):
        """Sets the masstotal of this StimIntFluid.


        :param masstotal: The masstotal of this StimIntFluid.  # noqa: E501
        :type: OneOfStimIntFluidMasstotal
        """

        self._masstotal = masstotal

    @property
    def ph(self):
        """Gets the ph of this StimIntFluid.  # noqa: E501


        :return: The ph of this StimIntFluid.  # noqa: E501
        :rtype: OneOfStimIntFluidPh
        """
        return self._ph

    @ph.setter
    def ph(self, ph):
        """Sets the ph of this StimIntFluid.


        :param ph: The ph of this StimIntFluid.  # noqa: E501
        :type: OneOfStimIntFluidPh
        """

        self._ph = ph

    @property
    def presvapor(self):
        """Gets the presvapor of this StimIntFluid.  # noqa: E501


        :return: The presvapor of this StimIntFluid.  # noqa: E501
        :rtype: OneOfStimIntFluidPresvapor
        """
        return self._presvapor

    @presvapor.setter
    def presvapor(self, presvapor):
        """Sets the presvapor of this StimIntFluid.


        :param presvapor: The presvapor of this StimIntFluid.  # noqa: E501
        :type: OneOfStimIntFluidPresvapor
        """

        self._presvapor = presvapor

    @property
    def purpose(self):
        """Gets the purpose of this StimIntFluid.  # noqa: E501


        :return: The purpose of this StimIntFluid.  # noqa: E501
        :rtype: str
        """
        return self._purpose

    @purpose.setter
    def purpose(self, purpose):
        """Sets the purpose of this StimIntFluid.


        :param purpose: The purpose of this StimIntFluid.  # noqa: E501
        :type: str
        """

        self._purpose = purpose

    @property
    def source(self):
        """Gets the source of this StimIntFluid.  # noqa: E501


        :return: The source of this StimIntFluid.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this StimIntFluid.


        :param source: The source of this StimIntFluid.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def stim_int(self):
        """Gets the stim_int of this StimIntFluid.  # noqa: E501


        :return: The stim_int of this StimIntFluid.  # noqa: E501
        :rtype: AnyOfStimIntFluidStimInt
        """
        return self._stim_int

    @stim_int.setter
    def stim_int(self, stim_int):
        """Sets the stim_int of this StimIntFluid.


        :param stim_int: The stim_int of this StimIntFluid.  # noqa: E501
        :type: AnyOfStimIntFluidStimInt
        """

        self._stim_int = stim_int

    @property
    def stim_int_fluid_adds(self):
        """Gets the stim_int_fluid_adds of this StimIntFluid.  # noqa: E501


        :return: The stim_int_fluid_adds of this StimIntFluid.  # noqa: E501
        :rtype: list[StimIntFluidAdd]
        """
        return self._stim_int_fluid_adds

    @stim_int_fluid_adds.setter
    def stim_int_fluid_adds(self, stim_int_fluid_adds):
        """Sets the stim_int_fluid_adds of this StimIntFluid.


        :param stim_int_fluid_adds: The stim_int_fluid_adds of this StimIntFluid.  # noqa: E501
        :type: list[StimIntFluidAdd]
        """

        self._stim_int_fluid_adds = stim_int_fluid_adds

    @property
    def syscreatedate(self):
        """Gets the syscreatedate of this StimIntFluid.  # noqa: E501


        :return: The syscreatedate of this StimIntFluid.  # noqa: E501
        :rtype: datetime
        """
        return self._syscreatedate

    @syscreatedate.setter
    def syscreatedate(self, syscreatedate):
        """Sets the syscreatedate of this StimIntFluid.


        :param syscreatedate: The syscreatedate of this StimIntFluid.  # noqa: E501
        :type: datetime
        """

        self._syscreatedate = syscreatedate

    @property
    def syscreateuser(self):
        """Gets the syscreateuser of this StimIntFluid.  # noqa: E501


        :return: The syscreateuser of this StimIntFluid.  # noqa: E501
        :rtype: str
        """
        return self._syscreateuser

    @syscreateuser.setter
    def syscreateuser(self, syscreateuser):
        """Sets the syscreateuser of this StimIntFluid.


        :param syscreateuser: The syscreateuser of this StimIntFluid.  # noqa: E501
        :type: str
        """

        self._syscreateuser = syscreateuser

    @property
    def syslockchildren(self):
        """Gets the syslockchildren of this StimIntFluid.  # noqa: E501


        :return: The syslockchildren of this StimIntFluid.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildren

    @syslockchildren.setter
    def syslockchildren(self, syslockchildren):
        """Sets the syslockchildren of this StimIntFluid.


        :param syslockchildren: The syslockchildren of this StimIntFluid.  # noqa: E501
        :type: int
        """

        self._syslockchildren = syslockchildren

    @property
    def syslockchildrenui(self):
        """Gets the syslockchildrenui of this StimIntFluid.  # noqa: E501


        :return: The syslockchildrenui of this StimIntFluid.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildrenui

    @syslockchildrenui.setter
    def syslockchildrenui(self, syslockchildrenui):
        """Sets the syslockchildrenui of this StimIntFluid.


        :param syslockchildrenui: The syslockchildrenui of this StimIntFluid.  # noqa: E501
        :type: int
        """

        self._syslockchildrenui = syslockchildrenui

    @property
    def syslockdate(self):
        """Gets the syslockdate of this StimIntFluid.  # noqa: E501


        :return: The syslockdate of this StimIntFluid.  # noqa: E501
        :rtype: datetime
        """
        return self._syslockdate

    @syslockdate.setter
    def syslockdate(self, syslockdate):
        """Sets the syslockdate of this StimIntFluid.


        :param syslockdate: The syslockdate of this StimIntFluid.  # noqa: E501
        :type: datetime
        """

        self._syslockdate = syslockdate

    @property
    def syslockme(self):
        """Gets the syslockme of this StimIntFluid.  # noqa: E501


        :return: The syslockme of this StimIntFluid.  # noqa: E501
        :rtype: int
        """
        return self._syslockme

    @syslockme.setter
    def syslockme(self, syslockme):
        """Sets the syslockme of this StimIntFluid.


        :param syslockme: The syslockme of this StimIntFluid.  # noqa: E501
        :type: int
        """

        self._syslockme = syslockme

    @property
    def syslockmeui(self):
        """Gets the syslockmeui of this StimIntFluid.  # noqa: E501


        :return: The syslockmeui of this StimIntFluid.  # noqa: E501
        :rtype: int
        """
        return self._syslockmeui

    @syslockmeui.setter
    def syslockmeui(self, syslockmeui):
        """Sets the syslockmeui of this StimIntFluid.


        :param syslockmeui: The syslockmeui of this StimIntFluid.  # noqa: E501
        :type: int
        """

        self._syslockmeui = syslockmeui

    @property
    def sysmoddate(self):
        """Gets the sysmoddate of this StimIntFluid.  # noqa: E501


        :return: The sysmoddate of this StimIntFluid.  # noqa: E501
        :rtype: datetime
        """
        return self._sysmoddate

    @sysmoddate.setter
    def sysmoddate(self, sysmoddate):
        """Sets the sysmoddate of this StimIntFluid.


        :param sysmoddate: The sysmoddate of this StimIntFluid.  # noqa: E501
        :type: datetime
        """

        self._sysmoddate = sysmoddate

    @property
    def sysmoduser(self):
        """Gets the sysmoduser of this StimIntFluid.  # noqa: E501


        :return: The sysmoduser of this StimIntFluid.  # noqa: E501
        :rtype: str
        """
        return self._sysmoduser

    @sysmoduser.setter
    def sysmoduser(self, sysmoduser):
        """Sets the sysmoduser of this StimIntFluid.


        :param sysmoduser: The sysmoduser of this StimIntFluid.  # noqa: E501
        :type: str
        """

        self._sysmoduser = sysmoduser

    @property
    def systag(self):
        """Gets the systag of this StimIntFluid.  # noqa: E501


        :return: The systag of this StimIntFluid.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this StimIntFluid.


        :param systag: The systag of this StimIntFluid.  # noqa: E501
        :type: str
        """

        self._systag = systag

    @property
    def tempref(self):
        """Gets the tempref of this StimIntFluid.  # noqa: E501


        :return: The tempref of this StimIntFluid.  # noqa: E501
        :rtype: OneOfStimIntFluidTempref
        """
        return self._tempref

    @tempref.setter
    def tempref(self, tempref):
        """Sets the tempref of this StimIntFluid.


        :param tempref: The tempref of this StimIntFluid.  # noqa: E501
        :type: OneOfStimIntFluidTempref
        """

        self._tempref = tempref

    @property
    def typ1(self):
        """Gets the typ1 of this StimIntFluid.  # noqa: E501


        :return: The typ1 of this StimIntFluid.  # noqa: E501
        :rtype: str
        """
        return self._typ1

    @typ1.setter
    def typ1(self, typ1):
        """Sets the typ1 of this StimIntFluid.


        :param typ1: The typ1 of this StimIntFluid.  # noqa: E501
        :type: str
        """

        self._typ1 = typ1

    @property
    def typ2(self):
        """Gets the typ2 of this StimIntFluid.  # noqa: E501


        :return: The typ2 of this StimIntFluid.  # noqa: E501
        :rtype: str
        """
        return self._typ2

    @typ2.setter
    def typ2(self, typ2):
        """Sets the typ2 of this StimIntFluid.


        :param typ2: The typ2 of this StimIntFluid.  # noqa: E501
        :type: str
        """

        self._typ2 = typ2

    @property
    def usernum1(self):
        """Gets the usernum1 of this StimIntFluid.  # noqa: E501


        :return: The usernum1 of this StimIntFluid.  # noqa: E501
        :rtype: OneOfStimIntFluidUsernum1
        """
        return self._usernum1

    @usernum1.setter
    def usernum1(self, usernum1):
        """Sets the usernum1 of this StimIntFluid.


        :param usernum1: The usernum1 of this StimIntFluid.  # noqa: E501
        :type: OneOfStimIntFluidUsernum1
        """

        self._usernum1 = usernum1

    @property
    def usertxt1(self):
        """Gets the usertxt1 of this StimIntFluid.  # noqa: E501


        :return: The usertxt1 of this StimIntFluid.  # noqa: E501
        :rtype: str
        """
        return self._usertxt1

    @usertxt1.setter
    def usertxt1(self, usertxt1):
        """Sets the usertxt1 of this StimIntFluid.


        :param usertxt1: The usertxt1 of this StimIntFluid.  # noqa: E501
        :type: str
        """

        self._usertxt1 = usertxt1

    @property
    def vendor(self):
        """Gets the vendor of this StimIntFluid.  # noqa: E501


        :return: The vendor of this StimIntFluid.  # noqa: E501
        :rtype: str
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor):
        """Sets the vendor of this StimIntFluid.


        :param vendor: The vendor of this StimIntFluid.  # noqa: E501
        :type: str
        """

        self._vendor = vendor

    @property
    def vendorcode(self):
        """Gets the vendorcode of this StimIntFluid.  # noqa: E501


        :return: The vendorcode of this StimIntFluid.  # noqa: E501
        :rtype: str
        """
        return self._vendorcode

    @vendorcode.setter
    def vendorcode(self, vendorcode):
        """Sets the vendorcode of this StimIntFluid.


        :param vendorcode: The vendorcode of this StimIntFluid.  # noqa: E501
        :type: str
        """

        self._vendorcode = vendorcode

    @property
    def vendorfluidname(self):
        """Gets the vendorfluidname of this StimIntFluid.  # noqa: E501


        :return: The vendorfluidname of this StimIntFluid.  # noqa: E501
        :rtype: str
        """
        return self._vendorfluidname

    @vendorfluidname.setter
    def vendorfluidname(self, vendorfluidname):
        """Sets the vendorfluidname of this StimIntFluid.


        :param vendorfluidname: The vendorfluidname of this StimIntFluid.  # noqa: E501
        :type: str
        """

        self._vendorfluidname = vendorfluidname

    @property
    def viscosity(self):
        """Gets the viscosity of this StimIntFluid.  # noqa: E501


        :return: The viscosity of this StimIntFluid.  # noqa: E501
        :rtype: OneOfStimIntFluidViscosity
        """
        return self._viscosity

    @viscosity.setter
    def viscosity(self, viscosity):
        """Sets the viscosity of this StimIntFluid.


        :param viscosity: The viscosity of this StimIntFluid.  # noqa: E501
        :type: OneOfStimIntFluidViscosity
        """

        self._viscosity = viscosity

    @property
    def volume(self):
        """Gets the volume of this StimIntFluid.  # noqa: E501


        :return: The volume of this StimIntFluid.  # noqa: E501
        :rtype: OneOfStimIntFluidVolume
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this StimIntFluid.


        :param volume: The volume of this StimIntFluid.  # noqa: E501
        :type: OneOfStimIntFluidVolume
        """

        self._volume = volume

    @property
    def volumedesign(self):
        """Gets the volumedesign of this StimIntFluid.  # noqa: E501


        :return: The volumedesign of this StimIntFluid.  # noqa: E501
        :rtype: OneOfStimIntFluidVolumedesign
        """
        return self._volumedesign

    @volumedesign.setter
    def volumedesign(self, volumedesign):
        """Sets the volumedesign of this StimIntFluid.


        :param volumedesign: The volumedesign of this StimIntFluid.  # noqa: E501
        :type: OneOfStimIntFluidVolumedesign
        """

        self._volumedesign = volumedesign

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StimIntFluid, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StimIntFluid):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
