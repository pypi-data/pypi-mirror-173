# coding: utf-8

"""
    OData Service for namespace Default

    This OData service is located at http://localhost  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PumpingUnit(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'codeapi': 'str',
        'codenonapi': 'str',
        'com': 'str',
        'conditionend': 'str',
        'conditionstart': 'str',
        'crankpinholeno': 'int',
        'cranktyp': 'str',
        'des': 'str',
        'dttmend': 'datetime',
        'dttmlastoverhaul': 'datetime',
        'dttmstart': 'datetime',
        'gearboxdes': 'str',
        'gearboxratio': 'OneOfPumpingUnitGearboxratio',
        'gearboxsn': 'str',
        'gearboxtorquemaxin': 'OneOfPumpingUnitGearboxtorquemaxin',
        'idrec': 'str',
        'idrecjob': 'str',
        'idrecjobtk': 'str',
        'idrecrod': 'str',
        'idrecrodtk': 'str',
        'idwell': 'str',
        'lengthbeam': 'OneOfPumpingUnitLengthbeam',
        'loadpolishrodmax': 'OneOfPumpingUnitLoadpolishrodmax',
        'make': 'str',
        'model': 'str',
        'pitmanposmax': 'int',
        'proposed': 'int',
        'pumping_unit_counter_wts': 'list[PumpingUnitCounterWt]',
        'refid': 'str',
        'sn': 'str',
        'strokelengthmax': 'OneOfPumpingUnitStrokelengthmax',
        'syscreatedate': 'datetime',
        'syscreateuser': 'str',
        'syslockchildren': 'int',
        'syslockchildrenui': 'int',
        'syslockdate': 'datetime',
        'syslockme': 'int',
        'syslockmeui': 'int',
        'sysmoddate': 'datetime',
        'sysmoduser': 'str',
        'systag': 'str',
        'szsheave': 'OneOfPumpingUnitSzsheave',
        'typ': 'str',
        'usertxt1': 'str',
        'usertxt2': 'str',
        'wellheader': 'AnyOfPumpingUnitWellheader'
    }

    attribute_map = {
        'codeapi': 'codeapi',
        'codenonapi': 'codenonapi',
        'com': 'com',
        'conditionend': 'conditionend',
        'conditionstart': 'conditionstart',
        'crankpinholeno': 'crankpinholeno',
        'cranktyp': 'cranktyp',
        'des': 'des',
        'dttmend': 'dttmend',
        'dttmlastoverhaul': 'dttmlastoverhaul',
        'dttmstart': 'dttmstart',
        'gearboxdes': 'gearboxdes',
        'gearboxratio': 'gearboxratio',
        'gearboxsn': 'gearboxsn',
        'gearboxtorquemaxin': 'gearboxtorquemaxin',
        'idrec': 'idrec',
        'idrecjob': 'idrecjob',
        'idrecjobtk': 'idrecjobtk',
        'idrecrod': 'idrecrod',
        'idrecrodtk': 'idrecrodtk',
        'idwell': 'idwell',
        'lengthbeam': 'lengthbeam',
        'loadpolishrodmax': 'loadpolishrodmax',
        'make': 'make',
        'model': 'model',
        'pitmanposmax': 'pitmanposmax',
        'proposed': 'proposed',
        'pumping_unit_counter_wts': 'pumpingUnitCounterWts',
        'refid': 'refid',
        'sn': 'sn',
        'strokelengthmax': 'strokelengthmax',
        'syscreatedate': 'syscreatedate',
        'syscreateuser': 'syscreateuser',
        'syslockchildren': 'syslockchildren',
        'syslockchildrenui': 'syslockchildrenui',
        'syslockdate': 'syslockdate',
        'syslockme': 'syslockme',
        'syslockmeui': 'syslockmeui',
        'sysmoddate': 'sysmoddate',
        'sysmoduser': 'sysmoduser',
        'systag': 'systag',
        'szsheave': 'szsheave',
        'typ': 'typ',
        'usertxt1': 'usertxt1',
        'usertxt2': 'usertxt2',
        'wellheader': 'wellheader'
    }

    def __init__(self, codeapi=None, codenonapi=None, com=None, conditionend=None, conditionstart=None, crankpinholeno=None, cranktyp=None, des=None, dttmend=None, dttmlastoverhaul=None, dttmstart=None, gearboxdes=None, gearboxratio=None, gearboxsn=None, gearboxtorquemaxin=None, idrec=None, idrecjob=None, idrecjobtk=None, idrecrod=None, idrecrodtk=None, idwell=None, lengthbeam=None, loadpolishrodmax=None, make=None, model=None, pitmanposmax=None, proposed=None, pumping_unit_counter_wts=None, refid=None, sn=None, strokelengthmax=None, syscreatedate=None, syscreateuser=None, syslockchildren=None, syslockchildrenui=None, syslockdate=None, syslockme=None, syslockmeui=None, sysmoddate=None, sysmoduser=None, systag=None, szsheave=None, typ=None, usertxt1=None, usertxt2=None, wellheader=None):  # noqa: E501
        """PumpingUnit - a model defined in Swagger"""  # noqa: E501
        self._codeapi = None
        self._codenonapi = None
        self._com = None
        self._conditionend = None
        self._conditionstart = None
        self._crankpinholeno = None
        self._cranktyp = None
        self._des = None
        self._dttmend = None
        self._dttmlastoverhaul = None
        self._dttmstart = None
        self._gearboxdes = None
        self._gearboxratio = None
        self._gearboxsn = None
        self._gearboxtorquemaxin = None
        self._idrec = None
        self._idrecjob = None
        self._idrecjobtk = None
        self._idrecrod = None
        self._idrecrodtk = None
        self._idwell = None
        self._lengthbeam = None
        self._loadpolishrodmax = None
        self._make = None
        self._model = None
        self._pitmanposmax = None
        self._proposed = None
        self._pumping_unit_counter_wts = None
        self._refid = None
        self._sn = None
        self._strokelengthmax = None
        self._syscreatedate = None
        self._syscreateuser = None
        self._syslockchildren = None
        self._syslockchildrenui = None
        self._syslockdate = None
        self._syslockme = None
        self._syslockmeui = None
        self._sysmoddate = None
        self._sysmoduser = None
        self._systag = None
        self._szsheave = None
        self._typ = None
        self._usertxt1 = None
        self._usertxt2 = None
        self._wellheader = None
        self.discriminator = None
        if codeapi is not None:
            self.codeapi = codeapi
        if codenonapi is not None:
            self.codenonapi = codenonapi
        if com is not None:
            self.com = com
        if conditionend is not None:
            self.conditionend = conditionend
        if conditionstart is not None:
            self.conditionstart = conditionstart
        if crankpinholeno is not None:
            self.crankpinholeno = crankpinholeno
        if cranktyp is not None:
            self.cranktyp = cranktyp
        if des is not None:
            self.des = des
        if dttmend is not None:
            self.dttmend = dttmend
        if dttmlastoverhaul is not None:
            self.dttmlastoverhaul = dttmlastoverhaul
        if dttmstart is not None:
            self.dttmstart = dttmstart
        if gearboxdes is not None:
            self.gearboxdes = gearboxdes
        if gearboxratio is not None:
            self.gearboxratio = gearboxratio
        if gearboxsn is not None:
            self.gearboxsn = gearboxsn
        if gearboxtorquemaxin is not None:
            self.gearboxtorquemaxin = gearboxtorquemaxin
        if idrec is not None:
            self.idrec = idrec
        if idrecjob is not None:
            self.idrecjob = idrecjob
        if idrecjobtk is not None:
            self.idrecjobtk = idrecjobtk
        if idrecrod is not None:
            self.idrecrod = idrecrod
        if idrecrodtk is not None:
            self.idrecrodtk = idrecrodtk
        if idwell is not None:
            self.idwell = idwell
        if lengthbeam is not None:
            self.lengthbeam = lengthbeam
        if loadpolishrodmax is not None:
            self.loadpolishrodmax = loadpolishrodmax
        if make is not None:
            self.make = make
        if model is not None:
            self.model = model
        if pitmanposmax is not None:
            self.pitmanposmax = pitmanposmax
        if proposed is not None:
            self.proposed = proposed
        if pumping_unit_counter_wts is not None:
            self.pumping_unit_counter_wts = pumping_unit_counter_wts
        if refid is not None:
            self.refid = refid
        if sn is not None:
            self.sn = sn
        if strokelengthmax is not None:
            self.strokelengthmax = strokelengthmax
        if syscreatedate is not None:
            self.syscreatedate = syscreatedate
        if syscreateuser is not None:
            self.syscreateuser = syscreateuser
        if syslockchildren is not None:
            self.syslockchildren = syslockchildren
        if syslockchildrenui is not None:
            self.syslockchildrenui = syslockchildrenui
        if syslockdate is not None:
            self.syslockdate = syslockdate
        if syslockme is not None:
            self.syslockme = syslockme
        if syslockmeui is not None:
            self.syslockmeui = syslockmeui
        if sysmoddate is not None:
            self.sysmoddate = sysmoddate
        if sysmoduser is not None:
            self.sysmoduser = sysmoduser
        if systag is not None:
            self.systag = systag
        if szsheave is not None:
            self.szsheave = szsheave
        if typ is not None:
            self.typ = typ
        if usertxt1 is not None:
            self.usertxt1 = usertxt1
        if usertxt2 is not None:
            self.usertxt2 = usertxt2
        if wellheader is not None:
            self.wellheader = wellheader

    @property
    def codeapi(self):
        """Gets the codeapi of this PumpingUnit.  # noqa: E501


        :return: The codeapi of this PumpingUnit.  # noqa: E501
        :rtype: str
        """
        return self._codeapi

    @codeapi.setter
    def codeapi(self, codeapi):
        """Sets the codeapi of this PumpingUnit.


        :param codeapi: The codeapi of this PumpingUnit.  # noqa: E501
        :type: str
        """

        self._codeapi = codeapi

    @property
    def codenonapi(self):
        """Gets the codenonapi of this PumpingUnit.  # noqa: E501


        :return: The codenonapi of this PumpingUnit.  # noqa: E501
        :rtype: str
        """
        return self._codenonapi

    @codenonapi.setter
    def codenonapi(self, codenonapi):
        """Sets the codenonapi of this PumpingUnit.


        :param codenonapi: The codenonapi of this PumpingUnit.  # noqa: E501
        :type: str
        """

        self._codenonapi = codenonapi

    @property
    def com(self):
        """Gets the com of this PumpingUnit.  # noqa: E501


        :return: The com of this PumpingUnit.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this PumpingUnit.


        :param com: The com of this PumpingUnit.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def conditionend(self):
        """Gets the conditionend of this PumpingUnit.  # noqa: E501


        :return: The conditionend of this PumpingUnit.  # noqa: E501
        :rtype: str
        """
        return self._conditionend

    @conditionend.setter
    def conditionend(self, conditionend):
        """Sets the conditionend of this PumpingUnit.


        :param conditionend: The conditionend of this PumpingUnit.  # noqa: E501
        :type: str
        """

        self._conditionend = conditionend

    @property
    def conditionstart(self):
        """Gets the conditionstart of this PumpingUnit.  # noqa: E501


        :return: The conditionstart of this PumpingUnit.  # noqa: E501
        :rtype: str
        """
        return self._conditionstart

    @conditionstart.setter
    def conditionstart(self, conditionstart):
        """Sets the conditionstart of this PumpingUnit.


        :param conditionstart: The conditionstart of this PumpingUnit.  # noqa: E501
        :type: str
        """

        self._conditionstart = conditionstart

    @property
    def crankpinholeno(self):
        """Gets the crankpinholeno of this PumpingUnit.  # noqa: E501


        :return: The crankpinholeno of this PumpingUnit.  # noqa: E501
        :rtype: int
        """
        return self._crankpinholeno

    @crankpinholeno.setter
    def crankpinholeno(self, crankpinholeno):
        """Sets the crankpinholeno of this PumpingUnit.


        :param crankpinholeno: The crankpinholeno of this PumpingUnit.  # noqa: E501
        :type: int
        """

        self._crankpinholeno = crankpinholeno

    @property
    def cranktyp(self):
        """Gets the cranktyp of this PumpingUnit.  # noqa: E501


        :return: The cranktyp of this PumpingUnit.  # noqa: E501
        :rtype: str
        """
        return self._cranktyp

    @cranktyp.setter
    def cranktyp(self, cranktyp):
        """Sets the cranktyp of this PumpingUnit.


        :param cranktyp: The cranktyp of this PumpingUnit.  # noqa: E501
        :type: str
        """

        self._cranktyp = cranktyp

    @property
    def des(self):
        """Gets the des of this PumpingUnit.  # noqa: E501


        :return: The des of this PumpingUnit.  # noqa: E501
        :rtype: str
        """
        return self._des

    @des.setter
    def des(self, des):
        """Sets the des of this PumpingUnit.


        :param des: The des of this PumpingUnit.  # noqa: E501
        :type: str
        """

        self._des = des

    @property
    def dttmend(self):
        """Gets the dttmend of this PumpingUnit.  # noqa: E501


        :return: The dttmend of this PumpingUnit.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmend

    @dttmend.setter
    def dttmend(self, dttmend):
        """Sets the dttmend of this PumpingUnit.


        :param dttmend: The dttmend of this PumpingUnit.  # noqa: E501
        :type: datetime
        """

        self._dttmend = dttmend

    @property
    def dttmlastoverhaul(self):
        """Gets the dttmlastoverhaul of this PumpingUnit.  # noqa: E501


        :return: The dttmlastoverhaul of this PumpingUnit.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmlastoverhaul

    @dttmlastoverhaul.setter
    def dttmlastoverhaul(self, dttmlastoverhaul):
        """Sets the dttmlastoverhaul of this PumpingUnit.


        :param dttmlastoverhaul: The dttmlastoverhaul of this PumpingUnit.  # noqa: E501
        :type: datetime
        """

        self._dttmlastoverhaul = dttmlastoverhaul

    @property
    def dttmstart(self):
        """Gets the dttmstart of this PumpingUnit.  # noqa: E501


        :return: The dttmstart of this PumpingUnit.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmstart

    @dttmstart.setter
    def dttmstart(self, dttmstart):
        """Sets the dttmstart of this PumpingUnit.


        :param dttmstart: The dttmstart of this PumpingUnit.  # noqa: E501
        :type: datetime
        """

        self._dttmstart = dttmstart

    @property
    def gearboxdes(self):
        """Gets the gearboxdes of this PumpingUnit.  # noqa: E501


        :return: The gearboxdes of this PumpingUnit.  # noqa: E501
        :rtype: str
        """
        return self._gearboxdes

    @gearboxdes.setter
    def gearboxdes(self, gearboxdes):
        """Sets the gearboxdes of this PumpingUnit.


        :param gearboxdes: The gearboxdes of this PumpingUnit.  # noqa: E501
        :type: str
        """

        self._gearboxdes = gearboxdes

    @property
    def gearboxratio(self):
        """Gets the gearboxratio of this PumpingUnit.  # noqa: E501


        :return: The gearboxratio of this PumpingUnit.  # noqa: E501
        :rtype: OneOfPumpingUnitGearboxratio
        """
        return self._gearboxratio

    @gearboxratio.setter
    def gearboxratio(self, gearboxratio):
        """Sets the gearboxratio of this PumpingUnit.


        :param gearboxratio: The gearboxratio of this PumpingUnit.  # noqa: E501
        :type: OneOfPumpingUnitGearboxratio
        """

        self._gearboxratio = gearboxratio

    @property
    def gearboxsn(self):
        """Gets the gearboxsn of this PumpingUnit.  # noqa: E501


        :return: The gearboxsn of this PumpingUnit.  # noqa: E501
        :rtype: str
        """
        return self._gearboxsn

    @gearboxsn.setter
    def gearboxsn(self, gearboxsn):
        """Sets the gearboxsn of this PumpingUnit.


        :param gearboxsn: The gearboxsn of this PumpingUnit.  # noqa: E501
        :type: str
        """

        self._gearboxsn = gearboxsn

    @property
    def gearboxtorquemaxin(self):
        """Gets the gearboxtorquemaxin of this PumpingUnit.  # noqa: E501


        :return: The gearboxtorquemaxin of this PumpingUnit.  # noqa: E501
        :rtype: OneOfPumpingUnitGearboxtorquemaxin
        """
        return self._gearboxtorquemaxin

    @gearboxtorquemaxin.setter
    def gearboxtorquemaxin(self, gearboxtorquemaxin):
        """Sets the gearboxtorquemaxin of this PumpingUnit.


        :param gearboxtorquemaxin: The gearboxtorquemaxin of this PumpingUnit.  # noqa: E501
        :type: OneOfPumpingUnitGearboxtorquemaxin
        """

        self._gearboxtorquemaxin = gearboxtorquemaxin

    @property
    def idrec(self):
        """Gets the idrec of this PumpingUnit.  # noqa: E501


        :return: The idrec of this PumpingUnit.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this PumpingUnit.


        :param idrec: The idrec of this PumpingUnit.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecjob(self):
        """Gets the idrecjob of this PumpingUnit.  # noqa: E501


        :return: The idrecjob of this PumpingUnit.  # noqa: E501
        :rtype: str
        """
        return self._idrecjob

    @idrecjob.setter
    def idrecjob(self, idrecjob):
        """Sets the idrecjob of this PumpingUnit.


        :param idrecjob: The idrecjob of this PumpingUnit.  # noqa: E501
        :type: str
        """

        self._idrecjob = idrecjob

    @property
    def idrecjobtk(self):
        """Gets the idrecjobtk of this PumpingUnit.  # noqa: E501


        :return: The idrecjobtk of this PumpingUnit.  # noqa: E501
        :rtype: str
        """
        return self._idrecjobtk

    @idrecjobtk.setter
    def idrecjobtk(self, idrecjobtk):
        """Sets the idrecjobtk of this PumpingUnit.


        :param idrecjobtk: The idrecjobtk of this PumpingUnit.  # noqa: E501
        :type: str
        """

        self._idrecjobtk = idrecjobtk

    @property
    def idrecrod(self):
        """Gets the idrecrod of this PumpingUnit.  # noqa: E501


        :return: The idrecrod of this PumpingUnit.  # noqa: E501
        :rtype: str
        """
        return self._idrecrod

    @idrecrod.setter
    def idrecrod(self, idrecrod):
        """Sets the idrecrod of this PumpingUnit.


        :param idrecrod: The idrecrod of this PumpingUnit.  # noqa: E501
        :type: str
        """

        self._idrecrod = idrecrod

    @property
    def idrecrodtk(self):
        """Gets the idrecrodtk of this PumpingUnit.  # noqa: E501


        :return: The idrecrodtk of this PumpingUnit.  # noqa: E501
        :rtype: str
        """
        return self._idrecrodtk

    @idrecrodtk.setter
    def idrecrodtk(self, idrecrodtk):
        """Sets the idrecrodtk of this PumpingUnit.


        :param idrecrodtk: The idrecrodtk of this PumpingUnit.  # noqa: E501
        :type: str
        """

        self._idrecrodtk = idrecrodtk

    @property
    def idwell(self):
        """Gets the idwell of this PumpingUnit.  # noqa: E501


        :return: The idwell of this PumpingUnit.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this PumpingUnit.


        :param idwell: The idwell of this PumpingUnit.  # noqa: E501
        :type: str
        """

        self._idwell = idwell

    @property
    def lengthbeam(self):
        """Gets the lengthbeam of this PumpingUnit.  # noqa: E501


        :return: The lengthbeam of this PumpingUnit.  # noqa: E501
        :rtype: OneOfPumpingUnitLengthbeam
        """
        return self._lengthbeam

    @lengthbeam.setter
    def lengthbeam(self, lengthbeam):
        """Sets the lengthbeam of this PumpingUnit.


        :param lengthbeam: The lengthbeam of this PumpingUnit.  # noqa: E501
        :type: OneOfPumpingUnitLengthbeam
        """

        self._lengthbeam = lengthbeam

    @property
    def loadpolishrodmax(self):
        """Gets the loadpolishrodmax of this PumpingUnit.  # noqa: E501


        :return: The loadpolishrodmax of this PumpingUnit.  # noqa: E501
        :rtype: OneOfPumpingUnitLoadpolishrodmax
        """
        return self._loadpolishrodmax

    @loadpolishrodmax.setter
    def loadpolishrodmax(self, loadpolishrodmax):
        """Sets the loadpolishrodmax of this PumpingUnit.


        :param loadpolishrodmax: The loadpolishrodmax of this PumpingUnit.  # noqa: E501
        :type: OneOfPumpingUnitLoadpolishrodmax
        """

        self._loadpolishrodmax = loadpolishrodmax

    @property
    def make(self):
        """Gets the make of this PumpingUnit.  # noqa: E501


        :return: The make of this PumpingUnit.  # noqa: E501
        :rtype: str
        """
        return self._make

    @make.setter
    def make(self, make):
        """Sets the make of this PumpingUnit.


        :param make: The make of this PumpingUnit.  # noqa: E501
        :type: str
        """

        self._make = make

    @property
    def model(self):
        """Gets the model of this PumpingUnit.  # noqa: E501


        :return: The model of this PumpingUnit.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this PumpingUnit.


        :param model: The model of this PumpingUnit.  # noqa: E501
        :type: str
        """

        self._model = model

    @property
    def pitmanposmax(self):
        """Gets the pitmanposmax of this PumpingUnit.  # noqa: E501


        :return: The pitmanposmax of this PumpingUnit.  # noqa: E501
        :rtype: int
        """
        return self._pitmanposmax

    @pitmanposmax.setter
    def pitmanposmax(self, pitmanposmax):
        """Sets the pitmanposmax of this PumpingUnit.


        :param pitmanposmax: The pitmanposmax of this PumpingUnit.  # noqa: E501
        :type: int
        """

        self._pitmanposmax = pitmanposmax

    @property
    def proposed(self):
        """Gets the proposed of this PumpingUnit.  # noqa: E501


        :return: The proposed of this PumpingUnit.  # noqa: E501
        :rtype: int
        """
        return self._proposed

    @proposed.setter
    def proposed(self, proposed):
        """Sets the proposed of this PumpingUnit.


        :param proposed: The proposed of this PumpingUnit.  # noqa: E501
        :type: int
        """

        self._proposed = proposed

    @property
    def pumping_unit_counter_wts(self):
        """Gets the pumping_unit_counter_wts of this PumpingUnit.  # noqa: E501


        :return: The pumping_unit_counter_wts of this PumpingUnit.  # noqa: E501
        :rtype: list[PumpingUnitCounterWt]
        """
        return self._pumping_unit_counter_wts

    @pumping_unit_counter_wts.setter
    def pumping_unit_counter_wts(self, pumping_unit_counter_wts):
        """Sets the pumping_unit_counter_wts of this PumpingUnit.


        :param pumping_unit_counter_wts: The pumping_unit_counter_wts of this PumpingUnit.  # noqa: E501
        :type: list[PumpingUnitCounterWt]
        """

        self._pumping_unit_counter_wts = pumping_unit_counter_wts

    @property
    def refid(self):
        """Gets the refid of this PumpingUnit.  # noqa: E501


        :return: The refid of this PumpingUnit.  # noqa: E501
        :rtype: str
        """
        return self._refid

    @refid.setter
    def refid(self, refid):
        """Sets the refid of this PumpingUnit.


        :param refid: The refid of this PumpingUnit.  # noqa: E501
        :type: str
        """

        self._refid = refid

    @property
    def sn(self):
        """Gets the sn of this PumpingUnit.  # noqa: E501


        :return: The sn of this PumpingUnit.  # noqa: E501
        :rtype: str
        """
        return self._sn

    @sn.setter
    def sn(self, sn):
        """Sets the sn of this PumpingUnit.


        :param sn: The sn of this PumpingUnit.  # noqa: E501
        :type: str
        """

        self._sn = sn

    @property
    def strokelengthmax(self):
        """Gets the strokelengthmax of this PumpingUnit.  # noqa: E501


        :return: The strokelengthmax of this PumpingUnit.  # noqa: E501
        :rtype: OneOfPumpingUnitStrokelengthmax
        """
        return self._strokelengthmax

    @strokelengthmax.setter
    def strokelengthmax(self, strokelengthmax):
        """Sets the strokelengthmax of this PumpingUnit.


        :param strokelengthmax: The strokelengthmax of this PumpingUnit.  # noqa: E501
        :type: OneOfPumpingUnitStrokelengthmax
        """

        self._strokelengthmax = strokelengthmax

    @property
    def syscreatedate(self):
        """Gets the syscreatedate of this PumpingUnit.  # noqa: E501


        :return: The syscreatedate of this PumpingUnit.  # noqa: E501
        :rtype: datetime
        """
        return self._syscreatedate

    @syscreatedate.setter
    def syscreatedate(self, syscreatedate):
        """Sets the syscreatedate of this PumpingUnit.


        :param syscreatedate: The syscreatedate of this PumpingUnit.  # noqa: E501
        :type: datetime
        """

        self._syscreatedate = syscreatedate

    @property
    def syscreateuser(self):
        """Gets the syscreateuser of this PumpingUnit.  # noqa: E501


        :return: The syscreateuser of this PumpingUnit.  # noqa: E501
        :rtype: str
        """
        return self._syscreateuser

    @syscreateuser.setter
    def syscreateuser(self, syscreateuser):
        """Sets the syscreateuser of this PumpingUnit.


        :param syscreateuser: The syscreateuser of this PumpingUnit.  # noqa: E501
        :type: str
        """

        self._syscreateuser = syscreateuser

    @property
    def syslockchildren(self):
        """Gets the syslockchildren of this PumpingUnit.  # noqa: E501


        :return: The syslockchildren of this PumpingUnit.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildren

    @syslockchildren.setter
    def syslockchildren(self, syslockchildren):
        """Sets the syslockchildren of this PumpingUnit.


        :param syslockchildren: The syslockchildren of this PumpingUnit.  # noqa: E501
        :type: int
        """

        self._syslockchildren = syslockchildren

    @property
    def syslockchildrenui(self):
        """Gets the syslockchildrenui of this PumpingUnit.  # noqa: E501


        :return: The syslockchildrenui of this PumpingUnit.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildrenui

    @syslockchildrenui.setter
    def syslockchildrenui(self, syslockchildrenui):
        """Sets the syslockchildrenui of this PumpingUnit.


        :param syslockchildrenui: The syslockchildrenui of this PumpingUnit.  # noqa: E501
        :type: int
        """

        self._syslockchildrenui = syslockchildrenui

    @property
    def syslockdate(self):
        """Gets the syslockdate of this PumpingUnit.  # noqa: E501


        :return: The syslockdate of this PumpingUnit.  # noqa: E501
        :rtype: datetime
        """
        return self._syslockdate

    @syslockdate.setter
    def syslockdate(self, syslockdate):
        """Sets the syslockdate of this PumpingUnit.


        :param syslockdate: The syslockdate of this PumpingUnit.  # noqa: E501
        :type: datetime
        """

        self._syslockdate = syslockdate

    @property
    def syslockme(self):
        """Gets the syslockme of this PumpingUnit.  # noqa: E501


        :return: The syslockme of this PumpingUnit.  # noqa: E501
        :rtype: int
        """
        return self._syslockme

    @syslockme.setter
    def syslockme(self, syslockme):
        """Sets the syslockme of this PumpingUnit.


        :param syslockme: The syslockme of this PumpingUnit.  # noqa: E501
        :type: int
        """

        self._syslockme = syslockme

    @property
    def syslockmeui(self):
        """Gets the syslockmeui of this PumpingUnit.  # noqa: E501


        :return: The syslockmeui of this PumpingUnit.  # noqa: E501
        :rtype: int
        """
        return self._syslockmeui

    @syslockmeui.setter
    def syslockmeui(self, syslockmeui):
        """Sets the syslockmeui of this PumpingUnit.


        :param syslockmeui: The syslockmeui of this PumpingUnit.  # noqa: E501
        :type: int
        """

        self._syslockmeui = syslockmeui

    @property
    def sysmoddate(self):
        """Gets the sysmoddate of this PumpingUnit.  # noqa: E501


        :return: The sysmoddate of this PumpingUnit.  # noqa: E501
        :rtype: datetime
        """
        return self._sysmoddate

    @sysmoddate.setter
    def sysmoddate(self, sysmoddate):
        """Sets the sysmoddate of this PumpingUnit.


        :param sysmoddate: The sysmoddate of this PumpingUnit.  # noqa: E501
        :type: datetime
        """

        self._sysmoddate = sysmoddate

    @property
    def sysmoduser(self):
        """Gets the sysmoduser of this PumpingUnit.  # noqa: E501


        :return: The sysmoduser of this PumpingUnit.  # noqa: E501
        :rtype: str
        """
        return self._sysmoduser

    @sysmoduser.setter
    def sysmoduser(self, sysmoduser):
        """Sets the sysmoduser of this PumpingUnit.


        :param sysmoduser: The sysmoduser of this PumpingUnit.  # noqa: E501
        :type: str
        """

        self._sysmoduser = sysmoduser

    @property
    def systag(self):
        """Gets the systag of this PumpingUnit.  # noqa: E501


        :return: The systag of this PumpingUnit.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this PumpingUnit.


        :param systag: The systag of this PumpingUnit.  # noqa: E501
        :type: str
        """

        self._systag = systag

    @property
    def szsheave(self):
        """Gets the szsheave of this PumpingUnit.  # noqa: E501


        :return: The szsheave of this PumpingUnit.  # noqa: E501
        :rtype: OneOfPumpingUnitSzsheave
        """
        return self._szsheave

    @szsheave.setter
    def szsheave(self, szsheave):
        """Sets the szsheave of this PumpingUnit.


        :param szsheave: The szsheave of this PumpingUnit.  # noqa: E501
        :type: OneOfPumpingUnitSzsheave
        """

        self._szsheave = szsheave

    @property
    def typ(self):
        """Gets the typ of this PumpingUnit.  # noqa: E501


        :return: The typ of this PumpingUnit.  # noqa: E501
        :rtype: str
        """
        return self._typ

    @typ.setter
    def typ(self, typ):
        """Sets the typ of this PumpingUnit.


        :param typ: The typ of this PumpingUnit.  # noqa: E501
        :type: str
        """

        self._typ = typ

    @property
    def usertxt1(self):
        """Gets the usertxt1 of this PumpingUnit.  # noqa: E501


        :return: The usertxt1 of this PumpingUnit.  # noqa: E501
        :rtype: str
        """
        return self._usertxt1

    @usertxt1.setter
    def usertxt1(self, usertxt1):
        """Sets the usertxt1 of this PumpingUnit.


        :param usertxt1: The usertxt1 of this PumpingUnit.  # noqa: E501
        :type: str
        """

        self._usertxt1 = usertxt1

    @property
    def usertxt2(self):
        """Gets the usertxt2 of this PumpingUnit.  # noqa: E501


        :return: The usertxt2 of this PumpingUnit.  # noqa: E501
        :rtype: str
        """
        return self._usertxt2

    @usertxt2.setter
    def usertxt2(self, usertxt2):
        """Sets the usertxt2 of this PumpingUnit.


        :param usertxt2: The usertxt2 of this PumpingUnit.  # noqa: E501
        :type: str
        """

        self._usertxt2 = usertxt2

    @property
    def wellheader(self):
        """Gets the wellheader of this PumpingUnit.  # noqa: E501


        :return: The wellheader of this PumpingUnit.  # noqa: E501
        :rtype: AnyOfPumpingUnitWellheader
        """
        return self._wellheader

    @wellheader.setter
    def wellheader(self, wellheader):
        """Sets the wellheader of this PumpingUnit.


        :param wellheader: The wellheader of this PumpingUnit.  # noqa: E501
        :type: AnyOfPumpingUnitWellheader
        """

        self._wellheader = wellheader

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PumpingUnit, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PumpingUnit):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
