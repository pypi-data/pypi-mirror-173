# coding: utf-8

"""
    OData Service for namespace Default

    This OData service is located at http://localhost  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RodCompPcpRotor(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'btmcircpump': 'int',
        'cavityinflowindex': 'OneOfRodCompPcpRotorCavityinflowindex',
        'chargepump': 'int',
        'conntop': 'str',
        'displperrpm': 'OneOfRodCompPcpRotorDisplperrpm',
        'drivetyp': 'str',
        'dttmlastinspect': 'datetime',
        'eccentricity': 'OneOfRodCompPcpRotorEccentricity',
        'efficiencyinspect': 'OneOfRodCompPcpRotorEfficiencyinspect',
        'gearratio': 'str',
        'idrec': 'str',
        'idrecparent': 'str',
        'idrectubcomp': 'str',
        'idrectubcomptk': 'str',
        'idwell': 'str',
        'length': 'OneOfRodCompPcpRotorLength',
        'liftcapacity': 'OneOfRodCompPcpRotorLiftcapacity',
        'lobeconfig': 'str',
        'noteinspect': 'str',
        'pitch': 'OneOfRodCompPcpRotorPitch',
        'presindesign': 'OneOfRodCompPcpRotorPresindesign',
        'ratedesign': 'OneOfRodCompPcpRotorRatedesign',
        'rod_comp': 'AnyOfRodCompPcpRotorRodComp',
        'rpmdesign': 'OneOfRodCompPcpRotorRpmdesign',
        'sweptangle': 'OneOfRodCompPcpRotorSweptangle',
        'syscreatedate': 'datetime',
        'syscreateuser': 'str',
        'syslockchildren': 'int',
        'syslockchildrenui': 'int',
        'syslockdate': 'datetime',
        'syslockme': 'int',
        'syslockmeui': 'int',
        'sysmoddate': 'datetime',
        'sysmoduser': 'str',
        'systag': 'str',
        'szodmax': 'OneOfRodCompPcpRotorSzodmax',
        'szodmin': 'OneOfRodCompPcpRotorSzodmin'
    }

    attribute_map = {
        'btmcircpump': 'btmcircpump',
        'cavityinflowindex': 'cavityinflowindex',
        'chargepump': 'chargepump',
        'conntop': 'conntop',
        'displperrpm': 'displperrpm',
        'drivetyp': 'drivetyp',
        'dttmlastinspect': 'dttmlastinspect',
        'eccentricity': 'eccentricity',
        'efficiencyinspect': 'efficiencyinspect',
        'gearratio': 'gearratio',
        'idrec': 'idrec',
        'idrecparent': 'idrecparent',
        'idrectubcomp': 'idrectubcomp',
        'idrectubcomptk': 'idrectubcomptk',
        'idwell': 'idwell',
        'length': 'length',
        'liftcapacity': 'liftcapacity',
        'lobeconfig': 'lobeconfig',
        'noteinspect': 'noteinspect',
        'pitch': 'pitch',
        'presindesign': 'presindesign',
        'ratedesign': 'ratedesign',
        'rod_comp': 'rodComp',
        'rpmdesign': 'rpmdesign',
        'sweptangle': 'sweptangle',
        'syscreatedate': 'syscreatedate',
        'syscreateuser': 'syscreateuser',
        'syslockchildren': 'syslockchildren',
        'syslockchildrenui': 'syslockchildrenui',
        'syslockdate': 'syslockdate',
        'syslockme': 'syslockme',
        'syslockmeui': 'syslockmeui',
        'sysmoddate': 'sysmoddate',
        'sysmoduser': 'sysmoduser',
        'systag': 'systag',
        'szodmax': 'szodmax',
        'szodmin': 'szodmin'
    }

    def __init__(self, btmcircpump=None, cavityinflowindex=None, chargepump=None, conntop=None, displperrpm=None, drivetyp=None, dttmlastinspect=None, eccentricity=None, efficiencyinspect=None, gearratio=None, idrec=None, idrecparent=None, idrectubcomp=None, idrectubcomptk=None, idwell=None, length=None, liftcapacity=None, lobeconfig=None, noteinspect=None, pitch=None, presindesign=None, ratedesign=None, rod_comp=None, rpmdesign=None, sweptangle=None, syscreatedate=None, syscreateuser=None, syslockchildren=None, syslockchildrenui=None, syslockdate=None, syslockme=None, syslockmeui=None, sysmoddate=None, sysmoduser=None, systag=None, szodmax=None, szodmin=None):  # noqa: E501
        """RodCompPcpRotor - a model defined in Swagger"""  # noqa: E501
        self._btmcircpump = None
        self._cavityinflowindex = None
        self._chargepump = None
        self._conntop = None
        self._displperrpm = None
        self._drivetyp = None
        self._dttmlastinspect = None
        self._eccentricity = None
        self._efficiencyinspect = None
        self._gearratio = None
        self._idrec = None
        self._idrecparent = None
        self._idrectubcomp = None
        self._idrectubcomptk = None
        self._idwell = None
        self._length = None
        self._liftcapacity = None
        self._lobeconfig = None
        self._noteinspect = None
        self._pitch = None
        self._presindesign = None
        self._ratedesign = None
        self._rod_comp = None
        self._rpmdesign = None
        self._sweptangle = None
        self._syscreatedate = None
        self._syscreateuser = None
        self._syslockchildren = None
        self._syslockchildrenui = None
        self._syslockdate = None
        self._syslockme = None
        self._syslockmeui = None
        self._sysmoddate = None
        self._sysmoduser = None
        self._systag = None
        self._szodmax = None
        self._szodmin = None
        self.discriminator = None
        if btmcircpump is not None:
            self.btmcircpump = btmcircpump
        if cavityinflowindex is not None:
            self.cavityinflowindex = cavityinflowindex
        if chargepump is not None:
            self.chargepump = chargepump
        if conntop is not None:
            self.conntop = conntop
        if displperrpm is not None:
            self.displperrpm = displperrpm
        if drivetyp is not None:
            self.drivetyp = drivetyp
        if dttmlastinspect is not None:
            self.dttmlastinspect = dttmlastinspect
        if eccentricity is not None:
            self.eccentricity = eccentricity
        if efficiencyinspect is not None:
            self.efficiencyinspect = efficiencyinspect
        if gearratio is not None:
            self.gearratio = gearratio
        if idrec is not None:
            self.idrec = idrec
        if idrecparent is not None:
            self.idrecparent = idrecparent
        if idrectubcomp is not None:
            self.idrectubcomp = idrectubcomp
        if idrectubcomptk is not None:
            self.idrectubcomptk = idrectubcomptk
        if idwell is not None:
            self.idwell = idwell
        if length is not None:
            self.length = length
        if liftcapacity is not None:
            self.liftcapacity = liftcapacity
        if lobeconfig is not None:
            self.lobeconfig = lobeconfig
        if noteinspect is not None:
            self.noteinspect = noteinspect
        if pitch is not None:
            self.pitch = pitch
        if presindesign is not None:
            self.presindesign = presindesign
        if ratedesign is not None:
            self.ratedesign = ratedesign
        if rod_comp is not None:
            self.rod_comp = rod_comp
        if rpmdesign is not None:
            self.rpmdesign = rpmdesign
        if sweptangle is not None:
            self.sweptangle = sweptangle
        if syscreatedate is not None:
            self.syscreatedate = syscreatedate
        if syscreateuser is not None:
            self.syscreateuser = syscreateuser
        if syslockchildren is not None:
            self.syslockchildren = syslockchildren
        if syslockchildrenui is not None:
            self.syslockchildrenui = syslockchildrenui
        if syslockdate is not None:
            self.syslockdate = syslockdate
        if syslockme is not None:
            self.syslockme = syslockme
        if syslockmeui is not None:
            self.syslockmeui = syslockmeui
        if sysmoddate is not None:
            self.sysmoddate = sysmoddate
        if sysmoduser is not None:
            self.sysmoduser = sysmoduser
        if systag is not None:
            self.systag = systag
        if szodmax is not None:
            self.szodmax = szodmax
        if szodmin is not None:
            self.szodmin = szodmin

    @property
    def btmcircpump(self):
        """Gets the btmcircpump of this RodCompPcpRotor.  # noqa: E501


        :return: The btmcircpump of this RodCompPcpRotor.  # noqa: E501
        :rtype: int
        """
        return self._btmcircpump

    @btmcircpump.setter
    def btmcircpump(self, btmcircpump):
        """Sets the btmcircpump of this RodCompPcpRotor.


        :param btmcircpump: The btmcircpump of this RodCompPcpRotor.  # noqa: E501
        :type: int
        """

        self._btmcircpump = btmcircpump

    @property
    def cavityinflowindex(self):
        """Gets the cavityinflowindex of this RodCompPcpRotor.  # noqa: E501


        :return: The cavityinflowindex of this RodCompPcpRotor.  # noqa: E501
        :rtype: OneOfRodCompPcpRotorCavityinflowindex
        """
        return self._cavityinflowindex

    @cavityinflowindex.setter
    def cavityinflowindex(self, cavityinflowindex):
        """Sets the cavityinflowindex of this RodCompPcpRotor.


        :param cavityinflowindex: The cavityinflowindex of this RodCompPcpRotor.  # noqa: E501
        :type: OneOfRodCompPcpRotorCavityinflowindex
        """

        self._cavityinflowindex = cavityinflowindex

    @property
    def chargepump(self):
        """Gets the chargepump of this RodCompPcpRotor.  # noqa: E501


        :return: The chargepump of this RodCompPcpRotor.  # noqa: E501
        :rtype: int
        """
        return self._chargepump

    @chargepump.setter
    def chargepump(self, chargepump):
        """Sets the chargepump of this RodCompPcpRotor.


        :param chargepump: The chargepump of this RodCompPcpRotor.  # noqa: E501
        :type: int
        """

        self._chargepump = chargepump

    @property
    def conntop(self):
        """Gets the conntop of this RodCompPcpRotor.  # noqa: E501


        :return: The conntop of this RodCompPcpRotor.  # noqa: E501
        :rtype: str
        """
        return self._conntop

    @conntop.setter
    def conntop(self, conntop):
        """Sets the conntop of this RodCompPcpRotor.


        :param conntop: The conntop of this RodCompPcpRotor.  # noqa: E501
        :type: str
        """

        self._conntop = conntop

    @property
    def displperrpm(self):
        """Gets the displperrpm of this RodCompPcpRotor.  # noqa: E501


        :return: The displperrpm of this RodCompPcpRotor.  # noqa: E501
        :rtype: OneOfRodCompPcpRotorDisplperrpm
        """
        return self._displperrpm

    @displperrpm.setter
    def displperrpm(self, displperrpm):
        """Sets the displperrpm of this RodCompPcpRotor.


        :param displperrpm: The displperrpm of this RodCompPcpRotor.  # noqa: E501
        :type: OneOfRodCompPcpRotorDisplperrpm
        """

        self._displperrpm = displperrpm

    @property
    def drivetyp(self):
        """Gets the drivetyp of this RodCompPcpRotor.  # noqa: E501


        :return: The drivetyp of this RodCompPcpRotor.  # noqa: E501
        :rtype: str
        """
        return self._drivetyp

    @drivetyp.setter
    def drivetyp(self, drivetyp):
        """Sets the drivetyp of this RodCompPcpRotor.


        :param drivetyp: The drivetyp of this RodCompPcpRotor.  # noqa: E501
        :type: str
        """

        self._drivetyp = drivetyp

    @property
    def dttmlastinspect(self):
        """Gets the dttmlastinspect of this RodCompPcpRotor.  # noqa: E501


        :return: The dttmlastinspect of this RodCompPcpRotor.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmlastinspect

    @dttmlastinspect.setter
    def dttmlastinspect(self, dttmlastinspect):
        """Sets the dttmlastinspect of this RodCompPcpRotor.


        :param dttmlastinspect: The dttmlastinspect of this RodCompPcpRotor.  # noqa: E501
        :type: datetime
        """

        self._dttmlastinspect = dttmlastinspect

    @property
    def eccentricity(self):
        """Gets the eccentricity of this RodCompPcpRotor.  # noqa: E501


        :return: The eccentricity of this RodCompPcpRotor.  # noqa: E501
        :rtype: OneOfRodCompPcpRotorEccentricity
        """
        return self._eccentricity

    @eccentricity.setter
    def eccentricity(self, eccentricity):
        """Sets the eccentricity of this RodCompPcpRotor.


        :param eccentricity: The eccentricity of this RodCompPcpRotor.  # noqa: E501
        :type: OneOfRodCompPcpRotorEccentricity
        """

        self._eccentricity = eccentricity

    @property
    def efficiencyinspect(self):
        """Gets the efficiencyinspect of this RodCompPcpRotor.  # noqa: E501


        :return: The efficiencyinspect of this RodCompPcpRotor.  # noqa: E501
        :rtype: OneOfRodCompPcpRotorEfficiencyinspect
        """
        return self._efficiencyinspect

    @efficiencyinspect.setter
    def efficiencyinspect(self, efficiencyinspect):
        """Sets the efficiencyinspect of this RodCompPcpRotor.


        :param efficiencyinspect: The efficiencyinspect of this RodCompPcpRotor.  # noqa: E501
        :type: OneOfRodCompPcpRotorEfficiencyinspect
        """

        self._efficiencyinspect = efficiencyinspect

    @property
    def gearratio(self):
        """Gets the gearratio of this RodCompPcpRotor.  # noqa: E501


        :return: The gearratio of this RodCompPcpRotor.  # noqa: E501
        :rtype: str
        """
        return self._gearratio

    @gearratio.setter
    def gearratio(self, gearratio):
        """Sets the gearratio of this RodCompPcpRotor.


        :param gearratio: The gearratio of this RodCompPcpRotor.  # noqa: E501
        :type: str
        """

        self._gearratio = gearratio

    @property
    def idrec(self):
        """Gets the idrec of this RodCompPcpRotor.  # noqa: E501


        :return: The idrec of this RodCompPcpRotor.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this RodCompPcpRotor.


        :param idrec: The idrec of this RodCompPcpRotor.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecparent(self):
        """Gets the idrecparent of this RodCompPcpRotor.  # noqa: E501


        :return: The idrecparent of this RodCompPcpRotor.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this RodCompPcpRotor.


        :param idrecparent: The idrecparent of this RodCompPcpRotor.  # noqa: E501
        :type: str
        """

        self._idrecparent = idrecparent

    @property
    def idrectubcomp(self):
        """Gets the idrectubcomp of this RodCompPcpRotor.  # noqa: E501


        :return: The idrectubcomp of this RodCompPcpRotor.  # noqa: E501
        :rtype: str
        """
        return self._idrectubcomp

    @idrectubcomp.setter
    def idrectubcomp(self, idrectubcomp):
        """Sets the idrectubcomp of this RodCompPcpRotor.


        :param idrectubcomp: The idrectubcomp of this RodCompPcpRotor.  # noqa: E501
        :type: str
        """

        self._idrectubcomp = idrectubcomp

    @property
    def idrectubcomptk(self):
        """Gets the idrectubcomptk of this RodCompPcpRotor.  # noqa: E501


        :return: The idrectubcomptk of this RodCompPcpRotor.  # noqa: E501
        :rtype: str
        """
        return self._idrectubcomptk

    @idrectubcomptk.setter
    def idrectubcomptk(self, idrectubcomptk):
        """Sets the idrectubcomptk of this RodCompPcpRotor.


        :param idrectubcomptk: The idrectubcomptk of this RodCompPcpRotor.  # noqa: E501
        :type: str
        """

        self._idrectubcomptk = idrectubcomptk

    @property
    def idwell(self):
        """Gets the idwell of this RodCompPcpRotor.  # noqa: E501


        :return: The idwell of this RodCompPcpRotor.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this RodCompPcpRotor.


        :param idwell: The idwell of this RodCompPcpRotor.  # noqa: E501
        :type: str
        """

        self._idwell = idwell

    @property
    def length(self):
        """Gets the length of this RodCompPcpRotor.  # noqa: E501


        :return: The length of this RodCompPcpRotor.  # noqa: E501
        :rtype: OneOfRodCompPcpRotorLength
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this RodCompPcpRotor.


        :param length: The length of this RodCompPcpRotor.  # noqa: E501
        :type: OneOfRodCompPcpRotorLength
        """

        self._length = length

    @property
    def liftcapacity(self):
        """Gets the liftcapacity of this RodCompPcpRotor.  # noqa: E501


        :return: The liftcapacity of this RodCompPcpRotor.  # noqa: E501
        :rtype: OneOfRodCompPcpRotorLiftcapacity
        """
        return self._liftcapacity

    @liftcapacity.setter
    def liftcapacity(self, liftcapacity):
        """Sets the liftcapacity of this RodCompPcpRotor.


        :param liftcapacity: The liftcapacity of this RodCompPcpRotor.  # noqa: E501
        :type: OneOfRodCompPcpRotorLiftcapacity
        """

        self._liftcapacity = liftcapacity

    @property
    def lobeconfig(self):
        """Gets the lobeconfig of this RodCompPcpRotor.  # noqa: E501


        :return: The lobeconfig of this RodCompPcpRotor.  # noqa: E501
        :rtype: str
        """
        return self._lobeconfig

    @lobeconfig.setter
    def lobeconfig(self, lobeconfig):
        """Sets the lobeconfig of this RodCompPcpRotor.


        :param lobeconfig: The lobeconfig of this RodCompPcpRotor.  # noqa: E501
        :type: str
        """

        self._lobeconfig = lobeconfig

    @property
    def noteinspect(self):
        """Gets the noteinspect of this RodCompPcpRotor.  # noqa: E501


        :return: The noteinspect of this RodCompPcpRotor.  # noqa: E501
        :rtype: str
        """
        return self._noteinspect

    @noteinspect.setter
    def noteinspect(self, noteinspect):
        """Sets the noteinspect of this RodCompPcpRotor.


        :param noteinspect: The noteinspect of this RodCompPcpRotor.  # noqa: E501
        :type: str
        """

        self._noteinspect = noteinspect

    @property
    def pitch(self):
        """Gets the pitch of this RodCompPcpRotor.  # noqa: E501


        :return: The pitch of this RodCompPcpRotor.  # noqa: E501
        :rtype: OneOfRodCompPcpRotorPitch
        """
        return self._pitch

    @pitch.setter
    def pitch(self, pitch):
        """Sets the pitch of this RodCompPcpRotor.


        :param pitch: The pitch of this RodCompPcpRotor.  # noqa: E501
        :type: OneOfRodCompPcpRotorPitch
        """

        self._pitch = pitch

    @property
    def presindesign(self):
        """Gets the presindesign of this RodCompPcpRotor.  # noqa: E501


        :return: The presindesign of this RodCompPcpRotor.  # noqa: E501
        :rtype: OneOfRodCompPcpRotorPresindesign
        """
        return self._presindesign

    @presindesign.setter
    def presindesign(self, presindesign):
        """Sets the presindesign of this RodCompPcpRotor.


        :param presindesign: The presindesign of this RodCompPcpRotor.  # noqa: E501
        :type: OneOfRodCompPcpRotorPresindesign
        """

        self._presindesign = presindesign

    @property
    def ratedesign(self):
        """Gets the ratedesign of this RodCompPcpRotor.  # noqa: E501


        :return: The ratedesign of this RodCompPcpRotor.  # noqa: E501
        :rtype: OneOfRodCompPcpRotorRatedesign
        """
        return self._ratedesign

    @ratedesign.setter
    def ratedesign(self, ratedesign):
        """Sets the ratedesign of this RodCompPcpRotor.


        :param ratedesign: The ratedesign of this RodCompPcpRotor.  # noqa: E501
        :type: OneOfRodCompPcpRotorRatedesign
        """

        self._ratedesign = ratedesign

    @property
    def rod_comp(self):
        """Gets the rod_comp of this RodCompPcpRotor.  # noqa: E501


        :return: The rod_comp of this RodCompPcpRotor.  # noqa: E501
        :rtype: AnyOfRodCompPcpRotorRodComp
        """
        return self._rod_comp

    @rod_comp.setter
    def rod_comp(self, rod_comp):
        """Sets the rod_comp of this RodCompPcpRotor.


        :param rod_comp: The rod_comp of this RodCompPcpRotor.  # noqa: E501
        :type: AnyOfRodCompPcpRotorRodComp
        """

        self._rod_comp = rod_comp

    @property
    def rpmdesign(self):
        """Gets the rpmdesign of this RodCompPcpRotor.  # noqa: E501


        :return: The rpmdesign of this RodCompPcpRotor.  # noqa: E501
        :rtype: OneOfRodCompPcpRotorRpmdesign
        """
        return self._rpmdesign

    @rpmdesign.setter
    def rpmdesign(self, rpmdesign):
        """Sets the rpmdesign of this RodCompPcpRotor.


        :param rpmdesign: The rpmdesign of this RodCompPcpRotor.  # noqa: E501
        :type: OneOfRodCompPcpRotorRpmdesign
        """

        self._rpmdesign = rpmdesign

    @property
    def sweptangle(self):
        """Gets the sweptangle of this RodCompPcpRotor.  # noqa: E501


        :return: The sweptangle of this RodCompPcpRotor.  # noqa: E501
        :rtype: OneOfRodCompPcpRotorSweptangle
        """
        return self._sweptangle

    @sweptangle.setter
    def sweptangle(self, sweptangle):
        """Sets the sweptangle of this RodCompPcpRotor.


        :param sweptangle: The sweptangle of this RodCompPcpRotor.  # noqa: E501
        :type: OneOfRodCompPcpRotorSweptangle
        """

        self._sweptangle = sweptangle

    @property
    def syscreatedate(self):
        """Gets the syscreatedate of this RodCompPcpRotor.  # noqa: E501


        :return: The syscreatedate of this RodCompPcpRotor.  # noqa: E501
        :rtype: datetime
        """
        return self._syscreatedate

    @syscreatedate.setter
    def syscreatedate(self, syscreatedate):
        """Sets the syscreatedate of this RodCompPcpRotor.


        :param syscreatedate: The syscreatedate of this RodCompPcpRotor.  # noqa: E501
        :type: datetime
        """

        self._syscreatedate = syscreatedate

    @property
    def syscreateuser(self):
        """Gets the syscreateuser of this RodCompPcpRotor.  # noqa: E501


        :return: The syscreateuser of this RodCompPcpRotor.  # noqa: E501
        :rtype: str
        """
        return self._syscreateuser

    @syscreateuser.setter
    def syscreateuser(self, syscreateuser):
        """Sets the syscreateuser of this RodCompPcpRotor.


        :param syscreateuser: The syscreateuser of this RodCompPcpRotor.  # noqa: E501
        :type: str
        """

        self._syscreateuser = syscreateuser

    @property
    def syslockchildren(self):
        """Gets the syslockchildren of this RodCompPcpRotor.  # noqa: E501


        :return: The syslockchildren of this RodCompPcpRotor.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildren

    @syslockchildren.setter
    def syslockchildren(self, syslockchildren):
        """Sets the syslockchildren of this RodCompPcpRotor.


        :param syslockchildren: The syslockchildren of this RodCompPcpRotor.  # noqa: E501
        :type: int
        """

        self._syslockchildren = syslockchildren

    @property
    def syslockchildrenui(self):
        """Gets the syslockchildrenui of this RodCompPcpRotor.  # noqa: E501


        :return: The syslockchildrenui of this RodCompPcpRotor.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildrenui

    @syslockchildrenui.setter
    def syslockchildrenui(self, syslockchildrenui):
        """Sets the syslockchildrenui of this RodCompPcpRotor.


        :param syslockchildrenui: The syslockchildrenui of this RodCompPcpRotor.  # noqa: E501
        :type: int
        """

        self._syslockchildrenui = syslockchildrenui

    @property
    def syslockdate(self):
        """Gets the syslockdate of this RodCompPcpRotor.  # noqa: E501


        :return: The syslockdate of this RodCompPcpRotor.  # noqa: E501
        :rtype: datetime
        """
        return self._syslockdate

    @syslockdate.setter
    def syslockdate(self, syslockdate):
        """Sets the syslockdate of this RodCompPcpRotor.


        :param syslockdate: The syslockdate of this RodCompPcpRotor.  # noqa: E501
        :type: datetime
        """

        self._syslockdate = syslockdate

    @property
    def syslockme(self):
        """Gets the syslockme of this RodCompPcpRotor.  # noqa: E501


        :return: The syslockme of this RodCompPcpRotor.  # noqa: E501
        :rtype: int
        """
        return self._syslockme

    @syslockme.setter
    def syslockme(self, syslockme):
        """Sets the syslockme of this RodCompPcpRotor.


        :param syslockme: The syslockme of this RodCompPcpRotor.  # noqa: E501
        :type: int
        """

        self._syslockme = syslockme

    @property
    def syslockmeui(self):
        """Gets the syslockmeui of this RodCompPcpRotor.  # noqa: E501


        :return: The syslockmeui of this RodCompPcpRotor.  # noqa: E501
        :rtype: int
        """
        return self._syslockmeui

    @syslockmeui.setter
    def syslockmeui(self, syslockmeui):
        """Sets the syslockmeui of this RodCompPcpRotor.


        :param syslockmeui: The syslockmeui of this RodCompPcpRotor.  # noqa: E501
        :type: int
        """

        self._syslockmeui = syslockmeui

    @property
    def sysmoddate(self):
        """Gets the sysmoddate of this RodCompPcpRotor.  # noqa: E501


        :return: The sysmoddate of this RodCompPcpRotor.  # noqa: E501
        :rtype: datetime
        """
        return self._sysmoddate

    @sysmoddate.setter
    def sysmoddate(self, sysmoddate):
        """Sets the sysmoddate of this RodCompPcpRotor.


        :param sysmoddate: The sysmoddate of this RodCompPcpRotor.  # noqa: E501
        :type: datetime
        """

        self._sysmoddate = sysmoddate

    @property
    def sysmoduser(self):
        """Gets the sysmoduser of this RodCompPcpRotor.  # noqa: E501


        :return: The sysmoduser of this RodCompPcpRotor.  # noqa: E501
        :rtype: str
        """
        return self._sysmoduser

    @sysmoduser.setter
    def sysmoduser(self, sysmoduser):
        """Sets the sysmoduser of this RodCompPcpRotor.


        :param sysmoduser: The sysmoduser of this RodCompPcpRotor.  # noqa: E501
        :type: str
        """

        self._sysmoduser = sysmoduser

    @property
    def systag(self):
        """Gets the systag of this RodCompPcpRotor.  # noqa: E501


        :return: The systag of this RodCompPcpRotor.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this RodCompPcpRotor.


        :param systag: The systag of this RodCompPcpRotor.  # noqa: E501
        :type: str
        """

        self._systag = systag

    @property
    def szodmax(self):
        """Gets the szodmax of this RodCompPcpRotor.  # noqa: E501


        :return: The szodmax of this RodCompPcpRotor.  # noqa: E501
        :rtype: OneOfRodCompPcpRotorSzodmax
        """
        return self._szodmax

    @szodmax.setter
    def szodmax(self, szodmax):
        """Sets the szodmax of this RodCompPcpRotor.


        :param szodmax: The szodmax of this RodCompPcpRotor.  # noqa: E501
        :type: OneOfRodCompPcpRotorSzodmax
        """

        self._szodmax = szodmax

    @property
    def szodmin(self):
        """Gets the szodmin of this RodCompPcpRotor.  # noqa: E501


        :return: The szodmin of this RodCompPcpRotor.  # noqa: E501
        :rtype: OneOfRodCompPcpRotorSzodmin
        """
        return self._szodmin

    @szodmin.setter
    def szodmin(self, szodmin):
        """Sets the szodmin of this RodCompPcpRotor.


        :param szodmin: The szodmin of this RodCompPcpRotor.  # noqa: E501
        :type: OneOfRodCompPcpRotorSzodmin
        """

        self._szodmin = szodmin

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RodCompPcpRotor, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RodCompPcpRotor):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
