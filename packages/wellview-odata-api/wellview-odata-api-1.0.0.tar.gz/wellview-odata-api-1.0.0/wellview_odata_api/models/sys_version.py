# coding: utf-8

"""
    OData Service for namespace Default

    This OData service is located at http://localhost  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SysVersion(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'copyrightnotice': 'str',
        'datawarehouse': 'int',
        'idapp': 'str',
        'versionmajor': 'int',
        'versionminor': 'int'
    }

    attribute_map = {
        'copyrightnotice': 'copyrightnotice',
        'datawarehouse': 'datawarehouse',
        'idapp': 'idapp',
        'versionmajor': 'versionmajor',
        'versionminor': 'versionminor'
    }

    def __init__(self, copyrightnotice=None, datawarehouse=None, idapp=None, versionmajor=None, versionminor=None):  # noqa: E501
        """SysVersion - a model defined in Swagger"""  # noqa: E501
        self._copyrightnotice = None
        self._datawarehouse = None
        self._idapp = None
        self._versionmajor = None
        self._versionminor = None
        self.discriminator = None
        if copyrightnotice is not None:
            self.copyrightnotice = copyrightnotice
        if datawarehouse is not None:
            self.datawarehouse = datawarehouse
        if idapp is not None:
            self.idapp = idapp
        if versionmajor is not None:
            self.versionmajor = versionmajor
        if versionminor is not None:
            self.versionminor = versionminor

    @property
    def copyrightnotice(self):
        """Gets the copyrightnotice of this SysVersion.  # noqa: E501


        :return: The copyrightnotice of this SysVersion.  # noqa: E501
        :rtype: str
        """
        return self._copyrightnotice

    @copyrightnotice.setter
    def copyrightnotice(self, copyrightnotice):
        """Sets the copyrightnotice of this SysVersion.


        :param copyrightnotice: The copyrightnotice of this SysVersion.  # noqa: E501
        :type: str
        """

        self._copyrightnotice = copyrightnotice

    @property
    def datawarehouse(self):
        """Gets the datawarehouse of this SysVersion.  # noqa: E501


        :return: The datawarehouse of this SysVersion.  # noqa: E501
        :rtype: int
        """
        return self._datawarehouse

    @datawarehouse.setter
    def datawarehouse(self, datawarehouse):
        """Sets the datawarehouse of this SysVersion.


        :param datawarehouse: The datawarehouse of this SysVersion.  # noqa: E501
        :type: int
        """

        self._datawarehouse = datawarehouse

    @property
    def idapp(self):
        """Gets the idapp of this SysVersion.  # noqa: E501


        :return: The idapp of this SysVersion.  # noqa: E501
        :rtype: str
        """
        return self._idapp

    @idapp.setter
    def idapp(self, idapp):
        """Sets the idapp of this SysVersion.


        :param idapp: The idapp of this SysVersion.  # noqa: E501
        :type: str
        """

        self._idapp = idapp

    @property
    def versionmajor(self):
        """Gets the versionmajor of this SysVersion.  # noqa: E501


        :return: The versionmajor of this SysVersion.  # noqa: E501
        :rtype: int
        """
        return self._versionmajor

    @versionmajor.setter
    def versionmajor(self, versionmajor):
        """Sets the versionmajor of this SysVersion.


        :param versionmajor: The versionmajor of this SysVersion.  # noqa: E501
        :type: int
        """

        self._versionmajor = versionmajor

    @property
    def versionminor(self):
        """Gets the versionminor of this SysVersion.  # noqa: E501


        :return: The versionminor of this SysVersion.  # noqa: E501
        :rtype: int
        """
        return self._versionminor

    @versionminor.setter
    def versionminor(self, versionminor):
        """Sets the versionminor of this SysVersion.


        :param versionminor: The versionminor of this SysVersion.  # noqa: E501
        :type: int
        """

        self._versionminor = versionminor

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SysVersion, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SysVersion):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
