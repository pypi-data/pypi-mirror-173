# coding: utf-8

"""
    OData Service for namespace Default

    This OData service is located at http://localhost  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class JobAfe(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'afeamtcalc': 'OneOfJobAfeAfeamtcalc',
        'afeamtnormcalc': 'OneOfJobAfeAfeamtnormcalc',
        'afecosttypcalc': 'str',
        'afenumber': 'str',
        'afenumbersupp': 'str',
        'afestatus': 'str',
        'afesupamtcalc': 'OneOfJobAfeAfesupamtcalc',
        'afesupamtnormcalc': 'OneOfJobAfeAfesupamtnormcalc',
        'afetotalcalc': 'OneOfJobAfeAfetotalcalc',
        'afetotalnormcalc': 'OneOfJobAfeAfetotalnormcalc',
        'com': 'str',
        'costforecastcalc': 'OneOfJobAfeCostforecastcalc',
        'costnormforecastcalc': 'OneOfJobAfeCostnormforecastcalc',
        'costnormtotalcalc': 'OneOfJobAfeCostnormtotalcalc',
        'costtotalcalc': 'OneOfJobAfeCosttotalcalc',
        'costtyp': 'str',
        'dttmafe': 'datetime',
        'dttmafeclose': 'datetime',
        'exclude': 'int',
        'finalinvoicetotalcalc': 'OneOfJobAfeFinalinvoicetotalcalc',
        'finalinvoicetotalnormcalc': 'OneOfJobAfeFinalinvoicetotalnormcalc',
        'idrec': 'str',
        'idrecparent': 'str',
        'idwell': 'str',
        'job': 'AnyOfJobAfeJob',
        'job_afe_costs': 'list[JobAfeCost]',
        'job_afe_final_invoice_costs': 'list[JobAfeFinalInvoiceCost]',
        'projectname': 'str',
        'projectrefnumber': 'str',
        'syscreatedate': 'datetime',
        'syscreateuser': 'str',
        'syslockchildren': 'int',
        'syslockchildrenui': 'int',
        'syslockdate': 'datetime',
        'syslockme': 'int',
        'syslockmeui': 'int',
        'sysmoddate': 'datetime',
        'sysmoduser': 'str',
        'sysseq': 'int',
        'systag': 'str',
        'typ': 'str',
        'varianceafefinalcalc': 'OneOfJobAfeVarianceafefinalcalc',
        'variancefieldcalc': 'OneOfJobAfeVariancefieldcalc',
        'variancefieldfinalcalc': 'OneOfJobAfeVariancefieldfinalcalc',
        'variancenormafefinalcalc': 'OneOfJobAfeVariancenormafefinalcalc',
        'variancenormfieldcalc': 'OneOfJobAfeVariancenormfieldcalc',
        'variancenormfieldfinalcalc': 'OneOfJobAfeVariancenormfieldfinalcalc',
        'workingint': 'OneOfJobAfeWorkingint',
        'workingintnote': 'str'
    }

    attribute_map = {
        'afeamtcalc': 'afeamtcalc',
        'afeamtnormcalc': 'afeamtnormcalc',
        'afecosttypcalc': 'afecosttypcalc',
        'afenumber': 'afenumber',
        'afenumbersupp': 'afenumbersupp',
        'afestatus': 'afestatus',
        'afesupamtcalc': 'afesupamtcalc',
        'afesupamtnormcalc': 'afesupamtnormcalc',
        'afetotalcalc': 'afetotalcalc',
        'afetotalnormcalc': 'afetotalnormcalc',
        'com': 'com',
        'costforecastcalc': 'costforecastcalc',
        'costnormforecastcalc': 'costnormforecastcalc',
        'costnormtotalcalc': 'costnormtotalcalc',
        'costtotalcalc': 'costtotalcalc',
        'costtyp': 'costtyp',
        'dttmafe': 'dttmafe',
        'dttmafeclose': 'dttmafeclose',
        'exclude': 'exclude',
        'finalinvoicetotalcalc': 'finalinvoicetotalcalc',
        'finalinvoicetotalnormcalc': 'finalinvoicetotalnormcalc',
        'idrec': 'idrec',
        'idrecparent': 'idrecparent',
        'idwell': 'idwell',
        'job': 'job',
        'job_afe_costs': 'jobAfeCosts',
        'job_afe_final_invoice_costs': 'jobAfeFinalInvoiceCosts',
        'projectname': 'projectname',
        'projectrefnumber': 'projectrefnumber',
        'syscreatedate': 'syscreatedate',
        'syscreateuser': 'syscreateuser',
        'syslockchildren': 'syslockchildren',
        'syslockchildrenui': 'syslockchildrenui',
        'syslockdate': 'syslockdate',
        'syslockme': 'syslockme',
        'syslockmeui': 'syslockmeui',
        'sysmoddate': 'sysmoddate',
        'sysmoduser': 'sysmoduser',
        'sysseq': 'sysseq',
        'systag': 'systag',
        'typ': 'typ',
        'varianceafefinalcalc': 'varianceafefinalcalc',
        'variancefieldcalc': 'variancefieldcalc',
        'variancefieldfinalcalc': 'variancefieldfinalcalc',
        'variancenormafefinalcalc': 'variancenormafefinalcalc',
        'variancenormfieldcalc': 'variancenormfieldcalc',
        'variancenormfieldfinalcalc': 'variancenormfieldfinalcalc',
        'workingint': 'workingint',
        'workingintnote': 'workingintnote'
    }

    def __init__(self, afeamtcalc=None, afeamtnormcalc=None, afecosttypcalc=None, afenumber=None, afenumbersupp=None, afestatus=None, afesupamtcalc=None, afesupamtnormcalc=None, afetotalcalc=None, afetotalnormcalc=None, com=None, costforecastcalc=None, costnormforecastcalc=None, costnormtotalcalc=None, costtotalcalc=None, costtyp=None, dttmafe=None, dttmafeclose=None, exclude=None, finalinvoicetotalcalc=None, finalinvoicetotalnormcalc=None, idrec=None, idrecparent=None, idwell=None, job=None, job_afe_costs=None, job_afe_final_invoice_costs=None, projectname=None, projectrefnumber=None, syscreatedate=None, syscreateuser=None, syslockchildren=None, syslockchildrenui=None, syslockdate=None, syslockme=None, syslockmeui=None, sysmoddate=None, sysmoduser=None, sysseq=None, systag=None, typ=None, varianceafefinalcalc=None, variancefieldcalc=None, variancefieldfinalcalc=None, variancenormafefinalcalc=None, variancenormfieldcalc=None, variancenormfieldfinalcalc=None, workingint=None, workingintnote=None):  # noqa: E501
        """JobAfe - a model defined in Swagger"""  # noqa: E501
        self._afeamtcalc = None
        self._afeamtnormcalc = None
        self._afecosttypcalc = None
        self._afenumber = None
        self._afenumbersupp = None
        self._afestatus = None
        self._afesupamtcalc = None
        self._afesupamtnormcalc = None
        self._afetotalcalc = None
        self._afetotalnormcalc = None
        self._com = None
        self._costforecastcalc = None
        self._costnormforecastcalc = None
        self._costnormtotalcalc = None
        self._costtotalcalc = None
        self._costtyp = None
        self._dttmafe = None
        self._dttmafeclose = None
        self._exclude = None
        self._finalinvoicetotalcalc = None
        self._finalinvoicetotalnormcalc = None
        self._idrec = None
        self._idrecparent = None
        self._idwell = None
        self._job = None
        self._job_afe_costs = None
        self._job_afe_final_invoice_costs = None
        self._projectname = None
        self._projectrefnumber = None
        self._syscreatedate = None
        self._syscreateuser = None
        self._syslockchildren = None
        self._syslockchildrenui = None
        self._syslockdate = None
        self._syslockme = None
        self._syslockmeui = None
        self._sysmoddate = None
        self._sysmoduser = None
        self._sysseq = None
        self._systag = None
        self._typ = None
        self._varianceafefinalcalc = None
        self._variancefieldcalc = None
        self._variancefieldfinalcalc = None
        self._variancenormafefinalcalc = None
        self._variancenormfieldcalc = None
        self._variancenormfieldfinalcalc = None
        self._workingint = None
        self._workingintnote = None
        self.discriminator = None
        if afeamtcalc is not None:
            self.afeamtcalc = afeamtcalc
        if afeamtnormcalc is not None:
            self.afeamtnormcalc = afeamtnormcalc
        if afecosttypcalc is not None:
            self.afecosttypcalc = afecosttypcalc
        if afenumber is not None:
            self.afenumber = afenumber
        if afenumbersupp is not None:
            self.afenumbersupp = afenumbersupp
        if afestatus is not None:
            self.afestatus = afestatus
        if afesupamtcalc is not None:
            self.afesupamtcalc = afesupamtcalc
        if afesupamtnormcalc is not None:
            self.afesupamtnormcalc = afesupamtnormcalc
        if afetotalcalc is not None:
            self.afetotalcalc = afetotalcalc
        if afetotalnormcalc is not None:
            self.afetotalnormcalc = afetotalnormcalc
        if com is not None:
            self.com = com
        if costforecastcalc is not None:
            self.costforecastcalc = costforecastcalc
        if costnormforecastcalc is not None:
            self.costnormforecastcalc = costnormforecastcalc
        if costnormtotalcalc is not None:
            self.costnormtotalcalc = costnormtotalcalc
        if costtotalcalc is not None:
            self.costtotalcalc = costtotalcalc
        if costtyp is not None:
            self.costtyp = costtyp
        if dttmafe is not None:
            self.dttmafe = dttmafe
        if dttmafeclose is not None:
            self.dttmafeclose = dttmafeclose
        if exclude is not None:
            self.exclude = exclude
        if finalinvoicetotalcalc is not None:
            self.finalinvoicetotalcalc = finalinvoicetotalcalc
        if finalinvoicetotalnormcalc is not None:
            self.finalinvoicetotalnormcalc = finalinvoicetotalnormcalc
        if idrec is not None:
            self.idrec = idrec
        if idrecparent is not None:
            self.idrecparent = idrecparent
        if idwell is not None:
            self.idwell = idwell
        if job is not None:
            self.job = job
        if job_afe_costs is not None:
            self.job_afe_costs = job_afe_costs
        if job_afe_final_invoice_costs is not None:
            self.job_afe_final_invoice_costs = job_afe_final_invoice_costs
        if projectname is not None:
            self.projectname = projectname
        if projectrefnumber is not None:
            self.projectrefnumber = projectrefnumber
        if syscreatedate is not None:
            self.syscreatedate = syscreatedate
        if syscreateuser is not None:
            self.syscreateuser = syscreateuser
        if syslockchildren is not None:
            self.syslockchildren = syslockchildren
        if syslockchildrenui is not None:
            self.syslockchildrenui = syslockchildrenui
        if syslockdate is not None:
            self.syslockdate = syslockdate
        if syslockme is not None:
            self.syslockme = syslockme
        if syslockmeui is not None:
            self.syslockmeui = syslockmeui
        if sysmoddate is not None:
            self.sysmoddate = sysmoddate
        if sysmoduser is not None:
            self.sysmoduser = sysmoduser
        if sysseq is not None:
            self.sysseq = sysseq
        if systag is not None:
            self.systag = systag
        if typ is not None:
            self.typ = typ
        if varianceafefinalcalc is not None:
            self.varianceafefinalcalc = varianceafefinalcalc
        if variancefieldcalc is not None:
            self.variancefieldcalc = variancefieldcalc
        if variancefieldfinalcalc is not None:
            self.variancefieldfinalcalc = variancefieldfinalcalc
        if variancenormafefinalcalc is not None:
            self.variancenormafefinalcalc = variancenormafefinalcalc
        if variancenormfieldcalc is not None:
            self.variancenormfieldcalc = variancenormfieldcalc
        if variancenormfieldfinalcalc is not None:
            self.variancenormfieldfinalcalc = variancenormfieldfinalcalc
        if workingint is not None:
            self.workingint = workingint
        if workingintnote is not None:
            self.workingintnote = workingintnote

    @property
    def afeamtcalc(self):
        """Gets the afeamtcalc of this JobAfe.  # noqa: E501


        :return: The afeamtcalc of this JobAfe.  # noqa: E501
        :rtype: OneOfJobAfeAfeamtcalc
        """
        return self._afeamtcalc

    @afeamtcalc.setter
    def afeamtcalc(self, afeamtcalc):
        """Sets the afeamtcalc of this JobAfe.


        :param afeamtcalc: The afeamtcalc of this JobAfe.  # noqa: E501
        :type: OneOfJobAfeAfeamtcalc
        """

        self._afeamtcalc = afeamtcalc

    @property
    def afeamtnormcalc(self):
        """Gets the afeamtnormcalc of this JobAfe.  # noqa: E501


        :return: The afeamtnormcalc of this JobAfe.  # noqa: E501
        :rtype: OneOfJobAfeAfeamtnormcalc
        """
        return self._afeamtnormcalc

    @afeamtnormcalc.setter
    def afeamtnormcalc(self, afeamtnormcalc):
        """Sets the afeamtnormcalc of this JobAfe.


        :param afeamtnormcalc: The afeamtnormcalc of this JobAfe.  # noqa: E501
        :type: OneOfJobAfeAfeamtnormcalc
        """

        self._afeamtnormcalc = afeamtnormcalc

    @property
    def afecosttypcalc(self):
        """Gets the afecosttypcalc of this JobAfe.  # noqa: E501


        :return: The afecosttypcalc of this JobAfe.  # noqa: E501
        :rtype: str
        """
        return self._afecosttypcalc

    @afecosttypcalc.setter
    def afecosttypcalc(self, afecosttypcalc):
        """Sets the afecosttypcalc of this JobAfe.


        :param afecosttypcalc: The afecosttypcalc of this JobAfe.  # noqa: E501
        :type: str
        """

        self._afecosttypcalc = afecosttypcalc

    @property
    def afenumber(self):
        """Gets the afenumber of this JobAfe.  # noqa: E501


        :return: The afenumber of this JobAfe.  # noqa: E501
        :rtype: str
        """
        return self._afenumber

    @afenumber.setter
    def afenumber(self, afenumber):
        """Sets the afenumber of this JobAfe.


        :param afenumber: The afenumber of this JobAfe.  # noqa: E501
        :type: str
        """

        self._afenumber = afenumber

    @property
    def afenumbersupp(self):
        """Gets the afenumbersupp of this JobAfe.  # noqa: E501


        :return: The afenumbersupp of this JobAfe.  # noqa: E501
        :rtype: str
        """
        return self._afenumbersupp

    @afenumbersupp.setter
    def afenumbersupp(self, afenumbersupp):
        """Sets the afenumbersupp of this JobAfe.


        :param afenumbersupp: The afenumbersupp of this JobAfe.  # noqa: E501
        :type: str
        """

        self._afenumbersupp = afenumbersupp

    @property
    def afestatus(self):
        """Gets the afestatus of this JobAfe.  # noqa: E501


        :return: The afestatus of this JobAfe.  # noqa: E501
        :rtype: str
        """
        return self._afestatus

    @afestatus.setter
    def afestatus(self, afestatus):
        """Sets the afestatus of this JobAfe.


        :param afestatus: The afestatus of this JobAfe.  # noqa: E501
        :type: str
        """

        self._afestatus = afestatus

    @property
    def afesupamtcalc(self):
        """Gets the afesupamtcalc of this JobAfe.  # noqa: E501


        :return: The afesupamtcalc of this JobAfe.  # noqa: E501
        :rtype: OneOfJobAfeAfesupamtcalc
        """
        return self._afesupamtcalc

    @afesupamtcalc.setter
    def afesupamtcalc(self, afesupamtcalc):
        """Sets the afesupamtcalc of this JobAfe.


        :param afesupamtcalc: The afesupamtcalc of this JobAfe.  # noqa: E501
        :type: OneOfJobAfeAfesupamtcalc
        """

        self._afesupamtcalc = afesupamtcalc

    @property
    def afesupamtnormcalc(self):
        """Gets the afesupamtnormcalc of this JobAfe.  # noqa: E501


        :return: The afesupamtnormcalc of this JobAfe.  # noqa: E501
        :rtype: OneOfJobAfeAfesupamtnormcalc
        """
        return self._afesupamtnormcalc

    @afesupamtnormcalc.setter
    def afesupamtnormcalc(self, afesupamtnormcalc):
        """Sets the afesupamtnormcalc of this JobAfe.


        :param afesupamtnormcalc: The afesupamtnormcalc of this JobAfe.  # noqa: E501
        :type: OneOfJobAfeAfesupamtnormcalc
        """

        self._afesupamtnormcalc = afesupamtnormcalc

    @property
    def afetotalcalc(self):
        """Gets the afetotalcalc of this JobAfe.  # noqa: E501


        :return: The afetotalcalc of this JobAfe.  # noqa: E501
        :rtype: OneOfJobAfeAfetotalcalc
        """
        return self._afetotalcalc

    @afetotalcalc.setter
    def afetotalcalc(self, afetotalcalc):
        """Sets the afetotalcalc of this JobAfe.


        :param afetotalcalc: The afetotalcalc of this JobAfe.  # noqa: E501
        :type: OneOfJobAfeAfetotalcalc
        """

        self._afetotalcalc = afetotalcalc

    @property
    def afetotalnormcalc(self):
        """Gets the afetotalnormcalc of this JobAfe.  # noqa: E501


        :return: The afetotalnormcalc of this JobAfe.  # noqa: E501
        :rtype: OneOfJobAfeAfetotalnormcalc
        """
        return self._afetotalnormcalc

    @afetotalnormcalc.setter
    def afetotalnormcalc(self, afetotalnormcalc):
        """Sets the afetotalnormcalc of this JobAfe.


        :param afetotalnormcalc: The afetotalnormcalc of this JobAfe.  # noqa: E501
        :type: OneOfJobAfeAfetotalnormcalc
        """

        self._afetotalnormcalc = afetotalnormcalc

    @property
    def com(self):
        """Gets the com of this JobAfe.  # noqa: E501


        :return: The com of this JobAfe.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this JobAfe.


        :param com: The com of this JobAfe.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def costforecastcalc(self):
        """Gets the costforecastcalc of this JobAfe.  # noqa: E501


        :return: The costforecastcalc of this JobAfe.  # noqa: E501
        :rtype: OneOfJobAfeCostforecastcalc
        """
        return self._costforecastcalc

    @costforecastcalc.setter
    def costforecastcalc(self, costforecastcalc):
        """Sets the costforecastcalc of this JobAfe.


        :param costforecastcalc: The costforecastcalc of this JobAfe.  # noqa: E501
        :type: OneOfJobAfeCostforecastcalc
        """

        self._costforecastcalc = costforecastcalc

    @property
    def costnormforecastcalc(self):
        """Gets the costnormforecastcalc of this JobAfe.  # noqa: E501


        :return: The costnormforecastcalc of this JobAfe.  # noqa: E501
        :rtype: OneOfJobAfeCostnormforecastcalc
        """
        return self._costnormforecastcalc

    @costnormforecastcalc.setter
    def costnormforecastcalc(self, costnormforecastcalc):
        """Sets the costnormforecastcalc of this JobAfe.


        :param costnormforecastcalc: The costnormforecastcalc of this JobAfe.  # noqa: E501
        :type: OneOfJobAfeCostnormforecastcalc
        """

        self._costnormforecastcalc = costnormforecastcalc

    @property
    def costnormtotalcalc(self):
        """Gets the costnormtotalcalc of this JobAfe.  # noqa: E501


        :return: The costnormtotalcalc of this JobAfe.  # noqa: E501
        :rtype: OneOfJobAfeCostnormtotalcalc
        """
        return self._costnormtotalcalc

    @costnormtotalcalc.setter
    def costnormtotalcalc(self, costnormtotalcalc):
        """Sets the costnormtotalcalc of this JobAfe.


        :param costnormtotalcalc: The costnormtotalcalc of this JobAfe.  # noqa: E501
        :type: OneOfJobAfeCostnormtotalcalc
        """

        self._costnormtotalcalc = costnormtotalcalc

    @property
    def costtotalcalc(self):
        """Gets the costtotalcalc of this JobAfe.  # noqa: E501


        :return: The costtotalcalc of this JobAfe.  # noqa: E501
        :rtype: OneOfJobAfeCosttotalcalc
        """
        return self._costtotalcalc

    @costtotalcalc.setter
    def costtotalcalc(self, costtotalcalc):
        """Sets the costtotalcalc of this JobAfe.


        :param costtotalcalc: The costtotalcalc of this JobAfe.  # noqa: E501
        :type: OneOfJobAfeCosttotalcalc
        """

        self._costtotalcalc = costtotalcalc

    @property
    def costtyp(self):
        """Gets the costtyp of this JobAfe.  # noqa: E501


        :return: The costtyp of this JobAfe.  # noqa: E501
        :rtype: str
        """
        return self._costtyp

    @costtyp.setter
    def costtyp(self, costtyp):
        """Sets the costtyp of this JobAfe.


        :param costtyp: The costtyp of this JobAfe.  # noqa: E501
        :type: str
        """

        self._costtyp = costtyp

    @property
    def dttmafe(self):
        """Gets the dttmafe of this JobAfe.  # noqa: E501


        :return: The dttmafe of this JobAfe.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmafe

    @dttmafe.setter
    def dttmafe(self, dttmafe):
        """Sets the dttmafe of this JobAfe.


        :param dttmafe: The dttmafe of this JobAfe.  # noqa: E501
        :type: datetime
        """

        self._dttmafe = dttmafe

    @property
    def dttmafeclose(self):
        """Gets the dttmafeclose of this JobAfe.  # noqa: E501


        :return: The dttmafeclose of this JobAfe.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmafeclose

    @dttmafeclose.setter
    def dttmafeclose(self, dttmafeclose):
        """Sets the dttmafeclose of this JobAfe.


        :param dttmafeclose: The dttmafeclose of this JobAfe.  # noqa: E501
        :type: datetime
        """

        self._dttmafeclose = dttmafeclose

    @property
    def exclude(self):
        """Gets the exclude of this JobAfe.  # noqa: E501


        :return: The exclude of this JobAfe.  # noqa: E501
        :rtype: int
        """
        return self._exclude

    @exclude.setter
    def exclude(self, exclude):
        """Sets the exclude of this JobAfe.


        :param exclude: The exclude of this JobAfe.  # noqa: E501
        :type: int
        """

        self._exclude = exclude

    @property
    def finalinvoicetotalcalc(self):
        """Gets the finalinvoicetotalcalc of this JobAfe.  # noqa: E501


        :return: The finalinvoicetotalcalc of this JobAfe.  # noqa: E501
        :rtype: OneOfJobAfeFinalinvoicetotalcalc
        """
        return self._finalinvoicetotalcalc

    @finalinvoicetotalcalc.setter
    def finalinvoicetotalcalc(self, finalinvoicetotalcalc):
        """Sets the finalinvoicetotalcalc of this JobAfe.


        :param finalinvoicetotalcalc: The finalinvoicetotalcalc of this JobAfe.  # noqa: E501
        :type: OneOfJobAfeFinalinvoicetotalcalc
        """

        self._finalinvoicetotalcalc = finalinvoicetotalcalc

    @property
    def finalinvoicetotalnormcalc(self):
        """Gets the finalinvoicetotalnormcalc of this JobAfe.  # noqa: E501


        :return: The finalinvoicetotalnormcalc of this JobAfe.  # noqa: E501
        :rtype: OneOfJobAfeFinalinvoicetotalnormcalc
        """
        return self._finalinvoicetotalnormcalc

    @finalinvoicetotalnormcalc.setter
    def finalinvoicetotalnormcalc(self, finalinvoicetotalnormcalc):
        """Sets the finalinvoicetotalnormcalc of this JobAfe.


        :param finalinvoicetotalnormcalc: The finalinvoicetotalnormcalc of this JobAfe.  # noqa: E501
        :type: OneOfJobAfeFinalinvoicetotalnormcalc
        """

        self._finalinvoicetotalnormcalc = finalinvoicetotalnormcalc

    @property
    def idrec(self):
        """Gets the idrec of this JobAfe.  # noqa: E501


        :return: The idrec of this JobAfe.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this JobAfe.


        :param idrec: The idrec of this JobAfe.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecparent(self):
        """Gets the idrecparent of this JobAfe.  # noqa: E501


        :return: The idrecparent of this JobAfe.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this JobAfe.


        :param idrecparent: The idrecparent of this JobAfe.  # noqa: E501
        :type: str
        """

        self._idrecparent = idrecparent

    @property
    def idwell(self):
        """Gets the idwell of this JobAfe.  # noqa: E501


        :return: The idwell of this JobAfe.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this JobAfe.


        :param idwell: The idwell of this JobAfe.  # noqa: E501
        :type: str
        """

        self._idwell = idwell

    @property
    def job(self):
        """Gets the job of this JobAfe.  # noqa: E501


        :return: The job of this JobAfe.  # noqa: E501
        :rtype: AnyOfJobAfeJob
        """
        return self._job

    @job.setter
    def job(self, job):
        """Sets the job of this JobAfe.


        :param job: The job of this JobAfe.  # noqa: E501
        :type: AnyOfJobAfeJob
        """

        self._job = job

    @property
    def job_afe_costs(self):
        """Gets the job_afe_costs of this JobAfe.  # noqa: E501


        :return: The job_afe_costs of this JobAfe.  # noqa: E501
        :rtype: list[JobAfeCost]
        """
        return self._job_afe_costs

    @job_afe_costs.setter
    def job_afe_costs(self, job_afe_costs):
        """Sets the job_afe_costs of this JobAfe.


        :param job_afe_costs: The job_afe_costs of this JobAfe.  # noqa: E501
        :type: list[JobAfeCost]
        """

        self._job_afe_costs = job_afe_costs

    @property
    def job_afe_final_invoice_costs(self):
        """Gets the job_afe_final_invoice_costs of this JobAfe.  # noqa: E501


        :return: The job_afe_final_invoice_costs of this JobAfe.  # noqa: E501
        :rtype: list[JobAfeFinalInvoiceCost]
        """
        return self._job_afe_final_invoice_costs

    @job_afe_final_invoice_costs.setter
    def job_afe_final_invoice_costs(self, job_afe_final_invoice_costs):
        """Sets the job_afe_final_invoice_costs of this JobAfe.


        :param job_afe_final_invoice_costs: The job_afe_final_invoice_costs of this JobAfe.  # noqa: E501
        :type: list[JobAfeFinalInvoiceCost]
        """

        self._job_afe_final_invoice_costs = job_afe_final_invoice_costs

    @property
    def projectname(self):
        """Gets the projectname of this JobAfe.  # noqa: E501


        :return: The projectname of this JobAfe.  # noqa: E501
        :rtype: str
        """
        return self._projectname

    @projectname.setter
    def projectname(self, projectname):
        """Sets the projectname of this JobAfe.


        :param projectname: The projectname of this JobAfe.  # noqa: E501
        :type: str
        """

        self._projectname = projectname

    @property
    def projectrefnumber(self):
        """Gets the projectrefnumber of this JobAfe.  # noqa: E501


        :return: The projectrefnumber of this JobAfe.  # noqa: E501
        :rtype: str
        """
        return self._projectrefnumber

    @projectrefnumber.setter
    def projectrefnumber(self, projectrefnumber):
        """Sets the projectrefnumber of this JobAfe.


        :param projectrefnumber: The projectrefnumber of this JobAfe.  # noqa: E501
        :type: str
        """

        self._projectrefnumber = projectrefnumber

    @property
    def syscreatedate(self):
        """Gets the syscreatedate of this JobAfe.  # noqa: E501


        :return: The syscreatedate of this JobAfe.  # noqa: E501
        :rtype: datetime
        """
        return self._syscreatedate

    @syscreatedate.setter
    def syscreatedate(self, syscreatedate):
        """Sets the syscreatedate of this JobAfe.


        :param syscreatedate: The syscreatedate of this JobAfe.  # noqa: E501
        :type: datetime
        """

        self._syscreatedate = syscreatedate

    @property
    def syscreateuser(self):
        """Gets the syscreateuser of this JobAfe.  # noqa: E501


        :return: The syscreateuser of this JobAfe.  # noqa: E501
        :rtype: str
        """
        return self._syscreateuser

    @syscreateuser.setter
    def syscreateuser(self, syscreateuser):
        """Sets the syscreateuser of this JobAfe.


        :param syscreateuser: The syscreateuser of this JobAfe.  # noqa: E501
        :type: str
        """

        self._syscreateuser = syscreateuser

    @property
    def syslockchildren(self):
        """Gets the syslockchildren of this JobAfe.  # noqa: E501


        :return: The syslockchildren of this JobAfe.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildren

    @syslockchildren.setter
    def syslockchildren(self, syslockchildren):
        """Sets the syslockchildren of this JobAfe.


        :param syslockchildren: The syslockchildren of this JobAfe.  # noqa: E501
        :type: int
        """

        self._syslockchildren = syslockchildren

    @property
    def syslockchildrenui(self):
        """Gets the syslockchildrenui of this JobAfe.  # noqa: E501


        :return: The syslockchildrenui of this JobAfe.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildrenui

    @syslockchildrenui.setter
    def syslockchildrenui(self, syslockchildrenui):
        """Sets the syslockchildrenui of this JobAfe.


        :param syslockchildrenui: The syslockchildrenui of this JobAfe.  # noqa: E501
        :type: int
        """

        self._syslockchildrenui = syslockchildrenui

    @property
    def syslockdate(self):
        """Gets the syslockdate of this JobAfe.  # noqa: E501


        :return: The syslockdate of this JobAfe.  # noqa: E501
        :rtype: datetime
        """
        return self._syslockdate

    @syslockdate.setter
    def syslockdate(self, syslockdate):
        """Sets the syslockdate of this JobAfe.


        :param syslockdate: The syslockdate of this JobAfe.  # noqa: E501
        :type: datetime
        """

        self._syslockdate = syslockdate

    @property
    def syslockme(self):
        """Gets the syslockme of this JobAfe.  # noqa: E501


        :return: The syslockme of this JobAfe.  # noqa: E501
        :rtype: int
        """
        return self._syslockme

    @syslockme.setter
    def syslockme(self, syslockme):
        """Sets the syslockme of this JobAfe.


        :param syslockme: The syslockme of this JobAfe.  # noqa: E501
        :type: int
        """

        self._syslockme = syslockme

    @property
    def syslockmeui(self):
        """Gets the syslockmeui of this JobAfe.  # noqa: E501


        :return: The syslockmeui of this JobAfe.  # noqa: E501
        :rtype: int
        """
        return self._syslockmeui

    @syslockmeui.setter
    def syslockmeui(self, syslockmeui):
        """Sets the syslockmeui of this JobAfe.


        :param syslockmeui: The syslockmeui of this JobAfe.  # noqa: E501
        :type: int
        """

        self._syslockmeui = syslockmeui

    @property
    def sysmoddate(self):
        """Gets the sysmoddate of this JobAfe.  # noqa: E501


        :return: The sysmoddate of this JobAfe.  # noqa: E501
        :rtype: datetime
        """
        return self._sysmoddate

    @sysmoddate.setter
    def sysmoddate(self, sysmoddate):
        """Sets the sysmoddate of this JobAfe.


        :param sysmoddate: The sysmoddate of this JobAfe.  # noqa: E501
        :type: datetime
        """

        self._sysmoddate = sysmoddate

    @property
    def sysmoduser(self):
        """Gets the sysmoduser of this JobAfe.  # noqa: E501


        :return: The sysmoduser of this JobAfe.  # noqa: E501
        :rtype: str
        """
        return self._sysmoduser

    @sysmoduser.setter
    def sysmoduser(self, sysmoduser):
        """Sets the sysmoduser of this JobAfe.


        :param sysmoduser: The sysmoduser of this JobAfe.  # noqa: E501
        :type: str
        """

        self._sysmoduser = sysmoduser

    @property
    def sysseq(self):
        """Gets the sysseq of this JobAfe.  # noqa: E501


        :return: The sysseq of this JobAfe.  # noqa: E501
        :rtype: int
        """
        return self._sysseq

    @sysseq.setter
    def sysseq(self, sysseq):
        """Sets the sysseq of this JobAfe.


        :param sysseq: The sysseq of this JobAfe.  # noqa: E501
        :type: int
        """

        self._sysseq = sysseq

    @property
    def systag(self):
        """Gets the systag of this JobAfe.  # noqa: E501


        :return: The systag of this JobAfe.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this JobAfe.


        :param systag: The systag of this JobAfe.  # noqa: E501
        :type: str
        """

        self._systag = systag

    @property
    def typ(self):
        """Gets the typ of this JobAfe.  # noqa: E501


        :return: The typ of this JobAfe.  # noqa: E501
        :rtype: str
        """
        return self._typ

    @typ.setter
    def typ(self, typ):
        """Sets the typ of this JobAfe.


        :param typ: The typ of this JobAfe.  # noqa: E501
        :type: str
        """

        self._typ = typ

    @property
    def varianceafefinalcalc(self):
        """Gets the varianceafefinalcalc of this JobAfe.  # noqa: E501


        :return: The varianceafefinalcalc of this JobAfe.  # noqa: E501
        :rtype: OneOfJobAfeVarianceafefinalcalc
        """
        return self._varianceafefinalcalc

    @varianceafefinalcalc.setter
    def varianceafefinalcalc(self, varianceafefinalcalc):
        """Sets the varianceafefinalcalc of this JobAfe.


        :param varianceafefinalcalc: The varianceafefinalcalc of this JobAfe.  # noqa: E501
        :type: OneOfJobAfeVarianceafefinalcalc
        """

        self._varianceafefinalcalc = varianceafefinalcalc

    @property
    def variancefieldcalc(self):
        """Gets the variancefieldcalc of this JobAfe.  # noqa: E501


        :return: The variancefieldcalc of this JobAfe.  # noqa: E501
        :rtype: OneOfJobAfeVariancefieldcalc
        """
        return self._variancefieldcalc

    @variancefieldcalc.setter
    def variancefieldcalc(self, variancefieldcalc):
        """Sets the variancefieldcalc of this JobAfe.


        :param variancefieldcalc: The variancefieldcalc of this JobAfe.  # noqa: E501
        :type: OneOfJobAfeVariancefieldcalc
        """

        self._variancefieldcalc = variancefieldcalc

    @property
    def variancefieldfinalcalc(self):
        """Gets the variancefieldfinalcalc of this JobAfe.  # noqa: E501


        :return: The variancefieldfinalcalc of this JobAfe.  # noqa: E501
        :rtype: OneOfJobAfeVariancefieldfinalcalc
        """
        return self._variancefieldfinalcalc

    @variancefieldfinalcalc.setter
    def variancefieldfinalcalc(self, variancefieldfinalcalc):
        """Sets the variancefieldfinalcalc of this JobAfe.


        :param variancefieldfinalcalc: The variancefieldfinalcalc of this JobAfe.  # noqa: E501
        :type: OneOfJobAfeVariancefieldfinalcalc
        """

        self._variancefieldfinalcalc = variancefieldfinalcalc

    @property
    def variancenormafefinalcalc(self):
        """Gets the variancenormafefinalcalc of this JobAfe.  # noqa: E501


        :return: The variancenormafefinalcalc of this JobAfe.  # noqa: E501
        :rtype: OneOfJobAfeVariancenormafefinalcalc
        """
        return self._variancenormafefinalcalc

    @variancenormafefinalcalc.setter
    def variancenormafefinalcalc(self, variancenormafefinalcalc):
        """Sets the variancenormafefinalcalc of this JobAfe.


        :param variancenormafefinalcalc: The variancenormafefinalcalc of this JobAfe.  # noqa: E501
        :type: OneOfJobAfeVariancenormafefinalcalc
        """

        self._variancenormafefinalcalc = variancenormafefinalcalc

    @property
    def variancenormfieldcalc(self):
        """Gets the variancenormfieldcalc of this JobAfe.  # noqa: E501


        :return: The variancenormfieldcalc of this JobAfe.  # noqa: E501
        :rtype: OneOfJobAfeVariancenormfieldcalc
        """
        return self._variancenormfieldcalc

    @variancenormfieldcalc.setter
    def variancenormfieldcalc(self, variancenormfieldcalc):
        """Sets the variancenormfieldcalc of this JobAfe.


        :param variancenormfieldcalc: The variancenormfieldcalc of this JobAfe.  # noqa: E501
        :type: OneOfJobAfeVariancenormfieldcalc
        """

        self._variancenormfieldcalc = variancenormfieldcalc

    @property
    def variancenormfieldfinalcalc(self):
        """Gets the variancenormfieldfinalcalc of this JobAfe.  # noqa: E501


        :return: The variancenormfieldfinalcalc of this JobAfe.  # noqa: E501
        :rtype: OneOfJobAfeVariancenormfieldfinalcalc
        """
        return self._variancenormfieldfinalcalc

    @variancenormfieldfinalcalc.setter
    def variancenormfieldfinalcalc(self, variancenormfieldfinalcalc):
        """Sets the variancenormfieldfinalcalc of this JobAfe.


        :param variancenormfieldfinalcalc: The variancenormfieldfinalcalc of this JobAfe.  # noqa: E501
        :type: OneOfJobAfeVariancenormfieldfinalcalc
        """

        self._variancenormfieldfinalcalc = variancenormfieldfinalcalc

    @property
    def workingint(self):
        """Gets the workingint of this JobAfe.  # noqa: E501


        :return: The workingint of this JobAfe.  # noqa: E501
        :rtype: OneOfJobAfeWorkingint
        """
        return self._workingint

    @workingint.setter
    def workingint(self, workingint):
        """Sets the workingint of this JobAfe.


        :param workingint: The workingint of this JobAfe.  # noqa: E501
        :type: OneOfJobAfeWorkingint
        """

        self._workingint = workingint

    @property
    def workingintnote(self):
        """Gets the workingintnote of this JobAfe.  # noqa: E501


        :return: The workingintnote of this JobAfe.  # noqa: E501
        :rtype: str
        """
        return self._workingintnote

    @workingintnote.setter
    def workingintnote(self, workingintnote):
        """Sets the workingintnote of this JobAfe.


        :param workingintnote: The workingintnote of this JobAfe.  # noqa: E501
        :type: str
        """

        self._workingintnote = workingintnote

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JobAfe, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobAfe):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
