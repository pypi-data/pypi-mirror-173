# coding: utf-8

"""
    OData Service for namespace Default

    This OData service is located at http://localhost  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TubCompSssvInsert(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'conditionpull': 'str',
        'conditionrun': 'str',
        'dttmpull': 'datetime',
        'dttmrun': 'datetime',
        'idrec': 'str',
        'idrecparent': 'str',
        'idwell': 'str',
        'lengthspacer': 'OneOfTubCompSssvInsertLengthspacer',
        'make': 'str',
        'model': 'str',
        'presctrl': 'OneOfTubCompSssvInsertPresctrl',
        'presrating': 'OneOfTubCompSssvInsertPresrating',
        'pullreason': 'str',
        'refid': 'str',
        'seattyp': 'str',
        'sn': 'str',
        'springrt': 'OneOfTubCompSssvInsertSpringrt',
        'syscreatedate': 'datetime',
        'syscreateuser': 'str',
        'syslockchildren': 'int',
        'syslockchildrenui': 'int',
        'syslockdate': 'datetime',
        'syslockme': 'int',
        'syslockmeui': 'int',
        'sysmoddate': 'datetime',
        'sysmoduser': 'str',
        'systag': 'str',
        'szidbore': 'OneOfTubCompSssvInsertSzidbore',
        'szodbean': 'OneOfTubCompSssvInsertSzodbean',
        'temprating': 'OneOfTubCompSssvInsertTemprating',
        'tub_comp_sssv': 'AnyOfTubCompSssvInsertTubCompSssv',
        'valvetyp': 'str',
        'wlretrievable': 'int'
    }

    attribute_map = {
        'conditionpull': 'conditionpull',
        'conditionrun': 'conditionrun',
        'dttmpull': 'dttmpull',
        'dttmrun': 'dttmrun',
        'idrec': 'idrec',
        'idrecparent': 'idrecparent',
        'idwell': 'idwell',
        'lengthspacer': 'lengthspacer',
        'make': 'make',
        'model': 'model',
        'presctrl': 'presctrl',
        'presrating': 'presrating',
        'pullreason': 'pullreason',
        'refid': 'refid',
        'seattyp': 'seattyp',
        'sn': 'sn',
        'springrt': 'springrt',
        'syscreatedate': 'syscreatedate',
        'syscreateuser': 'syscreateuser',
        'syslockchildren': 'syslockchildren',
        'syslockchildrenui': 'syslockchildrenui',
        'syslockdate': 'syslockdate',
        'syslockme': 'syslockme',
        'syslockmeui': 'syslockmeui',
        'sysmoddate': 'sysmoddate',
        'sysmoduser': 'sysmoduser',
        'systag': 'systag',
        'szidbore': 'szidbore',
        'szodbean': 'szodbean',
        'temprating': 'temprating',
        'tub_comp_sssv': 'tubCompSssv',
        'valvetyp': 'valvetyp',
        'wlretrievable': 'wlretrievable'
    }

    def __init__(self, conditionpull=None, conditionrun=None, dttmpull=None, dttmrun=None, idrec=None, idrecparent=None, idwell=None, lengthspacer=None, make=None, model=None, presctrl=None, presrating=None, pullreason=None, refid=None, seattyp=None, sn=None, springrt=None, syscreatedate=None, syscreateuser=None, syslockchildren=None, syslockchildrenui=None, syslockdate=None, syslockme=None, syslockmeui=None, sysmoddate=None, sysmoduser=None, systag=None, szidbore=None, szodbean=None, temprating=None, tub_comp_sssv=None, valvetyp=None, wlretrievable=None):  # noqa: E501
        """TubCompSssvInsert - a model defined in Swagger"""  # noqa: E501
        self._conditionpull = None
        self._conditionrun = None
        self._dttmpull = None
        self._dttmrun = None
        self._idrec = None
        self._idrecparent = None
        self._idwell = None
        self._lengthspacer = None
        self._make = None
        self._model = None
        self._presctrl = None
        self._presrating = None
        self._pullreason = None
        self._refid = None
        self._seattyp = None
        self._sn = None
        self._springrt = None
        self._syscreatedate = None
        self._syscreateuser = None
        self._syslockchildren = None
        self._syslockchildrenui = None
        self._syslockdate = None
        self._syslockme = None
        self._syslockmeui = None
        self._sysmoddate = None
        self._sysmoduser = None
        self._systag = None
        self._szidbore = None
        self._szodbean = None
        self._temprating = None
        self._tub_comp_sssv = None
        self._valvetyp = None
        self._wlretrievable = None
        self.discriminator = None
        if conditionpull is not None:
            self.conditionpull = conditionpull
        if conditionrun is not None:
            self.conditionrun = conditionrun
        if dttmpull is not None:
            self.dttmpull = dttmpull
        if dttmrun is not None:
            self.dttmrun = dttmrun
        if idrec is not None:
            self.idrec = idrec
        if idrecparent is not None:
            self.idrecparent = idrecparent
        if idwell is not None:
            self.idwell = idwell
        if lengthspacer is not None:
            self.lengthspacer = lengthspacer
        if make is not None:
            self.make = make
        if model is not None:
            self.model = model
        if presctrl is not None:
            self.presctrl = presctrl
        if presrating is not None:
            self.presrating = presrating
        if pullreason is not None:
            self.pullreason = pullreason
        if refid is not None:
            self.refid = refid
        if seattyp is not None:
            self.seattyp = seattyp
        if sn is not None:
            self.sn = sn
        if springrt is not None:
            self.springrt = springrt
        if syscreatedate is not None:
            self.syscreatedate = syscreatedate
        if syscreateuser is not None:
            self.syscreateuser = syscreateuser
        if syslockchildren is not None:
            self.syslockchildren = syslockchildren
        if syslockchildrenui is not None:
            self.syslockchildrenui = syslockchildrenui
        if syslockdate is not None:
            self.syslockdate = syslockdate
        if syslockme is not None:
            self.syslockme = syslockme
        if syslockmeui is not None:
            self.syslockmeui = syslockmeui
        if sysmoddate is not None:
            self.sysmoddate = sysmoddate
        if sysmoduser is not None:
            self.sysmoduser = sysmoduser
        if systag is not None:
            self.systag = systag
        if szidbore is not None:
            self.szidbore = szidbore
        if szodbean is not None:
            self.szodbean = szodbean
        if temprating is not None:
            self.temprating = temprating
        if tub_comp_sssv is not None:
            self.tub_comp_sssv = tub_comp_sssv
        if valvetyp is not None:
            self.valvetyp = valvetyp
        if wlretrievable is not None:
            self.wlretrievable = wlretrievable

    @property
    def conditionpull(self):
        """Gets the conditionpull of this TubCompSssvInsert.  # noqa: E501


        :return: The conditionpull of this TubCompSssvInsert.  # noqa: E501
        :rtype: str
        """
        return self._conditionpull

    @conditionpull.setter
    def conditionpull(self, conditionpull):
        """Sets the conditionpull of this TubCompSssvInsert.


        :param conditionpull: The conditionpull of this TubCompSssvInsert.  # noqa: E501
        :type: str
        """

        self._conditionpull = conditionpull

    @property
    def conditionrun(self):
        """Gets the conditionrun of this TubCompSssvInsert.  # noqa: E501


        :return: The conditionrun of this TubCompSssvInsert.  # noqa: E501
        :rtype: str
        """
        return self._conditionrun

    @conditionrun.setter
    def conditionrun(self, conditionrun):
        """Sets the conditionrun of this TubCompSssvInsert.


        :param conditionrun: The conditionrun of this TubCompSssvInsert.  # noqa: E501
        :type: str
        """

        self._conditionrun = conditionrun

    @property
    def dttmpull(self):
        """Gets the dttmpull of this TubCompSssvInsert.  # noqa: E501


        :return: The dttmpull of this TubCompSssvInsert.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmpull

    @dttmpull.setter
    def dttmpull(self, dttmpull):
        """Sets the dttmpull of this TubCompSssvInsert.


        :param dttmpull: The dttmpull of this TubCompSssvInsert.  # noqa: E501
        :type: datetime
        """

        self._dttmpull = dttmpull

    @property
    def dttmrun(self):
        """Gets the dttmrun of this TubCompSssvInsert.  # noqa: E501


        :return: The dttmrun of this TubCompSssvInsert.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmrun

    @dttmrun.setter
    def dttmrun(self, dttmrun):
        """Sets the dttmrun of this TubCompSssvInsert.


        :param dttmrun: The dttmrun of this TubCompSssvInsert.  # noqa: E501
        :type: datetime
        """

        self._dttmrun = dttmrun

    @property
    def idrec(self):
        """Gets the idrec of this TubCompSssvInsert.  # noqa: E501


        :return: The idrec of this TubCompSssvInsert.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this TubCompSssvInsert.


        :param idrec: The idrec of this TubCompSssvInsert.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecparent(self):
        """Gets the idrecparent of this TubCompSssvInsert.  # noqa: E501


        :return: The idrecparent of this TubCompSssvInsert.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this TubCompSssvInsert.


        :param idrecparent: The idrecparent of this TubCompSssvInsert.  # noqa: E501
        :type: str
        """

        self._idrecparent = idrecparent

    @property
    def idwell(self):
        """Gets the idwell of this TubCompSssvInsert.  # noqa: E501


        :return: The idwell of this TubCompSssvInsert.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this TubCompSssvInsert.


        :param idwell: The idwell of this TubCompSssvInsert.  # noqa: E501
        :type: str
        """

        self._idwell = idwell

    @property
    def lengthspacer(self):
        """Gets the lengthspacer of this TubCompSssvInsert.  # noqa: E501


        :return: The lengthspacer of this TubCompSssvInsert.  # noqa: E501
        :rtype: OneOfTubCompSssvInsertLengthspacer
        """
        return self._lengthspacer

    @lengthspacer.setter
    def lengthspacer(self, lengthspacer):
        """Sets the lengthspacer of this TubCompSssvInsert.


        :param lengthspacer: The lengthspacer of this TubCompSssvInsert.  # noqa: E501
        :type: OneOfTubCompSssvInsertLengthspacer
        """

        self._lengthspacer = lengthspacer

    @property
    def make(self):
        """Gets the make of this TubCompSssvInsert.  # noqa: E501


        :return: The make of this TubCompSssvInsert.  # noqa: E501
        :rtype: str
        """
        return self._make

    @make.setter
    def make(self, make):
        """Sets the make of this TubCompSssvInsert.


        :param make: The make of this TubCompSssvInsert.  # noqa: E501
        :type: str
        """

        self._make = make

    @property
    def model(self):
        """Gets the model of this TubCompSssvInsert.  # noqa: E501


        :return: The model of this TubCompSssvInsert.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this TubCompSssvInsert.


        :param model: The model of this TubCompSssvInsert.  # noqa: E501
        :type: str
        """

        self._model = model

    @property
    def presctrl(self):
        """Gets the presctrl of this TubCompSssvInsert.  # noqa: E501


        :return: The presctrl of this TubCompSssvInsert.  # noqa: E501
        :rtype: OneOfTubCompSssvInsertPresctrl
        """
        return self._presctrl

    @presctrl.setter
    def presctrl(self, presctrl):
        """Sets the presctrl of this TubCompSssvInsert.


        :param presctrl: The presctrl of this TubCompSssvInsert.  # noqa: E501
        :type: OneOfTubCompSssvInsertPresctrl
        """

        self._presctrl = presctrl

    @property
    def presrating(self):
        """Gets the presrating of this TubCompSssvInsert.  # noqa: E501


        :return: The presrating of this TubCompSssvInsert.  # noqa: E501
        :rtype: OneOfTubCompSssvInsertPresrating
        """
        return self._presrating

    @presrating.setter
    def presrating(self, presrating):
        """Sets the presrating of this TubCompSssvInsert.


        :param presrating: The presrating of this TubCompSssvInsert.  # noqa: E501
        :type: OneOfTubCompSssvInsertPresrating
        """

        self._presrating = presrating

    @property
    def pullreason(self):
        """Gets the pullreason of this TubCompSssvInsert.  # noqa: E501


        :return: The pullreason of this TubCompSssvInsert.  # noqa: E501
        :rtype: str
        """
        return self._pullreason

    @pullreason.setter
    def pullreason(self, pullreason):
        """Sets the pullreason of this TubCompSssvInsert.


        :param pullreason: The pullreason of this TubCompSssvInsert.  # noqa: E501
        :type: str
        """

        self._pullreason = pullreason

    @property
    def refid(self):
        """Gets the refid of this TubCompSssvInsert.  # noqa: E501


        :return: The refid of this TubCompSssvInsert.  # noqa: E501
        :rtype: str
        """
        return self._refid

    @refid.setter
    def refid(self, refid):
        """Sets the refid of this TubCompSssvInsert.


        :param refid: The refid of this TubCompSssvInsert.  # noqa: E501
        :type: str
        """

        self._refid = refid

    @property
    def seattyp(self):
        """Gets the seattyp of this TubCompSssvInsert.  # noqa: E501


        :return: The seattyp of this TubCompSssvInsert.  # noqa: E501
        :rtype: str
        """
        return self._seattyp

    @seattyp.setter
    def seattyp(self, seattyp):
        """Sets the seattyp of this TubCompSssvInsert.


        :param seattyp: The seattyp of this TubCompSssvInsert.  # noqa: E501
        :type: str
        """

        self._seattyp = seattyp

    @property
    def sn(self):
        """Gets the sn of this TubCompSssvInsert.  # noqa: E501


        :return: The sn of this TubCompSssvInsert.  # noqa: E501
        :rtype: str
        """
        return self._sn

    @sn.setter
    def sn(self, sn):
        """Sets the sn of this TubCompSssvInsert.


        :param sn: The sn of this TubCompSssvInsert.  # noqa: E501
        :type: str
        """

        self._sn = sn

    @property
    def springrt(self):
        """Gets the springrt of this TubCompSssvInsert.  # noqa: E501


        :return: The springrt of this TubCompSssvInsert.  # noqa: E501
        :rtype: OneOfTubCompSssvInsertSpringrt
        """
        return self._springrt

    @springrt.setter
    def springrt(self, springrt):
        """Sets the springrt of this TubCompSssvInsert.


        :param springrt: The springrt of this TubCompSssvInsert.  # noqa: E501
        :type: OneOfTubCompSssvInsertSpringrt
        """

        self._springrt = springrt

    @property
    def syscreatedate(self):
        """Gets the syscreatedate of this TubCompSssvInsert.  # noqa: E501


        :return: The syscreatedate of this TubCompSssvInsert.  # noqa: E501
        :rtype: datetime
        """
        return self._syscreatedate

    @syscreatedate.setter
    def syscreatedate(self, syscreatedate):
        """Sets the syscreatedate of this TubCompSssvInsert.


        :param syscreatedate: The syscreatedate of this TubCompSssvInsert.  # noqa: E501
        :type: datetime
        """

        self._syscreatedate = syscreatedate

    @property
    def syscreateuser(self):
        """Gets the syscreateuser of this TubCompSssvInsert.  # noqa: E501


        :return: The syscreateuser of this TubCompSssvInsert.  # noqa: E501
        :rtype: str
        """
        return self._syscreateuser

    @syscreateuser.setter
    def syscreateuser(self, syscreateuser):
        """Sets the syscreateuser of this TubCompSssvInsert.


        :param syscreateuser: The syscreateuser of this TubCompSssvInsert.  # noqa: E501
        :type: str
        """

        self._syscreateuser = syscreateuser

    @property
    def syslockchildren(self):
        """Gets the syslockchildren of this TubCompSssvInsert.  # noqa: E501


        :return: The syslockchildren of this TubCompSssvInsert.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildren

    @syslockchildren.setter
    def syslockchildren(self, syslockchildren):
        """Sets the syslockchildren of this TubCompSssvInsert.


        :param syslockchildren: The syslockchildren of this TubCompSssvInsert.  # noqa: E501
        :type: int
        """

        self._syslockchildren = syslockchildren

    @property
    def syslockchildrenui(self):
        """Gets the syslockchildrenui of this TubCompSssvInsert.  # noqa: E501


        :return: The syslockchildrenui of this TubCompSssvInsert.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildrenui

    @syslockchildrenui.setter
    def syslockchildrenui(self, syslockchildrenui):
        """Sets the syslockchildrenui of this TubCompSssvInsert.


        :param syslockchildrenui: The syslockchildrenui of this TubCompSssvInsert.  # noqa: E501
        :type: int
        """

        self._syslockchildrenui = syslockchildrenui

    @property
    def syslockdate(self):
        """Gets the syslockdate of this TubCompSssvInsert.  # noqa: E501


        :return: The syslockdate of this TubCompSssvInsert.  # noqa: E501
        :rtype: datetime
        """
        return self._syslockdate

    @syslockdate.setter
    def syslockdate(self, syslockdate):
        """Sets the syslockdate of this TubCompSssvInsert.


        :param syslockdate: The syslockdate of this TubCompSssvInsert.  # noqa: E501
        :type: datetime
        """

        self._syslockdate = syslockdate

    @property
    def syslockme(self):
        """Gets the syslockme of this TubCompSssvInsert.  # noqa: E501


        :return: The syslockme of this TubCompSssvInsert.  # noqa: E501
        :rtype: int
        """
        return self._syslockme

    @syslockme.setter
    def syslockme(self, syslockme):
        """Sets the syslockme of this TubCompSssvInsert.


        :param syslockme: The syslockme of this TubCompSssvInsert.  # noqa: E501
        :type: int
        """

        self._syslockme = syslockme

    @property
    def syslockmeui(self):
        """Gets the syslockmeui of this TubCompSssvInsert.  # noqa: E501


        :return: The syslockmeui of this TubCompSssvInsert.  # noqa: E501
        :rtype: int
        """
        return self._syslockmeui

    @syslockmeui.setter
    def syslockmeui(self, syslockmeui):
        """Sets the syslockmeui of this TubCompSssvInsert.


        :param syslockmeui: The syslockmeui of this TubCompSssvInsert.  # noqa: E501
        :type: int
        """

        self._syslockmeui = syslockmeui

    @property
    def sysmoddate(self):
        """Gets the sysmoddate of this TubCompSssvInsert.  # noqa: E501


        :return: The sysmoddate of this TubCompSssvInsert.  # noqa: E501
        :rtype: datetime
        """
        return self._sysmoddate

    @sysmoddate.setter
    def sysmoddate(self, sysmoddate):
        """Sets the sysmoddate of this TubCompSssvInsert.


        :param sysmoddate: The sysmoddate of this TubCompSssvInsert.  # noqa: E501
        :type: datetime
        """

        self._sysmoddate = sysmoddate

    @property
    def sysmoduser(self):
        """Gets the sysmoduser of this TubCompSssvInsert.  # noqa: E501


        :return: The sysmoduser of this TubCompSssvInsert.  # noqa: E501
        :rtype: str
        """
        return self._sysmoduser

    @sysmoduser.setter
    def sysmoduser(self, sysmoduser):
        """Sets the sysmoduser of this TubCompSssvInsert.


        :param sysmoduser: The sysmoduser of this TubCompSssvInsert.  # noqa: E501
        :type: str
        """

        self._sysmoduser = sysmoduser

    @property
    def systag(self):
        """Gets the systag of this TubCompSssvInsert.  # noqa: E501


        :return: The systag of this TubCompSssvInsert.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this TubCompSssvInsert.


        :param systag: The systag of this TubCompSssvInsert.  # noqa: E501
        :type: str
        """

        self._systag = systag

    @property
    def szidbore(self):
        """Gets the szidbore of this TubCompSssvInsert.  # noqa: E501


        :return: The szidbore of this TubCompSssvInsert.  # noqa: E501
        :rtype: OneOfTubCompSssvInsertSzidbore
        """
        return self._szidbore

    @szidbore.setter
    def szidbore(self, szidbore):
        """Sets the szidbore of this TubCompSssvInsert.


        :param szidbore: The szidbore of this TubCompSssvInsert.  # noqa: E501
        :type: OneOfTubCompSssvInsertSzidbore
        """

        self._szidbore = szidbore

    @property
    def szodbean(self):
        """Gets the szodbean of this TubCompSssvInsert.  # noqa: E501


        :return: The szodbean of this TubCompSssvInsert.  # noqa: E501
        :rtype: OneOfTubCompSssvInsertSzodbean
        """
        return self._szodbean

    @szodbean.setter
    def szodbean(self, szodbean):
        """Sets the szodbean of this TubCompSssvInsert.


        :param szodbean: The szodbean of this TubCompSssvInsert.  # noqa: E501
        :type: OneOfTubCompSssvInsertSzodbean
        """

        self._szodbean = szodbean

    @property
    def temprating(self):
        """Gets the temprating of this TubCompSssvInsert.  # noqa: E501


        :return: The temprating of this TubCompSssvInsert.  # noqa: E501
        :rtype: OneOfTubCompSssvInsertTemprating
        """
        return self._temprating

    @temprating.setter
    def temprating(self, temprating):
        """Sets the temprating of this TubCompSssvInsert.


        :param temprating: The temprating of this TubCompSssvInsert.  # noqa: E501
        :type: OneOfTubCompSssvInsertTemprating
        """

        self._temprating = temprating

    @property
    def tub_comp_sssv(self):
        """Gets the tub_comp_sssv of this TubCompSssvInsert.  # noqa: E501


        :return: The tub_comp_sssv of this TubCompSssvInsert.  # noqa: E501
        :rtype: AnyOfTubCompSssvInsertTubCompSssv
        """
        return self._tub_comp_sssv

    @tub_comp_sssv.setter
    def tub_comp_sssv(self, tub_comp_sssv):
        """Sets the tub_comp_sssv of this TubCompSssvInsert.


        :param tub_comp_sssv: The tub_comp_sssv of this TubCompSssvInsert.  # noqa: E501
        :type: AnyOfTubCompSssvInsertTubCompSssv
        """

        self._tub_comp_sssv = tub_comp_sssv

    @property
    def valvetyp(self):
        """Gets the valvetyp of this TubCompSssvInsert.  # noqa: E501


        :return: The valvetyp of this TubCompSssvInsert.  # noqa: E501
        :rtype: str
        """
        return self._valvetyp

    @valvetyp.setter
    def valvetyp(self, valvetyp):
        """Sets the valvetyp of this TubCompSssvInsert.


        :param valvetyp: The valvetyp of this TubCompSssvInsert.  # noqa: E501
        :type: str
        """

        self._valvetyp = valvetyp

    @property
    def wlretrievable(self):
        """Gets the wlretrievable of this TubCompSssvInsert.  # noqa: E501


        :return: The wlretrievable of this TubCompSssvInsert.  # noqa: E501
        :rtype: int
        """
        return self._wlretrievable

    @wlretrievable.setter
    def wlretrievable(self, wlretrievable):
        """Sets the wlretrievable of this TubCompSssvInsert.


        :param wlretrievable: The wlretrievable of this TubCompSssvInsert.  # noqa: E501
        :type: int
        """

        self._wlretrievable = wlretrievable

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TubCompSssvInsert, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TubCompSssvInsert):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
