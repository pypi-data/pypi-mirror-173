# coding: utf-8

"""
    OData Service for namespace Default

    This OData service is located at http://localhost  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TubCompControlLine(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'controlfluidtyp': 'str',
        'encapsulated': 'int',
        'encapsulatedtyp': 'str',
        'idrec': 'str',
        'idrecparent': 'str',
        'idrecwellheadcompsub': 'str',
        'idrecwellheadcompsubtk': 'str',
        'idwell': 'str',
        'material': 'str',
        'presrating': 'OneOfTubCompControlLinePresrating',
        'refno': 'str',
        'syscreatedate': 'datetime',
        'syscreateuser': 'str',
        'syslockchildren': 'int',
        'syslockchildrenui': 'int',
        'syslockdate': 'datetime',
        'syslockme': 'int',
        'syslockmeui': 'int',
        'sysmoddate': 'datetime',
        'sysmoduser': 'str',
        'systag': 'str',
        'szid': 'OneOfTubCompControlLineSzid',
        'szod': 'OneOfTubCompControlLineSzod',
        'temprating': 'OneOfTubCompControlLineTemprating',
        'tub_comp': 'AnyOfTubCompControlLineTubComp',
        'typ1': 'str',
        'typ2': 'str'
    }

    attribute_map = {
        'controlfluidtyp': 'controlfluidtyp',
        'encapsulated': 'encapsulated',
        'encapsulatedtyp': 'encapsulatedtyp',
        'idrec': 'idrec',
        'idrecparent': 'idrecparent',
        'idrecwellheadcompsub': 'idrecwellheadcompsub',
        'idrecwellheadcompsubtk': 'idrecwellheadcompsubtk',
        'idwell': 'idwell',
        'material': 'material',
        'presrating': 'presrating',
        'refno': 'refno',
        'syscreatedate': 'syscreatedate',
        'syscreateuser': 'syscreateuser',
        'syslockchildren': 'syslockchildren',
        'syslockchildrenui': 'syslockchildrenui',
        'syslockdate': 'syslockdate',
        'syslockme': 'syslockme',
        'syslockmeui': 'syslockmeui',
        'sysmoddate': 'sysmoddate',
        'sysmoduser': 'sysmoduser',
        'systag': 'systag',
        'szid': 'szid',
        'szod': 'szod',
        'temprating': 'temprating',
        'tub_comp': 'tubComp',
        'typ1': 'typ1',
        'typ2': 'typ2'
    }

    def __init__(self, controlfluidtyp=None, encapsulated=None, encapsulatedtyp=None, idrec=None, idrecparent=None, idrecwellheadcompsub=None, idrecwellheadcompsubtk=None, idwell=None, material=None, presrating=None, refno=None, syscreatedate=None, syscreateuser=None, syslockchildren=None, syslockchildrenui=None, syslockdate=None, syslockme=None, syslockmeui=None, sysmoddate=None, sysmoduser=None, systag=None, szid=None, szod=None, temprating=None, tub_comp=None, typ1=None, typ2=None):  # noqa: E501
        """TubCompControlLine - a model defined in Swagger"""  # noqa: E501
        self._controlfluidtyp = None
        self._encapsulated = None
        self._encapsulatedtyp = None
        self._idrec = None
        self._idrecparent = None
        self._idrecwellheadcompsub = None
        self._idrecwellheadcompsubtk = None
        self._idwell = None
        self._material = None
        self._presrating = None
        self._refno = None
        self._syscreatedate = None
        self._syscreateuser = None
        self._syslockchildren = None
        self._syslockchildrenui = None
        self._syslockdate = None
        self._syslockme = None
        self._syslockmeui = None
        self._sysmoddate = None
        self._sysmoduser = None
        self._systag = None
        self._szid = None
        self._szod = None
        self._temprating = None
        self._tub_comp = None
        self._typ1 = None
        self._typ2 = None
        self.discriminator = None
        if controlfluidtyp is not None:
            self.controlfluidtyp = controlfluidtyp
        if encapsulated is not None:
            self.encapsulated = encapsulated
        if encapsulatedtyp is not None:
            self.encapsulatedtyp = encapsulatedtyp
        if idrec is not None:
            self.idrec = idrec
        if idrecparent is not None:
            self.idrecparent = idrecparent
        if idrecwellheadcompsub is not None:
            self.idrecwellheadcompsub = idrecwellheadcompsub
        if idrecwellheadcompsubtk is not None:
            self.idrecwellheadcompsubtk = idrecwellheadcompsubtk
        if idwell is not None:
            self.idwell = idwell
        if material is not None:
            self.material = material
        if presrating is not None:
            self.presrating = presrating
        if refno is not None:
            self.refno = refno
        if syscreatedate is not None:
            self.syscreatedate = syscreatedate
        if syscreateuser is not None:
            self.syscreateuser = syscreateuser
        if syslockchildren is not None:
            self.syslockchildren = syslockchildren
        if syslockchildrenui is not None:
            self.syslockchildrenui = syslockchildrenui
        if syslockdate is not None:
            self.syslockdate = syslockdate
        if syslockme is not None:
            self.syslockme = syslockme
        if syslockmeui is not None:
            self.syslockmeui = syslockmeui
        if sysmoddate is not None:
            self.sysmoddate = sysmoddate
        if sysmoduser is not None:
            self.sysmoduser = sysmoduser
        if systag is not None:
            self.systag = systag
        if szid is not None:
            self.szid = szid
        if szod is not None:
            self.szod = szod
        if temprating is not None:
            self.temprating = temprating
        if tub_comp is not None:
            self.tub_comp = tub_comp
        if typ1 is not None:
            self.typ1 = typ1
        if typ2 is not None:
            self.typ2 = typ2

    @property
    def controlfluidtyp(self):
        """Gets the controlfluidtyp of this TubCompControlLine.  # noqa: E501


        :return: The controlfluidtyp of this TubCompControlLine.  # noqa: E501
        :rtype: str
        """
        return self._controlfluidtyp

    @controlfluidtyp.setter
    def controlfluidtyp(self, controlfluidtyp):
        """Sets the controlfluidtyp of this TubCompControlLine.


        :param controlfluidtyp: The controlfluidtyp of this TubCompControlLine.  # noqa: E501
        :type: str
        """

        self._controlfluidtyp = controlfluidtyp

    @property
    def encapsulated(self):
        """Gets the encapsulated of this TubCompControlLine.  # noqa: E501


        :return: The encapsulated of this TubCompControlLine.  # noqa: E501
        :rtype: int
        """
        return self._encapsulated

    @encapsulated.setter
    def encapsulated(self, encapsulated):
        """Sets the encapsulated of this TubCompControlLine.


        :param encapsulated: The encapsulated of this TubCompControlLine.  # noqa: E501
        :type: int
        """

        self._encapsulated = encapsulated

    @property
    def encapsulatedtyp(self):
        """Gets the encapsulatedtyp of this TubCompControlLine.  # noqa: E501


        :return: The encapsulatedtyp of this TubCompControlLine.  # noqa: E501
        :rtype: str
        """
        return self._encapsulatedtyp

    @encapsulatedtyp.setter
    def encapsulatedtyp(self, encapsulatedtyp):
        """Sets the encapsulatedtyp of this TubCompControlLine.


        :param encapsulatedtyp: The encapsulatedtyp of this TubCompControlLine.  # noqa: E501
        :type: str
        """

        self._encapsulatedtyp = encapsulatedtyp

    @property
    def idrec(self):
        """Gets the idrec of this TubCompControlLine.  # noqa: E501


        :return: The idrec of this TubCompControlLine.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this TubCompControlLine.


        :param idrec: The idrec of this TubCompControlLine.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecparent(self):
        """Gets the idrecparent of this TubCompControlLine.  # noqa: E501


        :return: The idrecparent of this TubCompControlLine.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this TubCompControlLine.


        :param idrecparent: The idrecparent of this TubCompControlLine.  # noqa: E501
        :type: str
        """

        self._idrecparent = idrecparent

    @property
    def idrecwellheadcompsub(self):
        """Gets the idrecwellheadcompsub of this TubCompControlLine.  # noqa: E501


        :return: The idrecwellheadcompsub of this TubCompControlLine.  # noqa: E501
        :rtype: str
        """
        return self._idrecwellheadcompsub

    @idrecwellheadcompsub.setter
    def idrecwellheadcompsub(self, idrecwellheadcompsub):
        """Sets the idrecwellheadcompsub of this TubCompControlLine.


        :param idrecwellheadcompsub: The idrecwellheadcompsub of this TubCompControlLine.  # noqa: E501
        :type: str
        """

        self._idrecwellheadcompsub = idrecwellheadcompsub

    @property
    def idrecwellheadcompsubtk(self):
        """Gets the idrecwellheadcompsubtk of this TubCompControlLine.  # noqa: E501


        :return: The idrecwellheadcompsubtk of this TubCompControlLine.  # noqa: E501
        :rtype: str
        """
        return self._idrecwellheadcompsubtk

    @idrecwellheadcompsubtk.setter
    def idrecwellheadcompsubtk(self, idrecwellheadcompsubtk):
        """Sets the idrecwellheadcompsubtk of this TubCompControlLine.


        :param idrecwellheadcompsubtk: The idrecwellheadcompsubtk of this TubCompControlLine.  # noqa: E501
        :type: str
        """

        self._idrecwellheadcompsubtk = idrecwellheadcompsubtk

    @property
    def idwell(self):
        """Gets the idwell of this TubCompControlLine.  # noqa: E501


        :return: The idwell of this TubCompControlLine.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this TubCompControlLine.


        :param idwell: The idwell of this TubCompControlLine.  # noqa: E501
        :type: str
        """

        self._idwell = idwell

    @property
    def material(self):
        """Gets the material of this TubCompControlLine.  # noqa: E501


        :return: The material of this TubCompControlLine.  # noqa: E501
        :rtype: str
        """
        return self._material

    @material.setter
    def material(self, material):
        """Sets the material of this TubCompControlLine.


        :param material: The material of this TubCompControlLine.  # noqa: E501
        :type: str
        """

        self._material = material

    @property
    def presrating(self):
        """Gets the presrating of this TubCompControlLine.  # noqa: E501


        :return: The presrating of this TubCompControlLine.  # noqa: E501
        :rtype: OneOfTubCompControlLinePresrating
        """
        return self._presrating

    @presrating.setter
    def presrating(self, presrating):
        """Sets the presrating of this TubCompControlLine.


        :param presrating: The presrating of this TubCompControlLine.  # noqa: E501
        :type: OneOfTubCompControlLinePresrating
        """

        self._presrating = presrating

    @property
    def refno(self):
        """Gets the refno of this TubCompControlLine.  # noqa: E501


        :return: The refno of this TubCompControlLine.  # noqa: E501
        :rtype: str
        """
        return self._refno

    @refno.setter
    def refno(self, refno):
        """Sets the refno of this TubCompControlLine.


        :param refno: The refno of this TubCompControlLine.  # noqa: E501
        :type: str
        """

        self._refno = refno

    @property
    def syscreatedate(self):
        """Gets the syscreatedate of this TubCompControlLine.  # noqa: E501


        :return: The syscreatedate of this TubCompControlLine.  # noqa: E501
        :rtype: datetime
        """
        return self._syscreatedate

    @syscreatedate.setter
    def syscreatedate(self, syscreatedate):
        """Sets the syscreatedate of this TubCompControlLine.


        :param syscreatedate: The syscreatedate of this TubCompControlLine.  # noqa: E501
        :type: datetime
        """

        self._syscreatedate = syscreatedate

    @property
    def syscreateuser(self):
        """Gets the syscreateuser of this TubCompControlLine.  # noqa: E501


        :return: The syscreateuser of this TubCompControlLine.  # noqa: E501
        :rtype: str
        """
        return self._syscreateuser

    @syscreateuser.setter
    def syscreateuser(self, syscreateuser):
        """Sets the syscreateuser of this TubCompControlLine.


        :param syscreateuser: The syscreateuser of this TubCompControlLine.  # noqa: E501
        :type: str
        """

        self._syscreateuser = syscreateuser

    @property
    def syslockchildren(self):
        """Gets the syslockchildren of this TubCompControlLine.  # noqa: E501


        :return: The syslockchildren of this TubCompControlLine.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildren

    @syslockchildren.setter
    def syslockchildren(self, syslockchildren):
        """Sets the syslockchildren of this TubCompControlLine.


        :param syslockchildren: The syslockchildren of this TubCompControlLine.  # noqa: E501
        :type: int
        """

        self._syslockchildren = syslockchildren

    @property
    def syslockchildrenui(self):
        """Gets the syslockchildrenui of this TubCompControlLine.  # noqa: E501


        :return: The syslockchildrenui of this TubCompControlLine.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildrenui

    @syslockchildrenui.setter
    def syslockchildrenui(self, syslockchildrenui):
        """Sets the syslockchildrenui of this TubCompControlLine.


        :param syslockchildrenui: The syslockchildrenui of this TubCompControlLine.  # noqa: E501
        :type: int
        """

        self._syslockchildrenui = syslockchildrenui

    @property
    def syslockdate(self):
        """Gets the syslockdate of this TubCompControlLine.  # noqa: E501


        :return: The syslockdate of this TubCompControlLine.  # noqa: E501
        :rtype: datetime
        """
        return self._syslockdate

    @syslockdate.setter
    def syslockdate(self, syslockdate):
        """Sets the syslockdate of this TubCompControlLine.


        :param syslockdate: The syslockdate of this TubCompControlLine.  # noqa: E501
        :type: datetime
        """

        self._syslockdate = syslockdate

    @property
    def syslockme(self):
        """Gets the syslockme of this TubCompControlLine.  # noqa: E501


        :return: The syslockme of this TubCompControlLine.  # noqa: E501
        :rtype: int
        """
        return self._syslockme

    @syslockme.setter
    def syslockme(self, syslockme):
        """Sets the syslockme of this TubCompControlLine.


        :param syslockme: The syslockme of this TubCompControlLine.  # noqa: E501
        :type: int
        """

        self._syslockme = syslockme

    @property
    def syslockmeui(self):
        """Gets the syslockmeui of this TubCompControlLine.  # noqa: E501


        :return: The syslockmeui of this TubCompControlLine.  # noqa: E501
        :rtype: int
        """
        return self._syslockmeui

    @syslockmeui.setter
    def syslockmeui(self, syslockmeui):
        """Sets the syslockmeui of this TubCompControlLine.


        :param syslockmeui: The syslockmeui of this TubCompControlLine.  # noqa: E501
        :type: int
        """

        self._syslockmeui = syslockmeui

    @property
    def sysmoddate(self):
        """Gets the sysmoddate of this TubCompControlLine.  # noqa: E501


        :return: The sysmoddate of this TubCompControlLine.  # noqa: E501
        :rtype: datetime
        """
        return self._sysmoddate

    @sysmoddate.setter
    def sysmoddate(self, sysmoddate):
        """Sets the sysmoddate of this TubCompControlLine.


        :param sysmoddate: The sysmoddate of this TubCompControlLine.  # noqa: E501
        :type: datetime
        """

        self._sysmoddate = sysmoddate

    @property
    def sysmoduser(self):
        """Gets the sysmoduser of this TubCompControlLine.  # noqa: E501


        :return: The sysmoduser of this TubCompControlLine.  # noqa: E501
        :rtype: str
        """
        return self._sysmoduser

    @sysmoduser.setter
    def sysmoduser(self, sysmoduser):
        """Sets the sysmoduser of this TubCompControlLine.


        :param sysmoduser: The sysmoduser of this TubCompControlLine.  # noqa: E501
        :type: str
        """

        self._sysmoduser = sysmoduser

    @property
    def systag(self):
        """Gets the systag of this TubCompControlLine.  # noqa: E501


        :return: The systag of this TubCompControlLine.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this TubCompControlLine.


        :param systag: The systag of this TubCompControlLine.  # noqa: E501
        :type: str
        """

        self._systag = systag

    @property
    def szid(self):
        """Gets the szid of this TubCompControlLine.  # noqa: E501


        :return: The szid of this TubCompControlLine.  # noqa: E501
        :rtype: OneOfTubCompControlLineSzid
        """
        return self._szid

    @szid.setter
    def szid(self, szid):
        """Sets the szid of this TubCompControlLine.


        :param szid: The szid of this TubCompControlLine.  # noqa: E501
        :type: OneOfTubCompControlLineSzid
        """

        self._szid = szid

    @property
    def szod(self):
        """Gets the szod of this TubCompControlLine.  # noqa: E501


        :return: The szod of this TubCompControlLine.  # noqa: E501
        :rtype: OneOfTubCompControlLineSzod
        """
        return self._szod

    @szod.setter
    def szod(self, szod):
        """Sets the szod of this TubCompControlLine.


        :param szod: The szod of this TubCompControlLine.  # noqa: E501
        :type: OneOfTubCompControlLineSzod
        """

        self._szod = szod

    @property
    def temprating(self):
        """Gets the temprating of this TubCompControlLine.  # noqa: E501


        :return: The temprating of this TubCompControlLine.  # noqa: E501
        :rtype: OneOfTubCompControlLineTemprating
        """
        return self._temprating

    @temprating.setter
    def temprating(self, temprating):
        """Sets the temprating of this TubCompControlLine.


        :param temprating: The temprating of this TubCompControlLine.  # noqa: E501
        :type: OneOfTubCompControlLineTemprating
        """

        self._temprating = temprating

    @property
    def tub_comp(self):
        """Gets the tub_comp of this TubCompControlLine.  # noqa: E501


        :return: The tub_comp of this TubCompControlLine.  # noqa: E501
        :rtype: AnyOfTubCompControlLineTubComp
        """
        return self._tub_comp

    @tub_comp.setter
    def tub_comp(self, tub_comp):
        """Sets the tub_comp of this TubCompControlLine.


        :param tub_comp: The tub_comp of this TubCompControlLine.  # noqa: E501
        :type: AnyOfTubCompControlLineTubComp
        """

        self._tub_comp = tub_comp

    @property
    def typ1(self):
        """Gets the typ1 of this TubCompControlLine.  # noqa: E501


        :return: The typ1 of this TubCompControlLine.  # noqa: E501
        :rtype: str
        """
        return self._typ1

    @typ1.setter
    def typ1(self, typ1):
        """Sets the typ1 of this TubCompControlLine.


        :param typ1: The typ1 of this TubCompControlLine.  # noqa: E501
        :type: str
        """

        self._typ1 = typ1

    @property
    def typ2(self):
        """Gets the typ2 of this TubCompControlLine.  # noqa: E501


        :return: The typ2 of this TubCompControlLine.  # noqa: E501
        :rtype: str
        """
        return self._typ2

    @typ2.setter
    def typ2(self, typ2):
        """Sets the typ2 of this TubCompControlLine.


        :param typ2: The typ2 of this TubCompControlLine.  # noqa: E501
        :type: str
        """

        self._typ2 = typ2

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TubCompControlLine, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TubCompControlLine):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
