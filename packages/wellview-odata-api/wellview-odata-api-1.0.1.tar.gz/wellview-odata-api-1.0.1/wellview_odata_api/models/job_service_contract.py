# coding: utf-8

"""
    OData Service for namespace Default

    This OData service is located at http://localhost  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class JobServiceContract(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'approvedby': 'str',
        'contractref': 'str',
        'des': 'str',
        'dttmapproved': 'datetime',
        'dttmendcontract': 'datetime',
        'dttmeval': 'datetime',
        'dttmstartcontract': 'datetime',
        'evalperformedby': 'str',
        'evalstatus': 'str',
        'idrec': 'str',
        'idrecparent': 'str',
        'idwell': 'str',
        'job': 'AnyOfJobServiceContractJob',
        'job_service_contract_evals': 'list[JobServiceContractEval]',
        'operatorcom': 'str',
        'opscondition': 'str',
        'servicecompany': 'str',
        'servicecompanycom': 'str',
        'servicecompanyparent': 'str',
        'servicecontracttyp': 'str',
        'servicetyp': 'str',
        'syscreatedate': 'datetime',
        'syscreateuser': 'str',
        'syslockchildren': 'int',
        'syslockchildrenui': 'int',
        'syslockdate': 'datetime',
        'syslockme': 'int',
        'syslockmeui': 'int',
        'sysmoddate': 'datetime',
        'sysmoduser': 'str',
        'systag': 'str'
    }

    attribute_map = {
        'approvedby': 'approvedby',
        'contractref': 'contractref',
        'des': 'des',
        'dttmapproved': 'dttmapproved',
        'dttmendcontract': 'dttmendcontract',
        'dttmeval': 'dttmeval',
        'dttmstartcontract': 'dttmstartcontract',
        'evalperformedby': 'evalperformedby',
        'evalstatus': 'evalstatus',
        'idrec': 'idrec',
        'idrecparent': 'idrecparent',
        'idwell': 'idwell',
        'job': 'job',
        'job_service_contract_evals': 'jobServiceContractEvals',
        'operatorcom': 'operatorcom',
        'opscondition': 'opscondition',
        'servicecompany': 'servicecompany',
        'servicecompanycom': 'servicecompanycom',
        'servicecompanyparent': 'servicecompanyparent',
        'servicecontracttyp': 'servicecontracttyp',
        'servicetyp': 'servicetyp',
        'syscreatedate': 'syscreatedate',
        'syscreateuser': 'syscreateuser',
        'syslockchildren': 'syslockchildren',
        'syslockchildrenui': 'syslockchildrenui',
        'syslockdate': 'syslockdate',
        'syslockme': 'syslockme',
        'syslockmeui': 'syslockmeui',
        'sysmoddate': 'sysmoddate',
        'sysmoduser': 'sysmoduser',
        'systag': 'systag'
    }

    def __init__(self, approvedby=None, contractref=None, des=None, dttmapproved=None, dttmendcontract=None, dttmeval=None, dttmstartcontract=None, evalperformedby=None, evalstatus=None, idrec=None, idrecparent=None, idwell=None, job=None, job_service_contract_evals=None, operatorcom=None, opscondition=None, servicecompany=None, servicecompanycom=None, servicecompanyparent=None, servicecontracttyp=None, servicetyp=None, syscreatedate=None, syscreateuser=None, syslockchildren=None, syslockchildrenui=None, syslockdate=None, syslockme=None, syslockmeui=None, sysmoddate=None, sysmoduser=None, systag=None):  # noqa: E501
        """JobServiceContract - a model defined in Swagger"""  # noqa: E501
        self._approvedby = None
        self._contractref = None
        self._des = None
        self._dttmapproved = None
        self._dttmendcontract = None
        self._dttmeval = None
        self._dttmstartcontract = None
        self._evalperformedby = None
        self._evalstatus = None
        self._idrec = None
        self._idrecparent = None
        self._idwell = None
        self._job = None
        self._job_service_contract_evals = None
        self._operatorcom = None
        self._opscondition = None
        self._servicecompany = None
        self._servicecompanycom = None
        self._servicecompanyparent = None
        self._servicecontracttyp = None
        self._servicetyp = None
        self._syscreatedate = None
        self._syscreateuser = None
        self._syslockchildren = None
        self._syslockchildrenui = None
        self._syslockdate = None
        self._syslockme = None
        self._syslockmeui = None
        self._sysmoddate = None
        self._sysmoduser = None
        self._systag = None
        self.discriminator = None
        if approvedby is not None:
            self.approvedby = approvedby
        if contractref is not None:
            self.contractref = contractref
        if des is not None:
            self.des = des
        if dttmapproved is not None:
            self.dttmapproved = dttmapproved
        if dttmendcontract is not None:
            self.dttmendcontract = dttmendcontract
        if dttmeval is not None:
            self.dttmeval = dttmeval
        if dttmstartcontract is not None:
            self.dttmstartcontract = dttmstartcontract
        if evalperformedby is not None:
            self.evalperformedby = evalperformedby
        if evalstatus is not None:
            self.evalstatus = evalstatus
        if idrec is not None:
            self.idrec = idrec
        if idrecparent is not None:
            self.idrecparent = idrecparent
        if idwell is not None:
            self.idwell = idwell
        if job is not None:
            self.job = job
        if job_service_contract_evals is not None:
            self.job_service_contract_evals = job_service_contract_evals
        if operatorcom is not None:
            self.operatorcom = operatorcom
        if opscondition is not None:
            self.opscondition = opscondition
        if servicecompany is not None:
            self.servicecompany = servicecompany
        if servicecompanycom is not None:
            self.servicecompanycom = servicecompanycom
        if servicecompanyparent is not None:
            self.servicecompanyparent = servicecompanyparent
        if servicecontracttyp is not None:
            self.servicecontracttyp = servicecontracttyp
        if servicetyp is not None:
            self.servicetyp = servicetyp
        if syscreatedate is not None:
            self.syscreatedate = syscreatedate
        if syscreateuser is not None:
            self.syscreateuser = syscreateuser
        if syslockchildren is not None:
            self.syslockchildren = syslockchildren
        if syslockchildrenui is not None:
            self.syslockchildrenui = syslockchildrenui
        if syslockdate is not None:
            self.syslockdate = syslockdate
        if syslockme is not None:
            self.syslockme = syslockme
        if syslockmeui is not None:
            self.syslockmeui = syslockmeui
        if sysmoddate is not None:
            self.sysmoddate = sysmoddate
        if sysmoduser is not None:
            self.sysmoduser = sysmoduser
        if systag is not None:
            self.systag = systag

    @property
    def approvedby(self):
        """Gets the approvedby of this JobServiceContract.  # noqa: E501


        :return: The approvedby of this JobServiceContract.  # noqa: E501
        :rtype: str
        """
        return self._approvedby

    @approvedby.setter
    def approvedby(self, approvedby):
        """Sets the approvedby of this JobServiceContract.


        :param approvedby: The approvedby of this JobServiceContract.  # noqa: E501
        :type: str
        """

        self._approvedby = approvedby

    @property
    def contractref(self):
        """Gets the contractref of this JobServiceContract.  # noqa: E501


        :return: The contractref of this JobServiceContract.  # noqa: E501
        :rtype: str
        """
        return self._contractref

    @contractref.setter
    def contractref(self, contractref):
        """Sets the contractref of this JobServiceContract.


        :param contractref: The contractref of this JobServiceContract.  # noqa: E501
        :type: str
        """

        self._contractref = contractref

    @property
    def des(self):
        """Gets the des of this JobServiceContract.  # noqa: E501


        :return: The des of this JobServiceContract.  # noqa: E501
        :rtype: str
        """
        return self._des

    @des.setter
    def des(self, des):
        """Sets the des of this JobServiceContract.


        :param des: The des of this JobServiceContract.  # noqa: E501
        :type: str
        """

        self._des = des

    @property
    def dttmapproved(self):
        """Gets the dttmapproved of this JobServiceContract.  # noqa: E501


        :return: The dttmapproved of this JobServiceContract.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmapproved

    @dttmapproved.setter
    def dttmapproved(self, dttmapproved):
        """Sets the dttmapproved of this JobServiceContract.


        :param dttmapproved: The dttmapproved of this JobServiceContract.  # noqa: E501
        :type: datetime
        """

        self._dttmapproved = dttmapproved

    @property
    def dttmendcontract(self):
        """Gets the dttmendcontract of this JobServiceContract.  # noqa: E501


        :return: The dttmendcontract of this JobServiceContract.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmendcontract

    @dttmendcontract.setter
    def dttmendcontract(self, dttmendcontract):
        """Sets the dttmendcontract of this JobServiceContract.


        :param dttmendcontract: The dttmendcontract of this JobServiceContract.  # noqa: E501
        :type: datetime
        """

        self._dttmendcontract = dttmendcontract

    @property
    def dttmeval(self):
        """Gets the dttmeval of this JobServiceContract.  # noqa: E501


        :return: The dttmeval of this JobServiceContract.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmeval

    @dttmeval.setter
    def dttmeval(self, dttmeval):
        """Sets the dttmeval of this JobServiceContract.


        :param dttmeval: The dttmeval of this JobServiceContract.  # noqa: E501
        :type: datetime
        """

        self._dttmeval = dttmeval

    @property
    def dttmstartcontract(self):
        """Gets the dttmstartcontract of this JobServiceContract.  # noqa: E501


        :return: The dttmstartcontract of this JobServiceContract.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmstartcontract

    @dttmstartcontract.setter
    def dttmstartcontract(self, dttmstartcontract):
        """Sets the dttmstartcontract of this JobServiceContract.


        :param dttmstartcontract: The dttmstartcontract of this JobServiceContract.  # noqa: E501
        :type: datetime
        """

        self._dttmstartcontract = dttmstartcontract

    @property
    def evalperformedby(self):
        """Gets the evalperformedby of this JobServiceContract.  # noqa: E501


        :return: The evalperformedby of this JobServiceContract.  # noqa: E501
        :rtype: str
        """
        return self._evalperformedby

    @evalperformedby.setter
    def evalperformedby(self, evalperformedby):
        """Sets the evalperformedby of this JobServiceContract.


        :param evalperformedby: The evalperformedby of this JobServiceContract.  # noqa: E501
        :type: str
        """

        self._evalperformedby = evalperformedby

    @property
    def evalstatus(self):
        """Gets the evalstatus of this JobServiceContract.  # noqa: E501


        :return: The evalstatus of this JobServiceContract.  # noqa: E501
        :rtype: str
        """
        return self._evalstatus

    @evalstatus.setter
    def evalstatus(self, evalstatus):
        """Sets the evalstatus of this JobServiceContract.


        :param evalstatus: The evalstatus of this JobServiceContract.  # noqa: E501
        :type: str
        """

        self._evalstatus = evalstatus

    @property
    def idrec(self):
        """Gets the idrec of this JobServiceContract.  # noqa: E501


        :return: The idrec of this JobServiceContract.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this JobServiceContract.


        :param idrec: The idrec of this JobServiceContract.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecparent(self):
        """Gets the idrecparent of this JobServiceContract.  # noqa: E501


        :return: The idrecparent of this JobServiceContract.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this JobServiceContract.


        :param idrecparent: The idrecparent of this JobServiceContract.  # noqa: E501
        :type: str
        """

        self._idrecparent = idrecparent

    @property
    def idwell(self):
        """Gets the idwell of this JobServiceContract.  # noqa: E501


        :return: The idwell of this JobServiceContract.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this JobServiceContract.


        :param idwell: The idwell of this JobServiceContract.  # noqa: E501
        :type: str
        """

        self._idwell = idwell

    @property
    def job(self):
        """Gets the job of this JobServiceContract.  # noqa: E501


        :return: The job of this JobServiceContract.  # noqa: E501
        :rtype: AnyOfJobServiceContractJob
        """
        return self._job

    @job.setter
    def job(self, job):
        """Sets the job of this JobServiceContract.


        :param job: The job of this JobServiceContract.  # noqa: E501
        :type: AnyOfJobServiceContractJob
        """

        self._job = job

    @property
    def job_service_contract_evals(self):
        """Gets the job_service_contract_evals of this JobServiceContract.  # noqa: E501


        :return: The job_service_contract_evals of this JobServiceContract.  # noqa: E501
        :rtype: list[JobServiceContractEval]
        """
        return self._job_service_contract_evals

    @job_service_contract_evals.setter
    def job_service_contract_evals(self, job_service_contract_evals):
        """Sets the job_service_contract_evals of this JobServiceContract.


        :param job_service_contract_evals: The job_service_contract_evals of this JobServiceContract.  # noqa: E501
        :type: list[JobServiceContractEval]
        """

        self._job_service_contract_evals = job_service_contract_evals

    @property
    def operatorcom(self):
        """Gets the operatorcom of this JobServiceContract.  # noqa: E501


        :return: The operatorcom of this JobServiceContract.  # noqa: E501
        :rtype: str
        """
        return self._operatorcom

    @operatorcom.setter
    def operatorcom(self, operatorcom):
        """Sets the operatorcom of this JobServiceContract.


        :param operatorcom: The operatorcom of this JobServiceContract.  # noqa: E501
        :type: str
        """

        self._operatorcom = operatorcom

    @property
    def opscondition(self):
        """Gets the opscondition of this JobServiceContract.  # noqa: E501


        :return: The opscondition of this JobServiceContract.  # noqa: E501
        :rtype: str
        """
        return self._opscondition

    @opscondition.setter
    def opscondition(self, opscondition):
        """Sets the opscondition of this JobServiceContract.


        :param opscondition: The opscondition of this JobServiceContract.  # noqa: E501
        :type: str
        """

        self._opscondition = opscondition

    @property
    def servicecompany(self):
        """Gets the servicecompany of this JobServiceContract.  # noqa: E501


        :return: The servicecompany of this JobServiceContract.  # noqa: E501
        :rtype: str
        """
        return self._servicecompany

    @servicecompany.setter
    def servicecompany(self, servicecompany):
        """Sets the servicecompany of this JobServiceContract.


        :param servicecompany: The servicecompany of this JobServiceContract.  # noqa: E501
        :type: str
        """

        self._servicecompany = servicecompany

    @property
    def servicecompanycom(self):
        """Gets the servicecompanycom of this JobServiceContract.  # noqa: E501


        :return: The servicecompanycom of this JobServiceContract.  # noqa: E501
        :rtype: str
        """
        return self._servicecompanycom

    @servicecompanycom.setter
    def servicecompanycom(self, servicecompanycom):
        """Sets the servicecompanycom of this JobServiceContract.


        :param servicecompanycom: The servicecompanycom of this JobServiceContract.  # noqa: E501
        :type: str
        """

        self._servicecompanycom = servicecompanycom

    @property
    def servicecompanyparent(self):
        """Gets the servicecompanyparent of this JobServiceContract.  # noqa: E501


        :return: The servicecompanyparent of this JobServiceContract.  # noqa: E501
        :rtype: str
        """
        return self._servicecompanyparent

    @servicecompanyparent.setter
    def servicecompanyparent(self, servicecompanyparent):
        """Sets the servicecompanyparent of this JobServiceContract.


        :param servicecompanyparent: The servicecompanyparent of this JobServiceContract.  # noqa: E501
        :type: str
        """

        self._servicecompanyparent = servicecompanyparent

    @property
    def servicecontracttyp(self):
        """Gets the servicecontracttyp of this JobServiceContract.  # noqa: E501


        :return: The servicecontracttyp of this JobServiceContract.  # noqa: E501
        :rtype: str
        """
        return self._servicecontracttyp

    @servicecontracttyp.setter
    def servicecontracttyp(self, servicecontracttyp):
        """Sets the servicecontracttyp of this JobServiceContract.


        :param servicecontracttyp: The servicecontracttyp of this JobServiceContract.  # noqa: E501
        :type: str
        """

        self._servicecontracttyp = servicecontracttyp

    @property
    def servicetyp(self):
        """Gets the servicetyp of this JobServiceContract.  # noqa: E501


        :return: The servicetyp of this JobServiceContract.  # noqa: E501
        :rtype: str
        """
        return self._servicetyp

    @servicetyp.setter
    def servicetyp(self, servicetyp):
        """Sets the servicetyp of this JobServiceContract.


        :param servicetyp: The servicetyp of this JobServiceContract.  # noqa: E501
        :type: str
        """

        self._servicetyp = servicetyp

    @property
    def syscreatedate(self):
        """Gets the syscreatedate of this JobServiceContract.  # noqa: E501


        :return: The syscreatedate of this JobServiceContract.  # noqa: E501
        :rtype: datetime
        """
        return self._syscreatedate

    @syscreatedate.setter
    def syscreatedate(self, syscreatedate):
        """Sets the syscreatedate of this JobServiceContract.


        :param syscreatedate: The syscreatedate of this JobServiceContract.  # noqa: E501
        :type: datetime
        """

        self._syscreatedate = syscreatedate

    @property
    def syscreateuser(self):
        """Gets the syscreateuser of this JobServiceContract.  # noqa: E501


        :return: The syscreateuser of this JobServiceContract.  # noqa: E501
        :rtype: str
        """
        return self._syscreateuser

    @syscreateuser.setter
    def syscreateuser(self, syscreateuser):
        """Sets the syscreateuser of this JobServiceContract.


        :param syscreateuser: The syscreateuser of this JobServiceContract.  # noqa: E501
        :type: str
        """

        self._syscreateuser = syscreateuser

    @property
    def syslockchildren(self):
        """Gets the syslockchildren of this JobServiceContract.  # noqa: E501


        :return: The syslockchildren of this JobServiceContract.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildren

    @syslockchildren.setter
    def syslockchildren(self, syslockchildren):
        """Sets the syslockchildren of this JobServiceContract.


        :param syslockchildren: The syslockchildren of this JobServiceContract.  # noqa: E501
        :type: int
        """

        self._syslockchildren = syslockchildren

    @property
    def syslockchildrenui(self):
        """Gets the syslockchildrenui of this JobServiceContract.  # noqa: E501


        :return: The syslockchildrenui of this JobServiceContract.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildrenui

    @syslockchildrenui.setter
    def syslockchildrenui(self, syslockchildrenui):
        """Sets the syslockchildrenui of this JobServiceContract.


        :param syslockchildrenui: The syslockchildrenui of this JobServiceContract.  # noqa: E501
        :type: int
        """

        self._syslockchildrenui = syslockchildrenui

    @property
    def syslockdate(self):
        """Gets the syslockdate of this JobServiceContract.  # noqa: E501


        :return: The syslockdate of this JobServiceContract.  # noqa: E501
        :rtype: datetime
        """
        return self._syslockdate

    @syslockdate.setter
    def syslockdate(self, syslockdate):
        """Sets the syslockdate of this JobServiceContract.


        :param syslockdate: The syslockdate of this JobServiceContract.  # noqa: E501
        :type: datetime
        """

        self._syslockdate = syslockdate

    @property
    def syslockme(self):
        """Gets the syslockme of this JobServiceContract.  # noqa: E501


        :return: The syslockme of this JobServiceContract.  # noqa: E501
        :rtype: int
        """
        return self._syslockme

    @syslockme.setter
    def syslockme(self, syslockme):
        """Sets the syslockme of this JobServiceContract.


        :param syslockme: The syslockme of this JobServiceContract.  # noqa: E501
        :type: int
        """

        self._syslockme = syslockme

    @property
    def syslockmeui(self):
        """Gets the syslockmeui of this JobServiceContract.  # noqa: E501


        :return: The syslockmeui of this JobServiceContract.  # noqa: E501
        :rtype: int
        """
        return self._syslockmeui

    @syslockmeui.setter
    def syslockmeui(self, syslockmeui):
        """Sets the syslockmeui of this JobServiceContract.


        :param syslockmeui: The syslockmeui of this JobServiceContract.  # noqa: E501
        :type: int
        """

        self._syslockmeui = syslockmeui

    @property
    def sysmoddate(self):
        """Gets the sysmoddate of this JobServiceContract.  # noqa: E501


        :return: The sysmoddate of this JobServiceContract.  # noqa: E501
        :rtype: datetime
        """
        return self._sysmoddate

    @sysmoddate.setter
    def sysmoddate(self, sysmoddate):
        """Sets the sysmoddate of this JobServiceContract.


        :param sysmoddate: The sysmoddate of this JobServiceContract.  # noqa: E501
        :type: datetime
        """

        self._sysmoddate = sysmoddate

    @property
    def sysmoduser(self):
        """Gets the sysmoduser of this JobServiceContract.  # noqa: E501


        :return: The sysmoduser of this JobServiceContract.  # noqa: E501
        :rtype: str
        """
        return self._sysmoduser

    @sysmoduser.setter
    def sysmoduser(self, sysmoduser):
        """Sets the sysmoduser of this JobServiceContract.


        :param sysmoduser: The sysmoduser of this JobServiceContract.  # noqa: E501
        :type: str
        """

        self._sysmoduser = sysmoduser

    @property
    def systag(self):
        """Gets the systag of this JobServiceContract.  # noqa: E501


        :return: The systag of this JobServiceContract.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this JobServiceContract.


        :param systag: The systag of this JobServiceContract.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JobServiceContract, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobServiceContract):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
