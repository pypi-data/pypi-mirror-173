# coding: utf-8

"""
    OData Service for namespace Default

    This OData service is located at http://localhost  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WhDrive(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bearingtyp': 'str',
        'brakesystem': 'str',
        'com': 'str',
        'conditionend': 'str',
        'conditionstart': 'str',
        'drivetyp': 'str',
        'dttmend': 'datetime',
        'dttmlastoverhaul': 'datetime',
        'dttmstart': 'datetime',
        'gearboxratio': 'OneOfWhDriveGearboxratio',
        'idrec': 'str',
        'idrecrod': 'str',
        'idrecrodtk': 'str',
        'idwell': 'str',
        'make': 'str',
        'maxgearboxtorque': 'OneOfWhDriveMaxgearboxtorque',
        'maxpower': 'OneOfWhDriveMaxpower',
        'maxspeed': 'OneOfWhDriveMaxspeed',
        'maxstructureload': 'OneOfWhDriveMaxstructureload',
        'maxthrustbearingload': 'OneOfWhDriveMaxthrustbearingload',
        'maxtorque': 'OneOfWhDriveMaxtorque',
        'model': 'str',
        'refid': 'str',
        'shaftangle': 'OneOfWhDriveShaftangle',
        'shafttyp': 'str',
        'sn': 'str',
        'syscreatedate': 'datetime',
        'syscreateuser': 'str',
        'syslockchildren': 'int',
        'syslockchildrenui': 'int',
        'syslockdate': 'datetime',
        'syslockme': 'int',
        'syslockmeui': 'int',
        'sysmoddate': 'datetime',
        'sysmoduser': 'str',
        'systag': 'str',
        'szodmainshaft': 'OneOfWhDriveSzodmainshaft',
        'usertxt1': 'str',
        'usertxt2': 'str',
        'wellheadconn': 'str',
        'wellheader': 'AnyOfWhDriveWellheader'
    }

    attribute_map = {
        'bearingtyp': 'bearingtyp',
        'brakesystem': 'brakesystem',
        'com': 'com',
        'conditionend': 'conditionend',
        'conditionstart': 'conditionstart',
        'drivetyp': 'drivetyp',
        'dttmend': 'dttmend',
        'dttmlastoverhaul': 'dttmlastoverhaul',
        'dttmstart': 'dttmstart',
        'gearboxratio': 'gearboxratio',
        'idrec': 'idrec',
        'idrecrod': 'idrecrod',
        'idrecrodtk': 'idrecrodtk',
        'idwell': 'idwell',
        'make': 'make',
        'maxgearboxtorque': 'maxgearboxtorque',
        'maxpower': 'maxpower',
        'maxspeed': 'maxspeed',
        'maxstructureload': 'maxstructureload',
        'maxthrustbearingload': 'maxthrustbearingload',
        'maxtorque': 'maxtorque',
        'model': 'model',
        'refid': 'refid',
        'shaftangle': 'shaftangle',
        'shafttyp': 'shafttyp',
        'sn': 'sn',
        'syscreatedate': 'syscreatedate',
        'syscreateuser': 'syscreateuser',
        'syslockchildren': 'syslockchildren',
        'syslockchildrenui': 'syslockchildrenui',
        'syslockdate': 'syslockdate',
        'syslockme': 'syslockme',
        'syslockmeui': 'syslockmeui',
        'sysmoddate': 'sysmoddate',
        'sysmoduser': 'sysmoduser',
        'systag': 'systag',
        'szodmainshaft': 'szodmainshaft',
        'usertxt1': 'usertxt1',
        'usertxt2': 'usertxt2',
        'wellheadconn': 'wellheadconn',
        'wellheader': 'wellheader'
    }

    def __init__(self, bearingtyp=None, brakesystem=None, com=None, conditionend=None, conditionstart=None, drivetyp=None, dttmend=None, dttmlastoverhaul=None, dttmstart=None, gearboxratio=None, idrec=None, idrecrod=None, idrecrodtk=None, idwell=None, make=None, maxgearboxtorque=None, maxpower=None, maxspeed=None, maxstructureload=None, maxthrustbearingload=None, maxtorque=None, model=None, refid=None, shaftangle=None, shafttyp=None, sn=None, syscreatedate=None, syscreateuser=None, syslockchildren=None, syslockchildrenui=None, syslockdate=None, syslockme=None, syslockmeui=None, sysmoddate=None, sysmoduser=None, systag=None, szodmainshaft=None, usertxt1=None, usertxt2=None, wellheadconn=None, wellheader=None):  # noqa: E501
        """WhDrive - a model defined in Swagger"""  # noqa: E501
        self._bearingtyp = None
        self._brakesystem = None
        self._com = None
        self._conditionend = None
        self._conditionstart = None
        self._drivetyp = None
        self._dttmend = None
        self._dttmlastoverhaul = None
        self._dttmstart = None
        self._gearboxratio = None
        self._idrec = None
        self._idrecrod = None
        self._idrecrodtk = None
        self._idwell = None
        self._make = None
        self._maxgearboxtorque = None
        self._maxpower = None
        self._maxspeed = None
        self._maxstructureload = None
        self._maxthrustbearingload = None
        self._maxtorque = None
        self._model = None
        self._refid = None
        self._shaftangle = None
        self._shafttyp = None
        self._sn = None
        self._syscreatedate = None
        self._syscreateuser = None
        self._syslockchildren = None
        self._syslockchildrenui = None
        self._syslockdate = None
        self._syslockme = None
        self._syslockmeui = None
        self._sysmoddate = None
        self._sysmoduser = None
        self._systag = None
        self._szodmainshaft = None
        self._usertxt1 = None
        self._usertxt2 = None
        self._wellheadconn = None
        self._wellheader = None
        self.discriminator = None
        if bearingtyp is not None:
            self.bearingtyp = bearingtyp
        if brakesystem is not None:
            self.brakesystem = brakesystem
        if com is not None:
            self.com = com
        if conditionend is not None:
            self.conditionend = conditionend
        if conditionstart is not None:
            self.conditionstart = conditionstart
        if drivetyp is not None:
            self.drivetyp = drivetyp
        if dttmend is not None:
            self.dttmend = dttmend
        if dttmlastoverhaul is not None:
            self.dttmlastoverhaul = dttmlastoverhaul
        if dttmstart is not None:
            self.dttmstart = dttmstart
        if gearboxratio is not None:
            self.gearboxratio = gearboxratio
        if idrec is not None:
            self.idrec = idrec
        if idrecrod is not None:
            self.idrecrod = idrecrod
        if idrecrodtk is not None:
            self.idrecrodtk = idrecrodtk
        if idwell is not None:
            self.idwell = idwell
        if make is not None:
            self.make = make
        if maxgearboxtorque is not None:
            self.maxgearboxtorque = maxgearboxtorque
        if maxpower is not None:
            self.maxpower = maxpower
        if maxspeed is not None:
            self.maxspeed = maxspeed
        if maxstructureload is not None:
            self.maxstructureload = maxstructureload
        if maxthrustbearingload is not None:
            self.maxthrustbearingload = maxthrustbearingload
        if maxtorque is not None:
            self.maxtorque = maxtorque
        if model is not None:
            self.model = model
        if refid is not None:
            self.refid = refid
        if shaftangle is not None:
            self.shaftangle = shaftangle
        if shafttyp is not None:
            self.shafttyp = shafttyp
        if sn is not None:
            self.sn = sn
        if syscreatedate is not None:
            self.syscreatedate = syscreatedate
        if syscreateuser is not None:
            self.syscreateuser = syscreateuser
        if syslockchildren is not None:
            self.syslockchildren = syslockchildren
        if syslockchildrenui is not None:
            self.syslockchildrenui = syslockchildrenui
        if syslockdate is not None:
            self.syslockdate = syslockdate
        if syslockme is not None:
            self.syslockme = syslockme
        if syslockmeui is not None:
            self.syslockmeui = syslockmeui
        if sysmoddate is not None:
            self.sysmoddate = sysmoddate
        if sysmoduser is not None:
            self.sysmoduser = sysmoduser
        if systag is not None:
            self.systag = systag
        if szodmainshaft is not None:
            self.szodmainshaft = szodmainshaft
        if usertxt1 is not None:
            self.usertxt1 = usertxt1
        if usertxt2 is not None:
            self.usertxt2 = usertxt2
        if wellheadconn is not None:
            self.wellheadconn = wellheadconn
        if wellheader is not None:
            self.wellheader = wellheader

    @property
    def bearingtyp(self):
        """Gets the bearingtyp of this WhDrive.  # noqa: E501


        :return: The bearingtyp of this WhDrive.  # noqa: E501
        :rtype: str
        """
        return self._bearingtyp

    @bearingtyp.setter
    def bearingtyp(self, bearingtyp):
        """Sets the bearingtyp of this WhDrive.


        :param bearingtyp: The bearingtyp of this WhDrive.  # noqa: E501
        :type: str
        """

        self._bearingtyp = bearingtyp

    @property
    def brakesystem(self):
        """Gets the brakesystem of this WhDrive.  # noqa: E501


        :return: The brakesystem of this WhDrive.  # noqa: E501
        :rtype: str
        """
        return self._brakesystem

    @brakesystem.setter
    def brakesystem(self, brakesystem):
        """Sets the brakesystem of this WhDrive.


        :param brakesystem: The brakesystem of this WhDrive.  # noqa: E501
        :type: str
        """

        self._brakesystem = brakesystem

    @property
    def com(self):
        """Gets the com of this WhDrive.  # noqa: E501


        :return: The com of this WhDrive.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this WhDrive.


        :param com: The com of this WhDrive.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def conditionend(self):
        """Gets the conditionend of this WhDrive.  # noqa: E501


        :return: The conditionend of this WhDrive.  # noqa: E501
        :rtype: str
        """
        return self._conditionend

    @conditionend.setter
    def conditionend(self, conditionend):
        """Sets the conditionend of this WhDrive.


        :param conditionend: The conditionend of this WhDrive.  # noqa: E501
        :type: str
        """

        self._conditionend = conditionend

    @property
    def conditionstart(self):
        """Gets the conditionstart of this WhDrive.  # noqa: E501


        :return: The conditionstart of this WhDrive.  # noqa: E501
        :rtype: str
        """
        return self._conditionstart

    @conditionstart.setter
    def conditionstart(self, conditionstart):
        """Sets the conditionstart of this WhDrive.


        :param conditionstart: The conditionstart of this WhDrive.  # noqa: E501
        :type: str
        """

        self._conditionstart = conditionstart

    @property
    def drivetyp(self):
        """Gets the drivetyp of this WhDrive.  # noqa: E501


        :return: The drivetyp of this WhDrive.  # noqa: E501
        :rtype: str
        """
        return self._drivetyp

    @drivetyp.setter
    def drivetyp(self, drivetyp):
        """Sets the drivetyp of this WhDrive.


        :param drivetyp: The drivetyp of this WhDrive.  # noqa: E501
        :type: str
        """

        self._drivetyp = drivetyp

    @property
    def dttmend(self):
        """Gets the dttmend of this WhDrive.  # noqa: E501


        :return: The dttmend of this WhDrive.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmend

    @dttmend.setter
    def dttmend(self, dttmend):
        """Sets the dttmend of this WhDrive.


        :param dttmend: The dttmend of this WhDrive.  # noqa: E501
        :type: datetime
        """

        self._dttmend = dttmend

    @property
    def dttmlastoverhaul(self):
        """Gets the dttmlastoverhaul of this WhDrive.  # noqa: E501


        :return: The dttmlastoverhaul of this WhDrive.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmlastoverhaul

    @dttmlastoverhaul.setter
    def dttmlastoverhaul(self, dttmlastoverhaul):
        """Sets the dttmlastoverhaul of this WhDrive.


        :param dttmlastoverhaul: The dttmlastoverhaul of this WhDrive.  # noqa: E501
        :type: datetime
        """

        self._dttmlastoverhaul = dttmlastoverhaul

    @property
    def dttmstart(self):
        """Gets the dttmstart of this WhDrive.  # noqa: E501


        :return: The dttmstart of this WhDrive.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmstart

    @dttmstart.setter
    def dttmstart(self, dttmstart):
        """Sets the dttmstart of this WhDrive.


        :param dttmstart: The dttmstart of this WhDrive.  # noqa: E501
        :type: datetime
        """

        self._dttmstart = dttmstart

    @property
    def gearboxratio(self):
        """Gets the gearboxratio of this WhDrive.  # noqa: E501


        :return: The gearboxratio of this WhDrive.  # noqa: E501
        :rtype: OneOfWhDriveGearboxratio
        """
        return self._gearboxratio

    @gearboxratio.setter
    def gearboxratio(self, gearboxratio):
        """Sets the gearboxratio of this WhDrive.


        :param gearboxratio: The gearboxratio of this WhDrive.  # noqa: E501
        :type: OneOfWhDriveGearboxratio
        """

        self._gearboxratio = gearboxratio

    @property
    def idrec(self):
        """Gets the idrec of this WhDrive.  # noqa: E501


        :return: The idrec of this WhDrive.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this WhDrive.


        :param idrec: The idrec of this WhDrive.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecrod(self):
        """Gets the idrecrod of this WhDrive.  # noqa: E501


        :return: The idrecrod of this WhDrive.  # noqa: E501
        :rtype: str
        """
        return self._idrecrod

    @idrecrod.setter
    def idrecrod(self, idrecrod):
        """Sets the idrecrod of this WhDrive.


        :param idrecrod: The idrecrod of this WhDrive.  # noqa: E501
        :type: str
        """

        self._idrecrod = idrecrod

    @property
    def idrecrodtk(self):
        """Gets the idrecrodtk of this WhDrive.  # noqa: E501


        :return: The idrecrodtk of this WhDrive.  # noqa: E501
        :rtype: str
        """
        return self._idrecrodtk

    @idrecrodtk.setter
    def idrecrodtk(self, idrecrodtk):
        """Sets the idrecrodtk of this WhDrive.


        :param idrecrodtk: The idrecrodtk of this WhDrive.  # noqa: E501
        :type: str
        """

        self._idrecrodtk = idrecrodtk

    @property
    def idwell(self):
        """Gets the idwell of this WhDrive.  # noqa: E501


        :return: The idwell of this WhDrive.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this WhDrive.


        :param idwell: The idwell of this WhDrive.  # noqa: E501
        :type: str
        """

        self._idwell = idwell

    @property
    def make(self):
        """Gets the make of this WhDrive.  # noqa: E501


        :return: The make of this WhDrive.  # noqa: E501
        :rtype: str
        """
        return self._make

    @make.setter
    def make(self, make):
        """Sets the make of this WhDrive.


        :param make: The make of this WhDrive.  # noqa: E501
        :type: str
        """

        self._make = make

    @property
    def maxgearboxtorque(self):
        """Gets the maxgearboxtorque of this WhDrive.  # noqa: E501


        :return: The maxgearboxtorque of this WhDrive.  # noqa: E501
        :rtype: OneOfWhDriveMaxgearboxtorque
        """
        return self._maxgearboxtorque

    @maxgearboxtorque.setter
    def maxgearboxtorque(self, maxgearboxtorque):
        """Sets the maxgearboxtorque of this WhDrive.


        :param maxgearboxtorque: The maxgearboxtorque of this WhDrive.  # noqa: E501
        :type: OneOfWhDriveMaxgearboxtorque
        """

        self._maxgearboxtorque = maxgearboxtorque

    @property
    def maxpower(self):
        """Gets the maxpower of this WhDrive.  # noqa: E501


        :return: The maxpower of this WhDrive.  # noqa: E501
        :rtype: OneOfWhDriveMaxpower
        """
        return self._maxpower

    @maxpower.setter
    def maxpower(self, maxpower):
        """Sets the maxpower of this WhDrive.


        :param maxpower: The maxpower of this WhDrive.  # noqa: E501
        :type: OneOfWhDriveMaxpower
        """

        self._maxpower = maxpower

    @property
    def maxspeed(self):
        """Gets the maxspeed of this WhDrive.  # noqa: E501


        :return: The maxspeed of this WhDrive.  # noqa: E501
        :rtype: OneOfWhDriveMaxspeed
        """
        return self._maxspeed

    @maxspeed.setter
    def maxspeed(self, maxspeed):
        """Sets the maxspeed of this WhDrive.


        :param maxspeed: The maxspeed of this WhDrive.  # noqa: E501
        :type: OneOfWhDriveMaxspeed
        """

        self._maxspeed = maxspeed

    @property
    def maxstructureload(self):
        """Gets the maxstructureload of this WhDrive.  # noqa: E501


        :return: The maxstructureload of this WhDrive.  # noqa: E501
        :rtype: OneOfWhDriveMaxstructureload
        """
        return self._maxstructureload

    @maxstructureload.setter
    def maxstructureload(self, maxstructureload):
        """Sets the maxstructureload of this WhDrive.


        :param maxstructureload: The maxstructureload of this WhDrive.  # noqa: E501
        :type: OneOfWhDriveMaxstructureload
        """

        self._maxstructureload = maxstructureload

    @property
    def maxthrustbearingload(self):
        """Gets the maxthrustbearingload of this WhDrive.  # noqa: E501


        :return: The maxthrustbearingload of this WhDrive.  # noqa: E501
        :rtype: OneOfWhDriveMaxthrustbearingload
        """
        return self._maxthrustbearingload

    @maxthrustbearingload.setter
    def maxthrustbearingload(self, maxthrustbearingload):
        """Sets the maxthrustbearingload of this WhDrive.


        :param maxthrustbearingload: The maxthrustbearingload of this WhDrive.  # noqa: E501
        :type: OneOfWhDriveMaxthrustbearingload
        """

        self._maxthrustbearingload = maxthrustbearingload

    @property
    def maxtorque(self):
        """Gets the maxtorque of this WhDrive.  # noqa: E501


        :return: The maxtorque of this WhDrive.  # noqa: E501
        :rtype: OneOfWhDriveMaxtorque
        """
        return self._maxtorque

    @maxtorque.setter
    def maxtorque(self, maxtorque):
        """Sets the maxtorque of this WhDrive.


        :param maxtorque: The maxtorque of this WhDrive.  # noqa: E501
        :type: OneOfWhDriveMaxtorque
        """

        self._maxtorque = maxtorque

    @property
    def model(self):
        """Gets the model of this WhDrive.  # noqa: E501


        :return: The model of this WhDrive.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this WhDrive.


        :param model: The model of this WhDrive.  # noqa: E501
        :type: str
        """

        self._model = model

    @property
    def refid(self):
        """Gets the refid of this WhDrive.  # noqa: E501


        :return: The refid of this WhDrive.  # noqa: E501
        :rtype: str
        """
        return self._refid

    @refid.setter
    def refid(self, refid):
        """Sets the refid of this WhDrive.


        :param refid: The refid of this WhDrive.  # noqa: E501
        :type: str
        """

        self._refid = refid

    @property
    def shaftangle(self):
        """Gets the shaftangle of this WhDrive.  # noqa: E501


        :return: The shaftangle of this WhDrive.  # noqa: E501
        :rtype: OneOfWhDriveShaftangle
        """
        return self._shaftangle

    @shaftangle.setter
    def shaftangle(self, shaftangle):
        """Sets the shaftangle of this WhDrive.


        :param shaftangle: The shaftangle of this WhDrive.  # noqa: E501
        :type: OneOfWhDriveShaftangle
        """

        self._shaftangle = shaftangle

    @property
    def shafttyp(self):
        """Gets the shafttyp of this WhDrive.  # noqa: E501


        :return: The shafttyp of this WhDrive.  # noqa: E501
        :rtype: str
        """
        return self._shafttyp

    @shafttyp.setter
    def shafttyp(self, shafttyp):
        """Sets the shafttyp of this WhDrive.


        :param shafttyp: The shafttyp of this WhDrive.  # noqa: E501
        :type: str
        """

        self._shafttyp = shafttyp

    @property
    def sn(self):
        """Gets the sn of this WhDrive.  # noqa: E501


        :return: The sn of this WhDrive.  # noqa: E501
        :rtype: str
        """
        return self._sn

    @sn.setter
    def sn(self, sn):
        """Sets the sn of this WhDrive.


        :param sn: The sn of this WhDrive.  # noqa: E501
        :type: str
        """

        self._sn = sn

    @property
    def syscreatedate(self):
        """Gets the syscreatedate of this WhDrive.  # noqa: E501


        :return: The syscreatedate of this WhDrive.  # noqa: E501
        :rtype: datetime
        """
        return self._syscreatedate

    @syscreatedate.setter
    def syscreatedate(self, syscreatedate):
        """Sets the syscreatedate of this WhDrive.


        :param syscreatedate: The syscreatedate of this WhDrive.  # noqa: E501
        :type: datetime
        """

        self._syscreatedate = syscreatedate

    @property
    def syscreateuser(self):
        """Gets the syscreateuser of this WhDrive.  # noqa: E501


        :return: The syscreateuser of this WhDrive.  # noqa: E501
        :rtype: str
        """
        return self._syscreateuser

    @syscreateuser.setter
    def syscreateuser(self, syscreateuser):
        """Sets the syscreateuser of this WhDrive.


        :param syscreateuser: The syscreateuser of this WhDrive.  # noqa: E501
        :type: str
        """

        self._syscreateuser = syscreateuser

    @property
    def syslockchildren(self):
        """Gets the syslockchildren of this WhDrive.  # noqa: E501


        :return: The syslockchildren of this WhDrive.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildren

    @syslockchildren.setter
    def syslockchildren(self, syslockchildren):
        """Sets the syslockchildren of this WhDrive.


        :param syslockchildren: The syslockchildren of this WhDrive.  # noqa: E501
        :type: int
        """

        self._syslockchildren = syslockchildren

    @property
    def syslockchildrenui(self):
        """Gets the syslockchildrenui of this WhDrive.  # noqa: E501


        :return: The syslockchildrenui of this WhDrive.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildrenui

    @syslockchildrenui.setter
    def syslockchildrenui(self, syslockchildrenui):
        """Sets the syslockchildrenui of this WhDrive.


        :param syslockchildrenui: The syslockchildrenui of this WhDrive.  # noqa: E501
        :type: int
        """

        self._syslockchildrenui = syslockchildrenui

    @property
    def syslockdate(self):
        """Gets the syslockdate of this WhDrive.  # noqa: E501


        :return: The syslockdate of this WhDrive.  # noqa: E501
        :rtype: datetime
        """
        return self._syslockdate

    @syslockdate.setter
    def syslockdate(self, syslockdate):
        """Sets the syslockdate of this WhDrive.


        :param syslockdate: The syslockdate of this WhDrive.  # noqa: E501
        :type: datetime
        """

        self._syslockdate = syslockdate

    @property
    def syslockme(self):
        """Gets the syslockme of this WhDrive.  # noqa: E501


        :return: The syslockme of this WhDrive.  # noqa: E501
        :rtype: int
        """
        return self._syslockme

    @syslockme.setter
    def syslockme(self, syslockme):
        """Sets the syslockme of this WhDrive.


        :param syslockme: The syslockme of this WhDrive.  # noqa: E501
        :type: int
        """

        self._syslockme = syslockme

    @property
    def syslockmeui(self):
        """Gets the syslockmeui of this WhDrive.  # noqa: E501


        :return: The syslockmeui of this WhDrive.  # noqa: E501
        :rtype: int
        """
        return self._syslockmeui

    @syslockmeui.setter
    def syslockmeui(self, syslockmeui):
        """Sets the syslockmeui of this WhDrive.


        :param syslockmeui: The syslockmeui of this WhDrive.  # noqa: E501
        :type: int
        """

        self._syslockmeui = syslockmeui

    @property
    def sysmoddate(self):
        """Gets the sysmoddate of this WhDrive.  # noqa: E501


        :return: The sysmoddate of this WhDrive.  # noqa: E501
        :rtype: datetime
        """
        return self._sysmoddate

    @sysmoddate.setter
    def sysmoddate(self, sysmoddate):
        """Sets the sysmoddate of this WhDrive.


        :param sysmoddate: The sysmoddate of this WhDrive.  # noqa: E501
        :type: datetime
        """

        self._sysmoddate = sysmoddate

    @property
    def sysmoduser(self):
        """Gets the sysmoduser of this WhDrive.  # noqa: E501


        :return: The sysmoduser of this WhDrive.  # noqa: E501
        :rtype: str
        """
        return self._sysmoduser

    @sysmoduser.setter
    def sysmoduser(self, sysmoduser):
        """Sets the sysmoduser of this WhDrive.


        :param sysmoduser: The sysmoduser of this WhDrive.  # noqa: E501
        :type: str
        """

        self._sysmoduser = sysmoduser

    @property
    def systag(self):
        """Gets the systag of this WhDrive.  # noqa: E501


        :return: The systag of this WhDrive.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this WhDrive.


        :param systag: The systag of this WhDrive.  # noqa: E501
        :type: str
        """

        self._systag = systag

    @property
    def szodmainshaft(self):
        """Gets the szodmainshaft of this WhDrive.  # noqa: E501


        :return: The szodmainshaft of this WhDrive.  # noqa: E501
        :rtype: OneOfWhDriveSzodmainshaft
        """
        return self._szodmainshaft

    @szodmainshaft.setter
    def szodmainshaft(self, szodmainshaft):
        """Sets the szodmainshaft of this WhDrive.


        :param szodmainshaft: The szodmainshaft of this WhDrive.  # noqa: E501
        :type: OneOfWhDriveSzodmainshaft
        """

        self._szodmainshaft = szodmainshaft

    @property
    def usertxt1(self):
        """Gets the usertxt1 of this WhDrive.  # noqa: E501


        :return: The usertxt1 of this WhDrive.  # noqa: E501
        :rtype: str
        """
        return self._usertxt1

    @usertxt1.setter
    def usertxt1(self, usertxt1):
        """Sets the usertxt1 of this WhDrive.


        :param usertxt1: The usertxt1 of this WhDrive.  # noqa: E501
        :type: str
        """

        self._usertxt1 = usertxt1

    @property
    def usertxt2(self):
        """Gets the usertxt2 of this WhDrive.  # noqa: E501


        :return: The usertxt2 of this WhDrive.  # noqa: E501
        :rtype: str
        """
        return self._usertxt2

    @usertxt2.setter
    def usertxt2(self, usertxt2):
        """Sets the usertxt2 of this WhDrive.


        :param usertxt2: The usertxt2 of this WhDrive.  # noqa: E501
        :type: str
        """

        self._usertxt2 = usertxt2

    @property
    def wellheadconn(self):
        """Gets the wellheadconn of this WhDrive.  # noqa: E501


        :return: The wellheadconn of this WhDrive.  # noqa: E501
        :rtype: str
        """
        return self._wellheadconn

    @wellheadconn.setter
    def wellheadconn(self, wellheadconn):
        """Sets the wellheadconn of this WhDrive.


        :param wellheadconn: The wellheadconn of this WhDrive.  # noqa: E501
        :type: str
        """

        self._wellheadconn = wellheadconn

    @property
    def wellheader(self):
        """Gets the wellheader of this WhDrive.  # noqa: E501


        :return: The wellheader of this WhDrive.  # noqa: E501
        :rtype: AnyOfWhDriveWellheader
        """
        return self._wellheader

    @wellheader.setter
    def wellheader(self, wellheader):
        """Sets the wellheader of this WhDrive.


        :param wellheader: The wellheader of this WhDrive.  # noqa: E501
        :type: AnyOfWhDriveWellheader
        """

        self._wellheader = wellheader

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WhDrive, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WhDrive):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
