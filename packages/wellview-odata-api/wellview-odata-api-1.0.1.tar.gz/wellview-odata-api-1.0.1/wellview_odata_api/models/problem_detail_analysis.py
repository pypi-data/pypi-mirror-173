# coding: utf-8

"""
    OData Service for namespace Default

    This OData service is located at http://localhost  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProblemDetailAnalysis(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'actionrqd': 'int',
        'analysistyp': 'str',
        'analyst': 'str',
        'com': 'str',
        'condition': 'str',
        'dttminspect': 'datetime',
        'durequip': 'OneOfProblemDetailAnalysisDurequip',
        'idrec': 'str',
        'idrecparent': 'str',
        'idwell': 'str',
        'material': 'str',
        'metallurgy': 'str',
        'partcost': 'OneOfProblemDetailAnalysisPartcost',
        'partdes': 'str',
        'partrefno': 'str',
        'parttyp1': 'str',
        'parttyp2': 'str',
        'problem_detail': 'AnyOfProblemDetailAnalysisProblemDetail',
        'rootcause1': 'str',
        'rootcause2': 'str',
        'syscreatedate': 'datetime',
        'syscreateuser': 'str',
        'syslockchildren': 'int',
        'syslockchildrenui': 'int',
        'syslockdate': 'datetime',
        'syslockme': 'int',
        'syslockmeui': 'int',
        'sysmoddate': 'datetime',
        'sysmoduser': 'str',
        'systag': 'str'
    }

    attribute_map = {
        'actionrqd': 'actionrqd',
        'analysistyp': 'analysistyp',
        'analyst': 'analyst',
        'com': 'com',
        'condition': 'condition',
        'dttminspect': 'dttminspect',
        'durequip': 'durequip',
        'idrec': 'idrec',
        'idrecparent': 'idrecparent',
        'idwell': 'idwell',
        'material': 'material',
        'metallurgy': 'metallurgy',
        'partcost': 'partcost',
        'partdes': 'partdes',
        'partrefno': 'partrefno',
        'parttyp1': 'parttyp1',
        'parttyp2': 'parttyp2',
        'problem_detail': 'problemDetail',
        'rootcause1': 'rootcause1',
        'rootcause2': 'rootcause2',
        'syscreatedate': 'syscreatedate',
        'syscreateuser': 'syscreateuser',
        'syslockchildren': 'syslockchildren',
        'syslockchildrenui': 'syslockchildrenui',
        'syslockdate': 'syslockdate',
        'syslockme': 'syslockme',
        'syslockmeui': 'syslockmeui',
        'sysmoddate': 'sysmoddate',
        'sysmoduser': 'sysmoduser',
        'systag': 'systag'
    }

    def __init__(self, actionrqd=None, analysistyp=None, analyst=None, com=None, condition=None, dttminspect=None, durequip=None, idrec=None, idrecparent=None, idwell=None, material=None, metallurgy=None, partcost=None, partdes=None, partrefno=None, parttyp1=None, parttyp2=None, problem_detail=None, rootcause1=None, rootcause2=None, syscreatedate=None, syscreateuser=None, syslockchildren=None, syslockchildrenui=None, syslockdate=None, syslockme=None, syslockmeui=None, sysmoddate=None, sysmoduser=None, systag=None):  # noqa: E501
        """ProblemDetailAnalysis - a model defined in Swagger"""  # noqa: E501
        self._actionrqd = None
        self._analysistyp = None
        self._analyst = None
        self._com = None
        self._condition = None
        self._dttminspect = None
        self._durequip = None
        self._idrec = None
        self._idrecparent = None
        self._idwell = None
        self._material = None
        self._metallurgy = None
        self._partcost = None
        self._partdes = None
        self._partrefno = None
        self._parttyp1 = None
        self._parttyp2 = None
        self._problem_detail = None
        self._rootcause1 = None
        self._rootcause2 = None
        self._syscreatedate = None
        self._syscreateuser = None
        self._syslockchildren = None
        self._syslockchildrenui = None
        self._syslockdate = None
        self._syslockme = None
        self._syslockmeui = None
        self._sysmoddate = None
        self._sysmoduser = None
        self._systag = None
        self.discriminator = None
        if actionrqd is not None:
            self.actionrqd = actionrqd
        if analysistyp is not None:
            self.analysistyp = analysistyp
        if analyst is not None:
            self.analyst = analyst
        if com is not None:
            self.com = com
        if condition is not None:
            self.condition = condition
        if dttminspect is not None:
            self.dttminspect = dttminspect
        if durequip is not None:
            self.durequip = durequip
        if idrec is not None:
            self.idrec = idrec
        if idrecparent is not None:
            self.idrecparent = idrecparent
        if idwell is not None:
            self.idwell = idwell
        if material is not None:
            self.material = material
        if metallurgy is not None:
            self.metallurgy = metallurgy
        if partcost is not None:
            self.partcost = partcost
        if partdes is not None:
            self.partdes = partdes
        if partrefno is not None:
            self.partrefno = partrefno
        if parttyp1 is not None:
            self.parttyp1 = parttyp1
        if parttyp2 is not None:
            self.parttyp2 = parttyp2
        if problem_detail is not None:
            self.problem_detail = problem_detail
        if rootcause1 is not None:
            self.rootcause1 = rootcause1
        if rootcause2 is not None:
            self.rootcause2 = rootcause2
        if syscreatedate is not None:
            self.syscreatedate = syscreatedate
        if syscreateuser is not None:
            self.syscreateuser = syscreateuser
        if syslockchildren is not None:
            self.syslockchildren = syslockchildren
        if syslockchildrenui is not None:
            self.syslockchildrenui = syslockchildrenui
        if syslockdate is not None:
            self.syslockdate = syslockdate
        if syslockme is not None:
            self.syslockme = syslockme
        if syslockmeui is not None:
            self.syslockmeui = syslockmeui
        if sysmoddate is not None:
            self.sysmoddate = sysmoddate
        if sysmoduser is not None:
            self.sysmoduser = sysmoduser
        if systag is not None:
            self.systag = systag

    @property
    def actionrqd(self):
        """Gets the actionrqd of this ProblemDetailAnalysis.  # noqa: E501


        :return: The actionrqd of this ProblemDetailAnalysis.  # noqa: E501
        :rtype: int
        """
        return self._actionrqd

    @actionrqd.setter
    def actionrqd(self, actionrqd):
        """Sets the actionrqd of this ProblemDetailAnalysis.


        :param actionrqd: The actionrqd of this ProblemDetailAnalysis.  # noqa: E501
        :type: int
        """

        self._actionrqd = actionrqd

    @property
    def analysistyp(self):
        """Gets the analysistyp of this ProblemDetailAnalysis.  # noqa: E501


        :return: The analysistyp of this ProblemDetailAnalysis.  # noqa: E501
        :rtype: str
        """
        return self._analysistyp

    @analysistyp.setter
    def analysistyp(self, analysistyp):
        """Sets the analysistyp of this ProblemDetailAnalysis.


        :param analysistyp: The analysistyp of this ProblemDetailAnalysis.  # noqa: E501
        :type: str
        """

        self._analysistyp = analysistyp

    @property
    def analyst(self):
        """Gets the analyst of this ProblemDetailAnalysis.  # noqa: E501


        :return: The analyst of this ProblemDetailAnalysis.  # noqa: E501
        :rtype: str
        """
        return self._analyst

    @analyst.setter
    def analyst(self, analyst):
        """Sets the analyst of this ProblemDetailAnalysis.


        :param analyst: The analyst of this ProblemDetailAnalysis.  # noqa: E501
        :type: str
        """

        self._analyst = analyst

    @property
    def com(self):
        """Gets the com of this ProblemDetailAnalysis.  # noqa: E501


        :return: The com of this ProblemDetailAnalysis.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this ProblemDetailAnalysis.


        :param com: The com of this ProblemDetailAnalysis.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def condition(self):
        """Gets the condition of this ProblemDetailAnalysis.  # noqa: E501


        :return: The condition of this ProblemDetailAnalysis.  # noqa: E501
        :rtype: str
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this ProblemDetailAnalysis.


        :param condition: The condition of this ProblemDetailAnalysis.  # noqa: E501
        :type: str
        """

        self._condition = condition

    @property
    def dttminspect(self):
        """Gets the dttminspect of this ProblemDetailAnalysis.  # noqa: E501


        :return: The dttminspect of this ProblemDetailAnalysis.  # noqa: E501
        :rtype: datetime
        """
        return self._dttminspect

    @dttminspect.setter
    def dttminspect(self, dttminspect):
        """Sets the dttminspect of this ProblemDetailAnalysis.


        :param dttminspect: The dttminspect of this ProblemDetailAnalysis.  # noqa: E501
        :type: datetime
        """

        self._dttminspect = dttminspect

    @property
    def durequip(self):
        """Gets the durequip of this ProblemDetailAnalysis.  # noqa: E501


        :return: The durequip of this ProblemDetailAnalysis.  # noqa: E501
        :rtype: OneOfProblemDetailAnalysisDurequip
        """
        return self._durequip

    @durequip.setter
    def durequip(self, durequip):
        """Sets the durequip of this ProblemDetailAnalysis.


        :param durequip: The durequip of this ProblemDetailAnalysis.  # noqa: E501
        :type: OneOfProblemDetailAnalysisDurequip
        """

        self._durequip = durequip

    @property
    def idrec(self):
        """Gets the idrec of this ProblemDetailAnalysis.  # noqa: E501


        :return: The idrec of this ProblemDetailAnalysis.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this ProblemDetailAnalysis.


        :param idrec: The idrec of this ProblemDetailAnalysis.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecparent(self):
        """Gets the idrecparent of this ProblemDetailAnalysis.  # noqa: E501


        :return: The idrecparent of this ProblemDetailAnalysis.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this ProblemDetailAnalysis.


        :param idrecparent: The idrecparent of this ProblemDetailAnalysis.  # noqa: E501
        :type: str
        """

        self._idrecparent = idrecparent

    @property
    def idwell(self):
        """Gets the idwell of this ProblemDetailAnalysis.  # noqa: E501


        :return: The idwell of this ProblemDetailAnalysis.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this ProblemDetailAnalysis.


        :param idwell: The idwell of this ProblemDetailAnalysis.  # noqa: E501
        :type: str
        """

        self._idwell = idwell

    @property
    def material(self):
        """Gets the material of this ProblemDetailAnalysis.  # noqa: E501


        :return: The material of this ProblemDetailAnalysis.  # noqa: E501
        :rtype: str
        """
        return self._material

    @material.setter
    def material(self, material):
        """Sets the material of this ProblemDetailAnalysis.


        :param material: The material of this ProblemDetailAnalysis.  # noqa: E501
        :type: str
        """

        self._material = material

    @property
    def metallurgy(self):
        """Gets the metallurgy of this ProblemDetailAnalysis.  # noqa: E501


        :return: The metallurgy of this ProblemDetailAnalysis.  # noqa: E501
        :rtype: str
        """
        return self._metallurgy

    @metallurgy.setter
    def metallurgy(self, metallurgy):
        """Sets the metallurgy of this ProblemDetailAnalysis.


        :param metallurgy: The metallurgy of this ProblemDetailAnalysis.  # noqa: E501
        :type: str
        """

        self._metallurgy = metallurgy

    @property
    def partcost(self):
        """Gets the partcost of this ProblemDetailAnalysis.  # noqa: E501


        :return: The partcost of this ProblemDetailAnalysis.  # noqa: E501
        :rtype: OneOfProblemDetailAnalysisPartcost
        """
        return self._partcost

    @partcost.setter
    def partcost(self, partcost):
        """Sets the partcost of this ProblemDetailAnalysis.


        :param partcost: The partcost of this ProblemDetailAnalysis.  # noqa: E501
        :type: OneOfProblemDetailAnalysisPartcost
        """

        self._partcost = partcost

    @property
    def partdes(self):
        """Gets the partdes of this ProblemDetailAnalysis.  # noqa: E501


        :return: The partdes of this ProblemDetailAnalysis.  # noqa: E501
        :rtype: str
        """
        return self._partdes

    @partdes.setter
    def partdes(self, partdes):
        """Sets the partdes of this ProblemDetailAnalysis.


        :param partdes: The partdes of this ProblemDetailAnalysis.  # noqa: E501
        :type: str
        """

        self._partdes = partdes

    @property
    def partrefno(self):
        """Gets the partrefno of this ProblemDetailAnalysis.  # noqa: E501


        :return: The partrefno of this ProblemDetailAnalysis.  # noqa: E501
        :rtype: str
        """
        return self._partrefno

    @partrefno.setter
    def partrefno(self, partrefno):
        """Sets the partrefno of this ProblemDetailAnalysis.


        :param partrefno: The partrefno of this ProblemDetailAnalysis.  # noqa: E501
        :type: str
        """

        self._partrefno = partrefno

    @property
    def parttyp1(self):
        """Gets the parttyp1 of this ProblemDetailAnalysis.  # noqa: E501


        :return: The parttyp1 of this ProblemDetailAnalysis.  # noqa: E501
        :rtype: str
        """
        return self._parttyp1

    @parttyp1.setter
    def parttyp1(self, parttyp1):
        """Sets the parttyp1 of this ProblemDetailAnalysis.


        :param parttyp1: The parttyp1 of this ProblemDetailAnalysis.  # noqa: E501
        :type: str
        """

        self._parttyp1 = parttyp1

    @property
    def parttyp2(self):
        """Gets the parttyp2 of this ProblemDetailAnalysis.  # noqa: E501


        :return: The parttyp2 of this ProblemDetailAnalysis.  # noqa: E501
        :rtype: str
        """
        return self._parttyp2

    @parttyp2.setter
    def parttyp2(self, parttyp2):
        """Sets the parttyp2 of this ProblemDetailAnalysis.


        :param parttyp2: The parttyp2 of this ProblemDetailAnalysis.  # noqa: E501
        :type: str
        """

        self._parttyp2 = parttyp2

    @property
    def problem_detail(self):
        """Gets the problem_detail of this ProblemDetailAnalysis.  # noqa: E501


        :return: The problem_detail of this ProblemDetailAnalysis.  # noqa: E501
        :rtype: AnyOfProblemDetailAnalysisProblemDetail
        """
        return self._problem_detail

    @problem_detail.setter
    def problem_detail(self, problem_detail):
        """Sets the problem_detail of this ProblemDetailAnalysis.


        :param problem_detail: The problem_detail of this ProblemDetailAnalysis.  # noqa: E501
        :type: AnyOfProblemDetailAnalysisProblemDetail
        """

        self._problem_detail = problem_detail

    @property
    def rootcause1(self):
        """Gets the rootcause1 of this ProblemDetailAnalysis.  # noqa: E501


        :return: The rootcause1 of this ProblemDetailAnalysis.  # noqa: E501
        :rtype: str
        """
        return self._rootcause1

    @rootcause1.setter
    def rootcause1(self, rootcause1):
        """Sets the rootcause1 of this ProblemDetailAnalysis.


        :param rootcause1: The rootcause1 of this ProblemDetailAnalysis.  # noqa: E501
        :type: str
        """

        self._rootcause1 = rootcause1

    @property
    def rootcause2(self):
        """Gets the rootcause2 of this ProblemDetailAnalysis.  # noqa: E501


        :return: The rootcause2 of this ProblemDetailAnalysis.  # noqa: E501
        :rtype: str
        """
        return self._rootcause2

    @rootcause2.setter
    def rootcause2(self, rootcause2):
        """Sets the rootcause2 of this ProblemDetailAnalysis.


        :param rootcause2: The rootcause2 of this ProblemDetailAnalysis.  # noqa: E501
        :type: str
        """

        self._rootcause2 = rootcause2

    @property
    def syscreatedate(self):
        """Gets the syscreatedate of this ProblemDetailAnalysis.  # noqa: E501


        :return: The syscreatedate of this ProblemDetailAnalysis.  # noqa: E501
        :rtype: datetime
        """
        return self._syscreatedate

    @syscreatedate.setter
    def syscreatedate(self, syscreatedate):
        """Sets the syscreatedate of this ProblemDetailAnalysis.


        :param syscreatedate: The syscreatedate of this ProblemDetailAnalysis.  # noqa: E501
        :type: datetime
        """

        self._syscreatedate = syscreatedate

    @property
    def syscreateuser(self):
        """Gets the syscreateuser of this ProblemDetailAnalysis.  # noqa: E501


        :return: The syscreateuser of this ProblemDetailAnalysis.  # noqa: E501
        :rtype: str
        """
        return self._syscreateuser

    @syscreateuser.setter
    def syscreateuser(self, syscreateuser):
        """Sets the syscreateuser of this ProblemDetailAnalysis.


        :param syscreateuser: The syscreateuser of this ProblemDetailAnalysis.  # noqa: E501
        :type: str
        """

        self._syscreateuser = syscreateuser

    @property
    def syslockchildren(self):
        """Gets the syslockchildren of this ProblemDetailAnalysis.  # noqa: E501


        :return: The syslockchildren of this ProblemDetailAnalysis.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildren

    @syslockchildren.setter
    def syslockchildren(self, syslockchildren):
        """Sets the syslockchildren of this ProblemDetailAnalysis.


        :param syslockchildren: The syslockchildren of this ProblemDetailAnalysis.  # noqa: E501
        :type: int
        """

        self._syslockchildren = syslockchildren

    @property
    def syslockchildrenui(self):
        """Gets the syslockchildrenui of this ProblemDetailAnalysis.  # noqa: E501


        :return: The syslockchildrenui of this ProblemDetailAnalysis.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildrenui

    @syslockchildrenui.setter
    def syslockchildrenui(self, syslockchildrenui):
        """Sets the syslockchildrenui of this ProblemDetailAnalysis.


        :param syslockchildrenui: The syslockchildrenui of this ProblemDetailAnalysis.  # noqa: E501
        :type: int
        """

        self._syslockchildrenui = syslockchildrenui

    @property
    def syslockdate(self):
        """Gets the syslockdate of this ProblemDetailAnalysis.  # noqa: E501


        :return: The syslockdate of this ProblemDetailAnalysis.  # noqa: E501
        :rtype: datetime
        """
        return self._syslockdate

    @syslockdate.setter
    def syslockdate(self, syslockdate):
        """Sets the syslockdate of this ProblemDetailAnalysis.


        :param syslockdate: The syslockdate of this ProblemDetailAnalysis.  # noqa: E501
        :type: datetime
        """

        self._syslockdate = syslockdate

    @property
    def syslockme(self):
        """Gets the syslockme of this ProblemDetailAnalysis.  # noqa: E501


        :return: The syslockme of this ProblemDetailAnalysis.  # noqa: E501
        :rtype: int
        """
        return self._syslockme

    @syslockme.setter
    def syslockme(self, syslockme):
        """Sets the syslockme of this ProblemDetailAnalysis.


        :param syslockme: The syslockme of this ProblemDetailAnalysis.  # noqa: E501
        :type: int
        """

        self._syslockme = syslockme

    @property
    def syslockmeui(self):
        """Gets the syslockmeui of this ProblemDetailAnalysis.  # noqa: E501


        :return: The syslockmeui of this ProblemDetailAnalysis.  # noqa: E501
        :rtype: int
        """
        return self._syslockmeui

    @syslockmeui.setter
    def syslockmeui(self, syslockmeui):
        """Sets the syslockmeui of this ProblemDetailAnalysis.


        :param syslockmeui: The syslockmeui of this ProblemDetailAnalysis.  # noqa: E501
        :type: int
        """

        self._syslockmeui = syslockmeui

    @property
    def sysmoddate(self):
        """Gets the sysmoddate of this ProblemDetailAnalysis.  # noqa: E501


        :return: The sysmoddate of this ProblemDetailAnalysis.  # noqa: E501
        :rtype: datetime
        """
        return self._sysmoddate

    @sysmoddate.setter
    def sysmoddate(self, sysmoddate):
        """Sets the sysmoddate of this ProblemDetailAnalysis.


        :param sysmoddate: The sysmoddate of this ProblemDetailAnalysis.  # noqa: E501
        :type: datetime
        """

        self._sysmoddate = sysmoddate

    @property
    def sysmoduser(self):
        """Gets the sysmoduser of this ProblemDetailAnalysis.  # noqa: E501


        :return: The sysmoduser of this ProblemDetailAnalysis.  # noqa: E501
        :rtype: str
        """
        return self._sysmoduser

    @sysmoduser.setter
    def sysmoduser(self, sysmoduser):
        """Sets the sysmoduser of this ProblemDetailAnalysis.


        :param sysmoduser: The sysmoduser of this ProblemDetailAnalysis.  # noqa: E501
        :type: str
        """

        self._sysmoduser = sysmoduser

    @property
    def systag(self):
        """Gets the systag of this ProblemDetailAnalysis.  # noqa: E501


        :return: The systag of this ProblemDetailAnalysis.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this ProblemDetailAnalysis.


        :param systag: The systag of this ProblemDetailAnalysis.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProblemDetailAnalysis, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProblemDetailAnalysis):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
