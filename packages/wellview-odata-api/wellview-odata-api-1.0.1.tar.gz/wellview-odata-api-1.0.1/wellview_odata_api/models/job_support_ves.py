# coding: utf-8

"""
    OData Service for namespace Default

    This OData service is located at http://localhost  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class JobSupportVes(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'des': 'str',
        'dttmarrive': 'datetime',
        'dttmarriveplan': 'datetime',
        'dttmdepart': 'datetime',
        'dttmdepartplan': 'datetime',
        'idrec': 'str',
        'idrecparent': 'str',
        'idwell': 'str',
        'job': 'AnyOfJobSupportVesJob',
        'locdest': 'str',
        'locorigin': 'str',
        'note': 'str',
        'passengercapacity': 'int',
        'qty': 'int',
        'refnovessel': 'str',
        'supplier': 'str',
        'syscreatedate': 'datetime',
        'syscreateuser': 'str',
        'syslockchildren': 'int',
        'syslockchildrenui': 'int',
        'syslockdate': 'datetime',
        'syslockme': 'int',
        'syslockmeui': 'int',
        'sysmoddate': 'datetime',
        'sysmoduser': 'str',
        'systag': 'str',
        'typ1': 'str',
        'typ2': 'str',
        'vesselname': 'str'
    }

    attribute_map = {
        'des': 'des',
        'dttmarrive': 'dttmarrive',
        'dttmarriveplan': 'dttmarriveplan',
        'dttmdepart': 'dttmdepart',
        'dttmdepartplan': 'dttmdepartplan',
        'idrec': 'idrec',
        'idrecparent': 'idrecparent',
        'idwell': 'idwell',
        'job': 'job',
        'locdest': 'locdest',
        'locorigin': 'locorigin',
        'note': 'note',
        'passengercapacity': 'passengercapacity',
        'qty': 'qty',
        'refnovessel': 'refnovessel',
        'supplier': 'supplier',
        'syscreatedate': 'syscreatedate',
        'syscreateuser': 'syscreateuser',
        'syslockchildren': 'syslockchildren',
        'syslockchildrenui': 'syslockchildrenui',
        'syslockdate': 'syslockdate',
        'syslockme': 'syslockme',
        'syslockmeui': 'syslockmeui',
        'sysmoddate': 'sysmoddate',
        'sysmoduser': 'sysmoduser',
        'systag': 'systag',
        'typ1': 'typ1',
        'typ2': 'typ2',
        'vesselname': 'vesselname'
    }

    def __init__(self, des=None, dttmarrive=None, dttmarriveplan=None, dttmdepart=None, dttmdepartplan=None, idrec=None, idrecparent=None, idwell=None, job=None, locdest=None, locorigin=None, note=None, passengercapacity=None, qty=None, refnovessel=None, supplier=None, syscreatedate=None, syscreateuser=None, syslockchildren=None, syslockchildrenui=None, syslockdate=None, syslockme=None, syslockmeui=None, sysmoddate=None, sysmoduser=None, systag=None, typ1=None, typ2=None, vesselname=None):  # noqa: E501
        """JobSupportVes - a model defined in Swagger"""  # noqa: E501
        self._des = None
        self._dttmarrive = None
        self._dttmarriveplan = None
        self._dttmdepart = None
        self._dttmdepartplan = None
        self._idrec = None
        self._idrecparent = None
        self._idwell = None
        self._job = None
        self._locdest = None
        self._locorigin = None
        self._note = None
        self._passengercapacity = None
        self._qty = None
        self._refnovessel = None
        self._supplier = None
        self._syscreatedate = None
        self._syscreateuser = None
        self._syslockchildren = None
        self._syslockchildrenui = None
        self._syslockdate = None
        self._syslockme = None
        self._syslockmeui = None
        self._sysmoddate = None
        self._sysmoduser = None
        self._systag = None
        self._typ1 = None
        self._typ2 = None
        self._vesselname = None
        self.discriminator = None
        if des is not None:
            self.des = des
        if dttmarrive is not None:
            self.dttmarrive = dttmarrive
        if dttmarriveplan is not None:
            self.dttmarriveplan = dttmarriveplan
        if dttmdepart is not None:
            self.dttmdepart = dttmdepart
        if dttmdepartplan is not None:
            self.dttmdepartplan = dttmdepartplan
        if idrec is not None:
            self.idrec = idrec
        if idrecparent is not None:
            self.idrecparent = idrecparent
        if idwell is not None:
            self.idwell = idwell
        if job is not None:
            self.job = job
        if locdest is not None:
            self.locdest = locdest
        if locorigin is not None:
            self.locorigin = locorigin
        if note is not None:
            self.note = note
        if passengercapacity is not None:
            self.passengercapacity = passengercapacity
        if qty is not None:
            self.qty = qty
        if refnovessel is not None:
            self.refnovessel = refnovessel
        if supplier is not None:
            self.supplier = supplier
        if syscreatedate is not None:
            self.syscreatedate = syscreatedate
        if syscreateuser is not None:
            self.syscreateuser = syscreateuser
        if syslockchildren is not None:
            self.syslockchildren = syslockchildren
        if syslockchildrenui is not None:
            self.syslockchildrenui = syslockchildrenui
        if syslockdate is not None:
            self.syslockdate = syslockdate
        if syslockme is not None:
            self.syslockme = syslockme
        if syslockmeui is not None:
            self.syslockmeui = syslockmeui
        if sysmoddate is not None:
            self.sysmoddate = sysmoddate
        if sysmoduser is not None:
            self.sysmoduser = sysmoduser
        if systag is not None:
            self.systag = systag
        if typ1 is not None:
            self.typ1 = typ1
        if typ2 is not None:
            self.typ2 = typ2
        if vesselname is not None:
            self.vesselname = vesselname

    @property
    def des(self):
        """Gets the des of this JobSupportVes.  # noqa: E501


        :return: The des of this JobSupportVes.  # noqa: E501
        :rtype: str
        """
        return self._des

    @des.setter
    def des(self, des):
        """Sets the des of this JobSupportVes.


        :param des: The des of this JobSupportVes.  # noqa: E501
        :type: str
        """

        self._des = des

    @property
    def dttmarrive(self):
        """Gets the dttmarrive of this JobSupportVes.  # noqa: E501


        :return: The dttmarrive of this JobSupportVes.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmarrive

    @dttmarrive.setter
    def dttmarrive(self, dttmarrive):
        """Sets the dttmarrive of this JobSupportVes.


        :param dttmarrive: The dttmarrive of this JobSupportVes.  # noqa: E501
        :type: datetime
        """

        self._dttmarrive = dttmarrive

    @property
    def dttmarriveplan(self):
        """Gets the dttmarriveplan of this JobSupportVes.  # noqa: E501


        :return: The dttmarriveplan of this JobSupportVes.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmarriveplan

    @dttmarriveplan.setter
    def dttmarriveplan(self, dttmarriveplan):
        """Sets the dttmarriveplan of this JobSupportVes.


        :param dttmarriveplan: The dttmarriveplan of this JobSupportVes.  # noqa: E501
        :type: datetime
        """

        self._dttmarriveplan = dttmarriveplan

    @property
    def dttmdepart(self):
        """Gets the dttmdepart of this JobSupportVes.  # noqa: E501


        :return: The dttmdepart of this JobSupportVes.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmdepart

    @dttmdepart.setter
    def dttmdepart(self, dttmdepart):
        """Sets the dttmdepart of this JobSupportVes.


        :param dttmdepart: The dttmdepart of this JobSupportVes.  # noqa: E501
        :type: datetime
        """

        self._dttmdepart = dttmdepart

    @property
    def dttmdepartplan(self):
        """Gets the dttmdepartplan of this JobSupportVes.  # noqa: E501


        :return: The dttmdepartplan of this JobSupportVes.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmdepartplan

    @dttmdepartplan.setter
    def dttmdepartplan(self, dttmdepartplan):
        """Sets the dttmdepartplan of this JobSupportVes.


        :param dttmdepartplan: The dttmdepartplan of this JobSupportVes.  # noqa: E501
        :type: datetime
        """

        self._dttmdepartplan = dttmdepartplan

    @property
    def idrec(self):
        """Gets the idrec of this JobSupportVes.  # noqa: E501


        :return: The idrec of this JobSupportVes.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this JobSupportVes.


        :param idrec: The idrec of this JobSupportVes.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecparent(self):
        """Gets the idrecparent of this JobSupportVes.  # noqa: E501


        :return: The idrecparent of this JobSupportVes.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this JobSupportVes.


        :param idrecparent: The idrecparent of this JobSupportVes.  # noqa: E501
        :type: str
        """

        self._idrecparent = idrecparent

    @property
    def idwell(self):
        """Gets the idwell of this JobSupportVes.  # noqa: E501


        :return: The idwell of this JobSupportVes.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this JobSupportVes.


        :param idwell: The idwell of this JobSupportVes.  # noqa: E501
        :type: str
        """

        self._idwell = idwell

    @property
    def job(self):
        """Gets the job of this JobSupportVes.  # noqa: E501


        :return: The job of this JobSupportVes.  # noqa: E501
        :rtype: AnyOfJobSupportVesJob
        """
        return self._job

    @job.setter
    def job(self, job):
        """Sets the job of this JobSupportVes.


        :param job: The job of this JobSupportVes.  # noqa: E501
        :type: AnyOfJobSupportVesJob
        """

        self._job = job

    @property
    def locdest(self):
        """Gets the locdest of this JobSupportVes.  # noqa: E501


        :return: The locdest of this JobSupportVes.  # noqa: E501
        :rtype: str
        """
        return self._locdest

    @locdest.setter
    def locdest(self, locdest):
        """Sets the locdest of this JobSupportVes.


        :param locdest: The locdest of this JobSupportVes.  # noqa: E501
        :type: str
        """

        self._locdest = locdest

    @property
    def locorigin(self):
        """Gets the locorigin of this JobSupportVes.  # noqa: E501


        :return: The locorigin of this JobSupportVes.  # noqa: E501
        :rtype: str
        """
        return self._locorigin

    @locorigin.setter
    def locorigin(self, locorigin):
        """Sets the locorigin of this JobSupportVes.


        :param locorigin: The locorigin of this JobSupportVes.  # noqa: E501
        :type: str
        """

        self._locorigin = locorigin

    @property
    def note(self):
        """Gets the note of this JobSupportVes.  # noqa: E501


        :return: The note of this JobSupportVes.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this JobSupportVes.


        :param note: The note of this JobSupportVes.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def passengercapacity(self):
        """Gets the passengercapacity of this JobSupportVes.  # noqa: E501


        :return: The passengercapacity of this JobSupportVes.  # noqa: E501
        :rtype: int
        """
        return self._passengercapacity

    @passengercapacity.setter
    def passengercapacity(self, passengercapacity):
        """Sets the passengercapacity of this JobSupportVes.


        :param passengercapacity: The passengercapacity of this JobSupportVes.  # noqa: E501
        :type: int
        """

        self._passengercapacity = passengercapacity

    @property
    def qty(self):
        """Gets the qty of this JobSupportVes.  # noqa: E501


        :return: The qty of this JobSupportVes.  # noqa: E501
        :rtype: int
        """
        return self._qty

    @qty.setter
    def qty(self, qty):
        """Sets the qty of this JobSupportVes.


        :param qty: The qty of this JobSupportVes.  # noqa: E501
        :type: int
        """

        self._qty = qty

    @property
    def refnovessel(self):
        """Gets the refnovessel of this JobSupportVes.  # noqa: E501


        :return: The refnovessel of this JobSupportVes.  # noqa: E501
        :rtype: str
        """
        return self._refnovessel

    @refnovessel.setter
    def refnovessel(self, refnovessel):
        """Sets the refnovessel of this JobSupportVes.


        :param refnovessel: The refnovessel of this JobSupportVes.  # noqa: E501
        :type: str
        """

        self._refnovessel = refnovessel

    @property
    def supplier(self):
        """Gets the supplier of this JobSupportVes.  # noqa: E501


        :return: The supplier of this JobSupportVes.  # noqa: E501
        :rtype: str
        """
        return self._supplier

    @supplier.setter
    def supplier(self, supplier):
        """Sets the supplier of this JobSupportVes.


        :param supplier: The supplier of this JobSupportVes.  # noqa: E501
        :type: str
        """

        self._supplier = supplier

    @property
    def syscreatedate(self):
        """Gets the syscreatedate of this JobSupportVes.  # noqa: E501


        :return: The syscreatedate of this JobSupportVes.  # noqa: E501
        :rtype: datetime
        """
        return self._syscreatedate

    @syscreatedate.setter
    def syscreatedate(self, syscreatedate):
        """Sets the syscreatedate of this JobSupportVes.


        :param syscreatedate: The syscreatedate of this JobSupportVes.  # noqa: E501
        :type: datetime
        """

        self._syscreatedate = syscreatedate

    @property
    def syscreateuser(self):
        """Gets the syscreateuser of this JobSupportVes.  # noqa: E501


        :return: The syscreateuser of this JobSupportVes.  # noqa: E501
        :rtype: str
        """
        return self._syscreateuser

    @syscreateuser.setter
    def syscreateuser(self, syscreateuser):
        """Sets the syscreateuser of this JobSupportVes.


        :param syscreateuser: The syscreateuser of this JobSupportVes.  # noqa: E501
        :type: str
        """

        self._syscreateuser = syscreateuser

    @property
    def syslockchildren(self):
        """Gets the syslockchildren of this JobSupportVes.  # noqa: E501


        :return: The syslockchildren of this JobSupportVes.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildren

    @syslockchildren.setter
    def syslockchildren(self, syslockchildren):
        """Sets the syslockchildren of this JobSupportVes.


        :param syslockchildren: The syslockchildren of this JobSupportVes.  # noqa: E501
        :type: int
        """

        self._syslockchildren = syslockchildren

    @property
    def syslockchildrenui(self):
        """Gets the syslockchildrenui of this JobSupportVes.  # noqa: E501


        :return: The syslockchildrenui of this JobSupportVes.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildrenui

    @syslockchildrenui.setter
    def syslockchildrenui(self, syslockchildrenui):
        """Sets the syslockchildrenui of this JobSupportVes.


        :param syslockchildrenui: The syslockchildrenui of this JobSupportVes.  # noqa: E501
        :type: int
        """

        self._syslockchildrenui = syslockchildrenui

    @property
    def syslockdate(self):
        """Gets the syslockdate of this JobSupportVes.  # noqa: E501


        :return: The syslockdate of this JobSupportVes.  # noqa: E501
        :rtype: datetime
        """
        return self._syslockdate

    @syslockdate.setter
    def syslockdate(self, syslockdate):
        """Sets the syslockdate of this JobSupportVes.


        :param syslockdate: The syslockdate of this JobSupportVes.  # noqa: E501
        :type: datetime
        """

        self._syslockdate = syslockdate

    @property
    def syslockme(self):
        """Gets the syslockme of this JobSupportVes.  # noqa: E501


        :return: The syslockme of this JobSupportVes.  # noqa: E501
        :rtype: int
        """
        return self._syslockme

    @syslockme.setter
    def syslockme(self, syslockme):
        """Sets the syslockme of this JobSupportVes.


        :param syslockme: The syslockme of this JobSupportVes.  # noqa: E501
        :type: int
        """

        self._syslockme = syslockme

    @property
    def syslockmeui(self):
        """Gets the syslockmeui of this JobSupportVes.  # noqa: E501


        :return: The syslockmeui of this JobSupportVes.  # noqa: E501
        :rtype: int
        """
        return self._syslockmeui

    @syslockmeui.setter
    def syslockmeui(self, syslockmeui):
        """Sets the syslockmeui of this JobSupportVes.


        :param syslockmeui: The syslockmeui of this JobSupportVes.  # noqa: E501
        :type: int
        """

        self._syslockmeui = syslockmeui

    @property
    def sysmoddate(self):
        """Gets the sysmoddate of this JobSupportVes.  # noqa: E501


        :return: The sysmoddate of this JobSupportVes.  # noqa: E501
        :rtype: datetime
        """
        return self._sysmoddate

    @sysmoddate.setter
    def sysmoddate(self, sysmoddate):
        """Sets the sysmoddate of this JobSupportVes.


        :param sysmoddate: The sysmoddate of this JobSupportVes.  # noqa: E501
        :type: datetime
        """

        self._sysmoddate = sysmoddate

    @property
    def sysmoduser(self):
        """Gets the sysmoduser of this JobSupportVes.  # noqa: E501


        :return: The sysmoduser of this JobSupportVes.  # noqa: E501
        :rtype: str
        """
        return self._sysmoduser

    @sysmoduser.setter
    def sysmoduser(self, sysmoduser):
        """Sets the sysmoduser of this JobSupportVes.


        :param sysmoduser: The sysmoduser of this JobSupportVes.  # noqa: E501
        :type: str
        """

        self._sysmoduser = sysmoduser

    @property
    def systag(self):
        """Gets the systag of this JobSupportVes.  # noqa: E501


        :return: The systag of this JobSupportVes.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this JobSupportVes.


        :param systag: The systag of this JobSupportVes.  # noqa: E501
        :type: str
        """

        self._systag = systag

    @property
    def typ1(self):
        """Gets the typ1 of this JobSupportVes.  # noqa: E501


        :return: The typ1 of this JobSupportVes.  # noqa: E501
        :rtype: str
        """
        return self._typ1

    @typ1.setter
    def typ1(self, typ1):
        """Sets the typ1 of this JobSupportVes.


        :param typ1: The typ1 of this JobSupportVes.  # noqa: E501
        :type: str
        """

        self._typ1 = typ1

    @property
    def typ2(self):
        """Gets the typ2 of this JobSupportVes.  # noqa: E501


        :return: The typ2 of this JobSupportVes.  # noqa: E501
        :rtype: str
        """
        return self._typ2

    @typ2.setter
    def typ2(self, typ2):
        """Sets the typ2 of this JobSupportVes.


        :param typ2: The typ2 of this JobSupportVes.  # noqa: E501
        :type: str
        """

        self._typ2 = typ2

    @property
    def vesselname(self):
        """Gets the vesselname of this JobSupportVes.  # noqa: E501


        :return: The vesselname of this JobSupportVes.  # noqa: E501
        :rtype: str
        """
        return self._vesselname

    @vesselname.setter
    def vesselname(self, vesselname):
        """Sets the vesselname of this JobSupportVes.


        :param vesselname: The vesselname of this JobSupportVes.  # noqa: E501
        :type: str
        """

        self._vesselname = vesselname

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JobSupportVes, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobSupportVes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
