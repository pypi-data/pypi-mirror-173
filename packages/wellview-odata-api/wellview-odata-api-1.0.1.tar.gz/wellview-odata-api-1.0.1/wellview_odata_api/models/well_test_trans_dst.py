# coding: utf-8

"""
    OData Service for namespace Default

    This OData service is located at http://localhost  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WellTestTransDst(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'blowdes': 'str',
        'cushdensity': 'OneOfWellTestTransDstCushdensity',
        'cushdes': 'str',
        'cushheight': 'OneOfWellTestTransDstCushheight',
        'fluidtosurface': 'str',
        'idrec': 'str',
        'idrecparent': 'str',
        'idwell': 'str',
        'piperecdes': 'str',
        'presinithydro': 'OneOfWellTestTransDstPresinithydro',
        'syscreatedate': 'datetime',
        'syscreateuser': 'str',
        'syslockchildren': 'int',
        'syslockchildrenui': 'int',
        'syslockdate': 'datetime',
        'syslockme': 'int',
        'syslockmeui': 'int',
        'sysmoddate': 'datetime',
        'sysmoduser': 'str',
        'systag': 'str',
        'timetosurface': 'OneOfWellTestTransDstTimetosurface',
        'well_test_trans': 'AnyOfWellTestTransDstWellTestTrans'
    }

    attribute_map = {
        'blowdes': 'blowdes',
        'cushdensity': 'cushdensity',
        'cushdes': 'cushdes',
        'cushheight': 'cushheight',
        'fluidtosurface': 'fluidtosurface',
        'idrec': 'idrec',
        'idrecparent': 'idrecparent',
        'idwell': 'idwell',
        'piperecdes': 'piperecdes',
        'presinithydro': 'presinithydro',
        'syscreatedate': 'syscreatedate',
        'syscreateuser': 'syscreateuser',
        'syslockchildren': 'syslockchildren',
        'syslockchildrenui': 'syslockchildrenui',
        'syslockdate': 'syslockdate',
        'syslockme': 'syslockme',
        'syslockmeui': 'syslockmeui',
        'sysmoddate': 'sysmoddate',
        'sysmoduser': 'sysmoduser',
        'systag': 'systag',
        'timetosurface': 'timetosurface',
        'well_test_trans': 'wellTestTrans'
    }

    def __init__(self, blowdes=None, cushdensity=None, cushdes=None, cushheight=None, fluidtosurface=None, idrec=None, idrecparent=None, idwell=None, piperecdes=None, presinithydro=None, syscreatedate=None, syscreateuser=None, syslockchildren=None, syslockchildrenui=None, syslockdate=None, syslockme=None, syslockmeui=None, sysmoddate=None, sysmoduser=None, systag=None, timetosurface=None, well_test_trans=None):  # noqa: E501
        """WellTestTransDst - a model defined in Swagger"""  # noqa: E501
        self._blowdes = None
        self._cushdensity = None
        self._cushdes = None
        self._cushheight = None
        self._fluidtosurface = None
        self._idrec = None
        self._idrecparent = None
        self._idwell = None
        self._piperecdes = None
        self._presinithydro = None
        self._syscreatedate = None
        self._syscreateuser = None
        self._syslockchildren = None
        self._syslockchildrenui = None
        self._syslockdate = None
        self._syslockme = None
        self._syslockmeui = None
        self._sysmoddate = None
        self._sysmoduser = None
        self._systag = None
        self._timetosurface = None
        self._well_test_trans = None
        self.discriminator = None
        if blowdes is not None:
            self.blowdes = blowdes
        if cushdensity is not None:
            self.cushdensity = cushdensity
        if cushdes is not None:
            self.cushdes = cushdes
        if cushheight is not None:
            self.cushheight = cushheight
        if fluidtosurface is not None:
            self.fluidtosurface = fluidtosurface
        if idrec is not None:
            self.idrec = idrec
        if idrecparent is not None:
            self.idrecparent = idrecparent
        if idwell is not None:
            self.idwell = idwell
        if piperecdes is not None:
            self.piperecdes = piperecdes
        if presinithydro is not None:
            self.presinithydro = presinithydro
        if syscreatedate is not None:
            self.syscreatedate = syscreatedate
        if syscreateuser is not None:
            self.syscreateuser = syscreateuser
        if syslockchildren is not None:
            self.syslockchildren = syslockchildren
        if syslockchildrenui is not None:
            self.syslockchildrenui = syslockchildrenui
        if syslockdate is not None:
            self.syslockdate = syslockdate
        if syslockme is not None:
            self.syslockme = syslockme
        if syslockmeui is not None:
            self.syslockmeui = syslockmeui
        if sysmoddate is not None:
            self.sysmoddate = sysmoddate
        if sysmoduser is not None:
            self.sysmoduser = sysmoduser
        if systag is not None:
            self.systag = systag
        if timetosurface is not None:
            self.timetosurface = timetosurface
        if well_test_trans is not None:
            self.well_test_trans = well_test_trans

    @property
    def blowdes(self):
        """Gets the blowdes of this WellTestTransDst.  # noqa: E501


        :return: The blowdes of this WellTestTransDst.  # noqa: E501
        :rtype: str
        """
        return self._blowdes

    @blowdes.setter
    def blowdes(self, blowdes):
        """Sets the blowdes of this WellTestTransDst.


        :param blowdes: The blowdes of this WellTestTransDst.  # noqa: E501
        :type: str
        """

        self._blowdes = blowdes

    @property
    def cushdensity(self):
        """Gets the cushdensity of this WellTestTransDst.  # noqa: E501


        :return: The cushdensity of this WellTestTransDst.  # noqa: E501
        :rtype: OneOfWellTestTransDstCushdensity
        """
        return self._cushdensity

    @cushdensity.setter
    def cushdensity(self, cushdensity):
        """Sets the cushdensity of this WellTestTransDst.


        :param cushdensity: The cushdensity of this WellTestTransDst.  # noqa: E501
        :type: OneOfWellTestTransDstCushdensity
        """

        self._cushdensity = cushdensity

    @property
    def cushdes(self):
        """Gets the cushdes of this WellTestTransDst.  # noqa: E501


        :return: The cushdes of this WellTestTransDst.  # noqa: E501
        :rtype: str
        """
        return self._cushdes

    @cushdes.setter
    def cushdes(self, cushdes):
        """Sets the cushdes of this WellTestTransDst.


        :param cushdes: The cushdes of this WellTestTransDst.  # noqa: E501
        :type: str
        """

        self._cushdes = cushdes

    @property
    def cushheight(self):
        """Gets the cushheight of this WellTestTransDst.  # noqa: E501


        :return: The cushheight of this WellTestTransDst.  # noqa: E501
        :rtype: OneOfWellTestTransDstCushheight
        """
        return self._cushheight

    @cushheight.setter
    def cushheight(self, cushheight):
        """Sets the cushheight of this WellTestTransDst.


        :param cushheight: The cushheight of this WellTestTransDst.  # noqa: E501
        :type: OneOfWellTestTransDstCushheight
        """

        self._cushheight = cushheight

    @property
    def fluidtosurface(self):
        """Gets the fluidtosurface of this WellTestTransDst.  # noqa: E501


        :return: The fluidtosurface of this WellTestTransDst.  # noqa: E501
        :rtype: str
        """
        return self._fluidtosurface

    @fluidtosurface.setter
    def fluidtosurface(self, fluidtosurface):
        """Sets the fluidtosurface of this WellTestTransDst.


        :param fluidtosurface: The fluidtosurface of this WellTestTransDst.  # noqa: E501
        :type: str
        """

        self._fluidtosurface = fluidtosurface

    @property
    def idrec(self):
        """Gets the idrec of this WellTestTransDst.  # noqa: E501


        :return: The idrec of this WellTestTransDst.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this WellTestTransDst.


        :param idrec: The idrec of this WellTestTransDst.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecparent(self):
        """Gets the idrecparent of this WellTestTransDst.  # noqa: E501


        :return: The idrecparent of this WellTestTransDst.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this WellTestTransDst.


        :param idrecparent: The idrecparent of this WellTestTransDst.  # noqa: E501
        :type: str
        """

        self._idrecparent = idrecparent

    @property
    def idwell(self):
        """Gets the idwell of this WellTestTransDst.  # noqa: E501


        :return: The idwell of this WellTestTransDst.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this WellTestTransDst.


        :param idwell: The idwell of this WellTestTransDst.  # noqa: E501
        :type: str
        """

        self._idwell = idwell

    @property
    def piperecdes(self):
        """Gets the piperecdes of this WellTestTransDst.  # noqa: E501


        :return: The piperecdes of this WellTestTransDst.  # noqa: E501
        :rtype: str
        """
        return self._piperecdes

    @piperecdes.setter
    def piperecdes(self, piperecdes):
        """Sets the piperecdes of this WellTestTransDst.


        :param piperecdes: The piperecdes of this WellTestTransDst.  # noqa: E501
        :type: str
        """

        self._piperecdes = piperecdes

    @property
    def presinithydro(self):
        """Gets the presinithydro of this WellTestTransDst.  # noqa: E501


        :return: The presinithydro of this WellTestTransDst.  # noqa: E501
        :rtype: OneOfWellTestTransDstPresinithydro
        """
        return self._presinithydro

    @presinithydro.setter
    def presinithydro(self, presinithydro):
        """Sets the presinithydro of this WellTestTransDst.


        :param presinithydro: The presinithydro of this WellTestTransDst.  # noqa: E501
        :type: OneOfWellTestTransDstPresinithydro
        """

        self._presinithydro = presinithydro

    @property
    def syscreatedate(self):
        """Gets the syscreatedate of this WellTestTransDst.  # noqa: E501


        :return: The syscreatedate of this WellTestTransDst.  # noqa: E501
        :rtype: datetime
        """
        return self._syscreatedate

    @syscreatedate.setter
    def syscreatedate(self, syscreatedate):
        """Sets the syscreatedate of this WellTestTransDst.


        :param syscreatedate: The syscreatedate of this WellTestTransDst.  # noqa: E501
        :type: datetime
        """

        self._syscreatedate = syscreatedate

    @property
    def syscreateuser(self):
        """Gets the syscreateuser of this WellTestTransDst.  # noqa: E501


        :return: The syscreateuser of this WellTestTransDst.  # noqa: E501
        :rtype: str
        """
        return self._syscreateuser

    @syscreateuser.setter
    def syscreateuser(self, syscreateuser):
        """Sets the syscreateuser of this WellTestTransDst.


        :param syscreateuser: The syscreateuser of this WellTestTransDst.  # noqa: E501
        :type: str
        """

        self._syscreateuser = syscreateuser

    @property
    def syslockchildren(self):
        """Gets the syslockchildren of this WellTestTransDst.  # noqa: E501


        :return: The syslockchildren of this WellTestTransDst.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildren

    @syslockchildren.setter
    def syslockchildren(self, syslockchildren):
        """Sets the syslockchildren of this WellTestTransDst.


        :param syslockchildren: The syslockchildren of this WellTestTransDst.  # noqa: E501
        :type: int
        """

        self._syslockchildren = syslockchildren

    @property
    def syslockchildrenui(self):
        """Gets the syslockchildrenui of this WellTestTransDst.  # noqa: E501


        :return: The syslockchildrenui of this WellTestTransDst.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildrenui

    @syslockchildrenui.setter
    def syslockchildrenui(self, syslockchildrenui):
        """Sets the syslockchildrenui of this WellTestTransDst.


        :param syslockchildrenui: The syslockchildrenui of this WellTestTransDst.  # noqa: E501
        :type: int
        """

        self._syslockchildrenui = syslockchildrenui

    @property
    def syslockdate(self):
        """Gets the syslockdate of this WellTestTransDst.  # noqa: E501


        :return: The syslockdate of this WellTestTransDst.  # noqa: E501
        :rtype: datetime
        """
        return self._syslockdate

    @syslockdate.setter
    def syslockdate(self, syslockdate):
        """Sets the syslockdate of this WellTestTransDst.


        :param syslockdate: The syslockdate of this WellTestTransDst.  # noqa: E501
        :type: datetime
        """

        self._syslockdate = syslockdate

    @property
    def syslockme(self):
        """Gets the syslockme of this WellTestTransDst.  # noqa: E501


        :return: The syslockme of this WellTestTransDst.  # noqa: E501
        :rtype: int
        """
        return self._syslockme

    @syslockme.setter
    def syslockme(self, syslockme):
        """Sets the syslockme of this WellTestTransDst.


        :param syslockme: The syslockme of this WellTestTransDst.  # noqa: E501
        :type: int
        """

        self._syslockme = syslockme

    @property
    def syslockmeui(self):
        """Gets the syslockmeui of this WellTestTransDst.  # noqa: E501


        :return: The syslockmeui of this WellTestTransDst.  # noqa: E501
        :rtype: int
        """
        return self._syslockmeui

    @syslockmeui.setter
    def syslockmeui(self, syslockmeui):
        """Sets the syslockmeui of this WellTestTransDst.


        :param syslockmeui: The syslockmeui of this WellTestTransDst.  # noqa: E501
        :type: int
        """

        self._syslockmeui = syslockmeui

    @property
    def sysmoddate(self):
        """Gets the sysmoddate of this WellTestTransDst.  # noqa: E501


        :return: The sysmoddate of this WellTestTransDst.  # noqa: E501
        :rtype: datetime
        """
        return self._sysmoddate

    @sysmoddate.setter
    def sysmoddate(self, sysmoddate):
        """Sets the sysmoddate of this WellTestTransDst.


        :param sysmoddate: The sysmoddate of this WellTestTransDst.  # noqa: E501
        :type: datetime
        """

        self._sysmoddate = sysmoddate

    @property
    def sysmoduser(self):
        """Gets the sysmoduser of this WellTestTransDst.  # noqa: E501


        :return: The sysmoduser of this WellTestTransDst.  # noqa: E501
        :rtype: str
        """
        return self._sysmoduser

    @sysmoduser.setter
    def sysmoduser(self, sysmoduser):
        """Sets the sysmoduser of this WellTestTransDst.


        :param sysmoduser: The sysmoduser of this WellTestTransDst.  # noqa: E501
        :type: str
        """

        self._sysmoduser = sysmoduser

    @property
    def systag(self):
        """Gets the systag of this WellTestTransDst.  # noqa: E501


        :return: The systag of this WellTestTransDst.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this WellTestTransDst.


        :param systag: The systag of this WellTestTransDst.  # noqa: E501
        :type: str
        """

        self._systag = systag

    @property
    def timetosurface(self):
        """Gets the timetosurface of this WellTestTransDst.  # noqa: E501


        :return: The timetosurface of this WellTestTransDst.  # noqa: E501
        :rtype: OneOfWellTestTransDstTimetosurface
        """
        return self._timetosurface

    @timetosurface.setter
    def timetosurface(self, timetosurface):
        """Sets the timetosurface of this WellTestTransDst.


        :param timetosurface: The timetosurface of this WellTestTransDst.  # noqa: E501
        :type: OneOfWellTestTransDstTimetosurface
        """

        self._timetosurface = timetosurface

    @property
    def well_test_trans(self):
        """Gets the well_test_trans of this WellTestTransDst.  # noqa: E501


        :return: The well_test_trans of this WellTestTransDst.  # noqa: E501
        :rtype: AnyOfWellTestTransDstWellTestTrans
        """
        return self._well_test_trans

    @well_test_trans.setter
    def well_test_trans(self, well_test_trans):
        """Sets the well_test_trans of this WellTestTransDst.


        :param well_test_trans: The well_test_trans of this WellTestTransDst.  # noqa: E501
        :type: AnyOfWellTestTransDstWellTestTrans
        """

        self._well_test_trans = well_test_trans

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WellTestTransDst, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WellTestTransDst):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
