# coding: utf-8

"""
    OData Service for namespace Default

    This OData service is located at http://localhost  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OtherInholeGp(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'carrierdensity': 'OneOfOtherInholeGpCarrierdensity',
        'carrierfluid': 'str',
        'carrierviscosity': 'OneOfOtherInholeGpCarrierviscosity',
        'carriervolume': 'OneOfOtherInholeGpCarriervolume',
        'contractor': 'str',
        'icdnozzlemake': 'str',
        'icdnozzleno': 'int',
        'icdnozzlesz': 'OneOfOtherInholeGpIcdnozzlesz',
        'idrec': 'str',
        'idrecparent': 'str',
        'idwell': 'str',
        'other_inhole': 'AnyOfOtherInholeGpOtherInhole',
        'sandamount': 'OneOfOtherInholeGpSandamount',
        'sandsz': 'str',
        'screengauge': 'OneOfOtherInholeGpScreengauge',
        'shroudtyp': 'str',
        'slurrydensity': 'OneOfOtherInholeGpSlurrydensity',
        'slurryrate': 'OneOfOtherInholeGpSlurryrate',
        'slurryvolume': 'OneOfOtherInholeGpSlurryvolume',
        'syscreatedate': 'datetime',
        'syscreateuser': 'str',
        'syslockchildren': 'int',
        'syslockchildrenui': 'int',
        'syslockdate': 'datetime',
        'syslockme': 'int',
        'syslockmeui': 'int',
        'sysmoddate': 'datetime',
        'sysmoduser': 'str',
        'systag': 'str',
        'typ': 'str'
    }

    attribute_map = {
        'carrierdensity': 'carrierdensity',
        'carrierfluid': 'carrierfluid',
        'carrierviscosity': 'carrierviscosity',
        'carriervolume': 'carriervolume',
        'contractor': 'contractor',
        'icdnozzlemake': 'icdnozzlemake',
        'icdnozzleno': 'icdnozzleno',
        'icdnozzlesz': 'icdnozzlesz',
        'idrec': 'idrec',
        'idrecparent': 'idrecparent',
        'idwell': 'idwell',
        'other_inhole': 'otherInhole',
        'sandamount': 'sandamount',
        'sandsz': 'sandsz',
        'screengauge': 'screengauge',
        'shroudtyp': 'shroudtyp',
        'slurrydensity': 'slurrydensity',
        'slurryrate': 'slurryrate',
        'slurryvolume': 'slurryvolume',
        'syscreatedate': 'syscreatedate',
        'syscreateuser': 'syscreateuser',
        'syslockchildren': 'syslockchildren',
        'syslockchildrenui': 'syslockchildrenui',
        'syslockdate': 'syslockdate',
        'syslockme': 'syslockme',
        'syslockmeui': 'syslockmeui',
        'sysmoddate': 'sysmoddate',
        'sysmoduser': 'sysmoduser',
        'systag': 'systag',
        'typ': 'typ'
    }

    def __init__(self, carrierdensity=None, carrierfluid=None, carrierviscosity=None, carriervolume=None, contractor=None, icdnozzlemake=None, icdnozzleno=None, icdnozzlesz=None, idrec=None, idrecparent=None, idwell=None, other_inhole=None, sandamount=None, sandsz=None, screengauge=None, shroudtyp=None, slurrydensity=None, slurryrate=None, slurryvolume=None, syscreatedate=None, syscreateuser=None, syslockchildren=None, syslockchildrenui=None, syslockdate=None, syslockme=None, syslockmeui=None, sysmoddate=None, sysmoduser=None, systag=None, typ=None):  # noqa: E501
        """OtherInholeGp - a model defined in Swagger"""  # noqa: E501
        self._carrierdensity = None
        self._carrierfluid = None
        self._carrierviscosity = None
        self._carriervolume = None
        self._contractor = None
        self._icdnozzlemake = None
        self._icdnozzleno = None
        self._icdnozzlesz = None
        self._idrec = None
        self._idrecparent = None
        self._idwell = None
        self._other_inhole = None
        self._sandamount = None
        self._sandsz = None
        self._screengauge = None
        self._shroudtyp = None
        self._slurrydensity = None
        self._slurryrate = None
        self._slurryvolume = None
        self._syscreatedate = None
        self._syscreateuser = None
        self._syslockchildren = None
        self._syslockchildrenui = None
        self._syslockdate = None
        self._syslockme = None
        self._syslockmeui = None
        self._sysmoddate = None
        self._sysmoduser = None
        self._systag = None
        self._typ = None
        self.discriminator = None
        if carrierdensity is not None:
            self.carrierdensity = carrierdensity
        if carrierfluid is not None:
            self.carrierfluid = carrierfluid
        if carrierviscosity is not None:
            self.carrierviscosity = carrierviscosity
        if carriervolume is not None:
            self.carriervolume = carriervolume
        if contractor is not None:
            self.contractor = contractor
        if icdnozzlemake is not None:
            self.icdnozzlemake = icdnozzlemake
        if icdnozzleno is not None:
            self.icdnozzleno = icdnozzleno
        if icdnozzlesz is not None:
            self.icdnozzlesz = icdnozzlesz
        if idrec is not None:
            self.idrec = idrec
        if idrecparent is not None:
            self.idrecparent = idrecparent
        if idwell is not None:
            self.idwell = idwell
        if other_inhole is not None:
            self.other_inhole = other_inhole
        if sandamount is not None:
            self.sandamount = sandamount
        if sandsz is not None:
            self.sandsz = sandsz
        if screengauge is not None:
            self.screengauge = screengauge
        if shroudtyp is not None:
            self.shroudtyp = shroudtyp
        if slurrydensity is not None:
            self.slurrydensity = slurrydensity
        if slurryrate is not None:
            self.slurryrate = slurryrate
        if slurryvolume is not None:
            self.slurryvolume = slurryvolume
        if syscreatedate is not None:
            self.syscreatedate = syscreatedate
        if syscreateuser is not None:
            self.syscreateuser = syscreateuser
        if syslockchildren is not None:
            self.syslockchildren = syslockchildren
        if syslockchildrenui is not None:
            self.syslockchildrenui = syslockchildrenui
        if syslockdate is not None:
            self.syslockdate = syslockdate
        if syslockme is not None:
            self.syslockme = syslockme
        if syslockmeui is not None:
            self.syslockmeui = syslockmeui
        if sysmoddate is not None:
            self.sysmoddate = sysmoddate
        if sysmoduser is not None:
            self.sysmoduser = sysmoduser
        if systag is not None:
            self.systag = systag
        if typ is not None:
            self.typ = typ

    @property
    def carrierdensity(self):
        """Gets the carrierdensity of this OtherInholeGp.  # noqa: E501


        :return: The carrierdensity of this OtherInholeGp.  # noqa: E501
        :rtype: OneOfOtherInholeGpCarrierdensity
        """
        return self._carrierdensity

    @carrierdensity.setter
    def carrierdensity(self, carrierdensity):
        """Sets the carrierdensity of this OtherInholeGp.


        :param carrierdensity: The carrierdensity of this OtherInholeGp.  # noqa: E501
        :type: OneOfOtherInholeGpCarrierdensity
        """

        self._carrierdensity = carrierdensity

    @property
    def carrierfluid(self):
        """Gets the carrierfluid of this OtherInholeGp.  # noqa: E501


        :return: The carrierfluid of this OtherInholeGp.  # noqa: E501
        :rtype: str
        """
        return self._carrierfluid

    @carrierfluid.setter
    def carrierfluid(self, carrierfluid):
        """Sets the carrierfluid of this OtherInholeGp.


        :param carrierfluid: The carrierfluid of this OtherInholeGp.  # noqa: E501
        :type: str
        """

        self._carrierfluid = carrierfluid

    @property
    def carrierviscosity(self):
        """Gets the carrierviscosity of this OtherInholeGp.  # noqa: E501


        :return: The carrierviscosity of this OtherInholeGp.  # noqa: E501
        :rtype: OneOfOtherInholeGpCarrierviscosity
        """
        return self._carrierviscosity

    @carrierviscosity.setter
    def carrierviscosity(self, carrierviscosity):
        """Sets the carrierviscosity of this OtherInholeGp.


        :param carrierviscosity: The carrierviscosity of this OtherInholeGp.  # noqa: E501
        :type: OneOfOtherInholeGpCarrierviscosity
        """

        self._carrierviscosity = carrierviscosity

    @property
    def carriervolume(self):
        """Gets the carriervolume of this OtherInholeGp.  # noqa: E501


        :return: The carriervolume of this OtherInholeGp.  # noqa: E501
        :rtype: OneOfOtherInholeGpCarriervolume
        """
        return self._carriervolume

    @carriervolume.setter
    def carriervolume(self, carriervolume):
        """Sets the carriervolume of this OtherInholeGp.


        :param carriervolume: The carriervolume of this OtherInholeGp.  # noqa: E501
        :type: OneOfOtherInholeGpCarriervolume
        """

        self._carriervolume = carriervolume

    @property
    def contractor(self):
        """Gets the contractor of this OtherInholeGp.  # noqa: E501


        :return: The contractor of this OtherInholeGp.  # noqa: E501
        :rtype: str
        """
        return self._contractor

    @contractor.setter
    def contractor(self, contractor):
        """Sets the contractor of this OtherInholeGp.


        :param contractor: The contractor of this OtherInholeGp.  # noqa: E501
        :type: str
        """

        self._contractor = contractor

    @property
    def icdnozzlemake(self):
        """Gets the icdnozzlemake of this OtherInholeGp.  # noqa: E501


        :return: The icdnozzlemake of this OtherInholeGp.  # noqa: E501
        :rtype: str
        """
        return self._icdnozzlemake

    @icdnozzlemake.setter
    def icdnozzlemake(self, icdnozzlemake):
        """Sets the icdnozzlemake of this OtherInholeGp.


        :param icdnozzlemake: The icdnozzlemake of this OtherInholeGp.  # noqa: E501
        :type: str
        """

        self._icdnozzlemake = icdnozzlemake

    @property
    def icdnozzleno(self):
        """Gets the icdnozzleno of this OtherInholeGp.  # noqa: E501


        :return: The icdnozzleno of this OtherInholeGp.  # noqa: E501
        :rtype: int
        """
        return self._icdnozzleno

    @icdnozzleno.setter
    def icdnozzleno(self, icdnozzleno):
        """Sets the icdnozzleno of this OtherInholeGp.


        :param icdnozzleno: The icdnozzleno of this OtherInholeGp.  # noqa: E501
        :type: int
        """

        self._icdnozzleno = icdnozzleno

    @property
    def icdnozzlesz(self):
        """Gets the icdnozzlesz of this OtherInholeGp.  # noqa: E501


        :return: The icdnozzlesz of this OtherInholeGp.  # noqa: E501
        :rtype: OneOfOtherInholeGpIcdnozzlesz
        """
        return self._icdnozzlesz

    @icdnozzlesz.setter
    def icdnozzlesz(self, icdnozzlesz):
        """Sets the icdnozzlesz of this OtherInholeGp.


        :param icdnozzlesz: The icdnozzlesz of this OtherInholeGp.  # noqa: E501
        :type: OneOfOtherInholeGpIcdnozzlesz
        """

        self._icdnozzlesz = icdnozzlesz

    @property
    def idrec(self):
        """Gets the idrec of this OtherInholeGp.  # noqa: E501


        :return: The idrec of this OtherInholeGp.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this OtherInholeGp.


        :param idrec: The idrec of this OtherInholeGp.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecparent(self):
        """Gets the idrecparent of this OtherInholeGp.  # noqa: E501


        :return: The idrecparent of this OtherInholeGp.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this OtherInholeGp.


        :param idrecparent: The idrecparent of this OtherInholeGp.  # noqa: E501
        :type: str
        """

        self._idrecparent = idrecparent

    @property
    def idwell(self):
        """Gets the idwell of this OtherInholeGp.  # noqa: E501


        :return: The idwell of this OtherInholeGp.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this OtherInholeGp.


        :param idwell: The idwell of this OtherInholeGp.  # noqa: E501
        :type: str
        """

        self._idwell = idwell

    @property
    def other_inhole(self):
        """Gets the other_inhole of this OtherInholeGp.  # noqa: E501


        :return: The other_inhole of this OtherInholeGp.  # noqa: E501
        :rtype: AnyOfOtherInholeGpOtherInhole
        """
        return self._other_inhole

    @other_inhole.setter
    def other_inhole(self, other_inhole):
        """Sets the other_inhole of this OtherInholeGp.


        :param other_inhole: The other_inhole of this OtherInholeGp.  # noqa: E501
        :type: AnyOfOtherInholeGpOtherInhole
        """

        self._other_inhole = other_inhole

    @property
    def sandamount(self):
        """Gets the sandamount of this OtherInholeGp.  # noqa: E501


        :return: The sandamount of this OtherInholeGp.  # noqa: E501
        :rtype: OneOfOtherInholeGpSandamount
        """
        return self._sandamount

    @sandamount.setter
    def sandamount(self, sandamount):
        """Sets the sandamount of this OtherInholeGp.


        :param sandamount: The sandamount of this OtherInholeGp.  # noqa: E501
        :type: OneOfOtherInholeGpSandamount
        """

        self._sandamount = sandamount

    @property
    def sandsz(self):
        """Gets the sandsz of this OtherInholeGp.  # noqa: E501


        :return: The sandsz of this OtherInholeGp.  # noqa: E501
        :rtype: str
        """
        return self._sandsz

    @sandsz.setter
    def sandsz(self, sandsz):
        """Sets the sandsz of this OtherInholeGp.


        :param sandsz: The sandsz of this OtherInholeGp.  # noqa: E501
        :type: str
        """

        self._sandsz = sandsz

    @property
    def screengauge(self):
        """Gets the screengauge of this OtherInholeGp.  # noqa: E501


        :return: The screengauge of this OtherInholeGp.  # noqa: E501
        :rtype: OneOfOtherInholeGpScreengauge
        """
        return self._screengauge

    @screengauge.setter
    def screengauge(self, screengauge):
        """Sets the screengauge of this OtherInholeGp.


        :param screengauge: The screengauge of this OtherInholeGp.  # noqa: E501
        :type: OneOfOtherInholeGpScreengauge
        """

        self._screengauge = screengauge

    @property
    def shroudtyp(self):
        """Gets the shroudtyp of this OtherInholeGp.  # noqa: E501


        :return: The shroudtyp of this OtherInholeGp.  # noqa: E501
        :rtype: str
        """
        return self._shroudtyp

    @shroudtyp.setter
    def shroudtyp(self, shroudtyp):
        """Sets the shroudtyp of this OtherInholeGp.


        :param shroudtyp: The shroudtyp of this OtherInholeGp.  # noqa: E501
        :type: str
        """

        self._shroudtyp = shroudtyp

    @property
    def slurrydensity(self):
        """Gets the slurrydensity of this OtherInholeGp.  # noqa: E501


        :return: The slurrydensity of this OtherInholeGp.  # noqa: E501
        :rtype: OneOfOtherInholeGpSlurrydensity
        """
        return self._slurrydensity

    @slurrydensity.setter
    def slurrydensity(self, slurrydensity):
        """Sets the slurrydensity of this OtherInholeGp.


        :param slurrydensity: The slurrydensity of this OtherInholeGp.  # noqa: E501
        :type: OneOfOtherInholeGpSlurrydensity
        """

        self._slurrydensity = slurrydensity

    @property
    def slurryrate(self):
        """Gets the slurryrate of this OtherInholeGp.  # noqa: E501


        :return: The slurryrate of this OtherInholeGp.  # noqa: E501
        :rtype: OneOfOtherInholeGpSlurryrate
        """
        return self._slurryrate

    @slurryrate.setter
    def slurryrate(self, slurryrate):
        """Sets the slurryrate of this OtherInholeGp.


        :param slurryrate: The slurryrate of this OtherInholeGp.  # noqa: E501
        :type: OneOfOtherInholeGpSlurryrate
        """

        self._slurryrate = slurryrate

    @property
    def slurryvolume(self):
        """Gets the slurryvolume of this OtherInholeGp.  # noqa: E501


        :return: The slurryvolume of this OtherInholeGp.  # noqa: E501
        :rtype: OneOfOtherInholeGpSlurryvolume
        """
        return self._slurryvolume

    @slurryvolume.setter
    def slurryvolume(self, slurryvolume):
        """Sets the slurryvolume of this OtherInholeGp.


        :param slurryvolume: The slurryvolume of this OtherInholeGp.  # noqa: E501
        :type: OneOfOtherInholeGpSlurryvolume
        """

        self._slurryvolume = slurryvolume

    @property
    def syscreatedate(self):
        """Gets the syscreatedate of this OtherInholeGp.  # noqa: E501


        :return: The syscreatedate of this OtherInholeGp.  # noqa: E501
        :rtype: datetime
        """
        return self._syscreatedate

    @syscreatedate.setter
    def syscreatedate(self, syscreatedate):
        """Sets the syscreatedate of this OtherInholeGp.


        :param syscreatedate: The syscreatedate of this OtherInholeGp.  # noqa: E501
        :type: datetime
        """

        self._syscreatedate = syscreatedate

    @property
    def syscreateuser(self):
        """Gets the syscreateuser of this OtherInholeGp.  # noqa: E501


        :return: The syscreateuser of this OtherInholeGp.  # noqa: E501
        :rtype: str
        """
        return self._syscreateuser

    @syscreateuser.setter
    def syscreateuser(self, syscreateuser):
        """Sets the syscreateuser of this OtherInholeGp.


        :param syscreateuser: The syscreateuser of this OtherInholeGp.  # noqa: E501
        :type: str
        """

        self._syscreateuser = syscreateuser

    @property
    def syslockchildren(self):
        """Gets the syslockchildren of this OtherInholeGp.  # noqa: E501


        :return: The syslockchildren of this OtherInholeGp.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildren

    @syslockchildren.setter
    def syslockchildren(self, syslockchildren):
        """Sets the syslockchildren of this OtherInholeGp.


        :param syslockchildren: The syslockchildren of this OtherInholeGp.  # noqa: E501
        :type: int
        """

        self._syslockchildren = syslockchildren

    @property
    def syslockchildrenui(self):
        """Gets the syslockchildrenui of this OtherInholeGp.  # noqa: E501


        :return: The syslockchildrenui of this OtherInholeGp.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildrenui

    @syslockchildrenui.setter
    def syslockchildrenui(self, syslockchildrenui):
        """Sets the syslockchildrenui of this OtherInholeGp.


        :param syslockchildrenui: The syslockchildrenui of this OtherInholeGp.  # noqa: E501
        :type: int
        """

        self._syslockchildrenui = syslockchildrenui

    @property
    def syslockdate(self):
        """Gets the syslockdate of this OtherInholeGp.  # noqa: E501


        :return: The syslockdate of this OtherInholeGp.  # noqa: E501
        :rtype: datetime
        """
        return self._syslockdate

    @syslockdate.setter
    def syslockdate(self, syslockdate):
        """Sets the syslockdate of this OtherInholeGp.


        :param syslockdate: The syslockdate of this OtherInholeGp.  # noqa: E501
        :type: datetime
        """

        self._syslockdate = syslockdate

    @property
    def syslockme(self):
        """Gets the syslockme of this OtherInholeGp.  # noqa: E501


        :return: The syslockme of this OtherInholeGp.  # noqa: E501
        :rtype: int
        """
        return self._syslockme

    @syslockme.setter
    def syslockme(self, syslockme):
        """Sets the syslockme of this OtherInholeGp.


        :param syslockme: The syslockme of this OtherInholeGp.  # noqa: E501
        :type: int
        """

        self._syslockme = syslockme

    @property
    def syslockmeui(self):
        """Gets the syslockmeui of this OtherInholeGp.  # noqa: E501


        :return: The syslockmeui of this OtherInholeGp.  # noqa: E501
        :rtype: int
        """
        return self._syslockmeui

    @syslockmeui.setter
    def syslockmeui(self, syslockmeui):
        """Sets the syslockmeui of this OtherInholeGp.


        :param syslockmeui: The syslockmeui of this OtherInholeGp.  # noqa: E501
        :type: int
        """

        self._syslockmeui = syslockmeui

    @property
    def sysmoddate(self):
        """Gets the sysmoddate of this OtherInholeGp.  # noqa: E501


        :return: The sysmoddate of this OtherInholeGp.  # noqa: E501
        :rtype: datetime
        """
        return self._sysmoddate

    @sysmoddate.setter
    def sysmoddate(self, sysmoddate):
        """Sets the sysmoddate of this OtherInholeGp.


        :param sysmoddate: The sysmoddate of this OtherInholeGp.  # noqa: E501
        :type: datetime
        """

        self._sysmoddate = sysmoddate

    @property
    def sysmoduser(self):
        """Gets the sysmoduser of this OtherInholeGp.  # noqa: E501


        :return: The sysmoduser of this OtherInholeGp.  # noqa: E501
        :rtype: str
        """
        return self._sysmoduser

    @sysmoduser.setter
    def sysmoduser(self, sysmoduser):
        """Sets the sysmoduser of this OtherInholeGp.


        :param sysmoduser: The sysmoduser of this OtherInholeGp.  # noqa: E501
        :type: str
        """

        self._sysmoduser = sysmoduser

    @property
    def systag(self):
        """Gets the systag of this OtherInholeGp.  # noqa: E501


        :return: The systag of this OtherInholeGp.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this OtherInholeGp.


        :param systag: The systag of this OtherInholeGp.  # noqa: E501
        :type: str
        """

        self._systag = systag

    @property
    def typ(self):
        """Gets the typ of this OtherInholeGp.  # noqa: E501


        :return: The typ of this OtherInholeGp.  # noqa: E501
        :rtype: str
        """
        return self._typ

    @typ.setter
    def typ(self, typ):
        """Sets the typ of this OtherInholeGp.


        :param typ: The typ of this OtherInholeGp.  # noqa: E501
        :type: str
        """

        self._typ = typ

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OtherInholeGp, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OtherInholeGp):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
