# coding: utf-8

"""
    OData Service for namespace Default

    This OData service is located at http://localhost  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WellTestLogProd(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'analyst': 'str',
        'com': 'str',
        'density': 'OneOfWellTestLogProdDensity',
        'des': 'str',
        'dttm': 'datetime',
        'durshutin': 'OneOfWellTestLogProdDurshutin',
        'fluidlevel': 'OneOfWellTestLogProdFluidlevel',
        'idrec': 'str',
        'idrecjob': 'str',
        'idrecjobtk': 'str',
        'idreclog': 'str',
        'idreclogtk': 'str',
        'idwell': 'str',
        'orificesz': 'OneOfWellTestLogProdOrificesz',
        'presflowingsurf': 'OneOfWellTestLogProdPresflowingsurf',
        'presshutin': 'OneOfWellTestLogProdPresshutin',
        'ratecondsurf': 'OneOfWellTestLogProdRatecondsurf',
        'rategassurf': 'OneOfWellTestLogProdRategassurf',
        'rateoilsurf': 'OneOfWellTestLogProdRateoilsurf',
        'ratewatersurf': 'OneOfWellTestLogProdRatewatersurf',
        'syscreatedate': 'datetime',
        'syscreateuser': 'str',
        'syslockchildren': 'int',
        'syslockchildrenui': 'int',
        'syslockdate': 'datetime',
        'syslockme': 'int',
        'syslockmeui': 'int',
        'sysmoddate': 'datetime',
        'sysmoduser': 'str',
        'systag': 'str',
        'testedby': 'str',
        'tooldes': 'str',
        'typ1': 'str',
        'typ2': 'str',
        'well_test_log_prod_data': 'list[WellTestLogProdData]',
        'wellheader': 'AnyOfWellTestLogProdWellheader'
    }

    attribute_map = {
        'analyst': 'analyst',
        'com': 'com',
        'density': 'density',
        'des': 'des',
        'dttm': 'dttm',
        'durshutin': 'durshutin',
        'fluidlevel': 'fluidlevel',
        'idrec': 'idrec',
        'idrecjob': 'idrecjob',
        'idrecjobtk': 'idrecjobtk',
        'idreclog': 'idreclog',
        'idreclogtk': 'idreclogtk',
        'idwell': 'idwell',
        'orificesz': 'orificesz',
        'presflowingsurf': 'presflowingsurf',
        'presshutin': 'presshutin',
        'ratecondsurf': 'ratecondsurf',
        'rategassurf': 'rategassurf',
        'rateoilsurf': 'rateoilsurf',
        'ratewatersurf': 'ratewatersurf',
        'syscreatedate': 'syscreatedate',
        'syscreateuser': 'syscreateuser',
        'syslockchildren': 'syslockchildren',
        'syslockchildrenui': 'syslockchildrenui',
        'syslockdate': 'syslockdate',
        'syslockme': 'syslockme',
        'syslockmeui': 'syslockmeui',
        'sysmoddate': 'sysmoddate',
        'sysmoduser': 'sysmoduser',
        'systag': 'systag',
        'testedby': 'testedby',
        'tooldes': 'tooldes',
        'typ1': 'typ1',
        'typ2': 'typ2',
        'well_test_log_prod_data': 'wellTestLogProdData',
        'wellheader': 'wellheader'
    }

    def __init__(self, analyst=None, com=None, density=None, des=None, dttm=None, durshutin=None, fluidlevel=None, idrec=None, idrecjob=None, idrecjobtk=None, idreclog=None, idreclogtk=None, idwell=None, orificesz=None, presflowingsurf=None, presshutin=None, ratecondsurf=None, rategassurf=None, rateoilsurf=None, ratewatersurf=None, syscreatedate=None, syscreateuser=None, syslockchildren=None, syslockchildrenui=None, syslockdate=None, syslockme=None, syslockmeui=None, sysmoddate=None, sysmoduser=None, systag=None, testedby=None, tooldes=None, typ1=None, typ2=None, well_test_log_prod_data=None, wellheader=None):  # noqa: E501
        """WellTestLogProd - a model defined in Swagger"""  # noqa: E501
        self._analyst = None
        self._com = None
        self._density = None
        self._des = None
        self._dttm = None
        self._durshutin = None
        self._fluidlevel = None
        self._idrec = None
        self._idrecjob = None
        self._idrecjobtk = None
        self._idreclog = None
        self._idreclogtk = None
        self._idwell = None
        self._orificesz = None
        self._presflowingsurf = None
        self._presshutin = None
        self._ratecondsurf = None
        self._rategassurf = None
        self._rateoilsurf = None
        self._ratewatersurf = None
        self._syscreatedate = None
        self._syscreateuser = None
        self._syslockchildren = None
        self._syslockchildrenui = None
        self._syslockdate = None
        self._syslockme = None
        self._syslockmeui = None
        self._sysmoddate = None
        self._sysmoduser = None
        self._systag = None
        self._testedby = None
        self._tooldes = None
        self._typ1 = None
        self._typ2 = None
        self._well_test_log_prod_data = None
        self._wellheader = None
        self.discriminator = None
        if analyst is not None:
            self.analyst = analyst
        if com is not None:
            self.com = com
        if density is not None:
            self.density = density
        if des is not None:
            self.des = des
        if dttm is not None:
            self.dttm = dttm
        if durshutin is not None:
            self.durshutin = durshutin
        if fluidlevel is not None:
            self.fluidlevel = fluidlevel
        if idrec is not None:
            self.idrec = idrec
        if idrecjob is not None:
            self.idrecjob = idrecjob
        if idrecjobtk is not None:
            self.idrecjobtk = idrecjobtk
        if idreclog is not None:
            self.idreclog = idreclog
        if idreclogtk is not None:
            self.idreclogtk = idreclogtk
        if idwell is not None:
            self.idwell = idwell
        if orificesz is not None:
            self.orificesz = orificesz
        if presflowingsurf is not None:
            self.presflowingsurf = presflowingsurf
        if presshutin is not None:
            self.presshutin = presshutin
        if ratecondsurf is not None:
            self.ratecondsurf = ratecondsurf
        if rategassurf is not None:
            self.rategassurf = rategassurf
        if rateoilsurf is not None:
            self.rateoilsurf = rateoilsurf
        if ratewatersurf is not None:
            self.ratewatersurf = ratewatersurf
        if syscreatedate is not None:
            self.syscreatedate = syscreatedate
        if syscreateuser is not None:
            self.syscreateuser = syscreateuser
        if syslockchildren is not None:
            self.syslockchildren = syslockchildren
        if syslockchildrenui is not None:
            self.syslockchildrenui = syslockchildrenui
        if syslockdate is not None:
            self.syslockdate = syslockdate
        if syslockme is not None:
            self.syslockme = syslockme
        if syslockmeui is not None:
            self.syslockmeui = syslockmeui
        if sysmoddate is not None:
            self.sysmoddate = sysmoddate
        if sysmoduser is not None:
            self.sysmoduser = sysmoduser
        if systag is not None:
            self.systag = systag
        if testedby is not None:
            self.testedby = testedby
        if tooldes is not None:
            self.tooldes = tooldes
        if typ1 is not None:
            self.typ1 = typ1
        if typ2 is not None:
            self.typ2 = typ2
        if well_test_log_prod_data is not None:
            self.well_test_log_prod_data = well_test_log_prod_data
        if wellheader is not None:
            self.wellheader = wellheader

    @property
    def analyst(self):
        """Gets the analyst of this WellTestLogProd.  # noqa: E501


        :return: The analyst of this WellTestLogProd.  # noqa: E501
        :rtype: str
        """
        return self._analyst

    @analyst.setter
    def analyst(self, analyst):
        """Sets the analyst of this WellTestLogProd.


        :param analyst: The analyst of this WellTestLogProd.  # noqa: E501
        :type: str
        """

        self._analyst = analyst

    @property
    def com(self):
        """Gets the com of this WellTestLogProd.  # noqa: E501


        :return: The com of this WellTestLogProd.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this WellTestLogProd.


        :param com: The com of this WellTestLogProd.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def density(self):
        """Gets the density of this WellTestLogProd.  # noqa: E501


        :return: The density of this WellTestLogProd.  # noqa: E501
        :rtype: OneOfWellTestLogProdDensity
        """
        return self._density

    @density.setter
    def density(self, density):
        """Sets the density of this WellTestLogProd.


        :param density: The density of this WellTestLogProd.  # noqa: E501
        :type: OneOfWellTestLogProdDensity
        """

        self._density = density

    @property
    def des(self):
        """Gets the des of this WellTestLogProd.  # noqa: E501


        :return: The des of this WellTestLogProd.  # noqa: E501
        :rtype: str
        """
        return self._des

    @des.setter
    def des(self, des):
        """Sets the des of this WellTestLogProd.


        :param des: The des of this WellTestLogProd.  # noqa: E501
        :type: str
        """

        self._des = des

    @property
    def dttm(self):
        """Gets the dttm of this WellTestLogProd.  # noqa: E501


        :return: The dttm of this WellTestLogProd.  # noqa: E501
        :rtype: datetime
        """
        return self._dttm

    @dttm.setter
    def dttm(self, dttm):
        """Sets the dttm of this WellTestLogProd.


        :param dttm: The dttm of this WellTestLogProd.  # noqa: E501
        :type: datetime
        """

        self._dttm = dttm

    @property
    def durshutin(self):
        """Gets the durshutin of this WellTestLogProd.  # noqa: E501


        :return: The durshutin of this WellTestLogProd.  # noqa: E501
        :rtype: OneOfWellTestLogProdDurshutin
        """
        return self._durshutin

    @durshutin.setter
    def durshutin(self, durshutin):
        """Sets the durshutin of this WellTestLogProd.


        :param durshutin: The durshutin of this WellTestLogProd.  # noqa: E501
        :type: OneOfWellTestLogProdDurshutin
        """

        self._durshutin = durshutin

    @property
    def fluidlevel(self):
        """Gets the fluidlevel of this WellTestLogProd.  # noqa: E501


        :return: The fluidlevel of this WellTestLogProd.  # noqa: E501
        :rtype: OneOfWellTestLogProdFluidlevel
        """
        return self._fluidlevel

    @fluidlevel.setter
    def fluidlevel(self, fluidlevel):
        """Sets the fluidlevel of this WellTestLogProd.


        :param fluidlevel: The fluidlevel of this WellTestLogProd.  # noqa: E501
        :type: OneOfWellTestLogProdFluidlevel
        """

        self._fluidlevel = fluidlevel

    @property
    def idrec(self):
        """Gets the idrec of this WellTestLogProd.  # noqa: E501


        :return: The idrec of this WellTestLogProd.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this WellTestLogProd.


        :param idrec: The idrec of this WellTestLogProd.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecjob(self):
        """Gets the idrecjob of this WellTestLogProd.  # noqa: E501


        :return: The idrecjob of this WellTestLogProd.  # noqa: E501
        :rtype: str
        """
        return self._idrecjob

    @idrecjob.setter
    def idrecjob(self, idrecjob):
        """Sets the idrecjob of this WellTestLogProd.


        :param idrecjob: The idrecjob of this WellTestLogProd.  # noqa: E501
        :type: str
        """

        self._idrecjob = idrecjob

    @property
    def idrecjobtk(self):
        """Gets the idrecjobtk of this WellTestLogProd.  # noqa: E501


        :return: The idrecjobtk of this WellTestLogProd.  # noqa: E501
        :rtype: str
        """
        return self._idrecjobtk

    @idrecjobtk.setter
    def idrecjobtk(self, idrecjobtk):
        """Sets the idrecjobtk of this WellTestLogProd.


        :param idrecjobtk: The idrecjobtk of this WellTestLogProd.  # noqa: E501
        :type: str
        """

        self._idrecjobtk = idrecjobtk

    @property
    def idreclog(self):
        """Gets the idreclog of this WellTestLogProd.  # noqa: E501


        :return: The idreclog of this WellTestLogProd.  # noqa: E501
        :rtype: str
        """
        return self._idreclog

    @idreclog.setter
    def idreclog(self, idreclog):
        """Sets the idreclog of this WellTestLogProd.


        :param idreclog: The idreclog of this WellTestLogProd.  # noqa: E501
        :type: str
        """

        self._idreclog = idreclog

    @property
    def idreclogtk(self):
        """Gets the idreclogtk of this WellTestLogProd.  # noqa: E501


        :return: The idreclogtk of this WellTestLogProd.  # noqa: E501
        :rtype: str
        """
        return self._idreclogtk

    @idreclogtk.setter
    def idreclogtk(self, idreclogtk):
        """Sets the idreclogtk of this WellTestLogProd.


        :param idreclogtk: The idreclogtk of this WellTestLogProd.  # noqa: E501
        :type: str
        """

        self._idreclogtk = idreclogtk

    @property
    def idwell(self):
        """Gets the idwell of this WellTestLogProd.  # noqa: E501


        :return: The idwell of this WellTestLogProd.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this WellTestLogProd.


        :param idwell: The idwell of this WellTestLogProd.  # noqa: E501
        :type: str
        """

        self._idwell = idwell

    @property
    def orificesz(self):
        """Gets the orificesz of this WellTestLogProd.  # noqa: E501


        :return: The orificesz of this WellTestLogProd.  # noqa: E501
        :rtype: OneOfWellTestLogProdOrificesz
        """
        return self._orificesz

    @orificesz.setter
    def orificesz(self, orificesz):
        """Sets the orificesz of this WellTestLogProd.


        :param orificesz: The orificesz of this WellTestLogProd.  # noqa: E501
        :type: OneOfWellTestLogProdOrificesz
        """

        self._orificesz = orificesz

    @property
    def presflowingsurf(self):
        """Gets the presflowingsurf of this WellTestLogProd.  # noqa: E501


        :return: The presflowingsurf of this WellTestLogProd.  # noqa: E501
        :rtype: OneOfWellTestLogProdPresflowingsurf
        """
        return self._presflowingsurf

    @presflowingsurf.setter
    def presflowingsurf(self, presflowingsurf):
        """Sets the presflowingsurf of this WellTestLogProd.


        :param presflowingsurf: The presflowingsurf of this WellTestLogProd.  # noqa: E501
        :type: OneOfWellTestLogProdPresflowingsurf
        """

        self._presflowingsurf = presflowingsurf

    @property
    def presshutin(self):
        """Gets the presshutin of this WellTestLogProd.  # noqa: E501


        :return: The presshutin of this WellTestLogProd.  # noqa: E501
        :rtype: OneOfWellTestLogProdPresshutin
        """
        return self._presshutin

    @presshutin.setter
    def presshutin(self, presshutin):
        """Sets the presshutin of this WellTestLogProd.


        :param presshutin: The presshutin of this WellTestLogProd.  # noqa: E501
        :type: OneOfWellTestLogProdPresshutin
        """

        self._presshutin = presshutin

    @property
    def ratecondsurf(self):
        """Gets the ratecondsurf of this WellTestLogProd.  # noqa: E501


        :return: The ratecondsurf of this WellTestLogProd.  # noqa: E501
        :rtype: OneOfWellTestLogProdRatecondsurf
        """
        return self._ratecondsurf

    @ratecondsurf.setter
    def ratecondsurf(self, ratecondsurf):
        """Sets the ratecondsurf of this WellTestLogProd.


        :param ratecondsurf: The ratecondsurf of this WellTestLogProd.  # noqa: E501
        :type: OneOfWellTestLogProdRatecondsurf
        """

        self._ratecondsurf = ratecondsurf

    @property
    def rategassurf(self):
        """Gets the rategassurf of this WellTestLogProd.  # noqa: E501


        :return: The rategassurf of this WellTestLogProd.  # noqa: E501
        :rtype: OneOfWellTestLogProdRategassurf
        """
        return self._rategassurf

    @rategassurf.setter
    def rategassurf(self, rategassurf):
        """Sets the rategassurf of this WellTestLogProd.


        :param rategassurf: The rategassurf of this WellTestLogProd.  # noqa: E501
        :type: OneOfWellTestLogProdRategassurf
        """

        self._rategassurf = rategassurf

    @property
    def rateoilsurf(self):
        """Gets the rateoilsurf of this WellTestLogProd.  # noqa: E501


        :return: The rateoilsurf of this WellTestLogProd.  # noqa: E501
        :rtype: OneOfWellTestLogProdRateoilsurf
        """
        return self._rateoilsurf

    @rateoilsurf.setter
    def rateoilsurf(self, rateoilsurf):
        """Sets the rateoilsurf of this WellTestLogProd.


        :param rateoilsurf: The rateoilsurf of this WellTestLogProd.  # noqa: E501
        :type: OneOfWellTestLogProdRateoilsurf
        """

        self._rateoilsurf = rateoilsurf

    @property
    def ratewatersurf(self):
        """Gets the ratewatersurf of this WellTestLogProd.  # noqa: E501


        :return: The ratewatersurf of this WellTestLogProd.  # noqa: E501
        :rtype: OneOfWellTestLogProdRatewatersurf
        """
        return self._ratewatersurf

    @ratewatersurf.setter
    def ratewatersurf(self, ratewatersurf):
        """Sets the ratewatersurf of this WellTestLogProd.


        :param ratewatersurf: The ratewatersurf of this WellTestLogProd.  # noqa: E501
        :type: OneOfWellTestLogProdRatewatersurf
        """

        self._ratewatersurf = ratewatersurf

    @property
    def syscreatedate(self):
        """Gets the syscreatedate of this WellTestLogProd.  # noqa: E501


        :return: The syscreatedate of this WellTestLogProd.  # noqa: E501
        :rtype: datetime
        """
        return self._syscreatedate

    @syscreatedate.setter
    def syscreatedate(self, syscreatedate):
        """Sets the syscreatedate of this WellTestLogProd.


        :param syscreatedate: The syscreatedate of this WellTestLogProd.  # noqa: E501
        :type: datetime
        """

        self._syscreatedate = syscreatedate

    @property
    def syscreateuser(self):
        """Gets the syscreateuser of this WellTestLogProd.  # noqa: E501


        :return: The syscreateuser of this WellTestLogProd.  # noqa: E501
        :rtype: str
        """
        return self._syscreateuser

    @syscreateuser.setter
    def syscreateuser(self, syscreateuser):
        """Sets the syscreateuser of this WellTestLogProd.


        :param syscreateuser: The syscreateuser of this WellTestLogProd.  # noqa: E501
        :type: str
        """

        self._syscreateuser = syscreateuser

    @property
    def syslockchildren(self):
        """Gets the syslockchildren of this WellTestLogProd.  # noqa: E501


        :return: The syslockchildren of this WellTestLogProd.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildren

    @syslockchildren.setter
    def syslockchildren(self, syslockchildren):
        """Sets the syslockchildren of this WellTestLogProd.


        :param syslockchildren: The syslockchildren of this WellTestLogProd.  # noqa: E501
        :type: int
        """

        self._syslockchildren = syslockchildren

    @property
    def syslockchildrenui(self):
        """Gets the syslockchildrenui of this WellTestLogProd.  # noqa: E501


        :return: The syslockchildrenui of this WellTestLogProd.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildrenui

    @syslockchildrenui.setter
    def syslockchildrenui(self, syslockchildrenui):
        """Sets the syslockchildrenui of this WellTestLogProd.


        :param syslockchildrenui: The syslockchildrenui of this WellTestLogProd.  # noqa: E501
        :type: int
        """

        self._syslockchildrenui = syslockchildrenui

    @property
    def syslockdate(self):
        """Gets the syslockdate of this WellTestLogProd.  # noqa: E501


        :return: The syslockdate of this WellTestLogProd.  # noqa: E501
        :rtype: datetime
        """
        return self._syslockdate

    @syslockdate.setter
    def syslockdate(self, syslockdate):
        """Sets the syslockdate of this WellTestLogProd.


        :param syslockdate: The syslockdate of this WellTestLogProd.  # noqa: E501
        :type: datetime
        """

        self._syslockdate = syslockdate

    @property
    def syslockme(self):
        """Gets the syslockme of this WellTestLogProd.  # noqa: E501


        :return: The syslockme of this WellTestLogProd.  # noqa: E501
        :rtype: int
        """
        return self._syslockme

    @syslockme.setter
    def syslockme(self, syslockme):
        """Sets the syslockme of this WellTestLogProd.


        :param syslockme: The syslockme of this WellTestLogProd.  # noqa: E501
        :type: int
        """

        self._syslockme = syslockme

    @property
    def syslockmeui(self):
        """Gets the syslockmeui of this WellTestLogProd.  # noqa: E501


        :return: The syslockmeui of this WellTestLogProd.  # noqa: E501
        :rtype: int
        """
        return self._syslockmeui

    @syslockmeui.setter
    def syslockmeui(self, syslockmeui):
        """Sets the syslockmeui of this WellTestLogProd.


        :param syslockmeui: The syslockmeui of this WellTestLogProd.  # noqa: E501
        :type: int
        """

        self._syslockmeui = syslockmeui

    @property
    def sysmoddate(self):
        """Gets the sysmoddate of this WellTestLogProd.  # noqa: E501


        :return: The sysmoddate of this WellTestLogProd.  # noqa: E501
        :rtype: datetime
        """
        return self._sysmoddate

    @sysmoddate.setter
    def sysmoddate(self, sysmoddate):
        """Sets the sysmoddate of this WellTestLogProd.


        :param sysmoddate: The sysmoddate of this WellTestLogProd.  # noqa: E501
        :type: datetime
        """

        self._sysmoddate = sysmoddate

    @property
    def sysmoduser(self):
        """Gets the sysmoduser of this WellTestLogProd.  # noqa: E501


        :return: The sysmoduser of this WellTestLogProd.  # noqa: E501
        :rtype: str
        """
        return self._sysmoduser

    @sysmoduser.setter
    def sysmoduser(self, sysmoduser):
        """Sets the sysmoduser of this WellTestLogProd.


        :param sysmoduser: The sysmoduser of this WellTestLogProd.  # noqa: E501
        :type: str
        """

        self._sysmoduser = sysmoduser

    @property
    def systag(self):
        """Gets the systag of this WellTestLogProd.  # noqa: E501


        :return: The systag of this WellTestLogProd.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this WellTestLogProd.


        :param systag: The systag of this WellTestLogProd.  # noqa: E501
        :type: str
        """

        self._systag = systag

    @property
    def testedby(self):
        """Gets the testedby of this WellTestLogProd.  # noqa: E501


        :return: The testedby of this WellTestLogProd.  # noqa: E501
        :rtype: str
        """
        return self._testedby

    @testedby.setter
    def testedby(self, testedby):
        """Sets the testedby of this WellTestLogProd.


        :param testedby: The testedby of this WellTestLogProd.  # noqa: E501
        :type: str
        """

        self._testedby = testedby

    @property
    def tooldes(self):
        """Gets the tooldes of this WellTestLogProd.  # noqa: E501


        :return: The tooldes of this WellTestLogProd.  # noqa: E501
        :rtype: str
        """
        return self._tooldes

    @tooldes.setter
    def tooldes(self, tooldes):
        """Sets the tooldes of this WellTestLogProd.


        :param tooldes: The tooldes of this WellTestLogProd.  # noqa: E501
        :type: str
        """

        self._tooldes = tooldes

    @property
    def typ1(self):
        """Gets the typ1 of this WellTestLogProd.  # noqa: E501


        :return: The typ1 of this WellTestLogProd.  # noqa: E501
        :rtype: str
        """
        return self._typ1

    @typ1.setter
    def typ1(self, typ1):
        """Sets the typ1 of this WellTestLogProd.


        :param typ1: The typ1 of this WellTestLogProd.  # noqa: E501
        :type: str
        """

        self._typ1 = typ1

    @property
    def typ2(self):
        """Gets the typ2 of this WellTestLogProd.  # noqa: E501


        :return: The typ2 of this WellTestLogProd.  # noqa: E501
        :rtype: str
        """
        return self._typ2

    @typ2.setter
    def typ2(self, typ2):
        """Sets the typ2 of this WellTestLogProd.


        :param typ2: The typ2 of this WellTestLogProd.  # noqa: E501
        :type: str
        """

        self._typ2 = typ2

    @property
    def well_test_log_prod_data(self):
        """Gets the well_test_log_prod_data of this WellTestLogProd.  # noqa: E501


        :return: The well_test_log_prod_data of this WellTestLogProd.  # noqa: E501
        :rtype: list[WellTestLogProdData]
        """
        return self._well_test_log_prod_data

    @well_test_log_prod_data.setter
    def well_test_log_prod_data(self, well_test_log_prod_data):
        """Sets the well_test_log_prod_data of this WellTestLogProd.


        :param well_test_log_prod_data: The well_test_log_prod_data of this WellTestLogProd.  # noqa: E501
        :type: list[WellTestLogProdData]
        """

        self._well_test_log_prod_data = well_test_log_prod_data

    @property
    def wellheader(self):
        """Gets the wellheader of this WellTestLogProd.  # noqa: E501


        :return: The wellheader of this WellTestLogProd.  # noqa: E501
        :rtype: AnyOfWellTestLogProdWellheader
        """
        return self._wellheader

    @wellheader.setter
    def wellheader(self, wellheader):
        """Sets the wellheader of this WellTestLogProd.


        :param wellheader: The wellheader of this WellTestLogProd.  # noqa: E501
        :type: AnyOfWellTestLogProdWellheader
        """

        self._wellheader = wellheader

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WellTestLogProd, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WellTestLogProd):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
