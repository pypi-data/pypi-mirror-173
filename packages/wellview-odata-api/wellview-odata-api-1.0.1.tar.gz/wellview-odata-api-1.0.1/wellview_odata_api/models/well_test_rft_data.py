# coding: utf-8

"""
    OData Service for namespace Default

    This OData service is located at http://localhost  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WellTestRftData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'com': 'str',
        'densityfluid': 'OneOfWellTestRftDataDensityfluid',
        'densitymudfpe': 'OneOfWellTestRftDataDensitymudfpe',
        'densitymudhpe': 'OneOfWellTestRftDataDensitymudhpe',
        'depth': 'OneOfWellTestRftDataDepth',
        'durbuildup': 'OneOfWellTestRftDataDurbuildup',
        'durtest': 'OneOfWellTestRftDataDurtest',
        'fluidtyp': 'str',
        'idrec': 'str',
        'idrecparent': 'str',
        'idwell': 'str',
        'mobilitydrawdown': 'OneOfWellTestRftDataMobilitydrawdown',
        'presend': 'OneOfWellTestRftDataPresend',
        'presform': 'OneOfWellTestRftDataPresform',
        'preshydend': 'OneOfWellTestRftDataPreshydend',
        'preshydstart': 'OneOfWellTestRftDataPreshydstart',
        'quality': 'str',
        'refno': 'str',
        'resulttechnical': 'str',
        'sample': 'int',
        'stabilizedpres': 'int',
        'syscreatedate': 'datetime',
        'syscreateuser': 'str',
        'syslockchildren': 'int',
        'syslockchildrenui': 'int',
        'syslockdate': 'datetime',
        'syslockme': 'int',
        'syslockmeui': 'int',
        'sysmoddate': 'datetime',
        'sysmoduser': 'str',
        'systag': 'str',
        'temp': 'OneOfWellTestRftDataTemp',
        'typacquisition': 'str',
        'use': 'int',
        'volfluid': 'OneOfWellTestRftDataVolfluid',
        'well_test_rft': 'AnyOfWellTestRftDataWellTestRft',
        'well_test_rft_data_fluids': 'list[WellTestRftDataFluid]'
    }

    attribute_map = {
        'com': 'com',
        'densityfluid': 'densityfluid',
        'densitymudfpe': 'densitymudfpe',
        'densitymudhpe': 'densitymudhpe',
        'depth': 'depth',
        'durbuildup': 'durbuildup',
        'durtest': 'durtest',
        'fluidtyp': 'fluidtyp',
        'idrec': 'idrec',
        'idrecparent': 'idrecparent',
        'idwell': 'idwell',
        'mobilitydrawdown': 'mobilitydrawdown',
        'presend': 'presend',
        'presform': 'presform',
        'preshydend': 'preshydend',
        'preshydstart': 'preshydstart',
        'quality': 'quality',
        'refno': 'refno',
        'resulttechnical': 'resulttechnical',
        'sample': 'sample',
        'stabilizedpres': 'stabilizedpres',
        'syscreatedate': 'syscreatedate',
        'syscreateuser': 'syscreateuser',
        'syslockchildren': 'syslockchildren',
        'syslockchildrenui': 'syslockchildrenui',
        'syslockdate': 'syslockdate',
        'syslockme': 'syslockme',
        'syslockmeui': 'syslockmeui',
        'sysmoddate': 'sysmoddate',
        'sysmoduser': 'sysmoduser',
        'systag': 'systag',
        'temp': 'temp',
        'typacquisition': 'typacquisition',
        'use': 'use',
        'volfluid': 'volfluid',
        'well_test_rft': 'wellTestRft',
        'well_test_rft_data_fluids': 'wellTestRftDataFluids'
    }

    def __init__(self, com=None, densityfluid=None, densitymudfpe=None, densitymudhpe=None, depth=None, durbuildup=None, durtest=None, fluidtyp=None, idrec=None, idrecparent=None, idwell=None, mobilitydrawdown=None, presend=None, presform=None, preshydend=None, preshydstart=None, quality=None, refno=None, resulttechnical=None, sample=None, stabilizedpres=None, syscreatedate=None, syscreateuser=None, syslockchildren=None, syslockchildrenui=None, syslockdate=None, syslockme=None, syslockmeui=None, sysmoddate=None, sysmoduser=None, systag=None, temp=None, typacquisition=None, use=None, volfluid=None, well_test_rft=None, well_test_rft_data_fluids=None):  # noqa: E501
        """WellTestRftData - a model defined in Swagger"""  # noqa: E501
        self._com = None
        self._densityfluid = None
        self._densitymudfpe = None
        self._densitymudhpe = None
        self._depth = None
        self._durbuildup = None
        self._durtest = None
        self._fluidtyp = None
        self._idrec = None
        self._idrecparent = None
        self._idwell = None
        self._mobilitydrawdown = None
        self._presend = None
        self._presform = None
        self._preshydend = None
        self._preshydstart = None
        self._quality = None
        self._refno = None
        self._resulttechnical = None
        self._sample = None
        self._stabilizedpres = None
        self._syscreatedate = None
        self._syscreateuser = None
        self._syslockchildren = None
        self._syslockchildrenui = None
        self._syslockdate = None
        self._syslockme = None
        self._syslockmeui = None
        self._sysmoddate = None
        self._sysmoduser = None
        self._systag = None
        self._temp = None
        self._typacquisition = None
        self._use = None
        self._volfluid = None
        self._well_test_rft = None
        self._well_test_rft_data_fluids = None
        self.discriminator = None
        if com is not None:
            self.com = com
        if densityfluid is not None:
            self.densityfluid = densityfluid
        if densitymudfpe is not None:
            self.densitymudfpe = densitymudfpe
        if densitymudhpe is not None:
            self.densitymudhpe = densitymudhpe
        if depth is not None:
            self.depth = depth
        if durbuildup is not None:
            self.durbuildup = durbuildup
        if durtest is not None:
            self.durtest = durtest
        if fluidtyp is not None:
            self.fluidtyp = fluidtyp
        if idrec is not None:
            self.idrec = idrec
        if idrecparent is not None:
            self.idrecparent = idrecparent
        if idwell is not None:
            self.idwell = idwell
        if mobilitydrawdown is not None:
            self.mobilitydrawdown = mobilitydrawdown
        if presend is not None:
            self.presend = presend
        if presform is not None:
            self.presform = presform
        if preshydend is not None:
            self.preshydend = preshydend
        if preshydstart is not None:
            self.preshydstart = preshydstart
        if quality is not None:
            self.quality = quality
        if refno is not None:
            self.refno = refno
        if resulttechnical is not None:
            self.resulttechnical = resulttechnical
        if sample is not None:
            self.sample = sample
        if stabilizedpres is not None:
            self.stabilizedpres = stabilizedpres
        if syscreatedate is not None:
            self.syscreatedate = syscreatedate
        if syscreateuser is not None:
            self.syscreateuser = syscreateuser
        if syslockchildren is not None:
            self.syslockchildren = syslockchildren
        if syslockchildrenui is not None:
            self.syslockchildrenui = syslockchildrenui
        if syslockdate is not None:
            self.syslockdate = syslockdate
        if syslockme is not None:
            self.syslockme = syslockme
        if syslockmeui is not None:
            self.syslockmeui = syslockmeui
        if sysmoddate is not None:
            self.sysmoddate = sysmoddate
        if sysmoduser is not None:
            self.sysmoduser = sysmoduser
        if systag is not None:
            self.systag = systag
        if temp is not None:
            self.temp = temp
        if typacquisition is not None:
            self.typacquisition = typacquisition
        if use is not None:
            self.use = use
        if volfluid is not None:
            self.volfluid = volfluid
        if well_test_rft is not None:
            self.well_test_rft = well_test_rft
        if well_test_rft_data_fluids is not None:
            self.well_test_rft_data_fluids = well_test_rft_data_fluids

    @property
    def com(self):
        """Gets the com of this WellTestRftData.  # noqa: E501


        :return: The com of this WellTestRftData.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this WellTestRftData.


        :param com: The com of this WellTestRftData.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def densityfluid(self):
        """Gets the densityfluid of this WellTestRftData.  # noqa: E501


        :return: The densityfluid of this WellTestRftData.  # noqa: E501
        :rtype: OneOfWellTestRftDataDensityfluid
        """
        return self._densityfluid

    @densityfluid.setter
    def densityfluid(self, densityfluid):
        """Sets the densityfluid of this WellTestRftData.


        :param densityfluid: The densityfluid of this WellTestRftData.  # noqa: E501
        :type: OneOfWellTestRftDataDensityfluid
        """

        self._densityfluid = densityfluid

    @property
    def densitymudfpe(self):
        """Gets the densitymudfpe of this WellTestRftData.  # noqa: E501


        :return: The densitymudfpe of this WellTestRftData.  # noqa: E501
        :rtype: OneOfWellTestRftDataDensitymudfpe
        """
        return self._densitymudfpe

    @densitymudfpe.setter
    def densitymudfpe(self, densitymudfpe):
        """Sets the densitymudfpe of this WellTestRftData.


        :param densitymudfpe: The densitymudfpe of this WellTestRftData.  # noqa: E501
        :type: OneOfWellTestRftDataDensitymudfpe
        """

        self._densitymudfpe = densitymudfpe

    @property
    def densitymudhpe(self):
        """Gets the densitymudhpe of this WellTestRftData.  # noqa: E501


        :return: The densitymudhpe of this WellTestRftData.  # noqa: E501
        :rtype: OneOfWellTestRftDataDensitymudhpe
        """
        return self._densitymudhpe

    @densitymudhpe.setter
    def densitymudhpe(self, densitymudhpe):
        """Sets the densitymudhpe of this WellTestRftData.


        :param densitymudhpe: The densitymudhpe of this WellTestRftData.  # noqa: E501
        :type: OneOfWellTestRftDataDensitymudhpe
        """

        self._densitymudhpe = densitymudhpe

    @property
    def depth(self):
        """Gets the depth of this WellTestRftData.  # noqa: E501


        :return: The depth of this WellTestRftData.  # noqa: E501
        :rtype: OneOfWellTestRftDataDepth
        """
        return self._depth

    @depth.setter
    def depth(self, depth):
        """Sets the depth of this WellTestRftData.


        :param depth: The depth of this WellTestRftData.  # noqa: E501
        :type: OneOfWellTestRftDataDepth
        """

        self._depth = depth

    @property
    def durbuildup(self):
        """Gets the durbuildup of this WellTestRftData.  # noqa: E501


        :return: The durbuildup of this WellTestRftData.  # noqa: E501
        :rtype: OneOfWellTestRftDataDurbuildup
        """
        return self._durbuildup

    @durbuildup.setter
    def durbuildup(self, durbuildup):
        """Sets the durbuildup of this WellTestRftData.


        :param durbuildup: The durbuildup of this WellTestRftData.  # noqa: E501
        :type: OneOfWellTestRftDataDurbuildup
        """

        self._durbuildup = durbuildup

    @property
    def durtest(self):
        """Gets the durtest of this WellTestRftData.  # noqa: E501


        :return: The durtest of this WellTestRftData.  # noqa: E501
        :rtype: OneOfWellTestRftDataDurtest
        """
        return self._durtest

    @durtest.setter
    def durtest(self, durtest):
        """Sets the durtest of this WellTestRftData.


        :param durtest: The durtest of this WellTestRftData.  # noqa: E501
        :type: OneOfWellTestRftDataDurtest
        """

        self._durtest = durtest

    @property
    def fluidtyp(self):
        """Gets the fluidtyp of this WellTestRftData.  # noqa: E501


        :return: The fluidtyp of this WellTestRftData.  # noqa: E501
        :rtype: str
        """
        return self._fluidtyp

    @fluidtyp.setter
    def fluidtyp(self, fluidtyp):
        """Sets the fluidtyp of this WellTestRftData.


        :param fluidtyp: The fluidtyp of this WellTestRftData.  # noqa: E501
        :type: str
        """

        self._fluidtyp = fluidtyp

    @property
    def idrec(self):
        """Gets the idrec of this WellTestRftData.  # noqa: E501


        :return: The idrec of this WellTestRftData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this WellTestRftData.


        :param idrec: The idrec of this WellTestRftData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecparent(self):
        """Gets the idrecparent of this WellTestRftData.  # noqa: E501


        :return: The idrecparent of this WellTestRftData.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this WellTestRftData.


        :param idrecparent: The idrecparent of this WellTestRftData.  # noqa: E501
        :type: str
        """

        self._idrecparent = idrecparent

    @property
    def idwell(self):
        """Gets the idwell of this WellTestRftData.  # noqa: E501


        :return: The idwell of this WellTestRftData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this WellTestRftData.


        :param idwell: The idwell of this WellTestRftData.  # noqa: E501
        :type: str
        """

        self._idwell = idwell

    @property
    def mobilitydrawdown(self):
        """Gets the mobilitydrawdown of this WellTestRftData.  # noqa: E501


        :return: The mobilitydrawdown of this WellTestRftData.  # noqa: E501
        :rtype: OneOfWellTestRftDataMobilitydrawdown
        """
        return self._mobilitydrawdown

    @mobilitydrawdown.setter
    def mobilitydrawdown(self, mobilitydrawdown):
        """Sets the mobilitydrawdown of this WellTestRftData.


        :param mobilitydrawdown: The mobilitydrawdown of this WellTestRftData.  # noqa: E501
        :type: OneOfWellTestRftDataMobilitydrawdown
        """

        self._mobilitydrawdown = mobilitydrawdown

    @property
    def presend(self):
        """Gets the presend of this WellTestRftData.  # noqa: E501


        :return: The presend of this WellTestRftData.  # noqa: E501
        :rtype: OneOfWellTestRftDataPresend
        """
        return self._presend

    @presend.setter
    def presend(self, presend):
        """Sets the presend of this WellTestRftData.


        :param presend: The presend of this WellTestRftData.  # noqa: E501
        :type: OneOfWellTestRftDataPresend
        """

        self._presend = presend

    @property
    def presform(self):
        """Gets the presform of this WellTestRftData.  # noqa: E501


        :return: The presform of this WellTestRftData.  # noqa: E501
        :rtype: OneOfWellTestRftDataPresform
        """
        return self._presform

    @presform.setter
    def presform(self, presform):
        """Sets the presform of this WellTestRftData.


        :param presform: The presform of this WellTestRftData.  # noqa: E501
        :type: OneOfWellTestRftDataPresform
        """

        self._presform = presform

    @property
    def preshydend(self):
        """Gets the preshydend of this WellTestRftData.  # noqa: E501


        :return: The preshydend of this WellTestRftData.  # noqa: E501
        :rtype: OneOfWellTestRftDataPreshydend
        """
        return self._preshydend

    @preshydend.setter
    def preshydend(self, preshydend):
        """Sets the preshydend of this WellTestRftData.


        :param preshydend: The preshydend of this WellTestRftData.  # noqa: E501
        :type: OneOfWellTestRftDataPreshydend
        """

        self._preshydend = preshydend

    @property
    def preshydstart(self):
        """Gets the preshydstart of this WellTestRftData.  # noqa: E501


        :return: The preshydstart of this WellTestRftData.  # noqa: E501
        :rtype: OneOfWellTestRftDataPreshydstart
        """
        return self._preshydstart

    @preshydstart.setter
    def preshydstart(self, preshydstart):
        """Sets the preshydstart of this WellTestRftData.


        :param preshydstart: The preshydstart of this WellTestRftData.  # noqa: E501
        :type: OneOfWellTestRftDataPreshydstart
        """

        self._preshydstart = preshydstart

    @property
    def quality(self):
        """Gets the quality of this WellTestRftData.  # noqa: E501


        :return: The quality of this WellTestRftData.  # noqa: E501
        :rtype: str
        """
        return self._quality

    @quality.setter
    def quality(self, quality):
        """Sets the quality of this WellTestRftData.


        :param quality: The quality of this WellTestRftData.  # noqa: E501
        :type: str
        """

        self._quality = quality

    @property
    def refno(self):
        """Gets the refno of this WellTestRftData.  # noqa: E501


        :return: The refno of this WellTestRftData.  # noqa: E501
        :rtype: str
        """
        return self._refno

    @refno.setter
    def refno(self, refno):
        """Sets the refno of this WellTestRftData.


        :param refno: The refno of this WellTestRftData.  # noqa: E501
        :type: str
        """

        self._refno = refno

    @property
    def resulttechnical(self):
        """Gets the resulttechnical of this WellTestRftData.  # noqa: E501


        :return: The resulttechnical of this WellTestRftData.  # noqa: E501
        :rtype: str
        """
        return self._resulttechnical

    @resulttechnical.setter
    def resulttechnical(self, resulttechnical):
        """Sets the resulttechnical of this WellTestRftData.


        :param resulttechnical: The resulttechnical of this WellTestRftData.  # noqa: E501
        :type: str
        """

        self._resulttechnical = resulttechnical

    @property
    def sample(self):
        """Gets the sample of this WellTestRftData.  # noqa: E501


        :return: The sample of this WellTestRftData.  # noqa: E501
        :rtype: int
        """
        return self._sample

    @sample.setter
    def sample(self, sample):
        """Sets the sample of this WellTestRftData.


        :param sample: The sample of this WellTestRftData.  # noqa: E501
        :type: int
        """

        self._sample = sample

    @property
    def stabilizedpres(self):
        """Gets the stabilizedpres of this WellTestRftData.  # noqa: E501


        :return: The stabilizedpres of this WellTestRftData.  # noqa: E501
        :rtype: int
        """
        return self._stabilizedpres

    @stabilizedpres.setter
    def stabilizedpres(self, stabilizedpres):
        """Sets the stabilizedpres of this WellTestRftData.


        :param stabilizedpres: The stabilizedpres of this WellTestRftData.  # noqa: E501
        :type: int
        """

        self._stabilizedpres = stabilizedpres

    @property
    def syscreatedate(self):
        """Gets the syscreatedate of this WellTestRftData.  # noqa: E501


        :return: The syscreatedate of this WellTestRftData.  # noqa: E501
        :rtype: datetime
        """
        return self._syscreatedate

    @syscreatedate.setter
    def syscreatedate(self, syscreatedate):
        """Sets the syscreatedate of this WellTestRftData.


        :param syscreatedate: The syscreatedate of this WellTestRftData.  # noqa: E501
        :type: datetime
        """

        self._syscreatedate = syscreatedate

    @property
    def syscreateuser(self):
        """Gets the syscreateuser of this WellTestRftData.  # noqa: E501


        :return: The syscreateuser of this WellTestRftData.  # noqa: E501
        :rtype: str
        """
        return self._syscreateuser

    @syscreateuser.setter
    def syscreateuser(self, syscreateuser):
        """Sets the syscreateuser of this WellTestRftData.


        :param syscreateuser: The syscreateuser of this WellTestRftData.  # noqa: E501
        :type: str
        """

        self._syscreateuser = syscreateuser

    @property
    def syslockchildren(self):
        """Gets the syslockchildren of this WellTestRftData.  # noqa: E501


        :return: The syslockchildren of this WellTestRftData.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildren

    @syslockchildren.setter
    def syslockchildren(self, syslockchildren):
        """Sets the syslockchildren of this WellTestRftData.


        :param syslockchildren: The syslockchildren of this WellTestRftData.  # noqa: E501
        :type: int
        """

        self._syslockchildren = syslockchildren

    @property
    def syslockchildrenui(self):
        """Gets the syslockchildrenui of this WellTestRftData.  # noqa: E501


        :return: The syslockchildrenui of this WellTestRftData.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildrenui

    @syslockchildrenui.setter
    def syslockchildrenui(self, syslockchildrenui):
        """Sets the syslockchildrenui of this WellTestRftData.


        :param syslockchildrenui: The syslockchildrenui of this WellTestRftData.  # noqa: E501
        :type: int
        """

        self._syslockchildrenui = syslockchildrenui

    @property
    def syslockdate(self):
        """Gets the syslockdate of this WellTestRftData.  # noqa: E501


        :return: The syslockdate of this WellTestRftData.  # noqa: E501
        :rtype: datetime
        """
        return self._syslockdate

    @syslockdate.setter
    def syslockdate(self, syslockdate):
        """Sets the syslockdate of this WellTestRftData.


        :param syslockdate: The syslockdate of this WellTestRftData.  # noqa: E501
        :type: datetime
        """

        self._syslockdate = syslockdate

    @property
    def syslockme(self):
        """Gets the syslockme of this WellTestRftData.  # noqa: E501


        :return: The syslockme of this WellTestRftData.  # noqa: E501
        :rtype: int
        """
        return self._syslockme

    @syslockme.setter
    def syslockme(self, syslockme):
        """Sets the syslockme of this WellTestRftData.


        :param syslockme: The syslockme of this WellTestRftData.  # noqa: E501
        :type: int
        """

        self._syslockme = syslockme

    @property
    def syslockmeui(self):
        """Gets the syslockmeui of this WellTestRftData.  # noqa: E501


        :return: The syslockmeui of this WellTestRftData.  # noqa: E501
        :rtype: int
        """
        return self._syslockmeui

    @syslockmeui.setter
    def syslockmeui(self, syslockmeui):
        """Sets the syslockmeui of this WellTestRftData.


        :param syslockmeui: The syslockmeui of this WellTestRftData.  # noqa: E501
        :type: int
        """

        self._syslockmeui = syslockmeui

    @property
    def sysmoddate(self):
        """Gets the sysmoddate of this WellTestRftData.  # noqa: E501


        :return: The sysmoddate of this WellTestRftData.  # noqa: E501
        :rtype: datetime
        """
        return self._sysmoddate

    @sysmoddate.setter
    def sysmoddate(self, sysmoddate):
        """Sets the sysmoddate of this WellTestRftData.


        :param sysmoddate: The sysmoddate of this WellTestRftData.  # noqa: E501
        :type: datetime
        """

        self._sysmoddate = sysmoddate

    @property
    def sysmoduser(self):
        """Gets the sysmoduser of this WellTestRftData.  # noqa: E501


        :return: The sysmoduser of this WellTestRftData.  # noqa: E501
        :rtype: str
        """
        return self._sysmoduser

    @sysmoduser.setter
    def sysmoduser(self, sysmoduser):
        """Sets the sysmoduser of this WellTestRftData.


        :param sysmoduser: The sysmoduser of this WellTestRftData.  # noqa: E501
        :type: str
        """

        self._sysmoduser = sysmoduser

    @property
    def systag(self):
        """Gets the systag of this WellTestRftData.  # noqa: E501


        :return: The systag of this WellTestRftData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this WellTestRftData.


        :param systag: The systag of this WellTestRftData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    @property
    def temp(self):
        """Gets the temp of this WellTestRftData.  # noqa: E501


        :return: The temp of this WellTestRftData.  # noqa: E501
        :rtype: OneOfWellTestRftDataTemp
        """
        return self._temp

    @temp.setter
    def temp(self, temp):
        """Sets the temp of this WellTestRftData.


        :param temp: The temp of this WellTestRftData.  # noqa: E501
        :type: OneOfWellTestRftDataTemp
        """

        self._temp = temp

    @property
    def typacquisition(self):
        """Gets the typacquisition of this WellTestRftData.  # noqa: E501


        :return: The typacquisition of this WellTestRftData.  # noqa: E501
        :rtype: str
        """
        return self._typacquisition

    @typacquisition.setter
    def typacquisition(self, typacquisition):
        """Sets the typacquisition of this WellTestRftData.


        :param typacquisition: The typacquisition of this WellTestRftData.  # noqa: E501
        :type: str
        """

        self._typacquisition = typacquisition

    @property
    def use(self):
        """Gets the use of this WellTestRftData.  # noqa: E501


        :return: The use of this WellTestRftData.  # noqa: E501
        :rtype: int
        """
        return self._use

    @use.setter
    def use(self, use):
        """Sets the use of this WellTestRftData.


        :param use: The use of this WellTestRftData.  # noqa: E501
        :type: int
        """

        self._use = use

    @property
    def volfluid(self):
        """Gets the volfluid of this WellTestRftData.  # noqa: E501


        :return: The volfluid of this WellTestRftData.  # noqa: E501
        :rtype: OneOfWellTestRftDataVolfluid
        """
        return self._volfluid

    @volfluid.setter
    def volfluid(self, volfluid):
        """Sets the volfluid of this WellTestRftData.


        :param volfluid: The volfluid of this WellTestRftData.  # noqa: E501
        :type: OneOfWellTestRftDataVolfluid
        """

        self._volfluid = volfluid

    @property
    def well_test_rft(self):
        """Gets the well_test_rft of this WellTestRftData.  # noqa: E501


        :return: The well_test_rft of this WellTestRftData.  # noqa: E501
        :rtype: AnyOfWellTestRftDataWellTestRft
        """
        return self._well_test_rft

    @well_test_rft.setter
    def well_test_rft(self, well_test_rft):
        """Sets the well_test_rft of this WellTestRftData.


        :param well_test_rft: The well_test_rft of this WellTestRftData.  # noqa: E501
        :type: AnyOfWellTestRftDataWellTestRft
        """

        self._well_test_rft = well_test_rft

    @property
    def well_test_rft_data_fluids(self):
        """Gets the well_test_rft_data_fluids of this WellTestRftData.  # noqa: E501


        :return: The well_test_rft_data_fluids of this WellTestRftData.  # noqa: E501
        :rtype: list[WellTestRftDataFluid]
        """
        return self._well_test_rft_data_fluids

    @well_test_rft_data_fluids.setter
    def well_test_rft_data_fluids(self, well_test_rft_data_fluids):
        """Sets the well_test_rft_data_fluids of this WellTestRftData.


        :param well_test_rft_data_fluids: The well_test_rft_data_fluids of this WellTestRftData.  # noqa: E501
        :type: list[WellTestRftDataFluid]
        """

        self._well_test_rft_data_fluids = well_test_rft_data_fluids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WellTestRftData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WellTestRftData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
