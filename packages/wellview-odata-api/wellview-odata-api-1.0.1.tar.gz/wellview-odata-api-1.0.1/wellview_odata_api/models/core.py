# coding: utf-8

"""
    OData Service for namespace Default

    This OData service is located at http://localhost  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Core(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'barrellength': 'OneOfCoreBarrellength',
        'barreltyp': 'str',
        'com': 'str',
        'contractor': 'str',
        'coreno': 'int',
        'depthbtm': 'OneOfCoreDepthbtm',
        'depthtop': 'OneOfCoreDepthtop',
        'des': 'str',
        'dttm': 'datetime',
        'fluidtyp': 'str',
        'idrec': 'str',
        'idrecdrillstringcomp': 'str',
        'idrecdrillstringcomptk': 'str',
        'idrecgeoeval': 'str',
        'idrecgeoevaltk': 'str',
        'idrecjob': 'str',
        'idrecjobtk': 'str',
        'idrecwellbore': 'str',
        'idrecwellboretk': 'str',
        'idwell': 'str',
        'lenrecovered': 'OneOfCoreLenrecovered',
        'oriented': 'int',
        'proposed': 'int',
        'purpose': 'str',
        'refno': 'str',
        'rqd': 'OneOfCoreRqd',
        'syscreatedate': 'datetime',
        'syscreateuser': 'str',
        'syslockchildren': 'int',
        'syslockchildrenui': 'int',
        'syslockdate': 'datetime',
        'syslockme': 'int',
        'syslockmeui': 'int',
        'sysmoddate': 'datetime',
        'sysmoduser': 'str',
        'systag': 'str',
        'szdiacore': 'OneOfCoreSzdiacore',
        'treatmentmethod': 'str',
        'typ': 'str',
        'wellheader': 'AnyOfCoreWellheader'
    }

    attribute_map = {
        'barrellength': 'barrellength',
        'barreltyp': 'barreltyp',
        'com': 'com',
        'contractor': 'contractor',
        'coreno': 'coreno',
        'depthbtm': 'depthbtm',
        'depthtop': 'depthtop',
        'des': 'des',
        'dttm': 'dttm',
        'fluidtyp': 'fluidtyp',
        'idrec': 'idrec',
        'idrecdrillstringcomp': 'idrecdrillstringcomp',
        'idrecdrillstringcomptk': 'idrecdrillstringcomptk',
        'idrecgeoeval': 'idrecgeoeval',
        'idrecgeoevaltk': 'idrecgeoevaltk',
        'idrecjob': 'idrecjob',
        'idrecjobtk': 'idrecjobtk',
        'idrecwellbore': 'idrecwellbore',
        'idrecwellboretk': 'idrecwellboretk',
        'idwell': 'idwell',
        'lenrecovered': 'lenrecovered',
        'oriented': 'oriented',
        'proposed': 'proposed',
        'purpose': 'purpose',
        'refno': 'refno',
        'rqd': 'rqd',
        'syscreatedate': 'syscreatedate',
        'syscreateuser': 'syscreateuser',
        'syslockchildren': 'syslockchildren',
        'syslockchildrenui': 'syslockchildrenui',
        'syslockdate': 'syslockdate',
        'syslockme': 'syslockme',
        'syslockmeui': 'syslockmeui',
        'sysmoddate': 'sysmoddate',
        'sysmoduser': 'sysmoduser',
        'systag': 'systag',
        'szdiacore': 'szdiacore',
        'treatmentmethod': 'treatmentmethod',
        'typ': 'typ',
        'wellheader': 'wellheader'
    }

    def __init__(self, barrellength=None, barreltyp=None, com=None, contractor=None, coreno=None, depthbtm=None, depthtop=None, des=None, dttm=None, fluidtyp=None, idrec=None, idrecdrillstringcomp=None, idrecdrillstringcomptk=None, idrecgeoeval=None, idrecgeoevaltk=None, idrecjob=None, idrecjobtk=None, idrecwellbore=None, idrecwellboretk=None, idwell=None, lenrecovered=None, oriented=None, proposed=None, purpose=None, refno=None, rqd=None, syscreatedate=None, syscreateuser=None, syslockchildren=None, syslockchildrenui=None, syslockdate=None, syslockme=None, syslockmeui=None, sysmoddate=None, sysmoduser=None, systag=None, szdiacore=None, treatmentmethod=None, typ=None, wellheader=None):  # noqa: E501
        """Core - a model defined in Swagger"""  # noqa: E501
        self._barrellength = None
        self._barreltyp = None
        self._com = None
        self._contractor = None
        self._coreno = None
        self._depthbtm = None
        self._depthtop = None
        self._des = None
        self._dttm = None
        self._fluidtyp = None
        self._idrec = None
        self._idrecdrillstringcomp = None
        self._idrecdrillstringcomptk = None
        self._idrecgeoeval = None
        self._idrecgeoevaltk = None
        self._idrecjob = None
        self._idrecjobtk = None
        self._idrecwellbore = None
        self._idrecwellboretk = None
        self._idwell = None
        self._lenrecovered = None
        self._oriented = None
        self._proposed = None
        self._purpose = None
        self._refno = None
        self._rqd = None
        self._syscreatedate = None
        self._syscreateuser = None
        self._syslockchildren = None
        self._syslockchildrenui = None
        self._syslockdate = None
        self._syslockme = None
        self._syslockmeui = None
        self._sysmoddate = None
        self._sysmoduser = None
        self._systag = None
        self._szdiacore = None
        self._treatmentmethod = None
        self._typ = None
        self._wellheader = None
        self.discriminator = None
        if barrellength is not None:
            self.barrellength = barrellength
        if barreltyp is not None:
            self.barreltyp = barreltyp
        if com is not None:
            self.com = com
        if contractor is not None:
            self.contractor = contractor
        if coreno is not None:
            self.coreno = coreno
        if depthbtm is not None:
            self.depthbtm = depthbtm
        if depthtop is not None:
            self.depthtop = depthtop
        if des is not None:
            self.des = des
        if dttm is not None:
            self.dttm = dttm
        if fluidtyp is not None:
            self.fluidtyp = fluidtyp
        if idrec is not None:
            self.idrec = idrec
        if idrecdrillstringcomp is not None:
            self.idrecdrillstringcomp = idrecdrillstringcomp
        if idrecdrillstringcomptk is not None:
            self.idrecdrillstringcomptk = idrecdrillstringcomptk
        if idrecgeoeval is not None:
            self.idrecgeoeval = idrecgeoeval
        if idrecgeoevaltk is not None:
            self.idrecgeoevaltk = idrecgeoevaltk
        if idrecjob is not None:
            self.idrecjob = idrecjob
        if idrecjobtk is not None:
            self.idrecjobtk = idrecjobtk
        if idrecwellbore is not None:
            self.idrecwellbore = idrecwellbore
        if idrecwellboretk is not None:
            self.idrecwellboretk = idrecwellboretk
        if idwell is not None:
            self.idwell = idwell
        if lenrecovered is not None:
            self.lenrecovered = lenrecovered
        if oriented is not None:
            self.oriented = oriented
        if proposed is not None:
            self.proposed = proposed
        if purpose is not None:
            self.purpose = purpose
        if refno is not None:
            self.refno = refno
        if rqd is not None:
            self.rqd = rqd
        if syscreatedate is not None:
            self.syscreatedate = syscreatedate
        if syscreateuser is not None:
            self.syscreateuser = syscreateuser
        if syslockchildren is not None:
            self.syslockchildren = syslockchildren
        if syslockchildrenui is not None:
            self.syslockchildrenui = syslockchildrenui
        if syslockdate is not None:
            self.syslockdate = syslockdate
        if syslockme is not None:
            self.syslockme = syslockme
        if syslockmeui is not None:
            self.syslockmeui = syslockmeui
        if sysmoddate is not None:
            self.sysmoddate = sysmoddate
        if sysmoduser is not None:
            self.sysmoduser = sysmoduser
        if systag is not None:
            self.systag = systag
        if szdiacore is not None:
            self.szdiacore = szdiacore
        if treatmentmethod is not None:
            self.treatmentmethod = treatmentmethod
        if typ is not None:
            self.typ = typ
        if wellheader is not None:
            self.wellheader = wellheader

    @property
    def barrellength(self):
        """Gets the barrellength of this Core.  # noqa: E501


        :return: The barrellength of this Core.  # noqa: E501
        :rtype: OneOfCoreBarrellength
        """
        return self._barrellength

    @barrellength.setter
    def barrellength(self, barrellength):
        """Sets the barrellength of this Core.


        :param barrellength: The barrellength of this Core.  # noqa: E501
        :type: OneOfCoreBarrellength
        """

        self._barrellength = barrellength

    @property
    def barreltyp(self):
        """Gets the barreltyp of this Core.  # noqa: E501


        :return: The barreltyp of this Core.  # noqa: E501
        :rtype: str
        """
        return self._barreltyp

    @barreltyp.setter
    def barreltyp(self, barreltyp):
        """Sets the barreltyp of this Core.


        :param barreltyp: The barreltyp of this Core.  # noqa: E501
        :type: str
        """

        self._barreltyp = barreltyp

    @property
    def com(self):
        """Gets the com of this Core.  # noqa: E501


        :return: The com of this Core.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this Core.


        :param com: The com of this Core.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def contractor(self):
        """Gets the contractor of this Core.  # noqa: E501


        :return: The contractor of this Core.  # noqa: E501
        :rtype: str
        """
        return self._contractor

    @contractor.setter
    def contractor(self, contractor):
        """Sets the contractor of this Core.


        :param contractor: The contractor of this Core.  # noqa: E501
        :type: str
        """

        self._contractor = contractor

    @property
    def coreno(self):
        """Gets the coreno of this Core.  # noqa: E501


        :return: The coreno of this Core.  # noqa: E501
        :rtype: int
        """
        return self._coreno

    @coreno.setter
    def coreno(self, coreno):
        """Sets the coreno of this Core.


        :param coreno: The coreno of this Core.  # noqa: E501
        :type: int
        """

        self._coreno = coreno

    @property
    def depthbtm(self):
        """Gets the depthbtm of this Core.  # noqa: E501


        :return: The depthbtm of this Core.  # noqa: E501
        :rtype: OneOfCoreDepthbtm
        """
        return self._depthbtm

    @depthbtm.setter
    def depthbtm(self, depthbtm):
        """Sets the depthbtm of this Core.


        :param depthbtm: The depthbtm of this Core.  # noqa: E501
        :type: OneOfCoreDepthbtm
        """

        self._depthbtm = depthbtm

    @property
    def depthtop(self):
        """Gets the depthtop of this Core.  # noqa: E501


        :return: The depthtop of this Core.  # noqa: E501
        :rtype: OneOfCoreDepthtop
        """
        return self._depthtop

    @depthtop.setter
    def depthtop(self, depthtop):
        """Sets the depthtop of this Core.


        :param depthtop: The depthtop of this Core.  # noqa: E501
        :type: OneOfCoreDepthtop
        """

        self._depthtop = depthtop

    @property
    def des(self):
        """Gets the des of this Core.  # noqa: E501


        :return: The des of this Core.  # noqa: E501
        :rtype: str
        """
        return self._des

    @des.setter
    def des(self, des):
        """Sets the des of this Core.


        :param des: The des of this Core.  # noqa: E501
        :type: str
        """

        self._des = des

    @property
    def dttm(self):
        """Gets the dttm of this Core.  # noqa: E501


        :return: The dttm of this Core.  # noqa: E501
        :rtype: datetime
        """
        return self._dttm

    @dttm.setter
    def dttm(self, dttm):
        """Sets the dttm of this Core.


        :param dttm: The dttm of this Core.  # noqa: E501
        :type: datetime
        """

        self._dttm = dttm

    @property
    def fluidtyp(self):
        """Gets the fluidtyp of this Core.  # noqa: E501


        :return: The fluidtyp of this Core.  # noqa: E501
        :rtype: str
        """
        return self._fluidtyp

    @fluidtyp.setter
    def fluidtyp(self, fluidtyp):
        """Sets the fluidtyp of this Core.


        :param fluidtyp: The fluidtyp of this Core.  # noqa: E501
        :type: str
        """

        self._fluidtyp = fluidtyp

    @property
    def idrec(self):
        """Gets the idrec of this Core.  # noqa: E501


        :return: The idrec of this Core.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this Core.


        :param idrec: The idrec of this Core.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecdrillstringcomp(self):
        """Gets the idrecdrillstringcomp of this Core.  # noqa: E501


        :return: The idrecdrillstringcomp of this Core.  # noqa: E501
        :rtype: str
        """
        return self._idrecdrillstringcomp

    @idrecdrillstringcomp.setter
    def idrecdrillstringcomp(self, idrecdrillstringcomp):
        """Sets the idrecdrillstringcomp of this Core.


        :param idrecdrillstringcomp: The idrecdrillstringcomp of this Core.  # noqa: E501
        :type: str
        """

        self._idrecdrillstringcomp = idrecdrillstringcomp

    @property
    def idrecdrillstringcomptk(self):
        """Gets the idrecdrillstringcomptk of this Core.  # noqa: E501


        :return: The idrecdrillstringcomptk of this Core.  # noqa: E501
        :rtype: str
        """
        return self._idrecdrillstringcomptk

    @idrecdrillstringcomptk.setter
    def idrecdrillstringcomptk(self, idrecdrillstringcomptk):
        """Sets the idrecdrillstringcomptk of this Core.


        :param idrecdrillstringcomptk: The idrecdrillstringcomptk of this Core.  # noqa: E501
        :type: str
        """

        self._idrecdrillstringcomptk = idrecdrillstringcomptk

    @property
    def idrecgeoeval(self):
        """Gets the idrecgeoeval of this Core.  # noqa: E501


        :return: The idrecgeoeval of this Core.  # noqa: E501
        :rtype: str
        """
        return self._idrecgeoeval

    @idrecgeoeval.setter
    def idrecgeoeval(self, idrecgeoeval):
        """Sets the idrecgeoeval of this Core.


        :param idrecgeoeval: The idrecgeoeval of this Core.  # noqa: E501
        :type: str
        """

        self._idrecgeoeval = idrecgeoeval

    @property
    def idrecgeoevaltk(self):
        """Gets the idrecgeoevaltk of this Core.  # noqa: E501


        :return: The idrecgeoevaltk of this Core.  # noqa: E501
        :rtype: str
        """
        return self._idrecgeoevaltk

    @idrecgeoevaltk.setter
    def idrecgeoevaltk(self, idrecgeoevaltk):
        """Sets the idrecgeoevaltk of this Core.


        :param idrecgeoevaltk: The idrecgeoevaltk of this Core.  # noqa: E501
        :type: str
        """

        self._idrecgeoevaltk = idrecgeoevaltk

    @property
    def idrecjob(self):
        """Gets the idrecjob of this Core.  # noqa: E501


        :return: The idrecjob of this Core.  # noqa: E501
        :rtype: str
        """
        return self._idrecjob

    @idrecjob.setter
    def idrecjob(self, idrecjob):
        """Sets the idrecjob of this Core.


        :param idrecjob: The idrecjob of this Core.  # noqa: E501
        :type: str
        """

        self._idrecjob = idrecjob

    @property
    def idrecjobtk(self):
        """Gets the idrecjobtk of this Core.  # noqa: E501


        :return: The idrecjobtk of this Core.  # noqa: E501
        :rtype: str
        """
        return self._idrecjobtk

    @idrecjobtk.setter
    def idrecjobtk(self, idrecjobtk):
        """Sets the idrecjobtk of this Core.


        :param idrecjobtk: The idrecjobtk of this Core.  # noqa: E501
        :type: str
        """

        self._idrecjobtk = idrecjobtk

    @property
    def idrecwellbore(self):
        """Gets the idrecwellbore of this Core.  # noqa: E501


        :return: The idrecwellbore of this Core.  # noqa: E501
        :rtype: str
        """
        return self._idrecwellbore

    @idrecwellbore.setter
    def idrecwellbore(self, idrecwellbore):
        """Sets the idrecwellbore of this Core.


        :param idrecwellbore: The idrecwellbore of this Core.  # noqa: E501
        :type: str
        """

        self._idrecwellbore = idrecwellbore

    @property
    def idrecwellboretk(self):
        """Gets the idrecwellboretk of this Core.  # noqa: E501


        :return: The idrecwellboretk of this Core.  # noqa: E501
        :rtype: str
        """
        return self._idrecwellboretk

    @idrecwellboretk.setter
    def idrecwellboretk(self, idrecwellboretk):
        """Sets the idrecwellboretk of this Core.


        :param idrecwellboretk: The idrecwellboretk of this Core.  # noqa: E501
        :type: str
        """

        self._idrecwellboretk = idrecwellboretk

    @property
    def idwell(self):
        """Gets the idwell of this Core.  # noqa: E501


        :return: The idwell of this Core.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this Core.


        :param idwell: The idwell of this Core.  # noqa: E501
        :type: str
        """

        self._idwell = idwell

    @property
    def lenrecovered(self):
        """Gets the lenrecovered of this Core.  # noqa: E501


        :return: The lenrecovered of this Core.  # noqa: E501
        :rtype: OneOfCoreLenrecovered
        """
        return self._lenrecovered

    @lenrecovered.setter
    def lenrecovered(self, lenrecovered):
        """Sets the lenrecovered of this Core.


        :param lenrecovered: The lenrecovered of this Core.  # noqa: E501
        :type: OneOfCoreLenrecovered
        """

        self._lenrecovered = lenrecovered

    @property
    def oriented(self):
        """Gets the oriented of this Core.  # noqa: E501


        :return: The oriented of this Core.  # noqa: E501
        :rtype: int
        """
        return self._oriented

    @oriented.setter
    def oriented(self, oriented):
        """Sets the oriented of this Core.


        :param oriented: The oriented of this Core.  # noqa: E501
        :type: int
        """

        self._oriented = oriented

    @property
    def proposed(self):
        """Gets the proposed of this Core.  # noqa: E501


        :return: The proposed of this Core.  # noqa: E501
        :rtype: int
        """
        return self._proposed

    @proposed.setter
    def proposed(self, proposed):
        """Sets the proposed of this Core.


        :param proposed: The proposed of this Core.  # noqa: E501
        :type: int
        """

        self._proposed = proposed

    @property
    def purpose(self):
        """Gets the purpose of this Core.  # noqa: E501


        :return: The purpose of this Core.  # noqa: E501
        :rtype: str
        """
        return self._purpose

    @purpose.setter
    def purpose(self, purpose):
        """Sets the purpose of this Core.


        :param purpose: The purpose of this Core.  # noqa: E501
        :type: str
        """

        self._purpose = purpose

    @property
    def refno(self):
        """Gets the refno of this Core.  # noqa: E501


        :return: The refno of this Core.  # noqa: E501
        :rtype: str
        """
        return self._refno

    @refno.setter
    def refno(self, refno):
        """Sets the refno of this Core.


        :param refno: The refno of this Core.  # noqa: E501
        :type: str
        """

        self._refno = refno

    @property
    def rqd(self):
        """Gets the rqd of this Core.  # noqa: E501


        :return: The rqd of this Core.  # noqa: E501
        :rtype: OneOfCoreRqd
        """
        return self._rqd

    @rqd.setter
    def rqd(self, rqd):
        """Sets the rqd of this Core.


        :param rqd: The rqd of this Core.  # noqa: E501
        :type: OneOfCoreRqd
        """

        self._rqd = rqd

    @property
    def syscreatedate(self):
        """Gets the syscreatedate of this Core.  # noqa: E501


        :return: The syscreatedate of this Core.  # noqa: E501
        :rtype: datetime
        """
        return self._syscreatedate

    @syscreatedate.setter
    def syscreatedate(self, syscreatedate):
        """Sets the syscreatedate of this Core.


        :param syscreatedate: The syscreatedate of this Core.  # noqa: E501
        :type: datetime
        """

        self._syscreatedate = syscreatedate

    @property
    def syscreateuser(self):
        """Gets the syscreateuser of this Core.  # noqa: E501


        :return: The syscreateuser of this Core.  # noqa: E501
        :rtype: str
        """
        return self._syscreateuser

    @syscreateuser.setter
    def syscreateuser(self, syscreateuser):
        """Sets the syscreateuser of this Core.


        :param syscreateuser: The syscreateuser of this Core.  # noqa: E501
        :type: str
        """

        self._syscreateuser = syscreateuser

    @property
    def syslockchildren(self):
        """Gets the syslockchildren of this Core.  # noqa: E501


        :return: The syslockchildren of this Core.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildren

    @syslockchildren.setter
    def syslockchildren(self, syslockchildren):
        """Sets the syslockchildren of this Core.


        :param syslockchildren: The syslockchildren of this Core.  # noqa: E501
        :type: int
        """

        self._syslockchildren = syslockchildren

    @property
    def syslockchildrenui(self):
        """Gets the syslockchildrenui of this Core.  # noqa: E501


        :return: The syslockchildrenui of this Core.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildrenui

    @syslockchildrenui.setter
    def syslockchildrenui(self, syslockchildrenui):
        """Sets the syslockchildrenui of this Core.


        :param syslockchildrenui: The syslockchildrenui of this Core.  # noqa: E501
        :type: int
        """

        self._syslockchildrenui = syslockchildrenui

    @property
    def syslockdate(self):
        """Gets the syslockdate of this Core.  # noqa: E501


        :return: The syslockdate of this Core.  # noqa: E501
        :rtype: datetime
        """
        return self._syslockdate

    @syslockdate.setter
    def syslockdate(self, syslockdate):
        """Sets the syslockdate of this Core.


        :param syslockdate: The syslockdate of this Core.  # noqa: E501
        :type: datetime
        """

        self._syslockdate = syslockdate

    @property
    def syslockme(self):
        """Gets the syslockme of this Core.  # noqa: E501


        :return: The syslockme of this Core.  # noqa: E501
        :rtype: int
        """
        return self._syslockme

    @syslockme.setter
    def syslockme(self, syslockme):
        """Sets the syslockme of this Core.


        :param syslockme: The syslockme of this Core.  # noqa: E501
        :type: int
        """

        self._syslockme = syslockme

    @property
    def syslockmeui(self):
        """Gets the syslockmeui of this Core.  # noqa: E501


        :return: The syslockmeui of this Core.  # noqa: E501
        :rtype: int
        """
        return self._syslockmeui

    @syslockmeui.setter
    def syslockmeui(self, syslockmeui):
        """Sets the syslockmeui of this Core.


        :param syslockmeui: The syslockmeui of this Core.  # noqa: E501
        :type: int
        """

        self._syslockmeui = syslockmeui

    @property
    def sysmoddate(self):
        """Gets the sysmoddate of this Core.  # noqa: E501


        :return: The sysmoddate of this Core.  # noqa: E501
        :rtype: datetime
        """
        return self._sysmoddate

    @sysmoddate.setter
    def sysmoddate(self, sysmoddate):
        """Sets the sysmoddate of this Core.


        :param sysmoddate: The sysmoddate of this Core.  # noqa: E501
        :type: datetime
        """

        self._sysmoddate = sysmoddate

    @property
    def sysmoduser(self):
        """Gets the sysmoduser of this Core.  # noqa: E501


        :return: The sysmoduser of this Core.  # noqa: E501
        :rtype: str
        """
        return self._sysmoduser

    @sysmoduser.setter
    def sysmoduser(self, sysmoduser):
        """Sets the sysmoduser of this Core.


        :param sysmoduser: The sysmoduser of this Core.  # noqa: E501
        :type: str
        """

        self._sysmoduser = sysmoduser

    @property
    def systag(self):
        """Gets the systag of this Core.  # noqa: E501


        :return: The systag of this Core.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this Core.


        :param systag: The systag of this Core.  # noqa: E501
        :type: str
        """

        self._systag = systag

    @property
    def szdiacore(self):
        """Gets the szdiacore of this Core.  # noqa: E501


        :return: The szdiacore of this Core.  # noqa: E501
        :rtype: OneOfCoreSzdiacore
        """
        return self._szdiacore

    @szdiacore.setter
    def szdiacore(self, szdiacore):
        """Sets the szdiacore of this Core.


        :param szdiacore: The szdiacore of this Core.  # noqa: E501
        :type: OneOfCoreSzdiacore
        """

        self._szdiacore = szdiacore

    @property
    def treatmentmethod(self):
        """Gets the treatmentmethod of this Core.  # noqa: E501


        :return: The treatmentmethod of this Core.  # noqa: E501
        :rtype: str
        """
        return self._treatmentmethod

    @treatmentmethod.setter
    def treatmentmethod(self, treatmentmethod):
        """Sets the treatmentmethod of this Core.


        :param treatmentmethod: The treatmentmethod of this Core.  # noqa: E501
        :type: str
        """

        self._treatmentmethod = treatmentmethod

    @property
    def typ(self):
        """Gets the typ of this Core.  # noqa: E501


        :return: The typ of this Core.  # noqa: E501
        :rtype: str
        """
        return self._typ

    @typ.setter
    def typ(self, typ):
        """Sets the typ of this Core.


        :param typ: The typ of this Core.  # noqa: E501
        :type: str
        """

        self._typ = typ

    @property
    def wellheader(self):
        """Gets the wellheader of this Core.  # noqa: E501


        :return: The wellheader of this Core.  # noqa: E501
        :rtype: AnyOfCoreWellheader
        """
        return self._wellheader

    @wellheader.setter
    def wellheader(self, wellheader):
        """Sets the wellheader of this Core.


        :param wellheader: The wellheader of this Core.  # noqa: E501
        :type: AnyOfCoreWellheader
        """

        self._wellheader = wellheader

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Core, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Core):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
