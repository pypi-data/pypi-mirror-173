# coding: utf-8

"""
    OData Service for namespace Default

    This OData service is located at http://localhost  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Riser(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'com': 'str',
        'depthbtm': 'OneOfRiserDepthbtm',
        'des': 'str',
        'dttmpull': 'datetime',
        'dttmrun': 'datetime',
        'idrec': 'str',
        'idwell': 'str',
        'proposedpull': 'int',
        'proposedrun': 'int',
        'riser_comps': 'list[RiserComp]',
        'syscreatedate': 'datetime',
        'syscreateuser': 'str',
        'syslockchildren': 'int',
        'syslockchildrenui': 'int',
        'syslockdate': 'datetime',
        'syslockme': 'int',
        'syslockmeui': 'int',
        'sysmoddate': 'datetime',
        'sysmoduser': 'str',
        'systag': 'str',
        'tension': 'OneOfRiserTension',
        'wellheader': 'AnyOfRiserWellheader',
        'wthangprelatch': 'OneOfRiserWthangprelatch',
        'wthangunlatch': 'OneOfRiserWthangunlatch'
    }

    attribute_map = {
        'com': 'com',
        'depthbtm': 'depthbtm',
        'des': 'des',
        'dttmpull': 'dttmpull',
        'dttmrun': 'dttmrun',
        'idrec': 'idrec',
        'idwell': 'idwell',
        'proposedpull': 'proposedpull',
        'proposedrun': 'proposedrun',
        'riser_comps': 'riserComps',
        'syscreatedate': 'syscreatedate',
        'syscreateuser': 'syscreateuser',
        'syslockchildren': 'syslockchildren',
        'syslockchildrenui': 'syslockchildrenui',
        'syslockdate': 'syslockdate',
        'syslockme': 'syslockme',
        'syslockmeui': 'syslockmeui',
        'sysmoddate': 'sysmoddate',
        'sysmoduser': 'sysmoduser',
        'systag': 'systag',
        'tension': 'tension',
        'wellheader': 'wellheader',
        'wthangprelatch': 'wthangprelatch',
        'wthangunlatch': 'wthangunlatch'
    }

    def __init__(self, com=None, depthbtm=None, des=None, dttmpull=None, dttmrun=None, idrec=None, idwell=None, proposedpull=None, proposedrun=None, riser_comps=None, syscreatedate=None, syscreateuser=None, syslockchildren=None, syslockchildrenui=None, syslockdate=None, syslockme=None, syslockmeui=None, sysmoddate=None, sysmoduser=None, systag=None, tension=None, wellheader=None, wthangprelatch=None, wthangunlatch=None):  # noqa: E501
        """Riser - a model defined in Swagger"""  # noqa: E501
        self._com = None
        self._depthbtm = None
        self._des = None
        self._dttmpull = None
        self._dttmrun = None
        self._idrec = None
        self._idwell = None
        self._proposedpull = None
        self._proposedrun = None
        self._riser_comps = None
        self._syscreatedate = None
        self._syscreateuser = None
        self._syslockchildren = None
        self._syslockchildrenui = None
        self._syslockdate = None
        self._syslockme = None
        self._syslockmeui = None
        self._sysmoddate = None
        self._sysmoduser = None
        self._systag = None
        self._tension = None
        self._wellheader = None
        self._wthangprelatch = None
        self._wthangunlatch = None
        self.discriminator = None
        if com is not None:
            self.com = com
        if depthbtm is not None:
            self.depthbtm = depthbtm
        if des is not None:
            self.des = des
        if dttmpull is not None:
            self.dttmpull = dttmpull
        if dttmrun is not None:
            self.dttmrun = dttmrun
        if idrec is not None:
            self.idrec = idrec
        if idwell is not None:
            self.idwell = idwell
        if proposedpull is not None:
            self.proposedpull = proposedpull
        if proposedrun is not None:
            self.proposedrun = proposedrun
        if riser_comps is not None:
            self.riser_comps = riser_comps
        if syscreatedate is not None:
            self.syscreatedate = syscreatedate
        if syscreateuser is not None:
            self.syscreateuser = syscreateuser
        if syslockchildren is not None:
            self.syslockchildren = syslockchildren
        if syslockchildrenui is not None:
            self.syslockchildrenui = syslockchildrenui
        if syslockdate is not None:
            self.syslockdate = syslockdate
        if syslockme is not None:
            self.syslockme = syslockme
        if syslockmeui is not None:
            self.syslockmeui = syslockmeui
        if sysmoddate is not None:
            self.sysmoddate = sysmoddate
        if sysmoduser is not None:
            self.sysmoduser = sysmoduser
        if systag is not None:
            self.systag = systag
        if tension is not None:
            self.tension = tension
        if wellheader is not None:
            self.wellheader = wellheader
        if wthangprelatch is not None:
            self.wthangprelatch = wthangprelatch
        if wthangunlatch is not None:
            self.wthangunlatch = wthangunlatch

    @property
    def com(self):
        """Gets the com of this Riser.  # noqa: E501


        :return: The com of this Riser.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this Riser.


        :param com: The com of this Riser.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def depthbtm(self):
        """Gets the depthbtm of this Riser.  # noqa: E501


        :return: The depthbtm of this Riser.  # noqa: E501
        :rtype: OneOfRiserDepthbtm
        """
        return self._depthbtm

    @depthbtm.setter
    def depthbtm(self, depthbtm):
        """Sets the depthbtm of this Riser.


        :param depthbtm: The depthbtm of this Riser.  # noqa: E501
        :type: OneOfRiserDepthbtm
        """

        self._depthbtm = depthbtm

    @property
    def des(self):
        """Gets the des of this Riser.  # noqa: E501


        :return: The des of this Riser.  # noqa: E501
        :rtype: str
        """
        return self._des

    @des.setter
    def des(self, des):
        """Sets the des of this Riser.


        :param des: The des of this Riser.  # noqa: E501
        :type: str
        """

        self._des = des

    @property
    def dttmpull(self):
        """Gets the dttmpull of this Riser.  # noqa: E501


        :return: The dttmpull of this Riser.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmpull

    @dttmpull.setter
    def dttmpull(self, dttmpull):
        """Sets the dttmpull of this Riser.


        :param dttmpull: The dttmpull of this Riser.  # noqa: E501
        :type: datetime
        """

        self._dttmpull = dttmpull

    @property
    def dttmrun(self):
        """Gets the dttmrun of this Riser.  # noqa: E501


        :return: The dttmrun of this Riser.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmrun

    @dttmrun.setter
    def dttmrun(self, dttmrun):
        """Sets the dttmrun of this Riser.


        :param dttmrun: The dttmrun of this Riser.  # noqa: E501
        :type: datetime
        """

        self._dttmrun = dttmrun

    @property
    def idrec(self):
        """Gets the idrec of this Riser.  # noqa: E501


        :return: The idrec of this Riser.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this Riser.


        :param idrec: The idrec of this Riser.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idwell(self):
        """Gets the idwell of this Riser.  # noqa: E501


        :return: The idwell of this Riser.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this Riser.


        :param idwell: The idwell of this Riser.  # noqa: E501
        :type: str
        """

        self._idwell = idwell

    @property
    def proposedpull(self):
        """Gets the proposedpull of this Riser.  # noqa: E501


        :return: The proposedpull of this Riser.  # noqa: E501
        :rtype: int
        """
        return self._proposedpull

    @proposedpull.setter
    def proposedpull(self, proposedpull):
        """Sets the proposedpull of this Riser.


        :param proposedpull: The proposedpull of this Riser.  # noqa: E501
        :type: int
        """

        self._proposedpull = proposedpull

    @property
    def proposedrun(self):
        """Gets the proposedrun of this Riser.  # noqa: E501


        :return: The proposedrun of this Riser.  # noqa: E501
        :rtype: int
        """
        return self._proposedrun

    @proposedrun.setter
    def proposedrun(self, proposedrun):
        """Sets the proposedrun of this Riser.


        :param proposedrun: The proposedrun of this Riser.  # noqa: E501
        :type: int
        """

        self._proposedrun = proposedrun

    @property
    def riser_comps(self):
        """Gets the riser_comps of this Riser.  # noqa: E501


        :return: The riser_comps of this Riser.  # noqa: E501
        :rtype: list[RiserComp]
        """
        return self._riser_comps

    @riser_comps.setter
    def riser_comps(self, riser_comps):
        """Sets the riser_comps of this Riser.


        :param riser_comps: The riser_comps of this Riser.  # noqa: E501
        :type: list[RiserComp]
        """

        self._riser_comps = riser_comps

    @property
    def syscreatedate(self):
        """Gets the syscreatedate of this Riser.  # noqa: E501


        :return: The syscreatedate of this Riser.  # noqa: E501
        :rtype: datetime
        """
        return self._syscreatedate

    @syscreatedate.setter
    def syscreatedate(self, syscreatedate):
        """Sets the syscreatedate of this Riser.


        :param syscreatedate: The syscreatedate of this Riser.  # noqa: E501
        :type: datetime
        """

        self._syscreatedate = syscreatedate

    @property
    def syscreateuser(self):
        """Gets the syscreateuser of this Riser.  # noqa: E501


        :return: The syscreateuser of this Riser.  # noqa: E501
        :rtype: str
        """
        return self._syscreateuser

    @syscreateuser.setter
    def syscreateuser(self, syscreateuser):
        """Sets the syscreateuser of this Riser.


        :param syscreateuser: The syscreateuser of this Riser.  # noqa: E501
        :type: str
        """

        self._syscreateuser = syscreateuser

    @property
    def syslockchildren(self):
        """Gets the syslockchildren of this Riser.  # noqa: E501


        :return: The syslockchildren of this Riser.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildren

    @syslockchildren.setter
    def syslockchildren(self, syslockchildren):
        """Sets the syslockchildren of this Riser.


        :param syslockchildren: The syslockchildren of this Riser.  # noqa: E501
        :type: int
        """

        self._syslockchildren = syslockchildren

    @property
    def syslockchildrenui(self):
        """Gets the syslockchildrenui of this Riser.  # noqa: E501


        :return: The syslockchildrenui of this Riser.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildrenui

    @syslockchildrenui.setter
    def syslockchildrenui(self, syslockchildrenui):
        """Sets the syslockchildrenui of this Riser.


        :param syslockchildrenui: The syslockchildrenui of this Riser.  # noqa: E501
        :type: int
        """

        self._syslockchildrenui = syslockchildrenui

    @property
    def syslockdate(self):
        """Gets the syslockdate of this Riser.  # noqa: E501


        :return: The syslockdate of this Riser.  # noqa: E501
        :rtype: datetime
        """
        return self._syslockdate

    @syslockdate.setter
    def syslockdate(self, syslockdate):
        """Sets the syslockdate of this Riser.


        :param syslockdate: The syslockdate of this Riser.  # noqa: E501
        :type: datetime
        """

        self._syslockdate = syslockdate

    @property
    def syslockme(self):
        """Gets the syslockme of this Riser.  # noqa: E501


        :return: The syslockme of this Riser.  # noqa: E501
        :rtype: int
        """
        return self._syslockme

    @syslockme.setter
    def syslockme(self, syslockme):
        """Sets the syslockme of this Riser.


        :param syslockme: The syslockme of this Riser.  # noqa: E501
        :type: int
        """

        self._syslockme = syslockme

    @property
    def syslockmeui(self):
        """Gets the syslockmeui of this Riser.  # noqa: E501


        :return: The syslockmeui of this Riser.  # noqa: E501
        :rtype: int
        """
        return self._syslockmeui

    @syslockmeui.setter
    def syslockmeui(self, syslockmeui):
        """Sets the syslockmeui of this Riser.


        :param syslockmeui: The syslockmeui of this Riser.  # noqa: E501
        :type: int
        """

        self._syslockmeui = syslockmeui

    @property
    def sysmoddate(self):
        """Gets the sysmoddate of this Riser.  # noqa: E501


        :return: The sysmoddate of this Riser.  # noqa: E501
        :rtype: datetime
        """
        return self._sysmoddate

    @sysmoddate.setter
    def sysmoddate(self, sysmoddate):
        """Sets the sysmoddate of this Riser.


        :param sysmoddate: The sysmoddate of this Riser.  # noqa: E501
        :type: datetime
        """

        self._sysmoddate = sysmoddate

    @property
    def sysmoduser(self):
        """Gets the sysmoduser of this Riser.  # noqa: E501


        :return: The sysmoduser of this Riser.  # noqa: E501
        :rtype: str
        """
        return self._sysmoduser

    @sysmoduser.setter
    def sysmoduser(self, sysmoduser):
        """Sets the sysmoduser of this Riser.


        :param sysmoduser: The sysmoduser of this Riser.  # noqa: E501
        :type: str
        """

        self._sysmoduser = sysmoduser

    @property
    def systag(self):
        """Gets the systag of this Riser.  # noqa: E501


        :return: The systag of this Riser.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this Riser.


        :param systag: The systag of this Riser.  # noqa: E501
        :type: str
        """

        self._systag = systag

    @property
    def tension(self):
        """Gets the tension of this Riser.  # noqa: E501


        :return: The tension of this Riser.  # noqa: E501
        :rtype: OneOfRiserTension
        """
        return self._tension

    @tension.setter
    def tension(self, tension):
        """Sets the tension of this Riser.


        :param tension: The tension of this Riser.  # noqa: E501
        :type: OneOfRiserTension
        """

        self._tension = tension

    @property
    def wellheader(self):
        """Gets the wellheader of this Riser.  # noqa: E501


        :return: The wellheader of this Riser.  # noqa: E501
        :rtype: AnyOfRiserWellheader
        """
        return self._wellheader

    @wellheader.setter
    def wellheader(self, wellheader):
        """Sets the wellheader of this Riser.


        :param wellheader: The wellheader of this Riser.  # noqa: E501
        :type: AnyOfRiserWellheader
        """

        self._wellheader = wellheader

    @property
    def wthangprelatch(self):
        """Gets the wthangprelatch of this Riser.  # noqa: E501


        :return: The wthangprelatch of this Riser.  # noqa: E501
        :rtype: OneOfRiserWthangprelatch
        """
        return self._wthangprelatch

    @wthangprelatch.setter
    def wthangprelatch(self, wthangprelatch):
        """Sets the wthangprelatch of this Riser.


        :param wthangprelatch: The wthangprelatch of this Riser.  # noqa: E501
        :type: OneOfRiserWthangprelatch
        """

        self._wthangprelatch = wthangprelatch

    @property
    def wthangunlatch(self):
        """Gets the wthangunlatch of this Riser.  # noqa: E501


        :return: The wthangunlatch of this Riser.  # noqa: E501
        :rtype: OneOfRiserWthangunlatch
        """
        return self._wthangunlatch

    @wthangunlatch.setter
    def wthangunlatch(self, wthangunlatch):
        """Sets the wthangunlatch of this Riser.


        :param wthangunlatch: The wthangunlatch of this Riser.  # noqa: E501
        :type: OneOfRiserWthangunlatch
        """

        self._wthangunlatch = wthangunlatch

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Riser, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Riser):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
