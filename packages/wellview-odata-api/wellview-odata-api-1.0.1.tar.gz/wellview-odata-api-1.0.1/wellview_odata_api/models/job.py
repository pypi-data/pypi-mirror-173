# coding: utf-8

"""
    OData Service for namespace Default

    This OData service is located at http://localhost  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Job(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'afeamtcalc': 'OneOfJobAfeamtcalc',
        'afeamtnormcalc': 'OneOfJobAfeamtnormcalc',
        'afecosttypcalc': 'str',
        'afenumbercalc': 'str',
        'afenumbersuppcalc': 'str',
        'afeperdurmlcalc': 'OneOfJobAfeperdurmlcalc',
        'afeperdurmlnormcalc': 'OneOfJobAfeperdurmlnormcalc',
        'afepertargetdepthcalc': 'OneOfJobAfepertargetdepthcalc',
        'afepertargetdepthnormcalc': 'OneOfJobAfepertargetdepthnormcalc',
        'afesupamtcalc': 'OneOfJobAfesupamtcalc',
        'afesupamtnormcalc': 'OneOfJobAfesupamtnormcalc',
        'afetotalcalc': 'OneOfJobAfetotalcalc',
        'afetotalnormcalc': 'OneOfJobAfetotalnormcalc',
        'bhadrillruncalc': 'OneOfJobBhadrillruncalc',
        'bhatotalruncalc': 'OneOfJobBhatotalruncalc',
        'bitrevscalc': 'OneOfJobBitrevscalc',
        'chartofaccounts': 'str',
        'client': 'str',
        'complexityindex': 'str',
        'costafeforecastvarcalc': 'OneOfJobCostafeforecastvarcalc',
        'costfinalactual': 'OneOfJobCostfinalactual',
        'costforecastcalc': 'OneOfJobCostforecastcalc',
        'costforecastfieldvarcalc': 'OneOfJobCostforecastfieldvarcalc',
        'costmaxtotalcalc': 'OneOfJobCostmaxtotalcalc',
        'costmintotalcalc': 'OneOfJobCostmintotalcalc',
        'costmlnoexcludecalc': 'OneOfJobCostmlnoexcludecalc',
        'costmltotalcalc': 'OneOfJobCostmltotalcalc',
        'costmltotalnoplanchangecalc': 'OneOfJobCostmltotalnoplanchangecalc',
        'costnormafeforecastvarcalc': 'OneOfJobCostnormafeforecastvarcalc',
        'costnormforecastcalc': 'OneOfJobCostnormforecastcalc',
        'costnormforecastfieldvarcalc': 'OneOfJobCostnormforecastfieldvarcalc',
        'costnormperdepthcalc': 'OneOfJobCostnormperdepthcalc',
        'costnormperdepthplanmlcalc': 'OneOfJobCostnormperdepthplanmlcalc',
        'costnormperlateralallcalc': 'OneOfJobCostnormperlateralallcalc',
        'costnormperlateralcalc': 'OneOfJobCostnormperlateralcalc',
        'costnormtotalcalc': 'OneOfJobCostnormtotalcalc',
        'costperdepthcalc': 'OneOfJobCostperdepthcalc',
        'costperdepthplanmlcalc': 'OneOfJobCostperdepthplanmlcalc',
        'costperlateralallcalc': 'OneOfJobCostperlateralallcalc',
        'costperlateralcalc': 'OneOfJobCostperlateralcalc',
        'costpertldurcalc': 'OneOfJobCostpertldurcalc',
        'costpertldurnormcalc': 'OneOfJobCostpertldurnormcalc',
        'costtechlimittotalcalc': 'OneOfJobCosttechlimittotalcalc',
        'costtotalcalc': 'OneOfJobCosttotalcalc',
        'currencycode': 'str',
        'currencyexchangerate': 'OneOfJobCurrencyexchangerate',
        'depthdrilledcalc': 'OneOfJobDepthdrilledcalc',
        'depthdrilledperbhacalc': 'OneOfJobDepthdrilledperbhacalc',
        'depthdrilledperreportnocalc': 'OneOfJobDepthdrilledperreportnocalc',
        'depthdrilledspudtorrcalc': 'OneOfJobDepthdrilledspudtorrcalc',
        'depthperdurplanmlcalc': 'OneOfJobDepthperdurplanmlcalc',
        'depthperratiodurationcalc': 'OneOfJobDepthperratiodurationcalc',
        'depthplanmaxcalc': 'OneOfJobDepthplanmaxcalc',
        'depthrotatingcalc': 'OneOfJobDepthrotatingcalc',
        'depthslidingcalc': 'OneOfJobDepthslidingcalc',
        'dttmend': 'datetime',
        'dttmendplanmaxcalc': 'datetime',
        'dttmendplanmincalc': 'datetime',
        'dttmendplanmlcalc': 'datetime',
        'dttmendplantechlimitcalc': 'datetime',
        'dttmspud': 'datetime',
        'dttmstart': 'datetime',
        'dttmstartplan': 'datetime',
        'dttmtotaldepthcalc': 'datetime',
        'durationmaxtotalcalc': 'OneOfJobDurationmaxtotalcalc',
        'durationmintotalcalc': 'OneOfJobDurationmintotalcalc',
        'durationmltotalcalc': 'OneOfJobDurationmltotalcalc',
        'durationnoproblemtimecalc': 'OneOfJobDurationnoproblemtimecalc',
        'durationpersonnelotcalc': 'OneOfJobDurationpersonnelotcalc',
        'durationpersonnelregcalc': 'OneOfJobDurationpersonnelregcalc',
        'durationpersonneltotcalc': 'OneOfJobDurationpersonneltotcalc',
        'durationproblemtimecalc': 'OneOfJobDurationproblemtimecalc',
        'durationspudtimelogcalc': 'OneOfJobDurationspudtimelogcalc',
        'durationspudtoplanmaxcalc': 'OneOfJobDurationspudtoplanmaxcalc',
        'durationspudtoplanmincalc': 'OneOfJobDurationspudtoplanmincalc',
        'durationspudtoplanmlcalc': 'OneOfJobDurationspudtoplanmlcalc',
        'durationspudtoplantechlimcalc': 'OneOfJobDurationspudtoplantechlimcalc',
        'durationspudtorrcalc': 'OneOfJobDurationspudtorrcalc',
        'durationspudtotdcalc': 'OneOfJobDurationspudtotdcalc',
        'durationtechlimittotalcalc': 'OneOfJobDurationtechlimittotalcalc',
        'durationtimelogtotalcalc': 'OneOfJobDurationtimelogtotalcalc',
        'durmlnoexcludecalc': 'OneOfJobDurmlnoexcludecalc',
        'durmltotalnoplanchangecalc': 'OneOfJobDurmltotalnoplanchangecalc',
        'duroffbtmcalc': 'OneOfJobDuroffbtmcalc',
        'duronbtmcalc': 'OneOfJobDuronbtmcalc',
        'durpipemovingcalc': 'OneOfJobDurpipemovingcalc',
        'estcostnormsavecalc': 'OneOfJobEstcostnormsavecalc',
        'estcostsavecalc': 'OneOfJobEstcostsavecalc',
        'estproblemcostcalc': 'OneOfJobEstproblemcostcalc',
        'estproblemcostnormcalc': 'OneOfJobEstproblemcostnormcalc',
        'estproblemtimecalc': 'OneOfJobEstproblemtimecalc',
        'esttimesavecalc': 'OneOfJobEsttimesavecalc',
        'finalinvoicetotalcalc': 'OneOfJobFinalinvoicetotalcalc',
        'finalinvoicetotalnormcalc': 'OneOfJobFinalinvoicetotalnormcalc',
        'hazardidnorptcalc': 'int',
        'idrec': 'str',
        'idreclastrigcalc': 'str',
        'idreclastrigcalctk': 'str',
        'idrectub': 'str',
        'idrectubtk': 'str',
        'idrecwellbore': 'str',
        'idrecwellborecalc': 'str',
        'idrecwellborecalctk': 'str',
        'idrecwellboretk': 'str',
        'idwell': 'str',
        'job_afes': 'list[JobAfe]',
        'job_approvals': 'list[JobApproval]',
        'job_contacts': 'list[JobContact]',
        'job_dates': 'list[JobDate]',
        'job_drill_bits': 'list[JobDrillBit]',
        'job_drill_strings': 'list[JobDrillString]',
        'job_interval_lessons': 'list[JobIntervalLesson]',
        'job_interval_problems': 'list[JobIntervalProblem]',
        'job_kicks': 'list[JobKick]',
        'job_lost_circs': 'list[JobLostCirc]',
        'job_material_trans': 'list[JobMaterialTrans]',
        'job_mud_adds': 'list[JobMudAdd]',
        'job_offlines': 'list[JobOffline]',
        'job_other_circs': 'list[JobOtherCirc]',
        'job_program_drill_params': 'list[JobProgramDrillParam]',
        'job_program_geo_samples': 'list[JobProgramGeoSample]',
        'job_program_muds': 'list[JobProgramMud]',
        'job_program_phases': 'list[JobProgramPhase]',
        'job_rental_items': 'list[JobRentalItem]',
        'job_reports': 'list[JobReport]',
        'job_resources': 'list[JobResource]',
        'job_rigs': 'list[JobRig]',
        'job_safety_chks': 'list[JobSafetyChk]',
        'job_safety_incidents': 'list[JobSafetyIncident]',
        'job_service_contracts': 'list[JobServiceContract]',
        'job_supplies': 'list[JobSupply]',
        'job_support_ves': 'list[JobSupportVes]',
        'job_wellbore_gradients': 'list[JobWellboreGradient]',
        'jobida': 'str',
        'jobidb': 'str',
        'jobidc': 'str',
        'jobsubtyp': 'str',
        'jobsupplycostcalc': 'OneOfJobJobsupplycostcalc',
        'jobsupplycostnormcalc': 'OneOfJobJobsupplycostnormcalc',
        'jobtyp': 'str',
        'mudcostcalc': 'OneOfJobMudcostcalc',
        'mudcostnormcalc': 'OneOfJobMudcostnormcalc',
        'mudcostperdepthcalc': 'OneOfJobMudcostperdepthcalc',
        'mudcostperdepthnormcalc': 'OneOfJobMudcostperdepthnormcalc',
        'muddensitymaxcalc': 'OneOfJobMuddensitymaxcalc',
        'muddensitymincalc': 'OneOfJobMuddensitymincalc',
        'mudtypcalc': 'str',
        'objective': 'str',
        'objectivegeo': 'str',
        'pctproblemtimecalc': 'OneOfJobPctproblemtimecalc',
        'percentdepthrotatingcalc': 'OneOfJobPercentdepthrotatingcalc',
        'percentdepthslidingcalc': 'OneOfJobPercentdepthslidingcalc',
        'percenttmrotatingcalc': 'OneOfJobPercenttmrotatingcalc',
        'percenttmslidingcalc': 'OneOfJobPercenttmslidingcalc',
        'programmuddensitymaxcalc': 'OneOfJobProgrammuddensitymaxcalc',
        'programmuddensitymincalc': 'OneOfJobProgrammuddensitymincalc',
        'projectrefnumbercalc': 'str',
        'rateactualcond': 'OneOfJobRateactualcond',
        'rateactualgas': 'OneOfJobRateactualgas',
        'rateactualoil': 'OneOfJobRateactualoil',
        'rateactualwater': 'OneOfJobRateactualwater',
        'ratetargetcond': 'OneOfJobRatetargetcond',
        'ratetargetgas': 'OneOfJobRatetargetgas',
        'ratetargetoil': 'OneOfJobRatetargetoil',
        'ratetargetwater': 'OneOfJobRatetargetwater',
        'ratiodepthactualplancalc': 'OneOfJobRatiodepthactualplancalc',
        'ratiodepthactualtargetcalc': 'OneOfJobRatiodepthactualtargetcalc',
        'ratiodurtimelogrefhourscalc': 'OneOfJobRatiodurtimelogrefhourscalc',
        'reportnocalc': 'OneOfJobReportnocalc',
        'responsiblegrp1': 'str',
        'responsiblegrp2': 'str',
        'responsiblegrp3': 'str',
        'resulttechnical': 'str',
        'ropavgfromspudcalc': 'OneOfJobRopavgfromspudcalc',
        'ropcalc': 'OneOfJobRopcalc',
        'roprotatingcalc': 'OneOfJobRoprotatingcalc',
        'ropslidingcalc': 'OneOfJobRopslidingcalc',
        'ropspudtimelogcalc': 'OneOfJobRopspudtimelogcalc',
        'roptimelogcalc': 'OneOfJobRoptimelogcalc',
        'safetyincnocalc': 'OneOfJobSafetyincnocalc',
        'safetyincreportnocalc': 'OneOfJobSafetyincreportnocalc',
        'status1': 'str',
        'status2': 'str',
        'summary': 'str',
        'summarygeo': 'str',
        'syscreatedate': 'datetime',
        'syscreateuser': 'str',
        'syslockchildren': 'int',
        'syslockchildrenui': 'int',
        'syslockdate': 'datetime',
        'syslockme': 'int',
        'syslockmeui': 'int',
        'sysmoddate': 'datetime',
        'sysmoduser': 'str',
        'systag': 'str',
        'targetdepth': 'OneOfJobTargetdepth',
        'targetdepthtvdcalc': 'OneOfJobTargetdepthtvdcalc',
        'targetform': 'str',
        'tdtomudcalc': 'OneOfJobTdtomudcalc',
        'tmcirccalc': 'OneOfJobTmcirccalc',
        'tmdrillcalc': 'OneOfJobTmdrillcalc',
        'tmothercalc': 'OneOfJobTmothercalc',
        'tmrotatingcalc': 'OneOfJobTmrotatingcalc',
        'tmslidingcalc': 'OneOfJobTmslidingcalc',
        'tmtripcalc': 'OneOfJobTmtripcalc',
        'totaldepthcalc': 'OneOfJobTotaldepthcalc',
        'totaldepthtvdcalc': 'OneOfJobTotaldepthtvdcalc',
        'userboolean1': 'int',
        'userboolean2': 'int',
        'usernum1': 'OneOfJobUsernum1',
        'usernum2': 'OneOfJobUsernum2',
        'usernum3': 'OneOfJobUsernum3',
        'usernum4': 'OneOfJobUsernum4',
        'usernum5': 'OneOfJobUsernum5',
        'usertxt1': 'str',
        'usertxt2': 'str',
        'usertxt3': 'str',
        'usertxt4': 'str',
        'usertxt5': 'str',
        'varianceafefinalcalc': 'OneOfJobVarianceafefinalcalc',
        'variancefieldcalc': 'OneOfJobVariancefieldcalc',
        'variancefieldfinalcalc': 'OneOfJobVariancefieldfinalcalc',
        'variancefinalcalc': 'OneOfJobVariancefinalcalc',
        'variancenormafefinalcalc': 'OneOfJobVariancenormafefinalcalc',
        'variancenormfieldcalc': 'OneOfJobVariancenormfieldcalc',
        'variancenormfieldfinalcalc': 'OneOfJobVariancenormfieldfinalcalc',
        'variancenormfinalcalc': 'OneOfJobVariancenormfinalcalc',
        'wellheader': 'AnyOfJobWellheader',
        'wvtyp': 'str'
    }

    attribute_map = {
        'afeamtcalc': 'afeamtcalc',
        'afeamtnormcalc': 'afeamtnormcalc',
        'afecosttypcalc': 'afecosttypcalc',
        'afenumbercalc': 'afenumbercalc',
        'afenumbersuppcalc': 'afenumbersuppcalc',
        'afeperdurmlcalc': 'afeperdurmlcalc',
        'afeperdurmlnormcalc': 'afeperdurmlnormcalc',
        'afepertargetdepthcalc': 'afepertargetdepthcalc',
        'afepertargetdepthnormcalc': 'afepertargetdepthnormcalc',
        'afesupamtcalc': 'afesupamtcalc',
        'afesupamtnormcalc': 'afesupamtnormcalc',
        'afetotalcalc': 'afetotalcalc',
        'afetotalnormcalc': 'afetotalnormcalc',
        'bhadrillruncalc': 'bhadrillruncalc',
        'bhatotalruncalc': 'bhatotalruncalc',
        'bitrevscalc': 'bitrevscalc',
        'chartofaccounts': 'chartofaccounts',
        'client': 'client',
        'complexityindex': 'complexityindex',
        'costafeforecastvarcalc': 'costafeforecastvarcalc',
        'costfinalactual': 'costfinalactual',
        'costforecastcalc': 'costforecastcalc',
        'costforecastfieldvarcalc': 'costforecastfieldvarcalc',
        'costmaxtotalcalc': 'costmaxtotalcalc',
        'costmintotalcalc': 'costmintotalcalc',
        'costmlnoexcludecalc': 'costmlnoexcludecalc',
        'costmltotalcalc': 'costmltotalcalc',
        'costmltotalnoplanchangecalc': 'costmltotalnoplanchangecalc',
        'costnormafeforecastvarcalc': 'costnormafeforecastvarcalc',
        'costnormforecastcalc': 'costnormforecastcalc',
        'costnormforecastfieldvarcalc': 'costnormforecastfieldvarcalc',
        'costnormperdepthcalc': 'costnormperdepthcalc',
        'costnormperdepthplanmlcalc': 'costnormperdepthplanmlcalc',
        'costnormperlateralallcalc': 'costnormperlateralallcalc',
        'costnormperlateralcalc': 'costnormperlateralcalc',
        'costnormtotalcalc': 'costnormtotalcalc',
        'costperdepthcalc': 'costperdepthcalc',
        'costperdepthplanmlcalc': 'costperdepthplanmlcalc',
        'costperlateralallcalc': 'costperlateralallcalc',
        'costperlateralcalc': 'costperlateralcalc',
        'costpertldurcalc': 'costpertldurcalc',
        'costpertldurnormcalc': 'costpertldurnormcalc',
        'costtechlimittotalcalc': 'costtechlimittotalcalc',
        'costtotalcalc': 'costtotalcalc',
        'currencycode': 'currencycode',
        'currencyexchangerate': 'currencyexchangerate',
        'depthdrilledcalc': 'depthdrilledcalc',
        'depthdrilledperbhacalc': 'depthdrilledperbhacalc',
        'depthdrilledperreportnocalc': 'depthdrilledperreportnocalc',
        'depthdrilledspudtorrcalc': 'depthdrilledspudtorrcalc',
        'depthperdurplanmlcalc': 'depthperdurplanmlcalc',
        'depthperratiodurationcalc': 'depthperratiodurationcalc',
        'depthplanmaxcalc': 'depthplanmaxcalc',
        'depthrotatingcalc': 'depthrotatingcalc',
        'depthslidingcalc': 'depthslidingcalc',
        'dttmend': 'dttmend',
        'dttmendplanmaxcalc': 'dttmendplanmaxcalc',
        'dttmendplanmincalc': 'dttmendplanmincalc',
        'dttmendplanmlcalc': 'dttmendplanmlcalc',
        'dttmendplantechlimitcalc': 'dttmendplantechlimitcalc',
        'dttmspud': 'dttmspud',
        'dttmstart': 'dttmstart',
        'dttmstartplan': 'dttmstartplan',
        'dttmtotaldepthcalc': 'dttmtotaldepthcalc',
        'durationmaxtotalcalc': 'durationmaxtotalcalc',
        'durationmintotalcalc': 'durationmintotalcalc',
        'durationmltotalcalc': 'durationmltotalcalc',
        'durationnoproblemtimecalc': 'durationnoproblemtimecalc',
        'durationpersonnelotcalc': 'durationpersonnelotcalc',
        'durationpersonnelregcalc': 'durationpersonnelregcalc',
        'durationpersonneltotcalc': 'durationpersonneltotcalc',
        'durationproblemtimecalc': 'durationproblemtimecalc',
        'durationspudtimelogcalc': 'durationspudtimelogcalc',
        'durationspudtoplanmaxcalc': 'durationspudtoplanmaxcalc',
        'durationspudtoplanmincalc': 'durationspudtoplanmincalc',
        'durationspudtoplanmlcalc': 'durationspudtoplanmlcalc',
        'durationspudtoplantechlimcalc': 'durationspudtoplantechlimcalc',
        'durationspudtorrcalc': 'durationspudtorrcalc',
        'durationspudtotdcalc': 'durationspudtotdcalc',
        'durationtechlimittotalcalc': 'durationtechlimittotalcalc',
        'durationtimelogtotalcalc': 'durationtimelogtotalcalc',
        'durmlnoexcludecalc': 'durmlnoexcludecalc',
        'durmltotalnoplanchangecalc': 'durmltotalnoplanchangecalc',
        'duroffbtmcalc': 'duroffbtmcalc',
        'duronbtmcalc': 'duronbtmcalc',
        'durpipemovingcalc': 'durpipemovingcalc',
        'estcostnormsavecalc': 'estcostnormsavecalc',
        'estcostsavecalc': 'estcostsavecalc',
        'estproblemcostcalc': 'estproblemcostcalc',
        'estproblemcostnormcalc': 'estproblemcostnormcalc',
        'estproblemtimecalc': 'estproblemtimecalc',
        'esttimesavecalc': 'esttimesavecalc',
        'finalinvoicetotalcalc': 'finalinvoicetotalcalc',
        'finalinvoicetotalnormcalc': 'finalinvoicetotalnormcalc',
        'hazardidnorptcalc': 'hazardidnorptcalc',
        'idrec': 'idrec',
        'idreclastrigcalc': 'idreclastrigcalc',
        'idreclastrigcalctk': 'idreclastrigcalctk',
        'idrectub': 'idrectub',
        'idrectubtk': 'idrectubtk',
        'idrecwellbore': 'idrecwellbore',
        'idrecwellborecalc': 'idrecwellborecalc',
        'idrecwellborecalctk': 'idrecwellborecalctk',
        'idrecwellboretk': 'idrecwellboretk',
        'idwell': 'idwell',
        'job_afes': 'jobAfes',
        'job_approvals': 'jobApprovals',
        'job_contacts': 'jobContacts',
        'job_dates': 'jobDates',
        'job_drill_bits': 'jobDrillBits',
        'job_drill_strings': 'jobDrillStrings',
        'job_interval_lessons': 'jobIntervalLessons',
        'job_interval_problems': 'jobIntervalProblems',
        'job_kicks': 'jobKicks',
        'job_lost_circs': 'jobLostCircs',
        'job_material_trans': 'jobMaterialTrans',
        'job_mud_adds': 'jobMudAdds',
        'job_offlines': 'jobOfflines',
        'job_other_circs': 'jobOtherCircs',
        'job_program_drill_params': 'jobProgramDrillParams',
        'job_program_geo_samples': 'jobProgramGeoSamples',
        'job_program_muds': 'jobProgramMuds',
        'job_program_phases': 'jobProgramPhases',
        'job_rental_items': 'jobRentalItems',
        'job_reports': 'jobReports',
        'job_resources': 'jobResources',
        'job_rigs': 'jobRigs',
        'job_safety_chks': 'jobSafetyChks',
        'job_safety_incidents': 'jobSafetyIncidents',
        'job_service_contracts': 'jobServiceContracts',
        'job_supplies': 'jobSupplies',
        'job_support_ves': 'jobSupportVes',
        'job_wellbore_gradients': 'jobWellboreGradients',
        'jobida': 'jobida',
        'jobidb': 'jobidb',
        'jobidc': 'jobidc',
        'jobsubtyp': 'jobsubtyp',
        'jobsupplycostcalc': 'jobsupplycostcalc',
        'jobsupplycostnormcalc': 'jobsupplycostnormcalc',
        'jobtyp': 'jobtyp',
        'mudcostcalc': 'mudcostcalc',
        'mudcostnormcalc': 'mudcostnormcalc',
        'mudcostperdepthcalc': 'mudcostperdepthcalc',
        'mudcostperdepthnormcalc': 'mudcostperdepthnormcalc',
        'muddensitymaxcalc': 'muddensitymaxcalc',
        'muddensitymincalc': 'muddensitymincalc',
        'mudtypcalc': 'mudtypcalc',
        'objective': 'objective',
        'objectivegeo': 'objectivegeo',
        'pctproblemtimecalc': 'pctproblemtimecalc',
        'percentdepthrotatingcalc': 'percentdepthrotatingcalc',
        'percentdepthslidingcalc': 'percentdepthslidingcalc',
        'percenttmrotatingcalc': 'percenttmrotatingcalc',
        'percenttmslidingcalc': 'percenttmslidingcalc',
        'programmuddensitymaxcalc': 'programmuddensitymaxcalc',
        'programmuddensitymincalc': 'programmuddensitymincalc',
        'projectrefnumbercalc': 'projectrefnumbercalc',
        'rateactualcond': 'rateactualcond',
        'rateactualgas': 'rateactualgas',
        'rateactualoil': 'rateactualoil',
        'rateactualwater': 'rateactualwater',
        'ratetargetcond': 'ratetargetcond',
        'ratetargetgas': 'ratetargetgas',
        'ratetargetoil': 'ratetargetoil',
        'ratetargetwater': 'ratetargetwater',
        'ratiodepthactualplancalc': 'ratiodepthactualplancalc',
        'ratiodepthactualtargetcalc': 'ratiodepthactualtargetcalc',
        'ratiodurtimelogrefhourscalc': 'ratiodurtimelogrefhourscalc',
        'reportnocalc': 'reportnocalc',
        'responsiblegrp1': 'responsiblegrp1',
        'responsiblegrp2': 'responsiblegrp2',
        'responsiblegrp3': 'responsiblegrp3',
        'resulttechnical': 'resulttechnical',
        'ropavgfromspudcalc': 'ropavgfromspudcalc',
        'ropcalc': 'ropcalc',
        'roprotatingcalc': 'roprotatingcalc',
        'ropslidingcalc': 'ropslidingcalc',
        'ropspudtimelogcalc': 'ropspudtimelogcalc',
        'roptimelogcalc': 'roptimelogcalc',
        'safetyincnocalc': 'safetyincnocalc',
        'safetyincreportnocalc': 'safetyincreportnocalc',
        'status1': 'status1',
        'status2': 'status2',
        'summary': 'summary',
        'summarygeo': 'summarygeo',
        'syscreatedate': 'syscreatedate',
        'syscreateuser': 'syscreateuser',
        'syslockchildren': 'syslockchildren',
        'syslockchildrenui': 'syslockchildrenui',
        'syslockdate': 'syslockdate',
        'syslockme': 'syslockme',
        'syslockmeui': 'syslockmeui',
        'sysmoddate': 'sysmoddate',
        'sysmoduser': 'sysmoduser',
        'systag': 'systag',
        'targetdepth': 'targetdepth',
        'targetdepthtvdcalc': 'targetdepthtvdcalc',
        'targetform': 'targetform',
        'tdtomudcalc': 'tdtomudcalc',
        'tmcirccalc': 'tmcirccalc',
        'tmdrillcalc': 'tmdrillcalc',
        'tmothercalc': 'tmothercalc',
        'tmrotatingcalc': 'tmrotatingcalc',
        'tmslidingcalc': 'tmslidingcalc',
        'tmtripcalc': 'tmtripcalc',
        'totaldepthcalc': 'totaldepthcalc',
        'totaldepthtvdcalc': 'totaldepthtvdcalc',
        'userboolean1': 'userboolean1',
        'userboolean2': 'userboolean2',
        'usernum1': 'usernum1',
        'usernum2': 'usernum2',
        'usernum3': 'usernum3',
        'usernum4': 'usernum4',
        'usernum5': 'usernum5',
        'usertxt1': 'usertxt1',
        'usertxt2': 'usertxt2',
        'usertxt3': 'usertxt3',
        'usertxt4': 'usertxt4',
        'usertxt5': 'usertxt5',
        'varianceafefinalcalc': 'varianceafefinalcalc',
        'variancefieldcalc': 'variancefieldcalc',
        'variancefieldfinalcalc': 'variancefieldfinalcalc',
        'variancefinalcalc': 'variancefinalcalc',
        'variancenormafefinalcalc': 'variancenormafefinalcalc',
        'variancenormfieldcalc': 'variancenormfieldcalc',
        'variancenormfieldfinalcalc': 'variancenormfieldfinalcalc',
        'variancenormfinalcalc': 'variancenormfinalcalc',
        'wellheader': 'wellheader',
        'wvtyp': 'wvtyp'
    }

    def __init__(self, afeamtcalc=None, afeamtnormcalc=None, afecosttypcalc=None, afenumbercalc=None, afenumbersuppcalc=None, afeperdurmlcalc=None, afeperdurmlnormcalc=None, afepertargetdepthcalc=None, afepertargetdepthnormcalc=None, afesupamtcalc=None, afesupamtnormcalc=None, afetotalcalc=None, afetotalnormcalc=None, bhadrillruncalc=None, bhatotalruncalc=None, bitrevscalc=None, chartofaccounts=None, client=None, complexityindex=None, costafeforecastvarcalc=None, costfinalactual=None, costforecastcalc=None, costforecastfieldvarcalc=None, costmaxtotalcalc=None, costmintotalcalc=None, costmlnoexcludecalc=None, costmltotalcalc=None, costmltotalnoplanchangecalc=None, costnormafeforecastvarcalc=None, costnormforecastcalc=None, costnormforecastfieldvarcalc=None, costnormperdepthcalc=None, costnormperdepthplanmlcalc=None, costnormperlateralallcalc=None, costnormperlateralcalc=None, costnormtotalcalc=None, costperdepthcalc=None, costperdepthplanmlcalc=None, costperlateralallcalc=None, costperlateralcalc=None, costpertldurcalc=None, costpertldurnormcalc=None, costtechlimittotalcalc=None, costtotalcalc=None, currencycode=None, currencyexchangerate=None, depthdrilledcalc=None, depthdrilledperbhacalc=None, depthdrilledperreportnocalc=None, depthdrilledspudtorrcalc=None, depthperdurplanmlcalc=None, depthperratiodurationcalc=None, depthplanmaxcalc=None, depthrotatingcalc=None, depthslidingcalc=None, dttmend=None, dttmendplanmaxcalc=None, dttmendplanmincalc=None, dttmendplanmlcalc=None, dttmendplantechlimitcalc=None, dttmspud=None, dttmstart=None, dttmstartplan=None, dttmtotaldepthcalc=None, durationmaxtotalcalc=None, durationmintotalcalc=None, durationmltotalcalc=None, durationnoproblemtimecalc=None, durationpersonnelotcalc=None, durationpersonnelregcalc=None, durationpersonneltotcalc=None, durationproblemtimecalc=None, durationspudtimelogcalc=None, durationspudtoplanmaxcalc=None, durationspudtoplanmincalc=None, durationspudtoplanmlcalc=None, durationspudtoplantechlimcalc=None, durationspudtorrcalc=None, durationspudtotdcalc=None, durationtechlimittotalcalc=None, durationtimelogtotalcalc=None, durmlnoexcludecalc=None, durmltotalnoplanchangecalc=None, duroffbtmcalc=None, duronbtmcalc=None, durpipemovingcalc=None, estcostnormsavecalc=None, estcostsavecalc=None, estproblemcostcalc=None, estproblemcostnormcalc=None, estproblemtimecalc=None, esttimesavecalc=None, finalinvoicetotalcalc=None, finalinvoicetotalnormcalc=None, hazardidnorptcalc=None, idrec=None, idreclastrigcalc=None, idreclastrigcalctk=None, idrectub=None, idrectubtk=None, idrecwellbore=None, idrecwellborecalc=None, idrecwellborecalctk=None, idrecwellboretk=None, idwell=None, job_afes=None, job_approvals=None, job_contacts=None, job_dates=None, job_drill_bits=None, job_drill_strings=None, job_interval_lessons=None, job_interval_problems=None, job_kicks=None, job_lost_circs=None, job_material_trans=None, job_mud_adds=None, job_offlines=None, job_other_circs=None, job_program_drill_params=None, job_program_geo_samples=None, job_program_muds=None, job_program_phases=None, job_rental_items=None, job_reports=None, job_resources=None, job_rigs=None, job_safety_chks=None, job_safety_incidents=None, job_service_contracts=None, job_supplies=None, job_support_ves=None, job_wellbore_gradients=None, jobida=None, jobidb=None, jobidc=None, jobsubtyp=None, jobsupplycostcalc=None, jobsupplycostnormcalc=None, jobtyp=None, mudcostcalc=None, mudcostnormcalc=None, mudcostperdepthcalc=None, mudcostperdepthnormcalc=None, muddensitymaxcalc=None, muddensitymincalc=None, mudtypcalc=None, objective=None, objectivegeo=None, pctproblemtimecalc=None, percentdepthrotatingcalc=None, percentdepthslidingcalc=None, percenttmrotatingcalc=None, percenttmslidingcalc=None, programmuddensitymaxcalc=None, programmuddensitymincalc=None, projectrefnumbercalc=None, rateactualcond=None, rateactualgas=None, rateactualoil=None, rateactualwater=None, ratetargetcond=None, ratetargetgas=None, ratetargetoil=None, ratetargetwater=None, ratiodepthactualplancalc=None, ratiodepthactualtargetcalc=None, ratiodurtimelogrefhourscalc=None, reportnocalc=None, responsiblegrp1=None, responsiblegrp2=None, responsiblegrp3=None, resulttechnical=None, ropavgfromspudcalc=None, ropcalc=None, roprotatingcalc=None, ropslidingcalc=None, ropspudtimelogcalc=None, roptimelogcalc=None, safetyincnocalc=None, safetyincreportnocalc=None, status1=None, status2=None, summary=None, summarygeo=None, syscreatedate=None, syscreateuser=None, syslockchildren=None, syslockchildrenui=None, syslockdate=None, syslockme=None, syslockmeui=None, sysmoddate=None, sysmoduser=None, systag=None, targetdepth=None, targetdepthtvdcalc=None, targetform=None, tdtomudcalc=None, tmcirccalc=None, tmdrillcalc=None, tmothercalc=None, tmrotatingcalc=None, tmslidingcalc=None, tmtripcalc=None, totaldepthcalc=None, totaldepthtvdcalc=None, userboolean1=None, userboolean2=None, usernum1=None, usernum2=None, usernum3=None, usernum4=None, usernum5=None, usertxt1=None, usertxt2=None, usertxt3=None, usertxt4=None, usertxt5=None, varianceafefinalcalc=None, variancefieldcalc=None, variancefieldfinalcalc=None, variancefinalcalc=None, variancenormafefinalcalc=None, variancenormfieldcalc=None, variancenormfieldfinalcalc=None, variancenormfinalcalc=None, wellheader=None, wvtyp=None):  # noqa: E501
        """Job - a model defined in Swagger"""  # noqa: E501
        self._afeamtcalc = None
        self._afeamtnormcalc = None
        self._afecosttypcalc = None
        self._afenumbercalc = None
        self._afenumbersuppcalc = None
        self._afeperdurmlcalc = None
        self._afeperdurmlnormcalc = None
        self._afepertargetdepthcalc = None
        self._afepertargetdepthnormcalc = None
        self._afesupamtcalc = None
        self._afesupamtnormcalc = None
        self._afetotalcalc = None
        self._afetotalnormcalc = None
        self._bhadrillruncalc = None
        self._bhatotalruncalc = None
        self._bitrevscalc = None
        self._chartofaccounts = None
        self._client = None
        self._complexityindex = None
        self._costafeforecastvarcalc = None
        self._costfinalactual = None
        self._costforecastcalc = None
        self._costforecastfieldvarcalc = None
        self._costmaxtotalcalc = None
        self._costmintotalcalc = None
        self._costmlnoexcludecalc = None
        self._costmltotalcalc = None
        self._costmltotalnoplanchangecalc = None
        self._costnormafeforecastvarcalc = None
        self._costnormforecastcalc = None
        self._costnormforecastfieldvarcalc = None
        self._costnormperdepthcalc = None
        self._costnormperdepthplanmlcalc = None
        self._costnormperlateralallcalc = None
        self._costnormperlateralcalc = None
        self._costnormtotalcalc = None
        self._costperdepthcalc = None
        self._costperdepthplanmlcalc = None
        self._costperlateralallcalc = None
        self._costperlateralcalc = None
        self._costpertldurcalc = None
        self._costpertldurnormcalc = None
        self._costtechlimittotalcalc = None
        self._costtotalcalc = None
        self._currencycode = None
        self._currencyexchangerate = None
        self._depthdrilledcalc = None
        self._depthdrilledperbhacalc = None
        self._depthdrilledperreportnocalc = None
        self._depthdrilledspudtorrcalc = None
        self._depthperdurplanmlcalc = None
        self._depthperratiodurationcalc = None
        self._depthplanmaxcalc = None
        self._depthrotatingcalc = None
        self._depthslidingcalc = None
        self._dttmend = None
        self._dttmendplanmaxcalc = None
        self._dttmendplanmincalc = None
        self._dttmendplanmlcalc = None
        self._dttmendplantechlimitcalc = None
        self._dttmspud = None
        self._dttmstart = None
        self._dttmstartplan = None
        self._dttmtotaldepthcalc = None
        self._durationmaxtotalcalc = None
        self._durationmintotalcalc = None
        self._durationmltotalcalc = None
        self._durationnoproblemtimecalc = None
        self._durationpersonnelotcalc = None
        self._durationpersonnelregcalc = None
        self._durationpersonneltotcalc = None
        self._durationproblemtimecalc = None
        self._durationspudtimelogcalc = None
        self._durationspudtoplanmaxcalc = None
        self._durationspudtoplanmincalc = None
        self._durationspudtoplanmlcalc = None
        self._durationspudtoplantechlimcalc = None
        self._durationspudtorrcalc = None
        self._durationspudtotdcalc = None
        self._durationtechlimittotalcalc = None
        self._durationtimelogtotalcalc = None
        self._durmlnoexcludecalc = None
        self._durmltotalnoplanchangecalc = None
        self._duroffbtmcalc = None
        self._duronbtmcalc = None
        self._durpipemovingcalc = None
        self._estcostnormsavecalc = None
        self._estcostsavecalc = None
        self._estproblemcostcalc = None
        self._estproblemcostnormcalc = None
        self._estproblemtimecalc = None
        self._esttimesavecalc = None
        self._finalinvoicetotalcalc = None
        self._finalinvoicetotalnormcalc = None
        self._hazardidnorptcalc = None
        self._idrec = None
        self._idreclastrigcalc = None
        self._idreclastrigcalctk = None
        self._idrectub = None
        self._idrectubtk = None
        self._idrecwellbore = None
        self._idrecwellborecalc = None
        self._idrecwellborecalctk = None
        self._idrecwellboretk = None
        self._idwell = None
        self._job_afes = None
        self._job_approvals = None
        self._job_contacts = None
        self._job_dates = None
        self._job_drill_bits = None
        self._job_drill_strings = None
        self._job_interval_lessons = None
        self._job_interval_problems = None
        self._job_kicks = None
        self._job_lost_circs = None
        self._job_material_trans = None
        self._job_mud_adds = None
        self._job_offlines = None
        self._job_other_circs = None
        self._job_program_drill_params = None
        self._job_program_geo_samples = None
        self._job_program_muds = None
        self._job_program_phases = None
        self._job_rental_items = None
        self._job_reports = None
        self._job_resources = None
        self._job_rigs = None
        self._job_safety_chks = None
        self._job_safety_incidents = None
        self._job_service_contracts = None
        self._job_supplies = None
        self._job_support_ves = None
        self._job_wellbore_gradients = None
        self._jobida = None
        self._jobidb = None
        self._jobidc = None
        self._jobsubtyp = None
        self._jobsupplycostcalc = None
        self._jobsupplycostnormcalc = None
        self._jobtyp = None
        self._mudcostcalc = None
        self._mudcostnormcalc = None
        self._mudcostperdepthcalc = None
        self._mudcostperdepthnormcalc = None
        self._muddensitymaxcalc = None
        self._muddensitymincalc = None
        self._mudtypcalc = None
        self._objective = None
        self._objectivegeo = None
        self._pctproblemtimecalc = None
        self._percentdepthrotatingcalc = None
        self._percentdepthslidingcalc = None
        self._percenttmrotatingcalc = None
        self._percenttmslidingcalc = None
        self._programmuddensitymaxcalc = None
        self._programmuddensitymincalc = None
        self._projectrefnumbercalc = None
        self._rateactualcond = None
        self._rateactualgas = None
        self._rateactualoil = None
        self._rateactualwater = None
        self._ratetargetcond = None
        self._ratetargetgas = None
        self._ratetargetoil = None
        self._ratetargetwater = None
        self._ratiodepthactualplancalc = None
        self._ratiodepthactualtargetcalc = None
        self._ratiodurtimelogrefhourscalc = None
        self._reportnocalc = None
        self._responsiblegrp1 = None
        self._responsiblegrp2 = None
        self._responsiblegrp3 = None
        self._resulttechnical = None
        self._ropavgfromspudcalc = None
        self._ropcalc = None
        self._roprotatingcalc = None
        self._ropslidingcalc = None
        self._ropspudtimelogcalc = None
        self._roptimelogcalc = None
        self._safetyincnocalc = None
        self._safetyincreportnocalc = None
        self._status1 = None
        self._status2 = None
        self._summary = None
        self._summarygeo = None
        self._syscreatedate = None
        self._syscreateuser = None
        self._syslockchildren = None
        self._syslockchildrenui = None
        self._syslockdate = None
        self._syslockme = None
        self._syslockmeui = None
        self._sysmoddate = None
        self._sysmoduser = None
        self._systag = None
        self._targetdepth = None
        self._targetdepthtvdcalc = None
        self._targetform = None
        self._tdtomudcalc = None
        self._tmcirccalc = None
        self._tmdrillcalc = None
        self._tmothercalc = None
        self._tmrotatingcalc = None
        self._tmslidingcalc = None
        self._tmtripcalc = None
        self._totaldepthcalc = None
        self._totaldepthtvdcalc = None
        self._userboolean1 = None
        self._userboolean2 = None
        self._usernum1 = None
        self._usernum2 = None
        self._usernum3 = None
        self._usernum4 = None
        self._usernum5 = None
        self._usertxt1 = None
        self._usertxt2 = None
        self._usertxt3 = None
        self._usertxt4 = None
        self._usertxt5 = None
        self._varianceafefinalcalc = None
        self._variancefieldcalc = None
        self._variancefieldfinalcalc = None
        self._variancefinalcalc = None
        self._variancenormafefinalcalc = None
        self._variancenormfieldcalc = None
        self._variancenormfieldfinalcalc = None
        self._variancenormfinalcalc = None
        self._wellheader = None
        self._wvtyp = None
        self.discriminator = None
        if afeamtcalc is not None:
            self.afeamtcalc = afeamtcalc
        if afeamtnormcalc is not None:
            self.afeamtnormcalc = afeamtnormcalc
        if afecosttypcalc is not None:
            self.afecosttypcalc = afecosttypcalc
        if afenumbercalc is not None:
            self.afenumbercalc = afenumbercalc
        if afenumbersuppcalc is not None:
            self.afenumbersuppcalc = afenumbersuppcalc
        if afeperdurmlcalc is not None:
            self.afeperdurmlcalc = afeperdurmlcalc
        if afeperdurmlnormcalc is not None:
            self.afeperdurmlnormcalc = afeperdurmlnormcalc
        if afepertargetdepthcalc is not None:
            self.afepertargetdepthcalc = afepertargetdepthcalc
        if afepertargetdepthnormcalc is not None:
            self.afepertargetdepthnormcalc = afepertargetdepthnormcalc
        if afesupamtcalc is not None:
            self.afesupamtcalc = afesupamtcalc
        if afesupamtnormcalc is not None:
            self.afesupamtnormcalc = afesupamtnormcalc
        if afetotalcalc is not None:
            self.afetotalcalc = afetotalcalc
        if afetotalnormcalc is not None:
            self.afetotalnormcalc = afetotalnormcalc
        if bhadrillruncalc is not None:
            self.bhadrillruncalc = bhadrillruncalc
        if bhatotalruncalc is not None:
            self.bhatotalruncalc = bhatotalruncalc
        if bitrevscalc is not None:
            self.bitrevscalc = bitrevscalc
        if chartofaccounts is not None:
            self.chartofaccounts = chartofaccounts
        if client is not None:
            self.client = client
        if complexityindex is not None:
            self.complexityindex = complexityindex
        if costafeforecastvarcalc is not None:
            self.costafeforecastvarcalc = costafeforecastvarcalc
        if costfinalactual is not None:
            self.costfinalactual = costfinalactual
        if costforecastcalc is not None:
            self.costforecastcalc = costforecastcalc
        if costforecastfieldvarcalc is not None:
            self.costforecastfieldvarcalc = costforecastfieldvarcalc
        if costmaxtotalcalc is not None:
            self.costmaxtotalcalc = costmaxtotalcalc
        if costmintotalcalc is not None:
            self.costmintotalcalc = costmintotalcalc
        if costmlnoexcludecalc is not None:
            self.costmlnoexcludecalc = costmlnoexcludecalc
        if costmltotalcalc is not None:
            self.costmltotalcalc = costmltotalcalc
        if costmltotalnoplanchangecalc is not None:
            self.costmltotalnoplanchangecalc = costmltotalnoplanchangecalc
        if costnormafeforecastvarcalc is not None:
            self.costnormafeforecastvarcalc = costnormafeforecastvarcalc
        if costnormforecastcalc is not None:
            self.costnormforecastcalc = costnormforecastcalc
        if costnormforecastfieldvarcalc is not None:
            self.costnormforecastfieldvarcalc = costnormforecastfieldvarcalc
        if costnormperdepthcalc is not None:
            self.costnormperdepthcalc = costnormperdepthcalc
        if costnormperdepthplanmlcalc is not None:
            self.costnormperdepthplanmlcalc = costnormperdepthplanmlcalc
        if costnormperlateralallcalc is not None:
            self.costnormperlateralallcalc = costnormperlateralallcalc
        if costnormperlateralcalc is not None:
            self.costnormperlateralcalc = costnormperlateralcalc
        if costnormtotalcalc is not None:
            self.costnormtotalcalc = costnormtotalcalc
        if costperdepthcalc is not None:
            self.costperdepthcalc = costperdepthcalc
        if costperdepthplanmlcalc is not None:
            self.costperdepthplanmlcalc = costperdepthplanmlcalc
        if costperlateralallcalc is not None:
            self.costperlateralallcalc = costperlateralallcalc
        if costperlateralcalc is not None:
            self.costperlateralcalc = costperlateralcalc
        if costpertldurcalc is not None:
            self.costpertldurcalc = costpertldurcalc
        if costpertldurnormcalc is not None:
            self.costpertldurnormcalc = costpertldurnormcalc
        if costtechlimittotalcalc is not None:
            self.costtechlimittotalcalc = costtechlimittotalcalc
        if costtotalcalc is not None:
            self.costtotalcalc = costtotalcalc
        if currencycode is not None:
            self.currencycode = currencycode
        if currencyexchangerate is not None:
            self.currencyexchangerate = currencyexchangerate
        if depthdrilledcalc is not None:
            self.depthdrilledcalc = depthdrilledcalc
        if depthdrilledperbhacalc is not None:
            self.depthdrilledperbhacalc = depthdrilledperbhacalc
        if depthdrilledperreportnocalc is not None:
            self.depthdrilledperreportnocalc = depthdrilledperreportnocalc
        if depthdrilledspudtorrcalc is not None:
            self.depthdrilledspudtorrcalc = depthdrilledspudtorrcalc
        if depthperdurplanmlcalc is not None:
            self.depthperdurplanmlcalc = depthperdurplanmlcalc
        if depthperratiodurationcalc is not None:
            self.depthperratiodurationcalc = depthperratiodurationcalc
        if depthplanmaxcalc is not None:
            self.depthplanmaxcalc = depthplanmaxcalc
        if depthrotatingcalc is not None:
            self.depthrotatingcalc = depthrotatingcalc
        if depthslidingcalc is not None:
            self.depthslidingcalc = depthslidingcalc
        if dttmend is not None:
            self.dttmend = dttmend
        if dttmendplanmaxcalc is not None:
            self.dttmendplanmaxcalc = dttmendplanmaxcalc
        if dttmendplanmincalc is not None:
            self.dttmendplanmincalc = dttmendplanmincalc
        if dttmendplanmlcalc is not None:
            self.dttmendplanmlcalc = dttmendplanmlcalc
        if dttmendplantechlimitcalc is not None:
            self.dttmendplantechlimitcalc = dttmendplantechlimitcalc
        if dttmspud is not None:
            self.dttmspud = dttmspud
        if dttmstart is not None:
            self.dttmstart = dttmstart
        if dttmstartplan is not None:
            self.dttmstartplan = dttmstartplan
        if dttmtotaldepthcalc is not None:
            self.dttmtotaldepthcalc = dttmtotaldepthcalc
        if durationmaxtotalcalc is not None:
            self.durationmaxtotalcalc = durationmaxtotalcalc
        if durationmintotalcalc is not None:
            self.durationmintotalcalc = durationmintotalcalc
        if durationmltotalcalc is not None:
            self.durationmltotalcalc = durationmltotalcalc
        if durationnoproblemtimecalc is not None:
            self.durationnoproblemtimecalc = durationnoproblemtimecalc
        if durationpersonnelotcalc is not None:
            self.durationpersonnelotcalc = durationpersonnelotcalc
        if durationpersonnelregcalc is not None:
            self.durationpersonnelregcalc = durationpersonnelregcalc
        if durationpersonneltotcalc is not None:
            self.durationpersonneltotcalc = durationpersonneltotcalc
        if durationproblemtimecalc is not None:
            self.durationproblemtimecalc = durationproblemtimecalc
        if durationspudtimelogcalc is not None:
            self.durationspudtimelogcalc = durationspudtimelogcalc
        if durationspudtoplanmaxcalc is not None:
            self.durationspudtoplanmaxcalc = durationspudtoplanmaxcalc
        if durationspudtoplanmincalc is not None:
            self.durationspudtoplanmincalc = durationspudtoplanmincalc
        if durationspudtoplanmlcalc is not None:
            self.durationspudtoplanmlcalc = durationspudtoplanmlcalc
        if durationspudtoplantechlimcalc is not None:
            self.durationspudtoplantechlimcalc = durationspudtoplantechlimcalc
        if durationspudtorrcalc is not None:
            self.durationspudtorrcalc = durationspudtorrcalc
        if durationspudtotdcalc is not None:
            self.durationspudtotdcalc = durationspudtotdcalc
        if durationtechlimittotalcalc is not None:
            self.durationtechlimittotalcalc = durationtechlimittotalcalc
        if durationtimelogtotalcalc is not None:
            self.durationtimelogtotalcalc = durationtimelogtotalcalc
        if durmlnoexcludecalc is not None:
            self.durmlnoexcludecalc = durmlnoexcludecalc
        if durmltotalnoplanchangecalc is not None:
            self.durmltotalnoplanchangecalc = durmltotalnoplanchangecalc
        if duroffbtmcalc is not None:
            self.duroffbtmcalc = duroffbtmcalc
        if duronbtmcalc is not None:
            self.duronbtmcalc = duronbtmcalc
        if durpipemovingcalc is not None:
            self.durpipemovingcalc = durpipemovingcalc
        if estcostnormsavecalc is not None:
            self.estcostnormsavecalc = estcostnormsavecalc
        if estcostsavecalc is not None:
            self.estcostsavecalc = estcostsavecalc
        if estproblemcostcalc is not None:
            self.estproblemcostcalc = estproblemcostcalc
        if estproblemcostnormcalc is not None:
            self.estproblemcostnormcalc = estproblemcostnormcalc
        if estproblemtimecalc is not None:
            self.estproblemtimecalc = estproblemtimecalc
        if esttimesavecalc is not None:
            self.esttimesavecalc = esttimesavecalc
        if finalinvoicetotalcalc is not None:
            self.finalinvoicetotalcalc = finalinvoicetotalcalc
        if finalinvoicetotalnormcalc is not None:
            self.finalinvoicetotalnormcalc = finalinvoicetotalnormcalc
        if hazardidnorptcalc is not None:
            self.hazardidnorptcalc = hazardidnorptcalc
        if idrec is not None:
            self.idrec = idrec
        if idreclastrigcalc is not None:
            self.idreclastrigcalc = idreclastrigcalc
        if idreclastrigcalctk is not None:
            self.idreclastrigcalctk = idreclastrigcalctk
        if idrectub is not None:
            self.idrectub = idrectub
        if idrectubtk is not None:
            self.idrectubtk = idrectubtk
        if idrecwellbore is not None:
            self.idrecwellbore = idrecwellbore
        if idrecwellborecalc is not None:
            self.idrecwellborecalc = idrecwellborecalc
        if idrecwellborecalctk is not None:
            self.idrecwellborecalctk = idrecwellborecalctk
        if idrecwellboretk is not None:
            self.idrecwellboretk = idrecwellboretk
        if idwell is not None:
            self.idwell = idwell
        if job_afes is not None:
            self.job_afes = job_afes
        if job_approvals is not None:
            self.job_approvals = job_approvals
        if job_contacts is not None:
            self.job_contacts = job_contacts
        if job_dates is not None:
            self.job_dates = job_dates
        if job_drill_bits is not None:
            self.job_drill_bits = job_drill_bits
        if job_drill_strings is not None:
            self.job_drill_strings = job_drill_strings
        if job_interval_lessons is not None:
            self.job_interval_lessons = job_interval_lessons
        if job_interval_problems is not None:
            self.job_interval_problems = job_interval_problems
        if job_kicks is not None:
            self.job_kicks = job_kicks
        if job_lost_circs is not None:
            self.job_lost_circs = job_lost_circs
        if job_material_trans is not None:
            self.job_material_trans = job_material_trans
        if job_mud_adds is not None:
            self.job_mud_adds = job_mud_adds
        if job_offlines is not None:
            self.job_offlines = job_offlines
        if job_other_circs is not None:
            self.job_other_circs = job_other_circs
        if job_program_drill_params is not None:
            self.job_program_drill_params = job_program_drill_params
        if job_program_geo_samples is not None:
            self.job_program_geo_samples = job_program_geo_samples
        if job_program_muds is not None:
            self.job_program_muds = job_program_muds
        if job_program_phases is not None:
            self.job_program_phases = job_program_phases
        if job_rental_items is not None:
            self.job_rental_items = job_rental_items
        if job_reports is not None:
            self.job_reports = job_reports
        if job_resources is not None:
            self.job_resources = job_resources
        if job_rigs is not None:
            self.job_rigs = job_rigs
        if job_safety_chks is not None:
            self.job_safety_chks = job_safety_chks
        if job_safety_incidents is not None:
            self.job_safety_incidents = job_safety_incidents
        if job_service_contracts is not None:
            self.job_service_contracts = job_service_contracts
        if job_supplies is not None:
            self.job_supplies = job_supplies
        if job_support_ves is not None:
            self.job_support_ves = job_support_ves
        if job_wellbore_gradients is not None:
            self.job_wellbore_gradients = job_wellbore_gradients
        if jobida is not None:
            self.jobida = jobida
        if jobidb is not None:
            self.jobidb = jobidb
        if jobidc is not None:
            self.jobidc = jobidc
        if jobsubtyp is not None:
            self.jobsubtyp = jobsubtyp
        if jobsupplycostcalc is not None:
            self.jobsupplycostcalc = jobsupplycostcalc
        if jobsupplycostnormcalc is not None:
            self.jobsupplycostnormcalc = jobsupplycostnormcalc
        if jobtyp is not None:
            self.jobtyp = jobtyp
        if mudcostcalc is not None:
            self.mudcostcalc = mudcostcalc
        if mudcostnormcalc is not None:
            self.mudcostnormcalc = mudcostnormcalc
        if mudcostperdepthcalc is not None:
            self.mudcostperdepthcalc = mudcostperdepthcalc
        if mudcostperdepthnormcalc is not None:
            self.mudcostperdepthnormcalc = mudcostperdepthnormcalc
        if muddensitymaxcalc is not None:
            self.muddensitymaxcalc = muddensitymaxcalc
        if muddensitymincalc is not None:
            self.muddensitymincalc = muddensitymincalc
        if mudtypcalc is not None:
            self.mudtypcalc = mudtypcalc
        if objective is not None:
            self.objective = objective
        if objectivegeo is not None:
            self.objectivegeo = objectivegeo
        if pctproblemtimecalc is not None:
            self.pctproblemtimecalc = pctproblemtimecalc
        if percentdepthrotatingcalc is not None:
            self.percentdepthrotatingcalc = percentdepthrotatingcalc
        if percentdepthslidingcalc is not None:
            self.percentdepthslidingcalc = percentdepthslidingcalc
        if percenttmrotatingcalc is not None:
            self.percenttmrotatingcalc = percenttmrotatingcalc
        if percenttmslidingcalc is not None:
            self.percenttmslidingcalc = percenttmslidingcalc
        if programmuddensitymaxcalc is not None:
            self.programmuddensitymaxcalc = programmuddensitymaxcalc
        if programmuddensitymincalc is not None:
            self.programmuddensitymincalc = programmuddensitymincalc
        if projectrefnumbercalc is not None:
            self.projectrefnumbercalc = projectrefnumbercalc
        if rateactualcond is not None:
            self.rateactualcond = rateactualcond
        if rateactualgas is not None:
            self.rateactualgas = rateactualgas
        if rateactualoil is not None:
            self.rateactualoil = rateactualoil
        if rateactualwater is not None:
            self.rateactualwater = rateactualwater
        if ratetargetcond is not None:
            self.ratetargetcond = ratetargetcond
        if ratetargetgas is not None:
            self.ratetargetgas = ratetargetgas
        if ratetargetoil is not None:
            self.ratetargetoil = ratetargetoil
        if ratetargetwater is not None:
            self.ratetargetwater = ratetargetwater
        if ratiodepthactualplancalc is not None:
            self.ratiodepthactualplancalc = ratiodepthactualplancalc
        if ratiodepthactualtargetcalc is not None:
            self.ratiodepthactualtargetcalc = ratiodepthactualtargetcalc
        if ratiodurtimelogrefhourscalc is not None:
            self.ratiodurtimelogrefhourscalc = ratiodurtimelogrefhourscalc
        if reportnocalc is not None:
            self.reportnocalc = reportnocalc
        if responsiblegrp1 is not None:
            self.responsiblegrp1 = responsiblegrp1
        if responsiblegrp2 is not None:
            self.responsiblegrp2 = responsiblegrp2
        if responsiblegrp3 is not None:
            self.responsiblegrp3 = responsiblegrp3
        if resulttechnical is not None:
            self.resulttechnical = resulttechnical
        if ropavgfromspudcalc is not None:
            self.ropavgfromspudcalc = ropavgfromspudcalc
        if ropcalc is not None:
            self.ropcalc = ropcalc
        if roprotatingcalc is not None:
            self.roprotatingcalc = roprotatingcalc
        if ropslidingcalc is not None:
            self.ropslidingcalc = ropslidingcalc
        if ropspudtimelogcalc is not None:
            self.ropspudtimelogcalc = ropspudtimelogcalc
        if roptimelogcalc is not None:
            self.roptimelogcalc = roptimelogcalc
        if safetyincnocalc is not None:
            self.safetyincnocalc = safetyincnocalc
        if safetyincreportnocalc is not None:
            self.safetyincreportnocalc = safetyincreportnocalc
        if status1 is not None:
            self.status1 = status1
        if status2 is not None:
            self.status2 = status2
        if summary is not None:
            self.summary = summary
        if summarygeo is not None:
            self.summarygeo = summarygeo
        if syscreatedate is not None:
            self.syscreatedate = syscreatedate
        if syscreateuser is not None:
            self.syscreateuser = syscreateuser
        if syslockchildren is not None:
            self.syslockchildren = syslockchildren
        if syslockchildrenui is not None:
            self.syslockchildrenui = syslockchildrenui
        if syslockdate is not None:
            self.syslockdate = syslockdate
        if syslockme is not None:
            self.syslockme = syslockme
        if syslockmeui is not None:
            self.syslockmeui = syslockmeui
        if sysmoddate is not None:
            self.sysmoddate = sysmoddate
        if sysmoduser is not None:
            self.sysmoduser = sysmoduser
        if systag is not None:
            self.systag = systag
        if targetdepth is not None:
            self.targetdepth = targetdepth
        if targetdepthtvdcalc is not None:
            self.targetdepthtvdcalc = targetdepthtvdcalc
        if targetform is not None:
            self.targetform = targetform
        if tdtomudcalc is not None:
            self.tdtomudcalc = tdtomudcalc
        if tmcirccalc is not None:
            self.tmcirccalc = tmcirccalc
        if tmdrillcalc is not None:
            self.tmdrillcalc = tmdrillcalc
        if tmothercalc is not None:
            self.tmothercalc = tmothercalc
        if tmrotatingcalc is not None:
            self.tmrotatingcalc = tmrotatingcalc
        if tmslidingcalc is not None:
            self.tmslidingcalc = tmslidingcalc
        if tmtripcalc is not None:
            self.tmtripcalc = tmtripcalc
        if totaldepthcalc is not None:
            self.totaldepthcalc = totaldepthcalc
        if totaldepthtvdcalc is not None:
            self.totaldepthtvdcalc = totaldepthtvdcalc
        if userboolean1 is not None:
            self.userboolean1 = userboolean1
        if userboolean2 is not None:
            self.userboolean2 = userboolean2
        if usernum1 is not None:
            self.usernum1 = usernum1
        if usernum2 is not None:
            self.usernum2 = usernum2
        if usernum3 is not None:
            self.usernum3 = usernum3
        if usernum4 is not None:
            self.usernum4 = usernum4
        if usernum5 is not None:
            self.usernum5 = usernum5
        if usertxt1 is not None:
            self.usertxt1 = usertxt1
        if usertxt2 is not None:
            self.usertxt2 = usertxt2
        if usertxt3 is not None:
            self.usertxt3 = usertxt3
        if usertxt4 is not None:
            self.usertxt4 = usertxt4
        if usertxt5 is not None:
            self.usertxt5 = usertxt5
        if varianceafefinalcalc is not None:
            self.varianceafefinalcalc = varianceafefinalcalc
        if variancefieldcalc is not None:
            self.variancefieldcalc = variancefieldcalc
        if variancefieldfinalcalc is not None:
            self.variancefieldfinalcalc = variancefieldfinalcalc
        if variancefinalcalc is not None:
            self.variancefinalcalc = variancefinalcalc
        if variancenormafefinalcalc is not None:
            self.variancenormafefinalcalc = variancenormafefinalcalc
        if variancenormfieldcalc is not None:
            self.variancenormfieldcalc = variancenormfieldcalc
        if variancenormfieldfinalcalc is not None:
            self.variancenormfieldfinalcalc = variancenormfieldfinalcalc
        if variancenormfinalcalc is not None:
            self.variancenormfinalcalc = variancenormfinalcalc
        if wellheader is not None:
            self.wellheader = wellheader
        if wvtyp is not None:
            self.wvtyp = wvtyp

    @property
    def afeamtcalc(self):
        """Gets the afeamtcalc of this Job.  # noqa: E501


        :return: The afeamtcalc of this Job.  # noqa: E501
        :rtype: OneOfJobAfeamtcalc
        """
        return self._afeamtcalc

    @afeamtcalc.setter
    def afeamtcalc(self, afeamtcalc):
        """Sets the afeamtcalc of this Job.


        :param afeamtcalc: The afeamtcalc of this Job.  # noqa: E501
        :type: OneOfJobAfeamtcalc
        """

        self._afeamtcalc = afeamtcalc

    @property
    def afeamtnormcalc(self):
        """Gets the afeamtnormcalc of this Job.  # noqa: E501


        :return: The afeamtnormcalc of this Job.  # noqa: E501
        :rtype: OneOfJobAfeamtnormcalc
        """
        return self._afeamtnormcalc

    @afeamtnormcalc.setter
    def afeamtnormcalc(self, afeamtnormcalc):
        """Sets the afeamtnormcalc of this Job.


        :param afeamtnormcalc: The afeamtnormcalc of this Job.  # noqa: E501
        :type: OneOfJobAfeamtnormcalc
        """

        self._afeamtnormcalc = afeamtnormcalc

    @property
    def afecosttypcalc(self):
        """Gets the afecosttypcalc of this Job.  # noqa: E501


        :return: The afecosttypcalc of this Job.  # noqa: E501
        :rtype: str
        """
        return self._afecosttypcalc

    @afecosttypcalc.setter
    def afecosttypcalc(self, afecosttypcalc):
        """Sets the afecosttypcalc of this Job.


        :param afecosttypcalc: The afecosttypcalc of this Job.  # noqa: E501
        :type: str
        """

        self._afecosttypcalc = afecosttypcalc

    @property
    def afenumbercalc(self):
        """Gets the afenumbercalc of this Job.  # noqa: E501


        :return: The afenumbercalc of this Job.  # noqa: E501
        :rtype: str
        """
        return self._afenumbercalc

    @afenumbercalc.setter
    def afenumbercalc(self, afenumbercalc):
        """Sets the afenumbercalc of this Job.


        :param afenumbercalc: The afenumbercalc of this Job.  # noqa: E501
        :type: str
        """

        self._afenumbercalc = afenumbercalc

    @property
    def afenumbersuppcalc(self):
        """Gets the afenumbersuppcalc of this Job.  # noqa: E501


        :return: The afenumbersuppcalc of this Job.  # noqa: E501
        :rtype: str
        """
        return self._afenumbersuppcalc

    @afenumbersuppcalc.setter
    def afenumbersuppcalc(self, afenumbersuppcalc):
        """Sets the afenumbersuppcalc of this Job.


        :param afenumbersuppcalc: The afenumbersuppcalc of this Job.  # noqa: E501
        :type: str
        """

        self._afenumbersuppcalc = afenumbersuppcalc

    @property
    def afeperdurmlcalc(self):
        """Gets the afeperdurmlcalc of this Job.  # noqa: E501


        :return: The afeperdurmlcalc of this Job.  # noqa: E501
        :rtype: OneOfJobAfeperdurmlcalc
        """
        return self._afeperdurmlcalc

    @afeperdurmlcalc.setter
    def afeperdurmlcalc(self, afeperdurmlcalc):
        """Sets the afeperdurmlcalc of this Job.


        :param afeperdurmlcalc: The afeperdurmlcalc of this Job.  # noqa: E501
        :type: OneOfJobAfeperdurmlcalc
        """

        self._afeperdurmlcalc = afeperdurmlcalc

    @property
    def afeperdurmlnormcalc(self):
        """Gets the afeperdurmlnormcalc of this Job.  # noqa: E501


        :return: The afeperdurmlnormcalc of this Job.  # noqa: E501
        :rtype: OneOfJobAfeperdurmlnormcalc
        """
        return self._afeperdurmlnormcalc

    @afeperdurmlnormcalc.setter
    def afeperdurmlnormcalc(self, afeperdurmlnormcalc):
        """Sets the afeperdurmlnormcalc of this Job.


        :param afeperdurmlnormcalc: The afeperdurmlnormcalc of this Job.  # noqa: E501
        :type: OneOfJobAfeperdurmlnormcalc
        """

        self._afeperdurmlnormcalc = afeperdurmlnormcalc

    @property
    def afepertargetdepthcalc(self):
        """Gets the afepertargetdepthcalc of this Job.  # noqa: E501


        :return: The afepertargetdepthcalc of this Job.  # noqa: E501
        :rtype: OneOfJobAfepertargetdepthcalc
        """
        return self._afepertargetdepthcalc

    @afepertargetdepthcalc.setter
    def afepertargetdepthcalc(self, afepertargetdepthcalc):
        """Sets the afepertargetdepthcalc of this Job.


        :param afepertargetdepthcalc: The afepertargetdepthcalc of this Job.  # noqa: E501
        :type: OneOfJobAfepertargetdepthcalc
        """

        self._afepertargetdepthcalc = afepertargetdepthcalc

    @property
    def afepertargetdepthnormcalc(self):
        """Gets the afepertargetdepthnormcalc of this Job.  # noqa: E501


        :return: The afepertargetdepthnormcalc of this Job.  # noqa: E501
        :rtype: OneOfJobAfepertargetdepthnormcalc
        """
        return self._afepertargetdepthnormcalc

    @afepertargetdepthnormcalc.setter
    def afepertargetdepthnormcalc(self, afepertargetdepthnormcalc):
        """Sets the afepertargetdepthnormcalc of this Job.


        :param afepertargetdepthnormcalc: The afepertargetdepthnormcalc of this Job.  # noqa: E501
        :type: OneOfJobAfepertargetdepthnormcalc
        """

        self._afepertargetdepthnormcalc = afepertargetdepthnormcalc

    @property
    def afesupamtcalc(self):
        """Gets the afesupamtcalc of this Job.  # noqa: E501


        :return: The afesupamtcalc of this Job.  # noqa: E501
        :rtype: OneOfJobAfesupamtcalc
        """
        return self._afesupamtcalc

    @afesupamtcalc.setter
    def afesupamtcalc(self, afesupamtcalc):
        """Sets the afesupamtcalc of this Job.


        :param afesupamtcalc: The afesupamtcalc of this Job.  # noqa: E501
        :type: OneOfJobAfesupamtcalc
        """

        self._afesupamtcalc = afesupamtcalc

    @property
    def afesupamtnormcalc(self):
        """Gets the afesupamtnormcalc of this Job.  # noqa: E501


        :return: The afesupamtnormcalc of this Job.  # noqa: E501
        :rtype: OneOfJobAfesupamtnormcalc
        """
        return self._afesupamtnormcalc

    @afesupamtnormcalc.setter
    def afesupamtnormcalc(self, afesupamtnormcalc):
        """Sets the afesupamtnormcalc of this Job.


        :param afesupamtnormcalc: The afesupamtnormcalc of this Job.  # noqa: E501
        :type: OneOfJobAfesupamtnormcalc
        """

        self._afesupamtnormcalc = afesupamtnormcalc

    @property
    def afetotalcalc(self):
        """Gets the afetotalcalc of this Job.  # noqa: E501


        :return: The afetotalcalc of this Job.  # noqa: E501
        :rtype: OneOfJobAfetotalcalc
        """
        return self._afetotalcalc

    @afetotalcalc.setter
    def afetotalcalc(self, afetotalcalc):
        """Sets the afetotalcalc of this Job.


        :param afetotalcalc: The afetotalcalc of this Job.  # noqa: E501
        :type: OneOfJobAfetotalcalc
        """

        self._afetotalcalc = afetotalcalc

    @property
    def afetotalnormcalc(self):
        """Gets the afetotalnormcalc of this Job.  # noqa: E501


        :return: The afetotalnormcalc of this Job.  # noqa: E501
        :rtype: OneOfJobAfetotalnormcalc
        """
        return self._afetotalnormcalc

    @afetotalnormcalc.setter
    def afetotalnormcalc(self, afetotalnormcalc):
        """Sets the afetotalnormcalc of this Job.


        :param afetotalnormcalc: The afetotalnormcalc of this Job.  # noqa: E501
        :type: OneOfJobAfetotalnormcalc
        """

        self._afetotalnormcalc = afetotalnormcalc

    @property
    def bhadrillruncalc(self):
        """Gets the bhadrillruncalc of this Job.  # noqa: E501


        :return: The bhadrillruncalc of this Job.  # noqa: E501
        :rtype: OneOfJobBhadrillruncalc
        """
        return self._bhadrillruncalc

    @bhadrillruncalc.setter
    def bhadrillruncalc(self, bhadrillruncalc):
        """Sets the bhadrillruncalc of this Job.


        :param bhadrillruncalc: The bhadrillruncalc of this Job.  # noqa: E501
        :type: OneOfJobBhadrillruncalc
        """

        self._bhadrillruncalc = bhadrillruncalc

    @property
    def bhatotalruncalc(self):
        """Gets the bhatotalruncalc of this Job.  # noqa: E501


        :return: The bhatotalruncalc of this Job.  # noqa: E501
        :rtype: OneOfJobBhatotalruncalc
        """
        return self._bhatotalruncalc

    @bhatotalruncalc.setter
    def bhatotalruncalc(self, bhatotalruncalc):
        """Sets the bhatotalruncalc of this Job.


        :param bhatotalruncalc: The bhatotalruncalc of this Job.  # noqa: E501
        :type: OneOfJobBhatotalruncalc
        """

        self._bhatotalruncalc = bhatotalruncalc

    @property
    def bitrevscalc(self):
        """Gets the bitrevscalc of this Job.  # noqa: E501


        :return: The bitrevscalc of this Job.  # noqa: E501
        :rtype: OneOfJobBitrevscalc
        """
        return self._bitrevscalc

    @bitrevscalc.setter
    def bitrevscalc(self, bitrevscalc):
        """Sets the bitrevscalc of this Job.


        :param bitrevscalc: The bitrevscalc of this Job.  # noqa: E501
        :type: OneOfJobBitrevscalc
        """

        self._bitrevscalc = bitrevscalc

    @property
    def chartofaccounts(self):
        """Gets the chartofaccounts of this Job.  # noqa: E501


        :return: The chartofaccounts of this Job.  # noqa: E501
        :rtype: str
        """
        return self._chartofaccounts

    @chartofaccounts.setter
    def chartofaccounts(self, chartofaccounts):
        """Sets the chartofaccounts of this Job.


        :param chartofaccounts: The chartofaccounts of this Job.  # noqa: E501
        :type: str
        """

        self._chartofaccounts = chartofaccounts

    @property
    def client(self):
        """Gets the client of this Job.  # noqa: E501


        :return: The client of this Job.  # noqa: E501
        :rtype: str
        """
        return self._client

    @client.setter
    def client(self, client):
        """Sets the client of this Job.


        :param client: The client of this Job.  # noqa: E501
        :type: str
        """

        self._client = client

    @property
    def complexityindex(self):
        """Gets the complexityindex of this Job.  # noqa: E501


        :return: The complexityindex of this Job.  # noqa: E501
        :rtype: str
        """
        return self._complexityindex

    @complexityindex.setter
    def complexityindex(self, complexityindex):
        """Sets the complexityindex of this Job.


        :param complexityindex: The complexityindex of this Job.  # noqa: E501
        :type: str
        """

        self._complexityindex = complexityindex

    @property
    def costafeforecastvarcalc(self):
        """Gets the costafeforecastvarcalc of this Job.  # noqa: E501


        :return: The costafeforecastvarcalc of this Job.  # noqa: E501
        :rtype: OneOfJobCostafeforecastvarcalc
        """
        return self._costafeforecastvarcalc

    @costafeforecastvarcalc.setter
    def costafeforecastvarcalc(self, costafeforecastvarcalc):
        """Sets the costafeforecastvarcalc of this Job.


        :param costafeforecastvarcalc: The costafeforecastvarcalc of this Job.  # noqa: E501
        :type: OneOfJobCostafeforecastvarcalc
        """

        self._costafeforecastvarcalc = costafeforecastvarcalc

    @property
    def costfinalactual(self):
        """Gets the costfinalactual of this Job.  # noqa: E501


        :return: The costfinalactual of this Job.  # noqa: E501
        :rtype: OneOfJobCostfinalactual
        """
        return self._costfinalactual

    @costfinalactual.setter
    def costfinalactual(self, costfinalactual):
        """Sets the costfinalactual of this Job.


        :param costfinalactual: The costfinalactual of this Job.  # noqa: E501
        :type: OneOfJobCostfinalactual
        """

        self._costfinalactual = costfinalactual

    @property
    def costforecastcalc(self):
        """Gets the costforecastcalc of this Job.  # noqa: E501


        :return: The costforecastcalc of this Job.  # noqa: E501
        :rtype: OneOfJobCostforecastcalc
        """
        return self._costforecastcalc

    @costforecastcalc.setter
    def costforecastcalc(self, costforecastcalc):
        """Sets the costforecastcalc of this Job.


        :param costforecastcalc: The costforecastcalc of this Job.  # noqa: E501
        :type: OneOfJobCostforecastcalc
        """

        self._costforecastcalc = costforecastcalc

    @property
    def costforecastfieldvarcalc(self):
        """Gets the costforecastfieldvarcalc of this Job.  # noqa: E501


        :return: The costforecastfieldvarcalc of this Job.  # noqa: E501
        :rtype: OneOfJobCostforecastfieldvarcalc
        """
        return self._costforecastfieldvarcalc

    @costforecastfieldvarcalc.setter
    def costforecastfieldvarcalc(self, costforecastfieldvarcalc):
        """Sets the costforecastfieldvarcalc of this Job.


        :param costforecastfieldvarcalc: The costforecastfieldvarcalc of this Job.  # noqa: E501
        :type: OneOfJobCostforecastfieldvarcalc
        """

        self._costforecastfieldvarcalc = costforecastfieldvarcalc

    @property
    def costmaxtotalcalc(self):
        """Gets the costmaxtotalcalc of this Job.  # noqa: E501


        :return: The costmaxtotalcalc of this Job.  # noqa: E501
        :rtype: OneOfJobCostmaxtotalcalc
        """
        return self._costmaxtotalcalc

    @costmaxtotalcalc.setter
    def costmaxtotalcalc(self, costmaxtotalcalc):
        """Sets the costmaxtotalcalc of this Job.


        :param costmaxtotalcalc: The costmaxtotalcalc of this Job.  # noqa: E501
        :type: OneOfJobCostmaxtotalcalc
        """

        self._costmaxtotalcalc = costmaxtotalcalc

    @property
    def costmintotalcalc(self):
        """Gets the costmintotalcalc of this Job.  # noqa: E501


        :return: The costmintotalcalc of this Job.  # noqa: E501
        :rtype: OneOfJobCostmintotalcalc
        """
        return self._costmintotalcalc

    @costmintotalcalc.setter
    def costmintotalcalc(self, costmintotalcalc):
        """Sets the costmintotalcalc of this Job.


        :param costmintotalcalc: The costmintotalcalc of this Job.  # noqa: E501
        :type: OneOfJobCostmintotalcalc
        """

        self._costmintotalcalc = costmintotalcalc

    @property
    def costmlnoexcludecalc(self):
        """Gets the costmlnoexcludecalc of this Job.  # noqa: E501


        :return: The costmlnoexcludecalc of this Job.  # noqa: E501
        :rtype: OneOfJobCostmlnoexcludecalc
        """
        return self._costmlnoexcludecalc

    @costmlnoexcludecalc.setter
    def costmlnoexcludecalc(self, costmlnoexcludecalc):
        """Sets the costmlnoexcludecalc of this Job.


        :param costmlnoexcludecalc: The costmlnoexcludecalc of this Job.  # noqa: E501
        :type: OneOfJobCostmlnoexcludecalc
        """

        self._costmlnoexcludecalc = costmlnoexcludecalc

    @property
    def costmltotalcalc(self):
        """Gets the costmltotalcalc of this Job.  # noqa: E501


        :return: The costmltotalcalc of this Job.  # noqa: E501
        :rtype: OneOfJobCostmltotalcalc
        """
        return self._costmltotalcalc

    @costmltotalcalc.setter
    def costmltotalcalc(self, costmltotalcalc):
        """Sets the costmltotalcalc of this Job.


        :param costmltotalcalc: The costmltotalcalc of this Job.  # noqa: E501
        :type: OneOfJobCostmltotalcalc
        """

        self._costmltotalcalc = costmltotalcalc

    @property
    def costmltotalnoplanchangecalc(self):
        """Gets the costmltotalnoplanchangecalc of this Job.  # noqa: E501


        :return: The costmltotalnoplanchangecalc of this Job.  # noqa: E501
        :rtype: OneOfJobCostmltotalnoplanchangecalc
        """
        return self._costmltotalnoplanchangecalc

    @costmltotalnoplanchangecalc.setter
    def costmltotalnoplanchangecalc(self, costmltotalnoplanchangecalc):
        """Sets the costmltotalnoplanchangecalc of this Job.


        :param costmltotalnoplanchangecalc: The costmltotalnoplanchangecalc of this Job.  # noqa: E501
        :type: OneOfJobCostmltotalnoplanchangecalc
        """

        self._costmltotalnoplanchangecalc = costmltotalnoplanchangecalc

    @property
    def costnormafeforecastvarcalc(self):
        """Gets the costnormafeforecastvarcalc of this Job.  # noqa: E501


        :return: The costnormafeforecastvarcalc of this Job.  # noqa: E501
        :rtype: OneOfJobCostnormafeforecastvarcalc
        """
        return self._costnormafeforecastvarcalc

    @costnormafeforecastvarcalc.setter
    def costnormafeforecastvarcalc(self, costnormafeforecastvarcalc):
        """Sets the costnormafeforecastvarcalc of this Job.


        :param costnormafeforecastvarcalc: The costnormafeforecastvarcalc of this Job.  # noqa: E501
        :type: OneOfJobCostnormafeforecastvarcalc
        """

        self._costnormafeforecastvarcalc = costnormafeforecastvarcalc

    @property
    def costnormforecastcalc(self):
        """Gets the costnormforecastcalc of this Job.  # noqa: E501


        :return: The costnormforecastcalc of this Job.  # noqa: E501
        :rtype: OneOfJobCostnormforecastcalc
        """
        return self._costnormforecastcalc

    @costnormforecastcalc.setter
    def costnormforecastcalc(self, costnormforecastcalc):
        """Sets the costnormforecastcalc of this Job.


        :param costnormforecastcalc: The costnormforecastcalc of this Job.  # noqa: E501
        :type: OneOfJobCostnormforecastcalc
        """

        self._costnormforecastcalc = costnormforecastcalc

    @property
    def costnormforecastfieldvarcalc(self):
        """Gets the costnormforecastfieldvarcalc of this Job.  # noqa: E501


        :return: The costnormforecastfieldvarcalc of this Job.  # noqa: E501
        :rtype: OneOfJobCostnormforecastfieldvarcalc
        """
        return self._costnormforecastfieldvarcalc

    @costnormforecastfieldvarcalc.setter
    def costnormforecastfieldvarcalc(self, costnormforecastfieldvarcalc):
        """Sets the costnormforecastfieldvarcalc of this Job.


        :param costnormforecastfieldvarcalc: The costnormforecastfieldvarcalc of this Job.  # noqa: E501
        :type: OneOfJobCostnormforecastfieldvarcalc
        """

        self._costnormforecastfieldvarcalc = costnormforecastfieldvarcalc

    @property
    def costnormperdepthcalc(self):
        """Gets the costnormperdepthcalc of this Job.  # noqa: E501


        :return: The costnormperdepthcalc of this Job.  # noqa: E501
        :rtype: OneOfJobCostnormperdepthcalc
        """
        return self._costnormperdepthcalc

    @costnormperdepthcalc.setter
    def costnormperdepthcalc(self, costnormperdepthcalc):
        """Sets the costnormperdepthcalc of this Job.


        :param costnormperdepthcalc: The costnormperdepthcalc of this Job.  # noqa: E501
        :type: OneOfJobCostnormperdepthcalc
        """

        self._costnormperdepthcalc = costnormperdepthcalc

    @property
    def costnormperdepthplanmlcalc(self):
        """Gets the costnormperdepthplanmlcalc of this Job.  # noqa: E501


        :return: The costnormperdepthplanmlcalc of this Job.  # noqa: E501
        :rtype: OneOfJobCostnormperdepthplanmlcalc
        """
        return self._costnormperdepthplanmlcalc

    @costnormperdepthplanmlcalc.setter
    def costnormperdepthplanmlcalc(self, costnormperdepthplanmlcalc):
        """Sets the costnormperdepthplanmlcalc of this Job.


        :param costnormperdepthplanmlcalc: The costnormperdepthplanmlcalc of this Job.  # noqa: E501
        :type: OneOfJobCostnormperdepthplanmlcalc
        """

        self._costnormperdepthplanmlcalc = costnormperdepthplanmlcalc

    @property
    def costnormperlateralallcalc(self):
        """Gets the costnormperlateralallcalc of this Job.  # noqa: E501


        :return: The costnormperlateralallcalc of this Job.  # noqa: E501
        :rtype: OneOfJobCostnormperlateralallcalc
        """
        return self._costnormperlateralallcalc

    @costnormperlateralallcalc.setter
    def costnormperlateralallcalc(self, costnormperlateralallcalc):
        """Sets the costnormperlateralallcalc of this Job.


        :param costnormperlateralallcalc: The costnormperlateralallcalc of this Job.  # noqa: E501
        :type: OneOfJobCostnormperlateralallcalc
        """

        self._costnormperlateralallcalc = costnormperlateralallcalc

    @property
    def costnormperlateralcalc(self):
        """Gets the costnormperlateralcalc of this Job.  # noqa: E501


        :return: The costnormperlateralcalc of this Job.  # noqa: E501
        :rtype: OneOfJobCostnormperlateralcalc
        """
        return self._costnormperlateralcalc

    @costnormperlateralcalc.setter
    def costnormperlateralcalc(self, costnormperlateralcalc):
        """Sets the costnormperlateralcalc of this Job.


        :param costnormperlateralcalc: The costnormperlateralcalc of this Job.  # noqa: E501
        :type: OneOfJobCostnormperlateralcalc
        """

        self._costnormperlateralcalc = costnormperlateralcalc

    @property
    def costnormtotalcalc(self):
        """Gets the costnormtotalcalc of this Job.  # noqa: E501


        :return: The costnormtotalcalc of this Job.  # noqa: E501
        :rtype: OneOfJobCostnormtotalcalc
        """
        return self._costnormtotalcalc

    @costnormtotalcalc.setter
    def costnormtotalcalc(self, costnormtotalcalc):
        """Sets the costnormtotalcalc of this Job.


        :param costnormtotalcalc: The costnormtotalcalc of this Job.  # noqa: E501
        :type: OneOfJobCostnormtotalcalc
        """

        self._costnormtotalcalc = costnormtotalcalc

    @property
    def costperdepthcalc(self):
        """Gets the costperdepthcalc of this Job.  # noqa: E501


        :return: The costperdepthcalc of this Job.  # noqa: E501
        :rtype: OneOfJobCostperdepthcalc
        """
        return self._costperdepthcalc

    @costperdepthcalc.setter
    def costperdepthcalc(self, costperdepthcalc):
        """Sets the costperdepthcalc of this Job.


        :param costperdepthcalc: The costperdepthcalc of this Job.  # noqa: E501
        :type: OneOfJobCostperdepthcalc
        """

        self._costperdepthcalc = costperdepthcalc

    @property
    def costperdepthplanmlcalc(self):
        """Gets the costperdepthplanmlcalc of this Job.  # noqa: E501


        :return: The costperdepthplanmlcalc of this Job.  # noqa: E501
        :rtype: OneOfJobCostperdepthplanmlcalc
        """
        return self._costperdepthplanmlcalc

    @costperdepthplanmlcalc.setter
    def costperdepthplanmlcalc(self, costperdepthplanmlcalc):
        """Sets the costperdepthplanmlcalc of this Job.


        :param costperdepthplanmlcalc: The costperdepthplanmlcalc of this Job.  # noqa: E501
        :type: OneOfJobCostperdepthplanmlcalc
        """

        self._costperdepthplanmlcalc = costperdepthplanmlcalc

    @property
    def costperlateralallcalc(self):
        """Gets the costperlateralallcalc of this Job.  # noqa: E501


        :return: The costperlateralallcalc of this Job.  # noqa: E501
        :rtype: OneOfJobCostperlateralallcalc
        """
        return self._costperlateralallcalc

    @costperlateralallcalc.setter
    def costperlateralallcalc(self, costperlateralallcalc):
        """Sets the costperlateralallcalc of this Job.


        :param costperlateralallcalc: The costperlateralallcalc of this Job.  # noqa: E501
        :type: OneOfJobCostperlateralallcalc
        """

        self._costperlateralallcalc = costperlateralallcalc

    @property
    def costperlateralcalc(self):
        """Gets the costperlateralcalc of this Job.  # noqa: E501


        :return: The costperlateralcalc of this Job.  # noqa: E501
        :rtype: OneOfJobCostperlateralcalc
        """
        return self._costperlateralcalc

    @costperlateralcalc.setter
    def costperlateralcalc(self, costperlateralcalc):
        """Sets the costperlateralcalc of this Job.


        :param costperlateralcalc: The costperlateralcalc of this Job.  # noqa: E501
        :type: OneOfJobCostperlateralcalc
        """

        self._costperlateralcalc = costperlateralcalc

    @property
    def costpertldurcalc(self):
        """Gets the costpertldurcalc of this Job.  # noqa: E501


        :return: The costpertldurcalc of this Job.  # noqa: E501
        :rtype: OneOfJobCostpertldurcalc
        """
        return self._costpertldurcalc

    @costpertldurcalc.setter
    def costpertldurcalc(self, costpertldurcalc):
        """Sets the costpertldurcalc of this Job.


        :param costpertldurcalc: The costpertldurcalc of this Job.  # noqa: E501
        :type: OneOfJobCostpertldurcalc
        """

        self._costpertldurcalc = costpertldurcalc

    @property
    def costpertldurnormcalc(self):
        """Gets the costpertldurnormcalc of this Job.  # noqa: E501


        :return: The costpertldurnormcalc of this Job.  # noqa: E501
        :rtype: OneOfJobCostpertldurnormcalc
        """
        return self._costpertldurnormcalc

    @costpertldurnormcalc.setter
    def costpertldurnormcalc(self, costpertldurnormcalc):
        """Sets the costpertldurnormcalc of this Job.


        :param costpertldurnormcalc: The costpertldurnormcalc of this Job.  # noqa: E501
        :type: OneOfJobCostpertldurnormcalc
        """

        self._costpertldurnormcalc = costpertldurnormcalc

    @property
    def costtechlimittotalcalc(self):
        """Gets the costtechlimittotalcalc of this Job.  # noqa: E501


        :return: The costtechlimittotalcalc of this Job.  # noqa: E501
        :rtype: OneOfJobCosttechlimittotalcalc
        """
        return self._costtechlimittotalcalc

    @costtechlimittotalcalc.setter
    def costtechlimittotalcalc(self, costtechlimittotalcalc):
        """Sets the costtechlimittotalcalc of this Job.


        :param costtechlimittotalcalc: The costtechlimittotalcalc of this Job.  # noqa: E501
        :type: OneOfJobCosttechlimittotalcalc
        """

        self._costtechlimittotalcalc = costtechlimittotalcalc

    @property
    def costtotalcalc(self):
        """Gets the costtotalcalc of this Job.  # noqa: E501


        :return: The costtotalcalc of this Job.  # noqa: E501
        :rtype: OneOfJobCosttotalcalc
        """
        return self._costtotalcalc

    @costtotalcalc.setter
    def costtotalcalc(self, costtotalcalc):
        """Sets the costtotalcalc of this Job.


        :param costtotalcalc: The costtotalcalc of this Job.  # noqa: E501
        :type: OneOfJobCosttotalcalc
        """

        self._costtotalcalc = costtotalcalc

    @property
    def currencycode(self):
        """Gets the currencycode of this Job.  # noqa: E501


        :return: The currencycode of this Job.  # noqa: E501
        :rtype: str
        """
        return self._currencycode

    @currencycode.setter
    def currencycode(self, currencycode):
        """Sets the currencycode of this Job.


        :param currencycode: The currencycode of this Job.  # noqa: E501
        :type: str
        """

        self._currencycode = currencycode

    @property
    def currencyexchangerate(self):
        """Gets the currencyexchangerate of this Job.  # noqa: E501


        :return: The currencyexchangerate of this Job.  # noqa: E501
        :rtype: OneOfJobCurrencyexchangerate
        """
        return self._currencyexchangerate

    @currencyexchangerate.setter
    def currencyexchangerate(self, currencyexchangerate):
        """Sets the currencyexchangerate of this Job.


        :param currencyexchangerate: The currencyexchangerate of this Job.  # noqa: E501
        :type: OneOfJobCurrencyexchangerate
        """

        self._currencyexchangerate = currencyexchangerate

    @property
    def depthdrilledcalc(self):
        """Gets the depthdrilledcalc of this Job.  # noqa: E501


        :return: The depthdrilledcalc of this Job.  # noqa: E501
        :rtype: OneOfJobDepthdrilledcalc
        """
        return self._depthdrilledcalc

    @depthdrilledcalc.setter
    def depthdrilledcalc(self, depthdrilledcalc):
        """Sets the depthdrilledcalc of this Job.


        :param depthdrilledcalc: The depthdrilledcalc of this Job.  # noqa: E501
        :type: OneOfJobDepthdrilledcalc
        """

        self._depthdrilledcalc = depthdrilledcalc

    @property
    def depthdrilledperbhacalc(self):
        """Gets the depthdrilledperbhacalc of this Job.  # noqa: E501


        :return: The depthdrilledperbhacalc of this Job.  # noqa: E501
        :rtype: OneOfJobDepthdrilledperbhacalc
        """
        return self._depthdrilledperbhacalc

    @depthdrilledperbhacalc.setter
    def depthdrilledperbhacalc(self, depthdrilledperbhacalc):
        """Sets the depthdrilledperbhacalc of this Job.


        :param depthdrilledperbhacalc: The depthdrilledperbhacalc of this Job.  # noqa: E501
        :type: OneOfJobDepthdrilledperbhacalc
        """

        self._depthdrilledperbhacalc = depthdrilledperbhacalc

    @property
    def depthdrilledperreportnocalc(self):
        """Gets the depthdrilledperreportnocalc of this Job.  # noqa: E501


        :return: The depthdrilledperreportnocalc of this Job.  # noqa: E501
        :rtype: OneOfJobDepthdrilledperreportnocalc
        """
        return self._depthdrilledperreportnocalc

    @depthdrilledperreportnocalc.setter
    def depthdrilledperreportnocalc(self, depthdrilledperreportnocalc):
        """Sets the depthdrilledperreportnocalc of this Job.


        :param depthdrilledperreportnocalc: The depthdrilledperreportnocalc of this Job.  # noqa: E501
        :type: OneOfJobDepthdrilledperreportnocalc
        """

        self._depthdrilledperreportnocalc = depthdrilledperreportnocalc

    @property
    def depthdrilledspudtorrcalc(self):
        """Gets the depthdrilledspudtorrcalc of this Job.  # noqa: E501


        :return: The depthdrilledspudtorrcalc of this Job.  # noqa: E501
        :rtype: OneOfJobDepthdrilledspudtorrcalc
        """
        return self._depthdrilledspudtorrcalc

    @depthdrilledspudtorrcalc.setter
    def depthdrilledspudtorrcalc(self, depthdrilledspudtorrcalc):
        """Sets the depthdrilledspudtorrcalc of this Job.


        :param depthdrilledspudtorrcalc: The depthdrilledspudtorrcalc of this Job.  # noqa: E501
        :type: OneOfJobDepthdrilledspudtorrcalc
        """

        self._depthdrilledspudtorrcalc = depthdrilledspudtorrcalc

    @property
    def depthperdurplanmlcalc(self):
        """Gets the depthperdurplanmlcalc of this Job.  # noqa: E501


        :return: The depthperdurplanmlcalc of this Job.  # noqa: E501
        :rtype: OneOfJobDepthperdurplanmlcalc
        """
        return self._depthperdurplanmlcalc

    @depthperdurplanmlcalc.setter
    def depthperdurplanmlcalc(self, depthperdurplanmlcalc):
        """Sets the depthperdurplanmlcalc of this Job.


        :param depthperdurplanmlcalc: The depthperdurplanmlcalc of this Job.  # noqa: E501
        :type: OneOfJobDepthperdurplanmlcalc
        """

        self._depthperdurplanmlcalc = depthperdurplanmlcalc

    @property
    def depthperratiodurationcalc(self):
        """Gets the depthperratiodurationcalc of this Job.  # noqa: E501


        :return: The depthperratiodurationcalc of this Job.  # noqa: E501
        :rtype: OneOfJobDepthperratiodurationcalc
        """
        return self._depthperratiodurationcalc

    @depthperratiodurationcalc.setter
    def depthperratiodurationcalc(self, depthperratiodurationcalc):
        """Sets the depthperratiodurationcalc of this Job.


        :param depthperratiodurationcalc: The depthperratiodurationcalc of this Job.  # noqa: E501
        :type: OneOfJobDepthperratiodurationcalc
        """

        self._depthperratiodurationcalc = depthperratiodurationcalc

    @property
    def depthplanmaxcalc(self):
        """Gets the depthplanmaxcalc of this Job.  # noqa: E501


        :return: The depthplanmaxcalc of this Job.  # noqa: E501
        :rtype: OneOfJobDepthplanmaxcalc
        """
        return self._depthplanmaxcalc

    @depthplanmaxcalc.setter
    def depthplanmaxcalc(self, depthplanmaxcalc):
        """Sets the depthplanmaxcalc of this Job.


        :param depthplanmaxcalc: The depthplanmaxcalc of this Job.  # noqa: E501
        :type: OneOfJobDepthplanmaxcalc
        """

        self._depthplanmaxcalc = depthplanmaxcalc

    @property
    def depthrotatingcalc(self):
        """Gets the depthrotatingcalc of this Job.  # noqa: E501


        :return: The depthrotatingcalc of this Job.  # noqa: E501
        :rtype: OneOfJobDepthrotatingcalc
        """
        return self._depthrotatingcalc

    @depthrotatingcalc.setter
    def depthrotatingcalc(self, depthrotatingcalc):
        """Sets the depthrotatingcalc of this Job.


        :param depthrotatingcalc: The depthrotatingcalc of this Job.  # noqa: E501
        :type: OneOfJobDepthrotatingcalc
        """

        self._depthrotatingcalc = depthrotatingcalc

    @property
    def depthslidingcalc(self):
        """Gets the depthslidingcalc of this Job.  # noqa: E501


        :return: The depthslidingcalc of this Job.  # noqa: E501
        :rtype: OneOfJobDepthslidingcalc
        """
        return self._depthslidingcalc

    @depthslidingcalc.setter
    def depthslidingcalc(self, depthslidingcalc):
        """Sets the depthslidingcalc of this Job.


        :param depthslidingcalc: The depthslidingcalc of this Job.  # noqa: E501
        :type: OneOfJobDepthslidingcalc
        """

        self._depthslidingcalc = depthslidingcalc

    @property
    def dttmend(self):
        """Gets the dttmend of this Job.  # noqa: E501


        :return: The dttmend of this Job.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmend

    @dttmend.setter
    def dttmend(self, dttmend):
        """Sets the dttmend of this Job.


        :param dttmend: The dttmend of this Job.  # noqa: E501
        :type: datetime
        """

        self._dttmend = dttmend

    @property
    def dttmendplanmaxcalc(self):
        """Gets the dttmendplanmaxcalc of this Job.  # noqa: E501


        :return: The dttmendplanmaxcalc of this Job.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmendplanmaxcalc

    @dttmendplanmaxcalc.setter
    def dttmendplanmaxcalc(self, dttmendplanmaxcalc):
        """Sets the dttmendplanmaxcalc of this Job.


        :param dttmendplanmaxcalc: The dttmendplanmaxcalc of this Job.  # noqa: E501
        :type: datetime
        """

        self._dttmendplanmaxcalc = dttmendplanmaxcalc

    @property
    def dttmendplanmincalc(self):
        """Gets the dttmendplanmincalc of this Job.  # noqa: E501


        :return: The dttmendplanmincalc of this Job.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmendplanmincalc

    @dttmendplanmincalc.setter
    def dttmendplanmincalc(self, dttmendplanmincalc):
        """Sets the dttmendplanmincalc of this Job.


        :param dttmendplanmincalc: The dttmendplanmincalc of this Job.  # noqa: E501
        :type: datetime
        """

        self._dttmendplanmincalc = dttmendplanmincalc

    @property
    def dttmendplanmlcalc(self):
        """Gets the dttmendplanmlcalc of this Job.  # noqa: E501


        :return: The dttmendplanmlcalc of this Job.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmendplanmlcalc

    @dttmendplanmlcalc.setter
    def dttmendplanmlcalc(self, dttmendplanmlcalc):
        """Sets the dttmendplanmlcalc of this Job.


        :param dttmendplanmlcalc: The dttmendplanmlcalc of this Job.  # noqa: E501
        :type: datetime
        """

        self._dttmendplanmlcalc = dttmendplanmlcalc

    @property
    def dttmendplantechlimitcalc(self):
        """Gets the dttmendplantechlimitcalc of this Job.  # noqa: E501


        :return: The dttmendplantechlimitcalc of this Job.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmendplantechlimitcalc

    @dttmendplantechlimitcalc.setter
    def dttmendplantechlimitcalc(self, dttmendplantechlimitcalc):
        """Sets the dttmendplantechlimitcalc of this Job.


        :param dttmendplantechlimitcalc: The dttmendplantechlimitcalc of this Job.  # noqa: E501
        :type: datetime
        """

        self._dttmendplantechlimitcalc = dttmendplantechlimitcalc

    @property
    def dttmspud(self):
        """Gets the dttmspud of this Job.  # noqa: E501


        :return: The dttmspud of this Job.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmspud

    @dttmspud.setter
    def dttmspud(self, dttmspud):
        """Sets the dttmspud of this Job.


        :param dttmspud: The dttmspud of this Job.  # noqa: E501
        :type: datetime
        """

        self._dttmspud = dttmspud

    @property
    def dttmstart(self):
        """Gets the dttmstart of this Job.  # noqa: E501


        :return: The dttmstart of this Job.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmstart

    @dttmstart.setter
    def dttmstart(self, dttmstart):
        """Sets the dttmstart of this Job.


        :param dttmstart: The dttmstart of this Job.  # noqa: E501
        :type: datetime
        """

        self._dttmstart = dttmstart

    @property
    def dttmstartplan(self):
        """Gets the dttmstartplan of this Job.  # noqa: E501


        :return: The dttmstartplan of this Job.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmstartplan

    @dttmstartplan.setter
    def dttmstartplan(self, dttmstartplan):
        """Sets the dttmstartplan of this Job.


        :param dttmstartplan: The dttmstartplan of this Job.  # noqa: E501
        :type: datetime
        """

        self._dttmstartplan = dttmstartplan

    @property
    def dttmtotaldepthcalc(self):
        """Gets the dttmtotaldepthcalc of this Job.  # noqa: E501


        :return: The dttmtotaldepthcalc of this Job.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmtotaldepthcalc

    @dttmtotaldepthcalc.setter
    def dttmtotaldepthcalc(self, dttmtotaldepthcalc):
        """Sets the dttmtotaldepthcalc of this Job.


        :param dttmtotaldepthcalc: The dttmtotaldepthcalc of this Job.  # noqa: E501
        :type: datetime
        """

        self._dttmtotaldepthcalc = dttmtotaldepthcalc

    @property
    def durationmaxtotalcalc(self):
        """Gets the durationmaxtotalcalc of this Job.  # noqa: E501


        :return: The durationmaxtotalcalc of this Job.  # noqa: E501
        :rtype: OneOfJobDurationmaxtotalcalc
        """
        return self._durationmaxtotalcalc

    @durationmaxtotalcalc.setter
    def durationmaxtotalcalc(self, durationmaxtotalcalc):
        """Sets the durationmaxtotalcalc of this Job.


        :param durationmaxtotalcalc: The durationmaxtotalcalc of this Job.  # noqa: E501
        :type: OneOfJobDurationmaxtotalcalc
        """

        self._durationmaxtotalcalc = durationmaxtotalcalc

    @property
    def durationmintotalcalc(self):
        """Gets the durationmintotalcalc of this Job.  # noqa: E501


        :return: The durationmintotalcalc of this Job.  # noqa: E501
        :rtype: OneOfJobDurationmintotalcalc
        """
        return self._durationmintotalcalc

    @durationmintotalcalc.setter
    def durationmintotalcalc(self, durationmintotalcalc):
        """Sets the durationmintotalcalc of this Job.


        :param durationmintotalcalc: The durationmintotalcalc of this Job.  # noqa: E501
        :type: OneOfJobDurationmintotalcalc
        """

        self._durationmintotalcalc = durationmintotalcalc

    @property
    def durationmltotalcalc(self):
        """Gets the durationmltotalcalc of this Job.  # noqa: E501


        :return: The durationmltotalcalc of this Job.  # noqa: E501
        :rtype: OneOfJobDurationmltotalcalc
        """
        return self._durationmltotalcalc

    @durationmltotalcalc.setter
    def durationmltotalcalc(self, durationmltotalcalc):
        """Sets the durationmltotalcalc of this Job.


        :param durationmltotalcalc: The durationmltotalcalc of this Job.  # noqa: E501
        :type: OneOfJobDurationmltotalcalc
        """

        self._durationmltotalcalc = durationmltotalcalc

    @property
    def durationnoproblemtimecalc(self):
        """Gets the durationnoproblemtimecalc of this Job.  # noqa: E501


        :return: The durationnoproblemtimecalc of this Job.  # noqa: E501
        :rtype: OneOfJobDurationnoproblemtimecalc
        """
        return self._durationnoproblemtimecalc

    @durationnoproblemtimecalc.setter
    def durationnoproblemtimecalc(self, durationnoproblemtimecalc):
        """Sets the durationnoproblemtimecalc of this Job.


        :param durationnoproblemtimecalc: The durationnoproblemtimecalc of this Job.  # noqa: E501
        :type: OneOfJobDurationnoproblemtimecalc
        """

        self._durationnoproblemtimecalc = durationnoproblemtimecalc

    @property
    def durationpersonnelotcalc(self):
        """Gets the durationpersonnelotcalc of this Job.  # noqa: E501


        :return: The durationpersonnelotcalc of this Job.  # noqa: E501
        :rtype: OneOfJobDurationpersonnelotcalc
        """
        return self._durationpersonnelotcalc

    @durationpersonnelotcalc.setter
    def durationpersonnelotcalc(self, durationpersonnelotcalc):
        """Sets the durationpersonnelotcalc of this Job.


        :param durationpersonnelotcalc: The durationpersonnelotcalc of this Job.  # noqa: E501
        :type: OneOfJobDurationpersonnelotcalc
        """

        self._durationpersonnelotcalc = durationpersonnelotcalc

    @property
    def durationpersonnelregcalc(self):
        """Gets the durationpersonnelregcalc of this Job.  # noqa: E501


        :return: The durationpersonnelregcalc of this Job.  # noqa: E501
        :rtype: OneOfJobDurationpersonnelregcalc
        """
        return self._durationpersonnelregcalc

    @durationpersonnelregcalc.setter
    def durationpersonnelregcalc(self, durationpersonnelregcalc):
        """Sets the durationpersonnelregcalc of this Job.


        :param durationpersonnelregcalc: The durationpersonnelregcalc of this Job.  # noqa: E501
        :type: OneOfJobDurationpersonnelregcalc
        """

        self._durationpersonnelregcalc = durationpersonnelregcalc

    @property
    def durationpersonneltotcalc(self):
        """Gets the durationpersonneltotcalc of this Job.  # noqa: E501


        :return: The durationpersonneltotcalc of this Job.  # noqa: E501
        :rtype: OneOfJobDurationpersonneltotcalc
        """
        return self._durationpersonneltotcalc

    @durationpersonneltotcalc.setter
    def durationpersonneltotcalc(self, durationpersonneltotcalc):
        """Sets the durationpersonneltotcalc of this Job.


        :param durationpersonneltotcalc: The durationpersonneltotcalc of this Job.  # noqa: E501
        :type: OneOfJobDurationpersonneltotcalc
        """

        self._durationpersonneltotcalc = durationpersonneltotcalc

    @property
    def durationproblemtimecalc(self):
        """Gets the durationproblemtimecalc of this Job.  # noqa: E501


        :return: The durationproblemtimecalc of this Job.  # noqa: E501
        :rtype: OneOfJobDurationproblemtimecalc
        """
        return self._durationproblemtimecalc

    @durationproblemtimecalc.setter
    def durationproblemtimecalc(self, durationproblemtimecalc):
        """Sets the durationproblemtimecalc of this Job.


        :param durationproblemtimecalc: The durationproblemtimecalc of this Job.  # noqa: E501
        :type: OneOfJobDurationproblemtimecalc
        """

        self._durationproblemtimecalc = durationproblemtimecalc

    @property
    def durationspudtimelogcalc(self):
        """Gets the durationspudtimelogcalc of this Job.  # noqa: E501


        :return: The durationspudtimelogcalc of this Job.  # noqa: E501
        :rtype: OneOfJobDurationspudtimelogcalc
        """
        return self._durationspudtimelogcalc

    @durationspudtimelogcalc.setter
    def durationspudtimelogcalc(self, durationspudtimelogcalc):
        """Sets the durationspudtimelogcalc of this Job.


        :param durationspudtimelogcalc: The durationspudtimelogcalc of this Job.  # noqa: E501
        :type: OneOfJobDurationspudtimelogcalc
        """

        self._durationspudtimelogcalc = durationspudtimelogcalc

    @property
    def durationspudtoplanmaxcalc(self):
        """Gets the durationspudtoplanmaxcalc of this Job.  # noqa: E501


        :return: The durationspudtoplanmaxcalc of this Job.  # noqa: E501
        :rtype: OneOfJobDurationspudtoplanmaxcalc
        """
        return self._durationspudtoplanmaxcalc

    @durationspudtoplanmaxcalc.setter
    def durationspudtoplanmaxcalc(self, durationspudtoplanmaxcalc):
        """Sets the durationspudtoplanmaxcalc of this Job.


        :param durationspudtoplanmaxcalc: The durationspudtoplanmaxcalc of this Job.  # noqa: E501
        :type: OneOfJobDurationspudtoplanmaxcalc
        """

        self._durationspudtoplanmaxcalc = durationspudtoplanmaxcalc

    @property
    def durationspudtoplanmincalc(self):
        """Gets the durationspudtoplanmincalc of this Job.  # noqa: E501


        :return: The durationspudtoplanmincalc of this Job.  # noqa: E501
        :rtype: OneOfJobDurationspudtoplanmincalc
        """
        return self._durationspudtoplanmincalc

    @durationspudtoplanmincalc.setter
    def durationspudtoplanmincalc(self, durationspudtoplanmincalc):
        """Sets the durationspudtoplanmincalc of this Job.


        :param durationspudtoplanmincalc: The durationspudtoplanmincalc of this Job.  # noqa: E501
        :type: OneOfJobDurationspudtoplanmincalc
        """

        self._durationspudtoplanmincalc = durationspudtoplanmincalc

    @property
    def durationspudtoplanmlcalc(self):
        """Gets the durationspudtoplanmlcalc of this Job.  # noqa: E501


        :return: The durationspudtoplanmlcalc of this Job.  # noqa: E501
        :rtype: OneOfJobDurationspudtoplanmlcalc
        """
        return self._durationspudtoplanmlcalc

    @durationspudtoplanmlcalc.setter
    def durationspudtoplanmlcalc(self, durationspudtoplanmlcalc):
        """Sets the durationspudtoplanmlcalc of this Job.


        :param durationspudtoplanmlcalc: The durationspudtoplanmlcalc of this Job.  # noqa: E501
        :type: OneOfJobDurationspudtoplanmlcalc
        """

        self._durationspudtoplanmlcalc = durationspudtoplanmlcalc

    @property
    def durationspudtoplantechlimcalc(self):
        """Gets the durationspudtoplantechlimcalc of this Job.  # noqa: E501


        :return: The durationspudtoplantechlimcalc of this Job.  # noqa: E501
        :rtype: OneOfJobDurationspudtoplantechlimcalc
        """
        return self._durationspudtoplantechlimcalc

    @durationspudtoplantechlimcalc.setter
    def durationspudtoplantechlimcalc(self, durationspudtoplantechlimcalc):
        """Sets the durationspudtoplantechlimcalc of this Job.


        :param durationspudtoplantechlimcalc: The durationspudtoplantechlimcalc of this Job.  # noqa: E501
        :type: OneOfJobDurationspudtoplantechlimcalc
        """

        self._durationspudtoplantechlimcalc = durationspudtoplantechlimcalc

    @property
    def durationspudtorrcalc(self):
        """Gets the durationspudtorrcalc of this Job.  # noqa: E501


        :return: The durationspudtorrcalc of this Job.  # noqa: E501
        :rtype: OneOfJobDurationspudtorrcalc
        """
        return self._durationspudtorrcalc

    @durationspudtorrcalc.setter
    def durationspudtorrcalc(self, durationspudtorrcalc):
        """Sets the durationspudtorrcalc of this Job.


        :param durationspudtorrcalc: The durationspudtorrcalc of this Job.  # noqa: E501
        :type: OneOfJobDurationspudtorrcalc
        """

        self._durationspudtorrcalc = durationspudtorrcalc

    @property
    def durationspudtotdcalc(self):
        """Gets the durationspudtotdcalc of this Job.  # noqa: E501


        :return: The durationspudtotdcalc of this Job.  # noqa: E501
        :rtype: OneOfJobDurationspudtotdcalc
        """
        return self._durationspudtotdcalc

    @durationspudtotdcalc.setter
    def durationspudtotdcalc(self, durationspudtotdcalc):
        """Sets the durationspudtotdcalc of this Job.


        :param durationspudtotdcalc: The durationspudtotdcalc of this Job.  # noqa: E501
        :type: OneOfJobDurationspudtotdcalc
        """

        self._durationspudtotdcalc = durationspudtotdcalc

    @property
    def durationtechlimittotalcalc(self):
        """Gets the durationtechlimittotalcalc of this Job.  # noqa: E501


        :return: The durationtechlimittotalcalc of this Job.  # noqa: E501
        :rtype: OneOfJobDurationtechlimittotalcalc
        """
        return self._durationtechlimittotalcalc

    @durationtechlimittotalcalc.setter
    def durationtechlimittotalcalc(self, durationtechlimittotalcalc):
        """Sets the durationtechlimittotalcalc of this Job.


        :param durationtechlimittotalcalc: The durationtechlimittotalcalc of this Job.  # noqa: E501
        :type: OneOfJobDurationtechlimittotalcalc
        """

        self._durationtechlimittotalcalc = durationtechlimittotalcalc

    @property
    def durationtimelogtotalcalc(self):
        """Gets the durationtimelogtotalcalc of this Job.  # noqa: E501


        :return: The durationtimelogtotalcalc of this Job.  # noqa: E501
        :rtype: OneOfJobDurationtimelogtotalcalc
        """
        return self._durationtimelogtotalcalc

    @durationtimelogtotalcalc.setter
    def durationtimelogtotalcalc(self, durationtimelogtotalcalc):
        """Sets the durationtimelogtotalcalc of this Job.


        :param durationtimelogtotalcalc: The durationtimelogtotalcalc of this Job.  # noqa: E501
        :type: OneOfJobDurationtimelogtotalcalc
        """

        self._durationtimelogtotalcalc = durationtimelogtotalcalc

    @property
    def durmlnoexcludecalc(self):
        """Gets the durmlnoexcludecalc of this Job.  # noqa: E501


        :return: The durmlnoexcludecalc of this Job.  # noqa: E501
        :rtype: OneOfJobDurmlnoexcludecalc
        """
        return self._durmlnoexcludecalc

    @durmlnoexcludecalc.setter
    def durmlnoexcludecalc(self, durmlnoexcludecalc):
        """Sets the durmlnoexcludecalc of this Job.


        :param durmlnoexcludecalc: The durmlnoexcludecalc of this Job.  # noqa: E501
        :type: OneOfJobDurmlnoexcludecalc
        """

        self._durmlnoexcludecalc = durmlnoexcludecalc

    @property
    def durmltotalnoplanchangecalc(self):
        """Gets the durmltotalnoplanchangecalc of this Job.  # noqa: E501


        :return: The durmltotalnoplanchangecalc of this Job.  # noqa: E501
        :rtype: OneOfJobDurmltotalnoplanchangecalc
        """
        return self._durmltotalnoplanchangecalc

    @durmltotalnoplanchangecalc.setter
    def durmltotalnoplanchangecalc(self, durmltotalnoplanchangecalc):
        """Sets the durmltotalnoplanchangecalc of this Job.


        :param durmltotalnoplanchangecalc: The durmltotalnoplanchangecalc of this Job.  # noqa: E501
        :type: OneOfJobDurmltotalnoplanchangecalc
        """

        self._durmltotalnoplanchangecalc = durmltotalnoplanchangecalc

    @property
    def duroffbtmcalc(self):
        """Gets the duroffbtmcalc of this Job.  # noqa: E501


        :return: The duroffbtmcalc of this Job.  # noqa: E501
        :rtype: OneOfJobDuroffbtmcalc
        """
        return self._duroffbtmcalc

    @duroffbtmcalc.setter
    def duroffbtmcalc(self, duroffbtmcalc):
        """Sets the duroffbtmcalc of this Job.


        :param duroffbtmcalc: The duroffbtmcalc of this Job.  # noqa: E501
        :type: OneOfJobDuroffbtmcalc
        """

        self._duroffbtmcalc = duroffbtmcalc

    @property
    def duronbtmcalc(self):
        """Gets the duronbtmcalc of this Job.  # noqa: E501


        :return: The duronbtmcalc of this Job.  # noqa: E501
        :rtype: OneOfJobDuronbtmcalc
        """
        return self._duronbtmcalc

    @duronbtmcalc.setter
    def duronbtmcalc(self, duronbtmcalc):
        """Sets the duronbtmcalc of this Job.


        :param duronbtmcalc: The duronbtmcalc of this Job.  # noqa: E501
        :type: OneOfJobDuronbtmcalc
        """

        self._duronbtmcalc = duronbtmcalc

    @property
    def durpipemovingcalc(self):
        """Gets the durpipemovingcalc of this Job.  # noqa: E501


        :return: The durpipemovingcalc of this Job.  # noqa: E501
        :rtype: OneOfJobDurpipemovingcalc
        """
        return self._durpipemovingcalc

    @durpipemovingcalc.setter
    def durpipemovingcalc(self, durpipemovingcalc):
        """Sets the durpipemovingcalc of this Job.


        :param durpipemovingcalc: The durpipemovingcalc of this Job.  # noqa: E501
        :type: OneOfJobDurpipemovingcalc
        """

        self._durpipemovingcalc = durpipemovingcalc

    @property
    def estcostnormsavecalc(self):
        """Gets the estcostnormsavecalc of this Job.  # noqa: E501


        :return: The estcostnormsavecalc of this Job.  # noqa: E501
        :rtype: OneOfJobEstcostnormsavecalc
        """
        return self._estcostnormsavecalc

    @estcostnormsavecalc.setter
    def estcostnormsavecalc(self, estcostnormsavecalc):
        """Sets the estcostnormsavecalc of this Job.


        :param estcostnormsavecalc: The estcostnormsavecalc of this Job.  # noqa: E501
        :type: OneOfJobEstcostnormsavecalc
        """

        self._estcostnormsavecalc = estcostnormsavecalc

    @property
    def estcostsavecalc(self):
        """Gets the estcostsavecalc of this Job.  # noqa: E501


        :return: The estcostsavecalc of this Job.  # noqa: E501
        :rtype: OneOfJobEstcostsavecalc
        """
        return self._estcostsavecalc

    @estcostsavecalc.setter
    def estcostsavecalc(self, estcostsavecalc):
        """Sets the estcostsavecalc of this Job.


        :param estcostsavecalc: The estcostsavecalc of this Job.  # noqa: E501
        :type: OneOfJobEstcostsavecalc
        """

        self._estcostsavecalc = estcostsavecalc

    @property
    def estproblemcostcalc(self):
        """Gets the estproblemcostcalc of this Job.  # noqa: E501


        :return: The estproblemcostcalc of this Job.  # noqa: E501
        :rtype: OneOfJobEstproblemcostcalc
        """
        return self._estproblemcostcalc

    @estproblemcostcalc.setter
    def estproblemcostcalc(self, estproblemcostcalc):
        """Sets the estproblemcostcalc of this Job.


        :param estproblemcostcalc: The estproblemcostcalc of this Job.  # noqa: E501
        :type: OneOfJobEstproblemcostcalc
        """

        self._estproblemcostcalc = estproblemcostcalc

    @property
    def estproblemcostnormcalc(self):
        """Gets the estproblemcostnormcalc of this Job.  # noqa: E501


        :return: The estproblemcostnormcalc of this Job.  # noqa: E501
        :rtype: OneOfJobEstproblemcostnormcalc
        """
        return self._estproblemcostnormcalc

    @estproblemcostnormcalc.setter
    def estproblemcostnormcalc(self, estproblemcostnormcalc):
        """Sets the estproblemcostnormcalc of this Job.


        :param estproblemcostnormcalc: The estproblemcostnormcalc of this Job.  # noqa: E501
        :type: OneOfJobEstproblemcostnormcalc
        """

        self._estproblemcostnormcalc = estproblemcostnormcalc

    @property
    def estproblemtimecalc(self):
        """Gets the estproblemtimecalc of this Job.  # noqa: E501


        :return: The estproblemtimecalc of this Job.  # noqa: E501
        :rtype: OneOfJobEstproblemtimecalc
        """
        return self._estproblemtimecalc

    @estproblemtimecalc.setter
    def estproblemtimecalc(self, estproblemtimecalc):
        """Sets the estproblemtimecalc of this Job.


        :param estproblemtimecalc: The estproblemtimecalc of this Job.  # noqa: E501
        :type: OneOfJobEstproblemtimecalc
        """

        self._estproblemtimecalc = estproblemtimecalc

    @property
    def esttimesavecalc(self):
        """Gets the esttimesavecalc of this Job.  # noqa: E501


        :return: The esttimesavecalc of this Job.  # noqa: E501
        :rtype: OneOfJobEsttimesavecalc
        """
        return self._esttimesavecalc

    @esttimesavecalc.setter
    def esttimesavecalc(self, esttimesavecalc):
        """Sets the esttimesavecalc of this Job.


        :param esttimesavecalc: The esttimesavecalc of this Job.  # noqa: E501
        :type: OneOfJobEsttimesavecalc
        """

        self._esttimesavecalc = esttimesavecalc

    @property
    def finalinvoicetotalcalc(self):
        """Gets the finalinvoicetotalcalc of this Job.  # noqa: E501


        :return: The finalinvoicetotalcalc of this Job.  # noqa: E501
        :rtype: OneOfJobFinalinvoicetotalcalc
        """
        return self._finalinvoicetotalcalc

    @finalinvoicetotalcalc.setter
    def finalinvoicetotalcalc(self, finalinvoicetotalcalc):
        """Sets the finalinvoicetotalcalc of this Job.


        :param finalinvoicetotalcalc: The finalinvoicetotalcalc of this Job.  # noqa: E501
        :type: OneOfJobFinalinvoicetotalcalc
        """

        self._finalinvoicetotalcalc = finalinvoicetotalcalc

    @property
    def finalinvoicetotalnormcalc(self):
        """Gets the finalinvoicetotalnormcalc of this Job.  # noqa: E501


        :return: The finalinvoicetotalnormcalc of this Job.  # noqa: E501
        :rtype: OneOfJobFinalinvoicetotalnormcalc
        """
        return self._finalinvoicetotalnormcalc

    @finalinvoicetotalnormcalc.setter
    def finalinvoicetotalnormcalc(self, finalinvoicetotalnormcalc):
        """Sets the finalinvoicetotalnormcalc of this Job.


        :param finalinvoicetotalnormcalc: The finalinvoicetotalnormcalc of this Job.  # noqa: E501
        :type: OneOfJobFinalinvoicetotalnormcalc
        """

        self._finalinvoicetotalnormcalc = finalinvoicetotalnormcalc

    @property
    def hazardidnorptcalc(self):
        """Gets the hazardidnorptcalc of this Job.  # noqa: E501


        :return: The hazardidnorptcalc of this Job.  # noqa: E501
        :rtype: int
        """
        return self._hazardidnorptcalc

    @hazardidnorptcalc.setter
    def hazardidnorptcalc(self, hazardidnorptcalc):
        """Sets the hazardidnorptcalc of this Job.


        :param hazardidnorptcalc: The hazardidnorptcalc of this Job.  # noqa: E501
        :type: int
        """

        self._hazardidnorptcalc = hazardidnorptcalc

    @property
    def idrec(self):
        """Gets the idrec of this Job.  # noqa: E501


        :return: The idrec of this Job.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this Job.


        :param idrec: The idrec of this Job.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idreclastrigcalc(self):
        """Gets the idreclastrigcalc of this Job.  # noqa: E501


        :return: The idreclastrigcalc of this Job.  # noqa: E501
        :rtype: str
        """
        return self._idreclastrigcalc

    @idreclastrigcalc.setter
    def idreclastrigcalc(self, idreclastrigcalc):
        """Sets the idreclastrigcalc of this Job.


        :param idreclastrigcalc: The idreclastrigcalc of this Job.  # noqa: E501
        :type: str
        """

        self._idreclastrigcalc = idreclastrigcalc

    @property
    def idreclastrigcalctk(self):
        """Gets the idreclastrigcalctk of this Job.  # noqa: E501


        :return: The idreclastrigcalctk of this Job.  # noqa: E501
        :rtype: str
        """
        return self._idreclastrigcalctk

    @idreclastrigcalctk.setter
    def idreclastrigcalctk(self, idreclastrigcalctk):
        """Sets the idreclastrigcalctk of this Job.


        :param idreclastrigcalctk: The idreclastrigcalctk of this Job.  # noqa: E501
        :type: str
        """

        self._idreclastrigcalctk = idreclastrigcalctk

    @property
    def idrectub(self):
        """Gets the idrectub of this Job.  # noqa: E501


        :return: The idrectub of this Job.  # noqa: E501
        :rtype: str
        """
        return self._idrectub

    @idrectub.setter
    def idrectub(self, idrectub):
        """Sets the idrectub of this Job.


        :param idrectub: The idrectub of this Job.  # noqa: E501
        :type: str
        """

        self._idrectub = idrectub

    @property
    def idrectubtk(self):
        """Gets the idrectubtk of this Job.  # noqa: E501


        :return: The idrectubtk of this Job.  # noqa: E501
        :rtype: str
        """
        return self._idrectubtk

    @idrectubtk.setter
    def idrectubtk(self, idrectubtk):
        """Sets the idrectubtk of this Job.


        :param idrectubtk: The idrectubtk of this Job.  # noqa: E501
        :type: str
        """

        self._idrectubtk = idrectubtk

    @property
    def idrecwellbore(self):
        """Gets the idrecwellbore of this Job.  # noqa: E501


        :return: The idrecwellbore of this Job.  # noqa: E501
        :rtype: str
        """
        return self._idrecwellbore

    @idrecwellbore.setter
    def idrecwellbore(self, idrecwellbore):
        """Sets the idrecwellbore of this Job.


        :param idrecwellbore: The idrecwellbore of this Job.  # noqa: E501
        :type: str
        """

        self._idrecwellbore = idrecwellbore

    @property
    def idrecwellborecalc(self):
        """Gets the idrecwellborecalc of this Job.  # noqa: E501


        :return: The idrecwellborecalc of this Job.  # noqa: E501
        :rtype: str
        """
        return self._idrecwellborecalc

    @idrecwellborecalc.setter
    def idrecwellborecalc(self, idrecwellborecalc):
        """Sets the idrecwellborecalc of this Job.


        :param idrecwellborecalc: The idrecwellborecalc of this Job.  # noqa: E501
        :type: str
        """

        self._idrecwellborecalc = idrecwellborecalc

    @property
    def idrecwellborecalctk(self):
        """Gets the idrecwellborecalctk of this Job.  # noqa: E501


        :return: The idrecwellborecalctk of this Job.  # noqa: E501
        :rtype: str
        """
        return self._idrecwellborecalctk

    @idrecwellborecalctk.setter
    def idrecwellborecalctk(self, idrecwellborecalctk):
        """Sets the idrecwellborecalctk of this Job.


        :param idrecwellborecalctk: The idrecwellborecalctk of this Job.  # noqa: E501
        :type: str
        """

        self._idrecwellborecalctk = idrecwellborecalctk

    @property
    def idrecwellboretk(self):
        """Gets the idrecwellboretk of this Job.  # noqa: E501


        :return: The idrecwellboretk of this Job.  # noqa: E501
        :rtype: str
        """
        return self._idrecwellboretk

    @idrecwellboretk.setter
    def idrecwellboretk(self, idrecwellboretk):
        """Sets the idrecwellboretk of this Job.


        :param idrecwellboretk: The idrecwellboretk of this Job.  # noqa: E501
        :type: str
        """

        self._idrecwellboretk = idrecwellboretk

    @property
    def idwell(self):
        """Gets the idwell of this Job.  # noqa: E501


        :return: The idwell of this Job.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this Job.


        :param idwell: The idwell of this Job.  # noqa: E501
        :type: str
        """

        self._idwell = idwell

    @property
    def job_afes(self):
        """Gets the job_afes of this Job.  # noqa: E501


        :return: The job_afes of this Job.  # noqa: E501
        :rtype: list[JobAfe]
        """
        return self._job_afes

    @job_afes.setter
    def job_afes(self, job_afes):
        """Sets the job_afes of this Job.


        :param job_afes: The job_afes of this Job.  # noqa: E501
        :type: list[JobAfe]
        """

        self._job_afes = job_afes

    @property
    def job_approvals(self):
        """Gets the job_approvals of this Job.  # noqa: E501


        :return: The job_approvals of this Job.  # noqa: E501
        :rtype: list[JobApproval]
        """
        return self._job_approvals

    @job_approvals.setter
    def job_approvals(self, job_approvals):
        """Sets the job_approvals of this Job.


        :param job_approvals: The job_approvals of this Job.  # noqa: E501
        :type: list[JobApproval]
        """

        self._job_approvals = job_approvals

    @property
    def job_contacts(self):
        """Gets the job_contacts of this Job.  # noqa: E501


        :return: The job_contacts of this Job.  # noqa: E501
        :rtype: list[JobContact]
        """
        return self._job_contacts

    @job_contacts.setter
    def job_contacts(self, job_contacts):
        """Sets the job_contacts of this Job.


        :param job_contacts: The job_contacts of this Job.  # noqa: E501
        :type: list[JobContact]
        """

        self._job_contacts = job_contacts

    @property
    def job_dates(self):
        """Gets the job_dates of this Job.  # noqa: E501


        :return: The job_dates of this Job.  # noqa: E501
        :rtype: list[JobDate]
        """
        return self._job_dates

    @job_dates.setter
    def job_dates(self, job_dates):
        """Sets the job_dates of this Job.


        :param job_dates: The job_dates of this Job.  # noqa: E501
        :type: list[JobDate]
        """

        self._job_dates = job_dates

    @property
    def job_drill_bits(self):
        """Gets the job_drill_bits of this Job.  # noqa: E501


        :return: The job_drill_bits of this Job.  # noqa: E501
        :rtype: list[JobDrillBit]
        """
        return self._job_drill_bits

    @job_drill_bits.setter
    def job_drill_bits(self, job_drill_bits):
        """Sets the job_drill_bits of this Job.


        :param job_drill_bits: The job_drill_bits of this Job.  # noqa: E501
        :type: list[JobDrillBit]
        """

        self._job_drill_bits = job_drill_bits

    @property
    def job_drill_strings(self):
        """Gets the job_drill_strings of this Job.  # noqa: E501


        :return: The job_drill_strings of this Job.  # noqa: E501
        :rtype: list[JobDrillString]
        """
        return self._job_drill_strings

    @job_drill_strings.setter
    def job_drill_strings(self, job_drill_strings):
        """Sets the job_drill_strings of this Job.


        :param job_drill_strings: The job_drill_strings of this Job.  # noqa: E501
        :type: list[JobDrillString]
        """

        self._job_drill_strings = job_drill_strings

    @property
    def job_interval_lessons(self):
        """Gets the job_interval_lessons of this Job.  # noqa: E501


        :return: The job_interval_lessons of this Job.  # noqa: E501
        :rtype: list[JobIntervalLesson]
        """
        return self._job_interval_lessons

    @job_interval_lessons.setter
    def job_interval_lessons(self, job_interval_lessons):
        """Sets the job_interval_lessons of this Job.


        :param job_interval_lessons: The job_interval_lessons of this Job.  # noqa: E501
        :type: list[JobIntervalLesson]
        """

        self._job_interval_lessons = job_interval_lessons

    @property
    def job_interval_problems(self):
        """Gets the job_interval_problems of this Job.  # noqa: E501


        :return: The job_interval_problems of this Job.  # noqa: E501
        :rtype: list[JobIntervalProblem]
        """
        return self._job_interval_problems

    @job_interval_problems.setter
    def job_interval_problems(self, job_interval_problems):
        """Sets the job_interval_problems of this Job.


        :param job_interval_problems: The job_interval_problems of this Job.  # noqa: E501
        :type: list[JobIntervalProblem]
        """

        self._job_interval_problems = job_interval_problems

    @property
    def job_kicks(self):
        """Gets the job_kicks of this Job.  # noqa: E501


        :return: The job_kicks of this Job.  # noqa: E501
        :rtype: list[JobKick]
        """
        return self._job_kicks

    @job_kicks.setter
    def job_kicks(self, job_kicks):
        """Sets the job_kicks of this Job.


        :param job_kicks: The job_kicks of this Job.  # noqa: E501
        :type: list[JobKick]
        """

        self._job_kicks = job_kicks

    @property
    def job_lost_circs(self):
        """Gets the job_lost_circs of this Job.  # noqa: E501


        :return: The job_lost_circs of this Job.  # noqa: E501
        :rtype: list[JobLostCirc]
        """
        return self._job_lost_circs

    @job_lost_circs.setter
    def job_lost_circs(self, job_lost_circs):
        """Sets the job_lost_circs of this Job.


        :param job_lost_circs: The job_lost_circs of this Job.  # noqa: E501
        :type: list[JobLostCirc]
        """

        self._job_lost_circs = job_lost_circs

    @property
    def job_material_trans(self):
        """Gets the job_material_trans of this Job.  # noqa: E501


        :return: The job_material_trans of this Job.  # noqa: E501
        :rtype: list[JobMaterialTrans]
        """
        return self._job_material_trans

    @job_material_trans.setter
    def job_material_trans(self, job_material_trans):
        """Sets the job_material_trans of this Job.


        :param job_material_trans: The job_material_trans of this Job.  # noqa: E501
        :type: list[JobMaterialTrans]
        """

        self._job_material_trans = job_material_trans

    @property
    def job_mud_adds(self):
        """Gets the job_mud_adds of this Job.  # noqa: E501


        :return: The job_mud_adds of this Job.  # noqa: E501
        :rtype: list[JobMudAdd]
        """
        return self._job_mud_adds

    @job_mud_adds.setter
    def job_mud_adds(self, job_mud_adds):
        """Sets the job_mud_adds of this Job.


        :param job_mud_adds: The job_mud_adds of this Job.  # noqa: E501
        :type: list[JobMudAdd]
        """

        self._job_mud_adds = job_mud_adds

    @property
    def job_offlines(self):
        """Gets the job_offlines of this Job.  # noqa: E501


        :return: The job_offlines of this Job.  # noqa: E501
        :rtype: list[JobOffline]
        """
        return self._job_offlines

    @job_offlines.setter
    def job_offlines(self, job_offlines):
        """Sets the job_offlines of this Job.


        :param job_offlines: The job_offlines of this Job.  # noqa: E501
        :type: list[JobOffline]
        """

        self._job_offlines = job_offlines

    @property
    def job_other_circs(self):
        """Gets the job_other_circs of this Job.  # noqa: E501


        :return: The job_other_circs of this Job.  # noqa: E501
        :rtype: list[JobOtherCirc]
        """
        return self._job_other_circs

    @job_other_circs.setter
    def job_other_circs(self, job_other_circs):
        """Sets the job_other_circs of this Job.


        :param job_other_circs: The job_other_circs of this Job.  # noqa: E501
        :type: list[JobOtherCirc]
        """

        self._job_other_circs = job_other_circs

    @property
    def job_program_drill_params(self):
        """Gets the job_program_drill_params of this Job.  # noqa: E501


        :return: The job_program_drill_params of this Job.  # noqa: E501
        :rtype: list[JobProgramDrillParam]
        """
        return self._job_program_drill_params

    @job_program_drill_params.setter
    def job_program_drill_params(self, job_program_drill_params):
        """Sets the job_program_drill_params of this Job.


        :param job_program_drill_params: The job_program_drill_params of this Job.  # noqa: E501
        :type: list[JobProgramDrillParam]
        """

        self._job_program_drill_params = job_program_drill_params

    @property
    def job_program_geo_samples(self):
        """Gets the job_program_geo_samples of this Job.  # noqa: E501


        :return: The job_program_geo_samples of this Job.  # noqa: E501
        :rtype: list[JobProgramGeoSample]
        """
        return self._job_program_geo_samples

    @job_program_geo_samples.setter
    def job_program_geo_samples(self, job_program_geo_samples):
        """Sets the job_program_geo_samples of this Job.


        :param job_program_geo_samples: The job_program_geo_samples of this Job.  # noqa: E501
        :type: list[JobProgramGeoSample]
        """

        self._job_program_geo_samples = job_program_geo_samples

    @property
    def job_program_muds(self):
        """Gets the job_program_muds of this Job.  # noqa: E501


        :return: The job_program_muds of this Job.  # noqa: E501
        :rtype: list[JobProgramMud]
        """
        return self._job_program_muds

    @job_program_muds.setter
    def job_program_muds(self, job_program_muds):
        """Sets the job_program_muds of this Job.


        :param job_program_muds: The job_program_muds of this Job.  # noqa: E501
        :type: list[JobProgramMud]
        """

        self._job_program_muds = job_program_muds

    @property
    def job_program_phases(self):
        """Gets the job_program_phases of this Job.  # noqa: E501


        :return: The job_program_phases of this Job.  # noqa: E501
        :rtype: list[JobProgramPhase]
        """
        return self._job_program_phases

    @job_program_phases.setter
    def job_program_phases(self, job_program_phases):
        """Sets the job_program_phases of this Job.


        :param job_program_phases: The job_program_phases of this Job.  # noqa: E501
        :type: list[JobProgramPhase]
        """

        self._job_program_phases = job_program_phases

    @property
    def job_rental_items(self):
        """Gets the job_rental_items of this Job.  # noqa: E501


        :return: The job_rental_items of this Job.  # noqa: E501
        :rtype: list[JobRentalItem]
        """
        return self._job_rental_items

    @job_rental_items.setter
    def job_rental_items(self, job_rental_items):
        """Sets the job_rental_items of this Job.


        :param job_rental_items: The job_rental_items of this Job.  # noqa: E501
        :type: list[JobRentalItem]
        """

        self._job_rental_items = job_rental_items

    @property
    def job_reports(self):
        """Gets the job_reports of this Job.  # noqa: E501


        :return: The job_reports of this Job.  # noqa: E501
        :rtype: list[JobReport]
        """
        return self._job_reports

    @job_reports.setter
    def job_reports(self, job_reports):
        """Sets the job_reports of this Job.


        :param job_reports: The job_reports of this Job.  # noqa: E501
        :type: list[JobReport]
        """

        self._job_reports = job_reports

    @property
    def job_resources(self):
        """Gets the job_resources of this Job.  # noqa: E501


        :return: The job_resources of this Job.  # noqa: E501
        :rtype: list[JobResource]
        """
        return self._job_resources

    @job_resources.setter
    def job_resources(self, job_resources):
        """Sets the job_resources of this Job.


        :param job_resources: The job_resources of this Job.  # noqa: E501
        :type: list[JobResource]
        """

        self._job_resources = job_resources

    @property
    def job_rigs(self):
        """Gets the job_rigs of this Job.  # noqa: E501


        :return: The job_rigs of this Job.  # noqa: E501
        :rtype: list[JobRig]
        """
        return self._job_rigs

    @job_rigs.setter
    def job_rigs(self, job_rigs):
        """Sets the job_rigs of this Job.


        :param job_rigs: The job_rigs of this Job.  # noqa: E501
        :type: list[JobRig]
        """

        self._job_rigs = job_rigs

    @property
    def job_safety_chks(self):
        """Gets the job_safety_chks of this Job.  # noqa: E501


        :return: The job_safety_chks of this Job.  # noqa: E501
        :rtype: list[JobSafetyChk]
        """
        return self._job_safety_chks

    @job_safety_chks.setter
    def job_safety_chks(self, job_safety_chks):
        """Sets the job_safety_chks of this Job.


        :param job_safety_chks: The job_safety_chks of this Job.  # noqa: E501
        :type: list[JobSafetyChk]
        """

        self._job_safety_chks = job_safety_chks

    @property
    def job_safety_incidents(self):
        """Gets the job_safety_incidents of this Job.  # noqa: E501


        :return: The job_safety_incidents of this Job.  # noqa: E501
        :rtype: list[JobSafetyIncident]
        """
        return self._job_safety_incidents

    @job_safety_incidents.setter
    def job_safety_incidents(self, job_safety_incidents):
        """Sets the job_safety_incidents of this Job.


        :param job_safety_incidents: The job_safety_incidents of this Job.  # noqa: E501
        :type: list[JobSafetyIncident]
        """

        self._job_safety_incidents = job_safety_incidents

    @property
    def job_service_contracts(self):
        """Gets the job_service_contracts of this Job.  # noqa: E501


        :return: The job_service_contracts of this Job.  # noqa: E501
        :rtype: list[JobServiceContract]
        """
        return self._job_service_contracts

    @job_service_contracts.setter
    def job_service_contracts(self, job_service_contracts):
        """Sets the job_service_contracts of this Job.


        :param job_service_contracts: The job_service_contracts of this Job.  # noqa: E501
        :type: list[JobServiceContract]
        """

        self._job_service_contracts = job_service_contracts

    @property
    def job_supplies(self):
        """Gets the job_supplies of this Job.  # noqa: E501


        :return: The job_supplies of this Job.  # noqa: E501
        :rtype: list[JobSupply]
        """
        return self._job_supplies

    @job_supplies.setter
    def job_supplies(self, job_supplies):
        """Sets the job_supplies of this Job.


        :param job_supplies: The job_supplies of this Job.  # noqa: E501
        :type: list[JobSupply]
        """

        self._job_supplies = job_supplies

    @property
    def job_support_ves(self):
        """Gets the job_support_ves of this Job.  # noqa: E501


        :return: The job_support_ves of this Job.  # noqa: E501
        :rtype: list[JobSupportVes]
        """
        return self._job_support_ves

    @job_support_ves.setter
    def job_support_ves(self, job_support_ves):
        """Sets the job_support_ves of this Job.


        :param job_support_ves: The job_support_ves of this Job.  # noqa: E501
        :type: list[JobSupportVes]
        """

        self._job_support_ves = job_support_ves

    @property
    def job_wellbore_gradients(self):
        """Gets the job_wellbore_gradients of this Job.  # noqa: E501


        :return: The job_wellbore_gradients of this Job.  # noqa: E501
        :rtype: list[JobWellboreGradient]
        """
        return self._job_wellbore_gradients

    @job_wellbore_gradients.setter
    def job_wellbore_gradients(self, job_wellbore_gradients):
        """Sets the job_wellbore_gradients of this Job.


        :param job_wellbore_gradients: The job_wellbore_gradients of this Job.  # noqa: E501
        :type: list[JobWellboreGradient]
        """

        self._job_wellbore_gradients = job_wellbore_gradients

    @property
    def jobida(self):
        """Gets the jobida of this Job.  # noqa: E501


        :return: The jobida of this Job.  # noqa: E501
        :rtype: str
        """
        return self._jobida

    @jobida.setter
    def jobida(self, jobida):
        """Sets the jobida of this Job.


        :param jobida: The jobida of this Job.  # noqa: E501
        :type: str
        """

        self._jobida = jobida

    @property
    def jobidb(self):
        """Gets the jobidb of this Job.  # noqa: E501


        :return: The jobidb of this Job.  # noqa: E501
        :rtype: str
        """
        return self._jobidb

    @jobidb.setter
    def jobidb(self, jobidb):
        """Sets the jobidb of this Job.


        :param jobidb: The jobidb of this Job.  # noqa: E501
        :type: str
        """

        self._jobidb = jobidb

    @property
    def jobidc(self):
        """Gets the jobidc of this Job.  # noqa: E501


        :return: The jobidc of this Job.  # noqa: E501
        :rtype: str
        """
        return self._jobidc

    @jobidc.setter
    def jobidc(self, jobidc):
        """Sets the jobidc of this Job.


        :param jobidc: The jobidc of this Job.  # noqa: E501
        :type: str
        """

        self._jobidc = jobidc

    @property
    def jobsubtyp(self):
        """Gets the jobsubtyp of this Job.  # noqa: E501


        :return: The jobsubtyp of this Job.  # noqa: E501
        :rtype: str
        """
        return self._jobsubtyp

    @jobsubtyp.setter
    def jobsubtyp(self, jobsubtyp):
        """Sets the jobsubtyp of this Job.


        :param jobsubtyp: The jobsubtyp of this Job.  # noqa: E501
        :type: str
        """

        self._jobsubtyp = jobsubtyp

    @property
    def jobsupplycostcalc(self):
        """Gets the jobsupplycostcalc of this Job.  # noqa: E501


        :return: The jobsupplycostcalc of this Job.  # noqa: E501
        :rtype: OneOfJobJobsupplycostcalc
        """
        return self._jobsupplycostcalc

    @jobsupplycostcalc.setter
    def jobsupplycostcalc(self, jobsupplycostcalc):
        """Sets the jobsupplycostcalc of this Job.


        :param jobsupplycostcalc: The jobsupplycostcalc of this Job.  # noqa: E501
        :type: OneOfJobJobsupplycostcalc
        """

        self._jobsupplycostcalc = jobsupplycostcalc

    @property
    def jobsupplycostnormcalc(self):
        """Gets the jobsupplycostnormcalc of this Job.  # noqa: E501


        :return: The jobsupplycostnormcalc of this Job.  # noqa: E501
        :rtype: OneOfJobJobsupplycostnormcalc
        """
        return self._jobsupplycostnormcalc

    @jobsupplycostnormcalc.setter
    def jobsupplycostnormcalc(self, jobsupplycostnormcalc):
        """Sets the jobsupplycostnormcalc of this Job.


        :param jobsupplycostnormcalc: The jobsupplycostnormcalc of this Job.  # noqa: E501
        :type: OneOfJobJobsupplycostnormcalc
        """

        self._jobsupplycostnormcalc = jobsupplycostnormcalc

    @property
    def jobtyp(self):
        """Gets the jobtyp of this Job.  # noqa: E501


        :return: The jobtyp of this Job.  # noqa: E501
        :rtype: str
        """
        return self._jobtyp

    @jobtyp.setter
    def jobtyp(self, jobtyp):
        """Sets the jobtyp of this Job.


        :param jobtyp: The jobtyp of this Job.  # noqa: E501
        :type: str
        """

        self._jobtyp = jobtyp

    @property
    def mudcostcalc(self):
        """Gets the mudcostcalc of this Job.  # noqa: E501


        :return: The mudcostcalc of this Job.  # noqa: E501
        :rtype: OneOfJobMudcostcalc
        """
        return self._mudcostcalc

    @mudcostcalc.setter
    def mudcostcalc(self, mudcostcalc):
        """Sets the mudcostcalc of this Job.


        :param mudcostcalc: The mudcostcalc of this Job.  # noqa: E501
        :type: OneOfJobMudcostcalc
        """

        self._mudcostcalc = mudcostcalc

    @property
    def mudcostnormcalc(self):
        """Gets the mudcostnormcalc of this Job.  # noqa: E501


        :return: The mudcostnormcalc of this Job.  # noqa: E501
        :rtype: OneOfJobMudcostnormcalc
        """
        return self._mudcostnormcalc

    @mudcostnormcalc.setter
    def mudcostnormcalc(self, mudcostnormcalc):
        """Sets the mudcostnormcalc of this Job.


        :param mudcostnormcalc: The mudcostnormcalc of this Job.  # noqa: E501
        :type: OneOfJobMudcostnormcalc
        """

        self._mudcostnormcalc = mudcostnormcalc

    @property
    def mudcostperdepthcalc(self):
        """Gets the mudcostperdepthcalc of this Job.  # noqa: E501


        :return: The mudcostperdepthcalc of this Job.  # noqa: E501
        :rtype: OneOfJobMudcostperdepthcalc
        """
        return self._mudcostperdepthcalc

    @mudcostperdepthcalc.setter
    def mudcostperdepthcalc(self, mudcostperdepthcalc):
        """Sets the mudcostperdepthcalc of this Job.


        :param mudcostperdepthcalc: The mudcostperdepthcalc of this Job.  # noqa: E501
        :type: OneOfJobMudcostperdepthcalc
        """

        self._mudcostperdepthcalc = mudcostperdepthcalc

    @property
    def mudcostperdepthnormcalc(self):
        """Gets the mudcostperdepthnormcalc of this Job.  # noqa: E501


        :return: The mudcostperdepthnormcalc of this Job.  # noqa: E501
        :rtype: OneOfJobMudcostperdepthnormcalc
        """
        return self._mudcostperdepthnormcalc

    @mudcostperdepthnormcalc.setter
    def mudcostperdepthnormcalc(self, mudcostperdepthnormcalc):
        """Sets the mudcostperdepthnormcalc of this Job.


        :param mudcostperdepthnormcalc: The mudcostperdepthnormcalc of this Job.  # noqa: E501
        :type: OneOfJobMudcostperdepthnormcalc
        """

        self._mudcostperdepthnormcalc = mudcostperdepthnormcalc

    @property
    def muddensitymaxcalc(self):
        """Gets the muddensitymaxcalc of this Job.  # noqa: E501


        :return: The muddensitymaxcalc of this Job.  # noqa: E501
        :rtype: OneOfJobMuddensitymaxcalc
        """
        return self._muddensitymaxcalc

    @muddensitymaxcalc.setter
    def muddensitymaxcalc(self, muddensitymaxcalc):
        """Sets the muddensitymaxcalc of this Job.


        :param muddensitymaxcalc: The muddensitymaxcalc of this Job.  # noqa: E501
        :type: OneOfJobMuddensitymaxcalc
        """

        self._muddensitymaxcalc = muddensitymaxcalc

    @property
    def muddensitymincalc(self):
        """Gets the muddensitymincalc of this Job.  # noqa: E501


        :return: The muddensitymincalc of this Job.  # noqa: E501
        :rtype: OneOfJobMuddensitymincalc
        """
        return self._muddensitymincalc

    @muddensitymincalc.setter
    def muddensitymincalc(self, muddensitymincalc):
        """Sets the muddensitymincalc of this Job.


        :param muddensitymincalc: The muddensitymincalc of this Job.  # noqa: E501
        :type: OneOfJobMuddensitymincalc
        """

        self._muddensitymincalc = muddensitymincalc

    @property
    def mudtypcalc(self):
        """Gets the mudtypcalc of this Job.  # noqa: E501


        :return: The mudtypcalc of this Job.  # noqa: E501
        :rtype: str
        """
        return self._mudtypcalc

    @mudtypcalc.setter
    def mudtypcalc(self, mudtypcalc):
        """Sets the mudtypcalc of this Job.


        :param mudtypcalc: The mudtypcalc of this Job.  # noqa: E501
        :type: str
        """

        self._mudtypcalc = mudtypcalc

    @property
    def objective(self):
        """Gets the objective of this Job.  # noqa: E501


        :return: The objective of this Job.  # noqa: E501
        :rtype: str
        """
        return self._objective

    @objective.setter
    def objective(self, objective):
        """Sets the objective of this Job.


        :param objective: The objective of this Job.  # noqa: E501
        :type: str
        """

        self._objective = objective

    @property
    def objectivegeo(self):
        """Gets the objectivegeo of this Job.  # noqa: E501


        :return: The objectivegeo of this Job.  # noqa: E501
        :rtype: str
        """
        return self._objectivegeo

    @objectivegeo.setter
    def objectivegeo(self, objectivegeo):
        """Sets the objectivegeo of this Job.


        :param objectivegeo: The objectivegeo of this Job.  # noqa: E501
        :type: str
        """

        self._objectivegeo = objectivegeo

    @property
    def pctproblemtimecalc(self):
        """Gets the pctproblemtimecalc of this Job.  # noqa: E501


        :return: The pctproblemtimecalc of this Job.  # noqa: E501
        :rtype: OneOfJobPctproblemtimecalc
        """
        return self._pctproblemtimecalc

    @pctproblemtimecalc.setter
    def pctproblemtimecalc(self, pctproblemtimecalc):
        """Sets the pctproblemtimecalc of this Job.


        :param pctproblemtimecalc: The pctproblemtimecalc of this Job.  # noqa: E501
        :type: OneOfJobPctproblemtimecalc
        """

        self._pctproblemtimecalc = pctproblemtimecalc

    @property
    def percentdepthrotatingcalc(self):
        """Gets the percentdepthrotatingcalc of this Job.  # noqa: E501


        :return: The percentdepthrotatingcalc of this Job.  # noqa: E501
        :rtype: OneOfJobPercentdepthrotatingcalc
        """
        return self._percentdepthrotatingcalc

    @percentdepthrotatingcalc.setter
    def percentdepthrotatingcalc(self, percentdepthrotatingcalc):
        """Sets the percentdepthrotatingcalc of this Job.


        :param percentdepthrotatingcalc: The percentdepthrotatingcalc of this Job.  # noqa: E501
        :type: OneOfJobPercentdepthrotatingcalc
        """

        self._percentdepthrotatingcalc = percentdepthrotatingcalc

    @property
    def percentdepthslidingcalc(self):
        """Gets the percentdepthslidingcalc of this Job.  # noqa: E501


        :return: The percentdepthslidingcalc of this Job.  # noqa: E501
        :rtype: OneOfJobPercentdepthslidingcalc
        """
        return self._percentdepthslidingcalc

    @percentdepthslidingcalc.setter
    def percentdepthslidingcalc(self, percentdepthslidingcalc):
        """Sets the percentdepthslidingcalc of this Job.


        :param percentdepthslidingcalc: The percentdepthslidingcalc of this Job.  # noqa: E501
        :type: OneOfJobPercentdepthslidingcalc
        """

        self._percentdepthslidingcalc = percentdepthslidingcalc

    @property
    def percenttmrotatingcalc(self):
        """Gets the percenttmrotatingcalc of this Job.  # noqa: E501


        :return: The percenttmrotatingcalc of this Job.  # noqa: E501
        :rtype: OneOfJobPercenttmrotatingcalc
        """
        return self._percenttmrotatingcalc

    @percenttmrotatingcalc.setter
    def percenttmrotatingcalc(self, percenttmrotatingcalc):
        """Sets the percenttmrotatingcalc of this Job.


        :param percenttmrotatingcalc: The percenttmrotatingcalc of this Job.  # noqa: E501
        :type: OneOfJobPercenttmrotatingcalc
        """

        self._percenttmrotatingcalc = percenttmrotatingcalc

    @property
    def percenttmslidingcalc(self):
        """Gets the percenttmslidingcalc of this Job.  # noqa: E501


        :return: The percenttmslidingcalc of this Job.  # noqa: E501
        :rtype: OneOfJobPercenttmslidingcalc
        """
        return self._percenttmslidingcalc

    @percenttmslidingcalc.setter
    def percenttmslidingcalc(self, percenttmslidingcalc):
        """Sets the percenttmslidingcalc of this Job.


        :param percenttmslidingcalc: The percenttmslidingcalc of this Job.  # noqa: E501
        :type: OneOfJobPercenttmslidingcalc
        """

        self._percenttmslidingcalc = percenttmslidingcalc

    @property
    def programmuddensitymaxcalc(self):
        """Gets the programmuddensitymaxcalc of this Job.  # noqa: E501


        :return: The programmuddensitymaxcalc of this Job.  # noqa: E501
        :rtype: OneOfJobProgrammuddensitymaxcalc
        """
        return self._programmuddensitymaxcalc

    @programmuddensitymaxcalc.setter
    def programmuddensitymaxcalc(self, programmuddensitymaxcalc):
        """Sets the programmuddensitymaxcalc of this Job.


        :param programmuddensitymaxcalc: The programmuddensitymaxcalc of this Job.  # noqa: E501
        :type: OneOfJobProgrammuddensitymaxcalc
        """

        self._programmuddensitymaxcalc = programmuddensitymaxcalc

    @property
    def programmuddensitymincalc(self):
        """Gets the programmuddensitymincalc of this Job.  # noqa: E501


        :return: The programmuddensitymincalc of this Job.  # noqa: E501
        :rtype: OneOfJobProgrammuddensitymincalc
        """
        return self._programmuddensitymincalc

    @programmuddensitymincalc.setter
    def programmuddensitymincalc(self, programmuddensitymincalc):
        """Sets the programmuddensitymincalc of this Job.


        :param programmuddensitymincalc: The programmuddensitymincalc of this Job.  # noqa: E501
        :type: OneOfJobProgrammuddensitymincalc
        """

        self._programmuddensitymincalc = programmuddensitymincalc

    @property
    def projectrefnumbercalc(self):
        """Gets the projectrefnumbercalc of this Job.  # noqa: E501


        :return: The projectrefnumbercalc of this Job.  # noqa: E501
        :rtype: str
        """
        return self._projectrefnumbercalc

    @projectrefnumbercalc.setter
    def projectrefnumbercalc(self, projectrefnumbercalc):
        """Sets the projectrefnumbercalc of this Job.


        :param projectrefnumbercalc: The projectrefnumbercalc of this Job.  # noqa: E501
        :type: str
        """

        self._projectrefnumbercalc = projectrefnumbercalc

    @property
    def rateactualcond(self):
        """Gets the rateactualcond of this Job.  # noqa: E501


        :return: The rateactualcond of this Job.  # noqa: E501
        :rtype: OneOfJobRateactualcond
        """
        return self._rateactualcond

    @rateactualcond.setter
    def rateactualcond(self, rateactualcond):
        """Sets the rateactualcond of this Job.


        :param rateactualcond: The rateactualcond of this Job.  # noqa: E501
        :type: OneOfJobRateactualcond
        """

        self._rateactualcond = rateactualcond

    @property
    def rateactualgas(self):
        """Gets the rateactualgas of this Job.  # noqa: E501


        :return: The rateactualgas of this Job.  # noqa: E501
        :rtype: OneOfJobRateactualgas
        """
        return self._rateactualgas

    @rateactualgas.setter
    def rateactualgas(self, rateactualgas):
        """Sets the rateactualgas of this Job.


        :param rateactualgas: The rateactualgas of this Job.  # noqa: E501
        :type: OneOfJobRateactualgas
        """

        self._rateactualgas = rateactualgas

    @property
    def rateactualoil(self):
        """Gets the rateactualoil of this Job.  # noqa: E501


        :return: The rateactualoil of this Job.  # noqa: E501
        :rtype: OneOfJobRateactualoil
        """
        return self._rateactualoil

    @rateactualoil.setter
    def rateactualoil(self, rateactualoil):
        """Sets the rateactualoil of this Job.


        :param rateactualoil: The rateactualoil of this Job.  # noqa: E501
        :type: OneOfJobRateactualoil
        """

        self._rateactualoil = rateactualoil

    @property
    def rateactualwater(self):
        """Gets the rateactualwater of this Job.  # noqa: E501


        :return: The rateactualwater of this Job.  # noqa: E501
        :rtype: OneOfJobRateactualwater
        """
        return self._rateactualwater

    @rateactualwater.setter
    def rateactualwater(self, rateactualwater):
        """Sets the rateactualwater of this Job.


        :param rateactualwater: The rateactualwater of this Job.  # noqa: E501
        :type: OneOfJobRateactualwater
        """

        self._rateactualwater = rateactualwater

    @property
    def ratetargetcond(self):
        """Gets the ratetargetcond of this Job.  # noqa: E501


        :return: The ratetargetcond of this Job.  # noqa: E501
        :rtype: OneOfJobRatetargetcond
        """
        return self._ratetargetcond

    @ratetargetcond.setter
    def ratetargetcond(self, ratetargetcond):
        """Sets the ratetargetcond of this Job.


        :param ratetargetcond: The ratetargetcond of this Job.  # noqa: E501
        :type: OneOfJobRatetargetcond
        """

        self._ratetargetcond = ratetargetcond

    @property
    def ratetargetgas(self):
        """Gets the ratetargetgas of this Job.  # noqa: E501


        :return: The ratetargetgas of this Job.  # noqa: E501
        :rtype: OneOfJobRatetargetgas
        """
        return self._ratetargetgas

    @ratetargetgas.setter
    def ratetargetgas(self, ratetargetgas):
        """Sets the ratetargetgas of this Job.


        :param ratetargetgas: The ratetargetgas of this Job.  # noqa: E501
        :type: OneOfJobRatetargetgas
        """

        self._ratetargetgas = ratetargetgas

    @property
    def ratetargetoil(self):
        """Gets the ratetargetoil of this Job.  # noqa: E501


        :return: The ratetargetoil of this Job.  # noqa: E501
        :rtype: OneOfJobRatetargetoil
        """
        return self._ratetargetoil

    @ratetargetoil.setter
    def ratetargetoil(self, ratetargetoil):
        """Sets the ratetargetoil of this Job.


        :param ratetargetoil: The ratetargetoil of this Job.  # noqa: E501
        :type: OneOfJobRatetargetoil
        """

        self._ratetargetoil = ratetargetoil

    @property
    def ratetargetwater(self):
        """Gets the ratetargetwater of this Job.  # noqa: E501


        :return: The ratetargetwater of this Job.  # noqa: E501
        :rtype: OneOfJobRatetargetwater
        """
        return self._ratetargetwater

    @ratetargetwater.setter
    def ratetargetwater(self, ratetargetwater):
        """Sets the ratetargetwater of this Job.


        :param ratetargetwater: The ratetargetwater of this Job.  # noqa: E501
        :type: OneOfJobRatetargetwater
        """

        self._ratetargetwater = ratetargetwater

    @property
    def ratiodepthactualplancalc(self):
        """Gets the ratiodepthactualplancalc of this Job.  # noqa: E501


        :return: The ratiodepthactualplancalc of this Job.  # noqa: E501
        :rtype: OneOfJobRatiodepthactualplancalc
        """
        return self._ratiodepthactualplancalc

    @ratiodepthactualplancalc.setter
    def ratiodepthactualplancalc(self, ratiodepthactualplancalc):
        """Sets the ratiodepthactualplancalc of this Job.


        :param ratiodepthactualplancalc: The ratiodepthactualplancalc of this Job.  # noqa: E501
        :type: OneOfJobRatiodepthactualplancalc
        """

        self._ratiodepthactualplancalc = ratiodepthactualplancalc

    @property
    def ratiodepthactualtargetcalc(self):
        """Gets the ratiodepthactualtargetcalc of this Job.  # noqa: E501


        :return: The ratiodepthactualtargetcalc of this Job.  # noqa: E501
        :rtype: OneOfJobRatiodepthactualtargetcalc
        """
        return self._ratiodepthactualtargetcalc

    @ratiodepthactualtargetcalc.setter
    def ratiodepthactualtargetcalc(self, ratiodepthactualtargetcalc):
        """Sets the ratiodepthactualtargetcalc of this Job.


        :param ratiodepthactualtargetcalc: The ratiodepthactualtargetcalc of this Job.  # noqa: E501
        :type: OneOfJobRatiodepthactualtargetcalc
        """

        self._ratiodepthactualtargetcalc = ratiodepthactualtargetcalc

    @property
    def ratiodurtimelogrefhourscalc(self):
        """Gets the ratiodurtimelogrefhourscalc of this Job.  # noqa: E501


        :return: The ratiodurtimelogrefhourscalc of this Job.  # noqa: E501
        :rtype: OneOfJobRatiodurtimelogrefhourscalc
        """
        return self._ratiodurtimelogrefhourscalc

    @ratiodurtimelogrefhourscalc.setter
    def ratiodurtimelogrefhourscalc(self, ratiodurtimelogrefhourscalc):
        """Sets the ratiodurtimelogrefhourscalc of this Job.


        :param ratiodurtimelogrefhourscalc: The ratiodurtimelogrefhourscalc of this Job.  # noqa: E501
        :type: OneOfJobRatiodurtimelogrefhourscalc
        """

        self._ratiodurtimelogrefhourscalc = ratiodurtimelogrefhourscalc

    @property
    def reportnocalc(self):
        """Gets the reportnocalc of this Job.  # noqa: E501


        :return: The reportnocalc of this Job.  # noqa: E501
        :rtype: OneOfJobReportnocalc
        """
        return self._reportnocalc

    @reportnocalc.setter
    def reportnocalc(self, reportnocalc):
        """Sets the reportnocalc of this Job.


        :param reportnocalc: The reportnocalc of this Job.  # noqa: E501
        :type: OneOfJobReportnocalc
        """

        self._reportnocalc = reportnocalc

    @property
    def responsiblegrp1(self):
        """Gets the responsiblegrp1 of this Job.  # noqa: E501


        :return: The responsiblegrp1 of this Job.  # noqa: E501
        :rtype: str
        """
        return self._responsiblegrp1

    @responsiblegrp1.setter
    def responsiblegrp1(self, responsiblegrp1):
        """Sets the responsiblegrp1 of this Job.


        :param responsiblegrp1: The responsiblegrp1 of this Job.  # noqa: E501
        :type: str
        """

        self._responsiblegrp1 = responsiblegrp1

    @property
    def responsiblegrp2(self):
        """Gets the responsiblegrp2 of this Job.  # noqa: E501


        :return: The responsiblegrp2 of this Job.  # noqa: E501
        :rtype: str
        """
        return self._responsiblegrp2

    @responsiblegrp2.setter
    def responsiblegrp2(self, responsiblegrp2):
        """Sets the responsiblegrp2 of this Job.


        :param responsiblegrp2: The responsiblegrp2 of this Job.  # noqa: E501
        :type: str
        """

        self._responsiblegrp2 = responsiblegrp2

    @property
    def responsiblegrp3(self):
        """Gets the responsiblegrp3 of this Job.  # noqa: E501


        :return: The responsiblegrp3 of this Job.  # noqa: E501
        :rtype: str
        """
        return self._responsiblegrp3

    @responsiblegrp3.setter
    def responsiblegrp3(self, responsiblegrp3):
        """Sets the responsiblegrp3 of this Job.


        :param responsiblegrp3: The responsiblegrp3 of this Job.  # noqa: E501
        :type: str
        """

        self._responsiblegrp3 = responsiblegrp3

    @property
    def resulttechnical(self):
        """Gets the resulttechnical of this Job.  # noqa: E501


        :return: The resulttechnical of this Job.  # noqa: E501
        :rtype: str
        """
        return self._resulttechnical

    @resulttechnical.setter
    def resulttechnical(self, resulttechnical):
        """Sets the resulttechnical of this Job.


        :param resulttechnical: The resulttechnical of this Job.  # noqa: E501
        :type: str
        """

        self._resulttechnical = resulttechnical

    @property
    def ropavgfromspudcalc(self):
        """Gets the ropavgfromspudcalc of this Job.  # noqa: E501


        :return: The ropavgfromspudcalc of this Job.  # noqa: E501
        :rtype: OneOfJobRopavgfromspudcalc
        """
        return self._ropavgfromspudcalc

    @ropavgfromspudcalc.setter
    def ropavgfromspudcalc(self, ropavgfromspudcalc):
        """Sets the ropavgfromspudcalc of this Job.


        :param ropavgfromspudcalc: The ropavgfromspudcalc of this Job.  # noqa: E501
        :type: OneOfJobRopavgfromspudcalc
        """

        self._ropavgfromspudcalc = ropavgfromspudcalc

    @property
    def ropcalc(self):
        """Gets the ropcalc of this Job.  # noqa: E501


        :return: The ropcalc of this Job.  # noqa: E501
        :rtype: OneOfJobRopcalc
        """
        return self._ropcalc

    @ropcalc.setter
    def ropcalc(self, ropcalc):
        """Sets the ropcalc of this Job.


        :param ropcalc: The ropcalc of this Job.  # noqa: E501
        :type: OneOfJobRopcalc
        """

        self._ropcalc = ropcalc

    @property
    def roprotatingcalc(self):
        """Gets the roprotatingcalc of this Job.  # noqa: E501


        :return: The roprotatingcalc of this Job.  # noqa: E501
        :rtype: OneOfJobRoprotatingcalc
        """
        return self._roprotatingcalc

    @roprotatingcalc.setter
    def roprotatingcalc(self, roprotatingcalc):
        """Sets the roprotatingcalc of this Job.


        :param roprotatingcalc: The roprotatingcalc of this Job.  # noqa: E501
        :type: OneOfJobRoprotatingcalc
        """

        self._roprotatingcalc = roprotatingcalc

    @property
    def ropslidingcalc(self):
        """Gets the ropslidingcalc of this Job.  # noqa: E501


        :return: The ropslidingcalc of this Job.  # noqa: E501
        :rtype: OneOfJobRopslidingcalc
        """
        return self._ropslidingcalc

    @ropslidingcalc.setter
    def ropslidingcalc(self, ropslidingcalc):
        """Sets the ropslidingcalc of this Job.


        :param ropslidingcalc: The ropslidingcalc of this Job.  # noqa: E501
        :type: OneOfJobRopslidingcalc
        """

        self._ropslidingcalc = ropslidingcalc

    @property
    def ropspudtimelogcalc(self):
        """Gets the ropspudtimelogcalc of this Job.  # noqa: E501


        :return: The ropspudtimelogcalc of this Job.  # noqa: E501
        :rtype: OneOfJobRopspudtimelogcalc
        """
        return self._ropspudtimelogcalc

    @ropspudtimelogcalc.setter
    def ropspudtimelogcalc(self, ropspudtimelogcalc):
        """Sets the ropspudtimelogcalc of this Job.


        :param ropspudtimelogcalc: The ropspudtimelogcalc of this Job.  # noqa: E501
        :type: OneOfJobRopspudtimelogcalc
        """

        self._ropspudtimelogcalc = ropspudtimelogcalc

    @property
    def roptimelogcalc(self):
        """Gets the roptimelogcalc of this Job.  # noqa: E501


        :return: The roptimelogcalc of this Job.  # noqa: E501
        :rtype: OneOfJobRoptimelogcalc
        """
        return self._roptimelogcalc

    @roptimelogcalc.setter
    def roptimelogcalc(self, roptimelogcalc):
        """Sets the roptimelogcalc of this Job.


        :param roptimelogcalc: The roptimelogcalc of this Job.  # noqa: E501
        :type: OneOfJobRoptimelogcalc
        """

        self._roptimelogcalc = roptimelogcalc

    @property
    def safetyincnocalc(self):
        """Gets the safetyincnocalc of this Job.  # noqa: E501


        :return: The safetyincnocalc of this Job.  # noqa: E501
        :rtype: OneOfJobSafetyincnocalc
        """
        return self._safetyincnocalc

    @safetyincnocalc.setter
    def safetyincnocalc(self, safetyincnocalc):
        """Sets the safetyincnocalc of this Job.


        :param safetyincnocalc: The safetyincnocalc of this Job.  # noqa: E501
        :type: OneOfJobSafetyincnocalc
        """

        self._safetyincnocalc = safetyincnocalc

    @property
    def safetyincreportnocalc(self):
        """Gets the safetyincreportnocalc of this Job.  # noqa: E501


        :return: The safetyincreportnocalc of this Job.  # noqa: E501
        :rtype: OneOfJobSafetyincreportnocalc
        """
        return self._safetyincreportnocalc

    @safetyincreportnocalc.setter
    def safetyincreportnocalc(self, safetyincreportnocalc):
        """Sets the safetyincreportnocalc of this Job.


        :param safetyincreportnocalc: The safetyincreportnocalc of this Job.  # noqa: E501
        :type: OneOfJobSafetyincreportnocalc
        """

        self._safetyincreportnocalc = safetyincreportnocalc

    @property
    def status1(self):
        """Gets the status1 of this Job.  # noqa: E501


        :return: The status1 of this Job.  # noqa: E501
        :rtype: str
        """
        return self._status1

    @status1.setter
    def status1(self, status1):
        """Sets the status1 of this Job.


        :param status1: The status1 of this Job.  # noqa: E501
        :type: str
        """

        self._status1 = status1

    @property
    def status2(self):
        """Gets the status2 of this Job.  # noqa: E501


        :return: The status2 of this Job.  # noqa: E501
        :rtype: str
        """
        return self._status2

    @status2.setter
    def status2(self, status2):
        """Sets the status2 of this Job.


        :param status2: The status2 of this Job.  # noqa: E501
        :type: str
        """

        self._status2 = status2

    @property
    def summary(self):
        """Gets the summary of this Job.  # noqa: E501


        :return: The summary of this Job.  # noqa: E501
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this Job.


        :param summary: The summary of this Job.  # noqa: E501
        :type: str
        """

        self._summary = summary

    @property
    def summarygeo(self):
        """Gets the summarygeo of this Job.  # noqa: E501


        :return: The summarygeo of this Job.  # noqa: E501
        :rtype: str
        """
        return self._summarygeo

    @summarygeo.setter
    def summarygeo(self, summarygeo):
        """Sets the summarygeo of this Job.


        :param summarygeo: The summarygeo of this Job.  # noqa: E501
        :type: str
        """

        self._summarygeo = summarygeo

    @property
    def syscreatedate(self):
        """Gets the syscreatedate of this Job.  # noqa: E501


        :return: The syscreatedate of this Job.  # noqa: E501
        :rtype: datetime
        """
        return self._syscreatedate

    @syscreatedate.setter
    def syscreatedate(self, syscreatedate):
        """Sets the syscreatedate of this Job.


        :param syscreatedate: The syscreatedate of this Job.  # noqa: E501
        :type: datetime
        """

        self._syscreatedate = syscreatedate

    @property
    def syscreateuser(self):
        """Gets the syscreateuser of this Job.  # noqa: E501


        :return: The syscreateuser of this Job.  # noqa: E501
        :rtype: str
        """
        return self._syscreateuser

    @syscreateuser.setter
    def syscreateuser(self, syscreateuser):
        """Sets the syscreateuser of this Job.


        :param syscreateuser: The syscreateuser of this Job.  # noqa: E501
        :type: str
        """

        self._syscreateuser = syscreateuser

    @property
    def syslockchildren(self):
        """Gets the syslockchildren of this Job.  # noqa: E501


        :return: The syslockchildren of this Job.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildren

    @syslockchildren.setter
    def syslockchildren(self, syslockchildren):
        """Sets the syslockchildren of this Job.


        :param syslockchildren: The syslockchildren of this Job.  # noqa: E501
        :type: int
        """

        self._syslockchildren = syslockchildren

    @property
    def syslockchildrenui(self):
        """Gets the syslockchildrenui of this Job.  # noqa: E501


        :return: The syslockchildrenui of this Job.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildrenui

    @syslockchildrenui.setter
    def syslockchildrenui(self, syslockchildrenui):
        """Sets the syslockchildrenui of this Job.


        :param syslockchildrenui: The syslockchildrenui of this Job.  # noqa: E501
        :type: int
        """

        self._syslockchildrenui = syslockchildrenui

    @property
    def syslockdate(self):
        """Gets the syslockdate of this Job.  # noqa: E501


        :return: The syslockdate of this Job.  # noqa: E501
        :rtype: datetime
        """
        return self._syslockdate

    @syslockdate.setter
    def syslockdate(self, syslockdate):
        """Sets the syslockdate of this Job.


        :param syslockdate: The syslockdate of this Job.  # noqa: E501
        :type: datetime
        """

        self._syslockdate = syslockdate

    @property
    def syslockme(self):
        """Gets the syslockme of this Job.  # noqa: E501


        :return: The syslockme of this Job.  # noqa: E501
        :rtype: int
        """
        return self._syslockme

    @syslockme.setter
    def syslockme(self, syslockme):
        """Sets the syslockme of this Job.


        :param syslockme: The syslockme of this Job.  # noqa: E501
        :type: int
        """

        self._syslockme = syslockme

    @property
    def syslockmeui(self):
        """Gets the syslockmeui of this Job.  # noqa: E501


        :return: The syslockmeui of this Job.  # noqa: E501
        :rtype: int
        """
        return self._syslockmeui

    @syslockmeui.setter
    def syslockmeui(self, syslockmeui):
        """Sets the syslockmeui of this Job.


        :param syslockmeui: The syslockmeui of this Job.  # noqa: E501
        :type: int
        """

        self._syslockmeui = syslockmeui

    @property
    def sysmoddate(self):
        """Gets the sysmoddate of this Job.  # noqa: E501


        :return: The sysmoddate of this Job.  # noqa: E501
        :rtype: datetime
        """
        return self._sysmoddate

    @sysmoddate.setter
    def sysmoddate(self, sysmoddate):
        """Sets the sysmoddate of this Job.


        :param sysmoddate: The sysmoddate of this Job.  # noqa: E501
        :type: datetime
        """

        self._sysmoddate = sysmoddate

    @property
    def sysmoduser(self):
        """Gets the sysmoduser of this Job.  # noqa: E501


        :return: The sysmoduser of this Job.  # noqa: E501
        :rtype: str
        """
        return self._sysmoduser

    @sysmoduser.setter
    def sysmoduser(self, sysmoduser):
        """Sets the sysmoduser of this Job.


        :param sysmoduser: The sysmoduser of this Job.  # noqa: E501
        :type: str
        """

        self._sysmoduser = sysmoduser

    @property
    def systag(self):
        """Gets the systag of this Job.  # noqa: E501


        :return: The systag of this Job.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this Job.


        :param systag: The systag of this Job.  # noqa: E501
        :type: str
        """

        self._systag = systag

    @property
    def targetdepth(self):
        """Gets the targetdepth of this Job.  # noqa: E501


        :return: The targetdepth of this Job.  # noqa: E501
        :rtype: OneOfJobTargetdepth
        """
        return self._targetdepth

    @targetdepth.setter
    def targetdepth(self, targetdepth):
        """Sets the targetdepth of this Job.


        :param targetdepth: The targetdepth of this Job.  # noqa: E501
        :type: OneOfJobTargetdepth
        """

        self._targetdepth = targetdepth

    @property
    def targetdepthtvdcalc(self):
        """Gets the targetdepthtvdcalc of this Job.  # noqa: E501


        :return: The targetdepthtvdcalc of this Job.  # noqa: E501
        :rtype: OneOfJobTargetdepthtvdcalc
        """
        return self._targetdepthtvdcalc

    @targetdepthtvdcalc.setter
    def targetdepthtvdcalc(self, targetdepthtvdcalc):
        """Sets the targetdepthtvdcalc of this Job.


        :param targetdepthtvdcalc: The targetdepthtvdcalc of this Job.  # noqa: E501
        :type: OneOfJobTargetdepthtvdcalc
        """

        self._targetdepthtvdcalc = targetdepthtvdcalc

    @property
    def targetform(self):
        """Gets the targetform of this Job.  # noqa: E501


        :return: The targetform of this Job.  # noqa: E501
        :rtype: str
        """
        return self._targetform

    @targetform.setter
    def targetform(self, targetform):
        """Sets the targetform of this Job.


        :param targetform: The targetform of this Job.  # noqa: E501
        :type: str
        """

        self._targetform = targetform

    @property
    def tdtomudcalc(self):
        """Gets the tdtomudcalc of this Job.  # noqa: E501


        :return: The tdtomudcalc of this Job.  # noqa: E501
        :rtype: OneOfJobTdtomudcalc
        """
        return self._tdtomudcalc

    @tdtomudcalc.setter
    def tdtomudcalc(self, tdtomudcalc):
        """Sets the tdtomudcalc of this Job.


        :param tdtomudcalc: The tdtomudcalc of this Job.  # noqa: E501
        :type: OneOfJobTdtomudcalc
        """

        self._tdtomudcalc = tdtomudcalc

    @property
    def tmcirccalc(self):
        """Gets the tmcirccalc of this Job.  # noqa: E501


        :return: The tmcirccalc of this Job.  # noqa: E501
        :rtype: OneOfJobTmcirccalc
        """
        return self._tmcirccalc

    @tmcirccalc.setter
    def tmcirccalc(self, tmcirccalc):
        """Sets the tmcirccalc of this Job.


        :param tmcirccalc: The tmcirccalc of this Job.  # noqa: E501
        :type: OneOfJobTmcirccalc
        """

        self._tmcirccalc = tmcirccalc

    @property
    def tmdrillcalc(self):
        """Gets the tmdrillcalc of this Job.  # noqa: E501


        :return: The tmdrillcalc of this Job.  # noqa: E501
        :rtype: OneOfJobTmdrillcalc
        """
        return self._tmdrillcalc

    @tmdrillcalc.setter
    def tmdrillcalc(self, tmdrillcalc):
        """Sets the tmdrillcalc of this Job.


        :param tmdrillcalc: The tmdrillcalc of this Job.  # noqa: E501
        :type: OneOfJobTmdrillcalc
        """

        self._tmdrillcalc = tmdrillcalc

    @property
    def tmothercalc(self):
        """Gets the tmothercalc of this Job.  # noqa: E501


        :return: The tmothercalc of this Job.  # noqa: E501
        :rtype: OneOfJobTmothercalc
        """
        return self._tmothercalc

    @tmothercalc.setter
    def tmothercalc(self, tmothercalc):
        """Sets the tmothercalc of this Job.


        :param tmothercalc: The tmothercalc of this Job.  # noqa: E501
        :type: OneOfJobTmothercalc
        """

        self._tmothercalc = tmothercalc

    @property
    def tmrotatingcalc(self):
        """Gets the tmrotatingcalc of this Job.  # noqa: E501


        :return: The tmrotatingcalc of this Job.  # noqa: E501
        :rtype: OneOfJobTmrotatingcalc
        """
        return self._tmrotatingcalc

    @tmrotatingcalc.setter
    def tmrotatingcalc(self, tmrotatingcalc):
        """Sets the tmrotatingcalc of this Job.


        :param tmrotatingcalc: The tmrotatingcalc of this Job.  # noqa: E501
        :type: OneOfJobTmrotatingcalc
        """

        self._tmrotatingcalc = tmrotatingcalc

    @property
    def tmslidingcalc(self):
        """Gets the tmslidingcalc of this Job.  # noqa: E501


        :return: The tmslidingcalc of this Job.  # noqa: E501
        :rtype: OneOfJobTmslidingcalc
        """
        return self._tmslidingcalc

    @tmslidingcalc.setter
    def tmslidingcalc(self, tmslidingcalc):
        """Sets the tmslidingcalc of this Job.


        :param tmslidingcalc: The tmslidingcalc of this Job.  # noqa: E501
        :type: OneOfJobTmslidingcalc
        """

        self._tmslidingcalc = tmslidingcalc

    @property
    def tmtripcalc(self):
        """Gets the tmtripcalc of this Job.  # noqa: E501


        :return: The tmtripcalc of this Job.  # noqa: E501
        :rtype: OneOfJobTmtripcalc
        """
        return self._tmtripcalc

    @tmtripcalc.setter
    def tmtripcalc(self, tmtripcalc):
        """Sets the tmtripcalc of this Job.


        :param tmtripcalc: The tmtripcalc of this Job.  # noqa: E501
        :type: OneOfJobTmtripcalc
        """

        self._tmtripcalc = tmtripcalc

    @property
    def totaldepthcalc(self):
        """Gets the totaldepthcalc of this Job.  # noqa: E501


        :return: The totaldepthcalc of this Job.  # noqa: E501
        :rtype: OneOfJobTotaldepthcalc
        """
        return self._totaldepthcalc

    @totaldepthcalc.setter
    def totaldepthcalc(self, totaldepthcalc):
        """Sets the totaldepthcalc of this Job.


        :param totaldepthcalc: The totaldepthcalc of this Job.  # noqa: E501
        :type: OneOfJobTotaldepthcalc
        """

        self._totaldepthcalc = totaldepthcalc

    @property
    def totaldepthtvdcalc(self):
        """Gets the totaldepthtvdcalc of this Job.  # noqa: E501


        :return: The totaldepthtvdcalc of this Job.  # noqa: E501
        :rtype: OneOfJobTotaldepthtvdcalc
        """
        return self._totaldepthtvdcalc

    @totaldepthtvdcalc.setter
    def totaldepthtvdcalc(self, totaldepthtvdcalc):
        """Sets the totaldepthtvdcalc of this Job.


        :param totaldepthtvdcalc: The totaldepthtvdcalc of this Job.  # noqa: E501
        :type: OneOfJobTotaldepthtvdcalc
        """

        self._totaldepthtvdcalc = totaldepthtvdcalc

    @property
    def userboolean1(self):
        """Gets the userboolean1 of this Job.  # noqa: E501


        :return: The userboolean1 of this Job.  # noqa: E501
        :rtype: int
        """
        return self._userboolean1

    @userboolean1.setter
    def userboolean1(self, userboolean1):
        """Sets the userboolean1 of this Job.


        :param userboolean1: The userboolean1 of this Job.  # noqa: E501
        :type: int
        """

        self._userboolean1 = userboolean1

    @property
    def userboolean2(self):
        """Gets the userboolean2 of this Job.  # noqa: E501


        :return: The userboolean2 of this Job.  # noqa: E501
        :rtype: int
        """
        return self._userboolean2

    @userboolean2.setter
    def userboolean2(self, userboolean2):
        """Sets the userboolean2 of this Job.


        :param userboolean2: The userboolean2 of this Job.  # noqa: E501
        :type: int
        """

        self._userboolean2 = userboolean2

    @property
    def usernum1(self):
        """Gets the usernum1 of this Job.  # noqa: E501


        :return: The usernum1 of this Job.  # noqa: E501
        :rtype: OneOfJobUsernum1
        """
        return self._usernum1

    @usernum1.setter
    def usernum1(self, usernum1):
        """Sets the usernum1 of this Job.


        :param usernum1: The usernum1 of this Job.  # noqa: E501
        :type: OneOfJobUsernum1
        """

        self._usernum1 = usernum1

    @property
    def usernum2(self):
        """Gets the usernum2 of this Job.  # noqa: E501


        :return: The usernum2 of this Job.  # noqa: E501
        :rtype: OneOfJobUsernum2
        """
        return self._usernum2

    @usernum2.setter
    def usernum2(self, usernum2):
        """Sets the usernum2 of this Job.


        :param usernum2: The usernum2 of this Job.  # noqa: E501
        :type: OneOfJobUsernum2
        """

        self._usernum2 = usernum2

    @property
    def usernum3(self):
        """Gets the usernum3 of this Job.  # noqa: E501


        :return: The usernum3 of this Job.  # noqa: E501
        :rtype: OneOfJobUsernum3
        """
        return self._usernum3

    @usernum3.setter
    def usernum3(self, usernum3):
        """Sets the usernum3 of this Job.


        :param usernum3: The usernum3 of this Job.  # noqa: E501
        :type: OneOfJobUsernum3
        """

        self._usernum3 = usernum3

    @property
    def usernum4(self):
        """Gets the usernum4 of this Job.  # noqa: E501


        :return: The usernum4 of this Job.  # noqa: E501
        :rtype: OneOfJobUsernum4
        """
        return self._usernum4

    @usernum4.setter
    def usernum4(self, usernum4):
        """Sets the usernum4 of this Job.


        :param usernum4: The usernum4 of this Job.  # noqa: E501
        :type: OneOfJobUsernum4
        """

        self._usernum4 = usernum4

    @property
    def usernum5(self):
        """Gets the usernum5 of this Job.  # noqa: E501


        :return: The usernum5 of this Job.  # noqa: E501
        :rtype: OneOfJobUsernum5
        """
        return self._usernum5

    @usernum5.setter
    def usernum5(self, usernum5):
        """Sets the usernum5 of this Job.


        :param usernum5: The usernum5 of this Job.  # noqa: E501
        :type: OneOfJobUsernum5
        """

        self._usernum5 = usernum5

    @property
    def usertxt1(self):
        """Gets the usertxt1 of this Job.  # noqa: E501


        :return: The usertxt1 of this Job.  # noqa: E501
        :rtype: str
        """
        return self._usertxt1

    @usertxt1.setter
    def usertxt1(self, usertxt1):
        """Sets the usertxt1 of this Job.


        :param usertxt1: The usertxt1 of this Job.  # noqa: E501
        :type: str
        """

        self._usertxt1 = usertxt1

    @property
    def usertxt2(self):
        """Gets the usertxt2 of this Job.  # noqa: E501


        :return: The usertxt2 of this Job.  # noqa: E501
        :rtype: str
        """
        return self._usertxt2

    @usertxt2.setter
    def usertxt2(self, usertxt2):
        """Sets the usertxt2 of this Job.


        :param usertxt2: The usertxt2 of this Job.  # noqa: E501
        :type: str
        """

        self._usertxt2 = usertxt2

    @property
    def usertxt3(self):
        """Gets the usertxt3 of this Job.  # noqa: E501


        :return: The usertxt3 of this Job.  # noqa: E501
        :rtype: str
        """
        return self._usertxt3

    @usertxt3.setter
    def usertxt3(self, usertxt3):
        """Sets the usertxt3 of this Job.


        :param usertxt3: The usertxt3 of this Job.  # noqa: E501
        :type: str
        """

        self._usertxt3 = usertxt3

    @property
    def usertxt4(self):
        """Gets the usertxt4 of this Job.  # noqa: E501


        :return: The usertxt4 of this Job.  # noqa: E501
        :rtype: str
        """
        return self._usertxt4

    @usertxt4.setter
    def usertxt4(self, usertxt4):
        """Sets the usertxt4 of this Job.


        :param usertxt4: The usertxt4 of this Job.  # noqa: E501
        :type: str
        """

        self._usertxt4 = usertxt4

    @property
    def usertxt5(self):
        """Gets the usertxt5 of this Job.  # noqa: E501


        :return: The usertxt5 of this Job.  # noqa: E501
        :rtype: str
        """
        return self._usertxt5

    @usertxt5.setter
    def usertxt5(self, usertxt5):
        """Sets the usertxt5 of this Job.


        :param usertxt5: The usertxt5 of this Job.  # noqa: E501
        :type: str
        """

        self._usertxt5 = usertxt5

    @property
    def varianceafefinalcalc(self):
        """Gets the varianceafefinalcalc of this Job.  # noqa: E501


        :return: The varianceafefinalcalc of this Job.  # noqa: E501
        :rtype: OneOfJobVarianceafefinalcalc
        """
        return self._varianceafefinalcalc

    @varianceafefinalcalc.setter
    def varianceafefinalcalc(self, varianceafefinalcalc):
        """Sets the varianceafefinalcalc of this Job.


        :param varianceafefinalcalc: The varianceafefinalcalc of this Job.  # noqa: E501
        :type: OneOfJobVarianceafefinalcalc
        """

        self._varianceafefinalcalc = varianceafefinalcalc

    @property
    def variancefieldcalc(self):
        """Gets the variancefieldcalc of this Job.  # noqa: E501


        :return: The variancefieldcalc of this Job.  # noqa: E501
        :rtype: OneOfJobVariancefieldcalc
        """
        return self._variancefieldcalc

    @variancefieldcalc.setter
    def variancefieldcalc(self, variancefieldcalc):
        """Sets the variancefieldcalc of this Job.


        :param variancefieldcalc: The variancefieldcalc of this Job.  # noqa: E501
        :type: OneOfJobVariancefieldcalc
        """

        self._variancefieldcalc = variancefieldcalc

    @property
    def variancefieldfinalcalc(self):
        """Gets the variancefieldfinalcalc of this Job.  # noqa: E501


        :return: The variancefieldfinalcalc of this Job.  # noqa: E501
        :rtype: OneOfJobVariancefieldfinalcalc
        """
        return self._variancefieldfinalcalc

    @variancefieldfinalcalc.setter
    def variancefieldfinalcalc(self, variancefieldfinalcalc):
        """Sets the variancefieldfinalcalc of this Job.


        :param variancefieldfinalcalc: The variancefieldfinalcalc of this Job.  # noqa: E501
        :type: OneOfJobVariancefieldfinalcalc
        """

        self._variancefieldfinalcalc = variancefieldfinalcalc

    @property
    def variancefinalcalc(self):
        """Gets the variancefinalcalc of this Job.  # noqa: E501


        :return: The variancefinalcalc of this Job.  # noqa: E501
        :rtype: OneOfJobVariancefinalcalc
        """
        return self._variancefinalcalc

    @variancefinalcalc.setter
    def variancefinalcalc(self, variancefinalcalc):
        """Sets the variancefinalcalc of this Job.


        :param variancefinalcalc: The variancefinalcalc of this Job.  # noqa: E501
        :type: OneOfJobVariancefinalcalc
        """

        self._variancefinalcalc = variancefinalcalc

    @property
    def variancenormafefinalcalc(self):
        """Gets the variancenormafefinalcalc of this Job.  # noqa: E501


        :return: The variancenormafefinalcalc of this Job.  # noqa: E501
        :rtype: OneOfJobVariancenormafefinalcalc
        """
        return self._variancenormafefinalcalc

    @variancenormafefinalcalc.setter
    def variancenormafefinalcalc(self, variancenormafefinalcalc):
        """Sets the variancenormafefinalcalc of this Job.


        :param variancenormafefinalcalc: The variancenormafefinalcalc of this Job.  # noqa: E501
        :type: OneOfJobVariancenormafefinalcalc
        """

        self._variancenormafefinalcalc = variancenormafefinalcalc

    @property
    def variancenormfieldcalc(self):
        """Gets the variancenormfieldcalc of this Job.  # noqa: E501


        :return: The variancenormfieldcalc of this Job.  # noqa: E501
        :rtype: OneOfJobVariancenormfieldcalc
        """
        return self._variancenormfieldcalc

    @variancenormfieldcalc.setter
    def variancenormfieldcalc(self, variancenormfieldcalc):
        """Sets the variancenormfieldcalc of this Job.


        :param variancenormfieldcalc: The variancenormfieldcalc of this Job.  # noqa: E501
        :type: OneOfJobVariancenormfieldcalc
        """

        self._variancenormfieldcalc = variancenormfieldcalc

    @property
    def variancenormfieldfinalcalc(self):
        """Gets the variancenormfieldfinalcalc of this Job.  # noqa: E501


        :return: The variancenormfieldfinalcalc of this Job.  # noqa: E501
        :rtype: OneOfJobVariancenormfieldfinalcalc
        """
        return self._variancenormfieldfinalcalc

    @variancenormfieldfinalcalc.setter
    def variancenormfieldfinalcalc(self, variancenormfieldfinalcalc):
        """Sets the variancenormfieldfinalcalc of this Job.


        :param variancenormfieldfinalcalc: The variancenormfieldfinalcalc of this Job.  # noqa: E501
        :type: OneOfJobVariancenormfieldfinalcalc
        """

        self._variancenormfieldfinalcalc = variancenormfieldfinalcalc

    @property
    def variancenormfinalcalc(self):
        """Gets the variancenormfinalcalc of this Job.  # noqa: E501


        :return: The variancenormfinalcalc of this Job.  # noqa: E501
        :rtype: OneOfJobVariancenormfinalcalc
        """
        return self._variancenormfinalcalc

    @variancenormfinalcalc.setter
    def variancenormfinalcalc(self, variancenormfinalcalc):
        """Sets the variancenormfinalcalc of this Job.


        :param variancenormfinalcalc: The variancenormfinalcalc of this Job.  # noqa: E501
        :type: OneOfJobVariancenormfinalcalc
        """

        self._variancenormfinalcalc = variancenormfinalcalc

    @property
    def wellheader(self):
        """Gets the wellheader of this Job.  # noqa: E501


        :return: The wellheader of this Job.  # noqa: E501
        :rtype: AnyOfJobWellheader
        """
        return self._wellheader

    @wellheader.setter
    def wellheader(self, wellheader):
        """Sets the wellheader of this Job.


        :param wellheader: The wellheader of this Job.  # noqa: E501
        :type: AnyOfJobWellheader
        """

        self._wellheader = wellheader

    @property
    def wvtyp(self):
        """Gets the wvtyp of this Job.  # noqa: E501


        :return: The wvtyp of this Job.  # noqa: E501
        :rtype: str
        """
        return self._wvtyp

    @wvtyp.setter
    def wvtyp(self, wvtyp):
        """Sets the wvtyp of this Job.


        :param wvtyp: The wvtyp of this Job.  # noqa: E501
        :type: str
        """

        self._wvtyp = wvtyp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Job, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Job):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
