# coding: utf-8

"""
    OData Service for namespace Default

    This OData service is located at http://localhost  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SourceDest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'com': 'str',
        'des': 'str',
        'diversionauth': 'str',
        'diversiontyp1': 'str',
        'diversiontyp2': 'str',
        'dttmlicenseend': 'datetime',
        'dttmlicensestart': 'datetime',
        'geologicaldes': 'str',
        'idrec': 'str',
        'idrecsvsite': 'str',
        'idrecsvsitetk': 'str',
        'idrecsvwatersource': 'str',
        'idrecsvwatersourcedetail': 'str',
        'idrecsvwatersourcedetailtk': 'str',
        'idrecsvwatersourcetk': 'str',
        'idwell': 'str',
        'licenseno': 'str',
        'ratediversionmax': 'OneOfSourceDestRatediversionmax',
        'refid': 'str',
        'syscreatedate': 'datetime',
        'syscreateuser': 'str',
        'syslockchildren': 'int',
        'syslockchildrenui': 'int',
        'syslockdate': 'datetime',
        'syslockme': 'int',
        'syslockmeui': 'int',
        'sysmoddate': 'datetime',
        'sysmoduser': 'str',
        'systag': 'str',
        'typ1': 'str',
        'typ2': 'str',
        'wellheader': 'AnyOfSourceDestWellheader'
    }

    attribute_map = {
        'com': 'com',
        'des': 'des',
        'diversionauth': 'diversionauth',
        'diversiontyp1': 'diversiontyp1',
        'diversiontyp2': 'diversiontyp2',
        'dttmlicenseend': 'dttmlicenseend',
        'dttmlicensestart': 'dttmlicensestart',
        'geologicaldes': 'geologicaldes',
        'idrec': 'idrec',
        'idrecsvsite': 'idrecsvsite',
        'idrecsvsitetk': 'idrecsvsitetk',
        'idrecsvwatersource': 'idrecsvwatersource',
        'idrecsvwatersourcedetail': 'idrecsvwatersourcedetail',
        'idrecsvwatersourcedetailtk': 'idrecsvwatersourcedetailtk',
        'idrecsvwatersourcetk': 'idrecsvwatersourcetk',
        'idwell': 'idwell',
        'licenseno': 'licenseno',
        'ratediversionmax': 'ratediversionmax',
        'refid': 'refid',
        'syscreatedate': 'syscreatedate',
        'syscreateuser': 'syscreateuser',
        'syslockchildren': 'syslockchildren',
        'syslockchildrenui': 'syslockchildrenui',
        'syslockdate': 'syslockdate',
        'syslockme': 'syslockme',
        'syslockmeui': 'syslockmeui',
        'sysmoddate': 'sysmoddate',
        'sysmoduser': 'sysmoduser',
        'systag': 'systag',
        'typ1': 'typ1',
        'typ2': 'typ2',
        'wellheader': 'wellheader'
    }

    def __init__(self, com=None, des=None, diversionauth=None, diversiontyp1=None, diversiontyp2=None, dttmlicenseend=None, dttmlicensestart=None, geologicaldes=None, idrec=None, idrecsvsite=None, idrecsvsitetk=None, idrecsvwatersource=None, idrecsvwatersourcedetail=None, idrecsvwatersourcedetailtk=None, idrecsvwatersourcetk=None, idwell=None, licenseno=None, ratediversionmax=None, refid=None, syscreatedate=None, syscreateuser=None, syslockchildren=None, syslockchildrenui=None, syslockdate=None, syslockme=None, syslockmeui=None, sysmoddate=None, sysmoduser=None, systag=None, typ1=None, typ2=None, wellheader=None):  # noqa: E501
        """SourceDest - a model defined in Swagger"""  # noqa: E501
        self._com = None
        self._des = None
        self._diversionauth = None
        self._diversiontyp1 = None
        self._diversiontyp2 = None
        self._dttmlicenseend = None
        self._dttmlicensestart = None
        self._geologicaldes = None
        self._idrec = None
        self._idrecsvsite = None
        self._idrecsvsitetk = None
        self._idrecsvwatersource = None
        self._idrecsvwatersourcedetail = None
        self._idrecsvwatersourcedetailtk = None
        self._idrecsvwatersourcetk = None
        self._idwell = None
        self._licenseno = None
        self._ratediversionmax = None
        self._refid = None
        self._syscreatedate = None
        self._syscreateuser = None
        self._syslockchildren = None
        self._syslockchildrenui = None
        self._syslockdate = None
        self._syslockme = None
        self._syslockmeui = None
        self._sysmoddate = None
        self._sysmoduser = None
        self._systag = None
        self._typ1 = None
        self._typ2 = None
        self._wellheader = None
        self.discriminator = None
        if com is not None:
            self.com = com
        if des is not None:
            self.des = des
        if diversionauth is not None:
            self.diversionauth = diversionauth
        if diversiontyp1 is not None:
            self.diversiontyp1 = diversiontyp1
        if diversiontyp2 is not None:
            self.diversiontyp2 = diversiontyp2
        if dttmlicenseend is not None:
            self.dttmlicenseend = dttmlicenseend
        if dttmlicensestart is not None:
            self.dttmlicensestart = dttmlicensestart
        if geologicaldes is not None:
            self.geologicaldes = geologicaldes
        if idrec is not None:
            self.idrec = idrec
        if idrecsvsite is not None:
            self.idrecsvsite = idrecsvsite
        if idrecsvsitetk is not None:
            self.idrecsvsitetk = idrecsvsitetk
        if idrecsvwatersource is not None:
            self.idrecsvwatersource = idrecsvwatersource
        if idrecsvwatersourcedetail is not None:
            self.idrecsvwatersourcedetail = idrecsvwatersourcedetail
        if idrecsvwatersourcedetailtk is not None:
            self.idrecsvwatersourcedetailtk = idrecsvwatersourcedetailtk
        if idrecsvwatersourcetk is not None:
            self.idrecsvwatersourcetk = idrecsvwatersourcetk
        if idwell is not None:
            self.idwell = idwell
        if licenseno is not None:
            self.licenseno = licenseno
        if ratediversionmax is not None:
            self.ratediversionmax = ratediversionmax
        if refid is not None:
            self.refid = refid
        if syscreatedate is not None:
            self.syscreatedate = syscreatedate
        if syscreateuser is not None:
            self.syscreateuser = syscreateuser
        if syslockchildren is not None:
            self.syslockchildren = syslockchildren
        if syslockchildrenui is not None:
            self.syslockchildrenui = syslockchildrenui
        if syslockdate is not None:
            self.syslockdate = syslockdate
        if syslockme is not None:
            self.syslockme = syslockme
        if syslockmeui is not None:
            self.syslockmeui = syslockmeui
        if sysmoddate is not None:
            self.sysmoddate = sysmoddate
        if sysmoduser is not None:
            self.sysmoduser = sysmoduser
        if systag is not None:
            self.systag = systag
        if typ1 is not None:
            self.typ1 = typ1
        if typ2 is not None:
            self.typ2 = typ2
        if wellheader is not None:
            self.wellheader = wellheader

    @property
    def com(self):
        """Gets the com of this SourceDest.  # noqa: E501


        :return: The com of this SourceDest.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this SourceDest.


        :param com: The com of this SourceDest.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def des(self):
        """Gets the des of this SourceDest.  # noqa: E501


        :return: The des of this SourceDest.  # noqa: E501
        :rtype: str
        """
        return self._des

    @des.setter
    def des(self, des):
        """Sets the des of this SourceDest.


        :param des: The des of this SourceDest.  # noqa: E501
        :type: str
        """

        self._des = des

    @property
    def diversionauth(self):
        """Gets the diversionauth of this SourceDest.  # noqa: E501


        :return: The diversionauth of this SourceDest.  # noqa: E501
        :rtype: str
        """
        return self._diversionauth

    @diversionauth.setter
    def diversionauth(self, diversionauth):
        """Sets the diversionauth of this SourceDest.


        :param diversionauth: The diversionauth of this SourceDest.  # noqa: E501
        :type: str
        """

        self._diversionauth = diversionauth

    @property
    def diversiontyp1(self):
        """Gets the diversiontyp1 of this SourceDest.  # noqa: E501


        :return: The diversiontyp1 of this SourceDest.  # noqa: E501
        :rtype: str
        """
        return self._diversiontyp1

    @diversiontyp1.setter
    def diversiontyp1(self, diversiontyp1):
        """Sets the diversiontyp1 of this SourceDest.


        :param diversiontyp1: The diversiontyp1 of this SourceDest.  # noqa: E501
        :type: str
        """

        self._diversiontyp1 = diversiontyp1

    @property
    def diversiontyp2(self):
        """Gets the diversiontyp2 of this SourceDest.  # noqa: E501


        :return: The diversiontyp2 of this SourceDest.  # noqa: E501
        :rtype: str
        """
        return self._diversiontyp2

    @diversiontyp2.setter
    def diversiontyp2(self, diversiontyp2):
        """Sets the diversiontyp2 of this SourceDest.


        :param diversiontyp2: The diversiontyp2 of this SourceDest.  # noqa: E501
        :type: str
        """

        self._diversiontyp2 = diversiontyp2

    @property
    def dttmlicenseend(self):
        """Gets the dttmlicenseend of this SourceDest.  # noqa: E501


        :return: The dttmlicenseend of this SourceDest.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmlicenseend

    @dttmlicenseend.setter
    def dttmlicenseend(self, dttmlicenseend):
        """Sets the dttmlicenseend of this SourceDest.


        :param dttmlicenseend: The dttmlicenseend of this SourceDest.  # noqa: E501
        :type: datetime
        """

        self._dttmlicenseend = dttmlicenseend

    @property
    def dttmlicensestart(self):
        """Gets the dttmlicensestart of this SourceDest.  # noqa: E501


        :return: The dttmlicensestart of this SourceDest.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmlicensestart

    @dttmlicensestart.setter
    def dttmlicensestart(self, dttmlicensestart):
        """Sets the dttmlicensestart of this SourceDest.


        :param dttmlicensestart: The dttmlicensestart of this SourceDest.  # noqa: E501
        :type: datetime
        """

        self._dttmlicensestart = dttmlicensestart

    @property
    def geologicaldes(self):
        """Gets the geologicaldes of this SourceDest.  # noqa: E501


        :return: The geologicaldes of this SourceDest.  # noqa: E501
        :rtype: str
        """
        return self._geologicaldes

    @geologicaldes.setter
    def geologicaldes(self, geologicaldes):
        """Sets the geologicaldes of this SourceDest.


        :param geologicaldes: The geologicaldes of this SourceDest.  # noqa: E501
        :type: str
        """

        self._geologicaldes = geologicaldes

    @property
    def idrec(self):
        """Gets the idrec of this SourceDest.  # noqa: E501


        :return: The idrec of this SourceDest.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this SourceDest.


        :param idrec: The idrec of this SourceDest.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecsvsite(self):
        """Gets the idrecsvsite of this SourceDest.  # noqa: E501


        :return: The idrecsvsite of this SourceDest.  # noqa: E501
        :rtype: str
        """
        return self._idrecsvsite

    @idrecsvsite.setter
    def idrecsvsite(self, idrecsvsite):
        """Sets the idrecsvsite of this SourceDest.


        :param idrecsvsite: The idrecsvsite of this SourceDest.  # noqa: E501
        :type: str
        """

        self._idrecsvsite = idrecsvsite

    @property
    def idrecsvsitetk(self):
        """Gets the idrecsvsitetk of this SourceDest.  # noqa: E501


        :return: The idrecsvsitetk of this SourceDest.  # noqa: E501
        :rtype: str
        """
        return self._idrecsvsitetk

    @idrecsvsitetk.setter
    def idrecsvsitetk(self, idrecsvsitetk):
        """Sets the idrecsvsitetk of this SourceDest.


        :param idrecsvsitetk: The idrecsvsitetk of this SourceDest.  # noqa: E501
        :type: str
        """

        self._idrecsvsitetk = idrecsvsitetk

    @property
    def idrecsvwatersource(self):
        """Gets the idrecsvwatersource of this SourceDest.  # noqa: E501


        :return: The idrecsvwatersource of this SourceDest.  # noqa: E501
        :rtype: str
        """
        return self._idrecsvwatersource

    @idrecsvwatersource.setter
    def idrecsvwatersource(self, idrecsvwatersource):
        """Sets the idrecsvwatersource of this SourceDest.


        :param idrecsvwatersource: The idrecsvwatersource of this SourceDest.  # noqa: E501
        :type: str
        """

        self._idrecsvwatersource = idrecsvwatersource

    @property
    def idrecsvwatersourcedetail(self):
        """Gets the idrecsvwatersourcedetail of this SourceDest.  # noqa: E501


        :return: The idrecsvwatersourcedetail of this SourceDest.  # noqa: E501
        :rtype: str
        """
        return self._idrecsvwatersourcedetail

    @idrecsvwatersourcedetail.setter
    def idrecsvwatersourcedetail(self, idrecsvwatersourcedetail):
        """Sets the idrecsvwatersourcedetail of this SourceDest.


        :param idrecsvwatersourcedetail: The idrecsvwatersourcedetail of this SourceDest.  # noqa: E501
        :type: str
        """

        self._idrecsvwatersourcedetail = idrecsvwatersourcedetail

    @property
    def idrecsvwatersourcedetailtk(self):
        """Gets the idrecsvwatersourcedetailtk of this SourceDest.  # noqa: E501


        :return: The idrecsvwatersourcedetailtk of this SourceDest.  # noqa: E501
        :rtype: str
        """
        return self._idrecsvwatersourcedetailtk

    @idrecsvwatersourcedetailtk.setter
    def idrecsvwatersourcedetailtk(self, idrecsvwatersourcedetailtk):
        """Sets the idrecsvwatersourcedetailtk of this SourceDest.


        :param idrecsvwatersourcedetailtk: The idrecsvwatersourcedetailtk of this SourceDest.  # noqa: E501
        :type: str
        """

        self._idrecsvwatersourcedetailtk = idrecsvwatersourcedetailtk

    @property
    def idrecsvwatersourcetk(self):
        """Gets the idrecsvwatersourcetk of this SourceDest.  # noqa: E501


        :return: The idrecsvwatersourcetk of this SourceDest.  # noqa: E501
        :rtype: str
        """
        return self._idrecsvwatersourcetk

    @idrecsvwatersourcetk.setter
    def idrecsvwatersourcetk(self, idrecsvwatersourcetk):
        """Sets the idrecsvwatersourcetk of this SourceDest.


        :param idrecsvwatersourcetk: The idrecsvwatersourcetk of this SourceDest.  # noqa: E501
        :type: str
        """

        self._idrecsvwatersourcetk = idrecsvwatersourcetk

    @property
    def idwell(self):
        """Gets the idwell of this SourceDest.  # noqa: E501


        :return: The idwell of this SourceDest.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this SourceDest.


        :param idwell: The idwell of this SourceDest.  # noqa: E501
        :type: str
        """

        self._idwell = idwell

    @property
    def licenseno(self):
        """Gets the licenseno of this SourceDest.  # noqa: E501


        :return: The licenseno of this SourceDest.  # noqa: E501
        :rtype: str
        """
        return self._licenseno

    @licenseno.setter
    def licenseno(self, licenseno):
        """Sets the licenseno of this SourceDest.


        :param licenseno: The licenseno of this SourceDest.  # noqa: E501
        :type: str
        """

        self._licenseno = licenseno

    @property
    def ratediversionmax(self):
        """Gets the ratediversionmax of this SourceDest.  # noqa: E501


        :return: The ratediversionmax of this SourceDest.  # noqa: E501
        :rtype: OneOfSourceDestRatediversionmax
        """
        return self._ratediversionmax

    @ratediversionmax.setter
    def ratediversionmax(self, ratediversionmax):
        """Sets the ratediversionmax of this SourceDest.


        :param ratediversionmax: The ratediversionmax of this SourceDest.  # noqa: E501
        :type: OneOfSourceDestRatediversionmax
        """

        self._ratediversionmax = ratediversionmax

    @property
    def refid(self):
        """Gets the refid of this SourceDest.  # noqa: E501


        :return: The refid of this SourceDest.  # noqa: E501
        :rtype: str
        """
        return self._refid

    @refid.setter
    def refid(self, refid):
        """Sets the refid of this SourceDest.


        :param refid: The refid of this SourceDest.  # noqa: E501
        :type: str
        """

        self._refid = refid

    @property
    def syscreatedate(self):
        """Gets the syscreatedate of this SourceDest.  # noqa: E501


        :return: The syscreatedate of this SourceDest.  # noqa: E501
        :rtype: datetime
        """
        return self._syscreatedate

    @syscreatedate.setter
    def syscreatedate(self, syscreatedate):
        """Sets the syscreatedate of this SourceDest.


        :param syscreatedate: The syscreatedate of this SourceDest.  # noqa: E501
        :type: datetime
        """

        self._syscreatedate = syscreatedate

    @property
    def syscreateuser(self):
        """Gets the syscreateuser of this SourceDest.  # noqa: E501


        :return: The syscreateuser of this SourceDest.  # noqa: E501
        :rtype: str
        """
        return self._syscreateuser

    @syscreateuser.setter
    def syscreateuser(self, syscreateuser):
        """Sets the syscreateuser of this SourceDest.


        :param syscreateuser: The syscreateuser of this SourceDest.  # noqa: E501
        :type: str
        """

        self._syscreateuser = syscreateuser

    @property
    def syslockchildren(self):
        """Gets the syslockchildren of this SourceDest.  # noqa: E501


        :return: The syslockchildren of this SourceDest.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildren

    @syslockchildren.setter
    def syslockchildren(self, syslockchildren):
        """Sets the syslockchildren of this SourceDest.


        :param syslockchildren: The syslockchildren of this SourceDest.  # noqa: E501
        :type: int
        """

        self._syslockchildren = syslockchildren

    @property
    def syslockchildrenui(self):
        """Gets the syslockchildrenui of this SourceDest.  # noqa: E501


        :return: The syslockchildrenui of this SourceDest.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildrenui

    @syslockchildrenui.setter
    def syslockchildrenui(self, syslockchildrenui):
        """Sets the syslockchildrenui of this SourceDest.


        :param syslockchildrenui: The syslockchildrenui of this SourceDest.  # noqa: E501
        :type: int
        """

        self._syslockchildrenui = syslockchildrenui

    @property
    def syslockdate(self):
        """Gets the syslockdate of this SourceDest.  # noqa: E501


        :return: The syslockdate of this SourceDest.  # noqa: E501
        :rtype: datetime
        """
        return self._syslockdate

    @syslockdate.setter
    def syslockdate(self, syslockdate):
        """Sets the syslockdate of this SourceDest.


        :param syslockdate: The syslockdate of this SourceDest.  # noqa: E501
        :type: datetime
        """

        self._syslockdate = syslockdate

    @property
    def syslockme(self):
        """Gets the syslockme of this SourceDest.  # noqa: E501


        :return: The syslockme of this SourceDest.  # noqa: E501
        :rtype: int
        """
        return self._syslockme

    @syslockme.setter
    def syslockme(self, syslockme):
        """Sets the syslockme of this SourceDest.


        :param syslockme: The syslockme of this SourceDest.  # noqa: E501
        :type: int
        """

        self._syslockme = syslockme

    @property
    def syslockmeui(self):
        """Gets the syslockmeui of this SourceDest.  # noqa: E501


        :return: The syslockmeui of this SourceDest.  # noqa: E501
        :rtype: int
        """
        return self._syslockmeui

    @syslockmeui.setter
    def syslockmeui(self, syslockmeui):
        """Sets the syslockmeui of this SourceDest.


        :param syslockmeui: The syslockmeui of this SourceDest.  # noqa: E501
        :type: int
        """

        self._syslockmeui = syslockmeui

    @property
    def sysmoddate(self):
        """Gets the sysmoddate of this SourceDest.  # noqa: E501


        :return: The sysmoddate of this SourceDest.  # noqa: E501
        :rtype: datetime
        """
        return self._sysmoddate

    @sysmoddate.setter
    def sysmoddate(self, sysmoddate):
        """Sets the sysmoddate of this SourceDest.


        :param sysmoddate: The sysmoddate of this SourceDest.  # noqa: E501
        :type: datetime
        """

        self._sysmoddate = sysmoddate

    @property
    def sysmoduser(self):
        """Gets the sysmoduser of this SourceDest.  # noqa: E501


        :return: The sysmoduser of this SourceDest.  # noqa: E501
        :rtype: str
        """
        return self._sysmoduser

    @sysmoduser.setter
    def sysmoduser(self, sysmoduser):
        """Sets the sysmoduser of this SourceDest.


        :param sysmoduser: The sysmoduser of this SourceDest.  # noqa: E501
        :type: str
        """

        self._sysmoduser = sysmoduser

    @property
    def systag(self):
        """Gets the systag of this SourceDest.  # noqa: E501


        :return: The systag of this SourceDest.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this SourceDest.


        :param systag: The systag of this SourceDest.  # noqa: E501
        :type: str
        """

        self._systag = systag

    @property
    def typ1(self):
        """Gets the typ1 of this SourceDest.  # noqa: E501


        :return: The typ1 of this SourceDest.  # noqa: E501
        :rtype: str
        """
        return self._typ1

    @typ1.setter
    def typ1(self, typ1):
        """Sets the typ1 of this SourceDest.


        :param typ1: The typ1 of this SourceDest.  # noqa: E501
        :type: str
        """

        self._typ1 = typ1

    @property
    def typ2(self):
        """Gets the typ2 of this SourceDest.  # noqa: E501


        :return: The typ2 of this SourceDest.  # noqa: E501
        :rtype: str
        """
        return self._typ2

    @typ2.setter
    def typ2(self, typ2):
        """Sets the typ2 of this SourceDest.


        :param typ2: The typ2 of this SourceDest.  # noqa: E501
        :type: str
        """

        self._typ2 = typ2

    @property
    def wellheader(self):
        """Gets the wellheader of this SourceDest.  # noqa: E501


        :return: The wellheader of this SourceDest.  # noqa: E501
        :rtype: AnyOfSourceDestWellheader
        """
        return self._wellheader

    @wellheader.setter
    def wellheader(self, wellheader):
        """Sets the wellheader of this SourceDest.


        :param wellheader: The wellheader of this SourceDest.  # noqa: E501
        :type: AnyOfSourceDestWellheader
        """

        self._wellheader = wellheader

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SourceDest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SourceDest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
