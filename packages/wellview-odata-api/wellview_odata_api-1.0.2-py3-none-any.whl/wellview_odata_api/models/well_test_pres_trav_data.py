# coding: utf-8

"""
    OData Service for namespace Default

    This OData service is located at http://localhost  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WellTestPresTravData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'depth': 'OneOfWellTestPresTravDataDepth',
        'dttm': 'datetime',
        'durationstop': 'OneOfWellTestPresTravDataDurationstop',
        'idrec': 'str',
        'idrecgauge': 'str',
        'idrecgaugetk': 'str',
        'idrecparent': 'str',
        'idwell': 'str',
        'note': 'str',
        'pres': 'OneOfWellTestPresTravDataPres',
        'presgradientor': 'OneOfWellTestPresTravDataPresgradientor',
        'syscreatedate': 'datetime',
        'syscreateuser': 'str',
        'syslockchildren': 'int',
        'syslockchildrenui': 'int',
        'syslockdate': 'datetime',
        'syslockme': 'int',
        'syslockmeui': 'int',
        'sysmoddate': 'datetime',
        'sysmoduser': 'str',
        'systag': 'str',
        'temp': 'OneOfWellTestPresTravDataTemp',
        'tempgradientor': 'OneOfWellTestPresTravDataTempgradientor',
        'well_test_pres_trav': 'AnyOfWellTestPresTravDataWellTestPresTrav'
    }

    attribute_map = {
        'depth': 'depth',
        'dttm': 'dttm',
        'durationstop': 'durationstop',
        'idrec': 'idrec',
        'idrecgauge': 'idrecgauge',
        'idrecgaugetk': 'idrecgaugetk',
        'idrecparent': 'idrecparent',
        'idwell': 'idwell',
        'note': 'note',
        'pres': 'pres',
        'presgradientor': 'presgradientor',
        'syscreatedate': 'syscreatedate',
        'syscreateuser': 'syscreateuser',
        'syslockchildren': 'syslockchildren',
        'syslockchildrenui': 'syslockchildrenui',
        'syslockdate': 'syslockdate',
        'syslockme': 'syslockme',
        'syslockmeui': 'syslockmeui',
        'sysmoddate': 'sysmoddate',
        'sysmoduser': 'sysmoduser',
        'systag': 'systag',
        'temp': 'temp',
        'tempgradientor': 'tempgradientor',
        'well_test_pres_trav': 'wellTestPresTrav'
    }

    def __init__(self, depth=None, dttm=None, durationstop=None, idrec=None, idrecgauge=None, idrecgaugetk=None, idrecparent=None, idwell=None, note=None, pres=None, presgradientor=None, syscreatedate=None, syscreateuser=None, syslockchildren=None, syslockchildrenui=None, syslockdate=None, syslockme=None, syslockmeui=None, sysmoddate=None, sysmoduser=None, systag=None, temp=None, tempgradientor=None, well_test_pres_trav=None):  # noqa: E501
        """WellTestPresTravData - a model defined in Swagger"""  # noqa: E501
        self._depth = None
        self._dttm = None
        self._durationstop = None
        self._idrec = None
        self._idrecgauge = None
        self._idrecgaugetk = None
        self._idrecparent = None
        self._idwell = None
        self._note = None
        self._pres = None
        self._presgradientor = None
        self._syscreatedate = None
        self._syscreateuser = None
        self._syslockchildren = None
        self._syslockchildrenui = None
        self._syslockdate = None
        self._syslockme = None
        self._syslockmeui = None
        self._sysmoddate = None
        self._sysmoduser = None
        self._systag = None
        self._temp = None
        self._tempgradientor = None
        self._well_test_pres_trav = None
        self.discriminator = None
        if depth is not None:
            self.depth = depth
        if dttm is not None:
            self.dttm = dttm
        if durationstop is not None:
            self.durationstop = durationstop
        if idrec is not None:
            self.idrec = idrec
        if idrecgauge is not None:
            self.idrecgauge = idrecgauge
        if idrecgaugetk is not None:
            self.idrecgaugetk = idrecgaugetk
        if idrecparent is not None:
            self.idrecparent = idrecparent
        if idwell is not None:
            self.idwell = idwell
        if note is not None:
            self.note = note
        if pres is not None:
            self.pres = pres
        if presgradientor is not None:
            self.presgradientor = presgradientor
        if syscreatedate is not None:
            self.syscreatedate = syscreatedate
        if syscreateuser is not None:
            self.syscreateuser = syscreateuser
        if syslockchildren is not None:
            self.syslockchildren = syslockchildren
        if syslockchildrenui is not None:
            self.syslockchildrenui = syslockchildrenui
        if syslockdate is not None:
            self.syslockdate = syslockdate
        if syslockme is not None:
            self.syslockme = syslockme
        if syslockmeui is not None:
            self.syslockmeui = syslockmeui
        if sysmoddate is not None:
            self.sysmoddate = sysmoddate
        if sysmoduser is not None:
            self.sysmoduser = sysmoduser
        if systag is not None:
            self.systag = systag
        if temp is not None:
            self.temp = temp
        if tempgradientor is not None:
            self.tempgradientor = tempgradientor
        if well_test_pres_trav is not None:
            self.well_test_pres_trav = well_test_pres_trav

    @property
    def depth(self):
        """Gets the depth of this WellTestPresTravData.  # noqa: E501


        :return: The depth of this WellTestPresTravData.  # noqa: E501
        :rtype: OneOfWellTestPresTravDataDepth
        """
        return self._depth

    @depth.setter
    def depth(self, depth):
        """Sets the depth of this WellTestPresTravData.


        :param depth: The depth of this WellTestPresTravData.  # noqa: E501
        :type: OneOfWellTestPresTravDataDepth
        """

        self._depth = depth

    @property
    def dttm(self):
        """Gets the dttm of this WellTestPresTravData.  # noqa: E501


        :return: The dttm of this WellTestPresTravData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttm

    @dttm.setter
    def dttm(self, dttm):
        """Sets the dttm of this WellTestPresTravData.


        :param dttm: The dttm of this WellTestPresTravData.  # noqa: E501
        :type: datetime
        """

        self._dttm = dttm

    @property
    def durationstop(self):
        """Gets the durationstop of this WellTestPresTravData.  # noqa: E501


        :return: The durationstop of this WellTestPresTravData.  # noqa: E501
        :rtype: OneOfWellTestPresTravDataDurationstop
        """
        return self._durationstop

    @durationstop.setter
    def durationstop(self, durationstop):
        """Sets the durationstop of this WellTestPresTravData.


        :param durationstop: The durationstop of this WellTestPresTravData.  # noqa: E501
        :type: OneOfWellTestPresTravDataDurationstop
        """

        self._durationstop = durationstop

    @property
    def idrec(self):
        """Gets the idrec of this WellTestPresTravData.  # noqa: E501


        :return: The idrec of this WellTestPresTravData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this WellTestPresTravData.


        :param idrec: The idrec of this WellTestPresTravData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecgauge(self):
        """Gets the idrecgauge of this WellTestPresTravData.  # noqa: E501


        :return: The idrecgauge of this WellTestPresTravData.  # noqa: E501
        :rtype: str
        """
        return self._idrecgauge

    @idrecgauge.setter
    def idrecgauge(self, idrecgauge):
        """Sets the idrecgauge of this WellTestPresTravData.


        :param idrecgauge: The idrecgauge of this WellTestPresTravData.  # noqa: E501
        :type: str
        """

        self._idrecgauge = idrecgauge

    @property
    def idrecgaugetk(self):
        """Gets the idrecgaugetk of this WellTestPresTravData.  # noqa: E501


        :return: The idrecgaugetk of this WellTestPresTravData.  # noqa: E501
        :rtype: str
        """
        return self._idrecgaugetk

    @idrecgaugetk.setter
    def idrecgaugetk(self, idrecgaugetk):
        """Sets the idrecgaugetk of this WellTestPresTravData.


        :param idrecgaugetk: The idrecgaugetk of this WellTestPresTravData.  # noqa: E501
        :type: str
        """

        self._idrecgaugetk = idrecgaugetk

    @property
    def idrecparent(self):
        """Gets the idrecparent of this WellTestPresTravData.  # noqa: E501


        :return: The idrecparent of this WellTestPresTravData.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this WellTestPresTravData.


        :param idrecparent: The idrecparent of this WellTestPresTravData.  # noqa: E501
        :type: str
        """

        self._idrecparent = idrecparent

    @property
    def idwell(self):
        """Gets the idwell of this WellTestPresTravData.  # noqa: E501


        :return: The idwell of this WellTestPresTravData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this WellTestPresTravData.


        :param idwell: The idwell of this WellTestPresTravData.  # noqa: E501
        :type: str
        """

        self._idwell = idwell

    @property
    def note(self):
        """Gets the note of this WellTestPresTravData.  # noqa: E501


        :return: The note of this WellTestPresTravData.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this WellTestPresTravData.


        :param note: The note of this WellTestPresTravData.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def pres(self):
        """Gets the pres of this WellTestPresTravData.  # noqa: E501


        :return: The pres of this WellTestPresTravData.  # noqa: E501
        :rtype: OneOfWellTestPresTravDataPres
        """
        return self._pres

    @pres.setter
    def pres(self, pres):
        """Sets the pres of this WellTestPresTravData.


        :param pres: The pres of this WellTestPresTravData.  # noqa: E501
        :type: OneOfWellTestPresTravDataPres
        """

        self._pres = pres

    @property
    def presgradientor(self):
        """Gets the presgradientor of this WellTestPresTravData.  # noqa: E501


        :return: The presgradientor of this WellTestPresTravData.  # noqa: E501
        :rtype: OneOfWellTestPresTravDataPresgradientor
        """
        return self._presgradientor

    @presgradientor.setter
    def presgradientor(self, presgradientor):
        """Sets the presgradientor of this WellTestPresTravData.


        :param presgradientor: The presgradientor of this WellTestPresTravData.  # noqa: E501
        :type: OneOfWellTestPresTravDataPresgradientor
        """

        self._presgradientor = presgradientor

    @property
    def syscreatedate(self):
        """Gets the syscreatedate of this WellTestPresTravData.  # noqa: E501


        :return: The syscreatedate of this WellTestPresTravData.  # noqa: E501
        :rtype: datetime
        """
        return self._syscreatedate

    @syscreatedate.setter
    def syscreatedate(self, syscreatedate):
        """Sets the syscreatedate of this WellTestPresTravData.


        :param syscreatedate: The syscreatedate of this WellTestPresTravData.  # noqa: E501
        :type: datetime
        """

        self._syscreatedate = syscreatedate

    @property
    def syscreateuser(self):
        """Gets the syscreateuser of this WellTestPresTravData.  # noqa: E501


        :return: The syscreateuser of this WellTestPresTravData.  # noqa: E501
        :rtype: str
        """
        return self._syscreateuser

    @syscreateuser.setter
    def syscreateuser(self, syscreateuser):
        """Sets the syscreateuser of this WellTestPresTravData.


        :param syscreateuser: The syscreateuser of this WellTestPresTravData.  # noqa: E501
        :type: str
        """

        self._syscreateuser = syscreateuser

    @property
    def syslockchildren(self):
        """Gets the syslockchildren of this WellTestPresTravData.  # noqa: E501


        :return: The syslockchildren of this WellTestPresTravData.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildren

    @syslockchildren.setter
    def syslockchildren(self, syslockchildren):
        """Sets the syslockchildren of this WellTestPresTravData.


        :param syslockchildren: The syslockchildren of this WellTestPresTravData.  # noqa: E501
        :type: int
        """

        self._syslockchildren = syslockchildren

    @property
    def syslockchildrenui(self):
        """Gets the syslockchildrenui of this WellTestPresTravData.  # noqa: E501


        :return: The syslockchildrenui of this WellTestPresTravData.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildrenui

    @syslockchildrenui.setter
    def syslockchildrenui(self, syslockchildrenui):
        """Sets the syslockchildrenui of this WellTestPresTravData.


        :param syslockchildrenui: The syslockchildrenui of this WellTestPresTravData.  # noqa: E501
        :type: int
        """

        self._syslockchildrenui = syslockchildrenui

    @property
    def syslockdate(self):
        """Gets the syslockdate of this WellTestPresTravData.  # noqa: E501


        :return: The syslockdate of this WellTestPresTravData.  # noqa: E501
        :rtype: datetime
        """
        return self._syslockdate

    @syslockdate.setter
    def syslockdate(self, syslockdate):
        """Sets the syslockdate of this WellTestPresTravData.


        :param syslockdate: The syslockdate of this WellTestPresTravData.  # noqa: E501
        :type: datetime
        """

        self._syslockdate = syslockdate

    @property
    def syslockme(self):
        """Gets the syslockme of this WellTestPresTravData.  # noqa: E501


        :return: The syslockme of this WellTestPresTravData.  # noqa: E501
        :rtype: int
        """
        return self._syslockme

    @syslockme.setter
    def syslockme(self, syslockme):
        """Sets the syslockme of this WellTestPresTravData.


        :param syslockme: The syslockme of this WellTestPresTravData.  # noqa: E501
        :type: int
        """

        self._syslockme = syslockme

    @property
    def syslockmeui(self):
        """Gets the syslockmeui of this WellTestPresTravData.  # noqa: E501


        :return: The syslockmeui of this WellTestPresTravData.  # noqa: E501
        :rtype: int
        """
        return self._syslockmeui

    @syslockmeui.setter
    def syslockmeui(self, syslockmeui):
        """Sets the syslockmeui of this WellTestPresTravData.


        :param syslockmeui: The syslockmeui of this WellTestPresTravData.  # noqa: E501
        :type: int
        """

        self._syslockmeui = syslockmeui

    @property
    def sysmoddate(self):
        """Gets the sysmoddate of this WellTestPresTravData.  # noqa: E501


        :return: The sysmoddate of this WellTestPresTravData.  # noqa: E501
        :rtype: datetime
        """
        return self._sysmoddate

    @sysmoddate.setter
    def sysmoddate(self, sysmoddate):
        """Sets the sysmoddate of this WellTestPresTravData.


        :param sysmoddate: The sysmoddate of this WellTestPresTravData.  # noqa: E501
        :type: datetime
        """

        self._sysmoddate = sysmoddate

    @property
    def sysmoduser(self):
        """Gets the sysmoduser of this WellTestPresTravData.  # noqa: E501


        :return: The sysmoduser of this WellTestPresTravData.  # noqa: E501
        :rtype: str
        """
        return self._sysmoduser

    @sysmoduser.setter
    def sysmoduser(self, sysmoduser):
        """Sets the sysmoduser of this WellTestPresTravData.


        :param sysmoduser: The sysmoduser of this WellTestPresTravData.  # noqa: E501
        :type: str
        """

        self._sysmoduser = sysmoduser

    @property
    def systag(self):
        """Gets the systag of this WellTestPresTravData.  # noqa: E501


        :return: The systag of this WellTestPresTravData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this WellTestPresTravData.


        :param systag: The systag of this WellTestPresTravData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    @property
    def temp(self):
        """Gets the temp of this WellTestPresTravData.  # noqa: E501


        :return: The temp of this WellTestPresTravData.  # noqa: E501
        :rtype: OneOfWellTestPresTravDataTemp
        """
        return self._temp

    @temp.setter
    def temp(self, temp):
        """Sets the temp of this WellTestPresTravData.


        :param temp: The temp of this WellTestPresTravData.  # noqa: E501
        :type: OneOfWellTestPresTravDataTemp
        """

        self._temp = temp

    @property
    def tempgradientor(self):
        """Gets the tempgradientor of this WellTestPresTravData.  # noqa: E501


        :return: The tempgradientor of this WellTestPresTravData.  # noqa: E501
        :rtype: OneOfWellTestPresTravDataTempgradientor
        """
        return self._tempgradientor

    @tempgradientor.setter
    def tempgradientor(self, tempgradientor):
        """Sets the tempgradientor of this WellTestPresTravData.


        :param tempgradientor: The tempgradientor of this WellTestPresTravData.  # noqa: E501
        :type: OneOfWellTestPresTravDataTempgradientor
        """

        self._tempgradientor = tempgradientor

    @property
    def well_test_pres_trav(self):
        """Gets the well_test_pres_trav of this WellTestPresTravData.  # noqa: E501


        :return: The well_test_pres_trav of this WellTestPresTravData.  # noqa: E501
        :rtype: AnyOfWellTestPresTravDataWellTestPresTrav
        """
        return self._well_test_pres_trav

    @well_test_pres_trav.setter
    def well_test_pres_trav(self, well_test_pres_trav):
        """Sets the well_test_pres_trav of this WellTestPresTravData.


        :param well_test_pres_trav: The well_test_pres_trav of this WellTestPresTravData.  # noqa: E501
        :type: AnyOfWellTestPresTravDataWellTestPresTrav
        """

        self._well_test_pres_trav = well_test_pres_trav

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WellTestPresTravData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WellTestPresTravData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
