# coding: utf-8

"""
    OData Service for namespace Default

    This OData service is located at http://localhost  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TestLeakOff(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'com': 'str',
        'densityfluid': 'OneOfTestLeakOffDensityfluid',
        'depth': 'OneOfTestLeakOffDepth',
        'depthtvdcalc': 'OneOfTestLeakOffDepthtvdcalc',
        'dttm': 'datetime',
        'fluidtyp': 'str',
        'idrec': 'str',
        'idreccas': 'str',
        'idreccastk': 'str',
        'idrecfrm': 'str',
        'idrecfrmtk': 'str',
        'idwell': 'str',
        'leakoffdensityfluidcalc': 'OneOfTestLeakOffLeakoffdensityfluidcalc',
        'leakoffoccurred': 'int',
        'leakoffpres': 'OneOfTestLeakOffLeakoffpres',
        'leakoffprescalc': 'OneOfTestLeakOffLeakoffprescalc',
        'syscreatedate': 'datetime',
        'syscreateuser': 'str',
        'syslockchildren': 'int',
        'syslockchildrenui': 'int',
        'syslockdate': 'datetime',
        'syslockme': 'int',
        'syslockmeui': 'int',
        'sysmoddate': 'datetime',
        'sysmoduser': 'str',
        'systag': 'str',
        'test_leak_off_data': 'list[TestLeakOffData]',
        'testtyp': 'str',
        'volpumped': 'OneOfTestLeakOffVolpumped',
        'wellheader': 'AnyOfTestLeakOffWellheader'
    }

    attribute_map = {
        'com': 'com',
        'densityfluid': 'densityfluid',
        'depth': 'depth',
        'depthtvdcalc': 'depthtvdcalc',
        'dttm': 'dttm',
        'fluidtyp': 'fluidtyp',
        'idrec': 'idrec',
        'idreccas': 'idreccas',
        'idreccastk': 'idreccastk',
        'idrecfrm': 'idrecfrm',
        'idrecfrmtk': 'idrecfrmtk',
        'idwell': 'idwell',
        'leakoffdensityfluidcalc': 'leakoffdensityfluidcalc',
        'leakoffoccurred': 'leakoffoccurred',
        'leakoffpres': 'leakoffpres',
        'leakoffprescalc': 'leakoffprescalc',
        'syscreatedate': 'syscreatedate',
        'syscreateuser': 'syscreateuser',
        'syslockchildren': 'syslockchildren',
        'syslockchildrenui': 'syslockchildrenui',
        'syslockdate': 'syslockdate',
        'syslockme': 'syslockme',
        'syslockmeui': 'syslockmeui',
        'sysmoddate': 'sysmoddate',
        'sysmoduser': 'sysmoduser',
        'systag': 'systag',
        'test_leak_off_data': 'testLeakOffData',
        'testtyp': 'testtyp',
        'volpumped': 'volpumped',
        'wellheader': 'wellheader'
    }

    def __init__(self, com=None, densityfluid=None, depth=None, depthtvdcalc=None, dttm=None, fluidtyp=None, idrec=None, idreccas=None, idreccastk=None, idrecfrm=None, idrecfrmtk=None, idwell=None, leakoffdensityfluidcalc=None, leakoffoccurred=None, leakoffpres=None, leakoffprescalc=None, syscreatedate=None, syscreateuser=None, syslockchildren=None, syslockchildrenui=None, syslockdate=None, syslockme=None, syslockmeui=None, sysmoddate=None, sysmoduser=None, systag=None, test_leak_off_data=None, testtyp=None, volpumped=None, wellheader=None):  # noqa: E501
        """TestLeakOff - a model defined in Swagger"""  # noqa: E501
        self._com = None
        self._densityfluid = None
        self._depth = None
        self._depthtvdcalc = None
        self._dttm = None
        self._fluidtyp = None
        self._idrec = None
        self._idreccas = None
        self._idreccastk = None
        self._idrecfrm = None
        self._idrecfrmtk = None
        self._idwell = None
        self._leakoffdensityfluidcalc = None
        self._leakoffoccurred = None
        self._leakoffpres = None
        self._leakoffprescalc = None
        self._syscreatedate = None
        self._syscreateuser = None
        self._syslockchildren = None
        self._syslockchildrenui = None
        self._syslockdate = None
        self._syslockme = None
        self._syslockmeui = None
        self._sysmoddate = None
        self._sysmoduser = None
        self._systag = None
        self._test_leak_off_data = None
        self._testtyp = None
        self._volpumped = None
        self._wellheader = None
        self.discriminator = None
        if com is not None:
            self.com = com
        if densityfluid is not None:
            self.densityfluid = densityfluid
        if depth is not None:
            self.depth = depth
        if depthtvdcalc is not None:
            self.depthtvdcalc = depthtvdcalc
        if dttm is not None:
            self.dttm = dttm
        if fluidtyp is not None:
            self.fluidtyp = fluidtyp
        if idrec is not None:
            self.idrec = idrec
        if idreccas is not None:
            self.idreccas = idreccas
        if idreccastk is not None:
            self.idreccastk = idreccastk
        if idrecfrm is not None:
            self.idrecfrm = idrecfrm
        if idrecfrmtk is not None:
            self.idrecfrmtk = idrecfrmtk
        if idwell is not None:
            self.idwell = idwell
        if leakoffdensityfluidcalc is not None:
            self.leakoffdensityfluidcalc = leakoffdensityfluidcalc
        if leakoffoccurred is not None:
            self.leakoffoccurred = leakoffoccurred
        if leakoffpres is not None:
            self.leakoffpres = leakoffpres
        if leakoffprescalc is not None:
            self.leakoffprescalc = leakoffprescalc
        if syscreatedate is not None:
            self.syscreatedate = syscreatedate
        if syscreateuser is not None:
            self.syscreateuser = syscreateuser
        if syslockchildren is not None:
            self.syslockchildren = syslockchildren
        if syslockchildrenui is not None:
            self.syslockchildrenui = syslockchildrenui
        if syslockdate is not None:
            self.syslockdate = syslockdate
        if syslockme is not None:
            self.syslockme = syslockme
        if syslockmeui is not None:
            self.syslockmeui = syslockmeui
        if sysmoddate is not None:
            self.sysmoddate = sysmoddate
        if sysmoduser is not None:
            self.sysmoduser = sysmoduser
        if systag is not None:
            self.systag = systag
        if test_leak_off_data is not None:
            self.test_leak_off_data = test_leak_off_data
        if testtyp is not None:
            self.testtyp = testtyp
        if volpumped is not None:
            self.volpumped = volpumped
        if wellheader is not None:
            self.wellheader = wellheader

    @property
    def com(self):
        """Gets the com of this TestLeakOff.  # noqa: E501


        :return: The com of this TestLeakOff.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this TestLeakOff.


        :param com: The com of this TestLeakOff.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def densityfluid(self):
        """Gets the densityfluid of this TestLeakOff.  # noqa: E501


        :return: The densityfluid of this TestLeakOff.  # noqa: E501
        :rtype: OneOfTestLeakOffDensityfluid
        """
        return self._densityfluid

    @densityfluid.setter
    def densityfluid(self, densityfluid):
        """Sets the densityfluid of this TestLeakOff.


        :param densityfluid: The densityfluid of this TestLeakOff.  # noqa: E501
        :type: OneOfTestLeakOffDensityfluid
        """

        self._densityfluid = densityfluid

    @property
    def depth(self):
        """Gets the depth of this TestLeakOff.  # noqa: E501


        :return: The depth of this TestLeakOff.  # noqa: E501
        :rtype: OneOfTestLeakOffDepth
        """
        return self._depth

    @depth.setter
    def depth(self, depth):
        """Sets the depth of this TestLeakOff.


        :param depth: The depth of this TestLeakOff.  # noqa: E501
        :type: OneOfTestLeakOffDepth
        """

        self._depth = depth

    @property
    def depthtvdcalc(self):
        """Gets the depthtvdcalc of this TestLeakOff.  # noqa: E501


        :return: The depthtvdcalc of this TestLeakOff.  # noqa: E501
        :rtype: OneOfTestLeakOffDepthtvdcalc
        """
        return self._depthtvdcalc

    @depthtvdcalc.setter
    def depthtvdcalc(self, depthtvdcalc):
        """Sets the depthtvdcalc of this TestLeakOff.


        :param depthtvdcalc: The depthtvdcalc of this TestLeakOff.  # noqa: E501
        :type: OneOfTestLeakOffDepthtvdcalc
        """

        self._depthtvdcalc = depthtvdcalc

    @property
    def dttm(self):
        """Gets the dttm of this TestLeakOff.  # noqa: E501


        :return: The dttm of this TestLeakOff.  # noqa: E501
        :rtype: datetime
        """
        return self._dttm

    @dttm.setter
    def dttm(self, dttm):
        """Sets the dttm of this TestLeakOff.


        :param dttm: The dttm of this TestLeakOff.  # noqa: E501
        :type: datetime
        """

        self._dttm = dttm

    @property
    def fluidtyp(self):
        """Gets the fluidtyp of this TestLeakOff.  # noqa: E501


        :return: The fluidtyp of this TestLeakOff.  # noqa: E501
        :rtype: str
        """
        return self._fluidtyp

    @fluidtyp.setter
    def fluidtyp(self, fluidtyp):
        """Sets the fluidtyp of this TestLeakOff.


        :param fluidtyp: The fluidtyp of this TestLeakOff.  # noqa: E501
        :type: str
        """

        self._fluidtyp = fluidtyp

    @property
    def idrec(self):
        """Gets the idrec of this TestLeakOff.  # noqa: E501


        :return: The idrec of this TestLeakOff.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this TestLeakOff.


        :param idrec: The idrec of this TestLeakOff.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idreccas(self):
        """Gets the idreccas of this TestLeakOff.  # noqa: E501


        :return: The idreccas of this TestLeakOff.  # noqa: E501
        :rtype: str
        """
        return self._idreccas

    @idreccas.setter
    def idreccas(self, idreccas):
        """Sets the idreccas of this TestLeakOff.


        :param idreccas: The idreccas of this TestLeakOff.  # noqa: E501
        :type: str
        """

        self._idreccas = idreccas

    @property
    def idreccastk(self):
        """Gets the idreccastk of this TestLeakOff.  # noqa: E501


        :return: The idreccastk of this TestLeakOff.  # noqa: E501
        :rtype: str
        """
        return self._idreccastk

    @idreccastk.setter
    def idreccastk(self, idreccastk):
        """Sets the idreccastk of this TestLeakOff.


        :param idreccastk: The idreccastk of this TestLeakOff.  # noqa: E501
        :type: str
        """

        self._idreccastk = idreccastk

    @property
    def idrecfrm(self):
        """Gets the idrecfrm of this TestLeakOff.  # noqa: E501


        :return: The idrecfrm of this TestLeakOff.  # noqa: E501
        :rtype: str
        """
        return self._idrecfrm

    @idrecfrm.setter
    def idrecfrm(self, idrecfrm):
        """Sets the idrecfrm of this TestLeakOff.


        :param idrecfrm: The idrecfrm of this TestLeakOff.  # noqa: E501
        :type: str
        """

        self._idrecfrm = idrecfrm

    @property
    def idrecfrmtk(self):
        """Gets the idrecfrmtk of this TestLeakOff.  # noqa: E501


        :return: The idrecfrmtk of this TestLeakOff.  # noqa: E501
        :rtype: str
        """
        return self._idrecfrmtk

    @idrecfrmtk.setter
    def idrecfrmtk(self, idrecfrmtk):
        """Sets the idrecfrmtk of this TestLeakOff.


        :param idrecfrmtk: The idrecfrmtk of this TestLeakOff.  # noqa: E501
        :type: str
        """

        self._idrecfrmtk = idrecfrmtk

    @property
    def idwell(self):
        """Gets the idwell of this TestLeakOff.  # noqa: E501


        :return: The idwell of this TestLeakOff.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this TestLeakOff.


        :param idwell: The idwell of this TestLeakOff.  # noqa: E501
        :type: str
        """

        self._idwell = idwell

    @property
    def leakoffdensityfluidcalc(self):
        """Gets the leakoffdensityfluidcalc of this TestLeakOff.  # noqa: E501


        :return: The leakoffdensityfluidcalc of this TestLeakOff.  # noqa: E501
        :rtype: OneOfTestLeakOffLeakoffdensityfluidcalc
        """
        return self._leakoffdensityfluidcalc

    @leakoffdensityfluidcalc.setter
    def leakoffdensityfluidcalc(self, leakoffdensityfluidcalc):
        """Sets the leakoffdensityfluidcalc of this TestLeakOff.


        :param leakoffdensityfluidcalc: The leakoffdensityfluidcalc of this TestLeakOff.  # noqa: E501
        :type: OneOfTestLeakOffLeakoffdensityfluidcalc
        """

        self._leakoffdensityfluidcalc = leakoffdensityfluidcalc

    @property
    def leakoffoccurred(self):
        """Gets the leakoffoccurred of this TestLeakOff.  # noqa: E501


        :return: The leakoffoccurred of this TestLeakOff.  # noqa: E501
        :rtype: int
        """
        return self._leakoffoccurred

    @leakoffoccurred.setter
    def leakoffoccurred(self, leakoffoccurred):
        """Sets the leakoffoccurred of this TestLeakOff.


        :param leakoffoccurred: The leakoffoccurred of this TestLeakOff.  # noqa: E501
        :type: int
        """

        self._leakoffoccurred = leakoffoccurred

    @property
    def leakoffpres(self):
        """Gets the leakoffpres of this TestLeakOff.  # noqa: E501


        :return: The leakoffpres of this TestLeakOff.  # noqa: E501
        :rtype: OneOfTestLeakOffLeakoffpres
        """
        return self._leakoffpres

    @leakoffpres.setter
    def leakoffpres(self, leakoffpres):
        """Sets the leakoffpres of this TestLeakOff.


        :param leakoffpres: The leakoffpres of this TestLeakOff.  # noqa: E501
        :type: OneOfTestLeakOffLeakoffpres
        """

        self._leakoffpres = leakoffpres

    @property
    def leakoffprescalc(self):
        """Gets the leakoffprescalc of this TestLeakOff.  # noqa: E501


        :return: The leakoffprescalc of this TestLeakOff.  # noqa: E501
        :rtype: OneOfTestLeakOffLeakoffprescalc
        """
        return self._leakoffprescalc

    @leakoffprescalc.setter
    def leakoffprescalc(self, leakoffprescalc):
        """Sets the leakoffprescalc of this TestLeakOff.


        :param leakoffprescalc: The leakoffprescalc of this TestLeakOff.  # noqa: E501
        :type: OneOfTestLeakOffLeakoffprescalc
        """

        self._leakoffprescalc = leakoffprescalc

    @property
    def syscreatedate(self):
        """Gets the syscreatedate of this TestLeakOff.  # noqa: E501


        :return: The syscreatedate of this TestLeakOff.  # noqa: E501
        :rtype: datetime
        """
        return self._syscreatedate

    @syscreatedate.setter
    def syscreatedate(self, syscreatedate):
        """Sets the syscreatedate of this TestLeakOff.


        :param syscreatedate: The syscreatedate of this TestLeakOff.  # noqa: E501
        :type: datetime
        """

        self._syscreatedate = syscreatedate

    @property
    def syscreateuser(self):
        """Gets the syscreateuser of this TestLeakOff.  # noqa: E501


        :return: The syscreateuser of this TestLeakOff.  # noqa: E501
        :rtype: str
        """
        return self._syscreateuser

    @syscreateuser.setter
    def syscreateuser(self, syscreateuser):
        """Sets the syscreateuser of this TestLeakOff.


        :param syscreateuser: The syscreateuser of this TestLeakOff.  # noqa: E501
        :type: str
        """

        self._syscreateuser = syscreateuser

    @property
    def syslockchildren(self):
        """Gets the syslockchildren of this TestLeakOff.  # noqa: E501


        :return: The syslockchildren of this TestLeakOff.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildren

    @syslockchildren.setter
    def syslockchildren(self, syslockchildren):
        """Sets the syslockchildren of this TestLeakOff.


        :param syslockchildren: The syslockchildren of this TestLeakOff.  # noqa: E501
        :type: int
        """

        self._syslockchildren = syslockchildren

    @property
    def syslockchildrenui(self):
        """Gets the syslockchildrenui of this TestLeakOff.  # noqa: E501


        :return: The syslockchildrenui of this TestLeakOff.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildrenui

    @syslockchildrenui.setter
    def syslockchildrenui(self, syslockchildrenui):
        """Sets the syslockchildrenui of this TestLeakOff.


        :param syslockchildrenui: The syslockchildrenui of this TestLeakOff.  # noqa: E501
        :type: int
        """

        self._syslockchildrenui = syslockchildrenui

    @property
    def syslockdate(self):
        """Gets the syslockdate of this TestLeakOff.  # noqa: E501


        :return: The syslockdate of this TestLeakOff.  # noqa: E501
        :rtype: datetime
        """
        return self._syslockdate

    @syslockdate.setter
    def syslockdate(self, syslockdate):
        """Sets the syslockdate of this TestLeakOff.


        :param syslockdate: The syslockdate of this TestLeakOff.  # noqa: E501
        :type: datetime
        """

        self._syslockdate = syslockdate

    @property
    def syslockme(self):
        """Gets the syslockme of this TestLeakOff.  # noqa: E501


        :return: The syslockme of this TestLeakOff.  # noqa: E501
        :rtype: int
        """
        return self._syslockme

    @syslockme.setter
    def syslockme(self, syslockme):
        """Sets the syslockme of this TestLeakOff.


        :param syslockme: The syslockme of this TestLeakOff.  # noqa: E501
        :type: int
        """

        self._syslockme = syslockme

    @property
    def syslockmeui(self):
        """Gets the syslockmeui of this TestLeakOff.  # noqa: E501


        :return: The syslockmeui of this TestLeakOff.  # noqa: E501
        :rtype: int
        """
        return self._syslockmeui

    @syslockmeui.setter
    def syslockmeui(self, syslockmeui):
        """Sets the syslockmeui of this TestLeakOff.


        :param syslockmeui: The syslockmeui of this TestLeakOff.  # noqa: E501
        :type: int
        """

        self._syslockmeui = syslockmeui

    @property
    def sysmoddate(self):
        """Gets the sysmoddate of this TestLeakOff.  # noqa: E501


        :return: The sysmoddate of this TestLeakOff.  # noqa: E501
        :rtype: datetime
        """
        return self._sysmoddate

    @sysmoddate.setter
    def sysmoddate(self, sysmoddate):
        """Sets the sysmoddate of this TestLeakOff.


        :param sysmoddate: The sysmoddate of this TestLeakOff.  # noqa: E501
        :type: datetime
        """

        self._sysmoddate = sysmoddate

    @property
    def sysmoduser(self):
        """Gets the sysmoduser of this TestLeakOff.  # noqa: E501


        :return: The sysmoduser of this TestLeakOff.  # noqa: E501
        :rtype: str
        """
        return self._sysmoduser

    @sysmoduser.setter
    def sysmoduser(self, sysmoduser):
        """Sets the sysmoduser of this TestLeakOff.


        :param sysmoduser: The sysmoduser of this TestLeakOff.  # noqa: E501
        :type: str
        """

        self._sysmoduser = sysmoduser

    @property
    def systag(self):
        """Gets the systag of this TestLeakOff.  # noqa: E501


        :return: The systag of this TestLeakOff.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this TestLeakOff.


        :param systag: The systag of this TestLeakOff.  # noqa: E501
        :type: str
        """

        self._systag = systag

    @property
    def test_leak_off_data(self):
        """Gets the test_leak_off_data of this TestLeakOff.  # noqa: E501


        :return: The test_leak_off_data of this TestLeakOff.  # noqa: E501
        :rtype: list[TestLeakOffData]
        """
        return self._test_leak_off_data

    @test_leak_off_data.setter
    def test_leak_off_data(self, test_leak_off_data):
        """Sets the test_leak_off_data of this TestLeakOff.


        :param test_leak_off_data: The test_leak_off_data of this TestLeakOff.  # noqa: E501
        :type: list[TestLeakOffData]
        """

        self._test_leak_off_data = test_leak_off_data

    @property
    def testtyp(self):
        """Gets the testtyp of this TestLeakOff.  # noqa: E501


        :return: The testtyp of this TestLeakOff.  # noqa: E501
        :rtype: str
        """
        return self._testtyp

    @testtyp.setter
    def testtyp(self, testtyp):
        """Sets the testtyp of this TestLeakOff.


        :param testtyp: The testtyp of this TestLeakOff.  # noqa: E501
        :type: str
        """

        self._testtyp = testtyp

    @property
    def volpumped(self):
        """Gets the volpumped of this TestLeakOff.  # noqa: E501


        :return: The volpumped of this TestLeakOff.  # noqa: E501
        :rtype: OneOfTestLeakOffVolpumped
        """
        return self._volpumped

    @volpumped.setter
    def volpumped(self, volpumped):
        """Sets the volpumped of this TestLeakOff.


        :param volpumped: The volpumped of this TestLeakOff.  # noqa: E501
        :type: OneOfTestLeakOffVolpumped
        """

        self._volpumped = volpumped

    @property
    def wellheader(self):
        """Gets the wellheader of this TestLeakOff.  # noqa: E501


        :return: The wellheader of this TestLeakOff.  # noqa: E501
        :rtype: AnyOfTestLeakOffWellheader
        """
        return self._wellheader

    @wellheader.setter
    def wellheader(self, wellheader):
        """Sets the wellheader of this TestLeakOff.


        :param wellheader: The wellheader of this TestLeakOff.  # noqa: E501
        :type: AnyOfTestLeakOffWellheader
        """

        self._wellheader = wellheader

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TestLeakOff, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TestLeakOff):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
