# coding: utf-8

"""
    OData Service for namespace Default

    This OData service is located at http://localhost  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Log(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'analyst': 'str',
        'casedhole': 'int',
        'com': 'str',
        'contractor': 'str',
        'definitive': 'int',
        'depthbtm': 'OneOfLogDepthbtm',
        'depthincr': 'OneOfLogDepthincr',
        'depthtop': 'OneOfLogDepthtop',
        'dttm': 'datetime',
        'durationsincecirc': 'OneOfLogDurationsincecirc',
        'idrec': 'str',
        'idrecjob': 'str',
        'idrecjobtk': 'str',
        'idrecwellbore': 'str',
        'idrecwellboretk': 'str',
        'idwell': 'str',
        'log_curves': 'list[LogCurve]',
        'log_tools': 'list[LogTool]',
        'proposed': 'int',
        'runno': 'int',
        'syscreatedate': 'datetime',
        'syscreateuser': 'str',
        'syslockchildren': 'int',
        'syslockchildrenui': 'int',
        'syslockdate': 'datetime',
        'syslockme': 'int',
        'syslockmeui': 'int',
        'sysmoddate': 'datetime',
        'sysmoduser': 'str',
        'systag': 'str',
        'tempmax': 'OneOfLogTempmax',
        'typ': 'str',
        'wellheader': 'AnyOfLogWellheader'
    }

    attribute_map = {
        'analyst': 'analyst',
        'casedhole': 'casedhole',
        'com': 'com',
        'contractor': 'contractor',
        'definitive': 'definitive',
        'depthbtm': 'depthbtm',
        'depthincr': 'depthincr',
        'depthtop': 'depthtop',
        'dttm': 'dttm',
        'durationsincecirc': 'durationsincecirc',
        'idrec': 'idrec',
        'idrecjob': 'idrecjob',
        'idrecjobtk': 'idrecjobtk',
        'idrecwellbore': 'idrecwellbore',
        'idrecwellboretk': 'idrecwellboretk',
        'idwell': 'idwell',
        'log_curves': 'logCurves',
        'log_tools': 'logTools',
        'proposed': 'proposed',
        'runno': 'runno',
        'syscreatedate': 'syscreatedate',
        'syscreateuser': 'syscreateuser',
        'syslockchildren': 'syslockchildren',
        'syslockchildrenui': 'syslockchildrenui',
        'syslockdate': 'syslockdate',
        'syslockme': 'syslockme',
        'syslockmeui': 'syslockmeui',
        'sysmoddate': 'sysmoddate',
        'sysmoduser': 'sysmoduser',
        'systag': 'systag',
        'tempmax': 'tempmax',
        'typ': 'typ',
        'wellheader': 'wellheader'
    }

    def __init__(self, analyst=None, casedhole=None, com=None, contractor=None, definitive=None, depthbtm=None, depthincr=None, depthtop=None, dttm=None, durationsincecirc=None, idrec=None, idrecjob=None, idrecjobtk=None, idrecwellbore=None, idrecwellboretk=None, idwell=None, log_curves=None, log_tools=None, proposed=None, runno=None, syscreatedate=None, syscreateuser=None, syslockchildren=None, syslockchildrenui=None, syslockdate=None, syslockme=None, syslockmeui=None, sysmoddate=None, sysmoduser=None, systag=None, tempmax=None, typ=None, wellheader=None):  # noqa: E501
        """Log - a model defined in Swagger"""  # noqa: E501
        self._analyst = None
        self._casedhole = None
        self._com = None
        self._contractor = None
        self._definitive = None
        self._depthbtm = None
        self._depthincr = None
        self._depthtop = None
        self._dttm = None
        self._durationsincecirc = None
        self._idrec = None
        self._idrecjob = None
        self._idrecjobtk = None
        self._idrecwellbore = None
        self._idrecwellboretk = None
        self._idwell = None
        self._log_curves = None
        self._log_tools = None
        self._proposed = None
        self._runno = None
        self._syscreatedate = None
        self._syscreateuser = None
        self._syslockchildren = None
        self._syslockchildrenui = None
        self._syslockdate = None
        self._syslockme = None
        self._syslockmeui = None
        self._sysmoddate = None
        self._sysmoduser = None
        self._systag = None
        self._tempmax = None
        self._typ = None
        self._wellheader = None
        self.discriminator = None
        if analyst is not None:
            self.analyst = analyst
        if casedhole is not None:
            self.casedhole = casedhole
        if com is not None:
            self.com = com
        if contractor is not None:
            self.contractor = contractor
        if definitive is not None:
            self.definitive = definitive
        if depthbtm is not None:
            self.depthbtm = depthbtm
        if depthincr is not None:
            self.depthincr = depthincr
        if depthtop is not None:
            self.depthtop = depthtop
        if dttm is not None:
            self.dttm = dttm
        if durationsincecirc is not None:
            self.durationsincecirc = durationsincecirc
        if idrec is not None:
            self.idrec = idrec
        if idrecjob is not None:
            self.idrecjob = idrecjob
        if idrecjobtk is not None:
            self.idrecjobtk = idrecjobtk
        if idrecwellbore is not None:
            self.idrecwellbore = idrecwellbore
        if idrecwellboretk is not None:
            self.idrecwellboretk = idrecwellboretk
        if idwell is not None:
            self.idwell = idwell
        if log_curves is not None:
            self.log_curves = log_curves
        if log_tools is not None:
            self.log_tools = log_tools
        if proposed is not None:
            self.proposed = proposed
        if runno is not None:
            self.runno = runno
        if syscreatedate is not None:
            self.syscreatedate = syscreatedate
        if syscreateuser is not None:
            self.syscreateuser = syscreateuser
        if syslockchildren is not None:
            self.syslockchildren = syslockchildren
        if syslockchildrenui is not None:
            self.syslockchildrenui = syslockchildrenui
        if syslockdate is not None:
            self.syslockdate = syslockdate
        if syslockme is not None:
            self.syslockme = syslockme
        if syslockmeui is not None:
            self.syslockmeui = syslockmeui
        if sysmoddate is not None:
            self.sysmoddate = sysmoddate
        if sysmoduser is not None:
            self.sysmoduser = sysmoduser
        if systag is not None:
            self.systag = systag
        if tempmax is not None:
            self.tempmax = tempmax
        if typ is not None:
            self.typ = typ
        if wellheader is not None:
            self.wellheader = wellheader

    @property
    def analyst(self):
        """Gets the analyst of this Log.  # noqa: E501


        :return: The analyst of this Log.  # noqa: E501
        :rtype: str
        """
        return self._analyst

    @analyst.setter
    def analyst(self, analyst):
        """Sets the analyst of this Log.


        :param analyst: The analyst of this Log.  # noqa: E501
        :type: str
        """

        self._analyst = analyst

    @property
    def casedhole(self):
        """Gets the casedhole of this Log.  # noqa: E501


        :return: The casedhole of this Log.  # noqa: E501
        :rtype: int
        """
        return self._casedhole

    @casedhole.setter
    def casedhole(self, casedhole):
        """Sets the casedhole of this Log.


        :param casedhole: The casedhole of this Log.  # noqa: E501
        :type: int
        """

        self._casedhole = casedhole

    @property
    def com(self):
        """Gets the com of this Log.  # noqa: E501


        :return: The com of this Log.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this Log.


        :param com: The com of this Log.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def contractor(self):
        """Gets the contractor of this Log.  # noqa: E501


        :return: The contractor of this Log.  # noqa: E501
        :rtype: str
        """
        return self._contractor

    @contractor.setter
    def contractor(self, contractor):
        """Sets the contractor of this Log.


        :param contractor: The contractor of this Log.  # noqa: E501
        :type: str
        """

        self._contractor = contractor

    @property
    def definitive(self):
        """Gets the definitive of this Log.  # noqa: E501


        :return: The definitive of this Log.  # noqa: E501
        :rtype: int
        """
        return self._definitive

    @definitive.setter
    def definitive(self, definitive):
        """Sets the definitive of this Log.


        :param definitive: The definitive of this Log.  # noqa: E501
        :type: int
        """

        self._definitive = definitive

    @property
    def depthbtm(self):
        """Gets the depthbtm of this Log.  # noqa: E501


        :return: The depthbtm of this Log.  # noqa: E501
        :rtype: OneOfLogDepthbtm
        """
        return self._depthbtm

    @depthbtm.setter
    def depthbtm(self, depthbtm):
        """Sets the depthbtm of this Log.


        :param depthbtm: The depthbtm of this Log.  # noqa: E501
        :type: OneOfLogDepthbtm
        """

        self._depthbtm = depthbtm

    @property
    def depthincr(self):
        """Gets the depthincr of this Log.  # noqa: E501


        :return: The depthincr of this Log.  # noqa: E501
        :rtype: OneOfLogDepthincr
        """
        return self._depthincr

    @depthincr.setter
    def depthincr(self, depthincr):
        """Sets the depthincr of this Log.


        :param depthincr: The depthincr of this Log.  # noqa: E501
        :type: OneOfLogDepthincr
        """

        self._depthincr = depthincr

    @property
    def depthtop(self):
        """Gets the depthtop of this Log.  # noqa: E501


        :return: The depthtop of this Log.  # noqa: E501
        :rtype: OneOfLogDepthtop
        """
        return self._depthtop

    @depthtop.setter
    def depthtop(self, depthtop):
        """Sets the depthtop of this Log.


        :param depthtop: The depthtop of this Log.  # noqa: E501
        :type: OneOfLogDepthtop
        """

        self._depthtop = depthtop

    @property
    def dttm(self):
        """Gets the dttm of this Log.  # noqa: E501


        :return: The dttm of this Log.  # noqa: E501
        :rtype: datetime
        """
        return self._dttm

    @dttm.setter
    def dttm(self, dttm):
        """Sets the dttm of this Log.


        :param dttm: The dttm of this Log.  # noqa: E501
        :type: datetime
        """

        self._dttm = dttm

    @property
    def durationsincecirc(self):
        """Gets the durationsincecirc of this Log.  # noqa: E501


        :return: The durationsincecirc of this Log.  # noqa: E501
        :rtype: OneOfLogDurationsincecirc
        """
        return self._durationsincecirc

    @durationsincecirc.setter
    def durationsincecirc(self, durationsincecirc):
        """Sets the durationsincecirc of this Log.


        :param durationsincecirc: The durationsincecirc of this Log.  # noqa: E501
        :type: OneOfLogDurationsincecirc
        """

        self._durationsincecirc = durationsincecirc

    @property
    def idrec(self):
        """Gets the idrec of this Log.  # noqa: E501


        :return: The idrec of this Log.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this Log.


        :param idrec: The idrec of this Log.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecjob(self):
        """Gets the idrecjob of this Log.  # noqa: E501


        :return: The idrecjob of this Log.  # noqa: E501
        :rtype: str
        """
        return self._idrecjob

    @idrecjob.setter
    def idrecjob(self, idrecjob):
        """Sets the idrecjob of this Log.


        :param idrecjob: The idrecjob of this Log.  # noqa: E501
        :type: str
        """

        self._idrecjob = idrecjob

    @property
    def idrecjobtk(self):
        """Gets the idrecjobtk of this Log.  # noqa: E501


        :return: The idrecjobtk of this Log.  # noqa: E501
        :rtype: str
        """
        return self._idrecjobtk

    @idrecjobtk.setter
    def idrecjobtk(self, idrecjobtk):
        """Sets the idrecjobtk of this Log.


        :param idrecjobtk: The idrecjobtk of this Log.  # noqa: E501
        :type: str
        """

        self._idrecjobtk = idrecjobtk

    @property
    def idrecwellbore(self):
        """Gets the idrecwellbore of this Log.  # noqa: E501


        :return: The idrecwellbore of this Log.  # noqa: E501
        :rtype: str
        """
        return self._idrecwellbore

    @idrecwellbore.setter
    def idrecwellbore(self, idrecwellbore):
        """Sets the idrecwellbore of this Log.


        :param idrecwellbore: The idrecwellbore of this Log.  # noqa: E501
        :type: str
        """

        self._idrecwellbore = idrecwellbore

    @property
    def idrecwellboretk(self):
        """Gets the idrecwellboretk of this Log.  # noqa: E501


        :return: The idrecwellboretk of this Log.  # noqa: E501
        :rtype: str
        """
        return self._idrecwellboretk

    @idrecwellboretk.setter
    def idrecwellboretk(self, idrecwellboretk):
        """Sets the idrecwellboretk of this Log.


        :param idrecwellboretk: The idrecwellboretk of this Log.  # noqa: E501
        :type: str
        """

        self._idrecwellboretk = idrecwellboretk

    @property
    def idwell(self):
        """Gets the idwell of this Log.  # noqa: E501


        :return: The idwell of this Log.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this Log.


        :param idwell: The idwell of this Log.  # noqa: E501
        :type: str
        """

        self._idwell = idwell

    @property
    def log_curves(self):
        """Gets the log_curves of this Log.  # noqa: E501


        :return: The log_curves of this Log.  # noqa: E501
        :rtype: list[LogCurve]
        """
        return self._log_curves

    @log_curves.setter
    def log_curves(self, log_curves):
        """Sets the log_curves of this Log.


        :param log_curves: The log_curves of this Log.  # noqa: E501
        :type: list[LogCurve]
        """

        self._log_curves = log_curves

    @property
    def log_tools(self):
        """Gets the log_tools of this Log.  # noqa: E501


        :return: The log_tools of this Log.  # noqa: E501
        :rtype: list[LogTool]
        """
        return self._log_tools

    @log_tools.setter
    def log_tools(self, log_tools):
        """Sets the log_tools of this Log.


        :param log_tools: The log_tools of this Log.  # noqa: E501
        :type: list[LogTool]
        """

        self._log_tools = log_tools

    @property
    def proposed(self):
        """Gets the proposed of this Log.  # noqa: E501


        :return: The proposed of this Log.  # noqa: E501
        :rtype: int
        """
        return self._proposed

    @proposed.setter
    def proposed(self, proposed):
        """Sets the proposed of this Log.


        :param proposed: The proposed of this Log.  # noqa: E501
        :type: int
        """

        self._proposed = proposed

    @property
    def runno(self):
        """Gets the runno of this Log.  # noqa: E501


        :return: The runno of this Log.  # noqa: E501
        :rtype: int
        """
        return self._runno

    @runno.setter
    def runno(self, runno):
        """Sets the runno of this Log.


        :param runno: The runno of this Log.  # noqa: E501
        :type: int
        """

        self._runno = runno

    @property
    def syscreatedate(self):
        """Gets the syscreatedate of this Log.  # noqa: E501


        :return: The syscreatedate of this Log.  # noqa: E501
        :rtype: datetime
        """
        return self._syscreatedate

    @syscreatedate.setter
    def syscreatedate(self, syscreatedate):
        """Sets the syscreatedate of this Log.


        :param syscreatedate: The syscreatedate of this Log.  # noqa: E501
        :type: datetime
        """

        self._syscreatedate = syscreatedate

    @property
    def syscreateuser(self):
        """Gets the syscreateuser of this Log.  # noqa: E501


        :return: The syscreateuser of this Log.  # noqa: E501
        :rtype: str
        """
        return self._syscreateuser

    @syscreateuser.setter
    def syscreateuser(self, syscreateuser):
        """Sets the syscreateuser of this Log.


        :param syscreateuser: The syscreateuser of this Log.  # noqa: E501
        :type: str
        """

        self._syscreateuser = syscreateuser

    @property
    def syslockchildren(self):
        """Gets the syslockchildren of this Log.  # noqa: E501


        :return: The syslockchildren of this Log.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildren

    @syslockchildren.setter
    def syslockchildren(self, syslockchildren):
        """Sets the syslockchildren of this Log.


        :param syslockchildren: The syslockchildren of this Log.  # noqa: E501
        :type: int
        """

        self._syslockchildren = syslockchildren

    @property
    def syslockchildrenui(self):
        """Gets the syslockchildrenui of this Log.  # noqa: E501


        :return: The syslockchildrenui of this Log.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildrenui

    @syslockchildrenui.setter
    def syslockchildrenui(self, syslockchildrenui):
        """Sets the syslockchildrenui of this Log.


        :param syslockchildrenui: The syslockchildrenui of this Log.  # noqa: E501
        :type: int
        """

        self._syslockchildrenui = syslockchildrenui

    @property
    def syslockdate(self):
        """Gets the syslockdate of this Log.  # noqa: E501


        :return: The syslockdate of this Log.  # noqa: E501
        :rtype: datetime
        """
        return self._syslockdate

    @syslockdate.setter
    def syslockdate(self, syslockdate):
        """Sets the syslockdate of this Log.


        :param syslockdate: The syslockdate of this Log.  # noqa: E501
        :type: datetime
        """

        self._syslockdate = syslockdate

    @property
    def syslockme(self):
        """Gets the syslockme of this Log.  # noqa: E501


        :return: The syslockme of this Log.  # noqa: E501
        :rtype: int
        """
        return self._syslockme

    @syslockme.setter
    def syslockme(self, syslockme):
        """Sets the syslockme of this Log.


        :param syslockme: The syslockme of this Log.  # noqa: E501
        :type: int
        """

        self._syslockme = syslockme

    @property
    def syslockmeui(self):
        """Gets the syslockmeui of this Log.  # noqa: E501


        :return: The syslockmeui of this Log.  # noqa: E501
        :rtype: int
        """
        return self._syslockmeui

    @syslockmeui.setter
    def syslockmeui(self, syslockmeui):
        """Sets the syslockmeui of this Log.


        :param syslockmeui: The syslockmeui of this Log.  # noqa: E501
        :type: int
        """

        self._syslockmeui = syslockmeui

    @property
    def sysmoddate(self):
        """Gets the sysmoddate of this Log.  # noqa: E501


        :return: The sysmoddate of this Log.  # noqa: E501
        :rtype: datetime
        """
        return self._sysmoddate

    @sysmoddate.setter
    def sysmoddate(self, sysmoddate):
        """Sets the sysmoddate of this Log.


        :param sysmoddate: The sysmoddate of this Log.  # noqa: E501
        :type: datetime
        """

        self._sysmoddate = sysmoddate

    @property
    def sysmoduser(self):
        """Gets the sysmoduser of this Log.  # noqa: E501


        :return: The sysmoduser of this Log.  # noqa: E501
        :rtype: str
        """
        return self._sysmoduser

    @sysmoduser.setter
    def sysmoduser(self, sysmoduser):
        """Sets the sysmoduser of this Log.


        :param sysmoduser: The sysmoduser of this Log.  # noqa: E501
        :type: str
        """

        self._sysmoduser = sysmoduser

    @property
    def systag(self):
        """Gets the systag of this Log.  # noqa: E501


        :return: The systag of this Log.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this Log.


        :param systag: The systag of this Log.  # noqa: E501
        :type: str
        """

        self._systag = systag

    @property
    def tempmax(self):
        """Gets the tempmax of this Log.  # noqa: E501


        :return: The tempmax of this Log.  # noqa: E501
        :rtype: OneOfLogTempmax
        """
        return self._tempmax

    @tempmax.setter
    def tempmax(self, tempmax):
        """Sets the tempmax of this Log.


        :param tempmax: The tempmax of this Log.  # noqa: E501
        :type: OneOfLogTempmax
        """

        self._tempmax = tempmax

    @property
    def typ(self):
        """Gets the typ of this Log.  # noqa: E501


        :return: The typ of this Log.  # noqa: E501
        :rtype: str
        """
        return self._typ

    @typ.setter
    def typ(self, typ):
        """Sets the typ of this Log.


        :param typ: The typ of this Log.  # noqa: E501
        :type: str
        """

        self._typ = typ

    @property
    def wellheader(self):
        """Gets the wellheader of this Log.  # noqa: E501


        :return: The wellheader of this Log.  # noqa: E501
        :rtype: AnyOfLogWellheader
        """
        return self._wellheader

    @wellheader.setter
    def wellheader(self, wellheader):
        """Sets the wellheader of this Log.


        :param wellheader: The wellheader of this Log.  # noqa: E501
        :type: AnyOfLogWellheader
        """

        self._wellheader = wellheader

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Log, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Log):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
