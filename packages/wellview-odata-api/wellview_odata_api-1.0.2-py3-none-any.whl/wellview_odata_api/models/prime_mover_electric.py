# coding: utf-8

"""
    OData Service for namespace Default

    This OData service is located at http://localhost  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PrimeMoverElectric(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'currentrating': 'OneOfPrimeMoverElectricCurrentrating',
        'idrec': 'str',
        'idrecparent': 'str',
        'idwell': 'str',
        'motorpoles': 'int',
        'nemarating': 'str',
        'prime_mover': 'AnyOfPrimeMoverElectricPrimeMover',
        'syscreatedate': 'datetime',
        'syscreateuser': 'str',
        'syslockchildren': 'int',
        'syslockchildrenui': 'int',
        'syslockdate': 'datetime',
        'syslockme': 'int',
        'syslockmeui': 'int',
        'sysmoddate': 'datetime',
        'sysmoduser': 'str',
        'systag': 'str',
        'typ': 'str',
        'utilityco': 'str',
        'varspddrv': 'int',
        'varspddrvlowerfreq': 'OneOfPrimeMoverElectricVarspddrvlowerfreq',
        'varspddrvmake': 'str',
        'varspddrvmodel': 'str',
        'varspddrvupperfreq': 'OneOfPrimeMoverElectricVarspddrvupperfreq',
        'voltagerating': 'OneOfPrimeMoverElectricVoltagerating'
    }

    attribute_map = {
        'currentrating': 'currentrating',
        'idrec': 'idrec',
        'idrecparent': 'idrecparent',
        'idwell': 'idwell',
        'motorpoles': 'motorpoles',
        'nemarating': 'nemarating',
        'prime_mover': 'primeMover',
        'syscreatedate': 'syscreatedate',
        'syscreateuser': 'syscreateuser',
        'syslockchildren': 'syslockchildren',
        'syslockchildrenui': 'syslockchildrenui',
        'syslockdate': 'syslockdate',
        'syslockme': 'syslockme',
        'syslockmeui': 'syslockmeui',
        'sysmoddate': 'sysmoddate',
        'sysmoduser': 'sysmoduser',
        'systag': 'systag',
        'typ': 'typ',
        'utilityco': 'utilityco',
        'varspddrv': 'varspddrv',
        'varspddrvlowerfreq': 'varspddrvlowerfreq',
        'varspddrvmake': 'varspddrvmake',
        'varspddrvmodel': 'varspddrvmodel',
        'varspddrvupperfreq': 'varspddrvupperfreq',
        'voltagerating': 'voltagerating'
    }

    def __init__(self, currentrating=None, idrec=None, idrecparent=None, idwell=None, motorpoles=None, nemarating=None, prime_mover=None, syscreatedate=None, syscreateuser=None, syslockchildren=None, syslockchildrenui=None, syslockdate=None, syslockme=None, syslockmeui=None, sysmoddate=None, sysmoduser=None, systag=None, typ=None, utilityco=None, varspddrv=None, varspddrvlowerfreq=None, varspddrvmake=None, varspddrvmodel=None, varspddrvupperfreq=None, voltagerating=None):  # noqa: E501
        """PrimeMoverElectric - a model defined in Swagger"""  # noqa: E501
        self._currentrating = None
        self._idrec = None
        self._idrecparent = None
        self._idwell = None
        self._motorpoles = None
        self._nemarating = None
        self._prime_mover = None
        self._syscreatedate = None
        self._syscreateuser = None
        self._syslockchildren = None
        self._syslockchildrenui = None
        self._syslockdate = None
        self._syslockme = None
        self._syslockmeui = None
        self._sysmoddate = None
        self._sysmoduser = None
        self._systag = None
        self._typ = None
        self._utilityco = None
        self._varspddrv = None
        self._varspddrvlowerfreq = None
        self._varspddrvmake = None
        self._varspddrvmodel = None
        self._varspddrvupperfreq = None
        self._voltagerating = None
        self.discriminator = None
        if currentrating is not None:
            self.currentrating = currentrating
        if idrec is not None:
            self.idrec = idrec
        if idrecparent is not None:
            self.idrecparent = idrecparent
        if idwell is not None:
            self.idwell = idwell
        if motorpoles is not None:
            self.motorpoles = motorpoles
        if nemarating is not None:
            self.nemarating = nemarating
        if prime_mover is not None:
            self.prime_mover = prime_mover
        if syscreatedate is not None:
            self.syscreatedate = syscreatedate
        if syscreateuser is not None:
            self.syscreateuser = syscreateuser
        if syslockchildren is not None:
            self.syslockchildren = syslockchildren
        if syslockchildrenui is not None:
            self.syslockchildrenui = syslockchildrenui
        if syslockdate is not None:
            self.syslockdate = syslockdate
        if syslockme is not None:
            self.syslockme = syslockme
        if syslockmeui is not None:
            self.syslockmeui = syslockmeui
        if sysmoddate is not None:
            self.sysmoddate = sysmoddate
        if sysmoduser is not None:
            self.sysmoduser = sysmoduser
        if systag is not None:
            self.systag = systag
        if typ is not None:
            self.typ = typ
        if utilityco is not None:
            self.utilityco = utilityco
        if varspddrv is not None:
            self.varspddrv = varspddrv
        if varspddrvlowerfreq is not None:
            self.varspddrvlowerfreq = varspddrvlowerfreq
        if varspddrvmake is not None:
            self.varspddrvmake = varspddrvmake
        if varspddrvmodel is not None:
            self.varspddrvmodel = varspddrvmodel
        if varspddrvupperfreq is not None:
            self.varspddrvupperfreq = varspddrvupperfreq
        if voltagerating is not None:
            self.voltagerating = voltagerating

    @property
    def currentrating(self):
        """Gets the currentrating of this PrimeMoverElectric.  # noqa: E501


        :return: The currentrating of this PrimeMoverElectric.  # noqa: E501
        :rtype: OneOfPrimeMoverElectricCurrentrating
        """
        return self._currentrating

    @currentrating.setter
    def currentrating(self, currentrating):
        """Sets the currentrating of this PrimeMoverElectric.


        :param currentrating: The currentrating of this PrimeMoverElectric.  # noqa: E501
        :type: OneOfPrimeMoverElectricCurrentrating
        """

        self._currentrating = currentrating

    @property
    def idrec(self):
        """Gets the idrec of this PrimeMoverElectric.  # noqa: E501


        :return: The idrec of this PrimeMoverElectric.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this PrimeMoverElectric.


        :param idrec: The idrec of this PrimeMoverElectric.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecparent(self):
        """Gets the idrecparent of this PrimeMoverElectric.  # noqa: E501


        :return: The idrecparent of this PrimeMoverElectric.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this PrimeMoverElectric.


        :param idrecparent: The idrecparent of this PrimeMoverElectric.  # noqa: E501
        :type: str
        """

        self._idrecparent = idrecparent

    @property
    def idwell(self):
        """Gets the idwell of this PrimeMoverElectric.  # noqa: E501


        :return: The idwell of this PrimeMoverElectric.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this PrimeMoverElectric.


        :param idwell: The idwell of this PrimeMoverElectric.  # noqa: E501
        :type: str
        """

        self._idwell = idwell

    @property
    def motorpoles(self):
        """Gets the motorpoles of this PrimeMoverElectric.  # noqa: E501


        :return: The motorpoles of this PrimeMoverElectric.  # noqa: E501
        :rtype: int
        """
        return self._motorpoles

    @motorpoles.setter
    def motorpoles(self, motorpoles):
        """Sets the motorpoles of this PrimeMoverElectric.


        :param motorpoles: The motorpoles of this PrimeMoverElectric.  # noqa: E501
        :type: int
        """

        self._motorpoles = motorpoles

    @property
    def nemarating(self):
        """Gets the nemarating of this PrimeMoverElectric.  # noqa: E501


        :return: The nemarating of this PrimeMoverElectric.  # noqa: E501
        :rtype: str
        """
        return self._nemarating

    @nemarating.setter
    def nemarating(self, nemarating):
        """Sets the nemarating of this PrimeMoverElectric.


        :param nemarating: The nemarating of this PrimeMoverElectric.  # noqa: E501
        :type: str
        """

        self._nemarating = nemarating

    @property
    def prime_mover(self):
        """Gets the prime_mover of this PrimeMoverElectric.  # noqa: E501


        :return: The prime_mover of this PrimeMoverElectric.  # noqa: E501
        :rtype: AnyOfPrimeMoverElectricPrimeMover
        """
        return self._prime_mover

    @prime_mover.setter
    def prime_mover(self, prime_mover):
        """Sets the prime_mover of this PrimeMoverElectric.


        :param prime_mover: The prime_mover of this PrimeMoverElectric.  # noqa: E501
        :type: AnyOfPrimeMoverElectricPrimeMover
        """

        self._prime_mover = prime_mover

    @property
    def syscreatedate(self):
        """Gets the syscreatedate of this PrimeMoverElectric.  # noqa: E501


        :return: The syscreatedate of this PrimeMoverElectric.  # noqa: E501
        :rtype: datetime
        """
        return self._syscreatedate

    @syscreatedate.setter
    def syscreatedate(self, syscreatedate):
        """Sets the syscreatedate of this PrimeMoverElectric.


        :param syscreatedate: The syscreatedate of this PrimeMoverElectric.  # noqa: E501
        :type: datetime
        """

        self._syscreatedate = syscreatedate

    @property
    def syscreateuser(self):
        """Gets the syscreateuser of this PrimeMoverElectric.  # noqa: E501


        :return: The syscreateuser of this PrimeMoverElectric.  # noqa: E501
        :rtype: str
        """
        return self._syscreateuser

    @syscreateuser.setter
    def syscreateuser(self, syscreateuser):
        """Sets the syscreateuser of this PrimeMoverElectric.


        :param syscreateuser: The syscreateuser of this PrimeMoverElectric.  # noqa: E501
        :type: str
        """

        self._syscreateuser = syscreateuser

    @property
    def syslockchildren(self):
        """Gets the syslockchildren of this PrimeMoverElectric.  # noqa: E501


        :return: The syslockchildren of this PrimeMoverElectric.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildren

    @syslockchildren.setter
    def syslockchildren(self, syslockchildren):
        """Sets the syslockchildren of this PrimeMoverElectric.


        :param syslockchildren: The syslockchildren of this PrimeMoverElectric.  # noqa: E501
        :type: int
        """

        self._syslockchildren = syslockchildren

    @property
    def syslockchildrenui(self):
        """Gets the syslockchildrenui of this PrimeMoverElectric.  # noqa: E501


        :return: The syslockchildrenui of this PrimeMoverElectric.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildrenui

    @syslockchildrenui.setter
    def syslockchildrenui(self, syslockchildrenui):
        """Sets the syslockchildrenui of this PrimeMoverElectric.


        :param syslockchildrenui: The syslockchildrenui of this PrimeMoverElectric.  # noqa: E501
        :type: int
        """

        self._syslockchildrenui = syslockchildrenui

    @property
    def syslockdate(self):
        """Gets the syslockdate of this PrimeMoverElectric.  # noqa: E501


        :return: The syslockdate of this PrimeMoverElectric.  # noqa: E501
        :rtype: datetime
        """
        return self._syslockdate

    @syslockdate.setter
    def syslockdate(self, syslockdate):
        """Sets the syslockdate of this PrimeMoverElectric.


        :param syslockdate: The syslockdate of this PrimeMoverElectric.  # noqa: E501
        :type: datetime
        """

        self._syslockdate = syslockdate

    @property
    def syslockme(self):
        """Gets the syslockme of this PrimeMoverElectric.  # noqa: E501


        :return: The syslockme of this PrimeMoverElectric.  # noqa: E501
        :rtype: int
        """
        return self._syslockme

    @syslockme.setter
    def syslockme(self, syslockme):
        """Sets the syslockme of this PrimeMoverElectric.


        :param syslockme: The syslockme of this PrimeMoverElectric.  # noqa: E501
        :type: int
        """

        self._syslockme = syslockme

    @property
    def syslockmeui(self):
        """Gets the syslockmeui of this PrimeMoverElectric.  # noqa: E501


        :return: The syslockmeui of this PrimeMoverElectric.  # noqa: E501
        :rtype: int
        """
        return self._syslockmeui

    @syslockmeui.setter
    def syslockmeui(self, syslockmeui):
        """Sets the syslockmeui of this PrimeMoverElectric.


        :param syslockmeui: The syslockmeui of this PrimeMoverElectric.  # noqa: E501
        :type: int
        """

        self._syslockmeui = syslockmeui

    @property
    def sysmoddate(self):
        """Gets the sysmoddate of this PrimeMoverElectric.  # noqa: E501


        :return: The sysmoddate of this PrimeMoverElectric.  # noqa: E501
        :rtype: datetime
        """
        return self._sysmoddate

    @sysmoddate.setter
    def sysmoddate(self, sysmoddate):
        """Sets the sysmoddate of this PrimeMoverElectric.


        :param sysmoddate: The sysmoddate of this PrimeMoverElectric.  # noqa: E501
        :type: datetime
        """

        self._sysmoddate = sysmoddate

    @property
    def sysmoduser(self):
        """Gets the sysmoduser of this PrimeMoverElectric.  # noqa: E501


        :return: The sysmoduser of this PrimeMoverElectric.  # noqa: E501
        :rtype: str
        """
        return self._sysmoduser

    @sysmoduser.setter
    def sysmoduser(self, sysmoduser):
        """Sets the sysmoduser of this PrimeMoverElectric.


        :param sysmoduser: The sysmoduser of this PrimeMoverElectric.  # noqa: E501
        :type: str
        """

        self._sysmoduser = sysmoduser

    @property
    def systag(self):
        """Gets the systag of this PrimeMoverElectric.  # noqa: E501


        :return: The systag of this PrimeMoverElectric.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this PrimeMoverElectric.


        :param systag: The systag of this PrimeMoverElectric.  # noqa: E501
        :type: str
        """

        self._systag = systag

    @property
    def typ(self):
        """Gets the typ of this PrimeMoverElectric.  # noqa: E501


        :return: The typ of this PrimeMoverElectric.  # noqa: E501
        :rtype: str
        """
        return self._typ

    @typ.setter
    def typ(self, typ):
        """Sets the typ of this PrimeMoverElectric.


        :param typ: The typ of this PrimeMoverElectric.  # noqa: E501
        :type: str
        """

        self._typ = typ

    @property
    def utilityco(self):
        """Gets the utilityco of this PrimeMoverElectric.  # noqa: E501


        :return: The utilityco of this PrimeMoverElectric.  # noqa: E501
        :rtype: str
        """
        return self._utilityco

    @utilityco.setter
    def utilityco(self, utilityco):
        """Sets the utilityco of this PrimeMoverElectric.


        :param utilityco: The utilityco of this PrimeMoverElectric.  # noqa: E501
        :type: str
        """

        self._utilityco = utilityco

    @property
    def varspddrv(self):
        """Gets the varspddrv of this PrimeMoverElectric.  # noqa: E501


        :return: The varspddrv of this PrimeMoverElectric.  # noqa: E501
        :rtype: int
        """
        return self._varspddrv

    @varspddrv.setter
    def varspddrv(self, varspddrv):
        """Sets the varspddrv of this PrimeMoverElectric.


        :param varspddrv: The varspddrv of this PrimeMoverElectric.  # noqa: E501
        :type: int
        """

        self._varspddrv = varspddrv

    @property
    def varspddrvlowerfreq(self):
        """Gets the varspddrvlowerfreq of this PrimeMoverElectric.  # noqa: E501


        :return: The varspddrvlowerfreq of this PrimeMoverElectric.  # noqa: E501
        :rtype: OneOfPrimeMoverElectricVarspddrvlowerfreq
        """
        return self._varspddrvlowerfreq

    @varspddrvlowerfreq.setter
    def varspddrvlowerfreq(self, varspddrvlowerfreq):
        """Sets the varspddrvlowerfreq of this PrimeMoverElectric.


        :param varspddrvlowerfreq: The varspddrvlowerfreq of this PrimeMoverElectric.  # noqa: E501
        :type: OneOfPrimeMoverElectricVarspddrvlowerfreq
        """

        self._varspddrvlowerfreq = varspddrvlowerfreq

    @property
    def varspddrvmake(self):
        """Gets the varspddrvmake of this PrimeMoverElectric.  # noqa: E501


        :return: The varspddrvmake of this PrimeMoverElectric.  # noqa: E501
        :rtype: str
        """
        return self._varspddrvmake

    @varspddrvmake.setter
    def varspddrvmake(self, varspddrvmake):
        """Sets the varspddrvmake of this PrimeMoverElectric.


        :param varspddrvmake: The varspddrvmake of this PrimeMoverElectric.  # noqa: E501
        :type: str
        """

        self._varspddrvmake = varspddrvmake

    @property
    def varspddrvmodel(self):
        """Gets the varspddrvmodel of this PrimeMoverElectric.  # noqa: E501


        :return: The varspddrvmodel of this PrimeMoverElectric.  # noqa: E501
        :rtype: str
        """
        return self._varspddrvmodel

    @varspddrvmodel.setter
    def varspddrvmodel(self, varspddrvmodel):
        """Sets the varspddrvmodel of this PrimeMoverElectric.


        :param varspddrvmodel: The varspddrvmodel of this PrimeMoverElectric.  # noqa: E501
        :type: str
        """

        self._varspddrvmodel = varspddrvmodel

    @property
    def varspddrvupperfreq(self):
        """Gets the varspddrvupperfreq of this PrimeMoverElectric.  # noqa: E501


        :return: The varspddrvupperfreq of this PrimeMoverElectric.  # noqa: E501
        :rtype: OneOfPrimeMoverElectricVarspddrvupperfreq
        """
        return self._varspddrvupperfreq

    @varspddrvupperfreq.setter
    def varspddrvupperfreq(self, varspddrvupperfreq):
        """Sets the varspddrvupperfreq of this PrimeMoverElectric.


        :param varspddrvupperfreq: The varspddrvupperfreq of this PrimeMoverElectric.  # noqa: E501
        :type: OneOfPrimeMoverElectricVarspddrvupperfreq
        """

        self._varspddrvupperfreq = varspddrvupperfreq

    @property
    def voltagerating(self):
        """Gets the voltagerating of this PrimeMoverElectric.  # noqa: E501


        :return: The voltagerating of this PrimeMoverElectric.  # noqa: E501
        :rtype: OneOfPrimeMoverElectricVoltagerating
        """
        return self._voltagerating

    @voltagerating.setter
    def voltagerating(self, voltagerating):
        """Sets the voltagerating of this PrimeMoverElectric.


        :param voltagerating: The voltagerating of this PrimeMoverElectric.  # noqa: E501
        :type: OneOfPrimeMoverElectricVoltagerating
        """

        self._voltagerating = voltagerating

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PrimeMoverElectric, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PrimeMoverElectric):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
