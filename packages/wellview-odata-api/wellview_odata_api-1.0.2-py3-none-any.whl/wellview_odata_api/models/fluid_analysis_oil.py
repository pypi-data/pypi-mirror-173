# coding: utf-8

"""
    OData Service for namespace Default

    This OData service is located at http://localhost  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FluidAnalysisOil(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'apigravityafterclean': 'OneOfFluidAnalysisOilApigravityafterclean',
        'apigravityasreceived': 'OneOfFluidAnalysisOilApigravityasreceived',
        'asphaltene': 'OneOfFluidAnalysisOilAsphaltene',
        'bsw': 'OneOfFluidAnalysisOilBsw',
        'color': 'str',
        'com': 'str',
        'densityafterclean': 'OneOfFluidAnalysisOilDensityafterclean',
        'densityasreceived': 'OneOfFluidAnalysisOilDensityasreceived',
        'densityreftemp': 'OneOfFluidAnalysisOilDensityreftemp',
        'densityrelafterclean': 'OneOfFluidAnalysisOilDensityrelafterclean',
        'densityrelasreceived': 'OneOfFluidAnalysisOilDensityrelasreceived',
        'distillmethod': 'str',
        'fluid_analysis': 'AnyOfFluidAnalysisOilFluidAnalysis',
        'fluid_analysis_oil_distills': 'list[FluidAnalysisOilDistill]',
        'fluid_analysis_oil_vises': 'list[FluidAnalysisOilVis]',
        'idrec': 'str',
        'idrecparent': 'str',
        'idwell': 'str',
        'presbarometric': 'OneOfFluidAnalysisOilPresbarometric',
        'presvapour': 'OneOfFluidAnalysisOilPresvapour',
        'salt': 'OneOfFluidAnalysisOilSalt',
        'sulphur': 'OneOfFluidAnalysisOilSulphur',
        'syscreatedate': 'datetime',
        'syscreateuser': 'str',
        'syslockchildren': 'int',
        'syslockchildrenui': 'int',
        'syslockdate': 'datetime',
        'syslockme': 'int',
        'syslockmeui': 'int',
        'sysmoddate': 'datetime',
        'sysmoduser': 'str',
        'systag': 'str',
        'tempboilinit': 'OneOfFluidAnalysisOilTempboilinit',
        'tempflashpointcc': 'OneOfFluidAnalysisOilTempflashpointcc',
        'tempflashpointoc': 'OneOfFluidAnalysisOilTempflashpointoc',
        'temppourpoint': 'OneOfFluidAnalysisOilTemppourpoint',
        'temprefapigravity': 'OneOfFluidAnalysisOilTemprefapigravity',
        'temprefkerosene': 'OneOfFluidAnalysisOilTemprefkerosene',
        'temprefltgasoil': 'OneOfFluidAnalysisOilTemprefltgasoil',
        'temprefnaptha': 'OneOfFluidAnalysisOilTemprefnaptha',
        'temproom': 'OneOfFluidAnalysisOilTemproom',
        'volfracdistillloss': 'OneOfFluidAnalysisOilVolfracdistillloss',
        'volfrackerosene': 'OneOfFluidAnalysisOilVolfrackerosene',
        'volfracltgasoil': 'OneOfFluidAnalysisOilVolfracltgasoil',
        'volfracnaptha': 'OneOfFluidAnalysisOilVolfracnaptha',
        'volfracrecovered': 'OneOfFluidAnalysisOilVolfracrecovered',
        'volfracresidue': 'OneOfFluidAnalysisOilVolfracresidue',
        'volfracsediment': 'OneOfFluidAnalysisOilVolfracsediment',
        'volfracwater': 'OneOfFluidAnalysisOilVolfracwater',
        'waxpercent': 'OneOfFluidAnalysisOilWaxpercent'
    }

    attribute_map = {
        'apigravityafterclean': 'apigravityafterclean',
        'apigravityasreceived': 'apigravityasreceived',
        'asphaltene': 'asphaltene',
        'bsw': 'bsw',
        'color': 'color',
        'com': 'com',
        'densityafterclean': 'densityafterclean',
        'densityasreceived': 'densityasreceived',
        'densityreftemp': 'densityreftemp',
        'densityrelafterclean': 'densityrelafterclean',
        'densityrelasreceived': 'densityrelasreceived',
        'distillmethod': 'distillmethod',
        'fluid_analysis': 'fluidAnalysis',
        'fluid_analysis_oil_distills': 'fluidAnalysisOilDistills',
        'fluid_analysis_oil_vises': 'fluidAnalysisOilVises',
        'idrec': 'idrec',
        'idrecparent': 'idrecparent',
        'idwell': 'idwell',
        'presbarometric': 'presbarometric',
        'presvapour': 'presvapour',
        'salt': 'salt',
        'sulphur': 'sulphur',
        'syscreatedate': 'syscreatedate',
        'syscreateuser': 'syscreateuser',
        'syslockchildren': 'syslockchildren',
        'syslockchildrenui': 'syslockchildrenui',
        'syslockdate': 'syslockdate',
        'syslockme': 'syslockme',
        'syslockmeui': 'syslockmeui',
        'sysmoddate': 'sysmoddate',
        'sysmoduser': 'sysmoduser',
        'systag': 'systag',
        'tempboilinit': 'tempboilinit',
        'tempflashpointcc': 'tempflashpointcc',
        'tempflashpointoc': 'tempflashpointoc',
        'temppourpoint': 'temppourpoint',
        'temprefapigravity': 'temprefapigravity',
        'temprefkerosene': 'temprefkerosene',
        'temprefltgasoil': 'temprefltgasoil',
        'temprefnaptha': 'temprefnaptha',
        'temproom': 'temproom',
        'volfracdistillloss': 'volfracdistillloss',
        'volfrackerosene': 'volfrackerosene',
        'volfracltgasoil': 'volfracltgasoil',
        'volfracnaptha': 'volfracnaptha',
        'volfracrecovered': 'volfracrecovered',
        'volfracresidue': 'volfracresidue',
        'volfracsediment': 'volfracsediment',
        'volfracwater': 'volfracwater',
        'waxpercent': 'waxpercent'
    }

    def __init__(self, apigravityafterclean=None, apigravityasreceived=None, asphaltene=None, bsw=None, color=None, com=None, densityafterclean=None, densityasreceived=None, densityreftemp=None, densityrelafterclean=None, densityrelasreceived=None, distillmethod=None, fluid_analysis=None, fluid_analysis_oil_distills=None, fluid_analysis_oil_vises=None, idrec=None, idrecparent=None, idwell=None, presbarometric=None, presvapour=None, salt=None, sulphur=None, syscreatedate=None, syscreateuser=None, syslockchildren=None, syslockchildrenui=None, syslockdate=None, syslockme=None, syslockmeui=None, sysmoddate=None, sysmoduser=None, systag=None, tempboilinit=None, tempflashpointcc=None, tempflashpointoc=None, temppourpoint=None, temprefapigravity=None, temprefkerosene=None, temprefltgasoil=None, temprefnaptha=None, temproom=None, volfracdistillloss=None, volfrackerosene=None, volfracltgasoil=None, volfracnaptha=None, volfracrecovered=None, volfracresidue=None, volfracsediment=None, volfracwater=None, waxpercent=None):  # noqa: E501
        """FluidAnalysisOil - a model defined in Swagger"""  # noqa: E501
        self._apigravityafterclean = None
        self._apigravityasreceived = None
        self._asphaltene = None
        self._bsw = None
        self._color = None
        self._com = None
        self._densityafterclean = None
        self._densityasreceived = None
        self._densityreftemp = None
        self._densityrelafterclean = None
        self._densityrelasreceived = None
        self._distillmethod = None
        self._fluid_analysis = None
        self._fluid_analysis_oil_distills = None
        self._fluid_analysis_oil_vises = None
        self._idrec = None
        self._idrecparent = None
        self._idwell = None
        self._presbarometric = None
        self._presvapour = None
        self._salt = None
        self._sulphur = None
        self._syscreatedate = None
        self._syscreateuser = None
        self._syslockchildren = None
        self._syslockchildrenui = None
        self._syslockdate = None
        self._syslockme = None
        self._syslockmeui = None
        self._sysmoddate = None
        self._sysmoduser = None
        self._systag = None
        self._tempboilinit = None
        self._tempflashpointcc = None
        self._tempflashpointoc = None
        self._temppourpoint = None
        self._temprefapigravity = None
        self._temprefkerosene = None
        self._temprefltgasoil = None
        self._temprefnaptha = None
        self._temproom = None
        self._volfracdistillloss = None
        self._volfrackerosene = None
        self._volfracltgasoil = None
        self._volfracnaptha = None
        self._volfracrecovered = None
        self._volfracresidue = None
        self._volfracsediment = None
        self._volfracwater = None
        self._waxpercent = None
        self.discriminator = None
        if apigravityafterclean is not None:
            self.apigravityafterclean = apigravityafterclean
        if apigravityasreceived is not None:
            self.apigravityasreceived = apigravityasreceived
        if asphaltene is not None:
            self.asphaltene = asphaltene
        if bsw is not None:
            self.bsw = bsw
        if color is not None:
            self.color = color
        if com is not None:
            self.com = com
        if densityafterclean is not None:
            self.densityafterclean = densityafterclean
        if densityasreceived is not None:
            self.densityasreceived = densityasreceived
        if densityreftemp is not None:
            self.densityreftemp = densityreftemp
        if densityrelafterclean is not None:
            self.densityrelafterclean = densityrelafterclean
        if densityrelasreceived is not None:
            self.densityrelasreceived = densityrelasreceived
        if distillmethod is not None:
            self.distillmethod = distillmethod
        if fluid_analysis is not None:
            self.fluid_analysis = fluid_analysis
        if fluid_analysis_oil_distills is not None:
            self.fluid_analysis_oil_distills = fluid_analysis_oil_distills
        if fluid_analysis_oil_vises is not None:
            self.fluid_analysis_oil_vises = fluid_analysis_oil_vises
        if idrec is not None:
            self.idrec = idrec
        if idrecparent is not None:
            self.idrecparent = idrecparent
        if idwell is not None:
            self.idwell = idwell
        if presbarometric is not None:
            self.presbarometric = presbarometric
        if presvapour is not None:
            self.presvapour = presvapour
        if salt is not None:
            self.salt = salt
        if sulphur is not None:
            self.sulphur = sulphur
        if syscreatedate is not None:
            self.syscreatedate = syscreatedate
        if syscreateuser is not None:
            self.syscreateuser = syscreateuser
        if syslockchildren is not None:
            self.syslockchildren = syslockchildren
        if syslockchildrenui is not None:
            self.syslockchildrenui = syslockchildrenui
        if syslockdate is not None:
            self.syslockdate = syslockdate
        if syslockme is not None:
            self.syslockme = syslockme
        if syslockmeui is not None:
            self.syslockmeui = syslockmeui
        if sysmoddate is not None:
            self.sysmoddate = sysmoddate
        if sysmoduser is not None:
            self.sysmoduser = sysmoduser
        if systag is not None:
            self.systag = systag
        if tempboilinit is not None:
            self.tempboilinit = tempboilinit
        if tempflashpointcc is not None:
            self.tempflashpointcc = tempflashpointcc
        if tempflashpointoc is not None:
            self.tempflashpointoc = tempflashpointoc
        if temppourpoint is not None:
            self.temppourpoint = temppourpoint
        if temprefapigravity is not None:
            self.temprefapigravity = temprefapigravity
        if temprefkerosene is not None:
            self.temprefkerosene = temprefkerosene
        if temprefltgasoil is not None:
            self.temprefltgasoil = temprefltgasoil
        if temprefnaptha is not None:
            self.temprefnaptha = temprefnaptha
        if temproom is not None:
            self.temproom = temproom
        if volfracdistillloss is not None:
            self.volfracdistillloss = volfracdistillloss
        if volfrackerosene is not None:
            self.volfrackerosene = volfrackerosene
        if volfracltgasoil is not None:
            self.volfracltgasoil = volfracltgasoil
        if volfracnaptha is not None:
            self.volfracnaptha = volfracnaptha
        if volfracrecovered is not None:
            self.volfracrecovered = volfracrecovered
        if volfracresidue is not None:
            self.volfracresidue = volfracresidue
        if volfracsediment is not None:
            self.volfracsediment = volfracsediment
        if volfracwater is not None:
            self.volfracwater = volfracwater
        if waxpercent is not None:
            self.waxpercent = waxpercent

    @property
    def apigravityafterclean(self):
        """Gets the apigravityafterclean of this FluidAnalysisOil.  # noqa: E501


        :return: The apigravityafterclean of this FluidAnalysisOil.  # noqa: E501
        :rtype: OneOfFluidAnalysisOilApigravityafterclean
        """
        return self._apigravityafterclean

    @apigravityafterclean.setter
    def apigravityafterclean(self, apigravityafterclean):
        """Sets the apigravityafterclean of this FluidAnalysisOil.


        :param apigravityafterclean: The apigravityafterclean of this FluidAnalysisOil.  # noqa: E501
        :type: OneOfFluidAnalysisOilApigravityafterclean
        """

        self._apigravityafterclean = apigravityafterclean

    @property
    def apigravityasreceived(self):
        """Gets the apigravityasreceived of this FluidAnalysisOil.  # noqa: E501


        :return: The apigravityasreceived of this FluidAnalysisOil.  # noqa: E501
        :rtype: OneOfFluidAnalysisOilApigravityasreceived
        """
        return self._apigravityasreceived

    @apigravityasreceived.setter
    def apigravityasreceived(self, apigravityasreceived):
        """Sets the apigravityasreceived of this FluidAnalysisOil.


        :param apigravityasreceived: The apigravityasreceived of this FluidAnalysisOil.  # noqa: E501
        :type: OneOfFluidAnalysisOilApigravityasreceived
        """

        self._apigravityasreceived = apigravityasreceived

    @property
    def asphaltene(self):
        """Gets the asphaltene of this FluidAnalysisOil.  # noqa: E501


        :return: The asphaltene of this FluidAnalysisOil.  # noqa: E501
        :rtype: OneOfFluidAnalysisOilAsphaltene
        """
        return self._asphaltene

    @asphaltene.setter
    def asphaltene(self, asphaltene):
        """Sets the asphaltene of this FluidAnalysisOil.


        :param asphaltene: The asphaltene of this FluidAnalysisOil.  # noqa: E501
        :type: OneOfFluidAnalysisOilAsphaltene
        """

        self._asphaltene = asphaltene

    @property
    def bsw(self):
        """Gets the bsw of this FluidAnalysisOil.  # noqa: E501


        :return: The bsw of this FluidAnalysisOil.  # noqa: E501
        :rtype: OneOfFluidAnalysisOilBsw
        """
        return self._bsw

    @bsw.setter
    def bsw(self, bsw):
        """Sets the bsw of this FluidAnalysisOil.


        :param bsw: The bsw of this FluidAnalysisOil.  # noqa: E501
        :type: OneOfFluidAnalysisOilBsw
        """

        self._bsw = bsw

    @property
    def color(self):
        """Gets the color of this FluidAnalysisOil.  # noqa: E501


        :return: The color of this FluidAnalysisOil.  # noqa: E501
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this FluidAnalysisOil.


        :param color: The color of this FluidAnalysisOil.  # noqa: E501
        :type: str
        """

        self._color = color

    @property
    def com(self):
        """Gets the com of this FluidAnalysisOil.  # noqa: E501


        :return: The com of this FluidAnalysisOil.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this FluidAnalysisOil.


        :param com: The com of this FluidAnalysisOil.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def densityafterclean(self):
        """Gets the densityafterclean of this FluidAnalysisOil.  # noqa: E501


        :return: The densityafterclean of this FluidAnalysisOil.  # noqa: E501
        :rtype: OneOfFluidAnalysisOilDensityafterclean
        """
        return self._densityafterclean

    @densityafterclean.setter
    def densityafterclean(self, densityafterclean):
        """Sets the densityafterclean of this FluidAnalysisOil.


        :param densityafterclean: The densityafterclean of this FluidAnalysisOil.  # noqa: E501
        :type: OneOfFluidAnalysisOilDensityafterclean
        """

        self._densityafterclean = densityafterclean

    @property
    def densityasreceived(self):
        """Gets the densityasreceived of this FluidAnalysisOil.  # noqa: E501


        :return: The densityasreceived of this FluidAnalysisOil.  # noqa: E501
        :rtype: OneOfFluidAnalysisOilDensityasreceived
        """
        return self._densityasreceived

    @densityasreceived.setter
    def densityasreceived(self, densityasreceived):
        """Sets the densityasreceived of this FluidAnalysisOil.


        :param densityasreceived: The densityasreceived of this FluidAnalysisOil.  # noqa: E501
        :type: OneOfFluidAnalysisOilDensityasreceived
        """

        self._densityasreceived = densityasreceived

    @property
    def densityreftemp(self):
        """Gets the densityreftemp of this FluidAnalysisOil.  # noqa: E501


        :return: The densityreftemp of this FluidAnalysisOil.  # noqa: E501
        :rtype: OneOfFluidAnalysisOilDensityreftemp
        """
        return self._densityreftemp

    @densityreftemp.setter
    def densityreftemp(self, densityreftemp):
        """Sets the densityreftemp of this FluidAnalysisOil.


        :param densityreftemp: The densityreftemp of this FluidAnalysisOil.  # noqa: E501
        :type: OneOfFluidAnalysisOilDensityreftemp
        """

        self._densityreftemp = densityreftemp

    @property
    def densityrelafterclean(self):
        """Gets the densityrelafterclean of this FluidAnalysisOil.  # noqa: E501


        :return: The densityrelafterclean of this FluidAnalysisOil.  # noqa: E501
        :rtype: OneOfFluidAnalysisOilDensityrelafterclean
        """
        return self._densityrelafterclean

    @densityrelafterclean.setter
    def densityrelafterclean(self, densityrelafterclean):
        """Sets the densityrelafterclean of this FluidAnalysisOil.


        :param densityrelafterclean: The densityrelafterclean of this FluidAnalysisOil.  # noqa: E501
        :type: OneOfFluidAnalysisOilDensityrelafterclean
        """

        self._densityrelafterclean = densityrelafterclean

    @property
    def densityrelasreceived(self):
        """Gets the densityrelasreceived of this FluidAnalysisOil.  # noqa: E501


        :return: The densityrelasreceived of this FluidAnalysisOil.  # noqa: E501
        :rtype: OneOfFluidAnalysisOilDensityrelasreceived
        """
        return self._densityrelasreceived

    @densityrelasreceived.setter
    def densityrelasreceived(self, densityrelasreceived):
        """Sets the densityrelasreceived of this FluidAnalysisOil.


        :param densityrelasreceived: The densityrelasreceived of this FluidAnalysisOil.  # noqa: E501
        :type: OneOfFluidAnalysisOilDensityrelasreceived
        """

        self._densityrelasreceived = densityrelasreceived

    @property
    def distillmethod(self):
        """Gets the distillmethod of this FluidAnalysisOil.  # noqa: E501


        :return: The distillmethod of this FluidAnalysisOil.  # noqa: E501
        :rtype: str
        """
        return self._distillmethod

    @distillmethod.setter
    def distillmethod(self, distillmethod):
        """Sets the distillmethod of this FluidAnalysisOil.


        :param distillmethod: The distillmethod of this FluidAnalysisOil.  # noqa: E501
        :type: str
        """

        self._distillmethod = distillmethod

    @property
    def fluid_analysis(self):
        """Gets the fluid_analysis of this FluidAnalysisOil.  # noqa: E501


        :return: The fluid_analysis of this FluidAnalysisOil.  # noqa: E501
        :rtype: AnyOfFluidAnalysisOilFluidAnalysis
        """
        return self._fluid_analysis

    @fluid_analysis.setter
    def fluid_analysis(self, fluid_analysis):
        """Sets the fluid_analysis of this FluidAnalysisOil.


        :param fluid_analysis: The fluid_analysis of this FluidAnalysisOil.  # noqa: E501
        :type: AnyOfFluidAnalysisOilFluidAnalysis
        """

        self._fluid_analysis = fluid_analysis

    @property
    def fluid_analysis_oil_distills(self):
        """Gets the fluid_analysis_oil_distills of this FluidAnalysisOil.  # noqa: E501


        :return: The fluid_analysis_oil_distills of this FluidAnalysisOil.  # noqa: E501
        :rtype: list[FluidAnalysisOilDistill]
        """
        return self._fluid_analysis_oil_distills

    @fluid_analysis_oil_distills.setter
    def fluid_analysis_oil_distills(self, fluid_analysis_oil_distills):
        """Sets the fluid_analysis_oil_distills of this FluidAnalysisOil.


        :param fluid_analysis_oil_distills: The fluid_analysis_oil_distills of this FluidAnalysisOil.  # noqa: E501
        :type: list[FluidAnalysisOilDistill]
        """

        self._fluid_analysis_oil_distills = fluid_analysis_oil_distills

    @property
    def fluid_analysis_oil_vises(self):
        """Gets the fluid_analysis_oil_vises of this FluidAnalysisOil.  # noqa: E501


        :return: The fluid_analysis_oil_vises of this FluidAnalysisOil.  # noqa: E501
        :rtype: list[FluidAnalysisOilVis]
        """
        return self._fluid_analysis_oil_vises

    @fluid_analysis_oil_vises.setter
    def fluid_analysis_oil_vises(self, fluid_analysis_oil_vises):
        """Sets the fluid_analysis_oil_vises of this FluidAnalysisOil.


        :param fluid_analysis_oil_vises: The fluid_analysis_oil_vises of this FluidAnalysisOil.  # noqa: E501
        :type: list[FluidAnalysisOilVis]
        """

        self._fluid_analysis_oil_vises = fluid_analysis_oil_vises

    @property
    def idrec(self):
        """Gets the idrec of this FluidAnalysisOil.  # noqa: E501


        :return: The idrec of this FluidAnalysisOil.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this FluidAnalysisOil.


        :param idrec: The idrec of this FluidAnalysisOil.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecparent(self):
        """Gets the idrecparent of this FluidAnalysisOil.  # noqa: E501


        :return: The idrecparent of this FluidAnalysisOil.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this FluidAnalysisOil.


        :param idrecparent: The idrecparent of this FluidAnalysisOil.  # noqa: E501
        :type: str
        """

        self._idrecparent = idrecparent

    @property
    def idwell(self):
        """Gets the idwell of this FluidAnalysisOil.  # noqa: E501


        :return: The idwell of this FluidAnalysisOil.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this FluidAnalysisOil.


        :param idwell: The idwell of this FluidAnalysisOil.  # noqa: E501
        :type: str
        """

        self._idwell = idwell

    @property
    def presbarometric(self):
        """Gets the presbarometric of this FluidAnalysisOil.  # noqa: E501


        :return: The presbarometric of this FluidAnalysisOil.  # noqa: E501
        :rtype: OneOfFluidAnalysisOilPresbarometric
        """
        return self._presbarometric

    @presbarometric.setter
    def presbarometric(self, presbarometric):
        """Sets the presbarometric of this FluidAnalysisOil.


        :param presbarometric: The presbarometric of this FluidAnalysisOil.  # noqa: E501
        :type: OneOfFluidAnalysisOilPresbarometric
        """

        self._presbarometric = presbarometric

    @property
    def presvapour(self):
        """Gets the presvapour of this FluidAnalysisOil.  # noqa: E501


        :return: The presvapour of this FluidAnalysisOil.  # noqa: E501
        :rtype: OneOfFluidAnalysisOilPresvapour
        """
        return self._presvapour

    @presvapour.setter
    def presvapour(self, presvapour):
        """Sets the presvapour of this FluidAnalysisOil.


        :param presvapour: The presvapour of this FluidAnalysisOil.  # noqa: E501
        :type: OneOfFluidAnalysisOilPresvapour
        """

        self._presvapour = presvapour

    @property
    def salt(self):
        """Gets the salt of this FluidAnalysisOil.  # noqa: E501


        :return: The salt of this FluidAnalysisOil.  # noqa: E501
        :rtype: OneOfFluidAnalysisOilSalt
        """
        return self._salt

    @salt.setter
    def salt(self, salt):
        """Sets the salt of this FluidAnalysisOil.


        :param salt: The salt of this FluidAnalysisOil.  # noqa: E501
        :type: OneOfFluidAnalysisOilSalt
        """

        self._salt = salt

    @property
    def sulphur(self):
        """Gets the sulphur of this FluidAnalysisOil.  # noqa: E501


        :return: The sulphur of this FluidAnalysisOil.  # noqa: E501
        :rtype: OneOfFluidAnalysisOilSulphur
        """
        return self._sulphur

    @sulphur.setter
    def sulphur(self, sulphur):
        """Sets the sulphur of this FluidAnalysisOil.


        :param sulphur: The sulphur of this FluidAnalysisOil.  # noqa: E501
        :type: OneOfFluidAnalysisOilSulphur
        """

        self._sulphur = sulphur

    @property
    def syscreatedate(self):
        """Gets the syscreatedate of this FluidAnalysisOil.  # noqa: E501


        :return: The syscreatedate of this FluidAnalysisOil.  # noqa: E501
        :rtype: datetime
        """
        return self._syscreatedate

    @syscreatedate.setter
    def syscreatedate(self, syscreatedate):
        """Sets the syscreatedate of this FluidAnalysisOil.


        :param syscreatedate: The syscreatedate of this FluidAnalysisOil.  # noqa: E501
        :type: datetime
        """

        self._syscreatedate = syscreatedate

    @property
    def syscreateuser(self):
        """Gets the syscreateuser of this FluidAnalysisOil.  # noqa: E501


        :return: The syscreateuser of this FluidAnalysisOil.  # noqa: E501
        :rtype: str
        """
        return self._syscreateuser

    @syscreateuser.setter
    def syscreateuser(self, syscreateuser):
        """Sets the syscreateuser of this FluidAnalysisOil.


        :param syscreateuser: The syscreateuser of this FluidAnalysisOil.  # noqa: E501
        :type: str
        """

        self._syscreateuser = syscreateuser

    @property
    def syslockchildren(self):
        """Gets the syslockchildren of this FluidAnalysisOil.  # noqa: E501


        :return: The syslockchildren of this FluidAnalysisOil.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildren

    @syslockchildren.setter
    def syslockchildren(self, syslockchildren):
        """Sets the syslockchildren of this FluidAnalysisOil.


        :param syslockchildren: The syslockchildren of this FluidAnalysisOil.  # noqa: E501
        :type: int
        """

        self._syslockchildren = syslockchildren

    @property
    def syslockchildrenui(self):
        """Gets the syslockchildrenui of this FluidAnalysisOil.  # noqa: E501


        :return: The syslockchildrenui of this FluidAnalysisOil.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildrenui

    @syslockchildrenui.setter
    def syslockchildrenui(self, syslockchildrenui):
        """Sets the syslockchildrenui of this FluidAnalysisOil.


        :param syslockchildrenui: The syslockchildrenui of this FluidAnalysisOil.  # noqa: E501
        :type: int
        """

        self._syslockchildrenui = syslockchildrenui

    @property
    def syslockdate(self):
        """Gets the syslockdate of this FluidAnalysisOil.  # noqa: E501


        :return: The syslockdate of this FluidAnalysisOil.  # noqa: E501
        :rtype: datetime
        """
        return self._syslockdate

    @syslockdate.setter
    def syslockdate(self, syslockdate):
        """Sets the syslockdate of this FluidAnalysisOil.


        :param syslockdate: The syslockdate of this FluidAnalysisOil.  # noqa: E501
        :type: datetime
        """

        self._syslockdate = syslockdate

    @property
    def syslockme(self):
        """Gets the syslockme of this FluidAnalysisOil.  # noqa: E501


        :return: The syslockme of this FluidAnalysisOil.  # noqa: E501
        :rtype: int
        """
        return self._syslockme

    @syslockme.setter
    def syslockme(self, syslockme):
        """Sets the syslockme of this FluidAnalysisOil.


        :param syslockme: The syslockme of this FluidAnalysisOil.  # noqa: E501
        :type: int
        """

        self._syslockme = syslockme

    @property
    def syslockmeui(self):
        """Gets the syslockmeui of this FluidAnalysisOil.  # noqa: E501


        :return: The syslockmeui of this FluidAnalysisOil.  # noqa: E501
        :rtype: int
        """
        return self._syslockmeui

    @syslockmeui.setter
    def syslockmeui(self, syslockmeui):
        """Sets the syslockmeui of this FluidAnalysisOil.


        :param syslockmeui: The syslockmeui of this FluidAnalysisOil.  # noqa: E501
        :type: int
        """

        self._syslockmeui = syslockmeui

    @property
    def sysmoddate(self):
        """Gets the sysmoddate of this FluidAnalysisOil.  # noqa: E501


        :return: The sysmoddate of this FluidAnalysisOil.  # noqa: E501
        :rtype: datetime
        """
        return self._sysmoddate

    @sysmoddate.setter
    def sysmoddate(self, sysmoddate):
        """Sets the sysmoddate of this FluidAnalysisOil.


        :param sysmoddate: The sysmoddate of this FluidAnalysisOil.  # noqa: E501
        :type: datetime
        """

        self._sysmoddate = sysmoddate

    @property
    def sysmoduser(self):
        """Gets the sysmoduser of this FluidAnalysisOil.  # noqa: E501


        :return: The sysmoduser of this FluidAnalysisOil.  # noqa: E501
        :rtype: str
        """
        return self._sysmoduser

    @sysmoduser.setter
    def sysmoduser(self, sysmoduser):
        """Sets the sysmoduser of this FluidAnalysisOil.


        :param sysmoduser: The sysmoduser of this FluidAnalysisOil.  # noqa: E501
        :type: str
        """

        self._sysmoduser = sysmoduser

    @property
    def systag(self):
        """Gets the systag of this FluidAnalysisOil.  # noqa: E501


        :return: The systag of this FluidAnalysisOil.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this FluidAnalysisOil.


        :param systag: The systag of this FluidAnalysisOil.  # noqa: E501
        :type: str
        """

        self._systag = systag

    @property
    def tempboilinit(self):
        """Gets the tempboilinit of this FluidAnalysisOil.  # noqa: E501


        :return: The tempboilinit of this FluidAnalysisOil.  # noqa: E501
        :rtype: OneOfFluidAnalysisOilTempboilinit
        """
        return self._tempboilinit

    @tempboilinit.setter
    def tempboilinit(self, tempboilinit):
        """Sets the tempboilinit of this FluidAnalysisOil.


        :param tempboilinit: The tempboilinit of this FluidAnalysisOil.  # noqa: E501
        :type: OneOfFluidAnalysisOilTempboilinit
        """

        self._tempboilinit = tempboilinit

    @property
    def tempflashpointcc(self):
        """Gets the tempflashpointcc of this FluidAnalysisOil.  # noqa: E501


        :return: The tempflashpointcc of this FluidAnalysisOil.  # noqa: E501
        :rtype: OneOfFluidAnalysisOilTempflashpointcc
        """
        return self._tempflashpointcc

    @tempflashpointcc.setter
    def tempflashpointcc(self, tempflashpointcc):
        """Sets the tempflashpointcc of this FluidAnalysisOil.


        :param tempflashpointcc: The tempflashpointcc of this FluidAnalysisOil.  # noqa: E501
        :type: OneOfFluidAnalysisOilTempflashpointcc
        """

        self._tempflashpointcc = tempflashpointcc

    @property
    def tempflashpointoc(self):
        """Gets the tempflashpointoc of this FluidAnalysisOil.  # noqa: E501


        :return: The tempflashpointoc of this FluidAnalysisOil.  # noqa: E501
        :rtype: OneOfFluidAnalysisOilTempflashpointoc
        """
        return self._tempflashpointoc

    @tempflashpointoc.setter
    def tempflashpointoc(self, tempflashpointoc):
        """Sets the tempflashpointoc of this FluidAnalysisOil.


        :param tempflashpointoc: The tempflashpointoc of this FluidAnalysisOil.  # noqa: E501
        :type: OneOfFluidAnalysisOilTempflashpointoc
        """

        self._tempflashpointoc = tempflashpointoc

    @property
    def temppourpoint(self):
        """Gets the temppourpoint of this FluidAnalysisOil.  # noqa: E501


        :return: The temppourpoint of this FluidAnalysisOil.  # noqa: E501
        :rtype: OneOfFluidAnalysisOilTemppourpoint
        """
        return self._temppourpoint

    @temppourpoint.setter
    def temppourpoint(self, temppourpoint):
        """Sets the temppourpoint of this FluidAnalysisOil.


        :param temppourpoint: The temppourpoint of this FluidAnalysisOil.  # noqa: E501
        :type: OneOfFluidAnalysisOilTemppourpoint
        """

        self._temppourpoint = temppourpoint

    @property
    def temprefapigravity(self):
        """Gets the temprefapigravity of this FluidAnalysisOil.  # noqa: E501


        :return: The temprefapigravity of this FluidAnalysisOil.  # noqa: E501
        :rtype: OneOfFluidAnalysisOilTemprefapigravity
        """
        return self._temprefapigravity

    @temprefapigravity.setter
    def temprefapigravity(self, temprefapigravity):
        """Sets the temprefapigravity of this FluidAnalysisOil.


        :param temprefapigravity: The temprefapigravity of this FluidAnalysisOil.  # noqa: E501
        :type: OneOfFluidAnalysisOilTemprefapigravity
        """

        self._temprefapigravity = temprefapigravity

    @property
    def temprefkerosene(self):
        """Gets the temprefkerosene of this FluidAnalysisOil.  # noqa: E501


        :return: The temprefkerosene of this FluidAnalysisOil.  # noqa: E501
        :rtype: OneOfFluidAnalysisOilTemprefkerosene
        """
        return self._temprefkerosene

    @temprefkerosene.setter
    def temprefkerosene(self, temprefkerosene):
        """Sets the temprefkerosene of this FluidAnalysisOil.


        :param temprefkerosene: The temprefkerosene of this FluidAnalysisOil.  # noqa: E501
        :type: OneOfFluidAnalysisOilTemprefkerosene
        """

        self._temprefkerosene = temprefkerosene

    @property
    def temprefltgasoil(self):
        """Gets the temprefltgasoil of this FluidAnalysisOil.  # noqa: E501


        :return: The temprefltgasoil of this FluidAnalysisOil.  # noqa: E501
        :rtype: OneOfFluidAnalysisOilTemprefltgasoil
        """
        return self._temprefltgasoil

    @temprefltgasoil.setter
    def temprefltgasoil(self, temprefltgasoil):
        """Sets the temprefltgasoil of this FluidAnalysisOil.


        :param temprefltgasoil: The temprefltgasoil of this FluidAnalysisOil.  # noqa: E501
        :type: OneOfFluidAnalysisOilTemprefltgasoil
        """

        self._temprefltgasoil = temprefltgasoil

    @property
    def temprefnaptha(self):
        """Gets the temprefnaptha of this FluidAnalysisOil.  # noqa: E501


        :return: The temprefnaptha of this FluidAnalysisOil.  # noqa: E501
        :rtype: OneOfFluidAnalysisOilTemprefnaptha
        """
        return self._temprefnaptha

    @temprefnaptha.setter
    def temprefnaptha(self, temprefnaptha):
        """Sets the temprefnaptha of this FluidAnalysisOil.


        :param temprefnaptha: The temprefnaptha of this FluidAnalysisOil.  # noqa: E501
        :type: OneOfFluidAnalysisOilTemprefnaptha
        """

        self._temprefnaptha = temprefnaptha

    @property
    def temproom(self):
        """Gets the temproom of this FluidAnalysisOil.  # noqa: E501


        :return: The temproom of this FluidAnalysisOil.  # noqa: E501
        :rtype: OneOfFluidAnalysisOilTemproom
        """
        return self._temproom

    @temproom.setter
    def temproom(self, temproom):
        """Sets the temproom of this FluidAnalysisOil.


        :param temproom: The temproom of this FluidAnalysisOil.  # noqa: E501
        :type: OneOfFluidAnalysisOilTemproom
        """

        self._temproom = temproom

    @property
    def volfracdistillloss(self):
        """Gets the volfracdistillloss of this FluidAnalysisOil.  # noqa: E501


        :return: The volfracdistillloss of this FluidAnalysisOil.  # noqa: E501
        :rtype: OneOfFluidAnalysisOilVolfracdistillloss
        """
        return self._volfracdistillloss

    @volfracdistillloss.setter
    def volfracdistillloss(self, volfracdistillloss):
        """Sets the volfracdistillloss of this FluidAnalysisOil.


        :param volfracdistillloss: The volfracdistillloss of this FluidAnalysisOil.  # noqa: E501
        :type: OneOfFluidAnalysisOilVolfracdistillloss
        """

        self._volfracdistillloss = volfracdistillloss

    @property
    def volfrackerosene(self):
        """Gets the volfrackerosene of this FluidAnalysisOil.  # noqa: E501


        :return: The volfrackerosene of this FluidAnalysisOil.  # noqa: E501
        :rtype: OneOfFluidAnalysisOilVolfrackerosene
        """
        return self._volfrackerosene

    @volfrackerosene.setter
    def volfrackerosene(self, volfrackerosene):
        """Sets the volfrackerosene of this FluidAnalysisOil.


        :param volfrackerosene: The volfrackerosene of this FluidAnalysisOil.  # noqa: E501
        :type: OneOfFluidAnalysisOilVolfrackerosene
        """

        self._volfrackerosene = volfrackerosene

    @property
    def volfracltgasoil(self):
        """Gets the volfracltgasoil of this FluidAnalysisOil.  # noqa: E501


        :return: The volfracltgasoil of this FluidAnalysisOil.  # noqa: E501
        :rtype: OneOfFluidAnalysisOilVolfracltgasoil
        """
        return self._volfracltgasoil

    @volfracltgasoil.setter
    def volfracltgasoil(self, volfracltgasoil):
        """Sets the volfracltgasoil of this FluidAnalysisOil.


        :param volfracltgasoil: The volfracltgasoil of this FluidAnalysisOil.  # noqa: E501
        :type: OneOfFluidAnalysisOilVolfracltgasoil
        """

        self._volfracltgasoil = volfracltgasoil

    @property
    def volfracnaptha(self):
        """Gets the volfracnaptha of this FluidAnalysisOil.  # noqa: E501


        :return: The volfracnaptha of this FluidAnalysisOil.  # noqa: E501
        :rtype: OneOfFluidAnalysisOilVolfracnaptha
        """
        return self._volfracnaptha

    @volfracnaptha.setter
    def volfracnaptha(self, volfracnaptha):
        """Sets the volfracnaptha of this FluidAnalysisOil.


        :param volfracnaptha: The volfracnaptha of this FluidAnalysisOil.  # noqa: E501
        :type: OneOfFluidAnalysisOilVolfracnaptha
        """

        self._volfracnaptha = volfracnaptha

    @property
    def volfracrecovered(self):
        """Gets the volfracrecovered of this FluidAnalysisOil.  # noqa: E501


        :return: The volfracrecovered of this FluidAnalysisOil.  # noqa: E501
        :rtype: OneOfFluidAnalysisOilVolfracrecovered
        """
        return self._volfracrecovered

    @volfracrecovered.setter
    def volfracrecovered(self, volfracrecovered):
        """Sets the volfracrecovered of this FluidAnalysisOil.


        :param volfracrecovered: The volfracrecovered of this FluidAnalysisOil.  # noqa: E501
        :type: OneOfFluidAnalysisOilVolfracrecovered
        """

        self._volfracrecovered = volfracrecovered

    @property
    def volfracresidue(self):
        """Gets the volfracresidue of this FluidAnalysisOil.  # noqa: E501


        :return: The volfracresidue of this FluidAnalysisOil.  # noqa: E501
        :rtype: OneOfFluidAnalysisOilVolfracresidue
        """
        return self._volfracresidue

    @volfracresidue.setter
    def volfracresidue(self, volfracresidue):
        """Sets the volfracresidue of this FluidAnalysisOil.


        :param volfracresidue: The volfracresidue of this FluidAnalysisOil.  # noqa: E501
        :type: OneOfFluidAnalysisOilVolfracresidue
        """

        self._volfracresidue = volfracresidue

    @property
    def volfracsediment(self):
        """Gets the volfracsediment of this FluidAnalysisOil.  # noqa: E501


        :return: The volfracsediment of this FluidAnalysisOil.  # noqa: E501
        :rtype: OneOfFluidAnalysisOilVolfracsediment
        """
        return self._volfracsediment

    @volfracsediment.setter
    def volfracsediment(self, volfracsediment):
        """Sets the volfracsediment of this FluidAnalysisOil.


        :param volfracsediment: The volfracsediment of this FluidAnalysisOil.  # noqa: E501
        :type: OneOfFluidAnalysisOilVolfracsediment
        """

        self._volfracsediment = volfracsediment

    @property
    def volfracwater(self):
        """Gets the volfracwater of this FluidAnalysisOil.  # noqa: E501


        :return: The volfracwater of this FluidAnalysisOil.  # noqa: E501
        :rtype: OneOfFluidAnalysisOilVolfracwater
        """
        return self._volfracwater

    @volfracwater.setter
    def volfracwater(self, volfracwater):
        """Sets the volfracwater of this FluidAnalysisOil.


        :param volfracwater: The volfracwater of this FluidAnalysisOil.  # noqa: E501
        :type: OneOfFluidAnalysisOilVolfracwater
        """

        self._volfracwater = volfracwater

    @property
    def waxpercent(self):
        """Gets the waxpercent of this FluidAnalysisOil.  # noqa: E501


        :return: The waxpercent of this FluidAnalysisOil.  # noqa: E501
        :rtype: OneOfFluidAnalysisOilWaxpercent
        """
        return self._waxpercent

    @waxpercent.setter
    def waxpercent(self, waxpercent):
        """Sets the waxpercent of this FluidAnalysisOil.


        :param waxpercent: The waxpercent of this FluidAnalysisOil.  # noqa: E501
        :type: OneOfFluidAnalysisOilWaxpercent
        """

        self._waxpercent = waxpercent

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FluidAnalysisOil, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FluidAnalysisOil):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
