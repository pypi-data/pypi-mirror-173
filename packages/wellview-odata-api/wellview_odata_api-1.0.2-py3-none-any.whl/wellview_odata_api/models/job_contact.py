# coding: utf-8

"""
    OData Service for namespace Default

    This OData service is located at http://localhost  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class JobContact(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'company': 'str',
        'contactname': 'str',
        'email': 'str',
        'fax': 'str',
        'idrec': 'str',
        'idrecparent': 'str',
        'idwell': 'str',
        'job': 'AnyOfJobContactJob',
        'location': 'str',
        'note': 'str',
        'phonealt': 'str',
        'phonehome': 'str',
        'phonemobile': 'str',
        'phoneoffice': 'str',
        'phonepager': 'str',
        'rptdist': 'str',
        'syscreatedate': 'datetime',
        'syscreateuser': 'str',
        'syslockchildren': 'int',
        'syslockchildrenui': 'int',
        'syslockdate': 'datetime',
        'syslockme': 'int',
        'syslockmeui': 'int',
        'sysmoddate': 'datetime',
        'sysmoduser': 'str',
        'sysseq': 'int',
        'systag': 'str',
        'title': 'str',
        'typ': 'str'
    }

    attribute_map = {
        'company': 'company',
        'contactname': 'contactname',
        'email': 'email',
        'fax': 'fax',
        'idrec': 'idrec',
        'idrecparent': 'idrecparent',
        'idwell': 'idwell',
        'job': 'job',
        'location': 'location',
        'note': 'note',
        'phonealt': 'phonealt',
        'phonehome': 'phonehome',
        'phonemobile': 'phonemobile',
        'phoneoffice': 'phoneoffice',
        'phonepager': 'phonepager',
        'rptdist': 'rptdist',
        'syscreatedate': 'syscreatedate',
        'syscreateuser': 'syscreateuser',
        'syslockchildren': 'syslockchildren',
        'syslockchildrenui': 'syslockchildrenui',
        'syslockdate': 'syslockdate',
        'syslockme': 'syslockme',
        'syslockmeui': 'syslockmeui',
        'sysmoddate': 'sysmoddate',
        'sysmoduser': 'sysmoduser',
        'sysseq': 'sysseq',
        'systag': 'systag',
        'title': 'title',
        'typ': 'typ'
    }

    def __init__(self, company=None, contactname=None, email=None, fax=None, idrec=None, idrecparent=None, idwell=None, job=None, location=None, note=None, phonealt=None, phonehome=None, phonemobile=None, phoneoffice=None, phonepager=None, rptdist=None, syscreatedate=None, syscreateuser=None, syslockchildren=None, syslockchildrenui=None, syslockdate=None, syslockme=None, syslockmeui=None, sysmoddate=None, sysmoduser=None, sysseq=None, systag=None, title=None, typ=None):  # noqa: E501
        """JobContact - a model defined in Swagger"""  # noqa: E501
        self._company = None
        self._contactname = None
        self._email = None
        self._fax = None
        self._idrec = None
        self._idrecparent = None
        self._idwell = None
        self._job = None
        self._location = None
        self._note = None
        self._phonealt = None
        self._phonehome = None
        self._phonemobile = None
        self._phoneoffice = None
        self._phonepager = None
        self._rptdist = None
        self._syscreatedate = None
        self._syscreateuser = None
        self._syslockchildren = None
        self._syslockchildrenui = None
        self._syslockdate = None
        self._syslockme = None
        self._syslockmeui = None
        self._sysmoddate = None
        self._sysmoduser = None
        self._sysseq = None
        self._systag = None
        self._title = None
        self._typ = None
        self.discriminator = None
        if company is not None:
            self.company = company
        if contactname is not None:
            self.contactname = contactname
        if email is not None:
            self.email = email
        if fax is not None:
            self.fax = fax
        if idrec is not None:
            self.idrec = idrec
        if idrecparent is not None:
            self.idrecparent = idrecparent
        if idwell is not None:
            self.idwell = idwell
        if job is not None:
            self.job = job
        if location is not None:
            self.location = location
        if note is not None:
            self.note = note
        if phonealt is not None:
            self.phonealt = phonealt
        if phonehome is not None:
            self.phonehome = phonehome
        if phonemobile is not None:
            self.phonemobile = phonemobile
        if phoneoffice is not None:
            self.phoneoffice = phoneoffice
        if phonepager is not None:
            self.phonepager = phonepager
        if rptdist is not None:
            self.rptdist = rptdist
        if syscreatedate is not None:
            self.syscreatedate = syscreatedate
        if syscreateuser is not None:
            self.syscreateuser = syscreateuser
        if syslockchildren is not None:
            self.syslockchildren = syslockchildren
        if syslockchildrenui is not None:
            self.syslockchildrenui = syslockchildrenui
        if syslockdate is not None:
            self.syslockdate = syslockdate
        if syslockme is not None:
            self.syslockme = syslockme
        if syslockmeui is not None:
            self.syslockmeui = syslockmeui
        if sysmoddate is not None:
            self.sysmoddate = sysmoddate
        if sysmoduser is not None:
            self.sysmoduser = sysmoduser
        if sysseq is not None:
            self.sysseq = sysseq
        if systag is not None:
            self.systag = systag
        if title is not None:
            self.title = title
        if typ is not None:
            self.typ = typ

    @property
    def company(self):
        """Gets the company of this JobContact.  # noqa: E501


        :return: The company of this JobContact.  # noqa: E501
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this JobContact.


        :param company: The company of this JobContact.  # noqa: E501
        :type: str
        """

        self._company = company

    @property
    def contactname(self):
        """Gets the contactname of this JobContact.  # noqa: E501


        :return: The contactname of this JobContact.  # noqa: E501
        :rtype: str
        """
        return self._contactname

    @contactname.setter
    def contactname(self, contactname):
        """Sets the contactname of this JobContact.


        :param contactname: The contactname of this JobContact.  # noqa: E501
        :type: str
        """

        self._contactname = contactname

    @property
    def email(self):
        """Gets the email of this JobContact.  # noqa: E501


        :return: The email of this JobContact.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this JobContact.


        :param email: The email of this JobContact.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def fax(self):
        """Gets the fax of this JobContact.  # noqa: E501


        :return: The fax of this JobContact.  # noqa: E501
        :rtype: str
        """
        return self._fax

    @fax.setter
    def fax(self, fax):
        """Sets the fax of this JobContact.


        :param fax: The fax of this JobContact.  # noqa: E501
        :type: str
        """

        self._fax = fax

    @property
    def idrec(self):
        """Gets the idrec of this JobContact.  # noqa: E501


        :return: The idrec of this JobContact.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this JobContact.


        :param idrec: The idrec of this JobContact.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecparent(self):
        """Gets the idrecparent of this JobContact.  # noqa: E501


        :return: The idrecparent of this JobContact.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this JobContact.


        :param idrecparent: The idrecparent of this JobContact.  # noqa: E501
        :type: str
        """

        self._idrecparent = idrecparent

    @property
    def idwell(self):
        """Gets the idwell of this JobContact.  # noqa: E501


        :return: The idwell of this JobContact.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this JobContact.


        :param idwell: The idwell of this JobContact.  # noqa: E501
        :type: str
        """

        self._idwell = idwell

    @property
    def job(self):
        """Gets the job of this JobContact.  # noqa: E501


        :return: The job of this JobContact.  # noqa: E501
        :rtype: AnyOfJobContactJob
        """
        return self._job

    @job.setter
    def job(self, job):
        """Sets the job of this JobContact.


        :param job: The job of this JobContact.  # noqa: E501
        :type: AnyOfJobContactJob
        """

        self._job = job

    @property
    def location(self):
        """Gets the location of this JobContact.  # noqa: E501


        :return: The location of this JobContact.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this JobContact.


        :param location: The location of this JobContact.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def note(self):
        """Gets the note of this JobContact.  # noqa: E501


        :return: The note of this JobContact.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this JobContact.


        :param note: The note of this JobContact.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def phonealt(self):
        """Gets the phonealt of this JobContact.  # noqa: E501


        :return: The phonealt of this JobContact.  # noqa: E501
        :rtype: str
        """
        return self._phonealt

    @phonealt.setter
    def phonealt(self, phonealt):
        """Sets the phonealt of this JobContact.


        :param phonealt: The phonealt of this JobContact.  # noqa: E501
        :type: str
        """

        self._phonealt = phonealt

    @property
    def phonehome(self):
        """Gets the phonehome of this JobContact.  # noqa: E501


        :return: The phonehome of this JobContact.  # noqa: E501
        :rtype: str
        """
        return self._phonehome

    @phonehome.setter
    def phonehome(self, phonehome):
        """Sets the phonehome of this JobContact.


        :param phonehome: The phonehome of this JobContact.  # noqa: E501
        :type: str
        """

        self._phonehome = phonehome

    @property
    def phonemobile(self):
        """Gets the phonemobile of this JobContact.  # noqa: E501


        :return: The phonemobile of this JobContact.  # noqa: E501
        :rtype: str
        """
        return self._phonemobile

    @phonemobile.setter
    def phonemobile(self, phonemobile):
        """Sets the phonemobile of this JobContact.


        :param phonemobile: The phonemobile of this JobContact.  # noqa: E501
        :type: str
        """

        self._phonemobile = phonemobile

    @property
    def phoneoffice(self):
        """Gets the phoneoffice of this JobContact.  # noqa: E501


        :return: The phoneoffice of this JobContact.  # noqa: E501
        :rtype: str
        """
        return self._phoneoffice

    @phoneoffice.setter
    def phoneoffice(self, phoneoffice):
        """Sets the phoneoffice of this JobContact.


        :param phoneoffice: The phoneoffice of this JobContact.  # noqa: E501
        :type: str
        """

        self._phoneoffice = phoneoffice

    @property
    def phonepager(self):
        """Gets the phonepager of this JobContact.  # noqa: E501


        :return: The phonepager of this JobContact.  # noqa: E501
        :rtype: str
        """
        return self._phonepager

    @phonepager.setter
    def phonepager(self, phonepager):
        """Sets the phonepager of this JobContact.


        :param phonepager: The phonepager of this JobContact.  # noqa: E501
        :type: str
        """

        self._phonepager = phonepager

    @property
    def rptdist(self):
        """Gets the rptdist of this JobContact.  # noqa: E501


        :return: The rptdist of this JobContact.  # noqa: E501
        :rtype: str
        """
        return self._rptdist

    @rptdist.setter
    def rptdist(self, rptdist):
        """Sets the rptdist of this JobContact.


        :param rptdist: The rptdist of this JobContact.  # noqa: E501
        :type: str
        """

        self._rptdist = rptdist

    @property
    def syscreatedate(self):
        """Gets the syscreatedate of this JobContact.  # noqa: E501


        :return: The syscreatedate of this JobContact.  # noqa: E501
        :rtype: datetime
        """
        return self._syscreatedate

    @syscreatedate.setter
    def syscreatedate(self, syscreatedate):
        """Sets the syscreatedate of this JobContact.


        :param syscreatedate: The syscreatedate of this JobContact.  # noqa: E501
        :type: datetime
        """

        self._syscreatedate = syscreatedate

    @property
    def syscreateuser(self):
        """Gets the syscreateuser of this JobContact.  # noqa: E501


        :return: The syscreateuser of this JobContact.  # noqa: E501
        :rtype: str
        """
        return self._syscreateuser

    @syscreateuser.setter
    def syscreateuser(self, syscreateuser):
        """Sets the syscreateuser of this JobContact.


        :param syscreateuser: The syscreateuser of this JobContact.  # noqa: E501
        :type: str
        """

        self._syscreateuser = syscreateuser

    @property
    def syslockchildren(self):
        """Gets the syslockchildren of this JobContact.  # noqa: E501


        :return: The syslockchildren of this JobContact.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildren

    @syslockchildren.setter
    def syslockchildren(self, syslockchildren):
        """Sets the syslockchildren of this JobContact.


        :param syslockchildren: The syslockchildren of this JobContact.  # noqa: E501
        :type: int
        """

        self._syslockchildren = syslockchildren

    @property
    def syslockchildrenui(self):
        """Gets the syslockchildrenui of this JobContact.  # noqa: E501


        :return: The syslockchildrenui of this JobContact.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildrenui

    @syslockchildrenui.setter
    def syslockchildrenui(self, syslockchildrenui):
        """Sets the syslockchildrenui of this JobContact.


        :param syslockchildrenui: The syslockchildrenui of this JobContact.  # noqa: E501
        :type: int
        """

        self._syslockchildrenui = syslockchildrenui

    @property
    def syslockdate(self):
        """Gets the syslockdate of this JobContact.  # noqa: E501


        :return: The syslockdate of this JobContact.  # noqa: E501
        :rtype: datetime
        """
        return self._syslockdate

    @syslockdate.setter
    def syslockdate(self, syslockdate):
        """Sets the syslockdate of this JobContact.


        :param syslockdate: The syslockdate of this JobContact.  # noqa: E501
        :type: datetime
        """

        self._syslockdate = syslockdate

    @property
    def syslockme(self):
        """Gets the syslockme of this JobContact.  # noqa: E501


        :return: The syslockme of this JobContact.  # noqa: E501
        :rtype: int
        """
        return self._syslockme

    @syslockme.setter
    def syslockme(self, syslockme):
        """Sets the syslockme of this JobContact.


        :param syslockme: The syslockme of this JobContact.  # noqa: E501
        :type: int
        """

        self._syslockme = syslockme

    @property
    def syslockmeui(self):
        """Gets the syslockmeui of this JobContact.  # noqa: E501


        :return: The syslockmeui of this JobContact.  # noqa: E501
        :rtype: int
        """
        return self._syslockmeui

    @syslockmeui.setter
    def syslockmeui(self, syslockmeui):
        """Sets the syslockmeui of this JobContact.


        :param syslockmeui: The syslockmeui of this JobContact.  # noqa: E501
        :type: int
        """

        self._syslockmeui = syslockmeui

    @property
    def sysmoddate(self):
        """Gets the sysmoddate of this JobContact.  # noqa: E501


        :return: The sysmoddate of this JobContact.  # noqa: E501
        :rtype: datetime
        """
        return self._sysmoddate

    @sysmoddate.setter
    def sysmoddate(self, sysmoddate):
        """Sets the sysmoddate of this JobContact.


        :param sysmoddate: The sysmoddate of this JobContact.  # noqa: E501
        :type: datetime
        """

        self._sysmoddate = sysmoddate

    @property
    def sysmoduser(self):
        """Gets the sysmoduser of this JobContact.  # noqa: E501


        :return: The sysmoduser of this JobContact.  # noqa: E501
        :rtype: str
        """
        return self._sysmoduser

    @sysmoduser.setter
    def sysmoduser(self, sysmoduser):
        """Sets the sysmoduser of this JobContact.


        :param sysmoduser: The sysmoduser of this JobContact.  # noqa: E501
        :type: str
        """

        self._sysmoduser = sysmoduser

    @property
    def sysseq(self):
        """Gets the sysseq of this JobContact.  # noqa: E501


        :return: The sysseq of this JobContact.  # noqa: E501
        :rtype: int
        """
        return self._sysseq

    @sysseq.setter
    def sysseq(self, sysseq):
        """Sets the sysseq of this JobContact.


        :param sysseq: The sysseq of this JobContact.  # noqa: E501
        :type: int
        """

        self._sysseq = sysseq

    @property
    def systag(self):
        """Gets the systag of this JobContact.  # noqa: E501


        :return: The systag of this JobContact.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this JobContact.


        :param systag: The systag of this JobContact.  # noqa: E501
        :type: str
        """

        self._systag = systag

    @property
    def title(self):
        """Gets the title of this JobContact.  # noqa: E501


        :return: The title of this JobContact.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this JobContact.


        :param title: The title of this JobContact.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def typ(self):
        """Gets the typ of this JobContact.  # noqa: E501


        :return: The typ of this JobContact.  # noqa: E501
        :rtype: str
        """
        return self._typ

    @typ.setter
    def typ(self, typ):
        """Sets the typ of this JobContact.


        :param typ: The typ of this JobContact.  # noqa: E501
        :type: str
        """

        self._typ = typ

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JobContact, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobContact):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
