# coding: utf-8

"""
    OData Service for namespace Default

    This OData service is located at http://localhost  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PrimeMover(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'beltlength': 'OneOfPrimeMoverBeltlength',
        'beltmodel': 'str',
        'beltno': 'int',
        'beltpowertranseff': 'OneOfPrimeMoverBeltpowertranseff',
        'beltreductionratio': 'OneOfPrimeMoverBeltreductionratio',
        'beltxsect': 'str',
        'com': 'str',
        'conditionend': 'str',
        'conditionstart': 'str',
        'dttmend': 'datetime',
        'dttmlastoverhaul': 'datetime',
        'dttmstart': 'datetime',
        'frame': 'str',
        'idrec': 'str',
        'idrecjob': 'str',
        'idrecjobtk': 'str',
        'idrecrod': 'str',
        'idrecrodtk': 'str',
        'idwell': 'str',
        'make': 'str',
        'model': 'str',
        'pmtyp': 'str',
        'powerrating': 'OneOfPrimeMoverPowerrating',
        'prime_mover_electrics': 'list[PrimeMoverElectric]',
        'prime_mover_ics': 'list[PrimeMoverIc]',
        'proposed': 'int',
        'refid': 'str',
        'rpmrating': 'OneOfPrimeMoverRpmrating',
        'servicefact': 'OneOfPrimeMoverServicefact',
        'sn': 'str',
        'speeddes': 'str',
        'syscreatedate': 'datetime',
        'syscreateuser': 'str',
        'syslockchildren': 'int',
        'syslockchildrenui': 'int',
        'syslockdate': 'datetime',
        'syslockme': 'int',
        'syslockmeui': 'int',
        'sysmoddate': 'datetime',
        'sysmoduser': 'str',
        'systag': 'str',
        'szsheave': 'OneOfPrimeMoverSzsheave',
        'wellheader': 'AnyOfPrimeMoverWellheader'
    }

    attribute_map = {
        'beltlength': 'beltlength',
        'beltmodel': 'beltmodel',
        'beltno': 'beltno',
        'beltpowertranseff': 'beltpowertranseff',
        'beltreductionratio': 'beltreductionratio',
        'beltxsect': 'beltxsect',
        'com': 'com',
        'conditionend': 'conditionend',
        'conditionstart': 'conditionstart',
        'dttmend': 'dttmend',
        'dttmlastoverhaul': 'dttmlastoverhaul',
        'dttmstart': 'dttmstart',
        'frame': 'frame',
        'idrec': 'idrec',
        'idrecjob': 'idrecjob',
        'idrecjobtk': 'idrecjobtk',
        'idrecrod': 'idrecrod',
        'idrecrodtk': 'idrecrodtk',
        'idwell': 'idwell',
        'make': 'make',
        'model': 'model',
        'pmtyp': 'pmtyp',
        'powerrating': 'powerrating',
        'prime_mover_electrics': 'primeMoverElectrics',
        'prime_mover_ics': 'primeMoverIcs',
        'proposed': 'proposed',
        'refid': 'refid',
        'rpmrating': 'rpmrating',
        'servicefact': 'servicefact',
        'sn': 'sn',
        'speeddes': 'speeddes',
        'syscreatedate': 'syscreatedate',
        'syscreateuser': 'syscreateuser',
        'syslockchildren': 'syslockchildren',
        'syslockchildrenui': 'syslockchildrenui',
        'syslockdate': 'syslockdate',
        'syslockme': 'syslockme',
        'syslockmeui': 'syslockmeui',
        'sysmoddate': 'sysmoddate',
        'sysmoduser': 'sysmoduser',
        'systag': 'systag',
        'szsheave': 'szsheave',
        'wellheader': 'wellheader'
    }

    def __init__(self, beltlength=None, beltmodel=None, beltno=None, beltpowertranseff=None, beltreductionratio=None, beltxsect=None, com=None, conditionend=None, conditionstart=None, dttmend=None, dttmlastoverhaul=None, dttmstart=None, frame=None, idrec=None, idrecjob=None, idrecjobtk=None, idrecrod=None, idrecrodtk=None, idwell=None, make=None, model=None, pmtyp=None, powerrating=None, prime_mover_electrics=None, prime_mover_ics=None, proposed=None, refid=None, rpmrating=None, servicefact=None, sn=None, speeddes=None, syscreatedate=None, syscreateuser=None, syslockchildren=None, syslockchildrenui=None, syslockdate=None, syslockme=None, syslockmeui=None, sysmoddate=None, sysmoduser=None, systag=None, szsheave=None, wellheader=None):  # noqa: E501
        """PrimeMover - a model defined in Swagger"""  # noqa: E501
        self._beltlength = None
        self._beltmodel = None
        self._beltno = None
        self._beltpowertranseff = None
        self._beltreductionratio = None
        self._beltxsect = None
        self._com = None
        self._conditionend = None
        self._conditionstart = None
        self._dttmend = None
        self._dttmlastoverhaul = None
        self._dttmstart = None
        self._frame = None
        self._idrec = None
        self._idrecjob = None
        self._idrecjobtk = None
        self._idrecrod = None
        self._idrecrodtk = None
        self._idwell = None
        self._make = None
        self._model = None
        self._pmtyp = None
        self._powerrating = None
        self._prime_mover_electrics = None
        self._prime_mover_ics = None
        self._proposed = None
        self._refid = None
        self._rpmrating = None
        self._servicefact = None
        self._sn = None
        self._speeddes = None
        self._syscreatedate = None
        self._syscreateuser = None
        self._syslockchildren = None
        self._syslockchildrenui = None
        self._syslockdate = None
        self._syslockme = None
        self._syslockmeui = None
        self._sysmoddate = None
        self._sysmoduser = None
        self._systag = None
        self._szsheave = None
        self._wellheader = None
        self.discriminator = None
        if beltlength is not None:
            self.beltlength = beltlength
        if beltmodel is not None:
            self.beltmodel = beltmodel
        if beltno is not None:
            self.beltno = beltno
        if beltpowertranseff is not None:
            self.beltpowertranseff = beltpowertranseff
        if beltreductionratio is not None:
            self.beltreductionratio = beltreductionratio
        if beltxsect is not None:
            self.beltxsect = beltxsect
        if com is not None:
            self.com = com
        if conditionend is not None:
            self.conditionend = conditionend
        if conditionstart is not None:
            self.conditionstart = conditionstart
        if dttmend is not None:
            self.dttmend = dttmend
        if dttmlastoverhaul is not None:
            self.dttmlastoverhaul = dttmlastoverhaul
        if dttmstart is not None:
            self.dttmstart = dttmstart
        if frame is not None:
            self.frame = frame
        if idrec is not None:
            self.idrec = idrec
        if idrecjob is not None:
            self.idrecjob = idrecjob
        if idrecjobtk is not None:
            self.idrecjobtk = idrecjobtk
        if idrecrod is not None:
            self.idrecrod = idrecrod
        if idrecrodtk is not None:
            self.idrecrodtk = idrecrodtk
        if idwell is not None:
            self.idwell = idwell
        if make is not None:
            self.make = make
        if model is not None:
            self.model = model
        if pmtyp is not None:
            self.pmtyp = pmtyp
        if powerrating is not None:
            self.powerrating = powerrating
        if prime_mover_electrics is not None:
            self.prime_mover_electrics = prime_mover_electrics
        if prime_mover_ics is not None:
            self.prime_mover_ics = prime_mover_ics
        if proposed is not None:
            self.proposed = proposed
        if refid is not None:
            self.refid = refid
        if rpmrating is not None:
            self.rpmrating = rpmrating
        if servicefact is not None:
            self.servicefact = servicefact
        if sn is not None:
            self.sn = sn
        if speeddes is not None:
            self.speeddes = speeddes
        if syscreatedate is not None:
            self.syscreatedate = syscreatedate
        if syscreateuser is not None:
            self.syscreateuser = syscreateuser
        if syslockchildren is not None:
            self.syslockchildren = syslockchildren
        if syslockchildrenui is not None:
            self.syslockchildrenui = syslockchildrenui
        if syslockdate is not None:
            self.syslockdate = syslockdate
        if syslockme is not None:
            self.syslockme = syslockme
        if syslockmeui is not None:
            self.syslockmeui = syslockmeui
        if sysmoddate is not None:
            self.sysmoddate = sysmoddate
        if sysmoduser is not None:
            self.sysmoduser = sysmoduser
        if systag is not None:
            self.systag = systag
        if szsheave is not None:
            self.szsheave = szsheave
        if wellheader is not None:
            self.wellheader = wellheader

    @property
    def beltlength(self):
        """Gets the beltlength of this PrimeMover.  # noqa: E501


        :return: The beltlength of this PrimeMover.  # noqa: E501
        :rtype: OneOfPrimeMoverBeltlength
        """
        return self._beltlength

    @beltlength.setter
    def beltlength(self, beltlength):
        """Sets the beltlength of this PrimeMover.


        :param beltlength: The beltlength of this PrimeMover.  # noqa: E501
        :type: OneOfPrimeMoverBeltlength
        """

        self._beltlength = beltlength

    @property
    def beltmodel(self):
        """Gets the beltmodel of this PrimeMover.  # noqa: E501


        :return: The beltmodel of this PrimeMover.  # noqa: E501
        :rtype: str
        """
        return self._beltmodel

    @beltmodel.setter
    def beltmodel(self, beltmodel):
        """Sets the beltmodel of this PrimeMover.


        :param beltmodel: The beltmodel of this PrimeMover.  # noqa: E501
        :type: str
        """

        self._beltmodel = beltmodel

    @property
    def beltno(self):
        """Gets the beltno of this PrimeMover.  # noqa: E501


        :return: The beltno of this PrimeMover.  # noqa: E501
        :rtype: int
        """
        return self._beltno

    @beltno.setter
    def beltno(self, beltno):
        """Sets the beltno of this PrimeMover.


        :param beltno: The beltno of this PrimeMover.  # noqa: E501
        :type: int
        """

        self._beltno = beltno

    @property
    def beltpowertranseff(self):
        """Gets the beltpowertranseff of this PrimeMover.  # noqa: E501


        :return: The beltpowertranseff of this PrimeMover.  # noqa: E501
        :rtype: OneOfPrimeMoverBeltpowertranseff
        """
        return self._beltpowertranseff

    @beltpowertranseff.setter
    def beltpowertranseff(self, beltpowertranseff):
        """Sets the beltpowertranseff of this PrimeMover.


        :param beltpowertranseff: The beltpowertranseff of this PrimeMover.  # noqa: E501
        :type: OneOfPrimeMoverBeltpowertranseff
        """

        self._beltpowertranseff = beltpowertranseff

    @property
    def beltreductionratio(self):
        """Gets the beltreductionratio of this PrimeMover.  # noqa: E501


        :return: The beltreductionratio of this PrimeMover.  # noqa: E501
        :rtype: OneOfPrimeMoverBeltreductionratio
        """
        return self._beltreductionratio

    @beltreductionratio.setter
    def beltreductionratio(self, beltreductionratio):
        """Sets the beltreductionratio of this PrimeMover.


        :param beltreductionratio: The beltreductionratio of this PrimeMover.  # noqa: E501
        :type: OneOfPrimeMoverBeltreductionratio
        """

        self._beltreductionratio = beltreductionratio

    @property
    def beltxsect(self):
        """Gets the beltxsect of this PrimeMover.  # noqa: E501


        :return: The beltxsect of this PrimeMover.  # noqa: E501
        :rtype: str
        """
        return self._beltxsect

    @beltxsect.setter
    def beltxsect(self, beltxsect):
        """Sets the beltxsect of this PrimeMover.


        :param beltxsect: The beltxsect of this PrimeMover.  # noqa: E501
        :type: str
        """

        self._beltxsect = beltxsect

    @property
    def com(self):
        """Gets the com of this PrimeMover.  # noqa: E501


        :return: The com of this PrimeMover.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this PrimeMover.


        :param com: The com of this PrimeMover.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def conditionend(self):
        """Gets the conditionend of this PrimeMover.  # noqa: E501


        :return: The conditionend of this PrimeMover.  # noqa: E501
        :rtype: str
        """
        return self._conditionend

    @conditionend.setter
    def conditionend(self, conditionend):
        """Sets the conditionend of this PrimeMover.


        :param conditionend: The conditionend of this PrimeMover.  # noqa: E501
        :type: str
        """

        self._conditionend = conditionend

    @property
    def conditionstart(self):
        """Gets the conditionstart of this PrimeMover.  # noqa: E501


        :return: The conditionstart of this PrimeMover.  # noqa: E501
        :rtype: str
        """
        return self._conditionstart

    @conditionstart.setter
    def conditionstart(self, conditionstart):
        """Sets the conditionstart of this PrimeMover.


        :param conditionstart: The conditionstart of this PrimeMover.  # noqa: E501
        :type: str
        """

        self._conditionstart = conditionstart

    @property
    def dttmend(self):
        """Gets the dttmend of this PrimeMover.  # noqa: E501


        :return: The dttmend of this PrimeMover.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmend

    @dttmend.setter
    def dttmend(self, dttmend):
        """Sets the dttmend of this PrimeMover.


        :param dttmend: The dttmend of this PrimeMover.  # noqa: E501
        :type: datetime
        """

        self._dttmend = dttmend

    @property
    def dttmlastoverhaul(self):
        """Gets the dttmlastoverhaul of this PrimeMover.  # noqa: E501


        :return: The dttmlastoverhaul of this PrimeMover.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmlastoverhaul

    @dttmlastoverhaul.setter
    def dttmlastoverhaul(self, dttmlastoverhaul):
        """Sets the dttmlastoverhaul of this PrimeMover.


        :param dttmlastoverhaul: The dttmlastoverhaul of this PrimeMover.  # noqa: E501
        :type: datetime
        """

        self._dttmlastoverhaul = dttmlastoverhaul

    @property
    def dttmstart(self):
        """Gets the dttmstart of this PrimeMover.  # noqa: E501


        :return: The dttmstart of this PrimeMover.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmstart

    @dttmstart.setter
    def dttmstart(self, dttmstart):
        """Sets the dttmstart of this PrimeMover.


        :param dttmstart: The dttmstart of this PrimeMover.  # noqa: E501
        :type: datetime
        """

        self._dttmstart = dttmstart

    @property
    def frame(self):
        """Gets the frame of this PrimeMover.  # noqa: E501


        :return: The frame of this PrimeMover.  # noqa: E501
        :rtype: str
        """
        return self._frame

    @frame.setter
    def frame(self, frame):
        """Sets the frame of this PrimeMover.


        :param frame: The frame of this PrimeMover.  # noqa: E501
        :type: str
        """

        self._frame = frame

    @property
    def idrec(self):
        """Gets the idrec of this PrimeMover.  # noqa: E501


        :return: The idrec of this PrimeMover.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this PrimeMover.


        :param idrec: The idrec of this PrimeMover.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecjob(self):
        """Gets the idrecjob of this PrimeMover.  # noqa: E501


        :return: The idrecjob of this PrimeMover.  # noqa: E501
        :rtype: str
        """
        return self._idrecjob

    @idrecjob.setter
    def idrecjob(self, idrecjob):
        """Sets the idrecjob of this PrimeMover.


        :param idrecjob: The idrecjob of this PrimeMover.  # noqa: E501
        :type: str
        """

        self._idrecjob = idrecjob

    @property
    def idrecjobtk(self):
        """Gets the idrecjobtk of this PrimeMover.  # noqa: E501


        :return: The idrecjobtk of this PrimeMover.  # noqa: E501
        :rtype: str
        """
        return self._idrecjobtk

    @idrecjobtk.setter
    def idrecjobtk(self, idrecjobtk):
        """Sets the idrecjobtk of this PrimeMover.


        :param idrecjobtk: The idrecjobtk of this PrimeMover.  # noqa: E501
        :type: str
        """

        self._idrecjobtk = idrecjobtk

    @property
    def idrecrod(self):
        """Gets the idrecrod of this PrimeMover.  # noqa: E501


        :return: The idrecrod of this PrimeMover.  # noqa: E501
        :rtype: str
        """
        return self._idrecrod

    @idrecrod.setter
    def idrecrod(self, idrecrod):
        """Sets the idrecrod of this PrimeMover.


        :param idrecrod: The idrecrod of this PrimeMover.  # noqa: E501
        :type: str
        """

        self._idrecrod = idrecrod

    @property
    def idrecrodtk(self):
        """Gets the idrecrodtk of this PrimeMover.  # noqa: E501


        :return: The idrecrodtk of this PrimeMover.  # noqa: E501
        :rtype: str
        """
        return self._idrecrodtk

    @idrecrodtk.setter
    def idrecrodtk(self, idrecrodtk):
        """Sets the idrecrodtk of this PrimeMover.


        :param idrecrodtk: The idrecrodtk of this PrimeMover.  # noqa: E501
        :type: str
        """

        self._idrecrodtk = idrecrodtk

    @property
    def idwell(self):
        """Gets the idwell of this PrimeMover.  # noqa: E501


        :return: The idwell of this PrimeMover.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this PrimeMover.


        :param idwell: The idwell of this PrimeMover.  # noqa: E501
        :type: str
        """

        self._idwell = idwell

    @property
    def make(self):
        """Gets the make of this PrimeMover.  # noqa: E501


        :return: The make of this PrimeMover.  # noqa: E501
        :rtype: str
        """
        return self._make

    @make.setter
    def make(self, make):
        """Sets the make of this PrimeMover.


        :param make: The make of this PrimeMover.  # noqa: E501
        :type: str
        """

        self._make = make

    @property
    def model(self):
        """Gets the model of this PrimeMover.  # noqa: E501


        :return: The model of this PrimeMover.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this PrimeMover.


        :param model: The model of this PrimeMover.  # noqa: E501
        :type: str
        """

        self._model = model

    @property
    def pmtyp(self):
        """Gets the pmtyp of this PrimeMover.  # noqa: E501


        :return: The pmtyp of this PrimeMover.  # noqa: E501
        :rtype: str
        """
        return self._pmtyp

    @pmtyp.setter
    def pmtyp(self, pmtyp):
        """Sets the pmtyp of this PrimeMover.


        :param pmtyp: The pmtyp of this PrimeMover.  # noqa: E501
        :type: str
        """

        self._pmtyp = pmtyp

    @property
    def powerrating(self):
        """Gets the powerrating of this PrimeMover.  # noqa: E501


        :return: The powerrating of this PrimeMover.  # noqa: E501
        :rtype: OneOfPrimeMoverPowerrating
        """
        return self._powerrating

    @powerrating.setter
    def powerrating(self, powerrating):
        """Sets the powerrating of this PrimeMover.


        :param powerrating: The powerrating of this PrimeMover.  # noqa: E501
        :type: OneOfPrimeMoverPowerrating
        """

        self._powerrating = powerrating

    @property
    def prime_mover_electrics(self):
        """Gets the prime_mover_electrics of this PrimeMover.  # noqa: E501


        :return: The prime_mover_electrics of this PrimeMover.  # noqa: E501
        :rtype: list[PrimeMoverElectric]
        """
        return self._prime_mover_electrics

    @prime_mover_electrics.setter
    def prime_mover_electrics(self, prime_mover_electrics):
        """Sets the prime_mover_electrics of this PrimeMover.


        :param prime_mover_electrics: The prime_mover_electrics of this PrimeMover.  # noqa: E501
        :type: list[PrimeMoverElectric]
        """

        self._prime_mover_electrics = prime_mover_electrics

    @property
    def prime_mover_ics(self):
        """Gets the prime_mover_ics of this PrimeMover.  # noqa: E501


        :return: The prime_mover_ics of this PrimeMover.  # noqa: E501
        :rtype: list[PrimeMoverIc]
        """
        return self._prime_mover_ics

    @prime_mover_ics.setter
    def prime_mover_ics(self, prime_mover_ics):
        """Sets the prime_mover_ics of this PrimeMover.


        :param prime_mover_ics: The prime_mover_ics of this PrimeMover.  # noqa: E501
        :type: list[PrimeMoverIc]
        """

        self._prime_mover_ics = prime_mover_ics

    @property
    def proposed(self):
        """Gets the proposed of this PrimeMover.  # noqa: E501


        :return: The proposed of this PrimeMover.  # noqa: E501
        :rtype: int
        """
        return self._proposed

    @proposed.setter
    def proposed(self, proposed):
        """Sets the proposed of this PrimeMover.


        :param proposed: The proposed of this PrimeMover.  # noqa: E501
        :type: int
        """

        self._proposed = proposed

    @property
    def refid(self):
        """Gets the refid of this PrimeMover.  # noqa: E501


        :return: The refid of this PrimeMover.  # noqa: E501
        :rtype: str
        """
        return self._refid

    @refid.setter
    def refid(self, refid):
        """Sets the refid of this PrimeMover.


        :param refid: The refid of this PrimeMover.  # noqa: E501
        :type: str
        """

        self._refid = refid

    @property
    def rpmrating(self):
        """Gets the rpmrating of this PrimeMover.  # noqa: E501


        :return: The rpmrating of this PrimeMover.  # noqa: E501
        :rtype: OneOfPrimeMoverRpmrating
        """
        return self._rpmrating

    @rpmrating.setter
    def rpmrating(self, rpmrating):
        """Sets the rpmrating of this PrimeMover.


        :param rpmrating: The rpmrating of this PrimeMover.  # noqa: E501
        :type: OneOfPrimeMoverRpmrating
        """

        self._rpmrating = rpmrating

    @property
    def servicefact(self):
        """Gets the servicefact of this PrimeMover.  # noqa: E501


        :return: The servicefact of this PrimeMover.  # noqa: E501
        :rtype: OneOfPrimeMoverServicefact
        """
        return self._servicefact

    @servicefact.setter
    def servicefact(self, servicefact):
        """Sets the servicefact of this PrimeMover.


        :param servicefact: The servicefact of this PrimeMover.  # noqa: E501
        :type: OneOfPrimeMoverServicefact
        """

        self._servicefact = servicefact

    @property
    def sn(self):
        """Gets the sn of this PrimeMover.  # noqa: E501


        :return: The sn of this PrimeMover.  # noqa: E501
        :rtype: str
        """
        return self._sn

    @sn.setter
    def sn(self, sn):
        """Sets the sn of this PrimeMover.


        :param sn: The sn of this PrimeMover.  # noqa: E501
        :type: str
        """

        self._sn = sn

    @property
    def speeddes(self):
        """Gets the speeddes of this PrimeMover.  # noqa: E501


        :return: The speeddes of this PrimeMover.  # noqa: E501
        :rtype: str
        """
        return self._speeddes

    @speeddes.setter
    def speeddes(self, speeddes):
        """Sets the speeddes of this PrimeMover.


        :param speeddes: The speeddes of this PrimeMover.  # noqa: E501
        :type: str
        """

        self._speeddes = speeddes

    @property
    def syscreatedate(self):
        """Gets the syscreatedate of this PrimeMover.  # noqa: E501


        :return: The syscreatedate of this PrimeMover.  # noqa: E501
        :rtype: datetime
        """
        return self._syscreatedate

    @syscreatedate.setter
    def syscreatedate(self, syscreatedate):
        """Sets the syscreatedate of this PrimeMover.


        :param syscreatedate: The syscreatedate of this PrimeMover.  # noqa: E501
        :type: datetime
        """

        self._syscreatedate = syscreatedate

    @property
    def syscreateuser(self):
        """Gets the syscreateuser of this PrimeMover.  # noqa: E501


        :return: The syscreateuser of this PrimeMover.  # noqa: E501
        :rtype: str
        """
        return self._syscreateuser

    @syscreateuser.setter
    def syscreateuser(self, syscreateuser):
        """Sets the syscreateuser of this PrimeMover.


        :param syscreateuser: The syscreateuser of this PrimeMover.  # noqa: E501
        :type: str
        """

        self._syscreateuser = syscreateuser

    @property
    def syslockchildren(self):
        """Gets the syslockchildren of this PrimeMover.  # noqa: E501


        :return: The syslockchildren of this PrimeMover.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildren

    @syslockchildren.setter
    def syslockchildren(self, syslockchildren):
        """Sets the syslockchildren of this PrimeMover.


        :param syslockchildren: The syslockchildren of this PrimeMover.  # noqa: E501
        :type: int
        """

        self._syslockchildren = syslockchildren

    @property
    def syslockchildrenui(self):
        """Gets the syslockchildrenui of this PrimeMover.  # noqa: E501


        :return: The syslockchildrenui of this PrimeMover.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildrenui

    @syslockchildrenui.setter
    def syslockchildrenui(self, syslockchildrenui):
        """Sets the syslockchildrenui of this PrimeMover.


        :param syslockchildrenui: The syslockchildrenui of this PrimeMover.  # noqa: E501
        :type: int
        """

        self._syslockchildrenui = syslockchildrenui

    @property
    def syslockdate(self):
        """Gets the syslockdate of this PrimeMover.  # noqa: E501


        :return: The syslockdate of this PrimeMover.  # noqa: E501
        :rtype: datetime
        """
        return self._syslockdate

    @syslockdate.setter
    def syslockdate(self, syslockdate):
        """Sets the syslockdate of this PrimeMover.


        :param syslockdate: The syslockdate of this PrimeMover.  # noqa: E501
        :type: datetime
        """

        self._syslockdate = syslockdate

    @property
    def syslockme(self):
        """Gets the syslockme of this PrimeMover.  # noqa: E501


        :return: The syslockme of this PrimeMover.  # noqa: E501
        :rtype: int
        """
        return self._syslockme

    @syslockme.setter
    def syslockme(self, syslockme):
        """Sets the syslockme of this PrimeMover.


        :param syslockme: The syslockme of this PrimeMover.  # noqa: E501
        :type: int
        """

        self._syslockme = syslockme

    @property
    def syslockmeui(self):
        """Gets the syslockmeui of this PrimeMover.  # noqa: E501


        :return: The syslockmeui of this PrimeMover.  # noqa: E501
        :rtype: int
        """
        return self._syslockmeui

    @syslockmeui.setter
    def syslockmeui(self, syslockmeui):
        """Sets the syslockmeui of this PrimeMover.


        :param syslockmeui: The syslockmeui of this PrimeMover.  # noqa: E501
        :type: int
        """

        self._syslockmeui = syslockmeui

    @property
    def sysmoddate(self):
        """Gets the sysmoddate of this PrimeMover.  # noqa: E501


        :return: The sysmoddate of this PrimeMover.  # noqa: E501
        :rtype: datetime
        """
        return self._sysmoddate

    @sysmoddate.setter
    def sysmoddate(self, sysmoddate):
        """Sets the sysmoddate of this PrimeMover.


        :param sysmoddate: The sysmoddate of this PrimeMover.  # noqa: E501
        :type: datetime
        """

        self._sysmoddate = sysmoddate

    @property
    def sysmoduser(self):
        """Gets the sysmoduser of this PrimeMover.  # noqa: E501


        :return: The sysmoduser of this PrimeMover.  # noqa: E501
        :rtype: str
        """
        return self._sysmoduser

    @sysmoduser.setter
    def sysmoduser(self, sysmoduser):
        """Sets the sysmoduser of this PrimeMover.


        :param sysmoduser: The sysmoduser of this PrimeMover.  # noqa: E501
        :type: str
        """

        self._sysmoduser = sysmoduser

    @property
    def systag(self):
        """Gets the systag of this PrimeMover.  # noqa: E501


        :return: The systag of this PrimeMover.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this PrimeMover.


        :param systag: The systag of this PrimeMover.  # noqa: E501
        :type: str
        """

        self._systag = systag

    @property
    def szsheave(self):
        """Gets the szsheave of this PrimeMover.  # noqa: E501


        :return: The szsheave of this PrimeMover.  # noqa: E501
        :rtype: OneOfPrimeMoverSzsheave
        """
        return self._szsheave

    @szsheave.setter
    def szsheave(self, szsheave):
        """Sets the szsheave of this PrimeMover.


        :param szsheave: The szsheave of this PrimeMover.  # noqa: E501
        :type: OneOfPrimeMoverSzsheave
        """

        self._szsheave = szsheave

    @property
    def wellheader(self):
        """Gets the wellheader of this PrimeMover.  # noqa: E501


        :return: The wellheader of this PrimeMover.  # noqa: E501
        :rtype: AnyOfPrimeMoverWellheader
        """
        return self._wellheader

    @wellheader.setter
    def wellheader(self, wellheader):
        """Sets the wellheader of this PrimeMover.


        :param wellheader: The wellheader of this PrimeMover.  # noqa: E501
        :type: AnyOfPrimeMoverWellheader
        """

        self._wellheader = wellheader

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PrimeMover, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PrimeMover):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
