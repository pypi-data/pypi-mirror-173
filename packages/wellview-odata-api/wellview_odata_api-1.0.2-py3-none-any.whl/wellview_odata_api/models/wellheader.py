# coding: utf-8

"""
    OData Service for namespace Default

    This OData service is located at http://localhost  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Wellheader(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'agent': 'str',
        'agreements': 'list[Agreement]',
        'annular_fluids': 'list[AnnularFluid]',
        'area': 'str',
        'attachments': 'list[Attachment]',
        'attributes': 'list[Attributes]',
        'basin': 'str',
        'basincode': 'str',
        'cases': 'list[Cas]',
        'casingruncalc': 'int',
        'cements': 'list[Cement]',
        'com': 'str',
        'comments': 'list[Comment]',
        'completions': 'list[Completion]',
        'cores': 'list[Core]',
        'country': 'str',
        'county': 'str',
        'currentprimaryfluiddescalc': 'str',
        'currentwellstatus1': 'str',
        'currentwellstatus1calc': 'str',
        'currentwellstatus2': 'str',
        'currentwellstatus2calc': 'str',
        'currentwelltyp1calc': 'str',
        'currentwelltyp2calc': 'str',
        'depth_annotations': 'list[DepthAnnotation]',
        'directionstowell': 'str',
        'displaceunwrapcalc': 'OneOfWellheaderDisplaceunwrapcalc',
        'district': 'str',
        'division': 'str',
        'divisioncode': 'str',
        'dttmabandon': 'datetime',
        'dttmfirstprod': 'datetime',
        'dttmrr': 'datetime',
        'dttmspud': 'datetime',
        'dttmstatuscalc': 'datetime',
        'dttmwellclass': 'datetime',
        'dttmwelllic': 'datetime',
        'dttmzoneonprodfirstcalc': 'datetime',
        'durspudtotodaycalc': 'OneOfWellheaderDurspudtotodaycalc',
        'elevation_histories': 'list[ElevationHistory]',
        'elvcasflange': 'OneOfWellheaderElvcasflange',
        'elvground': 'OneOfWellheaderElvground',
        'elvlat': 'OneOfWellheaderElvlat',
        'elvmudline': 'OneOfWellheaderElvmudline',
        'elvorigkb': 'OneOfWellheaderElvorigkb',
        'elvtubhead': 'OneOfWellheaderElvtubhead',
        'environmentsensitive': 'int',
        'ewdist': 'OneOfWellheaderEwdist',
        'ewflag': 'str',
        'ext_reports': 'list[ExtReport]',
        'external_datas': 'list[ExternalData]',
        'fieldcode': 'str',
        'fieldname': 'str',
        'fieldoffice': 'str',
        'fieldofficecode': 'str',
        'fluid_analysis': 'list[FluidAnalysis]',
        'geo_evals': 'list[GeoEval]',
        'govauthority': 'str',
        'hih2s': 'int',
        'hisitp': 'int',
        'idrecelvhistory': 'str',
        'idrecelvhistorytk': 'str',
        'idrecproblemcalc': 'str',
        'idrecproblemcalctk': 'str',
        'idrecprodsettingcalc': 'str',
        'idrecprodsettingcalctk': 'str',
        'idwell': 'str',
        'inspects': 'list[Inspect]',
        'integrities': 'list[Integrity]',
        'jobs': 'list[Job]',
        'kbtocascalc': 'OneOfWellheaderKbtocascalc',
        'kbtogrdcalc': 'OneOfWellheaderKbtogrdcalc',
        'kbtomudcalc': 'OneOfWellheaderKbtomudcalc',
        'kbtoothercalc': 'OneOfWellheaderKbtoothercalc',
        'kbtotubcalc': 'OneOfWellheaderKbtotubcalc',
        'lastjobcalc': 'str',
        'lastjobreportcalc': 'str',
        'latitude': 'OneOfWellheaderLatitude',
        'latlongdatum': 'str',
        'latlongsource': 'str',
        'lease': 'str',
        'leasecode': 'str',
        'legal_statuses': 'list[LegalStatus]',
        'legalsurveyloc': 'str',
        'legalsurveysubtyp': 'str',
        'legalsurveytyp': 'str',
        'localtimezone': 'OneOfWellheaderLocaltimezone',
        'locationnote': 'str',
        'locationref': 'str',
        'locationsensitive': 'int',
        'locationtyp': 'str',
        'logs': 'list[Log]',
        'longitude': 'OneOfWellheaderLongitude',
        'notes': 'list[Note]',
        'nsdist': 'OneOfWellheaderNsdist',
        'nsflag': 'str',
        'operated': 'int',
        'operator': 'str',
        'operator_histories': 'list[OperatorHistory]',
        'operatorcode': 'str',
        'other_inholes': 'list[OtherInhole]',
        'other_strs': 'list[OtherStr]',
        'othertocascalc': 'OneOfWellheaderOthertocascalc',
        'othertogrdcalc': 'OneOfWellheaderOthertogrdcalc',
        'othertomudcalc': 'OneOfWellheaderOthertomudcalc',
        'othertotubcalc': 'OneOfWellheaderOthertotubcalc',
        'padcode': 'str',
        'padname': 'str',
        'pbtdallcalc': 'str',
        'perforations': 'list[Perforation]',
        'platform': 'str',
        'primaryfluiddes': 'str',
        'prime_movers': 'list[PrimeMover]',
        'problemflag': 'int',
        'problemlast12monthcalc': 'OneOfWellheaderProblemlast12monthcalc',
        'problems': 'list[Problem]',
        'problemtotalcalc': 'OneOfWellheaderProblemtotalcalc',
        'prod_settings': 'list[ProdSetting]',
        'productions': 'list[Production]',
        'pumping_units': 'list[PumpingUnit]',
        'ref_wells': 'list[RefWells]',
        'responsible_teams': 'list[ResponsibleTeam]',
        'risers': 'list[Riser]',
        'riskclass': 'str',
        'rods': 'list[Rod]',
        'slot': 'str',
        'source_dests': 'list[SourceDest]',
        'stateprov': 'str',
        'stims': 'list[Stim]',
        'surf_control_equips': 'list[SurfControlEquip]',
        'surfacerights': 'str',
        'swabs': 'list[Swab]',
        'syscreatedate': 'datetime',
        'syscreateuser': 'str',
        'syslockchildren': 'int',
        'syslockchildrenui': 'int',
        'syslockdate': 'datetime',
        'syslockdatemaster': 'datetime',
        'syslockme': 'int',
        'syslockmeui': 'int',
        'sysmoddate': 'datetime',
        'sysmoddatedb': 'datetime',
        'sysmoduser': 'str',
        'sysmoduserdb': 'str',
        'syssecuritytyp': 'str',
        'systag': 'str',
        'tasks': 'list[Task]',
        'tdallcalc': 'str',
        'tdcalc': 'OneOfWellheaderTdcalc',
        'tdtvdallcalc': 'str',
        'test_dynos': 'list[TestDyno]',
        'test_equips': 'list[TestEquip]',
        'test_leak_offs': 'list[TestLeakOff]',
        'test_sssvs': 'list[TestSssv]',
        'time_curves': 'list[TimeCurve]',
        'towndist': 'OneOfWellheaderTowndist',
        'townflag': 'str',
        'townname': 'str',
        'townstateprov': 'str',
        'tubs': 'list[Tub]',
        'userboolean1': 'int',
        'userboolean2': 'int',
        'userboolean3': 'int',
        'userboolean4': 'int',
        'userboolean5': 'int',
        'userdttm1': 'datetime',
        'userdttm2': 'datetime',
        'userdttm3': 'datetime',
        'userdttm4': 'datetime',
        'userdttm5': 'datetime',
        'usernum1': 'OneOfWellheaderUsernum1',
        'usernum2': 'OneOfWellheaderUsernum2',
        'usernum3': 'OneOfWellheaderUsernum3',
        'usernum4': 'OneOfWellheaderUsernum4',
        'usernum5': 'OneOfWellheaderUsernum5',
        'usernum6': 'OneOfWellheaderUsernum6',
        'usertxt1': 'str',
        'usertxt10': 'str',
        'usertxt2': 'str',
        'usertxt3': 'str',
        'usertxt4': 'str',
        'usertxt5': 'str',
        'usertxt6': 'str',
        'usertxt7': 'str',
        'usertxt8': 'str',
        'usertxt9': 'str',
        'utmgridzone': 'int',
        'utmsource': 'str',
        'utmx': 'OneOfWellheaderUtmx',
        'utmy': 'OneOfWellheaderUtmy',
        'waterdepth': 'OneOfWellheaderWaterdepth',
        'waterdepthref': 'str',
        'well_aliases': 'list[WellAlias]',
        'well_barriers': 'list[WellBarrier]',
        'well_reviews': 'list[WellReview]',
        'well_status_histories': 'list[WellStatusHistory]',
        'well_test_fluid_levels': 'list[WellTestFluidLevel]',
        'well_test_injects': 'list[WellTestInject]',
        'well_test_log_prods': 'list[WellTestLogProd]',
        'well_test_prods': 'list[WellTestProd]',
        'well_test_rfts': 'list[WellTestRft]',
        'well_test_trans': 'list[WellTestTrans]',
        'wellborenocalc': 'int',
        'wellbores': 'list[Wellbore]',
        'wellclass': 'str',
        'wellconfig': 'str',
        'wellheads': 'list[Wellhead]',
        'wellida': 'str',
        'wellidb': 'str',
        'wellidc': 'str',
        'wellidd': 'str',
        'wellide': 'str',
        'welllicensee': 'str',
        'welllicenseno': 'str',
        'wellname': 'str',
        'welltyp1': 'str',
        'welltyp2': 'str',
        'wh_drives': 'list[WhDrive]',
        'zones': 'list[Zone]'
    }

    attribute_map = {
        'agent': 'agent',
        'agreements': 'agreements',
        'annular_fluids': 'annularFluids',
        'area': 'area',
        'attachments': 'attachments',
        'attributes': 'attributes',
        'basin': 'basin',
        'basincode': 'basincode',
        'cases': 'cases',
        'casingruncalc': 'casingruncalc',
        'cements': 'cements',
        'com': 'com',
        'comments': 'comments',
        'completions': 'completions',
        'cores': 'cores',
        'country': 'country',
        'county': 'county',
        'currentprimaryfluiddescalc': 'currentprimaryfluiddescalc',
        'currentwellstatus1': 'currentwellstatus1',
        'currentwellstatus1calc': 'currentwellstatus1calc',
        'currentwellstatus2': 'currentwellstatus2',
        'currentwellstatus2calc': 'currentwellstatus2calc',
        'currentwelltyp1calc': 'currentwelltyp1calc',
        'currentwelltyp2calc': 'currentwelltyp2calc',
        'depth_annotations': 'depthAnnotations',
        'directionstowell': 'directionstowell',
        'displaceunwrapcalc': 'displaceunwrapcalc',
        'district': 'district',
        'division': 'division',
        'divisioncode': 'divisioncode',
        'dttmabandon': 'dttmabandon',
        'dttmfirstprod': 'dttmfirstprod',
        'dttmrr': 'dttmrr',
        'dttmspud': 'dttmspud',
        'dttmstatuscalc': 'dttmstatuscalc',
        'dttmwellclass': 'dttmwellclass',
        'dttmwelllic': 'dttmwelllic',
        'dttmzoneonprodfirstcalc': 'dttmzoneonprodfirstcalc',
        'durspudtotodaycalc': 'durspudtotodaycalc',
        'elevation_histories': 'elevationHistories',
        'elvcasflange': 'elvcasflange',
        'elvground': 'elvground',
        'elvlat': 'elvlat',
        'elvmudline': 'elvmudline',
        'elvorigkb': 'elvorigkb',
        'elvtubhead': 'elvtubhead',
        'environmentsensitive': 'environmentsensitive',
        'ewdist': 'ewdist',
        'ewflag': 'ewflag',
        'ext_reports': 'extReports',
        'external_datas': 'externalDatas',
        'fieldcode': 'fieldcode',
        'fieldname': 'fieldname',
        'fieldoffice': 'fieldoffice',
        'fieldofficecode': 'fieldofficecode',
        'fluid_analysis': 'fluidAnalysis',
        'geo_evals': 'geoEvals',
        'govauthority': 'govauthority',
        'hih2s': 'hih2s',
        'hisitp': 'hisitp',
        'idrecelvhistory': 'idrecelvhistory',
        'idrecelvhistorytk': 'idrecelvhistorytk',
        'idrecproblemcalc': 'idrecproblemcalc',
        'idrecproblemcalctk': 'idrecproblemcalctk',
        'idrecprodsettingcalc': 'idrecprodsettingcalc',
        'idrecprodsettingcalctk': 'idrecprodsettingcalctk',
        'idwell': 'idwell',
        'inspects': 'inspects',
        'integrities': 'integrities',
        'jobs': 'jobs',
        'kbtocascalc': 'kbtocascalc',
        'kbtogrdcalc': 'kbtogrdcalc',
        'kbtomudcalc': 'kbtomudcalc',
        'kbtoothercalc': 'kbtoothercalc',
        'kbtotubcalc': 'kbtotubcalc',
        'lastjobcalc': 'lastjobcalc',
        'lastjobreportcalc': 'lastjobreportcalc',
        'latitude': 'latitude',
        'latlongdatum': 'latlongdatum',
        'latlongsource': 'latlongsource',
        'lease': 'lease',
        'leasecode': 'leasecode',
        'legal_statuses': 'legalStatuses',
        'legalsurveyloc': 'legalsurveyloc',
        'legalsurveysubtyp': 'legalsurveysubtyp',
        'legalsurveytyp': 'legalsurveytyp',
        'localtimezone': 'localtimezone',
        'locationnote': 'locationnote',
        'locationref': 'locationref',
        'locationsensitive': 'locationsensitive',
        'locationtyp': 'locationtyp',
        'logs': 'logs',
        'longitude': 'longitude',
        'notes': 'notes',
        'nsdist': 'nsdist',
        'nsflag': 'nsflag',
        'operated': 'operated',
        'operator': 'operator',
        'operator_histories': 'operatorHistories',
        'operatorcode': 'operatorcode',
        'other_inholes': 'otherInholes',
        'other_strs': 'otherStrs',
        'othertocascalc': 'othertocascalc',
        'othertogrdcalc': 'othertogrdcalc',
        'othertomudcalc': 'othertomudcalc',
        'othertotubcalc': 'othertotubcalc',
        'padcode': 'padcode',
        'padname': 'padname',
        'pbtdallcalc': 'pbtdallcalc',
        'perforations': 'perforations',
        'platform': 'platform',
        'primaryfluiddes': 'primaryfluiddes',
        'prime_movers': 'primeMovers',
        'problemflag': 'problemflag',
        'problemlast12monthcalc': 'problemlast12monthcalc',
        'problems': 'problems',
        'problemtotalcalc': 'problemtotalcalc',
        'prod_settings': 'prodSettings',
        'productions': 'productions',
        'pumping_units': 'pumpingUnits',
        'ref_wells': 'refWells',
        'responsible_teams': 'responsibleTeams',
        'risers': 'risers',
        'riskclass': 'riskclass',
        'rods': 'rods',
        'slot': 'slot',
        'source_dests': 'sourceDests',
        'stateprov': 'stateprov',
        'stims': 'stims',
        'surf_control_equips': 'surfControlEquips',
        'surfacerights': 'surfacerights',
        'swabs': 'swabs',
        'syscreatedate': 'syscreatedate',
        'syscreateuser': 'syscreateuser',
        'syslockchildren': 'syslockchildren',
        'syslockchildrenui': 'syslockchildrenui',
        'syslockdate': 'syslockdate',
        'syslockdatemaster': 'syslockdatemaster',
        'syslockme': 'syslockme',
        'syslockmeui': 'syslockmeui',
        'sysmoddate': 'sysmoddate',
        'sysmoddatedb': 'sysmoddatedb',
        'sysmoduser': 'sysmoduser',
        'sysmoduserdb': 'sysmoduserdb',
        'syssecuritytyp': 'syssecuritytyp',
        'systag': 'systag',
        'tasks': 'tasks',
        'tdallcalc': 'tdallcalc',
        'tdcalc': 'tdcalc',
        'tdtvdallcalc': 'tdtvdallcalc',
        'test_dynos': 'testDynos',
        'test_equips': 'testEquips',
        'test_leak_offs': 'testLeakOffs',
        'test_sssvs': 'testSssvs',
        'time_curves': 'timeCurves',
        'towndist': 'towndist',
        'townflag': 'townflag',
        'townname': 'townname',
        'townstateprov': 'townstateprov',
        'tubs': 'tubs',
        'userboolean1': 'userboolean1',
        'userboolean2': 'userboolean2',
        'userboolean3': 'userboolean3',
        'userboolean4': 'userboolean4',
        'userboolean5': 'userboolean5',
        'userdttm1': 'userdttm1',
        'userdttm2': 'userdttm2',
        'userdttm3': 'userdttm3',
        'userdttm4': 'userdttm4',
        'userdttm5': 'userdttm5',
        'usernum1': 'usernum1',
        'usernum2': 'usernum2',
        'usernum3': 'usernum3',
        'usernum4': 'usernum4',
        'usernum5': 'usernum5',
        'usernum6': 'usernum6',
        'usertxt1': 'usertxt1',
        'usertxt10': 'usertxt10',
        'usertxt2': 'usertxt2',
        'usertxt3': 'usertxt3',
        'usertxt4': 'usertxt4',
        'usertxt5': 'usertxt5',
        'usertxt6': 'usertxt6',
        'usertxt7': 'usertxt7',
        'usertxt8': 'usertxt8',
        'usertxt9': 'usertxt9',
        'utmgridzone': 'utmgridzone',
        'utmsource': 'utmsource',
        'utmx': 'utmx',
        'utmy': 'utmy',
        'waterdepth': 'waterdepth',
        'waterdepthref': 'waterdepthref',
        'well_aliases': 'wellAliases',
        'well_barriers': 'wellBarriers',
        'well_reviews': 'wellReviews',
        'well_status_histories': 'wellStatusHistories',
        'well_test_fluid_levels': 'wellTestFluidLevels',
        'well_test_injects': 'wellTestInjects',
        'well_test_log_prods': 'wellTestLogProds',
        'well_test_prods': 'wellTestProds',
        'well_test_rfts': 'wellTestRfts',
        'well_test_trans': 'wellTestTrans',
        'wellborenocalc': 'wellborenocalc',
        'wellbores': 'wellbores',
        'wellclass': 'wellclass',
        'wellconfig': 'wellconfig',
        'wellheads': 'wellheads',
        'wellida': 'wellida',
        'wellidb': 'wellidb',
        'wellidc': 'wellidc',
        'wellidd': 'wellidd',
        'wellide': 'wellide',
        'welllicensee': 'welllicensee',
        'welllicenseno': 'welllicenseno',
        'wellname': 'wellname',
        'welltyp1': 'welltyp1',
        'welltyp2': 'welltyp2',
        'wh_drives': 'whDrives',
        'zones': 'zones'
    }

    def __init__(self, agent=None, agreements=None, annular_fluids=None, area=None, attachments=None, attributes=None, basin=None, basincode=None, cases=None, casingruncalc=None, cements=None, com=None, comments=None, completions=None, cores=None, country=None, county=None, currentprimaryfluiddescalc=None, currentwellstatus1=None, currentwellstatus1calc=None, currentwellstatus2=None, currentwellstatus2calc=None, currentwelltyp1calc=None, currentwelltyp2calc=None, depth_annotations=None, directionstowell=None, displaceunwrapcalc=None, district=None, division=None, divisioncode=None, dttmabandon=None, dttmfirstprod=None, dttmrr=None, dttmspud=None, dttmstatuscalc=None, dttmwellclass=None, dttmwelllic=None, dttmzoneonprodfirstcalc=None, durspudtotodaycalc=None, elevation_histories=None, elvcasflange=None, elvground=None, elvlat=None, elvmudline=None, elvorigkb=None, elvtubhead=None, environmentsensitive=None, ewdist=None, ewflag=None, ext_reports=None, external_datas=None, fieldcode=None, fieldname=None, fieldoffice=None, fieldofficecode=None, fluid_analysis=None, geo_evals=None, govauthority=None, hih2s=None, hisitp=None, idrecelvhistory=None, idrecelvhistorytk=None, idrecproblemcalc=None, idrecproblemcalctk=None, idrecprodsettingcalc=None, idrecprodsettingcalctk=None, idwell=None, inspects=None, integrities=None, jobs=None, kbtocascalc=None, kbtogrdcalc=None, kbtomudcalc=None, kbtoothercalc=None, kbtotubcalc=None, lastjobcalc=None, lastjobreportcalc=None, latitude=None, latlongdatum=None, latlongsource=None, lease=None, leasecode=None, legal_statuses=None, legalsurveyloc=None, legalsurveysubtyp=None, legalsurveytyp=None, localtimezone=None, locationnote=None, locationref=None, locationsensitive=None, locationtyp=None, logs=None, longitude=None, notes=None, nsdist=None, nsflag=None, operated=None, operator=None, operator_histories=None, operatorcode=None, other_inholes=None, other_strs=None, othertocascalc=None, othertogrdcalc=None, othertomudcalc=None, othertotubcalc=None, padcode=None, padname=None, pbtdallcalc=None, perforations=None, platform=None, primaryfluiddes=None, prime_movers=None, problemflag=None, problemlast12monthcalc=None, problems=None, problemtotalcalc=None, prod_settings=None, productions=None, pumping_units=None, ref_wells=None, responsible_teams=None, risers=None, riskclass=None, rods=None, slot=None, source_dests=None, stateprov=None, stims=None, surf_control_equips=None, surfacerights=None, swabs=None, syscreatedate=None, syscreateuser=None, syslockchildren=None, syslockchildrenui=None, syslockdate=None, syslockdatemaster=None, syslockme=None, syslockmeui=None, sysmoddate=None, sysmoddatedb=None, sysmoduser=None, sysmoduserdb=None, syssecuritytyp=None, systag=None, tasks=None, tdallcalc=None, tdcalc=None, tdtvdallcalc=None, test_dynos=None, test_equips=None, test_leak_offs=None, test_sssvs=None, time_curves=None, towndist=None, townflag=None, townname=None, townstateprov=None, tubs=None, userboolean1=None, userboolean2=None, userboolean3=None, userboolean4=None, userboolean5=None, userdttm1=None, userdttm2=None, userdttm3=None, userdttm4=None, userdttm5=None, usernum1=None, usernum2=None, usernum3=None, usernum4=None, usernum5=None, usernum6=None, usertxt1=None, usertxt10=None, usertxt2=None, usertxt3=None, usertxt4=None, usertxt5=None, usertxt6=None, usertxt7=None, usertxt8=None, usertxt9=None, utmgridzone=None, utmsource=None, utmx=None, utmy=None, waterdepth=None, waterdepthref=None, well_aliases=None, well_barriers=None, well_reviews=None, well_status_histories=None, well_test_fluid_levels=None, well_test_injects=None, well_test_log_prods=None, well_test_prods=None, well_test_rfts=None, well_test_trans=None, wellborenocalc=None, wellbores=None, wellclass=None, wellconfig=None, wellheads=None, wellida=None, wellidb=None, wellidc=None, wellidd=None, wellide=None, welllicensee=None, welllicenseno=None, wellname=None, welltyp1=None, welltyp2=None, wh_drives=None, zones=None):  # noqa: E501
        """Wellheader - a model defined in Swagger"""  # noqa: E501
        self._agent = None
        self._agreements = None
        self._annular_fluids = None
        self._area = None
        self._attachments = None
        self._attributes = None
        self._basin = None
        self._basincode = None
        self._cases = None
        self._casingruncalc = None
        self._cements = None
        self._com = None
        self._comments = None
        self._completions = None
        self._cores = None
        self._country = None
        self._county = None
        self._currentprimaryfluiddescalc = None
        self._currentwellstatus1 = None
        self._currentwellstatus1calc = None
        self._currentwellstatus2 = None
        self._currentwellstatus2calc = None
        self._currentwelltyp1calc = None
        self._currentwelltyp2calc = None
        self._depth_annotations = None
        self._directionstowell = None
        self._displaceunwrapcalc = None
        self._district = None
        self._division = None
        self._divisioncode = None
        self._dttmabandon = None
        self._dttmfirstprod = None
        self._dttmrr = None
        self._dttmspud = None
        self._dttmstatuscalc = None
        self._dttmwellclass = None
        self._dttmwelllic = None
        self._dttmzoneonprodfirstcalc = None
        self._durspudtotodaycalc = None
        self._elevation_histories = None
        self._elvcasflange = None
        self._elvground = None
        self._elvlat = None
        self._elvmudline = None
        self._elvorigkb = None
        self._elvtubhead = None
        self._environmentsensitive = None
        self._ewdist = None
        self._ewflag = None
        self._ext_reports = None
        self._external_datas = None
        self._fieldcode = None
        self._fieldname = None
        self._fieldoffice = None
        self._fieldofficecode = None
        self._fluid_analysis = None
        self._geo_evals = None
        self._govauthority = None
        self._hih2s = None
        self._hisitp = None
        self._idrecelvhistory = None
        self._idrecelvhistorytk = None
        self._idrecproblemcalc = None
        self._idrecproblemcalctk = None
        self._idrecprodsettingcalc = None
        self._idrecprodsettingcalctk = None
        self._idwell = None
        self._inspects = None
        self._integrities = None
        self._jobs = None
        self._kbtocascalc = None
        self._kbtogrdcalc = None
        self._kbtomudcalc = None
        self._kbtoothercalc = None
        self._kbtotubcalc = None
        self._lastjobcalc = None
        self._lastjobreportcalc = None
        self._latitude = None
        self._latlongdatum = None
        self._latlongsource = None
        self._lease = None
        self._leasecode = None
        self._legal_statuses = None
        self._legalsurveyloc = None
        self._legalsurveysubtyp = None
        self._legalsurveytyp = None
        self._localtimezone = None
        self._locationnote = None
        self._locationref = None
        self._locationsensitive = None
        self._locationtyp = None
        self._logs = None
        self._longitude = None
        self._notes = None
        self._nsdist = None
        self._nsflag = None
        self._operated = None
        self._operator = None
        self._operator_histories = None
        self._operatorcode = None
        self._other_inholes = None
        self._other_strs = None
        self._othertocascalc = None
        self._othertogrdcalc = None
        self._othertomudcalc = None
        self._othertotubcalc = None
        self._padcode = None
        self._padname = None
        self._pbtdallcalc = None
        self._perforations = None
        self._platform = None
        self._primaryfluiddes = None
        self._prime_movers = None
        self._problemflag = None
        self._problemlast12monthcalc = None
        self._problems = None
        self._problemtotalcalc = None
        self._prod_settings = None
        self._productions = None
        self._pumping_units = None
        self._ref_wells = None
        self._responsible_teams = None
        self._risers = None
        self._riskclass = None
        self._rods = None
        self._slot = None
        self._source_dests = None
        self._stateprov = None
        self._stims = None
        self._surf_control_equips = None
        self._surfacerights = None
        self._swabs = None
        self._syscreatedate = None
        self._syscreateuser = None
        self._syslockchildren = None
        self._syslockchildrenui = None
        self._syslockdate = None
        self._syslockdatemaster = None
        self._syslockme = None
        self._syslockmeui = None
        self._sysmoddate = None
        self._sysmoddatedb = None
        self._sysmoduser = None
        self._sysmoduserdb = None
        self._syssecuritytyp = None
        self._systag = None
        self._tasks = None
        self._tdallcalc = None
        self._tdcalc = None
        self._tdtvdallcalc = None
        self._test_dynos = None
        self._test_equips = None
        self._test_leak_offs = None
        self._test_sssvs = None
        self._time_curves = None
        self._towndist = None
        self._townflag = None
        self._townname = None
        self._townstateprov = None
        self._tubs = None
        self._userboolean1 = None
        self._userboolean2 = None
        self._userboolean3 = None
        self._userboolean4 = None
        self._userboolean5 = None
        self._userdttm1 = None
        self._userdttm2 = None
        self._userdttm3 = None
        self._userdttm4 = None
        self._userdttm5 = None
        self._usernum1 = None
        self._usernum2 = None
        self._usernum3 = None
        self._usernum4 = None
        self._usernum5 = None
        self._usernum6 = None
        self._usertxt1 = None
        self._usertxt10 = None
        self._usertxt2 = None
        self._usertxt3 = None
        self._usertxt4 = None
        self._usertxt5 = None
        self._usertxt6 = None
        self._usertxt7 = None
        self._usertxt8 = None
        self._usertxt9 = None
        self._utmgridzone = None
        self._utmsource = None
        self._utmx = None
        self._utmy = None
        self._waterdepth = None
        self._waterdepthref = None
        self._well_aliases = None
        self._well_barriers = None
        self._well_reviews = None
        self._well_status_histories = None
        self._well_test_fluid_levels = None
        self._well_test_injects = None
        self._well_test_log_prods = None
        self._well_test_prods = None
        self._well_test_rfts = None
        self._well_test_trans = None
        self._wellborenocalc = None
        self._wellbores = None
        self._wellclass = None
        self._wellconfig = None
        self._wellheads = None
        self._wellida = None
        self._wellidb = None
        self._wellidc = None
        self._wellidd = None
        self._wellide = None
        self._welllicensee = None
        self._welllicenseno = None
        self._wellname = None
        self._welltyp1 = None
        self._welltyp2 = None
        self._wh_drives = None
        self._zones = None
        self.discriminator = None
        if agent is not None:
            self.agent = agent
        if agreements is not None:
            self.agreements = agreements
        if annular_fluids is not None:
            self.annular_fluids = annular_fluids
        if area is not None:
            self.area = area
        if attachments is not None:
            self.attachments = attachments
        if attributes is not None:
            self.attributes = attributes
        if basin is not None:
            self.basin = basin
        if basincode is not None:
            self.basincode = basincode
        if cases is not None:
            self.cases = cases
        if casingruncalc is not None:
            self.casingruncalc = casingruncalc
        if cements is not None:
            self.cements = cements
        if com is not None:
            self.com = com
        if comments is not None:
            self.comments = comments
        if completions is not None:
            self.completions = completions
        if cores is not None:
            self.cores = cores
        if country is not None:
            self.country = country
        if county is not None:
            self.county = county
        if currentprimaryfluiddescalc is not None:
            self.currentprimaryfluiddescalc = currentprimaryfluiddescalc
        if currentwellstatus1 is not None:
            self.currentwellstatus1 = currentwellstatus1
        if currentwellstatus1calc is not None:
            self.currentwellstatus1calc = currentwellstatus1calc
        if currentwellstatus2 is not None:
            self.currentwellstatus2 = currentwellstatus2
        if currentwellstatus2calc is not None:
            self.currentwellstatus2calc = currentwellstatus2calc
        if currentwelltyp1calc is not None:
            self.currentwelltyp1calc = currentwelltyp1calc
        if currentwelltyp2calc is not None:
            self.currentwelltyp2calc = currentwelltyp2calc
        if depth_annotations is not None:
            self.depth_annotations = depth_annotations
        if directionstowell is not None:
            self.directionstowell = directionstowell
        if displaceunwrapcalc is not None:
            self.displaceunwrapcalc = displaceunwrapcalc
        if district is not None:
            self.district = district
        if division is not None:
            self.division = division
        if divisioncode is not None:
            self.divisioncode = divisioncode
        if dttmabandon is not None:
            self.dttmabandon = dttmabandon
        if dttmfirstprod is not None:
            self.dttmfirstprod = dttmfirstprod
        if dttmrr is not None:
            self.dttmrr = dttmrr
        if dttmspud is not None:
            self.dttmspud = dttmspud
        if dttmstatuscalc is not None:
            self.dttmstatuscalc = dttmstatuscalc
        if dttmwellclass is not None:
            self.dttmwellclass = dttmwellclass
        if dttmwelllic is not None:
            self.dttmwelllic = dttmwelllic
        if dttmzoneonprodfirstcalc is not None:
            self.dttmzoneonprodfirstcalc = dttmzoneonprodfirstcalc
        if durspudtotodaycalc is not None:
            self.durspudtotodaycalc = durspudtotodaycalc
        if elevation_histories is not None:
            self.elevation_histories = elevation_histories
        if elvcasflange is not None:
            self.elvcasflange = elvcasflange
        if elvground is not None:
            self.elvground = elvground
        if elvlat is not None:
            self.elvlat = elvlat
        if elvmudline is not None:
            self.elvmudline = elvmudline
        if elvorigkb is not None:
            self.elvorigkb = elvorigkb
        if elvtubhead is not None:
            self.elvtubhead = elvtubhead
        if environmentsensitive is not None:
            self.environmentsensitive = environmentsensitive
        if ewdist is not None:
            self.ewdist = ewdist
        if ewflag is not None:
            self.ewflag = ewflag
        if ext_reports is not None:
            self.ext_reports = ext_reports
        if external_datas is not None:
            self.external_datas = external_datas
        if fieldcode is not None:
            self.fieldcode = fieldcode
        if fieldname is not None:
            self.fieldname = fieldname
        if fieldoffice is not None:
            self.fieldoffice = fieldoffice
        if fieldofficecode is not None:
            self.fieldofficecode = fieldofficecode
        if fluid_analysis is not None:
            self.fluid_analysis = fluid_analysis
        if geo_evals is not None:
            self.geo_evals = geo_evals
        if govauthority is not None:
            self.govauthority = govauthority
        if hih2s is not None:
            self.hih2s = hih2s
        if hisitp is not None:
            self.hisitp = hisitp
        if idrecelvhistory is not None:
            self.idrecelvhistory = idrecelvhistory
        if idrecelvhistorytk is not None:
            self.idrecelvhistorytk = idrecelvhistorytk
        if idrecproblemcalc is not None:
            self.idrecproblemcalc = idrecproblemcalc
        if idrecproblemcalctk is not None:
            self.idrecproblemcalctk = idrecproblemcalctk
        if idrecprodsettingcalc is not None:
            self.idrecprodsettingcalc = idrecprodsettingcalc
        if idrecprodsettingcalctk is not None:
            self.idrecprodsettingcalctk = idrecprodsettingcalctk
        if idwell is not None:
            self.idwell = idwell
        if inspects is not None:
            self.inspects = inspects
        if integrities is not None:
            self.integrities = integrities
        if jobs is not None:
            self.jobs = jobs
        if kbtocascalc is not None:
            self.kbtocascalc = kbtocascalc
        if kbtogrdcalc is not None:
            self.kbtogrdcalc = kbtogrdcalc
        if kbtomudcalc is not None:
            self.kbtomudcalc = kbtomudcalc
        if kbtoothercalc is not None:
            self.kbtoothercalc = kbtoothercalc
        if kbtotubcalc is not None:
            self.kbtotubcalc = kbtotubcalc
        if lastjobcalc is not None:
            self.lastjobcalc = lastjobcalc
        if lastjobreportcalc is not None:
            self.lastjobreportcalc = lastjobreportcalc
        if latitude is not None:
            self.latitude = latitude
        if latlongdatum is not None:
            self.latlongdatum = latlongdatum
        if latlongsource is not None:
            self.latlongsource = latlongsource
        if lease is not None:
            self.lease = lease
        if leasecode is not None:
            self.leasecode = leasecode
        if legal_statuses is not None:
            self.legal_statuses = legal_statuses
        if legalsurveyloc is not None:
            self.legalsurveyloc = legalsurveyloc
        if legalsurveysubtyp is not None:
            self.legalsurveysubtyp = legalsurveysubtyp
        if legalsurveytyp is not None:
            self.legalsurveytyp = legalsurveytyp
        if localtimezone is not None:
            self.localtimezone = localtimezone
        if locationnote is not None:
            self.locationnote = locationnote
        if locationref is not None:
            self.locationref = locationref
        if locationsensitive is not None:
            self.locationsensitive = locationsensitive
        if locationtyp is not None:
            self.locationtyp = locationtyp
        if logs is not None:
            self.logs = logs
        if longitude is not None:
            self.longitude = longitude
        if notes is not None:
            self.notes = notes
        if nsdist is not None:
            self.nsdist = nsdist
        if nsflag is not None:
            self.nsflag = nsflag
        if operated is not None:
            self.operated = operated
        if operator is not None:
            self.operator = operator
        if operator_histories is not None:
            self.operator_histories = operator_histories
        if operatorcode is not None:
            self.operatorcode = operatorcode
        if other_inholes is not None:
            self.other_inholes = other_inholes
        if other_strs is not None:
            self.other_strs = other_strs
        if othertocascalc is not None:
            self.othertocascalc = othertocascalc
        if othertogrdcalc is not None:
            self.othertogrdcalc = othertogrdcalc
        if othertomudcalc is not None:
            self.othertomudcalc = othertomudcalc
        if othertotubcalc is not None:
            self.othertotubcalc = othertotubcalc
        if padcode is not None:
            self.padcode = padcode
        if padname is not None:
            self.padname = padname
        if pbtdallcalc is not None:
            self.pbtdallcalc = pbtdallcalc
        if perforations is not None:
            self.perforations = perforations
        if platform is not None:
            self.platform = platform
        if primaryfluiddes is not None:
            self.primaryfluiddes = primaryfluiddes
        if prime_movers is not None:
            self.prime_movers = prime_movers
        if problemflag is not None:
            self.problemflag = problemflag
        if problemlast12monthcalc is not None:
            self.problemlast12monthcalc = problemlast12monthcalc
        if problems is not None:
            self.problems = problems
        if problemtotalcalc is not None:
            self.problemtotalcalc = problemtotalcalc
        if prod_settings is not None:
            self.prod_settings = prod_settings
        if productions is not None:
            self.productions = productions
        if pumping_units is not None:
            self.pumping_units = pumping_units
        if ref_wells is not None:
            self.ref_wells = ref_wells
        if responsible_teams is not None:
            self.responsible_teams = responsible_teams
        if risers is not None:
            self.risers = risers
        if riskclass is not None:
            self.riskclass = riskclass
        if rods is not None:
            self.rods = rods
        if slot is not None:
            self.slot = slot
        if source_dests is not None:
            self.source_dests = source_dests
        if stateprov is not None:
            self.stateprov = stateprov
        if stims is not None:
            self.stims = stims
        if surf_control_equips is not None:
            self.surf_control_equips = surf_control_equips
        if surfacerights is not None:
            self.surfacerights = surfacerights
        if swabs is not None:
            self.swabs = swabs
        if syscreatedate is not None:
            self.syscreatedate = syscreatedate
        if syscreateuser is not None:
            self.syscreateuser = syscreateuser
        if syslockchildren is not None:
            self.syslockchildren = syslockchildren
        if syslockchildrenui is not None:
            self.syslockchildrenui = syslockchildrenui
        if syslockdate is not None:
            self.syslockdate = syslockdate
        if syslockdatemaster is not None:
            self.syslockdatemaster = syslockdatemaster
        if syslockme is not None:
            self.syslockme = syslockme
        if syslockmeui is not None:
            self.syslockmeui = syslockmeui
        if sysmoddate is not None:
            self.sysmoddate = sysmoddate
        if sysmoddatedb is not None:
            self.sysmoddatedb = sysmoddatedb
        if sysmoduser is not None:
            self.sysmoduser = sysmoduser
        if sysmoduserdb is not None:
            self.sysmoduserdb = sysmoduserdb
        if syssecuritytyp is not None:
            self.syssecuritytyp = syssecuritytyp
        if systag is not None:
            self.systag = systag
        if tasks is not None:
            self.tasks = tasks
        if tdallcalc is not None:
            self.tdallcalc = tdallcalc
        if tdcalc is not None:
            self.tdcalc = tdcalc
        if tdtvdallcalc is not None:
            self.tdtvdallcalc = tdtvdallcalc
        if test_dynos is not None:
            self.test_dynos = test_dynos
        if test_equips is not None:
            self.test_equips = test_equips
        if test_leak_offs is not None:
            self.test_leak_offs = test_leak_offs
        if test_sssvs is not None:
            self.test_sssvs = test_sssvs
        if time_curves is not None:
            self.time_curves = time_curves
        if towndist is not None:
            self.towndist = towndist
        if townflag is not None:
            self.townflag = townflag
        if townname is not None:
            self.townname = townname
        if townstateprov is not None:
            self.townstateprov = townstateprov
        if tubs is not None:
            self.tubs = tubs
        if userboolean1 is not None:
            self.userboolean1 = userboolean1
        if userboolean2 is not None:
            self.userboolean2 = userboolean2
        if userboolean3 is not None:
            self.userboolean3 = userboolean3
        if userboolean4 is not None:
            self.userboolean4 = userboolean4
        if userboolean5 is not None:
            self.userboolean5 = userboolean5
        if userdttm1 is not None:
            self.userdttm1 = userdttm1
        if userdttm2 is not None:
            self.userdttm2 = userdttm2
        if userdttm3 is not None:
            self.userdttm3 = userdttm3
        if userdttm4 is not None:
            self.userdttm4 = userdttm4
        if userdttm5 is not None:
            self.userdttm5 = userdttm5
        if usernum1 is not None:
            self.usernum1 = usernum1
        if usernum2 is not None:
            self.usernum2 = usernum2
        if usernum3 is not None:
            self.usernum3 = usernum3
        if usernum4 is not None:
            self.usernum4 = usernum4
        if usernum5 is not None:
            self.usernum5 = usernum5
        if usernum6 is not None:
            self.usernum6 = usernum6
        if usertxt1 is not None:
            self.usertxt1 = usertxt1
        if usertxt10 is not None:
            self.usertxt10 = usertxt10
        if usertxt2 is not None:
            self.usertxt2 = usertxt2
        if usertxt3 is not None:
            self.usertxt3 = usertxt3
        if usertxt4 is not None:
            self.usertxt4 = usertxt4
        if usertxt5 is not None:
            self.usertxt5 = usertxt5
        if usertxt6 is not None:
            self.usertxt6 = usertxt6
        if usertxt7 is not None:
            self.usertxt7 = usertxt7
        if usertxt8 is not None:
            self.usertxt8 = usertxt8
        if usertxt9 is not None:
            self.usertxt9 = usertxt9
        if utmgridzone is not None:
            self.utmgridzone = utmgridzone
        if utmsource is not None:
            self.utmsource = utmsource
        if utmx is not None:
            self.utmx = utmx
        if utmy is not None:
            self.utmy = utmy
        if waterdepth is not None:
            self.waterdepth = waterdepth
        if waterdepthref is not None:
            self.waterdepthref = waterdepthref
        if well_aliases is not None:
            self.well_aliases = well_aliases
        if well_barriers is not None:
            self.well_barriers = well_barriers
        if well_reviews is not None:
            self.well_reviews = well_reviews
        if well_status_histories is not None:
            self.well_status_histories = well_status_histories
        if well_test_fluid_levels is not None:
            self.well_test_fluid_levels = well_test_fluid_levels
        if well_test_injects is not None:
            self.well_test_injects = well_test_injects
        if well_test_log_prods is not None:
            self.well_test_log_prods = well_test_log_prods
        if well_test_prods is not None:
            self.well_test_prods = well_test_prods
        if well_test_rfts is not None:
            self.well_test_rfts = well_test_rfts
        if well_test_trans is not None:
            self.well_test_trans = well_test_trans
        if wellborenocalc is not None:
            self.wellborenocalc = wellborenocalc
        if wellbores is not None:
            self.wellbores = wellbores
        if wellclass is not None:
            self.wellclass = wellclass
        if wellconfig is not None:
            self.wellconfig = wellconfig
        if wellheads is not None:
            self.wellheads = wellheads
        if wellida is not None:
            self.wellida = wellida
        if wellidb is not None:
            self.wellidb = wellidb
        if wellidc is not None:
            self.wellidc = wellidc
        if wellidd is not None:
            self.wellidd = wellidd
        if wellide is not None:
            self.wellide = wellide
        if welllicensee is not None:
            self.welllicensee = welllicensee
        if welllicenseno is not None:
            self.welllicenseno = welllicenseno
        if wellname is not None:
            self.wellname = wellname
        if welltyp1 is not None:
            self.welltyp1 = welltyp1
        if welltyp2 is not None:
            self.welltyp2 = welltyp2
        if wh_drives is not None:
            self.wh_drives = wh_drives
        if zones is not None:
            self.zones = zones

    @property
    def agent(self):
        """Gets the agent of this Wellheader.  # noqa: E501


        :return: The agent of this Wellheader.  # noqa: E501
        :rtype: str
        """
        return self._agent

    @agent.setter
    def agent(self, agent):
        """Sets the agent of this Wellheader.


        :param agent: The agent of this Wellheader.  # noqa: E501
        :type: str
        """

        self._agent = agent

    @property
    def agreements(self):
        """Gets the agreements of this Wellheader.  # noqa: E501


        :return: The agreements of this Wellheader.  # noqa: E501
        :rtype: list[Agreement]
        """
        return self._agreements

    @agreements.setter
    def agreements(self, agreements):
        """Sets the agreements of this Wellheader.


        :param agreements: The agreements of this Wellheader.  # noqa: E501
        :type: list[Agreement]
        """

        self._agreements = agreements

    @property
    def annular_fluids(self):
        """Gets the annular_fluids of this Wellheader.  # noqa: E501


        :return: The annular_fluids of this Wellheader.  # noqa: E501
        :rtype: list[AnnularFluid]
        """
        return self._annular_fluids

    @annular_fluids.setter
    def annular_fluids(self, annular_fluids):
        """Sets the annular_fluids of this Wellheader.


        :param annular_fluids: The annular_fluids of this Wellheader.  # noqa: E501
        :type: list[AnnularFluid]
        """

        self._annular_fluids = annular_fluids

    @property
    def area(self):
        """Gets the area of this Wellheader.  # noqa: E501


        :return: The area of this Wellheader.  # noqa: E501
        :rtype: str
        """
        return self._area

    @area.setter
    def area(self, area):
        """Sets the area of this Wellheader.


        :param area: The area of this Wellheader.  # noqa: E501
        :type: str
        """

        self._area = area

    @property
    def attachments(self):
        """Gets the attachments of this Wellheader.  # noqa: E501


        :return: The attachments of this Wellheader.  # noqa: E501
        :rtype: list[Attachment]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this Wellheader.


        :param attachments: The attachments of this Wellheader.  # noqa: E501
        :type: list[Attachment]
        """

        self._attachments = attachments

    @property
    def attributes(self):
        """Gets the attributes of this Wellheader.  # noqa: E501


        :return: The attributes of this Wellheader.  # noqa: E501
        :rtype: list[Attributes]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this Wellheader.


        :param attributes: The attributes of this Wellheader.  # noqa: E501
        :type: list[Attributes]
        """

        self._attributes = attributes

    @property
    def basin(self):
        """Gets the basin of this Wellheader.  # noqa: E501


        :return: The basin of this Wellheader.  # noqa: E501
        :rtype: str
        """
        return self._basin

    @basin.setter
    def basin(self, basin):
        """Sets the basin of this Wellheader.


        :param basin: The basin of this Wellheader.  # noqa: E501
        :type: str
        """

        self._basin = basin

    @property
    def basincode(self):
        """Gets the basincode of this Wellheader.  # noqa: E501


        :return: The basincode of this Wellheader.  # noqa: E501
        :rtype: str
        """
        return self._basincode

    @basincode.setter
    def basincode(self, basincode):
        """Sets the basincode of this Wellheader.


        :param basincode: The basincode of this Wellheader.  # noqa: E501
        :type: str
        """

        self._basincode = basincode

    @property
    def cases(self):
        """Gets the cases of this Wellheader.  # noqa: E501


        :return: The cases of this Wellheader.  # noqa: E501
        :rtype: list[Cas]
        """
        return self._cases

    @cases.setter
    def cases(self, cases):
        """Sets the cases of this Wellheader.


        :param cases: The cases of this Wellheader.  # noqa: E501
        :type: list[Cas]
        """

        self._cases = cases

    @property
    def casingruncalc(self):
        """Gets the casingruncalc of this Wellheader.  # noqa: E501


        :return: The casingruncalc of this Wellheader.  # noqa: E501
        :rtype: int
        """
        return self._casingruncalc

    @casingruncalc.setter
    def casingruncalc(self, casingruncalc):
        """Sets the casingruncalc of this Wellheader.


        :param casingruncalc: The casingruncalc of this Wellheader.  # noqa: E501
        :type: int
        """

        self._casingruncalc = casingruncalc

    @property
    def cements(self):
        """Gets the cements of this Wellheader.  # noqa: E501


        :return: The cements of this Wellheader.  # noqa: E501
        :rtype: list[Cement]
        """
        return self._cements

    @cements.setter
    def cements(self, cements):
        """Sets the cements of this Wellheader.


        :param cements: The cements of this Wellheader.  # noqa: E501
        :type: list[Cement]
        """

        self._cements = cements

    @property
    def com(self):
        """Gets the com of this Wellheader.  # noqa: E501


        :return: The com of this Wellheader.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this Wellheader.


        :param com: The com of this Wellheader.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def comments(self):
        """Gets the comments of this Wellheader.  # noqa: E501


        :return: The comments of this Wellheader.  # noqa: E501
        :rtype: list[Comment]
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this Wellheader.


        :param comments: The comments of this Wellheader.  # noqa: E501
        :type: list[Comment]
        """

        self._comments = comments

    @property
    def completions(self):
        """Gets the completions of this Wellheader.  # noqa: E501


        :return: The completions of this Wellheader.  # noqa: E501
        :rtype: list[Completion]
        """
        return self._completions

    @completions.setter
    def completions(self, completions):
        """Sets the completions of this Wellheader.


        :param completions: The completions of this Wellheader.  # noqa: E501
        :type: list[Completion]
        """

        self._completions = completions

    @property
    def cores(self):
        """Gets the cores of this Wellheader.  # noqa: E501


        :return: The cores of this Wellheader.  # noqa: E501
        :rtype: list[Core]
        """
        return self._cores

    @cores.setter
    def cores(self, cores):
        """Sets the cores of this Wellheader.


        :param cores: The cores of this Wellheader.  # noqa: E501
        :type: list[Core]
        """

        self._cores = cores

    @property
    def country(self):
        """Gets the country of this Wellheader.  # noqa: E501


        :return: The country of this Wellheader.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Wellheader.


        :param country: The country of this Wellheader.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def county(self):
        """Gets the county of this Wellheader.  # noqa: E501


        :return: The county of this Wellheader.  # noqa: E501
        :rtype: str
        """
        return self._county

    @county.setter
    def county(self, county):
        """Sets the county of this Wellheader.


        :param county: The county of this Wellheader.  # noqa: E501
        :type: str
        """

        self._county = county

    @property
    def currentprimaryfluiddescalc(self):
        """Gets the currentprimaryfluiddescalc of this Wellheader.  # noqa: E501


        :return: The currentprimaryfluiddescalc of this Wellheader.  # noqa: E501
        :rtype: str
        """
        return self._currentprimaryfluiddescalc

    @currentprimaryfluiddescalc.setter
    def currentprimaryfluiddescalc(self, currentprimaryfluiddescalc):
        """Sets the currentprimaryfluiddescalc of this Wellheader.


        :param currentprimaryfluiddescalc: The currentprimaryfluiddescalc of this Wellheader.  # noqa: E501
        :type: str
        """

        self._currentprimaryfluiddescalc = currentprimaryfluiddescalc

    @property
    def currentwellstatus1(self):
        """Gets the currentwellstatus1 of this Wellheader.  # noqa: E501


        :return: The currentwellstatus1 of this Wellheader.  # noqa: E501
        :rtype: str
        """
        return self._currentwellstatus1

    @currentwellstatus1.setter
    def currentwellstatus1(self, currentwellstatus1):
        """Sets the currentwellstatus1 of this Wellheader.


        :param currentwellstatus1: The currentwellstatus1 of this Wellheader.  # noqa: E501
        :type: str
        """

        self._currentwellstatus1 = currentwellstatus1

    @property
    def currentwellstatus1calc(self):
        """Gets the currentwellstatus1calc of this Wellheader.  # noqa: E501


        :return: The currentwellstatus1calc of this Wellheader.  # noqa: E501
        :rtype: str
        """
        return self._currentwellstatus1calc

    @currentwellstatus1calc.setter
    def currentwellstatus1calc(self, currentwellstatus1calc):
        """Sets the currentwellstatus1calc of this Wellheader.


        :param currentwellstatus1calc: The currentwellstatus1calc of this Wellheader.  # noqa: E501
        :type: str
        """

        self._currentwellstatus1calc = currentwellstatus1calc

    @property
    def currentwellstatus2(self):
        """Gets the currentwellstatus2 of this Wellheader.  # noqa: E501


        :return: The currentwellstatus2 of this Wellheader.  # noqa: E501
        :rtype: str
        """
        return self._currentwellstatus2

    @currentwellstatus2.setter
    def currentwellstatus2(self, currentwellstatus2):
        """Sets the currentwellstatus2 of this Wellheader.


        :param currentwellstatus2: The currentwellstatus2 of this Wellheader.  # noqa: E501
        :type: str
        """

        self._currentwellstatus2 = currentwellstatus2

    @property
    def currentwellstatus2calc(self):
        """Gets the currentwellstatus2calc of this Wellheader.  # noqa: E501


        :return: The currentwellstatus2calc of this Wellheader.  # noqa: E501
        :rtype: str
        """
        return self._currentwellstatus2calc

    @currentwellstatus2calc.setter
    def currentwellstatus2calc(self, currentwellstatus2calc):
        """Sets the currentwellstatus2calc of this Wellheader.


        :param currentwellstatus2calc: The currentwellstatus2calc of this Wellheader.  # noqa: E501
        :type: str
        """

        self._currentwellstatus2calc = currentwellstatus2calc

    @property
    def currentwelltyp1calc(self):
        """Gets the currentwelltyp1calc of this Wellheader.  # noqa: E501


        :return: The currentwelltyp1calc of this Wellheader.  # noqa: E501
        :rtype: str
        """
        return self._currentwelltyp1calc

    @currentwelltyp1calc.setter
    def currentwelltyp1calc(self, currentwelltyp1calc):
        """Sets the currentwelltyp1calc of this Wellheader.


        :param currentwelltyp1calc: The currentwelltyp1calc of this Wellheader.  # noqa: E501
        :type: str
        """

        self._currentwelltyp1calc = currentwelltyp1calc

    @property
    def currentwelltyp2calc(self):
        """Gets the currentwelltyp2calc of this Wellheader.  # noqa: E501


        :return: The currentwelltyp2calc of this Wellheader.  # noqa: E501
        :rtype: str
        """
        return self._currentwelltyp2calc

    @currentwelltyp2calc.setter
    def currentwelltyp2calc(self, currentwelltyp2calc):
        """Sets the currentwelltyp2calc of this Wellheader.


        :param currentwelltyp2calc: The currentwelltyp2calc of this Wellheader.  # noqa: E501
        :type: str
        """

        self._currentwelltyp2calc = currentwelltyp2calc

    @property
    def depth_annotations(self):
        """Gets the depth_annotations of this Wellheader.  # noqa: E501


        :return: The depth_annotations of this Wellheader.  # noqa: E501
        :rtype: list[DepthAnnotation]
        """
        return self._depth_annotations

    @depth_annotations.setter
    def depth_annotations(self, depth_annotations):
        """Sets the depth_annotations of this Wellheader.


        :param depth_annotations: The depth_annotations of this Wellheader.  # noqa: E501
        :type: list[DepthAnnotation]
        """

        self._depth_annotations = depth_annotations

    @property
    def directionstowell(self):
        """Gets the directionstowell of this Wellheader.  # noqa: E501


        :return: The directionstowell of this Wellheader.  # noqa: E501
        :rtype: str
        """
        return self._directionstowell

    @directionstowell.setter
    def directionstowell(self, directionstowell):
        """Sets the directionstowell of this Wellheader.


        :param directionstowell: The directionstowell of this Wellheader.  # noqa: E501
        :type: str
        """

        self._directionstowell = directionstowell

    @property
    def displaceunwrapcalc(self):
        """Gets the displaceunwrapcalc of this Wellheader.  # noqa: E501


        :return: The displaceunwrapcalc of this Wellheader.  # noqa: E501
        :rtype: OneOfWellheaderDisplaceunwrapcalc
        """
        return self._displaceunwrapcalc

    @displaceunwrapcalc.setter
    def displaceunwrapcalc(self, displaceunwrapcalc):
        """Sets the displaceunwrapcalc of this Wellheader.


        :param displaceunwrapcalc: The displaceunwrapcalc of this Wellheader.  # noqa: E501
        :type: OneOfWellheaderDisplaceunwrapcalc
        """

        self._displaceunwrapcalc = displaceunwrapcalc

    @property
    def district(self):
        """Gets the district of this Wellheader.  # noqa: E501


        :return: The district of this Wellheader.  # noqa: E501
        :rtype: str
        """
        return self._district

    @district.setter
    def district(self, district):
        """Sets the district of this Wellheader.


        :param district: The district of this Wellheader.  # noqa: E501
        :type: str
        """

        self._district = district

    @property
    def division(self):
        """Gets the division of this Wellheader.  # noqa: E501


        :return: The division of this Wellheader.  # noqa: E501
        :rtype: str
        """
        return self._division

    @division.setter
    def division(self, division):
        """Sets the division of this Wellheader.


        :param division: The division of this Wellheader.  # noqa: E501
        :type: str
        """

        self._division = division

    @property
    def divisioncode(self):
        """Gets the divisioncode of this Wellheader.  # noqa: E501


        :return: The divisioncode of this Wellheader.  # noqa: E501
        :rtype: str
        """
        return self._divisioncode

    @divisioncode.setter
    def divisioncode(self, divisioncode):
        """Sets the divisioncode of this Wellheader.


        :param divisioncode: The divisioncode of this Wellheader.  # noqa: E501
        :type: str
        """

        self._divisioncode = divisioncode

    @property
    def dttmabandon(self):
        """Gets the dttmabandon of this Wellheader.  # noqa: E501


        :return: The dttmabandon of this Wellheader.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmabandon

    @dttmabandon.setter
    def dttmabandon(self, dttmabandon):
        """Sets the dttmabandon of this Wellheader.


        :param dttmabandon: The dttmabandon of this Wellheader.  # noqa: E501
        :type: datetime
        """

        self._dttmabandon = dttmabandon

    @property
    def dttmfirstprod(self):
        """Gets the dttmfirstprod of this Wellheader.  # noqa: E501


        :return: The dttmfirstprod of this Wellheader.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmfirstprod

    @dttmfirstprod.setter
    def dttmfirstprod(self, dttmfirstprod):
        """Sets the dttmfirstprod of this Wellheader.


        :param dttmfirstprod: The dttmfirstprod of this Wellheader.  # noqa: E501
        :type: datetime
        """

        self._dttmfirstprod = dttmfirstprod

    @property
    def dttmrr(self):
        """Gets the dttmrr of this Wellheader.  # noqa: E501


        :return: The dttmrr of this Wellheader.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmrr

    @dttmrr.setter
    def dttmrr(self, dttmrr):
        """Sets the dttmrr of this Wellheader.


        :param dttmrr: The dttmrr of this Wellheader.  # noqa: E501
        :type: datetime
        """

        self._dttmrr = dttmrr

    @property
    def dttmspud(self):
        """Gets the dttmspud of this Wellheader.  # noqa: E501


        :return: The dttmspud of this Wellheader.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmspud

    @dttmspud.setter
    def dttmspud(self, dttmspud):
        """Sets the dttmspud of this Wellheader.


        :param dttmspud: The dttmspud of this Wellheader.  # noqa: E501
        :type: datetime
        """

        self._dttmspud = dttmspud

    @property
    def dttmstatuscalc(self):
        """Gets the dttmstatuscalc of this Wellheader.  # noqa: E501


        :return: The dttmstatuscalc of this Wellheader.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmstatuscalc

    @dttmstatuscalc.setter
    def dttmstatuscalc(self, dttmstatuscalc):
        """Sets the dttmstatuscalc of this Wellheader.


        :param dttmstatuscalc: The dttmstatuscalc of this Wellheader.  # noqa: E501
        :type: datetime
        """

        self._dttmstatuscalc = dttmstatuscalc

    @property
    def dttmwellclass(self):
        """Gets the dttmwellclass of this Wellheader.  # noqa: E501


        :return: The dttmwellclass of this Wellheader.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmwellclass

    @dttmwellclass.setter
    def dttmwellclass(self, dttmwellclass):
        """Sets the dttmwellclass of this Wellheader.


        :param dttmwellclass: The dttmwellclass of this Wellheader.  # noqa: E501
        :type: datetime
        """

        self._dttmwellclass = dttmwellclass

    @property
    def dttmwelllic(self):
        """Gets the dttmwelllic of this Wellheader.  # noqa: E501


        :return: The dttmwelllic of this Wellheader.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmwelllic

    @dttmwelllic.setter
    def dttmwelllic(self, dttmwelllic):
        """Sets the dttmwelllic of this Wellheader.


        :param dttmwelllic: The dttmwelllic of this Wellheader.  # noqa: E501
        :type: datetime
        """

        self._dttmwelllic = dttmwelllic

    @property
    def dttmzoneonprodfirstcalc(self):
        """Gets the dttmzoneonprodfirstcalc of this Wellheader.  # noqa: E501


        :return: The dttmzoneonprodfirstcalc of this Wellheader.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmzoneonprodfirstcalc

    @dttmzoneonprodfirstcalc.setter
    def dttmzoneonprodfirstcalc(self, dttmzoneonprodfirstcalc):
        """Sets the dttmzoneonprodfirstcalc of this Wellheader.


        :param dttmzoneonprodfirstcalc: The dttmzoneonprodfirstcalc of this Wellheader.  # noqa: E501
        :type: datetime
        """

        self._dttmzoneonprodfirstcalc = dttmzoneonprodfirstcalc

    @property
    def durspudtotodaycalc(self):
        """Gets the durspudtotodaycalc of this Wellheader.  # noqa: E501


        :return: The durspudtotodaycalc of this Wellheader.  # noqa: E501
        :rtype: OneOfWellheaderDurspudtotodaycalc
        """
        return self._durspudtotodaycalc

    @durspudtotodaycalc.setter
    def durspudtotodaycalc(self, durspudtotodaycalc):
        """Sets the durspudtotodaycalc of this Wellheader.


        :param durspudtotodaycalc: The durspudtotodaycalc of this Wellheader.  # noqa: E501
        :type: OneOfWellheaderDurspudtotodaycalc
        """

        self._durspudtotodaycalc = durspudtotodaycalc

    @property
    def elevation_histories(self):
        """Gets the elevation_histories of this Wellheader.  # noqa: E501


        :return: The elevation_histories of this Wellheader.  # noqa: E501
        :rtype: list[ElevationHistory]
        """
        return self._elevation_histories

    @elevation_histories.setter
    def elevation_histories(self, elevation_histories):
        """Sets the elevation_histories of this Wellheader.


        :param elevation_histories: The elevation_histories of this Wellheader.  # noqa: E501
        :type: list[ElevationHistory]
        """

        self._elevation_histories = elevation_histories

    @property
    def elvcasflange(self):
        """Gets the elvcasflange of this Wellheader.  # noqa: E501


        :return: The elvcasflange of this Wellheader.  # noqa: E501
        :rtype: OneOfWellheaderElvcasflange
        """
        return self._elvcasflange

    @elvcasflange.setter
    def elvcasflange(self, elvcasflange):
        """Sets the elvcasflange of this Wellheader.


        :param elvcasflange: The elvcasflange of this Wellheader.  # noqa: E501
        :type: OneOfWellheaderElvcasflange
        """

        self._elvcasflange = elvcasflange

    @property
    def elvground(self):
        """Gets the elvground of this Wellheader.  # noqa: E501


        :return: The elvground of this Wellheader.  # noqa: E501
        :rtype: OneOfWellheaderElvground
        """
        return self._elvground

    @elvground.setter
    def elvground(self, elvground):
        """Sets the elvground of this Wellheader.


        :param elvground: The elvground of this Wellheader.  # noqa: E501
        :type: OneOfWellheaderElvground
        """

        self._elvground = elvground

    @property
    def elvlat(self):
        """Gets the elvlat of this Wellheader.  # noqa: E501


        :return: The elvlat of this Wellheader.  # noqa: E501
        :rtype: OneOfWellheaderElvlat
        """
        return self._elvlat

    @elvlat.setter
    def elvlat(self, elvlat):
        """Sets the elvlat of this Wellheader.


        :param elvlat: The elvlat of this Wellheader.  # noqa: E501
        :type: OneOfWellheaderElvlat
        """

        self._elvlat = elvlat

    @property
    def elvmudline(self):
        """Gets the elvmudline of this Wellheader.  # noqa: E501


        :return: The elvmudline of this Wellheader.  # noqa: E501
        :rtype: OneOfWellheaderElvmudline
        """
        return self._elvmudline

    @elvmudline.setter
    def elvmudline(self, elvmudline):
        """Sets the elvmudline of this Wellheader.


        :param elvmudline: The elvmudline of this Wellheader.  # noqa: E501
        :type: OneOfWellheaderElvmudline
        """

        self._elvmudline = elvmudline

    @property
    def elvorigkb(self):
        """Gets the elvorigkb of this Wellheader.  # noqa: E501


        :return: The elvorigkb of this Wellheader.  # noqa: E501
        :rtype: OneOfWellheaderElvorigkb
        """
        return self._elvorigkb

    @elvorigkb.setter
    def elvorigkb(self, elvorigkb):
        """Sets the elvorigkb of this Wellheader.


        :param elvorigkb: The elvorigkb of this Wellheader.  # noqa: E501
        :type: OneOfWellheaderElvorigkb
        """

        self._elvorigkb = elvorigkb

    @property
    def elvtubhead(self):
        """Gets the elvtubhead of this Wellheader.  # noqa: E501


        :return: The elvtubhead of this Wellheader.  # noqa: E501
        :rtype: OneOfWellheaderElvtubhead
        """
        return self._elvtubhead

    @elvtubhead.setter
    def elvtubhead(self, elvtubhead):
        """Sets the elvtubhead of this Wellheader.


        :param elvtubhead: The elvtubhead of this Wellheader.  # noqa: E501
        :type: OneOfWellheaderElvtubhead
        """

        self._elvtubhead = elvtubhead

    @property
    def environmentsensitive(self):
        """Gets the environmentsensitive of this Wellheader.  # noqa: E501


        :return: The environmentsensitive of this Wellheader.  # noqa: E501
        :rtype: int
        """
        return self._environmentsensitive

    @environmentsensitive.setter
    def environmentsensitive(self, environmentsensitive):
        """Sets the environmentsensitive of this Wellheader.


        :param environmentsensitive: The environmentsensitive of this Wellheader.  # noqa: E501
        :type: int
        """

        self._environmentsensitive = environmentsensitive

    @property
    def ewdist(self):
        """Gets the ewdist of this Wellheader.  # noqa: E501


        :return: The ewdist of this Wellheader.  # noqa: E501
        :rtype: OneOfWellheaderEwdist
        """
        return self._ewdist

    @ewdist.setter
    def ewdist(self, ewdist):
        """Sets the ewdist of this Wellheader.


        :param ewdist: The ewdist of this Wellheader.  # noqa: E501
        :type: OneOfWellheaderEwdist
        """

        self._ewdist = ewdist

    @property
    def ewflag(self):
        """Gets the ewflag of this Wellheader.  # noqa: E501


        :return: The ewflag of this Wellheader.  # noqa: E501
        :rtype: str
        """
        return self._ewflag

    @ewflag.setter
    def ewflag(self, ewflag):
        """Sets the ewflag of this Wellheader.


        :param ewflag: The ewflag of this Wellheader.  # noqa: E501
        :type: str
        """

        self._ewflag = ewflag

    @property
    def ext_reports(self):
        """Gets the ext_reports of this Wellheader.  # noqa: E501


        :return: The ext_reports of this Wellheader.  # noqa: E501
        :rtype: list[ExtReport]
        """
        return self._ext_reports

    @ext_reports.setter
    def ext_reports(self, ext_reports):
        """Sets the ext_reports of this Wellheader.


        :param ext_reports: The ext_reports of this Wellheader.  # noqa: E501
        :type: list[ExtReport]
        """

        self._ext_reports = ext_reports

    @property
    def external_datas(self):
        """Gets the external_datas of this Wellheader.  # noqa: E501


        :return: The external_datas of this Wellheader.  # noqa: E501
        :rtype: list[ExternalData]
        """
        return self._external_datas

    @external_datas.setter
    def external_datas(self, external_datas):
        """Sets the external_datas of this Wellheader.


        :param external_datas: The external_datas of this Wellheader.  # noqa: E501
        :type: list[ExternalData]
        """

        self._external_datas = external_datas

    @property
    def fieldcode(self):
        """Gets the fieldcode of this Wellheader.  # noqa: E501


        :return: The fieldcode of this Wellheader.  # noqa: E501
        :rtype: str
        """
        return self._fieldcode

    @fieldcode.setter
    def fieldcode(self, fieldcode):
        """Sets the fieldcode of this Wellheader.


        :param fieldcode: The fieldcode of this Wellheader.  # noqa: E501
        :type: str
        """

        self._fieldcode = fieldcode

    @property
    def fieldname(self):
        """Gets the fieldname of this Wellheader.  # noqa: E501


        :return: The fieldname of this Wellheader.  # noqa: E501
        :rtype: str
        """
        return self._fieldname

    @fieldname.setter
    def fieldname(self, fieldname):
        """Sets the fieldname of this Wellheader.


        :param fieldname: The fieldname of this Wellheader.  # noqa: E501
        :type: str
        """

        self._fieldname = fieldname

    @property
    def fieldoffice(self):
        """Gets the fieldoffice of this Wellheader.  # noqa: E501


        :return: The fieldoffice of this Wellheader.  # noqa: E501
        :rtype: str
        """
        return self._fieldoffice

    @fieldoffice.setter
    def fieldoffice(self, fieldoffice):
        """Sets the fieldoffice of this Wellheader.


        :param fieldoffice: The fieldoffice of this Wellheader.  # noqa: E501
        :type: str
        """

        self._fieldoffice = fieldoffice

    @property
    def fieldofficecode(self):
        """Gets the fieldofficecode of this Wellheader.  # noqa: E501


        :return: The fieldofficecode of this Wellheader.  # noqa: E501
        :rtype: str
        """
        return self._fieldofficecode

    @fieldofficecode.setter
    def fieldofficecode(self, fieldofficecode):
        """Sets the fieldofficecode of this Wellheader.


        :param fieldofficecode: The fieldofficecode of this Wellheader.  # noqa: E501
        :type: str
        """

        self._fieldofficecode = fieldofficecode

    @property
    def fluid_analysis(self):
        """Gets the fluid_analysis of this Wellheader.  # noqa: E501


        :return: The fluid_analysis of this Wellheader.  # noqa: E501
        :rtype: list[FluidAnalysis]
        """
        return self._fluid_analysis

    @fluid_analysis.setter
    def fluid_analysis(self, fluid_analysis):
        """Sets the fluid_analysis of this Wellheader.


        :param fluid_analysis: The fluid_analysis of this Wellheader.  # noqa: E501
        :type: list[FluidAnalysis]
        """

        self._fluid_analysis = fluid_analysis

    @property
    def geo_evals(self):
        """Gets the geo_evals of this Wellheader.  # noqa: E501


        :return: The geo_evals of this Wellheader.  # noqa: E501
        :rtype: list[GeoEval]
        """
        return self._geo_evals

    @geo_evals.setter
    def geo_evals(self, geo_evals):
        """Sets the geo_evals of this Wellheader.


        :param geo_evals: The geo_evals of this Wellheader.  # noqa: E501
        :type: list[GeoEval]
        """

        self._geo_evals = geo_evals

    @property
    def govauthority(self):
        """Gets the govauthority of this Wellheader.  # noqa: E501


        :return: The govauthority of this Wellheader.  # noqa: E501
        :rtype: str
        """
        return self._govauthority

    @govauthority.setter
    def govauthority(self, govauthority):
        """Sets the govauthority of this Wellheader.


        :param govauthority: The govauthority of this Wellheader.  # noqa: E501
        :type: str
        """

        self._govauthority = govauthority

    @property
    def hih2s(self):
        """Gets the hih2s of this Wellheader.  # noqa: E501


        :return: The hih2s of this Wellheader.  # noqa: E501
        :rtype: int
        """
        return self._hih2s

    @hih2s.setter
    def hih2s(self, hih2s):
        """Sets the hih2s of this Wellheader.


        :param hih2s: The hih2s of this Wellheader.  # noqa: E501
        :type: int
        """

        self._hih2s = hih2s

    @property
    def hisitp(self):
        """Gets the hisitp of this Wellheader.  # noqa: E501


        :return: The hisitp of this Wellheader.  # noqa: E501
        :rtype: int
        """
        return self._hisitp

    @hisitp.setter
    def hisitp(self, hisitp):
        """Sets the hisitp of this Wellheader.


        :param hisitp: The hisitp of this Wellheader.  # noqa: E501
        :type: int
        """

        self._hisitp = hisitp

    @property
    def idrecelvhistory(self):
        """Gets the idrecelvhistory of this Wellheader.  # noqa: E501


        :return: The idrecelvhistory of this Wellheader.  # noqa: E501
        :rtype: str
        """
        return self._idrecelvhistory

    @idrecelvhistory.setter
    def idrecelvhistory(self, idrecelvhistory):
        """Sets the idrecelvhistory of this Wellheader.


        :param idrecelvhistory: The idrecelvhistory of this Wellheader.  # noqa: E501
        :type: str
        """

        self._idrecelvhistory = idrecelvhistory

    @property
    def idrecelvhistorytk(self):
        """Gets the idrecelvhistorytk of this Wellheader.  # noqa: E501


        :return: The idrecelvhistorytk of this Wellheader.  # noqa: E501
        :rtype: str
        """
        return self._idrecelvhistorytk

    @idrecelvhistorytk.setter
    def idrecelvhistorytk(self, idrecelvhistorytk):
        """Sets the idrecelvhistorytk of this Wellheader.


        :param idrecelvhistorytk: The idrecelvhistorytk of this Wellheader.  # noqa: E501
        :type: str
        """

        self._idrecelvhistorytk = idrecelvhistorytk

    @property
    def idrecproblemcalc(self):
        """Gets the idrecproblemcalc of this Wellheader.  # noqa: E501


        :return: The idrecproblemcalc of this Wellheader.  # noqa: E501
        :rtype: str
        """
        return self._idrecproblemcalc

    @idrecproblemcalc.setter
    def idrecproblemcalc(self, idrecproblemcalc):
        """Sets the idrecproblemcalc of this Wellheader.


        :param idrecproblemcalc: The idrecproblemcalc of this Wellheader.  # noqa: E501
        :type: str
        """

        self._idrecproblemcalc = idrecproblemcalc

    @property
    def idrecproblemcalctk(self):
        """Gets the idrecproblemcalctk of this Wellheader.  # noqa: E501


        :return: The idrecproblemcalctk of this Wellheader.  # noqa: E501
        :rtype: str
        """
        return self._idrecproblemcalctk

    @idrecproblemcalctk.setter
    def idrecproblemcalctk(self, idrecproblemcalctk):
        """Sets the idrecproblemcalctk of this Wellheader.


        :param idrecproblemcalctk: The idrecproblemcalctk of this Wellheader.  # noqa: E501
        :type: str
        """

        self._idrecproblemcalctk = idrecproblemcalctk

    @property
    def idrecprodsettingcalc(self):
        """Gets the idrecprodsettingcalc of this Wellheader.  # noqa: E501


        :return: The idrecprodsettingcalc of this Wellheader.  # noqa: E501
        :rtype: str
        """
        return self._idrecprodsettingcalc

    @idrecprodsettingcalc.setter
    def idrecprodsettingcalc(self, idrecprodsettingcalc):
        """Sets the idrecprodsettingcalc of this Wellheader.


        :param idrecprodsettingcalc: The idrecprodsettingcalc of this Wellheader.  # noqa: E501
        :type: str
        """

        self._idrecprodsettingcalc = idrecprodsettingcalc

    @property
    def idrecprodsettingcalctk(self):
        """Gets the idrecprodsettingcalctk of this Wellheader.  # noqa: E501


        :return: The idrecprodsettingcalctk of this Wellheader.  # noqa: E501
        :rtype: str
        """
        return self._idrecprodsettingcalctk

    @idrecprodsettingcalctk.setter
    def idrecprodsettingcalctk(self, idrecprodsettingcalctk):
        """Sets the idrecprodsettingcalctk of this Wellheader.


        :param idrecprodsettingcalctk: The idrecprodsettingcalctk of this Wellheader.  # noqa: E501
        :type: str
        """

        self._idrecprodsettingcalctk = idrecprodsettingcalctk

    @property
    def idwell(self):
        """Gets the idwell of this Wellheader.  # noqa: E501


        :return: The idwell of this Wellheader.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this Wellheader.


        :param idwell: The idwell of this Wellheader.  # noqa: E501
        :type: str
        """

        self._idwell = idwell

    @property
    def inspects(self):
        """Gets the inspects of this Wellheader.  # noqa: E501


        :return: The inspects of this Wellheader.  # noqa: E501
        :rtype: list[Inspect]
        """
        return self._inspects

    @inspects.setter
    def inspects(self, inspects):
        """Sets the inspects of this Wellheader.


        :param inspects: The inspects of this Wellheader.  # noqa: E501
        :type: list[Inspect]
        """

        self._inspects = inspects

    @property
    def integrities(self):
        """Gets the integrities of this Wellheader.  # noqa: E501


        :return: The integrities of this Wellheader.  # noqa: E501
        :rtype: list[Integrity]
        """
        return self._integrities

    @integrities.setter
    def integrities(self, integrities):
        """Sets the integrities of this Wellheader.


        :param integrities: The integrities of this Wellheader.  # noqa: E501
        :type: list[Integrity]
        """

        self._integrities = integrities

    @property
    def jobs(self):
        """Gets the jobs of this Wellheader.  # noqa: E501


        :return: The jobs of this Wellheader.  # noqa: E501
        :rtype: list[Job]
        """
        return self._jobs

    @jobs.setter
    def jobs(self, jobs):
        """Sets the jobs of this Wellheader.


        :param jobs: The jobs of this Wellheader.  # noqa: E501
        :type: list[Job]
        """

        self._jobs = jobs

    @property
    def kbtocascalc(self):
        """Gets the kbtocascalc of this Wellheader.  # noqa: E501


        :return: The kbtocascalc of this Wellheader.  # noqa: E501
        :rtype: OneOfWellheaderKbtocascalc
        """
        return self._kbtocascalc

    @kbtocascalc.setter
    def kbtocascalc(self, kbtocascalc):
        """Sets the kbtocascalc of this Wellheader.


        :param kbtocascalc: The kbtocascalc of this Wellheader.  # noqa: E501
        :type: OneOfWellheaderKbtocascalc
        """

        self._kbtocascalc = kbtocascalc

    @property
    def kbtogrdcalc(self):
        """Gets the kbtogrdcalc of this Wellheader.  # noqa: E501


        :return: The kbtogrdcalc of this Wellheader.  # noqa: E501
        :rtype: OneOfWellheaderKbtogrdcalc
        """
        return self._kbtogrdcalc

    @kbtogrdcalc.setter
    def kbtogrdcalc(self, kbtogrdcalc):
        """Sets the kbtogrdcalc of this Wellheader.


        :param kbtogrdcalc: The kbtogrdcalc of this Wellheader.  # noqa: E501
        :type: OneOfWellheaderKbtogrdcalc
        """

        self._kbtogrdcalc = kbtogrdcalc

    @property
    def kbtomudcalc(self):
        """Gets the kbtomudcalc of this Wellheader.  # noqa: E501


        :return: The kbtomudcalc of this Wellheader.  # noqa: E501
        :rtype: OneOfWellheaderKbtomudcalc
        """
        return self._kbtomudcalc

    @kbtomudcalc.setter
    def kbtomudcalc(self, kbtomudcalc):
        """Sets the kbtomudcalc of this Wellheader.


        :param kbtomudcalc: The kbtomudcalc of this Wellheader.  # noqa: E501
        :type: OneOfWellheaderKbtomudcalc
        """

        self._kbtomudcalc = kbtomudcalc

    @property
    def kbtoothercalc(self):
        """Gets the kbtoothercalc of this Wellheader.  # noqa: E501


        :return: The kbtoothercalc of this Wellheader.  # noqa: E501
        :rtype: OneOfWellheaderKbtoothercalc
        """
        return self._kbtoothercalc

    @kbtoothercalc.setter
    def kbtoothercalc(self, kbtoothercalc):
        """Sets the kbtoothercalc of this Wellheader.


        :param kbtoothercalc: The kbtoothercalc of this Wellheader.  # noqa: E501
        :type: OneOfWellheaderKbtoothercalc
        """

        self._kbtoothercalc = kbtoothercalc

    @property
    def kbtotubcalc(self):
        """Gets the kbtotubcalc of this Wellheader.  # noqa: E501


        :return: The kbtotubcalc of this Wellheader.  # noqa: E501
        :rtype: OneOfWellheaderKbtotubcalc
        """
        return self._kbtotubcalc

    @kbtotubcalc.setter
    def kbtotubcalc(self, kbtotubcalc):
        """Sets the kbtotubcalc of this Wellheader.


        :param kbtotubcalc: The kbtotubcalc of this Wellheader.  # noqa: E501
        :type: OneOfWellheaderKbtotubcalc
        """

        self._kbtotubcalc = kbtotubcalc

    @property
    def lastjobcalc(self):
        """Gets the lastjobcalc of this Wellheader.  # noqa: E501


        :return: The lastjobcalc of this Wellheader.  # noqa: E501
        :rtype: str
        """
        return self._lastjobcalc

    @lastjobcalc.setter
    def lastjobcalc(self, lastjobcalc):
        """Sets the lastjobcalc of this Wellheader.


        :param lastjobcalc: The lastjobcalc of this Wellheader.  # noqa: E501
        :type: str
        """

        self._lastjobcalc = lastjobcalc

    @property
    def lastjobreportcalc(self):
        """Gets the lastjobreportcalc of this Wellheader.  # noqa: E501


        :return: The lastjobreportcalc of this Wellheader.  # noqa: E501
        :rtype: str
        """
        return self._lastjobreportcalc

    @lastjobreportcalc.setter
    def lastjobreportcalc(self, lastjobreportcalc):
        """Sets the lastjobreportcalc of this Wellheader.


        :param lastjobreportcalc: The lastjobreportcalc of this Wellheader.  # noqa: E501
        :type: str
        """

        self._lastjobreportcalc = lastjobreportcalc

    @property
    def latitude(self):
        """Gets the latitude of this Wellheader.  # noqa: E501


        :return: The latitude of this Wellheader.  # noqa: E501
        :rtype: OneOfWellheaderLatitude
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this Wellheader.


        :param latitude: The latitude of this Wellheader.  # noqa: E501
        :type: OneOfWellheaderLatitude
        """

        self._latitude = latitude

    @property
    def latlongdatum(self):
        """Gets the latlongdatum of this Wellheader.  # noqa: E501


        :return: The latlongdatum of this Wellheader.  # noqa: E501
        :rtype: str
        """
        return self._latlongdatum

    @latlongdatum.setter
    def latlongdatum(self, latlongdatum):
        """Sets the latlongdatum of this Wellheader.


        :param latlongdatum: The latlongdatum of this Wellheader.  # noqa: E501
        :type: str
        """

        self._latlongdatum = latlongdatum

    @property
    def latlongsource(self):
        """Gets the latlongsource of this Wellheader.  # noqa: E501


        :return: The latlongsource of this Wellheader.  # noqa: E501
        :rtype: str
        """
        return self._latlongsource

    @latlongsource.setter
    def latlongsource(self, latlongsource):
        """Sets the latlongsource of this Wellheader.


        :param latlongsource: The latlongsource of this Wellheader.  # noqa: E501
        :type: str
        """

        self._latlongsource = latlongsource

    @property
    def lease(self):
        """Gets the lease of this Wellheader.  # noqa: E501


        :return: The lease of this Wellheader.  # noqa: E501
        :rtype: str
        """
        return self._lease

    @lease.setter
    def lease(self, lease):
        """Sets the lease of this Wellheader.


        :param lease: The lease of this Wellheader.  # noqa: E501
        :type: str
        """

        self._lease = lease

    @property
    def leasecode(self):
        """Gets the leasecode of this Wellheader.  # noqa: E501


        :return: The leasecode of this Wellheader.  # noqa: E501
        :rtype: str
        """
        return self._leasecode

    @leasecode.setter
    def leasecode(self, leasecode):
        """Sets the leasecode of this Wellheader.


        :param leasecode: The leasecode of this Wellheader.  # noqa: E501
        :type: str
        """

        self._leasecode = leasecode

    @property
    def legal_statuses(self):
        """Gets the legal_statuses of this Wellheader.  # noqa: E501


        :return: The legal_statuses of this Wellheader.  # noqa: E501
        :rtype: list[LegalStatus]
        """
        return self._legal_statuses

    @legal_statuses.setter
    def legal_statuses(self, legal_statuses):
        """Sets the legal_statuses of this Wellheader.


        :param legal_statuses: The legal_statuses of this Wellheader.  # noqa: E501
        :type: list[LegalStatus]
        """

        self._legal_statuses = legal_statuses

    @property
    def legalsurveyloc(self):
        """Gets the legalsurveyloc of this Wellheader.  # noqa: E501


        :return: The legalsurveyloc of this Wellheader.  # noqa: E501
        :rtype: str
        """
        return self._legalsurveyloc

    @legalsurveyloc.setter
    def legalsurveyloc(self, legalsurveyloc):
        """Sets the legalsurveyloc of this Wellheader.


        :param legalsurveyloc: The legalsurveyloc of this Wellheader.  # noqa: E501
        :type: str
        """

        self._legalsurveyloc = legalsurveyloc

    @property
    def legalsurveysubtyp(self):
        """Gets the legalsurveysubtyp of this Wellheader.  # noqa: E501


        :return: The legalsurveysubtyp of this Wellheader.  # noqa: E501
        :rtype: str
        """
        return self._legalsurveysubtyp

    @legalsurveysubtyp.setter
    def legalsurveysubtyp(self, legalsurveysubtyp):
        """Sets the legalsurveysubtyp of this Wellheader.


        :param legalsurveysubtyp: The legalsurveysubtyp of this Wellheader.  # noqa: E501
        :type: str
        """

        self._legalsurveysubtyp = legalsurveysubtyp

    @property
    def legalsurveytyp(self):
        """Gets the legalsurveytyp of this Wellheader.  # noqa: E501


        :return: The legalsurveytyp of this Wellheader.  # noqa: E501
        :rtype: str
        """
        return self._legalsurveytyp

    @legalsurveytyp.setter
    def legalsurveytyp(self, legalsurveytyp):
        """Sets the legalsurveytyp of this Wellheader.


        :param legalsurveytyp: The legalsurveytyp of this Wellheader.  # noqa: E501
        :type: str
        """

        self._legalsurveytyp = legalsurveytyp

    @property
    def localtimezone(self):
        """Gets the localtimezone of this Wellheader.  # noqa: E501


        :return: The localtimezone of this Wellheader.  # noqa: E501
        :rtype: OneOfWellheaderLocaltimezone
        """
        return self._localtimezone

    @localtimezone.setter
    def localtimezone(self, localtimezone):
        """Sets the localtimezone of this Wellheader.


        :param localtimezone: The localtimezone of this Wellheader.  # noqa: E501
        :type: OneOfWellheaderLocaltimezone
        """

        self._localtimezone = localtimezone

    @property
    def locationnote(self):
        """Gets the locationnote of this Wellheader.  # noqa: E501


        :return: The locationnote of this Wellheader.  # noqa: E501
        :rtype: str
        """
        return self._locationnote

    @locationnote.setter
    def locationnote(self, locationnote):
        """Sets the locationnote of this Wellheader.


        :param locationnote: The locationnote of this Wellheader.  # noqa: E501
        :type: str
        """

        self._locationnote = locationnote

    @property
    def locationref(self):
        """Gets the locationref of this Wellheader.  # noqa: E501


        :return: The locationref of this Wellheader.  # noqa: E501
        :rtype: str
        """
        return self._locationref

    @locationref.setter
    def locationref(self, locationref):
        """Sets the locationref of this Wellheader.


        :param locationref: The locationref of this Wellheader.  # noqa: E501
        :type: str
        """

        self._locationref = locationref

    @property
    def locationsensitive(self):
        """Gets the locationsensitive of this Wellheader.  # noqa: E501


        :return: The locationsensitive of this Wellheader.  # noqa: E501
        :rtype: int
        """
        return self._locationsensitive

    @locationsensitive.setter
    def locationsensitive(self, locationsensitive):
        """Sets the locationsensitive of this Wellheader.


        :param locationsensitive: The locationsensitive of this Wellheader.  # noqa: E501
        :type: int
        """

        self._locationsensitive = locationsensitive

    @property
    def locationtyp(self):
        """Gets the locationtyp of this Wellheader.  # noqa: E501


        :return: The locationtyp of this Wellheader.  # noqa: E501
        :rtype: str
        """
        return self._locationtyp

    @locationtyp.setter
    def locationtyp(self, locationtyp):
        """Sets the locationtyp of this Wellheader.


        :param locationtyp: The locationtyp of this Wellheader.  # noqa: E501
        :type: str
        """

        self._locationtyp = locationtyp

    @property
    def logs(self):
        """Gets the logs of this Wellheader.  # noqa: E501


        :return: The logs of this Wellheader.  # noqa: E501
        :rtype: list[Log]
        """
        return self._logs

    @logs.setter
    def logs(self, logs):
        """Sets the logs of this Wellheader.


        :param logs: The logs of this Wellheader.  # noqa: E501
        :type: list[Log]
        """

        self._logs = logs

    @property
    def longitude(self):
        """Gets the longitude of this Wellheader.  # noqa: E501


        :return: The longitude of this Wellheader.  # noqa: E501
        :rtype: OneOfWellheaderLongitude
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this Wellheader.


        :param longitude: The longitude of this Wellheader.  # noqa: E501
        :type: OneOfWellheaderLongitude
        """

        self._longitude = longitude

    @property
    def notes(self):
        """Gets the notes of this Wellheader.  # noqa: E501


        :return: The notes of this Wellheader.  # noqa: E501
        :rtype: list[Note]
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this Wellheader.


        :param notes: The notes of this Wellheader.  # noqa: E501
        :type: list[Note]
        """

        self._notes = notes

    @property
    def nsdist(self):
        """Gets the nsdist of this Wellheader.  # noqa: E501


        :return: The nsdist of this Wellheader.  # noqa: E501
        :rtype: OneOfWellheaderNsdist
        """
        return self._nsdist

    @nsdist.setter
    def nsdist(self, nsdist):
        """Sets the nsdist of this Wellheader.


        :param nsdist: The nsdist of this Wellheader.  # noqa: E501
        :type: OneOfWellheaderNsdist
        """

        self._nsdist = nsdist

    @property
    def nsflag(self):
        """Gets the nsflag of this Wellheader.  # noqa: E501


        :return: The nsflag of this Wellheader.  # noqa: E501
        :rtype: str
        """
        return self._nsflag

    @nsflag.setter
    def nsflag(self, nsflag):
        """Sets the nsflag of this Wellheader.


        :param nsflag: The nsflag of this Wellheader.  # noqa: E501
        :type: str
        """

        self._nsflag = nsflag

    @property
    def operated(self):
        """Gets the operated of this Wellheader.  # noqa: E501


        :return: The operated of this Wellheader.  # noqa: E501
        :rtype: int
        """
        return self._operated

    @operated.setter
    def operated(self, operated):
        """Sets the operated of this Wellheader.


        :param operated: The operated of this Wellheader.  # noqa: E501
        :type: int
        """

        self._operated = operated

    @property
    def operator(self):
        """Gets the operator of this Wellheader.  # noqa: E501


        :return: The operator of this Wellheader.  # noqa: E501
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this Wellheader.


        :param operator: The operator of this Wellheader.  # noqa: E501
        :type: str
        """

        self._operator = operator

    @property
    def operator_histories(self):
        """Gets the operator_histories of this Wellheader.  # noqa: E501


        :return: The operator_histories of this Wellheader.  # noqa: E501
        :rtype: list[OperatorHistory]
        """
        return self._operator_histories

    @operator_histories.setter
    def operator_histories(self, operator_histories):
        """Sets the operator_histories of this Wellheader.


        :param operator_histories: The operator_histories of this Wellheader.  # noqa: E501
        :type: list[OperatorHistory]
        """

        self._operator_histories = operator_histories

    @property
    def operatorcode(self):
        """Gets the operatorcode of this Wellheader.  # noqa: E501


        :return: The operatorcode of this Wellheader.  # noqa: E501
        :rtype: str
        """
        return self._operatorcode

    @operatorcode.setter
    def operatorcode(self, operatorcode):
        """Sets the operatorcode of this Wellheader.


        :param operatorcode: The operatorcode of this Wellheader.  # noqa: E501
        :type: str
        """

        self._operatorcode = operatorcode

    @property
    def other_inholes(self):
        """Gets the other_inholes of this Wellheader.  # noqa: E501


        :return: The other_inholes of this Wellheader.  # noqa: E501
        :rtype: list[OtherInhole]
        """
        return self._other_inholes

    @other_inholes.setter
    def other_inholes(self, other_inholes):
        """Sets the other_inholes of this Wellheader.


        :param other_inholes: The other_inholes of this Wellheader.  # noqa: E501
        :type: list[OtherInhole]
        """

        self._other_inholes = other_inholes

    @property
    def other_strs(self):
        """Gets the other_strs of this Wellheader.  # noqa: E501


        :return: The other_strs of this Wellheader.  # noqa: E501
        :rtype: list[OtherStr]
        """
        return self._other_strs

    @other_strs.setter
    def other_strs(self, other_strs):
        """Sets the other_strs of this Wellheader.


        :param other_strs: The other_strs of this Wellheader.  # noqa: E501
        :type: list[OtherStr]
        """

        self._other_strs = other_strs

    @property
    def othertocascalc(self):
        """Gets the othertocascalc of this Wellheader.  # noqa: E501


        :return: The othertocascalc of this Wellheader.  # noqa: E501
        :rtype: OneOfWellheaderOthertocascalc
        """
        return self._othertocascalc

    @othertocascalc.setter
    def othertocascalc(self, othertocascalc):
        """Sets the othertocascalc of this Wellheader.


        :param othertocascalc: The othertocascalc of this Wellheader.  # noqa: E501
        :type: OneOfWellheaderOthertocascalc
        """

        self._othertocascalc = othertocascalc

    @property
    def othertogrdcalc(self):
        """Gets the othertogrdcalc of this Wellheader.  # noqa: E501


        :return: The othertogrdcalc of this Wellheader.  # noqa: E501
        :rtype: OneOfWellheaderOthertogrdcalc
        """
        return self._othertogrdcalc

    @othertogrdcalc.setter
    def othertogrdcalc(self, othertogrdcalc):
        """Sets the othertogrdcalc of this Wellheader.


        :param othertogrdcalc: The othertogrdcalc of this Wellheader.  # noqa: E501
        :type: OneOfWellheaderOthertogrdcalc
        """

        self._othertogrdcalc = othertogrdcalc

    @property
    def othertomudcalc(self):
        """Gets the othertomudcalc of this Wellheader.  # noqa: E501


        :return: The othertomudcalc of this Wellheader.  # noqa: E501
        :rtype: OneOfWellheaderOthertomudcalc
        """
        return self._othertomudcalc

    @othertomudcalc.setter
    def othertomudcalc(self, othertomudcalc):
        """Sets the othertomudcalc of this Wellheader.


        :param othertomudcalc: The othertomudcalc of this Wellheader.  # noqa: E501
        :type: OneOfWellheaderOthertomudcalc
        """

        self._othertomudcalc = othertomudcalc

    @property
    def othertotubcalc(self):
        """Gets the othertotubcalc of this Wellheader.  # noqa: E501


        :return: The othertotubcalc of this Wellheader.  # noqa: E501
        :rtype: OneOfWellheaderOthertotubcalc
        """
        return self._othertotubcalc

    @othertotubcalc.setter
    def othertotubcalc(self, othertotubcalc):
        """Sets the othertotubcalc of this Wellheader.


        :param othertotubcalc: The othertotubcalc of this Wellheader.  # noqa: E501
        :type: OneOfWellheaderOthertotubcalc
        """

        self._othertotubcalc = othertotubcalc

    @property
    def padcode(self):
        """Gets the padcode of this Wellheader.  # noqa: E501


        :return: The padcode of this Wellheader.  # noqa: E501
        :rtype: str
        """
        return self._padcode

    @padcode.setter
    def padcode(self, padcode):
        """Sets the padcode of this Wellheader.


        :param padcode: The padcode of this Wellheader.  # noqa: E501
        :type: str
        """

        self._padcode = padcode

    @property
    def padname(self):
        """Gets the padname of this Wellheader.  # noqa: E501


        :return: The padname of this Wellheader.  # noqa: E501
        :rtype: str
        """
        return self._padname

    @padname.setter
    def padname(self, padname):
        """Sets the padname of this Wellheader.


        :param padname: The padname of this Wellheader.  # noqa: E501
        :type: str
        """

        self._padname = padname

    @property
    def pbtdallcalc(self):
        """Gets the pbtdallcalc of this Wellheader.  # noqa: E501


        :return: The pbtdallcalc of this Wellheader.  # noqa: E501
        :rtype: str
        """
        return self._pbtdallcalc

    @pbtdallcalc.setter
    def pbtdallcalc(self, pbtdallcalc):
        """Sets the pbtdallcalc of this Wellheader.


        :param pbtdallcalc: The pbtdallcalc of this Wellheader.  # noqa: E501
        :type: str
        """

        self._pbtdallcalc = pbtdallcalc

    @property
    def perforations(self):
        """Gets the perforations of this Wellheader.  # noqa: E501


        :return: The perforations of this Wellheader.  # noqa: E501
        :rtype: list[Perforation]
        """
        return self._perforations

    @perforations.setter
    def perforations(self, perforations):
        """Sets the perforations of this Wellheader.


        :param perforations: The perforations of this Wellheader.  # noqa: E501
        :type: list[Perforation]
        """

        self._perforations = perforations

    @property
    def platform(self):
        """Gets the platform of this Wellheader.  # noqa: E501


        :return: The platform of this Wellheader.  # noqa: E501
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this Wellheader.


        :param platform: The platform of this Wellheader.  # noqa: E501
        :type: str
        """

        self._platform = platform

    @property
    def primaryfluiddes(self):
        """Gets the primaryfluiddes of this Wellheader.  # noqa: E501


        :return: The primaryfluiddes of this Wellheader.  # noqa: E501
        :rtype: str
        """
        return self._primaryfluiddes

    @primaryfluiddes.setter
    def primaryfluiddes(self, primaryfluiddes):
        """Sets the primaryfluiddes of this Wellheader.


        :param primaryfluiddes: The primaryfluiddes of this Wellheader.  # noqa: E501
        :type: str
        """

        self._primaryfluiddes = primaryfluiddes

    @property
    def prime_movers(self):
        """Gets the prime_movers of this Wellheader.  # noqa: E501


        :return: The prime_movers of this Wellheader.  # noqa: E501
        :rtype: list[PrimeMover]
        """
        return self._prime_movers

    @prime_movers.setter
    def prime_movers(self, prime_movers):
        """Sets the prime_movers of this Wellheader.


        :param prime_movers: The prime_movers of this Wellheader.  # noqa: E501
        :type: list[PrimeMover]
        """

        self._prime_movers = prime_movers

    @property
    def problemflag(self):
        """Gets the problemflag of this Wellheader.  # noqa: E501


        :return: The problemflag of this Wellheader.  # noqa: E501
        :rtype: int
        """
        return self._problemflag

    @problemflag.setter
    def problemflag(self, problemflag):
        """Sets the problemflag of this Wellheader.


        :param problemflag: The problemflag of this Wellheader.  # noqa: E501
        :type: int
        """

        self._problemflag = problemflag

    @property
    def problemlast12monthcalc(self):
        """Gets the problemlast12monthcalc of this Wellheader.  # noqa: E501


        :return: The problemlast12monthcalc of this Wellheader.  # noqa: E501
        :rtype: OneOfWellheaderProblemlast12monthcalc
        """
        return self._problemlast12monthcalc

    @problemlast12monthcalc.setter
    def problemlast12monthcalc(self, problemlast12monthcalc):
        """Sets the problemlast12monthcalc of this Wellheader.


        :param problemlast12monthcalc: The problemlast12monthcalc of this Wellheader.  # noqa: E501
        :type: OneOfWellheaderProblemlast12monthcalc
        """

        self._problemlast12monthcalc = problemlast12monthcalc

    @property
    def problems(self):
        """Gets the problems of this Wellheader.  # noqa: E501


        :return: The problems of this Wellheader.  # noqa: E501
        :rtype: list[Problem]
        """
        return self._problems

    @problems.setter
    def problems(self, problems):
        """Sets the problems of this Wellheader.


        :param problems: The problems of this Wellheader.  # noqa: E501
        :type: list[Problem]
        """

        self._problems = problems

    @property
    def problemtotalcalc(self):
        """Gets the problemtotalcalc of this Wellheader.  # noqa: E501


        :return: The problemtotalcalc of this Wellheader.  # noqa: E501
        :rtype: OneOfWellheaderProblemtotalcalc
        """
        return self._problemtotalcalc

    @problemtotalcalc.setter
    def problemtotalcalc(self, problemtotalcalc):
        """Sets the problemtotalcalc of this Wellheader.


        :param problemtotalcalc: The problemtotalcalc of this Wellheader.  # noqa: E501
        :type: OneOfWellheaderProblemtotalcalc
        """

        self._problemtotalcalc = problemtotalcalc

    @property
    def prod_settings(self):
        """Gets the prod_settings of this Wellheader.  # noqa: E501


        :return: The prod_settings of this Wellheader.  # noqa: E501
        :rtype: list[ProdSetting]
        """
        return self._prod_settings

    @prod_settings.setter
    def prod_settings(self, prod_settings):
        """Sets the prod_settings of this Wellheader.


        :param prod_settings: The prod_settings of this Wellheader.  # noqa: E501
        :type: list[ProdSetting]
        """

        self._prod_settings = prod_settings

    @property
    def productions(self):
        """Gets the productions of this Wellheader.  # noqa: E501


        :return: The productions of this Wellheader.  # noqa: E501
        :rtype: list[Production]
        """
        return self._productions

    @productions.setter
    def productions(self, productions):
        """Sets the productions of this Wellheader.


        :param productions: The productions of this Wellheader.  # noqa: E501
        :type: list[Production]
        """

        self._productions = productions

    @property
    def pumping_units(self):
        """Gets the pumping_units of this Wellheader.  # noqa: E501


        :return: The pumping_units of this Wellheader.  # noqa: E501
        :rtype: list[PumpingUnit]
        """
        return self._pumping_units

    @pumping_units.setter
    def pumping_units(self, pumping_units):
        """Sets the pumping_units of this Wellheader.


        :param pumping_units: The pumping_units of this Wellheader.  # noqa: E501
        :type: list[PumpingUnit]
        """

        self._pumping_units = pumping_units

    @property
    def ref_wells(self):
        """Gets the ref_wells of this Wellheader.  # noqa: E501


        :return: The ref_wells of this Wellheader.  # noqa: E501
        :rtype: list[RefWells]
        """
        return self._ref_wells

    @ref_wells.setter
    def ref_wells(self, ref_wells):
        """Sets the ref_wells of this Wellheader.


        :param ref_wells: The ref_wells of this Wellheader.  # noqa: E501
        :type: list[RefWells]
        """

        self._ref_wells = ref_wells

    @property
    def responsible_teams(self):
        """Gets the responsible_teams of this Wellheader.  # noqa: E501


        :return: The responsible_teams of this Wellheader.  # noqa: E501
        :rtype: list[ResponsibleTeam]
        """
        return self._responsible_teams

    @responsible_teams.setter
    def responsible_teams(self, responsible_teams):
        """Sets the responsible_teams of this Wellheader.


        :param responsible_teams: The responsible_teams of this Wellheader.  # noqa: E501
        :type: list[ResponsibleTeam]
        """

        self._responsible_teams = responsible_teams

    @property
    def risers(self):
        """Gets the risers of this Wellheader.  # noqa: E501


        :return: The risers of this Wellheader.  # noqa: E501
        :rtype: list[Riser]
        """
        return self._risers

    @risers.setter
    def risers(self, risers):
        """Sets the risers of this Wellheader.


        :param risers: The risers of this Wellheader.  # noqa: E501
        :type: list[Riser]
        """

        self._risers = risers

    @property
    def riskclass(self):
        """Gets the riskclass of this Wellheader.  # noqa: E501


        :return: The riskclass of this Wellheader.  # noqa: E501
        :rtype: str
        """
        return self._riskclass

    @riskclass.setter
    def riskclass(self, riskclass):
        """Sets the riskclass of this Wellheader.


        :param riskclass: The riskclass of this Wellheader.  # noqa: E501
        :type: str
        """

        self._riskclass = riskclass

    @property
    def rods(self):
        """Gets the rods of this Wellheader.  # noqa: E501


        :return: The rods of this Wellheader.  # noqa: E501
        :rtype: list[Rod]
        """
        return self._rods

    @rods.setter
    def rods(self, rods):
        """Sets the rods of this Wellheader.


        :param rods: The rods of this Wellheader.  # noqa: E501
        :type: list[Rod]
        """

        self._rods = rods

    @property
    def slot(self):
        """Gets the slot of this Wellheader.  # noqa: E501


        :return: The slot of this Wellheader.  # noqa: E501
        :rtype: str
        """
        return self._slot

    @slot.setter
    def slot(self, slot):
        """Sets the slot of this Wellheader.


        :param slot: The slot of this Wellheader.  # noqa: E501
        :type: str
        """

        self._slot = slot

    @property
    def source_dests(self):
        """Gets the source_dests of this Wellheader.  # noqa: E501


        :return: The source_dests of this Wellheader.  # noqa: E501
        :rtype: list[SourceDest]
        """
        return self._source_dests

    @source_dests.setter
    def source_dests(self, source_dests):
        """Sets the source_dests of this Wellheader.


        :param source_dests: The source_dests of this Wellheader.  # noqa: E501
        :type: list[SourceDest]
        """

        self._source_dests = source_dests

    @property
    def stateprov(self):
        """Gets the stateprov of this Wellheader.  # noqa: E501


        :return: The stateprov of this Wellheader.  # noqa: E501
        :rtype: str
        """
        return self._stateprov

    @stateprov.setter
    def stateprov(self, stateprov):
        """Sets the stateprov of this Wellheader.


        :param stateprov: The stateprov of this Wellheader.  # noqa: E501
        :type: str
        """

        self._stateprov = stateprov

    @property
    def stims(self):
        """Gets the stims of this Wellheader.  # noqa: E501


        :return: The stims of this Wellheader.  # noqa: E501
        :rtype: list[Stim]
        """
        return self._stims

    @stims.setter
    def stims(self, stims):
        """Sets the stims of this Wellheader.


        :param stims: The stims of this Wellheader.  # noqa: E501
        :type: list[Stim]
        """

        self._stims = stims

    @property
    def surf_control_equips(self):
        """Gets the surf_control_equips of this Wellheader.  # noqa: E501


        :return: The surf_control_equips of this Wellheader.  # noqa: E501
        :rtype: list[SurfControlEquip]
        """
        return self._surf_control_equips

    @surf_control_equips.setter
    def surf_control_equips(self, surf_control_equips):
        """Sets the surf_control_equips of this Wellheader.


        :param surf_control_equips: The surf_control_equips of this Wellheader.  # noqa: E501
        :type: list[SurfControlEquip]
        """

        self._surf_control_equips = surf_control_equips

    @property
    def surfacerights(self):
        """Gets the surfacerights of this Wellheader.  # noqa: E501


        :return: The surfacerights of this Wellheader.  # noqa: E501
        :rtype: str
        """
        return self._surfacerights

    @surfacerights.setter
    def surfacerights(self, surfacerights):
        """Sets the surfacerights of this Wellheader.


        :param surfacerights: The surfacerights of this Wellheader.  # noqa: E501
        :type: str
        """

        self._surfacerights = surfacerights

    @property
    def swabs(self):
        """Gets the swabs of this Wellheader.  # noqa: E501


        :return: The swabs of this Wellheader.  # noqa: E501
        :rtype: list[Swab]
        """
        return self._swabs

    @swabs.setter
    def swabs(self, swabs):
        """Sets the swabs of this Wellheader.


        :param swabs: The swabs of this Wellheader.  # noqa: E501
        :type: list[Swab]
        """

        self._swabs = swabs

    @property
    def syscreatedate(self):
        """Gets the syscreatedate of this Wellheader.  # noqa: E501


        :return: The syscreatedate of this Wellheader.  # noqa: E501
        :rtype: datetime
        """
        return self._syscreatedate

    @syscreatedate.setter
    def syscreatedate(self, syscreatedate):
        """Sets the syscreatedate of this Wellheader.


        :param syscreatedate: The syscreatedate of this Wellheader.  # noqa: E501
        :type: datetime
        """

        self._syscreatedate = syscreatedate

    @property
    def syscreateuser(self):
        """Gets the syscreateuser of this Wellheader.  # noqa: E501


        :return: The syscreateuser of this Wellheader.  # noqa: E501
        :rtype: str
        """
        return self._syscreateuser

    @syscreateuser.setter
    def syscreateuser(self, syscreateuser):
        """Sets the syscreateuser of this Wellheader.


        :param syscreateuser: The syscreateuser of this Wellheader.  # noqa: E501
        :type: str
        """

        self._syscreateuser = syscreateuser

    @property
    def syslockchildren(self):
        """Gets the syslockchildren of this Wellheader.  # noqa: E501


        :return: The syslockchildren of this Wellheader.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildren

    @syslockchildren.setter
    def syslockchildren(self, syslockchildren):
        """Sets the syslockchildren of this Wellheader.


        :param syslockchildren: The syslockchildren of this Wellheader.  # noqa: E501
        :type: int
        """

        self._syslockchildren = syslockchildren

    @property
    def syslockchildrenui(self):
        """Gets the syslockchildrenui of this Wellheader.  # noqa: E501


        :return: The syslockchildrenui of this Wellheader.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildrenui

    @syslockchildrenui.setter
    def syslockchildrenui(self, syslockchildrenui):
        """Sets the syslockchildrenui of this Wellheader.


        :param syslockchildrenui: The syslockchildrenui of this Wellheader.  # noqa: E501
        :type: int
        """

        self._syslockchildrenui = syslockchildrenui

    @property
    def syslockdate(self):
        """Gets the syslockdate of this Wellheader.  # noqa: E501


        :return: The syslockdate of this Wellheader.  # noqa: E501
        :rtype: datetime
        """
        return self._syslockdate

    @syslockdate.setter
    def syslockdate(self, syslockdate):
        """Sets the syslockdate of this Wellheader.


        :param syslockdate: The syslockdate of this Wellheader.  # noqa: E501
        :type: datetime
        """

        self._syslockdate = syslockdate

    @property
    def syslockdatemaster(self):
        """Gets the syslockdatemaster of this Wellheader.  # noqa: E501


        :return: The syslockdatemaster of this Wellheader.  # noqa: E501
        :rtype: datetime
        """
        return self._syslockdatemaster

    @syslockdatemaster.setter
    def syslockdatemaster(self, syslockdatemaster):
        """Sets the syslockdatemaster of this Wellheader.


        :param syslockdatemaster: The syslockdatemaster of this Wellheader.  # noqa: E501
        :type: datetime
        """

        self._syslockdatemaster = syslockdatemaster

    @property
    def syslockme(self):
        """Gets the syslockme of this Wellheader.  # noqa: E501


        :return: The syslockme of this Wellheader.  # noqa: E501
        :rtype: int
        """
        return self._syslockme

    @syslockme.setter
    def syslockme(self, syslockme):
        """Sets the syslockme of this Wellheader.


        :param syslockme: The syslockme of this Wellheader.  # noqa: E501
        :type: int
        """

        self._syslockme = syslockme

    @property
    def syslockmeui(self):
        """Gets the syslockmeui of this Wellheader.  # noqa: E501


        :return: The syslockmeui of this Wellheader.  # noqa: E501
        :rtype: int
        """
        return self._syslockmeui

    @syslockmeui.setter
    def syslockmeui(self, syslockmeui):
        """Sets the syslockmeui of this Wellheader.


        :param syslockmeui: The syslockmeui of this Wellheader.  # noqa: E501
        :type: int
        """

        self._syslockmeui = syslockmeui

    @property
    def sysmoddate(self):
        """Gets the sysmoddate of this Wellheader.  # noqa: E501


        :return: The sysmoddate of this Wellheader.  # noqa: E501
        :rtype: datetime
        """
        return self._sysmoddate

    @sysmoddate.setter
    def sysmoddate(self, sysmoddate):
        """Sets the sysmoddate of this Wellheader.


        :param sysmoddate: The sysmoddate of this Wellheader.  # noqa: E501
        :type: datetime
        """

        self._sysmoddate = sysmoddate

    @property
    def sysmoddatedb(self):
        """Gets the sysmoddatedb of this Wellheader.  # noqa: E501


        :return: The sysmoddatedb of this Wellheader.  # noqa: E501
        :rtype: datetime
        """
        return self._sysmoddatedb

    @sysmoddatedb.setter
    def sysmoddatedb(self, sysmoddatedb):
        """Sets the sysmoddatedb of this Wellheader.


        :param sysmoddatedb: The sysmoddatedb of this Wellheader.  # noqa: E501
        :type: datetime
        """

        self._sysmoddatedb = sysmoddatedb

    @property
    def sysmoduser(self):
        """Gets the sysmoduser of this Wellheader.  # noqa: E501


        :return: The sysmoduser of this Wellheader.  # noqa: E501
        :rtype: str
        """
        return self._sysmoduser

    @sysmoduser.setter
    def sysmoduser(self, sysmoduser):
        """Sets the sysmoduser of this Wellheader.


        :param sysmoduser: The sysmoduser of this Wellheader.  # noqa: E501
        :type: str
        """

        self._sysmoduser = sysmoduser

    @property
    def sysmoduserdb(self):
        """Gets the sysmoduserdb of this Wellheader.  # noqa: E501


        :return: The sysmoduserdb of this Wellheader.  # noqa: E501
        :rtype: str
        """
        return self._sysmoduserdb

    @sysmoduserdb.setter
    def sysmoduserdb(self, sysmoduserdb):
        """Sets the sysmoduserdb of this Wellheader.


        :param sysmoduserdb: The sysmoduserdb of this Wellheader.  # noqa: E501
        :type: str
        """

        self._sysmoduserdb = sysmoduserdb

    @property
    def syssecuritytyp(self):
        """Gets the syssecuritytyp of this Wellheader.  # noqa: E501


        :return: The syssecuritytyp of this Wellheader.  # noqa: E501
        :rtype: str
        """
        return self._syssecuritytyp

    @syssecuritytyp.setter
    def syssecuritytyp(self, syssecuritytyp):
        """Sets the syssecuritytyp of this Wellheader.


        :param syssecuritytyp: The syssecuritytyp of this Wellheader.  # noqa: E501
        :type: str
        """

        self._syssecuritytyp = syssecuritytyp

    @property
    def systag(self):
        """Gets the systag of this Wellheader.  # noqa: E501


        :return: The systag of this Wellheader.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this Wellheader.


        :param systag: The systag of this Wellheader.  # noqa: E501
        :type: str
        """

        self._systag = systag

    @property
    def tasks(self):
        """Gets the tasks of this Wellheader.  # noqa: E501


        :return: The tasks of this Wellheader.  # noqa: E501
        :rtype: list[Task]
        """
        return self._tasks

    @tasks.setter
    def tasks(self, tasks):
        """Sets the tasks of this Wellheader.


        :param tasks: The tasks of this Wellheader.  # noqa: E501
        :type: list[Task]
        """

        self._tasks = tasks

    @property
    def tdallcalc(self):
        """Gets the tdallcalc of this Wellheader.  # noqa: E501


        :return: The tdallcalc of this Wellheader.  # noqa: E501
        :rtype: str
        """
        return self._tdallcalc

    @tdallcalc.setter
    def tdallcalc(self, tdallcalc):
        """Sets the tdallcalc of this Wellheader.


        :param tdallcalc: The tdallcalc of this Wellheader.  # noqa: E501
        :type: str
        """

        self._tdallcalc = tdallcalc

    @property
    def tdcalc(self):
        """Gets the tdcalc of this Wellheader.  # noqa: E501


        :return: The tdcalc of this Wellheader.  # noqa: E501
        :rtype: OneOfWellheaderTdcalc
        """
        return self._tdcalc

    @tdcalc.setter
    def tdcalc(self, tdcalc):
        """Sets the tdcalc of this Wellheader.


        :param tdcalc: The tdcalc of this Wellheader.  # noqa: E501
        :type: OneOfWellheaderTdcalc
        """

        self._tdcalc = tdcalc

    @property
    def tdtvdallcalc(self):
        """Gets the tdtvdallcalc of this Wellheader.  # noqa: E501


        :return: The tdtvdallcalc of this Wellheader.  # noqa: E501
        :rtype: str
        """
        return self._tdtvdallcalc

    @tdtvdallcalc.setter
    def tdtvdallcalc(self, tdtvdallcalc):
        """Sets the tdtvdallcalc of this Wellheader.


        :param tdtvdallcalc: The tdtvdallcalc of this Wellheader.  # noqa: E501
        :type: str
        """

        self._tdtvdallcalc = tdtvdallcalc

    @property
    def test_dynos(self):
        """Gets the test_dynos of this Wellheader.  # noqa: E501


        :return: The test_dynos of this Wellheader.  # noqa: E501
        :rtype: list[TestDyno]
        """
        return self._test_dynos

    @test_dynos.setter
    def test_dynos(self, test_dynos):
        """Sets the test_dynos of this Wellheader.


        :param test_dynos: The test_dynos of this Wellheader.  # noqa: E501
        :type: list[TestDyno]
        """

        self._test_dynos = test_dynos

    @property
    def test_equips(self):
        """Gets the test_equips of this Wellheader.  # noqa: E501


        :return: The test_equips of this Wellheader.  # noqa: E501
        :rtype: list[TestEquip]
        """
        return self._test_equips

    @test_equips.setter
    def test_equips(self, test_equips):
        """Sets the test_equips of this Wellheader.


        :param test_equips: The test_equips of this Wellheader.  # noqa: E501
        :type: list[TestEquip]
        """

        self._test_equips = test_equips

    @property
    def test_leak_offs(self):
        """Gets the test_leak_offs of this Wellheader.  # noqa: E501


        :return: The test_leak_offs of this Wellheader.  # noqa: E501
        :rtype: list[TestLeakOff]
        """
        return self._test_leak_offs

    @test_leak_offs.setter
    def test_leak_offs(self, test_leak_offs):
        """Sets the test_leak_offs of this Wellheader.


        :param test_leak_offs: The test_leak_offs of this Wellheader.  # noqa: E501
        :type: list[TestLeakOff]
        """

        self._test_leak_offs = test_leak_offs

    @property
    def test_sssvs(self):
        """Gets the test_sssvs of this Wellheader.  # noqa: E501


        :return: The test_sssvs of this Wellheader.  # noqa: E501
        :rtype: list[TestSssv]
        """
        return self._test_sssvs

    @test_sssvs.setter
    def test_sssvs(self, test_sssvs):
        """Sets the test_sssvs of this Wellheader.


        :param test_sssvs: The test_sssvs of this Wellheader.  # noqa: E501
        :type: list[TestSssv]
        """

        self._test_sssvs = test_sssvs

    @property
    def time_curves(self):
        """Gets the time_curves of this Wellheader.  # noqa: E501


        :return: The time_curves of this Wellheader.  # noqa: E501
        :rtype: list[TimeCurve]
        """
        return self._time_curves

    @time_curves.setter
    def time_curves(self, time_curves):
        """Sets the time_curves of this Wellheader.


        :param time_curves: The time_curves of this Wellheader.  # noqa: E501
        :type: list[TimeCurve]
        """

        self._time_curves = time_curves

    @property
    def towndist(self):
        """Gets the towndist of this Wellheader.  # noqa: E501


        :return: The towndist of this Wellheader.  # noqa: E501
        :rtype: OneOfWellheaderTowndist
        """
        return self._towndist

    @towndist.setter
    def towndist(self, towndist):
        """Sets the towndist of this Wellheader.


        :param towndist: The towndist of this Wellheader.  # noqa: E501
        :type: OneOfWellheaderTowndist
        """

        self._towndist = towndist

    @property
    def townflag(self):
        """Gets the townflag of this Wellheader.  # noqa: E501


        :return: The townflag of this Wellheader.  # noqa: E501
        :rtype: str
        """
        return self._townflag

    @townflag.setter
    def townflag(self, townflag):
        """Sets the townflag of this Wellheader.


        :param townflag: The townflag of this Wellheader.  # noqa: E501
        :type: str
        """

        self._townflag = townflag

    @property
    def townname(self):
        """Gets the townname of this Wellheader.  # noqa: E501


        :return: The townname of this Wellheader.  # noqa: E501
        :rtype: str
        """
        return self._townname

    @townname.setter
    def townname(self, townname):
        """Sets the townname of this Wellheader.


        :param townname: The townname of this Wellheader.  # noqa: E501
        :type: str
        """

        self._townname = townname

    @property
    def townstateprov(self):
        """Gets the townstateprov of this Wellheader.  # noqa: E501


        :return: The townstateprov of this Wellheader.  # noqa: E501
        :rtype: str
        """
        return self._townstateprov

    @townstateprov.setter
    def townstateprov(self, townstateprov):
        """Sets the townstateprov of this Wellheader.


        :param townstateprov: The townstateprov of this Wellheader.  # noqa: E501
        :type: str
        """

        self._townstateprov = townstateprov

    @property
    def tubs(self):
        """Gets the tubs of this Wellheader.  # noqa: E501


        :return: The tubs of this Wellheader.  # noqa: E501
        :rtype: list[Tub]
        """
        return self._tubs

    @tubs.setter
    def tubs(self, tubs):
        """Sets the tubs of this Wellheader.


        :param tubs: The tubs of this Wellheader.  # noqa: E501
        :type: list[Tub]
        """

        self._tubs = tubs

    @property
    def userboolean1(self):
        """Gets the userboolean1 of this Wellheader.  # noqa: E501


        :return: The userboolean1 of this Wellheader.  # noqa: E501
        :rtype: int
        """
        return self._userboolean1

    @userboolean1.setter
    def userboolean1(self, userboolean1):
        """Sets the userboolean1 of this Wellheader.


        :param userboolean1: The userboolean1 of this Wellheader.  # noqa: E501
        :type: int
        """

        self._userboolean1 = userboolean1

    @property
    def userboolean2(self):
        """Gets the userboolean2 of this Wellheader.  # noqa: E501


        :return: The userboolean2 of this Wellheader.  # noqa: E501
        :rtype: int
        """
        return self._userboolean2

    @userboolean2.setter
    def userboolean2(self, userboolean2):
        """Sets the userboolean2 of this Wellheader.


        :param userboolean2: The userboolean2 of this Wellheader.  # noqa: E501
        :type: int
        """

        self._userboolean2 = userboolean2

    @property
    def userboolean3(self):
        """Gets the userboolean3 of this Wellheader.  # noqa: E501


        :return: The userboolean3 of this Wellheader.  # noqa: E501
        :rtype: int
        """
        return self._userboolean3

    @userboolean3.setter
    def userboolean3(self, userboolean3):
        """Sets the userboolean3 of this Wellheader.


        :param userboolean3: The userboolean3 of this Wellheader.  # noqa: E501
        :type: int
        """

        self._userboolean3 = userboolean3

    @property
    def userboolean4(self):
        """Gets the userboolean4 of this Wellheader.  # noqa: E501


        :return: The userboolean4 of this Wellheader.  # noqa: E501
        :rtype: int
        """
        return self._userboolean4

    @userboolean4.setter
    def userboolean4(self, userboolean4):
        """Sets the userboolean4 of this Wellheader.


        :param userboolean4: The userboolean4 of this Wellheader.  # noqa: E501
        :type: int
        """

        self._userboolean4 = userboolean4

    @property
    def userboolean5(self):
        """Gets the userboolean5 of this Wellheader.  # noqa: E501


        :return: The userboolean5 of this Wellheader.  # noqa: E501
        :rtype: int
        """
        return self._userboolean5

    @userboolean5.setter
    def userboolean5(self, userboolean5):
        """Sets the userboolean5 of this Wellheader.


        :param userboolean5: The userboolean5 of this Wellheader.  # noqa: E501
        :type: int
        """

        self._userboolean5 = userboolean5

    @property
    def userdttm1(self):
        """Gets the userdttm1 of this Wellheader.  # noqa: E501


        :return: The userdttm1 of this Wellheader.  # noqa: E501
        :rtype: datetime
        """
        return self._userdttm1

    @userdttm1.setter
    def userdttm1(self, userdttm1):
        """Sets the userdttm1 of this Wellheader.


        :param userdttm1: The userdttm1 of this Wellheader.  # noqa: E501
        :type: datetime
        """

        self._userdttm1 = userdttm1

    @property
    def userdttm2(self):
        """Gets the userdttm2 of this Wellheader.  # noqa: E501


        :return: The userdttm2 of this Wellheader.  # noqa: E501
        :rtype: datetime
        """
        return self._userdttm2

    @userdttm2.setter
    def userdttm2(self, userdttm2):
        """Sets the userdttm2 of this Wellheader.


        :param userdttm2: The userdttm2 of this Wellheader.  # noqa: E501
        :type: datetime
        """

        self._userdttm2 = userdttm2

    @property
    def userdttm3(self):
        """Gets the userdttm3 of this Wellheader.  # noqa: E501


        :return: The userdttm3 of this Wellheader.  # noqa: E501
        :rtype: datetime
        """
        return self._userdttm3

    @userdttm3.setter
    def userdttm3(self, userdttm3):
        """Sets the userdttm3 of this Wellheader.


        :param userdttm3: The userdttm3 of this Wellheader.  # noqa: E501
        :type: datetime
        """

        self._userdttm3 = userdttm3

    @property
    def userdttm4(self):
        """Gets the userdttm4 of this Wellheader.  # noqa: E501


        :return: The userdttm4 of this Wellheader.  # noqa: E501
        :rtype: datetime
        """
        return self._userdttm4

    @userdttm4.setter
    def userdttm4(self, userdttm4):
        """Sets the userdttm4 of this Wellheader.


        :param userdttm4: The userdttm4 of this Wellheader.  # noqa: E501
        :type: datetime
        """

        self._userdttm4 = userdttm4

    @property
    def userdttm5(self):
        """Gets the userdttm5 of this Wellheader.  # noqa: E501


        :return: The userdttm5 of this Wellheader.  # noqa: E501
        :rtype: datetime
        """
        return self._userdttm5

    @userdttm5.setter
    def userdttm5(self, userdttm5):
        """Sets the userdttm5 of this Wellheader.


        :param userdttm5: The userdttm5 of this Wellheader.  # noqa: E501
        :type: datetime
        """

        self._userdttm5 = userdttm5

    @property
    def usernum1(self):
        """Gets the usernum1 of this Wellheader.  # noqa: E501


        :return: The usernum1 of this Wellheader.  # noqa: E501
        :rtype: OneOfWellheaderUsernum1
        """
        return self._usernum1

    @usernum1.setter
    def usernum1(self, usernum1):
        """Sets the usernum1 of this Wellheader.


        :param usernum1: The usernum1 of this Wellheader.  # noqa: E501
        :type: OneOfWellheaderUsernum1
        """

        self._usernum1 = usernum1

    @property
    def usernum2(self):
        """Gets the usernum2 of this Wellheader.  # noqa: E501


        :return: The usernum2 of this Wellheader.  # noqa: E501
        :rtype: OneOfWellheaderUsernum2
        """
        return self._usernum2

    @usernum2.setter
    def usernum2(self, usernum2):
        """Sets the usernum2 of this Wellheader.


        :param usernum2: The usernum2 of this Wellheader.  # noqa: E501
        :type: OneOfWellheaderUsernum2
        """

        self._usernum2 = usernum2

    @property
    def usernum3(self):
        """Gets the usernum3 of this Wellheader.  # noqa: E501


        :return: The usernum3 of this Wellheader.  # noqa: E501
        :rtype: OneOfWellheaderUsernum3
        """
        return self._usernum3

    @usernum3.setter
    def usernum3(self, usernum3):
        """Sets the usernum3 of this Wellheader.


        :param usernum3: The usernum3 of this Wellheader.  # noqa: E501
        :type: OneOfWellheaderUsernum3
        """

        self._usernum3 = usernum3

    @property
    def usernum4(self):
        """Gets the usernum4 of this Wellheader.  # noqa: E501


        :return: The usernum4 of this Wellheader.  # noqa: E501
        :rtype: OneOfWellheaderUsernum4
        """
        return self._usernum4

    @usernum4.setter
    def usernum4(self, usernum4):
        """Sets the usernum4 of this Wellheader.


        :param usernum4: The usernum4 of this Wellheader.  # noqa: E501
        :type: OneOfWellheaderUsernum4
        """

        self._usernum4 = usernum4

    @property
    def usernum5(self):
        """Gets the usernum5 of this Wellheader.  # noqa: E501


        :return: The usernum5 of this Wellheader.  # noqa: E501
        :rtype: OneOfWellheaderUsernum5
        """
        return self._usernum5

    @usernum5.setter
    def usernum5(self, usernum5):
        """Sets the usernum5 of this Wellheader.


        :param usernum5: The usernum5 of this Wellheader.  # noqa: E501
        :type: OneOfWellheaderUsernum5
        """

        self._usernum5 = usernum5

    @property
    def usernum6(self):
        """Gets the usernum6 of this Wellheader.  # noqa: E501


        :return: The usernum6 of this Wellheader.  # noqa: E501
        :rtype: OneOfWellheaderUsernum6
        """
        return self._usernum6

    @usernum6.setter
    def usernum6(self, usernum6):
        """Sets the usernum6 of this Wellheader.


        :param usernum6: The usernum6 of this Wellheader.  # noqa: E501
        :type: OneOfWellheaderUsernum6
        """

        self._usernum6 = usernum6

    @property
    def usertxt1(self):
        """Gets the usertxt1 of this Wellheader.  # noqa: E501


        :return: The usertxt1 of this Wellheader.  # noqa: E501
        :rtype: str
        """
        return self._usertxt1

    @usertxt1.setter
    def usertxt1(self, usertxt1):
        """Sets the usertxt1 of this Wellheader.


        :param usertxt1: The usertxt1 of this Wellheader.  # noqa: E501
        :type: str
        """

        self._usertxt1 = usertxt1

    @property
    def usertxt10(self):
        """Gets the usertxt10 of this Wellheader.  # noqa: E501


        :return: The usertxt10 of this Wellheader.  # noqa: E501
        :rtype: str
        """
        return self._usertxt10

    @usertxt10.setter
    def usertxt10(self, usertxt10):
        """Sets the usertxt10 of this Wellheader.


        :param usertxt10: The usertxt10 of this Wellheader.  # noqa: E501
        :type: str
        """

        self._usertxt10 = usertxt10

    @property
    def usertxt2(self):
        """Gets the usertxt2 of this Wellheader.  # noqa: E501


        :return: The usertxt2 of this Wellheader.  # noqa: E501
        :rtype: str
        """
        return self._usertxt2

    @usertxt2.setter
    def usertxt2(self, usertxt2):
        """Sets the usertxt2 of this Wellheader.


        :param usertxt2: The usertxt2 of this Wellheader.  # noqa: E501
        :type: str
        """

        self._usertxt2 = usertxt2

    @property
    def usertxt3(self):
        """Gets the usertxt3 of this Wellheader.  # noqa: E501


        :return: The usertxt3 of this Wellheader.  # noqa: E501
        :rtype: str
        """
        return self._usertxt3

    @usertxt3.setter
    def usertxt3(self, usertxt3):
        """Sets the usertxt3 of this Wellheader.


        :param usertxt3: The usertxt3 of this Wellheader.  # noqa: E501
        :type: str
        """

        self._usertxt3 = usertxt3

    @property
    def usertxt4(self):
        """Gets the usertxt4 of this Wellheader.  # noqa: E501


        :return: The usertxt4 of this Wellheader.  # noqa: E501
        :rtype: str
        """
        return self._usertxt4

    @usertxt4.setter
    def usertxt4(self, usertxt4):
        """Sets the usertxt4 of this Wellheader.


        :param usertxt4: The usertxt4 of this Wellheader.  # noqa: E501
        :type: str
        """

        self._usertxt4 = usertxt4

    @property
    def usertxt5(self):
        """Gets the usertxt5 of this Wellheader.  # noqa: E501


        :return: The usertxt5 of this Wellheader.  # noqa: E501
        :rtype: str
        """
        return self._usertxt5

    @usertxt5.setter
    def usertxt5(self, usertxt5):
        """Sets the usertxt5 of this Wellheader.


        :param usertxt5: The usertxt5 of this Wellheader.  # noqa: E501
        :type: str
        """

        self._usertxt5 = usertxt5

    @property
    def usertxt6(self):
        """Gets the usertxt6 of this Wellheader.  # noqa: E501


        :return: The usertxt6 of this Wellheader.  # noqa: E501
        :rtype: str
        """
        return self._usertxt6

    @usertxt6.setter
    def usertxt6(self, usertxt6):
        """Sets the usertxt6 of this Wellheader.


        :param usertxt6: The usertxt6 of this Wellheader.  # noqa: E501
        :type: str
        """

        self._usertxt6 = usertxt6

    @property
    def usertxt7(self):
        """Gets the usertxt7 of this Wellheader.  # noqa: E501


        :return: The usertxt7 of this Wellheader.  # noqa: E501
        :rtype: str
        """
        return self._usertxt7

    @usertxt7.setter
    def usertxt7(self, usertxt7):
        """Sets the usertxt7 of this Wellheader.


        :param usertxt7: The usertxt7 of this Wellheader.  # noqa: E501
        :type: str
        """

        self._usertxt7 = usertxt7

    @property
    def usertxt8(self):
        """Gets the usertxt8 of this Wellheader.  # noqa: E501


        :return: The usertxt8 of this Wellheader.  # noqa: E501
        :rtype: str
        """
        return self._usertxt8

    @usertxt8.setter
    def usertxt8(self, usertxt8):
        """Sets the usertxt8 of this Wellheader.


        :param usertxt8: The usertxt8 of this Wellheader.  # noqa: E501
        :type: str
        """

        self._usertxt8 = usertxt8

    @property
    def usertxt9(self):
        """Gets the usertxt9 of this Wellheader.  # noqa: E501


        :return: The usertxt9 of this Wellheader.  # noqa: E501
        :rtype: str
        """
        return self._usertxt9

    @usertxt9.setter
    def usertxt9(self, usertxt9):
        """Sets the usertxt9 of this Wellheader.


        :param usertxt9: The usertxt9 of this Wellheader.  # noqa: E501
        :type: str
        """

        self._usertxt9 = usertxt9

    @property
    def utmgridzone(self):
        """Gets the utmgridzone of this Wellheader.  # noqa: E501


        :return: The utmgridzone of this Wellheader.  # noqa: E501
        :rtype: int
        """
        return self._utmgridzone

    @utmgridzone.setter
    def utmgridzone(self, utmgridzone):
        """Sets the utmgridzone of this Wellheader.


        :param utmgridzone: The utmgridzone of this Wellheader.  # noqa: E501
        :type: int
        """

        self._utmgridzone = utmgridzone

    @property
    def utmsource(self):
        """Gets the utmsource of this Wellheader.  # noqa: E501


        :return: The utmsource of this Wellheader.  # noqa: E501
        :rtype: str
        """
        return self._utmsource

    @utmsource.setter
    def utmsource(self, utmsource):
        """Sets the utmsource of this Wellheader.


        :param utmsource: The utmsource of this Wellheader.  # noqa: E501
        :type: str
        """

        self._utmsource = utmsource

    @property
    def utmx(self):
        """Gets the utmx of this Wellheader.  # noqa: E501


        :return: The utmx of this Wellheader.  # noqa: E501
        :rtype: OneOfWellheaderUtmx
        """
        return self._utmx

    @utmx.setter
    def utmx(self, utmx):
        """Sets the utmx of this Wellheader.


        :param utmx: The utmx of this Wellheader.  # noqa: E501
        :type: OneOfWellheaderUtmx
        """

        self._utmx = utmx

    @property
    def utmy(self):
        """Gets the utmy of this Wellheader.  # noqa: E501


        :return: The utmy of this Wellheader.  # noqa: E501
        :rtype: OneOfWellheaderUtmy
        """
        return self._utmy

    @utmy.setter
    def utmy(self, utmy):
        """Sets the utmy of this Wellheader.


        :param utmy: The utmy of this Wellheader.  # noqa: E501
        :type: OneOfWellheaderUtmy
        """

        self._utmy = utmy

    @property
    def waterdepth(self):
        """Gets the waterdepth of this Wellheader.  # noqa: E501


        :return: The waterdepth of this Wellheader.  # noqa: E501
        :rtype: OneOfWellheaderWaterdepth
        """
        return self._waterdepth

    @waterdepth.setter
    def waterdepth(self, waterdepth):
        """Sets the waterdepth of this Wellheader.


        :param waterdepth: The waterdepth of this Wellheader.  # noqa: E501
        :type: OneOfWellheaderWaterdepth
        """

        self._waterdepth = waterdepth

    @property
    def waterdepthref(self):
        """Gets the waterdepthref of this Wellheader.  # noqa: E501


        :return: The waterdepthref of this Wellheader.  # noqa: E501
        :rtype: str
        """
        return self._waterdepthref

    @waterdepthref.setter
    def waterdepthref(self, waterdepthref):
        """Sets the waterdepthref of this Wellheader.


        :param waterdepthref: The waterdepthref of this Wellheader.  # noqa: E501
        :type: str
        """

        self._waterdepthref = waterdepthref

    @property
    def well_aliases(self):
        """Gets the well_aliases of this Wellheader.  # noqa: E501


        :return: The well_aliases of this Wellheader.  # noqa: E501
        :rtype: list[WellAlias]
        """
        return self._well_aliases

    @well_aliases.setter
    def well_aliases(self, well_aliases):
        """Sets the well_aliases of this Wellheader.


        :param well_aliases: The well_aliases of this Wellheader.  # noqa: E501
        :type: list[WellAlias]
        """

        self._well_aliases = well_aliases

    @property
    def well_barriers(self):
        """Gets the well_barriers of this Wellheader.  # noqa: E501


        :return: The well_barriers of this Wellheader.  # noqa: E501
        :rtype: list[WellBarrier]
        """
        return self._well_barriers

    @well_barriers.setter
    def well_barriers(self, well_barriers):
        """Sets the well_barriers of this Wellheader.


        :param well_barriers: The well_barriers of this Wellheader.  # noqa: E501
        :type: list[WellBarrier]
        """

        self._well_barriers = well_barriers

    @property
    def well_reviews(self):
        """Gets the well_reviews of this Wellheader.  # noqa: E501


        :return: The well_reviews of this Wellheader.  # noqa: E501
        :rtype: list[WellReview]
        """
        return self._well_reviews

    @well_reviews.setter
    def well_reviews(self, well_reviews):
        """Sets the well_reviews of this Wellheader.


        :param well_reviews: The well_reviews of this Wellheader.  # noqa: E501
        :type: list[WellReview]
        """

        self._well_reviews = well_reviews

    @property
    def well_status_histories(self):
        """Gets the well_status_histories of this Wellheader.  # noqa: E501


        :return: The well_status_histories of this Wellheader.  # noqa: E501
        :rtype: list[WellStatusHistory]
        """
        return self._well_status_histories

    @well_status_histories.setter
    def well_status_histories(self, well_status_histories):
        """Sets the well_status_histories of this Wellheader.


        :param well_status_histories: The well_status_histories of this Wellheader.  # noqa: E501
        :type: list[WellStatusHistory]
        """

        self._well_status_histories = well_status_histories

    @property
    def well_test_fluid_levels(self):
        """Gets the well_test_fluid_levels of this Wellheader.  # noqa: E501


        :return: The well_test_fluid_levels of this Wellheader.  # noqa: E501
        :rtype: list[WellTestFluidLevel]
        """
        return self._well_test_fluid_levels

    @well_test_fluid_levels.setter
    def well_test_fluid_levels(self, well_test_fluid_levels):
        """Sets the well_test_fluid_levels of this Wellheader.


        :param well_test_fluid_levels: The well_test_fluid_levels of this Wellheader.  # noqa: E501
        :type: list[WellTestFluidLevel]
        """

        self._well_test_fluid_levels = well_test_fluid_levels

    @property
    def well_test_injects(self):
        """Gets the well_test_injects of this Wellheader.  # noqa: E501


        :return: The well_test_injects of this Wellheader.  # noqa: E501
        :rtype: list[WellTestInject]
        """
        return self._well_test_injects

    @well_test_injects.setter
    def well_test_injects(self, well_test_injects):
        """Sets the well_test_injects of this Wellheader.


        :param well_test_injects: The well_test_injects of this Wellheader.  # noqa: E501
        :type: list[WellTestInject]
        """

        self._well_test_injects = well_test_injects

    @property
    def well_test_log_prods(self):
        """Gets the well_test_log_prods of this Wellheader.  # noqa: E501


        :return: The well_test_log_prods of this Wellheader.  # noqa: E501
        :rtype: list[WellTestLogProd]
        """
        return self._well_test_log_prods

    @well_test_log_prods.setter
    def well_test_log_prods(self, well_test_log_prods):
        """Sets the well_test_log_prods of this Wellheader.


        :param well_test_log_prods: The well_test_log_prods of this Wellheader.  # noqa: E501
        :type: list[WellTestLogProd]
        """

        self._well_test_log_prods = well_test_log_prods

    @property
    def well_test_prods(self):
        """Gets the well_test_prods of this Wellheader.  # noqa: E501


        :return: The well_test_prods of this Wellheader.  # noqa: E501
        :rtype: list[WellTestProd]
        """
        return self._well_test_prods

    @well_test_prods.setter
    def well_test_prods(self, well_test_prods):
        """Sets the well_test_prods of this Wellheader.


        :param well_test_prods: The well_test_prods of this Wellheader.  # noqa: E501
        :type: list[WellTestProd]
        """

        self._well_test_prods = well_test_prods

    @property
    def well_test_rfts(self):
        """Gets the well_test_rfts of this Wellheader.  # noqa: E501


        :return: The well_test_rfts of this Wellheader.  # noqa: E501
        :rtype: list[WellTestRft]
        """
        return self._well_test_rfts

    @well_test_rfts.setter
    def well_test_rfts(self, well_test_rfts):
        """Sets the well_test_rfts of this Wellheader.


        :param well_test_rfts: The well_test_rfts of this Wellheader.  # noqa: E501
        :type: list[WellTestRft]
        """

        self._well_test_rfts = well_test_rfts

    @property
    def well_test_trans(self):
        """Gets the well_test_trans of this Wellheader.  # noqa: E501


        :return: The well_test_trans of this Wellheader.  # noqa: E501
        :rtype: list[WellTestTrans]
        """
        return self._well_test_trans

    @well_test_trans.setter
    def well_test_trans(self, well_test_trans):
        """Sets the well_test_trans of this Wellheader.


        :param well_test_trans: The well_test_trans of this Wellheader.  # noqa: E501
        :type: list[WellTestTrans]
        """

        self._well_test_trans = well_test_trans

    @property
    def wellborenocalc(self):
        """Gets the wellborenocalc of this Wellheader.  # noqa: E501


        :return: The wellborenocalc of this Wellheader.  # noqa: E501
        :rtype: int
        """
        return self._wellborenocalc

    @wellborenocalc.setter
    def wellborenocalc(self, wellborenocalc):
        """Sets the wellborenocalc of this Wellheader.


        :param wellborenocalc: The wellborenocalc of this Wellheader.  # noqa: E501
        :type: int
        """

        self._wellborenocalc = wellborenocalc

    @property
    def wellbores(self):
        """Gets the wellbores of this Wellheader.  # noqa: E501


        :return: The wellbores of this Wellheader.  # noqa: E501
        :rtype: list[Wellbore]
        """
        return self._wellbores

    @wellbores.setter
    def wellbores(self, wellbores):
        """Sets the wellbores of this Wellheader.


        :param wellbores: The wellbores of this Wellheader.  # noqa: E501
        :type: list[Wellbore]
        """

        self._wellbores = wellbores

    @property
    def wellclass(self):
        """Gets the wellclass of this Wellheader.  # noqa: E501


        :return: The wellclass of this Wellheader.  # noqa: E501
        :rtype: str
        """
        return self._wellclass

    @wellclass.setter
    def wellclass(self, wellclass):
        """Sets the wellclass of this Wellheader.


        :param wellclass: The wellclass of this Wellheader.  # noqa: E501
        :type: str
        """

        self._wellclass = wellclass

    @property
    def wellconfig(self):
        """Gets the wellconfig of this Wellheader.  # noqa: E501


        :return: The wellconfig of this Wellheader.  # noqa: E501
        :rtype: str
        """
        return self._wellconfig

    @wellconfig.setter
    def wellconfig(self, wellconfig):
        """Sets the wellconfig of this Wellheader.


        :param wellconfig: The wellconfig of this Wellheader.  # noqa: E501
        :type: str
        """

        self._wellconfig = wellconfig

    @property
    def wellheads(self):
        """Gets the wellheads of this Wellheader.  # noqa: E501


        :return: The wellheads of this Wellheader.  # noqa: E501
        :rtype: list[Wellhead]
        """
        return self._wellheads

    @wellheads.setter
    def wellheads(self, wellheads):
        """Sets the wellheads of this Wellheader.


        :param wellheads: The wellheads of this Wellheader.  # noqa: E501
        :type: list[Wellhead]
        """

        self._wellheads = wellheads

    @property
    def wellida(self):
        """Gets the wellida of this Wellheader.  # noqa: E501


        :return: The wellida of this Wellheader.  # noqa: E501
        :rtype: str
        """
        return self._wellida

    @wellida.setter
    def wellida(self, wellida):
        """Sets the wellida of this Wellheader.


        :param wellida: The wellida of this Wellheader.  # noqa: E501
        :type: str
        """

        self._wellida = wellida

    @property
    def wellidb(self):
        """Gets the wellidb of this Wellheader.  # noqa: E501


        :return: The wellidb of this Wellheader.  # noqa: E501
        :rtype: str
        """
        return self._wellidb

    @wellidb.setter
    def wellidb(self, wellidb):
        """Sets the wellidb of this Wellheader.


        :param wellidb: The wellidb of this Wellheader.  # noqa: E501
        :type: str
        """

        self._wellidb = wellidb

    @property
    def wellidc(self):
        """Gets the wellidc of this Wellheader.  # noqa: E501


        :return: The wellidc of this Wellheader.  # noqa: E501
        :rtype: str
        """
        return self._wellidc

    @wellidc.setter
    def wellidc(self, wellidc):
        """Sets the wellidc of this Wellheader.


        :param wellidc: The wellidc of this Wellheader.  # noqa: E501
        :type: str
        """

        self._wellidc = wellidc

    @property
    def wellidd(self):
        """Gets the wellidd of this Wellheader.  # noqa: E501


        :return: The wellidd of this Wellheader.  # noqa: E501
        :rtype: str
        """
        return self._wellidd

    @wellidd.setter
    def wellidd(self, wellidd):
        """Sets the wellidd of this Wellheader.


        :param wellidd: The wellidd of this Wellheader.  # noqa: E501
        :type: str
        """

        self._wellidd = wellidd

    @property
    def wellide(self):
        """Gets the wellide of this Wellheader.  # noqa: E501


        :return: The wellide of this Wellheader.  # noqa: E501
        :rtype: str
        """
        return self._wellide

    @wellide.setter
    def wellide(self, wellide):
        """Sets the wellide of this Wellheader.


        :param wellide: The wellide of this Wellheader.  # noqa: E501
        :type: str
        """

        self._wellide = wellide

    @property
    def welllicensee(self):
        """Gets the welllicensee of this Wellheader.  # noqa: E501


        :return: The welllicensee of this Wellheader.  # noqa: E501
        :rtype: str
        """
        return self._welllicensee

    @welllicensee.setter
    def welllicensee(self, welllicensee):
        """Sets the welllicensee of this Wellheader.


        :param welllicensee: The welllicensee of this Wellheader.  # noqa: E501
        :type: str
        """

        self._welllicensee = welllicensee

    @property
    def welllicenseno(self):
        """Gets the welllicenseno of this Wellheader.  # noqa: E501


        :return: The welllicenseno of this Wellheader.  # noqa: E501
        :rtype: str
        """
        return self._welllicenseno

    @welllicenseno.setter
    def welllicenseno(self, welllicenseno):
        """Sets the welllicenseno of this Wellheader.


        :param welllicenseno: The welllicenseno of this Wellheader.  # noqa: E501
        :type: str
        """

        self._welllicenseno = welllicenseno

    @property
    def wellname(self):
        """Gets the wellname of this Wellheader.  # noqa: E501


        :return: The wellname of this Wellheader.  # noqa: E501
        :rtype: str
        """
        return self._wellname

    @wellname.setter
    def wellname(self, wellname):
        """Sets the wellname of this Wellheader.


        :param wellname: The wellname of this Wellheader.  # noqa: E501
        :type: str
        """

        self._wellname = wellname

    @property
    def welltyp1(self):
        """Gets the welltyp1 of this Wellheader.  # noqa: E501


        :return: The welltyp1 of this Wellheader.  # noqa: E501
        :rtype: str
        """
        return self._welltyp1

    @welltyp1.setter
    def welltyp1(self, welltyp1):
        """Sets the welltyp1 of this Wellheader.


        :param welltyp1: The welltyp1 of this Wellheader.  # noqa: E501
        :type: str
        """

        self._welltyp1 = welltyp1

    @property
    def welltyp2(self):
        """Gets the welltyp2 of this Wellheader.  # noqa: E501


        :return: The welltyp2 of this Wellheader.  # noqa: E501
        :rtype: str
        """
        return self._welltyp2

    @welltyp2.setter
    def welltyp2(self, welltyp2):
        """Sets the welltyp2 of this Wellheader.


        :param welltyp2: The welltyp2 of this Wellheader.  # noqa: E501
        :type: str
        """

        self._welltyp2 = welltyp2

    @property
    def wh_drives(self):
        """Gets the wh_drives of this Wellheader.  # noqa: E501


        :return: The wh_drives of this Wellheader.  # noqa: E501
        :rtype: list[WhDrive]
        """
        return self._wh_drives

    @wh_drives.setter
    def wh_drives(self, wh_drives):
        """Sets the wh_drives of this Wellheader.


        :param wh_drives: The wh_drives of this Wellheader.  # noqa: E501
        :type: list[WhDrive]
        """

        self._wh_drives = wh_drives

    @property
    def zones(self):
        """Gets the zones of this Wellheader.  # noqa: E501


        :return: The zones of this Wellheader.  # noqa: E501
        :rtype: list[Zone]
        """
        return self._zones

    @zones.setter
    def zones(self, zones):
        """Sets the zones of this Wellheader.


        :param zones: The zones of this Wellheader.  # noqa: E501
        :type: list[Zone]
        """

        self._zones = zones

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Wellheader, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Wellheader):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
