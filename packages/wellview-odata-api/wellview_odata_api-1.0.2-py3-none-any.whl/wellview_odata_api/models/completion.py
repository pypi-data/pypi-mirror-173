# coding: utf-8

"""
    OData Service for namespace Default

    This OData service is located at http://localhost  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Completion(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'com': 'str',
        'compidpa': 'str',
        'completion_aliases': 'list[CompletionAlias]',
        'completion_links': 'list[CompletionLink]',
        'completion_statuses': 'list[CompletionStatus]',
        'completion_zones': 'list[CompletionZone]',
        'completioncode': 'str',
        'completionida': 'str',
        'completionidb': 'str',
        'completionidc': 'str',
        'completionidd': 'str',
        'completionide': 'str',
        'completionlicensee': 'str',
        'completionlicenseno': 'str',
        'completionname': 'str',
        'depthrefbtm': 'OneOfCompletionDepthrefbtm',
        'depthreftop': 'OneOfCompletionDepthreftop',
        'dttmabandon': 'datetime',
        'dttmlicense': 'datetime',
        'dttmonprod': 'datetime',
        'fieldcode': 'str',
        'fieldname': 'str',
        'idrec': 'str',
        'idwell': 'str',
        'syscreatedate': 'datetime',
        'syscreateuser': 'str',
        'syslockchildren': 'int',
        'syslockchildrenui': 'int',
        'syslockdate': 'datetime',
        'syslockme': 'int',
        'syslockmeui': 'int',
        'sysmoddate': 'datetime',
        'sysmoduser': 'str',
        'systag': 'str',
        'unitcode': 'str',
        'unitname': 'str',
        'usertxt1': 'str',
        'usertxt2': 'str',
        'usertxt3': 'str',
        'usertxt4': 'str',
        'usertxt5': 'str',
        'wellheader': 'AnyOfCompletionWellheader'
    }

    attribute_map = {
        'com': 'com',
        'compidpa': 'compidpa',
        'completion_aliases': 'completionAliases',
        'completion_links': 'completionLinks',
        'completion_statuses': 'completionStatuses',
        'completion_zones': 'completionZones',
        'completioncode': 'completioncode',
        'completionida': 'completionida',
        'completionidb': 'completionidb',
        'completionidc': 'completionidc',
        'completionidd': 'completionidd',
        'completionide': 'completionide',
        'completionlicensee': 'completionlicensee',
        'completionlicenseno': 'completionlicenseno',
        'completionname': 'completionname',
        'depthrefbtm': 'depthrefbtm',
        'depthreftop': 'depthreftop',
        'dttmabandon': 'dttmabandon',
        'dttmlicense': 'dttmlicense',
        'dttmonprod': 'dttmonprod',
        'fieldcode': 'fieldcode',
        'fieldname': 'fieldname',
        'idrec': 'idrec',
        'idwell': 'idwell',
        'syscreatedate': 'syscreatedate',
        'syscreateuser': 'syscreateuser',
        'syslockchildren': 'syslockchildren',
        'syslockchildrenui': 'syslockchildrenui',
        'syslockdate': 'syslockdate',
        'syslockme': 'syslockme',
        'syslockmeui': 'syslockmeui',
        'sysmoddate': 'sysmoddate',
        'sysmoduser': 'sysmoduser',
        'systag': 'systag',
        'unitcode': 'unitcode',
        'unitname': 'unitname',
        'usertxt1': 'usertxt1',
        'usertxt2': 'usertxt2',
        'usertxt3': 'usertxt3',
        'usertxt4': 'usertxt4',
        'usertxt5': 'usertxt5',
        'wellheader': 'wellheader'
    }

    def __init__(self, com=None, compidpa=None, completion_aliases=None, completion_links=None, completion_statuses=None, completion_zones=None, completioncode=None, completionida=None, completionidb=None, completionidc=None, completionidd=None, completionide=None, completionlicensee=None, completionlicenseno=None, completionname=None, depthrefbtm=None, depthreftop=None, dttmabandon=None, dttmlicense=None, dttmonprod=None, fieldcode=None, fieldname=None, idrec=None, idwell=None, syscreatedate=None, syscreateuser=None, syslockchildren=None, syslockchildrenui=None, syslockdate=None, syslockme=None, syslockmeui=None, sysmoddate=None, sysmoduser=None, systag=None, unitcode=None, unitname=None, usertxt1=None, usertxt2=None, usertxt3=None, usertxt4=None, usertxt5=None, wellheader=None):  # noqa: E501
        """Completion - a model defined in Swagger"""  # noqa: E501
        self._com = None
        self._compidpa = None
        self._completion_aliases = None
        self._completion_links = None
        self._completion_statuses = None
        self._completion_zones = None
        self._completioncode = None
        self._completionida = None
        self._completionidb = None
        self._completionidc = None
        self._completionidd = None
        self._completionide = None
        self._completionlicensee = None
        self._completionlicenseno = None
        self._completionname = None
        self._depthrefbtm = None
        self._depthreftop = None
        self._dttmabandon = None
        self._dttmlicense = None
        self._dttmonprod = None
        self._fieldcode = None
        self._fieldname = None
        self._idrec = None
        self._idwell = None
        self._syscreatedate = None
        self._syscreateuser = None
        self._syslockchildren = None
        self._syslockchildrenui = None
        self._syslockdate = None
        self._syslockme = None
        self._syslockmeui = None
        self._sysmoddate = None
        self._sysmoduser = None
        self._systag = None
        self._unitcode = None
        self._unitname = None
        self._usertxt1 = None
        self._usertxt2 = None
        self._usertxt3 = None
        self._usertxt4 = None
        self._usertxt5 = None
        self._wellheader = None
        self.discriminator = None
        if com is not None:
            self.com = com
        if compidpa is not None:
            self.compidpa = compidpa
        if completion_aliases is not None:
            self.completion_aliases = completion_aliases
        if completion_links is not None:
            self.completion_links = completion_links
        if completion_statuses is not None:
            self.completion_statuses = completion_statuses
        if completion_zones is not None:
            self.completion_zones = completion_zones
        if completioncode is not None:
            self.completioncode = completioncode
        if completionida is not None:
            self.completionida = completionida
        if completionidb is not None:
            self.completionidb = completionidb
        if completionidc is not None:
            self.completionidc = completionidc
        if completionidd is not None:
            self.completionidd = completionidd
        if completionide is not None:
            self.completionide = completionide
        if completionlicensee is not None:
            self.completionlicensee = completionlicensee
        if completionlicenseno is not None:
            self.completionlicenseno = completionlicenseno
        if completionname is not None:
            self.completionname = completionname
        if depthrefbtm is not None:
            self.depthrefbtm = depthrefbtm
        if depthreftop is not None:
            self.depthreftop = depthreftop
        if dttmabandon is not None:
            self.dttmabandon = dttmabandon
        if dttmlicense is not None:
            self.dttmlicense = dttmlicense
        if dttmonprod is not None:
            self.dttmonprod = dttmonprod
        if fieldcode is not None:
            self.fieldcode = fieldcode
        if fieldname is not None:
            self.fieldname = fieldname
        if idrec is not None:
            self.idrec = idrec
        if idwell is not None:
            self.idwell = idwell
        if syscreatedate is not None:
            self.syscreatedate = syscreatedate
        if syscreateuser is not None:
            self.syscreateuser = syscreateuser
        if syslockchildren is not None:
            self.syslockchildren = syslockchildren
        if syslockchildrenui is not None:
            self.syslockchildrenui = syslockchildrenui
        if syslockdate is not None:
            self.syslockdate = syslockdate
        if syslockme is not None:
            self.syslockme = syslockme
        if syslockmeui is not None:
            self.syslockmeui = syslockmeui
        if sysmoddate is not None:
            self.sysmoddate = sysmoddate
        if sysmoduser is not None:
            self.sysmoduser = sysmoduser
        if systag is not None:
            self.systag = systag
        if unitcode is not None:
            self.unitcode = unitcode
        if unitname is not None:
            self.unitname = unitname
        if usertxt1 is not None:
            self.usertxt1 = usertxt1
        if usertxt2 is not None:
            self.usertxt2 = usertxt2
        if usertxt3 is not None:
            self.usertxt3 = usertxt3
        if usertxt4 is not None:
            self.usertxt4 = usertxt4
        if usertxt5 is not None:
            self.usertxt5 = usertxt5
        if wellheader is not None:
            self.wellheader = wellheader

    @property
    def com(self):
        """Gets the com of this Completion.  # noqa: E501


        :return: The com of this Completion.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this Completion.


        :param com: The com of this Completion.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def compidpa(self):
        """Gets the compidpa of this Completion.  # noqa: E501


        :return: The compidpa of this Completion.  # noqa: E501
        :rtype: str
        """
        return self._compidpa

    @compidpa.setter
    def compidpa(self, compidpa):
        """Sets the compidpa of this Completion.


        :param compidpa: The compidpa of this Completion.  # noqa: E501
        :type: str
        """

        self._compidpa = compidpa

    @property
    def completion_aliases(self):
        """Gets the completion_aliases of this Completion.  # noqa: E501


        :return: The completion_aliases of this Completion.  # noqa: E501
        :rtype: list[CompletionAlias]
        """
        return self._completion_aliases

    @completion_aliases.setter
    def completion_aliases(self, completion_aliases):
        """Sets the completion_aliases of this Completion.


        :param completion_aliases: The completion_aliases of this Completion.  # noqa: E501
        :type: list[CompletionAlias]
        """

        self._completion_aliases = completion_aliases

    @property
    def completion_links(self):
        """Gets the completion_links of this Completion.  # noqa: E501


        :return: The completion_links of this Completion.  # noqa: E501
        :rtype: list[CompletionLink]
        """
        return self._completion_links

    @completion_links.setter
    def completion_links(self, completion_links):
        """Sets the completion_links of this Completion.


        :param completion_links: The completion_links of this Completion.  # noqa: E501
        :type: list[CompletionLink]
        """

        self._completion_links = completion_links

    @property
    def completion_statuses(self):
        """Gets the completion_statuses of this Completion.  # noqa: E501


        :return: The completion_statuses of this Completion.  # noqa: E501
        :rtype: list[CompletionStatus]
        """
        return self._completion_statuses

    @completion_statuses.setter
    def completion_statuses(self, completion_statuses):
        """Sets the completion_statuses of this Completion.


        :param completion_statuses: The completion_statuses of this Completion.  # noqa: E501
        :type: list[CompletionStatus]
        """

        self._completion_statuses = completion_statuses

    @property
    def completion_zones(self):
        """Gets the completion_zones of this Completion.  # noqa: E501


        :return: The completion_zones of this Completion.  # noqa: E501
        :rtype: list[CompletionZone]
        """
        return self._completion_zones

    @completion_zones.setter
    def completion_zones(self, completion_zones):
        """Sets the completion_zones of this Completion.


        :param completion_zones: The completion_zones of this Completion.  # noqa: E501
        :type: list[CompletionZone]
        """

        self._completion_zones = completion_zones

    @property
    def completioncode(self):
        """Gets the completioncode of this Completion.  # noqa: E501


        :return: The completioncode of this Completion.  # noqa: E501
        :rtype: str
        """
        return self._completioncode

    @completioncode.setter
    def completioncode(self, completioncode):
        """Sets the completioncode of this Completion.


        :param completioncode: The completioncode of this Completion.  # noqa: E501
        :type: str
        """

        self._completioncode = completioncode

    @property
    def completionida(self):
        """Gets the completionida of this Completion.  # noqa: E501


        :return: The completionida of this Completion.  # noqa: E501
        :rtype: str
        """
        return self._completionida

    @completionida.setter
    def completionida(self, completionida):
        """Sets the completionida of this Completion.


        :param completionida: The completionida of this Completion.  # noqa: E501
        :type: str
        """

        self._completionida = completionida

    @property
    def completionidb(self):
        """Gets the completionidb of this Completion.  # noqa: E501


        :return: The completionidb of this Completion.  # noqa: E501
        :rtype: str
        """
        return self._completionidb

    @completionidb.setter
    def completionidb(self, completionidb):
        """Sets the completionidb of this Completion.


        :param completionidb: The completionidb of this Completion.  # noqa: E501
        :type: str
        """

        self._completionidb = completionidb

    @property
    def completionidc(self):
        """Gets the completionidc of this Completion.  # noqa: E501


        :return: The completionidc of this Completion.  # noqa: E501
        :rtype: str
        """
        return self._completionidc

    @completionidc.setter
    def completionidc(self, completionidc):
        """Sets the completionidc of this Completion.


        :param completionidc: The completionidc of this Completion.  # noqa: E501
        :type: str
        """

        self._completionidc = completionidc

    @property
    def completionidd(self):
        """Gets the completionidd of this Completion.  # noqa: E501


        :return: The completionidd of this Completion.  # noqa: E501
        :rtype: str
        """
        return self._completionidd

    @completionidd.setter
    def completionidd(self, completionidd):
        """Sets the completionidd of this Completion.


        :param completionidd: The completionidd of this Completion.  # noqa: E501
        :type: str
        """

        self._completionidd = completionidd

    @property
    def completionide(self):
        """Gets the completionide of this Completion.  # noqa: E501


        :return: The completionide of this Completion.  # noqa: E501
        :rtype: str
        """
        return self._completionide

    @completionide.setter
    def completionide(self, completionide):
        """Sets the completionide of this Completion.


        :param completionide: The completionide of this Completion.  # noqa: E501
        :type: str
        """

        self._completionide = completionide

    @property
    def completionlicensee(self):
        """Gets the completionlicensee of this Completion.  # noqa: E501


        :return: The completionlicensee of this Completion.  # noqa: E501
        :rtype: str
        """
        return self._completionlicensee

    @completionlicensee.setter
    def completionlicensee(self, completionlicensee):
        """Sets the completionlicensee of this Completion.


        :param completionlicensee: The completionlicensee of this Completion.  # noqa: E501
        :type: str
        """

        self._completionlicensee = completionlicensee

    @property
    def completionlicenseno(self):
        """Gets the completionlicenseno of this Completion.  # noqa: E501


        :return: The completionlicenseno of this Completion.  # noqa: E501
        :rtype: str
        """
        return self._completionlicenseno

    @completionlicenseno.setter
    def completionlicenseno(self, completionlicenseno):
        """Sets the completionlicenseno of this Completion.


        :param completionlicenseno: The completionlicenseno of this Completion.  # noqa: E501
        :type: str
        """

        self._completionlicenseno = completionlicenseno

    @property
    def completionname(self):
        """Gets the completionname of this Completion.  # noqa: E501


        :return: The completionname of this Completion.  # noqa: E501
        :rtype: str
        """
        return self._completionname

    @completionname.setter
    def completionname(self, completionname):
        """Sets the completionname of this Completion.


        :param completionname: The completionname of this Completion.  # noqa: E501
        :type: str
        """

        self._completionname = completionname

    @property
    def depthrefbtm(self):
        """Gets the depthrefbtm of this Completion.  # noqa: E501


        :return: The depthrefbtm of this Completion.  # noqa: E501
        :rtype: OneOfCompletionDepthrefbtm
        """
        return self._depthrefbtm

    @depthrefbtm.setter
    def depthrefbtm(self, depthrefbtm):
        """Sets the depthrefbtm of this Completion.


        :param depthrefbtm: The depthrefbtm of this Completion.  # noqa: E501
        :type: OneOfCompletionDepthrefbtm
        """

        self._depthrefbtm = depthrefbtm

    @property
    def depthreftop(self):
        """Gets the depthreftop of this Completion.  # noqa: E501


        :return: The depthreftop of this Completion.  # noqa: E501
        :rtype: OneOfCompletionDepthreftop
        """
        return self._depthreftop

    @depthreftop.setter
    def depthreftop(self, depthreftop):
        """Sets the depthreftop of this Completion.


        :param depthreftop: The depthreftop of this Completion.  # noqa: E501
        :type: OneOfCompletionDepthreftop
        """

        self._depthreftop = depthreftop

    @property
    def dttmabandon(self):
        """Gets the dttmabandon of this Completion.  # noqa: E501


        :return: The dttmabandon of this Completion.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmabandon

    @dttmabandon.setter
    def dttmabandon(self, dttmabandon):
        """Sets the dttmabandon of this Completion.


        :param dttmabandon: The dttmabandon of this Completion.  # noqa: E501
        :type: datetime
        """

        self._dttmabandon = dttmabandon

    @property
    def dttmlicense(self):
        """Gets the dttmlicense of this Completion.  # noqa: E501


        :return: The dttmlicense of this Completion.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmlicense

    @dttmlicense.setter
    def dttmlicense(self, dttmlicense):
        """Sets the dttmlicense of this Completion.


        :param dttmlicense: The dttmlicense of this Completion.  # noqa: E501
        :type: datetime
        """

        self._dttmlicense = dttmlicense

    @property
    def dttmonprod(self):
        """Gets the dttmonprod of this Completion.  # noqa: E501


        :return: The dttmonprod of this Completion.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmonprod

    @dttmonprod.setter
    def dttmonprod(self, dttmonprod):
        """Sets the dttmonprod of this Completion.


        :param dttmonprod: The dttmonprod of this Completion.  # noqa: E501
        :type: datetime
        """

        self._dttmonprod = dttmonprod

    @property
    def fieldcode(self):
        """Gets the fieldcode of this Completion.  # noqa: E501


        :return: The fieldcode of this Completion.  # noqa: E501
        :rtype: str
        """
        return self._fieldcode

    @fieldcode.setter
    def fieldcode(self, fieldcode):
        """Sets the fieldcode of this Completion.


        :param fieldcode: The fieldcode of this Completion.  # noqa: E501
        :type: str
        """

        self._fieldcode = fieldcode

    @property
    def fieldname(self):
        """Gets the fieldname of this Completion.  # noqa: E501


        :return: The fieldname of this Completion.  # noqa: E501
        :rtype: str
        """
        return self._fieldname

    @fieldname.setter
    def fieldname(self, fieldname):
        """Sets the fieldname of this Completion.


        :param fieldname: The fieldname of this Completion.  # noqa: E501
        :type: str
        """

        self._fieldname = fieldname

    @property
    def idrec(self):
        """Gets the idrec of this Completion.  # noqa: E501


        :return: The idrec of this Completion.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this Completion.


        :param idrec: The idrec of this Completion.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idwell(self):
        """Gets the idwell of this Completion.  # noqa: E501


        :return: The idwell of this Completion.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this Completion.


        :param idwell: The idwell of this Completion.  # noqa: E501
        :type: str
        """

        self._idwell = idwell

    @property
    def syscreatedate(self):
        """Gets the syscreatedate of this Completion.  # noqa: E501


        :return: The syscreatedate of this Completion.  # noqa: E501
        :rtype: datetime
        """
        return self._syscreatedate

    @syscreatedate.setter
    def syscreatedate(self, syscreatedate):
        """Sets the syscreatedate of this Completion.


        :param syscreatedate: The syscreatedate of this Completion.  # noqa: E501
        :type: datetime
        """

        self._syscreatedate = syscreatedate

    @property
    def syscreateuser(self):
        """Gets the syscreateuser of this Completion.  # noqa: E501


        :return: The syscreateuser of this Completion.  # noqa: E501
        :rtype: str
        """
        return self._syscreateuser

    @syscreateuser.setter
    def syscreateuser(self, syscreateuser):
        """Sets the syscreateuser of this Completion.


        :param syscreateuser: The syscreateuser of this Completion.  # noqa: E501
        :type: str
        """

        self._syscreateuser = syscreateuser

    @property
    def syslockchildren(self):
        """Gets the syslockchildren of this Completion.  # noqa: E501


        :return: The syslockchildren of this Completion.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildren

    @syslockchildren.setter
    def syslockchildren(self, syslockchildren):
        """Sets the syslockchildren of this Completion.


        :param syslockchildren: The syslockchildren of this Completion.  # noqa: E501
        :type: int
        """

        self._syslockchildren = syslockchildren

    @property
    def syslockchildrenui(self):
        """Gets the syslockchildrenui of this Completion.  # noqa: E501


        :return: The syslockchildrenui of this Completion.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildrenui

    @syslockchildrenui.setter
    def syslockchildrenui(self, syslockchildrenui):
        """Sets the syslockchildrenui of this Completion.


        :param syslockchildrenui: The syslockchildrenui of this Completion.  # noqa: E501
        :type: int
        """

        self._syslockchildrenui = syslockchildrenui

    @property
    def syslockdate(self):
        """Gets the syslockdate of this Completion.  # noqa: E501


        :return: The syslockdate of this Completion.  # noqa: E501
        :rtype: datetime
        """
        return self._syslockdate

    @syslockdate.setter
    def syslockdate(self, syslockdate):
        """Sets the syslockdate of this Completion.


        :param syslockdate: The syslockdate of this Completion.  # noqa: E501
        :type: datetime
        """

        self._syslockdate = syslockdate

    @property
    def syslockme(self):
        """Gets the syslockme of this Completion.  # noqa: E501


        :return: The syslockme of this Completion.  # noqa: E501
        :rtype: int
        """
        return self._syslockme

    @syslockme.setter
    def syslockme(self, syslockme):
        """Sets the syslockme of this Completion.


        :param syslockme: The syslockme of this Completion.  # noqa: E501
        :type: int
        """

        self._syslockme = syslockme

    @property
    def syslockmeui(self):
        """Gets the syslockmeui of this Completion.  # noqa: E501


        :return: The syslockmeui of this Completion.  # noqa: E501
        :rtype: int
        """
        return self._syslockmeui

    @syslockmeui.setter
    def syslockmeui(self, syslockmeui):
        """Sets the syslockmeui of this Completion.


        :param syslockmeui: The syslockmeui of this Completion.  # noqa: E501
        :type: int
        """

        self._syslockmeui = syslockmeui

    @property
    def sysmoddate(self):
        """Gets the sysmoddate of this Completion.  # noqa: E501


        :return: The sysmoddate of this Completion.  # noqa: E501
        :rtype: datetime
        """
        return self._sysmoddate

    @sysmoddate.setter
    def sysmoddate(self, sysmoddate):
        """Sets the sysmoddate of this Completion.


        :param sysmoddate: The sysmoddate of this Completion.  # noqa: E501
        :type: datetime
        """

        self._sysmoddate = sysmoddate

    @property
    def sysmoduser(self):
        """Gets the sysmoduser of this Completion.  # noqa: E501


        :return: The sysmoduser of this Completion.  # noqa: E501
        :rtype: str
        """
        return self._sysmoduser

    @sysmoduser.setter
    def sysmoduser(self, sysmoduser):
        """Sets the sysmoduser of this Completion.


        :param sysmoduser: The sysmoduser of this Completion.  # noqa: E501
        :type: str
        """

        self._sysmoduser = sysmoduser

    @property
    def systag(self):
        """Gets the systag of this Completion.  # noqa: E501


        :return: The systag of this Completion.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this Completion.


        :param systag: The systag of this Completion.  # noqa: E501
        :type: str
        """

        self._systag = systag

    @property
    def unitcode(self):
        """Gets the unitcode of this Completion.  # noqa: E501


        :return: The unitcode of this Completion.  # noqa: E501
        :rtype: str
        """
        return self._unitcode

    @unitcode.setter
    def unitcode(self, unitcode):
        """Sets the unitcode of this Completion.


        :param unitcode: The unitcode of this Completion.  # noqa: E501
        :type: str
        """

        self._unitcode = unitcode

    @property
    def unitname(self):
        """Gets the unitname of this Completion.  # noqa: E501


        :return: The unitname of this Completion.  # noqa: E501
        :rtype: str
        """
        return self._unitname

    @unitname.setter
    def unitname(self, unitname):
        """Sets the unitname of this Completion.


        :param unitname: The unitname of this Completion.  # noqa: E501
        :type: str
        """

        self._unitname = unitname

    @property
    def usertxt1(self):
        """Gets the usertxt1 of this Completion.  # noqa: E501


        :return: The usertxt1 of this Completion.  # noqa: E501
        :rtype: str
        """
        return self._usertxt1

    @usertxt1.setter
    def usertxt1(self, usertxt1):
        """Sets the usertxt1 of this Completion.


        :param usertxt1: The usertxt1 of this Completion.  # noqa: E501
        :type: str
        """

        self._usertxt1 = usertxt1

    @property
    def usertxt2(self):
        """Gets the usertxt2 of this Completion.  # noqa: E501


        :return: The usertxt2 of this Completion.  # noqa: E501
        :rtype: str
        """
        return self._usertxt2

    @usertxt2.setter
    def usertxt2(self, usertxt2):
        """Sets the usertxt2 of this Completion.


        :param usertxt2: The usertxt2 of this Completion.  # noqa: E501
        :type: str
        """

        self._usertxt2 = usertxt2

    @property
    def usertxt3(self):
        """Gets the usertxt3 of this Completion.  # noqa: E501


        :return: The usertxt3 of this Completion.  # noqa: E501
        :rtype: str
        """
        return self._usertxt3

    @usertxt3.setter
    def usertxt3(self, usertxt3):
        """Sets the usertxt3 of this Completion.


        :param usertxt3: The usertxt3 of this Completion.  # noqa: E501
        :type: str
        """

        self._usertxt3 = usertxt3

    @property
    def usertxt4(self):
        """Gets the usertxt4 of this Completion.  # noqa: E501


        :return: The usertxt4 of this Completion.  # noqa: E501
        :rtype: str
        """
        return self._usertxt4

    @usertxt4.setter
    def usertxt4(self, usertxt4):
        """Sets the usertxt4 of this Completion.


        :param usertxt4: The usertxt4 of this Completion.  # noqa: E501
        :type: str
        """

        self._usertxt4 = usertxt4

    @property
    def usertxt5(self):
        """Gets the usertxt5 of this Completion.  # noqa: E501


        :return: The usertxt5 of this Completion.  # noqa: E501
        :rtype: str
        """
        return self._usertxt5

    @usertxt5.setter
    def usertxt5(self, usertxt5):
        """Sets the usertxt5 of this Completion.


        :param usertxt5: The usertxt5 of this Completion.  # noqa: E501
        :type: str
        """

        self._usertxt5 = usertxt5

    @property
    def wellheader(self):
        """Gets the wellheader of this Completion.  # noqa: E501


        :return: The wellheader of this Completion.  # noqa: E501
        :rtype: AnyOfCompletionWellheader
        """
        return self._wellheader

    @wellheader.setter
    def wellheader(self, wellheader):
        """Sets the wellheader of this Completion.


        :param wellheader: The wellheader of this Completion.  # noqa: E501
        :type: AnyOfCompletionWellheader
        """

        self._wellheader = wellheader

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Completion, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Completion):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
