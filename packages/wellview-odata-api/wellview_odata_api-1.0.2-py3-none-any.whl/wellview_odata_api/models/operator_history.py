# coding: utf-8

"""
    OData Service for namespace Default

    This OData service is located at http://localhost  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OperatorHistory(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'operator': 'str',
        'changetyp1': 'str',
        'changetyp2': 'str',
        'com': 'str',
        'dttmend': 'datetime',
        'dttmstart': 'datetime',
        'idrec': 'str',
        'idwell': 'str',
        'operator_history_links': 'list[OperatorHistoryLink]',
        'operatorcode': 'str',
        'source': 'str',
        'syscreatedate': 'datetime',
        'syscreateuser': 'str',
        'syslockchildren': 'int',
        'syslockchildrenui': 'int',
        'syslockdate': 'datetime',
        'syslockme': 'int',
        'syslockmeui': 'int',
        'sysmoddate': 'datetime',
        'sysmoduser': 'str',
        'systag': 'str',
        'wellheader': 'AnyOfOperatorHistoryWellheader'
    }

    attribute_map = {
        'operator': '_operator',
        'changetyp1': 'changetyp1',
        'changetyp2': 'changetyp2',
        'com': 'com',
        'dttmend': 'dttmend',
        'dttmstart': 'dttmstart',
        'idrec': 'idrec',
        'idwell': 'idwell',
        'operator_history_links': 'operatorHistoryLinks',
        'operatorcode': 'operatorcode',
        'source': 'source',
        'syscreatedate': 'syscreatedate',
        'syscreateuser': 'syscreateuser',
        'syslockchildren': 'syslockchildren',
        'syslockchildrenui': 'syslockchildrenui',
        'syslockdate': 'syslockdate',
        'syslockme': 'syslockme',
        'syslockmeui': 'syslockmeui',
        'sysmoddate': 'sysmoddate',
        'sysmoduser': 'sysmoduser',
        'systag': 'systag',
        'wellheader': 'wellheader'
    }

    def __init__(self, operator=None, changetyp1=None, changetyp2=None, com=None, dttmend=None, dttmstart=None, idrec=None, idwell=None, operator_history_links=None, operatorcode=None, source=None, syscreatedate=None, syscreateuser=None, syslockchildren=None, syslockchildrenui=None, syslockdate=None, syslockme=None, syslockmeui=None, sysmoddate=None, sysmoduser=None, systag=None, wellheader=None):  # noqa: E501
        """OperatorHistory - a model defined in Swagger"""  # noqa: E501
        self._operator = None
        self._changetyp1 = None
        self._changetyp2 = None
        self._com = None
        self._dttmend = None
        self._dttmstart = None
        self._idrec = None
        self._idwell = None
        self._operator_history_links = None
        self._operatorcode = None
        self._source = None
        self._syscreatedate = None
        self._syscreateuser = None
        self._syslockchildren = None
        self._syslockchildrenui = None
        self._syslockdate = None
        self._syslockme = None
        self._syslockmeui = None
        self._sysmoddate = None
        self._sysmoduser = None
        self._systag = None
        self._wellheader = None
        self.discriminator = None
        if operator is not None:
            self.operator = operator
        if changetyp1 is not None:
            self.changetyp1 = changetyp1
        if changetyp2 is not None:
            self.changetyp2 = changetyp2
        if com is not None:
            self.com = com
        if dttmend is not None:
            self.dttmend = dttmend
        if dttmstart is not None:
            self.dttmstart = dttmstart
        if idrec is not None:
            self.idrec = idrec
        if idwell is not None:
            self.idwell = idwell
        if operator_history_links is not None:
            self.operator_history_links = operator_history_links
        if operatorcode is not None:
            self.operatorcode = operatorcode
        if source is not None:
            self.source = source
        if syscreatedate is not None:
            self.syscreatedate = syscreatedate
        if syscreateuser is not None:
            self.syscreateuser = syscreateuser
        if syslockchildren is not None:
            self.syslockchildren = syslockchildren
        if syslockchildrenui is not None:
            self.syslockchildrenui = syslockchildrenui
        if syslockdate is not None:
            self.syslockdate = syslockdate
        if syslockme is not None:
            self.syslockme = syslockme
        if syslockmeui is not None:
            self.syslockmeui = syslockmeui
        if sysmoddate is not None:
            self.sysmoddate = sysmoddate
        if sysmoduser is not None:
            self.sysmoduser = sysmoduser
        if systag is not None:
            self.systag = systag
        if wellheader is not None:
            self.wellheader = wellheader

    @property
    def operator(self):
        """Gets the operator of this OperatorHistory.  # noqa: E501


        :return: The operator of this OperatorHistory.  # noqa: E501
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this OperatorHistory.


        :param operator: The operator of this OperatorHistory.  # noqa: E501
        :type: str
        """

        self._operator = operator

    @property
    def changetyp1(self):
        """Gets the changetyp1 of this OperatorHistory.  # noqa: E501


        :return: The changetyp1 of this OperatorHistory.  # noqa: E501
        :rtype: str
        """
        return self._changetyp1

    @changetyp1.setter
    def changetyp1(self, changetyp1):
        """Sets the changetyp1 of this OperatorHistory.


        :param changetyp1: The changetyp1 of this OperatorHistory.  # noqa: E501
        :type: str
        """

        self._changetyp1 = changetyp1

    @property
    def changetyp2(self):
        """Gets the changetyp2 of this OperatorHistory.  # noqa: E501


        :return: The changetyp2 of this OperatorHistory.  # noqa: E501
        :rtype: str
        """
        return self._changetyp2

    @changetyp2.setter
    def changetyp2(self, changetyp2):
        """Sets the changetyp2 of this OperatorHistory.


        :param changetyp2: The changetyp2 of this OperatorHistory.  # noqa: E501
        :type: str
        """

        self._changetyp2 = changetyp2

    @property
    def com(self):
        """Gets the com of this OperatorHistory.  # noqa: E501


        :return: The com of this OperatorHistory.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this OperatorHistory.


        :param com: The com of this OperatorHistory.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def dttmend(self):
        """Gets the dttmend of this OperatorHistory.  # noqa: E501


        :return: The dttmend of this OperatorHistory.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmend

    @dttmend.setter
    def dttmend(self, dttmend):
        """Sets the dttmend of this OperatorHistory.


        :param dttmend: The dttmend of this OperatorHistory.  # noqa: E501
        :type: datetime
        """

        self._dttmend = dttmend

    @property
    def dttmstart(self):
        """Gets the dttmstart of this OperatorHistory.  # noqa: E501


        :return: The dttmstart of this OperatorHistory.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmstart

    @dttmstart.setter
    def dttmstart(self, dttmstart):
        """Sets the dttmstart of this OperatorHistory.


        :param dttmstart: The dttmstart of this OperatorHistory.  # noqa: E501
        :type: datetime
        """

        self._dttmstart = dttmstart

    @property
    def idrec(self):
        """Gets the idrec of this OperatorHistory.  # noqa: E501


        :return: The idrec of this OperatorHistory.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this OperatorHistory.


        :param idrec: The idrec of this OperatorHistory.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idwell(self):
        """Gets the idwell of this OperatorHistory.  # noqa: E501


        :return: The idwell of this OperatorHistory.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this OperatorHistory.


        :param idwell: The idwell of this OperatorHistory.  # noqa: E501
        :type: str
        """

        self._idwell = idwell

    @property
    def operator_history_links(self):
        """Gets the operator_history_links of this OperatorHistory.  # noqa: E501


        :return: The operator_history_links of this OperatorHistory.  # noqa: E501
        :rtype: list[OperatorHistoryLink]
        """
        return self._operator_history_links

    @operator_history_links.setter
    def operator_history_links(self, operator_history_links):
        """Sets the operator_history_links of this OperatorHistory.


        :param operator_history_links: The operator_history_links of this OperatorHistory.  # noqa: E501
        :type: list[OperatorHistoryLink]
        """

        self._operator_history_links = operator_history_links

    @property
    def operatorcode(self):
        """Gets the operatorcode of this OperatorHistory.  # noqa: E501


        :return: The operatorcode of this OperatorHistory.  # noqa: E501
        :rtype: str
        """
        return self._operatorcode

    @operatorcode.setter
    def operatorcode(self, operatorcode):
        """Sets the operatorcode of this OperatorHistory.


        :param operatorcode: The operatorcode of this OperatorHistory.  # noqa: E501
        :type: str
        """

        self._operatorcode = operatorcode

    @property
    def source(self):
        """Gets the source of this OperatorHistory.  # noqa: E501


        :return: The source of this OperatorHistory.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this OperatorHistory.


        :param source: The source of this OperatorHistory.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def syscreatedate(self):
        """Gets the syscreatedate of this OperatorHistory.  # noqa: E501


        :return: The syscreatedate of this OperatorHistory.  # noqa: E501
        :rtype: datetime
        """
        return self._syscreatedate

    @syscreatedate.setter
    def syscreatedate(self, syscreatedate):
        """Sets the syscreatedate of this OperatorHistory.


        :param syscreatedate: The syscreatedate of this OperatorHistory.  # noqa: E501
        :type: datetime
        """

        self._syscreatedate = syscreatedate

    @property
    def syscreateuser(self):
        """Gets the syscreateuser of this OperatorHistory.  # noqa: E501


        :return: The syscreateuser of this OperatorHistory.  # noqa: E501
        :rtype: str
        """
        return self._syscreateuser

    @syscreateuser.setter
    def syscreateuser(self, syscreateuser):
        """Sets the syscreateuser of this OperatorHistory.


        :param syscreateuser: The syscreateuser of this OperatorHistory.  # noqa: E501
        :type: str
        """

        self._syscreateuser = syscreateuser

    @property
    def syslockchildren(self):
        """Gets the syslockchildren of this OperatorHistory.  # noqa: E501


        :return: The syslockchildren of this OperatorHistory.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildren

    @syslockchildren.setter
    def syslockchildren(self, syslockchildren):
        """Sets the syslockchildren of this OperatorHistory.


        :param syslockchildren: The syslockchildren of this OperatorHistory.  # noqa: E501
        :type: int
        """

        self._syslockchildren = syslockchildren

    @property
    def syslockchildrenui(self):
        """Gets the syslockchildrenui of this OperatorHistory.  # noqa: E501


        :return: The syslockchildrenui of this OperatorHistory.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildrenui

    @syslockchildrenui.setter
    def syslockchildrenui(self, syslockchildrenui):
        """Sets the syslockchildrenui of this OperatorHistory.


        :param syslockchildrenui: The syslockchildrenui of this OperatorHistory.  # noqa: E501
        :type: int
        """

        self._syslockchildrenui = syslockchildrenui

    @property
    def syslockdate(self):
        """Gets the syslockdate of this OperatorHistory.  # noqa: E501


        :return: The syslockdate of this OperatorHistory.  # noqa: E501
        :rtype: datetime
        """
        return self._syslockdate

    @syslockdate.setter
    def syslockdate(self, syslockdate):
        """Sets the syslockdate of this OperatorHistory.


        :param syslockdate: The syslockdate of this OperatorHistory.  # noqa: E501
        :type: datetime
        """

        self._syslockdate = syslockdate

    @property
    def syslockme(self):
        """Gets the syslockme of this OperatorHistory.  # noqa: E501


        :return: The syslockme of this OperatorHistory.  # noqa: E501
        :rtype: int
        """
        return self._syslockme

    @syslockme.setter
    def syslockme(self, syslockme):
        """Sets the syslockme of this OperatorHistory.


        :param syslockme: The syslockme of this OperatorHistory.  # noqa: E501
        :type: int
        """

        self._syslockme = syslockme

    @property
    def syslockmeui(self):
        """Gets the syslockmeui of this OperatorHistory.  # noqa: E501


        :return: The syslockmeui of this OperatorHistory.  # noqa: E501
        :rtype: int
        """
        return self._syslockmeui

    @syslockmeui.setter
    def syslockmeui(self, syslockmeui):
        """Sets the syslockmeui of this OperatorHistory.


        :param syslockmeui: The syslockmeui of this OperatorHistory.  # noqa: E501
        :type: int
        """

        self._syslockmeui = syslockmeui

    @property
    def sysmoddate(self):
        """Gets the sysmoddate of this OperatorHistory.  # noqa: E501


        :return: The sysmoddate of this OperatorHistory.  # noqa: E501
        :rtype: datetime
        """
        return self._sysmoddate

    @sysmoddate.setter
    def sysmoddate(self, sysmoddate):
        """Sets the sysmoddate of this OperatorHistory.


        :param sysmoddate: The sysmoddate of this OperatorHistory.  # noqa: E501
        :type: datetime
        """

        self._sysmoddate = sysmoddate

    @property
    def sysmoduser(self):
        """Gets the sysmoduser of this OperatorHistory.  # noqa: E501


        :return: The sysmoduser of this OperatorHistory.  # noqa: E501
        :rtype: str
        """
        return self._sysmoduser

    @sysmoduser.setter
    def sysmoduser(self, sysmoduser):
        """Sets the sysmoduser of this OperatorHistory.


        :param sysmoduser: The sysmoduser of this OperatorHistory.  # noqa: E501
        :type: str
        """

        self._sysmoduser = sysmoduser

    @property
    def systag(self):
        """Gets the systag of this OperatorHistory.  # noqa: E501


        :return: The systag of this OperatorHistory.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this OperatorHistory.


        :param systag: The systag of this OperatorHistory.  # noqa: E501
        :type: str
        """

        self._systag = systag

    @property
    def wellheader(self):
        """Gets the wellheader of this OperatorHistory.  # noqa: E501


        :return: The wellheader of this OperatorHistory.  # noqa: E501
        :rtype: AnyOfOperatorHistoryWellheader
        """
        return self._wellheader

    @wellheader.setter
    def wellheader(self, wellheader):
        """Sets the wellheader of this OperatorHistory.


        :param wellheader: The wellheader of this OperatorHistory.  # noqa: E501
        :type: AnyOfOperatorHistoryWellheader
        """

        self._wellheader = wellheader

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OperatorHistory, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OperatorHistory):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
