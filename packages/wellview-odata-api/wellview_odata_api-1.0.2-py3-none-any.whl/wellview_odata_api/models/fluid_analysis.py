# coding: utf-8

"""
    OData Service for namespace Default

    This OData service is located at http://localhost  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FluidAnalysis(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'analysistyp': 'str',
        'analyst': 'str',
        'com': 'str',
        'depthbtm': 'OneOfFluidAnalysisDepthbtm',
        'depthtop': 'OneOfFluidAnalysisDepthtop',
        'des': 'str',
        'dttmreceived': 'datetime',
        'dttmreport': 'datetime',
        'dttmsample': 'datetime',
        'fluid_analysis_gases': 'list[FluidAnalysisGas]',
        'fluid_analysis_liquids': 'list[FluidAnalysisLiquid]',
        'fluid_analysis_oils': 'list[FluidAnalysisOil]',
        'fluid_analysis_waters': 'list[FluidAnalysisWater]',
        'idrec': 'str',
        'idreczonecompletion': 'str',
        'idreczonecompletiontk': 'str',
        'idwell': 'str',
        'locsample': 'str',
        'presgaugesource': 'OneOfFluidAnalysisPresgaugesource',
        'presreservoir': 'OneOfFluidAnalysisPresreservoir',
        'pressample': 'OneOfFluidAnalysisPressample',
        'pressamplerec': 'OneOfFluidAnalysisPressamplerec',
        'presseparator': 'OneOfFluidAnalysisPresseparator',
        'refnolaboratory': 'str',
        'refnosample': 'str',
        'refnotest': 'str',
        'sampletyp1': 'str',
        'syscreatedate': 'datetime',
        'syscreateuser': 'str',
        'syslockchildren': 'int',
        'syslockchildrenui': 'int',
        'syslockdate': 'datetime',
        'syslockme': 'int',
        'syslockmeui': 'int',
        'sysmoddate': 'datetime',
        'sysmoduser': 'str',
        'systag': 'str',
        'tempgaugesource': 'OneOfFluidAnalysisTempgaugesource',
        'tempreservoir': 'OneOfFluidAnalysisTempreservoir',
        'tempsample': 'OneOfFluidAnalysisTempsample',
        'tempsamplerec': 'OneOfFluidAnalysisTempsamplerec',
        'tempseparator': 'OneOfFluidAnalysisTempseparator',
        'testedby': 'str',
        'wellheader': 'AnyOfFluidAnalysisWellheader'
    }

    attribute_map = {
        'analysistyp': 'analysistyp',
        'analyst': 'analyst',
        'com': 'com',
        'depthbtm': 'depthbtm',
        'depthtop': 'depthtop',
        'des': 'des',
        'dttmreceived': 'dttmreceived',
        'dttmreport': 'dttmreport',
        'dttmsample': 'dttmsample',
        'fluid_analysis_gases': 'fluidAnalysisGases',
        'fluid_analysis_liquids': 'fluidAnalysisLiquids',
        'fluid_analysis_oils': 'fluidAnalysisOils',
        'fluid_analysis_waters': 'fluidAnalysisWaters',
        'idrec': 'idrec',
        'idreczonecompletion': 'idreczonecompletion',
        'idreczonecompletiontk': 'idreczonecompletiontk',
        'idwell': 'idwell',
        'locsample': 'locsample',
        'presgaugesource': 'presgaugesource',
        'presreservoir': 'presreservoir',
        'pressample': 'pressample',
        'pressamplerec': 'pressamplerec',
        'presseparator': 'presseparator',
        'refnolaboratory': 'refnolaboratory',
        'refnosample': 'refnosample',
        'refnotest': 'refnotest',
        'sampletyp1': 'sampletyp1',
        'syscreatedate': 'syscreatedate',
        'syscreateuser': 'syscreateuser',
        'syslockchildren': 'syslockchildren',
        'syslockchildrenui': 'syslockchildrenui',
        'syslockdate': 'syslockdate',
        'syslockme': 'syslockme',
        'syslockmeui': 'syslockmeui',
        'sysmoddate': 'sysmoddate',
        'sysmoduser': 'sysmoduser',
        'systag': 'systag',
        'tempgaugesource': 'tempgaugesource',
        'tempreservoir': 'tempreservoir',
        'tempsample': 'tempsample',
        'tempsamplerec': 'tempsamplerec',
        'tempseparator': 'tempseparator',
        'testedby': 'testedby',
        'wellheader': 'wellheader'
    }

    def __init__(self, analysistyp=None, analyst=None, com=None, depthbtm=None, depthtop=None, des=None, dttmreceived=None, dttmreport=None, dttmsample=None, fluid_analysis_gases=None, fluid_analysis_liquids=None, fluid_analysis_oils=None, fluid_analysis_waters=None, idrec=None, idreczonecompletion=None, idreczonecompletiontk=None, idwell=None, locsample=None, presgaugesource=None, presreservoir=None, pressample=None, pressamplerec=None, presseparator=None, refnolaboratory=None, refnosample=None, refnotest=None, sampletyp1=None, syscreatedate=None, syscreateuser=None, syslockchildren=None, syslockchildrenui=None, syslockdate=None, syslockme=None, syslockmeui=None, sysmoddate=None, sysmoduser=None, systag=None, tempgaugesource=None, tempreservoir=None, tempsample=None, tempsamplerec=None, tempseparator=None, testedby=None, wellheader=None):  # noqa: E501
        """FluidAnalysis - a model defined in Swagger"""  # noqa: E501
        self._analysistyp = None
        self._analyst = None
        self._com = None
        self._depthbtm = None
        self._depthtop = None
        self._des = None
        self._dttmreceived = None
        self._dttmreport = None
        self._dttmsample = None
        self._fluid_analysis_gases = None
        self._fluid_analysis_liquids = None
        self._fluid_analysis_oils = None
        self._fluid_analysis_waters = None
        self._idrec = None
        self._idreczonecompletion = None
        self._idreczonecompletiontk = None
        self._idwell = None
        self._locsample = None
        self._presgaugesource = None
        self._presreservoir = None
        self._pressample = None
        self._pressamplerec = None
        self._presseparator = None
        self._refnolaboratory = None
        self._refnosample = None
        self._refnotest = None
        self._sampletyp1 = None
        self._syscreatedate = None
        self._syscreateuser = None
        self._syslockchildren = None
        self._syslockchildrenui = None
        self._syslockdate = None
        self._syslockme = None
        self._syslockmeui = None
        self._sysmoddate = None
        self._sysmoduser = None
        self._systag = None
        self._tempgaugesource = None
        self._tempreservoir = None
        self._tempsample = None
        self._tempsamplerec = None
        self._tempseparator = None
        self._testedby = None
        self._wellheader = None
        self.discriminator = None
        if analysistyp is not None:
            self.analysistyp = analysistyp
        if analyst is not None:
            self.analyst = analyst
        if com is not None:
            self.com = com
        if depthbtm is not None:
            self.depthbtm = depthbtm
        if depthtop is not None:
            self.depthtop = depthtop
        if des is not None:
            self.des = des
        if dttmreceived is not None:
            self.dttmreceived = dttmreceived
        if dttmreport is not None:
            self.dttmreport = dttmreport
        if dttmsample is not None:
            self.dttmsample = dttmsample
        if fluid_analysis_gases is not None:
            self.fluid_analysis_gases = fluid_analysis_gases
        if fluid_analysis_liquids is not None:
            self.fluid_analysis_liquids = fluid_analysis_liquids
        if fluid_analysis_oils is not None:
            self.fluid_analysis_oils = fluid_analysis_oils
        if fluid_analysis_waters is not None:
            self.fluid_analysis_waters = fluid_analysis_waters
        if idrec is not None:
            self.idrec = idrec
        if idreczonecompletion is not None:
            self.idreczonecompletion = idreczonecompletion
        if idreczonecompletiontk is not None:
            self.idreczonecompletiontk = idreczonecompletiontk
        if idwell is not None:
            self.idwell = idwell
        if locsample is not None:
            self.locsample = locsample
        if presgaugesource is not None:
            self.presgaugesource = presgaugesource
        if presreservoir is not None:
            self.presreservoir = presreservoir
        if pressample is not None:
            self.pressample = pressample
        if pressamplerec is not None:
            self.pressamplerec = pressamplerec
        if presseparator is not None:
            self.presseparator = presseparator
        if refnolaboratory is not None:
            self.refnolaboratory = refnolaboratory
        if refnosample is not None:
            self.refnosample = refnosample
        if refnotest is not None:
            self.refnotest = refnotest
        if sampletyp1 is not None:
            self.sampletyp1 = sampletyp1
        if syscreatedate is not None:
            self.syscreatedate = syscreatedate
        if syscreateuser is not None:
            self.syscreateuser = syscreateuser
        if syslockchildren is not None:
            self.syslockchildren = syslockchildren
        if syslockchildrenui is not None:
            self.syslockchildrenui = syslockchildrenui
        if syslockdate is not None:
            self.syslockdate = syslockdate
        if syslockme is not None:
            self.syslockme = syslockme
        if syslockmeui is not None:
            self.syslockmeui = syslockmeui
        if sysmoddate is not None:
            self.sysmoddate = sysmoddate
        if sysmoduser is not None:
            self.sysmoduser = sysmoduser
        if systag is not None:
            self.systag = systag
        if tempgaugesource is not None:
            self.tempgaugesource = tempgaugesource
        if tempreservoir is not None:
            self.tempreservoir = tempreservoir
        if tempsample is not None:
            self.tempsample = tempsample
        if tempsamplerec is not None:
            self.tempsamplerec = tempsamplerec
        if tempseparator is not None:
            self.tempseparator = tempseparator
        if testedby is not None:
            self.testedby = testedby
        if wellheader is not None:
            self.wellheader = wellheader

    @property
    def analysistyp(self):
        """Gets the analysistyp of this FluidAnalysis.  # noqa: E501


        :return: The analysistyp of this FluidAnalysis.  # noqa: E501
        :rtype: str
        """
        return self._analysistyp

    @analysistyp.setter
    def analysistyp(self, analysistyp):
        """Sets the analysistyp of this FluidAnalysis.


        :param analysistyp: The analysistyp of this FluidAnalysis.  # noqa: E501
        :type: str
        """

        self._analysistyp = analysistyp

    @property
    def analyst(self):
        """Gets the analyst of this FluidAnalysis.  # noqa: E501


        :return: The analyst of this FluidAnalysis.  # noqa: E501
        :rtype: str
        """
        return self._analyst

    @analyst.setter
    def analyst(self, analyst):
        """Sets the analyst of this FluidAnalysis.


        :param analyst: The analyst of this FluidAnalysis.  # noqa: E501
        :type: str
        """

        self._analyst = analyst

    @property
    def com(self):
        """Gets the com of this FluidAnalysis.  # noqa: E501


        :return: The com of this FluidAnalysis.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this FluidAnalysis.


        :param com: The com of this FluidAnalysis.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def depthbtm(self):
        """Gets the depthbtm of this FluidAnalysis.  # noqa: E501


        :return: The depthbtm of this FluidAnalysis.  # noqa: E501
        :rtype: OneOfFluidAnalysisDepthbtm
        """
        return self._depthbtm

    @depthbtm.setter
    def depthbtm(self, depthbtm):
        """Sets the depthbtm of this FluidAnalysis.


        :param depthbtm: The depthbtm of this FluidAnalysis.  # noqa: E501
        :type: OneOfFluidAnalysisDepthbtm
        """

        self._depthbtm = depthbtm

    @property
    def depthtop(self):
        """Gets the depthtop of this FluidAnalysis.  # noqa: E501


        :return: The depthtop of this FluidAnalysis.  # noqa: E501
        :rtype: OneOfFluidAnalysisDepthtop
        """
        return self._depthtop

    @depthtop.setter
    def depthtop(self, depthtop):
        """Sets the depthtop of this FluidAnalysis.


        :param depthtop: The depthtop of this FluidAnalysis.  # noqa: E501
        :type: OneOfFluidAnalysisDepthtop
        """

        self._depthtop = depthtop

    @property
    def des(self):
        """Gets the des of this FluidAnalysis.  # noqa: E501


        :return: The des of this FluidAnalysis.  # noqa: E501
        :rtype: str
        """
        return self._des

    @des.setter
    def des(self, des):
        """Sets the des of this FluidAnalysis.


        :param des: The des of this FluidAnalysis.  # noqa: E501
        :type: str
        """

        self._des = des

    @property
    def dttmreceived(self):
        """Gets the dttmreceived of this FluidAnalysis.  # noqa: E501


        :return: The dttmreceived of this FluidAnalysis.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmreceived

    @dttmreceived.setter
    def dttmreceived(self, dttmreceived):
        """Sets the dttmreceived of this FluidAnalysis.


        :param dttmreceived: The dttmreceived of this FluidAnalysis.  # noqa: E501
        :type: datetime
        """

        self._dttmreceived = dttmreceived

    @property
    def dttmreport(self):
        """Gets the dttmreport of this FluidAnalysis.  # noqa: E501


        :return: The dttmreport of this FluidAnalysis.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmreport

    @dttmreport.setter
    def dttmreport(self, dttmreport):
        """Sets the dttmreport of this FluidAnalysis.


        :param dttmreport: The dttmreport of this FluidAnalysis.  # noqa: E501
        :type: datetime
        """

        self._dttmreport = dttmreport

    @property
    def dttmsample(self):
        """Gets the dttmsample of this FluidAnalysis.  # noqa: E501


        :return: The dttmsample of this FluidAnalysis.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmsample

    @dttmsample.setter
    def dttmsample(self, dttmsample):
        """Sets the dttmsample of this FluidAnalysis.


        :param dttmsample: The dttmsample of this FluidAnalysis.  # noqa: E501
        :type: datetime
        """

        self._dttmsample = dttmsample

    @property
    def fluid_analysis_gases(self):
        """Gets the fluid_analysis_gases of this FluidAnalysis.  # noqa: E501


        :return: The fluid_analysis_gases of this FluidAnalysis.  # noqa: E501
        :rtype: list[FluidAnalysisGas]
        """
        return self._fluid_analysis_gases

    @fluid_analysis_gases.setter
    def fluid_analysis_gases(self, fluid_analysis_gases):
        """Sets the fluid_analysis_gases of this FluidAnalysis.


        :param fluid_analysis_gases: The fluid_analysis_gases of this FluidAnalysis.  # noqa: E501
        :type: list[FluidAnalysisGas]
        """

        self._fluid_analysis_gases = fluid_analysis_gases

    @property
    def fluid_analysis_liquids(self):
        """Gets the fluid_analysis_liquids of this FluidAnalysis.  # noqa: E501


        :return: The fluid_analysis_liquids of this FluidAnalysis.  # noqa: E501
        :rtype: list[FluidAnalysisLiquid]
        """
        return self._fluid_analysis_liquids

    @fluid_analysis_liquids.setter
    def fluid_analysis_liquids(self, fluid_analysis_liquids):
        """Sets the fluid_analysis_liquids of this FluidAnalysis.


        :param fluid_analysis_liquids: The fluid_analysis_liquids of this FluidAnalysis.  # noqa: E501
        :type: list[FluidAnalysisLiquid]
        """

        self._fluid_analysis_liquids = fluid_analysis_liquids

    @property
    def fluid_analysis_oils(self):
        """Gets the fluid_analysis_oils of this FluidAnalysis.  # noqa: E501


        :return: The fluid_analysis_oils of this FluidAnalysis.  # noqa: E501
        :rtype: list[FluidAnalysisOil]
        """
        return self._fluid_analysis_oils

    @fluid_analysis_oils.setter
    def fluid_analysis_oils(self, fluid_analysis_oils):
        """Sets the fluid_analysis_oils of this FluidAnalysis.


        :param fluid_analysis_oils: The fluid_analysis_oils of this FluidAnalysis.  # noqa: E501
        :type: list[FluidAnalysisOil]
        """

        self._fluid_analysis_oils = fluid_analysis_oils

    @property
    def fluid_analysis_waters(self):
        """Gets the fluid_analysis_waters of this FluidAnalysis.  # noqa: E501


        :return: The fluid_analysis_waters of this FluidAnalysis.  # noqa: E501
        :rtype: list[FluidAnalysisWater]
        """
        return self._fluid_analysis_waters

    @fluid_analysis_waters.setter
    def fluid_analysis_waters(self, fluid_analysis_waters):
        """Sets the fluid_analysis_waters of this FluidAnalysis.


        :param fluid_analysis_waters: The fluid_analysis_waters of this FluidAnalysis.  # noqa: E501
        :type: list[FluidAnalysisWater]
        """

        self._fluid_analysis_waters = fluid_analysis_waters

    @property
    def idrec(self):
        """Gets the idrec of this FluidAnalysis.  # noqa: E501


        :return: The idrec of this FluidAnalysis.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this FluidAnalysis.


        :param idrec: The idrec of this FluidAnalysis.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idreczonecompletion(self):
        """Gets the idreczonecompletion of this FluidAnalysis.  # noqa: E501


        :return: The idreczonecompletion of this FluidAnalysis.  # noqa: E501
        :rtype: str
        """
        return self._idreczonecompletion

    @idreczonecompletion.setter
    def idreczonecompletion(self, idreczonecompletion):
        """Sets the idreczonecompletion of this FluidAnalysis.


        :param idreczonecompletion: The idreczonecompletion of this FluidAnalysis.  # noqa: E501
        :type: str
        """

        self._idreczonecompletion = idreczonecompletion

    @property
    def idreczonecompletiontk(self):
        """Gets the idreczonecompletiontk of this FluidAnalysis.  # noqa: E501


        :return: The idreczonecompletiontk of this FluidAnalysis.  # noqa: E501
        :rtype: str
        """
        return self._idreczonecompletiontk

    @idreczonecompletiontk.setter
    def idreczonecompletiontk(self, idreczonecompletiontk):
        """Sets the idreczonecompletiontk of this FluidAnalysis.


        :param idreczonecompletiontk: The idreczonecompletiontk of this FluidAnalysis.  # noqa: E501
        :type: str
        """

        self._idreczonecompletiontk = idreczonecompletiontk

    @property
    def idwell(self):
        """Gets the idwell of this FluidAnalysis.  # noqa: E501


        :return: The idwell of this FluidAnalysis.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this FluidAnalysis.


        :param idwell: The idwell of this FluidAnalysis.  # noqa: E501
        :type: str
        """

        self._idwell = idwell

    @property
    def locsample(self):
        """Gets the locsample of this FluidAnalysis.  # noqa: E501


        :return: The locsample of this FluidAnalysis.  # noqa: E501
        :rtype: str
        """
        return self._locsample

    @locsample.setter
    def locsample(self, locsample):
        """Sets the locsample of this FluidAnalysis.


        :param locsample: The locsample of this FluidAnalysis.  # noqa: E501
        :type: str
        """

        self._locsample = locsample

    @property
    def presgaugesource(self):
        """Gets the presgaugesource of this FluidAnalysis.  # noqa: E501


        :return: The presgaugesource of this FluidAnalysis.  # noqa: E501
        :rtype: OneOfFluidAnalysisPresgaugesource
        """
        return self._presgaugesource

    @presgaugesource.setter
    def presgaugesource(self, presgaugesource):
        """Sets the presgaugesource of this FluidAnalysis.


        :param presgaugesource: The presgaugesource of this FluidAnalysis.  # noqa: E501
        :type: OneOfFluidAnalysisPresgaugesource
        """

        self._presgaugesource = presgaugesource

    @property
    def presreservoir(self):
        """Gets the presreservoir of this FluidAnalysis.  # noqa: E501


        :return: The presreservoir of this FluidAnalysis.  # noqa: E501
        :rtype: OneOfFluidAnalysisPresreservoir
        """
        return self._presreservoir

    @presreservoir.setter
    def presreservoir(self, presreservoir):
        """Sets the presreservoir of this FluidAnalysis.


        :param presreservoir: The presreservoir of this FluidAnalysis.  # noqa: E501
        :type: OneOfFluidAnalysisPresreservoir
        """

        self._presreservoir = presreservoir

    @property
    def pressample(self):
        """Gets the pressample of this FluidAnalysis.  # noqa: E501


        :return: The pressample of this FluidAnalysis.  # noqa: E501
        :rtype: OneOfFluidAnalysisPressample
        """
        return self._pressample

    @pressample.setter
    def pressample(self, pressample):
        """Sets the pressample of this FluidAnalysis.


        :param pressample: The pressample of this FluidAnalysis.  # noqa: E501
        :type: OneOfFluidAnalysisPressample
        """

        self._pressample = pressample

    @property
    def pressamplerec(self):
        """Gets the pressamplerec of this FluidAnalysis.  # noqa: E501


        :return: The pressamplerec of this FluidAnalysis.  # noqa: E501
        :rtype: OneOfFluidAnalysisPressamplerec
        """
        return self._pressamplerec

    @pressamplerec.setter
    def pressamplerec(self, pressamplerec):
        """Sets the pressamplerec of this FluidAnalysis.


        :param pressamplerec: The pressamplerec of this FluidAnalysis.  # noqa: E501
        :type: OneOfFluidAnalysisPressamplerec
        """

        self._pressamplerec = pressamplerec

    @property
    def presseparator(self):
        """Gets the presseparator of this FluidAnalysis.  # noqa: E501


        :return: The presseparator of this FluidAnalysis.  # noqa: E501
        :rtype: OneOfFluidAnalysisPresseparator
        """
        return self._presseparator

    @presseparator.setter
    def presseparator(self, presseparator):
        """Sets the presseparator of this FluidAnalysis.


        :param presseparator: The presseparator of this FluidAnalysis.  # noqa: E501
        :type: OneOfFluidAnalysisPresseparator
        """

        self._presseparator = presseparator

    @property
    def refnolaboratory(self):
        """Gets the refnolaboratory of this FluidAnalysis.  # noqa: E501


        :return: The refnolaboratory of this FluidAnalysis.  # noqa: E501
        :rtype: str
        """
        return self._refnolaboratory

    @refnolaboratory.setter
    def refnolaboratory(self, refnolaboratory):
        """Sets the refnolaboratory of this FluidAnalysis.


        :param refnolaboratory: The refnolaboratory of this FluidAnalysis.  # noqa: E501
        :type: str
        """

        self._refnolaboratory = refnolaboratory

    @property
    def refnosample(self):
        """Gets the refnosample of this FluidAnalysis.  # noqa: E501


        :return: The refnosample of this FluidAnalysis.  # noqa: E501
        :rtype: str
        """
        return self._refnosample

    @refnosample.setter
    def refnosample(self, refnosample):
        """Sets the refnosample of this FluidAnalysis.


        :param refnosample: The refnosample of this FluidAnalysis.  # noqa: E501
        :type: str
        """

        self._refnosample = refnosample

    @property
    def refnotest(self):
        """Gets the refnotest of this FluidAnalysis.  # noqa: E501


        :return: The refnotest of this FluidAnalysis.  # noqa: E501
        :rtype: str
        """
        return self._refnotest

    @refnotest.setter
    def refnotest(self, refnotest):
        """Sets the refnotest of this FluidAnalysis.


        :param refnotest: The refnotest of this FluidAnalysis.  # noqa: E501
        :type: str
        """

        self._refnotest = refnotest

    @property
    def sampletyp1(self):
        """Gets the sampletyp1 of this FluidAnalysis.  # noqa: E501


        :return: The sampletyp1 of this FluidAnalysis.  # noqa: E501
        :rtype: str
        """
        return self._sampletyp1

    @sampletyp1.setter
    def sampletyp1(self, sampletyp1):
        """Sets the sampletyp1 of this FluidAnalysis.


        :param sampletyp1: The sampletyp1 of this FluidAnalysis.  # noqa: E501
        :type: str
        """

        self._sampletyp1 = sampletyp1

    @property
    def syscreatedate(self):
        """Gets the syscreatedate of this FluidAnalysis.  # noqa: E501


        :return: The syscreatedate of this FluidAnalysis.  # noqa: E501
        :rtype: datetime
        """
        return self._syscreatedate

    @syscreatedate.setter
    def syscreatedate(self, syscreatedate):
        """Sets the syscreatedate of this FluidAnalysis.


        :param syscreatedate: The syscreatedate of this FluidAnalysis.  # noqa: E501
        :type: datetime
        """

        self._syscreatedate = syscreatedate

    @property
    def syscreateuser(self):
        """Gets the syscreateuser of this FluidAnalysis.  # noqa: E501


        :return: The syscreateuser of this FluidAnalysis.  # noqa: E501
        :rtype: str
        """
        return self._syscreateuser

    @syscreateuser.setter
    def syscreateuser(self, syscreateuser):
        """Sets the syscreateuser of this FluidAnalysis.


        :param syscreateuser: The syscreateuser of this FluidAnalysis.  # noqa: E501
        :type: str
        """

        self._syscreateuser = syscreateuser

    @property
    def syslockchildren(self):
        """Gets the syslockchildren of this FluidAnalysis.  # noqa: E501


        :return: The syslockchildren of this FluidAnalysis.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildren

    @syslockchildren.setter
    def syslockchildren(self, syslockchildren):
        """Sets the syslockchildren of this FluidAnalysis.


        :param syslockchildren: The syslockchildren of this FluidAnalysis.  # noqa: E501
        :type: int
        """

        self._syslockchildren = syslockchildren

    @property
    def syslockchildrenui(self):
        """Gets the syslockchildrenui of this FluidAnalysis.  # noqa: E501


        :return: The syslockchildrenui of this FluidAnalysis.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildrenui

    @syslockchildrenui.setter
    def syslockchildrenui(self, syslockchildrenui):
        """Sets the syslockchildrenui of this FluidAnalysis.


        :param syslockchildrenui: The syslockchildrenui of this FluidAnalysis.  # noqa: E501
        :type: int
        """

        self._syslockchildrenui = syslockchildrenui

    @property
    def syslockdate(self):
        """Gets the syslockdate of this FluidAnalysis.  # noqa: E501


        :return: The syslockdate of this FluidAnalysis.  # noqa: E501
        :rtype: datetime
        """
        return self._syslockdate

    @syslockdate.setter
    def syslockdate(self, syslockdate):
        """Sets the syslockdate of this FluidAnalysis.


        :param syslockdate: The syslockdate of this FluidAnalysis.  # noqa: E501
        :type: datetime
        """

        self._syslockdate = syslockdate

    @property
    def syslockme(self):
        """Gets the syslockme of this FluidAnalysis.  # noqa: E501


        :return: The syslockme of this FluidAnalysis.  # noqa: E501
        :rtype: int
        """
        return self._syslockme

    @syslockme.setter
    def syslockme(self, syslockme):
        """Sets the syslockme of this FluidAnalysis.


        :param syslockme: The syslockme of this FluidAnalysis.  # noqa: E501
        :type: int
        """

        self._syslockme = syslockme

    @property
    def syslockmeui(self):
        """Gets the syslockmeui of this FluidAnalysis.  # noqa: E501


        :return: The syslockmeui of this FluidAnalysis.  # noqa: E501
        :rtype: int
        """
        return self._syslockmeui

    @syslockmeui.setter
    def syslockmeui(self, syslockmeui):
        """Sets the syslockmeui of this FluidAnalysis.


        :param syslockmeui: The syslockmeui of this FluidAnalysis.  # noqa: E501
        :type: int
        """

        self._syslockmeui = syslockmeui

    @property
    def sysmoddate(self):
        """Gets the sysmoddate of this FluidAnalysis.  # noqa: E501


        :return: The sysmoddate of this FluidAnalysis.  # noqa: E501
        :rtype: datetime
        """
        return self._sysmoddate

    @sysmoddate.setter
    def sysmoddate(self, sysmoddate):
        """Sets the sysmoddate of this FluidAnalysis.


        :param sysmoddate: The sysmoddate of this FluidAnalysis.  # noqa: E501
        :type: datetime
        """

        self._sysmoddate = sysmoddate

    @property
    def sysmoduser(self):
        """Gets the sysmoduser of this FluidAnalysis.  # noqa: E501


        :return: The sysmoduser of this FluidAnalysis.  # noqa: E501
        :rtype: str
        """
        return self._sysmoduser

    @sysmoduser.setter
    def sysmoduser(self, sysmoduser):
        """Sets the sysmoduser of this FluidAnalysis.


        :param sysmoduser: The sysmoduser of this FluidAnalysis.  # noqa: E501
        :type: str
        """

        self._sysmoduser = sysmoduser

    @property
    def systag(self):
        """Gets the systag of this FluidAnalysis.  # noqa: E501


        :return: The systag of this FluidAnalysis.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this FluidAnalysis.


        :param systag: The systag of this FluidAnalysis.  # noqa: E501
        :type: str
        """

        self._systag = systag

    @property
    def tempgaugesource(self):
        """Gets the tempgaugesource of this FluidAnalysis.  # noqa: E501


        :return: The tempgaugesource of this FluidAnalysis.  # noqa: E501
        :rtype: OneOfFluidAnalysisTempgaugesource
        """
        return self._tempgaugesource

    @tempgaugesource.setter
    def tempgaugesource(self, tempgaugesource):
        """Sets the tempgaugesource of this FluidAnalysis.


        :param tempgaugesource: The tempgaugesource of this FluidAnalysis.  # noqa: E501
        :type: OneOfFluidAnalysisTempgaugesource
        """

        self._tempgaugesource = tempgaugesource

    @property
    def tempreservoir(self):
        """Gets the tempreservoir of this FluidAnalysis.  # noqa: E501


        :return: The tempreservoir of this FluidAnalysis.  # noqa: E501
        :rtype: OneOfFluidAnalysisTempreservoir
        """
        return self._tempreservoir

    @tempreservoir.setter
    def tempreservoir(self, tempreservoir):
        """Sets the tempreservoir of this FluidAnalysis.


        :param tempreservoir: The tempreservoir of this FluidAnalysis.  # noqa: E501
        :type: OneOfFluidAnalysisTempreservoir
        """

        self._tempreservoir = tempreservoir

    @property
    def tempsample(self):
        """Gets the tempsample of this FluidAnalysis.  # noqa: E501


        :return: The tempsample of this FluidAnalysis.  # noqa: E501
        :rtype: OneOfFluidAnalysisTempsample
        """
        return self._tempsample

    @tempsample.setter
    def tempsample(self, tempsample):
        """Sets the tempsample of this FluidAnalysis.


        :param tempsample: The tempsample of this FluidAnalysis.  # noqa: E501
        :type: OneOfFluidAnalysisTempsample
        """

        self._tempsample = tempsample

    @property
    def tempsamplerec(self):
        """Gets the tempsamplerec of this FluidAnalysis.  # noqa: E501


        :return: The tempsamplerec of this FluidAnalysis.  # noqa: E501
        :rtype: OneOfFluidAnalysisTempsamplerec
        """
        return self._tempsamplerec

    @tempsamplerec.setter
    def tempsamplerec(self, tempsamplerec):
        """Sets the tempsamplerec of this FluidAnalysis.


        :param tempsamplerec: The tempsamplerec of this FluidAnalysis.  # noqa: E501
        :type: OneOfFluidAnalysisTempsamplerec
        """

        self._tempsamplerec = tempsamplerec

    @property
    def tempseparator(self):
        """Gets the tempseparator of this FluidAnalysis.  # noqa: E501


        :return: The tempseparator of this FluidAnalysis.  # noqa: E501
        :rtype: OneOfFluidAnalysisTempseparator
        """
        return self._tempseparator

    @tempseparator.setter
    def tempseparator(self, tempseparator):
        """Sets the tempseparator of this FluidAnalysis.


        :param tempseparator: The tempseparator of this FluidAnalysis.  # noqa: E501
        :type: OneOfFluidAnalysisTempseparator
        """

        self._tempseparator = tempseparator

    @property
    def testedby(self):
        """Gets the testedby of this FluidAnalysis.  # noqa: E501


        :return: The testedby of this FluidAnalysis.  # noqa: E501
        :rtype: str
        """
        return self._testedby

    @testedby.setter
    def testedby(self, testedby):
        """Sets the testedby of this FluidAnalysis.


        :param testedby: The testedby of this FluidAnalysis.  # noqa: E501
        :type: str
        """

        self._testedby = testedby

    @property
    def wellheader(self):
        """Gets the wellheader of this FluidAnalysis.  # noqa: E501


        :return: The wellheader of this FluidAnalysis.  # noqa: E501
        :rtype: AnyOfFluidAnalysisWellheader
        """
        return self._wellheader

    @wellheader.setter
    def wellheader(self, wellheader):
        """Sets the wellheader of this FluidAnalysis.


        :param wellheader: The wellheader of this FluidAnalysis.  # noqa: E501
        :type: AnyOfFluidAnalysisWellheader
        """

        self._wellheader = wellheader

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FluidAnalysis, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FluidAnalysis):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
