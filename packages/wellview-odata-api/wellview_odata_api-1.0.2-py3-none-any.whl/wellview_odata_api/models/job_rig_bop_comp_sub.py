# coding: utf-8

"""
    OData Service for namespace Default

    This OData service is located at http://localhost  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class JobRigBopCompSub(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'com': 'str',
        'cost': 'OneOfJobRigBopCompSubCost',
        'costunitlabel': 'str',
        'des': 'str',
        'dttmlastcert': 'datetime',
        'dttmmanufacture': 'datetime',
        'dttmorig': 'datetime',
        'iconname': 'str',
        'idrec': 'str',
        'idrecparent': 'str',
        'idwell': 'str',
        'job_rig_bop_comp': 'AnyOfJobRigBopCompSubJobRigBopComp',
        'job_rig_bop_comp_sub_accs': 'list[JobRigBopCompSubAcc]',
        'latorder': 'int',
        'latposition': 'str',
        'length': 'OneOfJobRigBopCompSubLength',
        'make': 'str',
        'maxpres': 'OneOfJobRigBopCompSubMaxpres',
        'model': 'str',
        'outletlocation': 'str',
        'outletsz': 'OneOfJobRigBopCompSubOutletsz',
        'refid': 'str',
        'service': 'str',
        'sn': 'str',
        'syscreatedate': 'datetime',
        'syscreateuser': 'str',
        'syslockchildren': 'int',
        'syslockchildrenui': 'int',
        'syslockdate': 'datetime',
        'syslockme': 'int',
        'syslockmeui': 'int',
        'sysmoddate': 'datetime',
        'sysmoduser': 'str',
        'sysseq': 'int',
        'systag': 'str',
        'szidnom': 'OneOfJobRigBopCompSubSzidnom',
        'szodnom': 'OneOfJobRigBopCompSubSzodnom',
        'typ1': 'str',
        'typ2': 'str',
        'usertxt': 'str',
        'vertposition': 'str',
        'workpres': 'OneOfJobRigBopCompSubWorkpres'
    }

    attribute_map = {
        'com': 'com',
        'cost': 'cost',
        'costunitlabel': 'costunitlabel',
        'des': 'des',
        'dttmlastcert': 'dttmlastcert',
        'dttmmanufacture': 'dttmmanufacture',
        'dttmorig': 'dttmorig',
        'iconname': 'iconname',
        'idrec': 'idrec',
        'idrecparent': 'idrecparent',
        'idwell': 'idwell',
        'job_rig_bop_comp': 'jobRigBopComp',
        'job_rig_bop_comp_sub_accs': 'jobRigBopCompSubAccs',
        'latorder': 'latorder',
        'latposition': 'latposition',
        'length': 'length',
        'make': 'make',
        'maxpres': 'maxpres',
        'model': 'model',
        'outletlocation': 'outletlocation',
        'outletsz': 'outletsz',
        'refid': 'refid',
        'service': 'service',
        'sn': 'sn',
        'syscreatedate': 'syscreatedate',
        'syscreateuser': 'syscreateuser',
        'syslockchildren': 'syslockchildren',
        'syslockchildrenui': 'syslockchildrenui',
        'syslockdate': 'syslockdate',
        'syslockme': 'syslockme',
        'syslockmeui': 'syslockmeui',
        'sysmoddate': 'sysmoddate',
        'sysmoduser': 'sysmoduser',
        'sysseq': 'sysseq',
        'systag': 'systag',
        'szidnom': 'szidnom',
        'szodnom': 'szodnom',
        'typ1': 'typ1',
        'typ2': 'typ2',
        'usertxt': 'usertxt',
        'vertposition': 'vertposition',
        'workpres': 'workpres'
    }

    def __init__(self, com=None, cost=None, costunitlabel=None, des=None, dttmlastcert=None, dttmmanufacture=None, dttmorig=None, iconname=None, idrec=None, idrecparent=None, idwell=None, job_rig_bop_comp=None, job_rig_bop_comp_sub_accs=None, latorder=None, latposition=None, length=None, make=None, maxpres=None, model=None, outletlocation=None, outletsz=None, refid=None, service=None, sn=None, syscreatedate=None, syscreateuser=None, syslockchildren=None, syslockchildrenui=None, syslockdate=None, syslockme=None, syslockmeui=None, sysmoddate=None, sysmoduser=None, sysseq=None, systag=None, szidnom=None, szodnom=None, typ1=None, typ2=None, usertxt=None, vertposition=None, workpres=None):  # noqa: E501
        """JobRigBopCompSub - a model defined in Swagger"""  # noqa: E501
        self._com = None
        self._cost = None
        self._costunitlabel = None
        self._des = None
        self._dttmlastcert = None
        self._dttmmanufacture = None
        self._dttmorig = None
        self._iconname = None
        self._idrec = None
        self._idrecparent = None
        self._idwell = None
        self._job_rig_bop_comp = None
        self._job_rig_bop_comp_sub_accs = None
        self._latorder = None
        self._latposition = None
        self._length = None
        self._make = None
        self._maxpres = None
        self._model = None
        self._outletlocation = None
        self._outletsz = None
        self._refid = None
        self._service = None
        self._sn = None
        self._syscreatedate = None
        self._syscreateuser = None
        self._syslockchildren = None
        self._syslockchildrenui = None
        self._syslockdate = None
        self._syslockme = None
        self._syslockmeui = None
        self._sysmoddate = None
        self._sysmoduser = None
        self._sysseq = None
        self._systag = None
        self._szidnom = None
        self._szodnom = None
        self._typ1 = None
        self._typ2 = None
        self._usertxt = None
        self._vertposition = None
        self._workpres = None
        self.discriminator = None
        if com is not None:
            self.com = com
        if cost is not None:
            self.cost = cost
        if costunitlabel is not None:
            self.costunitlabel = costunitlabel
        if des is not None:
            self.des = des
        if dttmlastcert is not None:
            self.dttmlastcert = dttmlastcert
        if dttmmanufacture is not None:
            self.dttmmanufacture = dttmmanufacture
        if dttmorig is not None:
            self.dttmorig = dttmorig
        if iconname is not None:
            self.iconname = iconname
        if idrec is not None:
            self.idrec = idrec
        if idrecparent is not None:
            self.idrecparent = idrecparent
        if idwell is not None:
            self.idwell = idwell
        if job_rig_bop_comp is not None:
            self.job_rig_bop_comp = job_rig_bop_comp
        if job_rig_bop_comp_sub_accs is not None:
            self.job_rig_bop_comp_sub_accs = job_rig_bop_comp_sub_accs
        if latorder is not None:
            self.latorder = latorder
        if latposition is not None:
            self.latposition = latposition
        if length is not None:
            self.length = length
        if make is not None:
            self.make = make
        if maxpres is not None:
            self.maxpres = maxpres
        if model is not None:
            self.model = model
        if outletlocation is not None:
            self.outletlocation = outletlocation
        if outletsz is not None:
            self.outletsz = outletsz
        if refid is not None:
            self.refid = refid
        if service is not None:
            self.service = service
        if sn is not None:
            self.sn = sn
        if syscreatedate is not None:
            self.syscreatedate = syscreatedate
        if syscreateuser is not None:
            self.syscreateuser = syscreateuser
        if syslockchildren is not None:
            self.syslockchildren = syslockchildren
        if syslockchildrenui is not None:
            self.syslockchildrenui = syslockchildrenui
        if syslockdate is not None:
            self.syslockdate = syslockdate
        if syslockme is not None:
            self.syslockme = syslockme
        if syslockmeui is not None:
            self.syslockmeui = syslockmeui
        if sysmoddate is not None:
            self.sysmoddate = sysmoddate
        if sysmoduser is not None:
            self.sysmoduser = sysmoduser
        if sysseq is not None:
            self.sysseq = sysseq
        if systag is not None:
            self.systag = systag
        if szidnom is not None:
            self.szidnom = szidnom
        if szodnom is not None:
            self.szodnom = szodnom
        if typ1 is not None:
            self.typ1 = typ1
        if typ2 is not None:
            self.typ2 = typ2
        if usertxt is not None:
            self.usertxt = usertxt
        if vertposition is not None:
            self.vertposition = vertposition
        if workpres is not None:
            self.workpres = workpres

    @property
    def com(self):
        """Gets the com of this JobRigBopCompSub.  # noqa: E501


        :return: The com of this JobRigBopCompSub.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this JobRigBopCompSub.


        :param com: The com of this JobRigBopCompSub.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def cost(self):
        """Gets the cost of this JobRigBopCompSub.  # noqa: E501


        :return: The cost of this JobRigBopCompSub.  # noqa: E501
        :rtype: OneOfJobRigBopCompSubCost
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this JobRigBopCompSub.


        :param cost: The cost of this JobRigBopCompSub.  # noqa: E501
        :type: OneOfJobRigBopCompSubCost
        """

        self._cost = cost

    @property
    def costunitlabel(self):
        """Gets the costunitlabel of this JobRigBopCompSub.  # noqa: E501


        :return: The costunitlabel of this JobRigBopCompSub.  # noqa: E501
        :rtype: str
        """
        return self._costunitlabel

    @costunitlabel.setter
    def costunitlabel(self, costunitlabel):
        """Sets the costunitlabel of this JobRigBopCompSub.


        :param costunitlabel: The costunitlabel of this JobRigBopCompSub.  # noqa: E501
        :type: str
        """

        self._costunitlabel = costunitlabel

    @property
    def des(self):
        """Gets the des of this JobRigBopCompSub.  # noqa: E501


        :return: The des of this JobRigBopCompSub.  # noqa: E501
        :rtype: str
        """
        return self._des

    @des.setter
    def des(self, des):
        """Sets the des of this JobRigBopCompSub.


        :param des: The des of this JobRigBopCompSub.  # noqa: E501
        :type: str
        """

        self._des = des

    @property
    def dttmlastcert(self):
        """Gets the dttmlastcert of this JobRigBopCompSub.  # noqa: E501


        :return: The dttmlastcert of this JobRigBopCompSub.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmlastcert

    @dttmlastcert.setter
    def dttmlastcert(self, dttmlastcert):
        """Sets the dttmlastcert of this JobRigBopCompSub.


        :param dttmlastcert: The dttmlastcert of this JobRigBopCompSub.  # noqa: E501
        :type: datetime
        """

        self._dttmlastcert = dttmlastcert

    @property
    def dttmmanufacture(self):
        """Gets the dttmmanufacture of this JobRigBopCompSub.  # noqa: E501


        :return: The dttmmanufacture of this JobRigBopCompSub.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmmanufacture

    @dttmmanufacture.setter
    def dttmmanufacture(self, dttmmanufacture):
        """Sets the dttmmanufacture of this JobRigBopCompSub.


        :param dttmmanufacture: The dttmmanufacture of this JobRigBopCompSub.  # noqa: E501
        :type: datetime
        """

        self._dttmmanufacture = dttmmanufacture

    @property
    def dttmorig(self):
        """Gets the dttmorig of this JobRigBopCompSub.  # noqa: E501


        :return: The dttmorig of this JobRigBopCompSub.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmorig

    @dttmorig.setter
    def dttmorig(self, dttmorig):
        """Sets the dttmorig of this JobRigBopCompSub.


        :param dttmorig: The dttmorig of this JobRigBopCompSub.  # noqa: E501
        :type: datetime
        """

        self._dttmorig = dttmorig

    @property
    def iconname(self):
        """Gets the iconname of this JobRigBopCompSub.  # noqa: E501


        :return: The iconname of this JobRigBopCompSub.  # noqa: E501
        :rtype: str
        """
        return self._iconname

    @iconname.setter
    def iconname(self, iconname):
        """Sets the iconname of this JobRigBopCompSub.


        :param iconname: The iconname of this JobRigBopCompSub.  # noqa: E501
        :type: str
        """

        self._iconname = iconname

    @property
    def idrec(self):
        """Gets the idrec of this JobRigBopCompSub.  # noqa: E501


        :return: The idrec of this JobRigBopCompSub.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this JobRigBopCompSub.


        :param idrec: The idrec of this JobRigBopCompSub.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecparent(self):
        """Gets the idrecparent of this JobRigBopCompSub.  # noqa: E501


        :return: The idrecparent of this JobRigBopCompSub.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this JobRigBopCompSub.


        :param idrecparent: The idrecparent of this JobRigBopCompSub.  # noqa: E501
        :type: str
        """

        self._idrecparent = idrecparent

    @property
    def idwell(self):
        """Gets the idwell of this JobRigBopCompSub.  # noqa: E501


        :return: The idwell of this JobRigBopCompSub.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this JobRigBopCompSub.


        :param idwell: The idwell of this JobRigBopCompSub.  # noqa: E501
        :type: str
        """

        self._idwell = idwell

    @property
    def job_rig_bop_comp(self):
        """Gets the job_rig_bop_comp of this JobRigBopCompSub.  # noqa: E501


        :return: The job_rig_bop_comp of this JobRigBopCompSub.  # noqa: E501
        :rtype: AnyOfJobRigBopCompSubJobRigBopComp
        """
        return self._job_rig_bop_comp

    @job_rig_bop_comp.setter
    def job_rig_bop_comp(self, job_rig_bop_comp):
        """Sets the job_rig_bop_comp of this JobRigBopCompSub.


        :param job_rig_bop_comp: The job_rig_bop_comp of this JobRigBopCompSub.  # noqa: E501
        :type: AnyOfJobRigBopCompSubJobRigBopComp
        """

        self._job_rig_bop_comp = job_rig_bop_comp

    @property
    def job_rig_bop_comp_sub_accs(self):
        """Gets the job_rig_bop_comp_sub_accs of this JobRigBopCompSub.  # noqa: E501


        :return: The job_rig_bop_comp_sub_accs of this JobRigBopCompSub.  # noqa: E501
        :rtype: list[JobRigBopCompSubAcc]
        """
        return self._job_rig_bop_comp_sub_accs

    @job_rig_bop_comp_sub_accs.setter
    def job_rig_bop_comp_sub_accs(self, job_rig_bop_comp_sub_accs):
        """Sets the job_rig_bop_comp_sub_accs of this JobRigBopCompSub.


        :param job_rig_bop_comp_sub_accs: The job_rig_bop_comp_sub_accs of this JobRigBopCompSub.  # noqa: E501
        :type: list[JobRigBopCompSubAcc]
        """

        self._job_rig_bop_comp_sub_accs = job_rig_bop_comp_sub_accs

    @property
    def latorder(self):
        """Gets the latorder of this JobRigBopCompSub.  # noqa: E501


        :return: The latorder of this JobRigBopCompSub.  # noqa: E501
        :rtype: int
        """
        return self._latorder

    @latorder.setter
    def latorder(self, latorder):
        """Sets the latorder of this JobRigBopCompSub.


        :param latorder: The latorder of this JobRigBopCompSub.  # noqa: E501
        :type: int
        """

        self._latorder = latorder

    @property
    def latposition(self):
        """Gets the latposition of this JobRigBopCompSub.  # noqa: E501


        :return: The latposition of this JobRigBopCompSub.  # noqa: E501
        :rtype: str
        """
        return self._latposition

    @latposition.setter
    def latposition(self, latposition):
        """Sets the latposition of this JobRigBopCompSub.


        :param latposition: The latposition of this JobRigBopCompSub.  # noqa: E501
        :type: str
        """

        self._latposition = latposition

    @property
    def length(self):
        """Gets the length of this JobRigBopCompSub.  # noqa: E501


        :return: The length of this JobRigBopCompSub.  # noqa: E501
        :rtype: OneOfJobRigBopCompSubLength
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this JobRigBopCompSub.


        :param length: The length of this JobRigBopCompSub.  # noqa: E501
        :type: OneOfJobRigBopCompSubLength
        """

        self._length = length

    @property
    def make(self):
        """Gets the make of this JobRigBopCompSub.  # noqa: E501


        :return: The make of this JobRigBopCompSub.  # noqa: E501
        :rtype: str
        """
        return self._make

    @make.setter
    def make(self, make):
        """Sets the make of this JobRigBopCompSub.


        :param make: The make of this JobRigBopCompSub.  # noqa: E501
        :type: str
        """

        self._make = make

    @property
    def maxpres(self):
        """Gets the maxpres of this JobRigBopCompSub.  # noqa: E501


        :return: The maxpres of this JobRigBopCompSub.  # noqa: E501
        :rtype: OneOfJobRigBopCompSubMaxpres
        """
        return self._maxpres

    @maxpres.setter
    def maxpres(self, maxpres):
        """Sets the maxpres of this JobRigBopCompSub.


        :param maxpres: The maxpres of this JobRigBopCompSub.  # noqa: E501
        :type: OneOfJobRigBopCompSubMaxpres
        """

        self._maxpres = maxpres

    @property
    def model(self):
        """Gets the model of this JobRigBopCompSub.  # noqa: E501


        :return: The model of this JobRigBopCompSub.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this JobRigBopCompSub.


        :param model: The model of this JobRigBopCompSub.  # noqa: E501
        :type: str
        """

        self._model = model

    @property
    def outletlocation(self):
        """Gets the outletlocation of this JobRigBopCompSub.  # noqa: E501


        :return: The outletlocation of this JobRigBopCompSub.  # noqa: E501
        :rtype: str
        """
        return self._outletlocation

    @outletlocation.setter
    def outletlocation(self, outletlocation):
        """Sets the outletlocation of this JobRigBopCompSub.


        :param outletlocation: The outletlocation of this JobRigBopCompSub.  # noqa: E501
        :type: str
        """

        self._outletlocation = outletlocation

    @property
    def outletsz(self):
        """Gets the outletsz of this JobRigBopCompSub.  # noqa: E501


        :return: The outletsz of this JobRigBopCompSub.  # noqa: E501
        :rtype: OneOfJobRigBopCompSubOutletsz
        """
        return self._outletsz

    @outletsz.setter
    def outletsz(self, outletsz):
        """Sets the outletsz of this JobRigBopCompSub.


        :param outletsz: The outletsz of this JobRigBopCompSub.  # noqa: E501
        :type: OneOfJobRigBopCompSubOutletsz
        """

        self._outletsz = outletsz

    @property
    def refid(self):
        """Gets the refid of this JobRigBopCompSub.  # noqa: E501


        :return: The refid of this JobRigBopCompSub.  # noqa: E501
        :rtype: str
        """
        return self._refid

    @refid.setter
    def refid(self, refid):
        """Sets the refid of this JobRigBopCompSub.


        :param refid: The refid of this JobRigBopCompSub.  # noqa: E501
        :type: str
        """

        self._refid = refid

    @property
    def service(self):
        """Gets the service of this JobRigBopCompSub.  # noqa: E501


        :return: The service of this JobRigBopCompSub.  # noqa: E501
        :rtype: str
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this JobRigBopCompSub.


        :param service: The service of this JobRigBopCompSub.  # noqa: E501
        :type: str
        """

        self._service = service

    @property
    def sn(self):
        """Gets the sn of this JobRigBopCompSub.  # noqa: E501


        :return: The sn of this JobRigBopCompSub.  # noqa: E501
        :rtype: str
        """
        return self._sn

    @sn.setter
    def sn(self, sn):
        """Sets the sn of this JobRigBopCompSub.


        :param sn: The sn of this JobRigBopCompSub.  # noqa: E501
        :type: str
        """

        self._sn = sn

    @property
    def syscreatedate(self):
        """Gets the syscreatedate of this JobRigBopCompSub.  # noqa: E501


        :return: The syscreatedate of this JobRigBopCompSub.  # noqa: E501
        :rtype: datetime
        """
        return self._syscreatedate

    @syscreatedate.setter
    def syscreatedate(self, syscreatedate):
        """Sets the syscreatedate of this JobRigBopCompSub.


        :param syscreatedate: The syscreatedate of this JobRigBopCompSub.  # noqa: E501
        :type: datetime
        """

        self._syscreatedate = syscreatedate

    @property
    def syscreateuser(self):
        """Gets the syscreateuser of this JobRigBopCompSub.  # noqa: E501


        :return: The syscreateuser of this JobRigBopCompSub.  # noqa: E501
        :rtype: str
        """
        return self._syscreateuser

    @syscreateuser.setter
    def syscreateuser(self, syscreateuser):
        """Sets the syscreateuser of this JobRigBopCompSub.


        :param syscreateuser: The syscreateuser of this JobRigBopCompSub.  # noqa: E501
        :type: str
        """

        self._syscreateuser = syscreateuser

    @property
    def syslockchildren(self):
        """Gets the syslockchildren of this JobRigBopCompSub.  # noqa: E501


        :return: The syslockchildren of this JobRigBopCompSub.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildren

    @syslockchildren.setter
    def syslockchildren(self, syslockchildren):
        """Sets the syslockchildren of this JobRigBopCompSub.


        :param syslockchildren: The syslockchildren of this JobRigBopCompSub.  # noqa: E501
        :type: int
        """

        self._syslockchildren = syslockchildren

    @property
    def syslockchildrenui(self):
        """Gets the syslockchildrenui of this JobRigBopCompSub.  # noqa: E501


        :return: The syslockchildrenui of this JobRigBopCompSub.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildrenui

    @syslockchildrenui.setter
    def syslockchildrenui(self, syslockchildrenui):
        """Sets the syslockchildrenui of this JobRigBopCompSub.


        :param syslockchildrenui: The syslockchildrenui of this JobRigBopCompSub.  # noqa: E501
        :type: int
        """

        self._syslockchildrenui = syslockchildrenui

    @property
    def syslockdate(self):
        """Gets the syslockdate of this JobRigBopCompSub.  # noqa: E501


        :return: The syslockdate of this JobRigBopCompSub.  # noqa: E501
        :rtype: datetime
        """
        return self._syslockdate

    @syslockdate.setter
    def syslockdate(self, syslockdate):
        """Sets the syslockdate of this JobRigBopCompSub.


        :param syslockdate: The syslockdate of this JobRigBopCompSub.  # noqa: E501
        :type: datetime
        """

        self._syslockdate = syslockdate

    @property
    def syslockme(self):
        """Gets the syslockme of this JobRigBopCompSub.  # noqa: E501


        :return: The syslockme of this JobRigBopCompSub.  # noqa: E501
        :rtype: int
        """
        return self._syslockme

    @syslockme.setter
    def syslockme(self, syslockme):
        """Sets the syslockme of this JobRigBopCompSub.


        :param syslockme: The syslockme of this JobRigBopCompSub.  # noqa: E501
        :type: int
        """

        self._syslockme = syslockme

    @property
    def syslockmeui(self):
        """Gets the syslockmeui of this JobRigBopCompSub.  # noqa: E501


        :return: The syslockmeui of this JobRigBopCompSub.  # noqa: E501
        :rtype: int
        """
        return self._syslockmeui

    @syslockmeui.setter
    def syslockmeui(self, syslockmeui):
        """Sets the syslockmeui of this JobRigBopCompSub.


        :param syslockmeui: The syslockmeui of this JobRigBopCompSub.  # noqa: E501
        :type: int
        """

        self._syslockmeui = syslockmeui

    @property
    def sysmoddate(self):
        """Gets the sysmoddate of this JobRigBopCompSub.  # noqa: E501


        :return: The sysmoddate of this JobRigBopCompSub.  # noqa: E501
        :rtype: datetime
        """
        return self._sysmoddate

    @sysmoddate.setter
    def sysmoddate(self, sysmoddate):
        """Sets the sysmoddate of this JobRigBopCompSub.


        :param sysmoddate: The sysmoddate of this JobRigBopCompSub.  # noqa: E501
        :type: datetime
        """

        self._sysmoddate = sysmoddate

    @property
    def sysmoduser(self):
        """Gets the sysmoduser of this JobRigBopCompSub.  # noqa: E501


        :return: The sysmoduser of this JobRigBopCompSub.  # noqa: E501
        :rtype: str
        """
        return self._sysmoduser

    @sysmoduser.setter
    def sysmoduser(self, sysmoduser):
        """Sets the sysmoduser of this JobRigBopCompSub.


        :param sysmoduser: The sysmoduser of this JobRigBopCompSub.  # noqa: E501
        :type: str
        """

        self._sysmoduser = sysmoduser

    @property
    def sysseq(self):
        """Gets the sysseq of this JobRigBopCompSub.  # noqa: E501


        :return: The sysseq of this JobRigBopCompSub.  # noqa: E501
        :rtype: int
        """
        return self._sysseq

    @sysseq.setter
    def sysseq(self, sysseq):
        """Sets the sysseq of this JobRigBopCompSub.


        :param sysseq: The sysseq of this JobRigBopCompSub.  # noqa: E501
        :type: int
        """

        self._sysseq = sysseq

    @property
    def systag(self):
        """Gets the systag of this JobRigBopCompSub.  # noqa: E501


        :return: The systag of this JobRigBopCompSub.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this JobRigBopCompSub.


        :param systag: The systag of this JobRigBopCompSub.  # noqa: E501
        :type: str
        """

        self._systag = systag

    @property
    def szidnom(self):
        """Gets the szidnom of this JobRigBopCompSub.  # noqa: E501


        :return: The szidnom of this JobRigBopCompSub.  # noqa: E501
        :rtype: OneOfJobRigBopCompSubSzidnom
        """
        return self._szidnom

    @szidnom.setter
    def szidnom(self, szidnom):
        """Sets the szidnom of this JobRigBopCompSub.


        :param szidnom: The szidnom of this JobRigBopCompSub.  # noqa: E501
        :type: OneOfJobRigBopCompSubSzidnom
        """

        self._szidnom = szidnom

    @property
    def szodnom(self):
        """Gets the szodnom of this JobRigBopCompSub.  # noqa: E501


        :return: The szodnom of this JobRigBopCompSub.  # noqa: E501
        :rtype: OneOfJobRigBopCompSubSzodnom
        """
        return self._szodnom

    @szodnom.setter
    def szodnom(self, szodnom):
        """Sets the szodnom of this JobRigBopCompSub.


        :param szodnom: The szodnom of this JobRigBopCompSub.  # noqa: E501
        :type: OneOfJobRigBopCompSubSzodnom
        """

        self._szodnom = szodnom

    @property
    def typ1(self):
        """Gets the typ1 of this JobRigBopCompSub.  # noqa: E501


        :return: The typ1 of this JobRigBopCompSub.  # noqa: E501
        :rtype: str
        """
        return self._typ1

    @typ1.setter
    def typ1(self, typ1):
        """Sets the typ1 of this JobRigBopCompSub.


        :param typ1: The typ1 of this JobRigBopCompSub.  # noqa: E501
        :type: str
        """

        self._typ1 = typ1

    @property
    def typ2(self):
        """Gets the typ2 of this JobRigBopCompSub.  # noqa: E501


        :return: The typ2 of this JobRigBopCompSub.  # noqa: E501
        :rtype: str
        """
        return self._typ2

    @typ2.setter
    def typ2(self, typ2):
        """Sets the typ2 of this JobRigBopCompSub.


        :param typ2: The typ2 of this JobRigBopCompSub.  # noqa: E501
        :type: str
        """

        self._typ2 = typ2

    @property
    def usertxt(self):
        """Gets the usertxt of this JobRigBopCompSub.  # noqa: E501


        :return: The usertxt of this JobRigBopCompSub.  # noqa: E501
        :rtype: str
        """
        return self._usertxt

    @usertxt.setter
    def usertxt(self, usertxt):
        """Sets the usertxt of this JobRigBopCompSub.


        :param usertxt: The usertxt of this JobRigBopCompSub.  # noqa: E501
        :type: str
        """

        self._usertxt = usertxt

    @property
    def vertposition(self):
        """Gets the vertposition of this JobRigBopCompSub.  # noqa: E501


        :return: The vertposition of this JobRigBopCompSub.  # noqa: E501
        :rtype: str
        """
        return self._vertposition

    @vertposition.setter
    def vertposition(self, vertposition):
        """Sets the vertposition of this JobRigBopCompSub.


        :param vertposition: The vertposition of this JobRigBopCompSub.  # noqa: E501
        :type: str
        """

        self._vertposition = vertposition

    @property
    def workpres(self):
        """Gets the workpres of this JobRigBopCompSub.  # noqa: E501


        :return: The workpres of this JobRigBopCompSub.  # noqa: E501
        :rtype: OneOfJobRigBopCompSubWorkpres
        """
        return self._workpres

    @workpres.setter
    def workpres(self, workpres):
        """Sets the workpres of this JobRigBopCompSub.


        :param workpres: The workpres of this JobRigBopCompSub.  # noqa: E501
        :type: OneOfJobRigBopCompSubWorkpres
        """

        self._workpres = workpres

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JobRigBopCompSub, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobRigBopCompSub):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
