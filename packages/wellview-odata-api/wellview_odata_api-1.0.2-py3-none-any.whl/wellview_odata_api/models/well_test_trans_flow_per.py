# coding: utf-8

"""
    OData Service for namespace Default

    This OData service is located at http://localhost  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WellTestTransFlowPer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bswend': 'OneOfWellTestTransFlowPerBswend',
        'com': 'str',
        'densitygasend': 'OneOfWellTestTransFlowPerDensitygasend',
        'densityoilend': 'OneOfWellTestTransFlowPerDensityoilend',
        'depthfluidlevelend': 'OneOfWellTestTransFlowPerDepthfluidlevelend',
        'dttmend': 'datetime',
        'dttmstart': 'datetime',
        'efficiency': 'OneOfWellTestTransFlowPerEfficiency',
        'h2send': 'OneOfWellTestTransFlowPerH2send',
        'idrec': 'str',
        'idrecgaugeused': 'str',
        'idrecgaugeusedtk': 'str',
        'idrecparent': 'str',
        'idwell': 'str',
        'phwaterend': 'OneOfWellTestTransFlowPerPhwaterend',
        'presbhend': 'OneOfWellTestTransFlowPerPresbhend',
        'presbhinit': 'OneOfWellTestTransFlowPerPresbhinit',
        'prescasend': 'OneOfWellTestTransFlowPerPrescasend',
        'prescasinit': 'OneOfWellTestTransFlowPerPrescasinit',
        'pressepend': 'OneOfWellTestTransFlowPerPressepend',
        'pressepinit': 'OneOfWellTestTransFlowPerPressepinit',
        'prestubend': 'OneOfWellTestTransFlowPerPrestubend',
        'prestubinit': 'OneOfWellTestTransFlowPerPrestubinit',
        'ratecondend': 'OneOfWellTestTransFlowPerRatecondend',
        'rategasend': 'OneOfWellTestTransFlowPerRategasend',
        'rategasliftgas': 'OneOfWellTestTransFlowPerRategasliftgas',
        'rateoilend': 'OneOfWellTestTransFlowPerRateoilend',
        'ratewaterend': 'OneOfWellTestTransFlowPerRatewaterend',
        'salinitywaterend': 'OneOfWellTestTransFlowPerSalinitywaterend',
        'sandcutend': 'OneOfWellTestTransFlowPerSandcutend',
        'syscreatedate': 'datetime',
        'syscreateuser': 'str',
        'syslockchildren': 'int',
        'syslockchildrenui': 'int',
        'syslockdate': 'datetime',
        'syslockme': 'int',
        'syslockmeui': 'int',
        'sysmoddate': 'datetime',
        'sysmoduser': 'str',
        'systag': 'str',
        'szdiachoke': 'OneOfWellTestTransFlowPerSzdiachoke',
        'tempbhend': 'OneOfWellTestTransFlowPerTempbhend',
        'tempbhinit': 'OneOfWellTestTransFlowPerTempbhinit',
        'tempcasend': 'OneOfWellTestTransFlowPerTempcasend',
        'tempcasinit': 'OneOfWellTestTransFlowPerTempcasinit',
        'tempsepend': 'OneOfWellTestTransFlowPerTempsepend',
        'tempsepinit': 'OneOfWellTestTransFlowPerTempsepinit',
        'temptubend': 'OneOfWellTestTransFlowPerTemptubend',
        'temptubinit': 'OneOfWellTestTransFlowPerTemptubinit',
        'typ': 'str',
        'volumecondtotal': 'OneOfWellTestTransFlowPerVolumecondtotal',
        'volumegastotal': 'OneOfWellTestTransFlowPerVolumegastotal',
        'volumeoiltotal': 'OneOfWellTestTransFlowPerVolumeoiltotal',
        'volumewatertotal': 'OneOfWellTestTransFlowPerVolumewatertotal',
        'well_test_trans': 'AnyOfWellTestTransFlowPerWellTestTrans'
    }

    attribute_map = {
        'bswend': 'bswend',
        'com': 'com',
        'densitygasend': 'densitygasend',
        'densityoilend': 'densityoilend',
        'depthfluidlevelend': 'depthfluidlevelend',
        'dttmend': 'dttmend',
        'dttmstart': 'dttmstart',
        'efficiency': 'efficiency',
        'h2send': 'h2send',
        'idrec': 'idrec',
        'idrecgaugeused': 'idrecgaugeused',
        'idrecgaugeusedtk': 'idrecgaugeusedtk',
        'idrecparent': 'idrecparent',
        'idwell': 'idwell',
        'phwaterend': 'phwaterend',
        'presbhend': 'presbhend',
        'presbhinit': 'presbhinit',
        'prescasend': 'prescasend',
        'prescasinit': 'prescasinit',
        'pressepend': 'pressepend',
        'pressepinit': 'pressepinit',
        'prestubend': 'prestubend',
        'prestubinit': 'prestubinit',
        'ratecondend': 'ratecondend',
        'rategasend': 'rategasend',
        'rategasliftgas': 'rategasliftgas',
        'rateoilend': 'rateoilend',
        'ratewaterend': 'ratewaterend',
        'salinitywaterend': 'salinitywaterend',
        'sandcutend': 'sandcutend',
        'syscreatedate': 'syscreatedate',
        'syscreateuser': 'syscreateuser',
        'syslockchildren': 'syslockchildren',
        'syslockchildrenui': 'syslockchildrenui',
        'syslockdate': 'syslockdate',
        'syslockme': 'syslockme',
        'syslockmeui': 'syslockmeui',
        'sysmoddate': 'sysmoddate',
        'sysmoduser': 'sysmoduser',
        'systag': 'systag',
        'szdiachoke': 'szdiachoke',
        'tempbhend': 'tempbhend',
        'tempbhinit': 'tempbhinit',
        'tempcasend': 'tempcasend',
        'tempcasinit': 'tempcasinit',
        'tempsepend': 'tempsepend',
        'tempsepinit': 'tempsepinit',
        'temptubend': 'temptubend',
        'temptubinit': 'temptubinit',
        'typ': 'typ',
        'volumecondtotal': 'volumecondtotal',
        'volumegastotal': 'volumegastotal',
        'volumeoiltotal': 'volumeoiltotal',
        'volumewatertotal': 'volumewatertotal',
        'well_test_trans': 'wellTestTrans'
    }

    def __init__(self, bswend=None, com=None, densitygasend=None, densityoilend=None, depthfluidlevelend=None, dttmend=None, dttmstart=None, efficiency=None, h2send=None, idrec=None, idrecgaugeused=None, idrecgaugeusedtk=None, idrecparent=None, idwell=None, phwaterend=None, presbhend=None, presbhinit=None, prescasend=None, prescasinit=None, pressepend=None, pressepinit=None, prestubend=None, prestubinit=None, ratecondend=None, rategasend=None, rategasliftgas=None, rateoilend=None, ratewaterend=None, salinitywaterend=None, sandcutend=None, syscreatedate=None, syscreateuser=None, syslockchildren=None, syslockchildrenui=None, syslockdate=None, syslockme=None, syslockmeui=None, sysmoddate=None, sysmoduser=None, systag=None, szdiachoke=None, tempbhend=None, tempbhinit=None, tempcasend=None, tempcasinit=None, tempsepend=None, tempsepinit=None, temptubend=None, temptubinit=None, typ=None, volumecondtotal=None, volumegastotal=None, volumeoiltotal=None, volumewatertotal=None, well_test_trans=None):  # noqa: E501
        """WellTestTransFlowPer - a model defined in Swagger"""  # noqa: E501
        self._bswend = None
        self._com = None
        self._densitygasend = None
        self._densityoilend = None
        self._depthfluidlevelend = None
        self._dttmend = None
        self._dttmstart = None
        self._efficiency = None
        self._h2send = None
        self._idrec = None
        self._idrecgaugeused = None
        self._idrecgaugeusedtk = None
        self._idrecparent = None
        self._idwell = None
        self._phwaterend = None
        self._presbhend = None
        self._presbhinit = None
        self._prescasend = None
        self._prescasinit = None
        self._pressepend = None
        self._pressepinit = None
        self._prestubend = None
        self._prestubinit = None
        self._ratecondend = None
        self._rategasend = None
        self._rategasliftgas = None
        self._rateoilend = None
        self._ratewaterend = None
        self._salinitywaterend = None
        self._sandcutend = None
        self._syscreatedate = None
        self._syscreateuser = None
        self._syslockchildren = None
        self._syslockchildrenui = None
        self._syslockdate = None
        self._syslockme = None
        self._syslockmeui = None
        self._sysmoddate = None
        self._sysmoduser = None
        self._systag = None
        self._szdiachoke = None
        self._tempbhend = None
        self._tempbhinit = None
        self._tempcasend = None
        self._tempcasinit = None
        self._tempsepend = None
        self._tempsepinit = None
        self._temptubend = None
        self._temptubinit = None
        self._typ = None
        self._volumecondtotal = None
        self._volumegastotal = None
        self._volumeoiltotal = None
        self._volumewatertotal = None
        self._well_test_trans = None
        self.discriminator = None
        if bswend is not None:
            self.bswend = bswend
        if com is not None:
            self.com = com
        if densitygasend is not None:
            self.densitygasend = densitygasend
        if densityoilend is not None:
            self.densityoilend = densityoilend
        if depthfluidlevelend is not None:
            self.depthfluidlevelend = depthfluidlevelend
        if dttmend is not None:
            self.dttmend = dttmend
        if dttmstart is not None:
            self.dttmstart = dttmstart
        if efficiency is not None:
            self.efficiency = efficiency
        if h2send is not None:
            self.h2send = h2send
        if idrec is not None:
            self.idrec = idrec
        if idrecgaugeused is not None:
            self.idrecgaugeused = idrecgaugeused
        if idrecgaugeusedtk is not None:
            self.idrecgaugeusedtk = idrecgaugeusedtk
        if idrecparent is not None:
            self.idrecparent = idrecparent
        if idwell is not None:
            self.idwell = idwell
        if phwaterend is not None:
            self.phwaterend = phwaterend
        if presbhend is not None:
            self.presbhend = presbhend
        if presbhinit is not None:
            self.presbhinit = presbhinit
        if prescasend is not None:
            self.prescasend = prescasend
        if prescasinit is not None:
            self.prescasinit = prescasinit
        if pressepend is not None:
            self.pressepend = pressepend
        if pressepinit is not None:
            self.pressepinit = pressepinit
        if prestubend is not None:
            self.prestubend = prestubend
        if prestubinit is not None:
            self.prestubinit = prestubinit
        if ratecondend is not None:
            self.ratecondend = ratecondend
        if rategasend is not None:
            self.rategasend = rategasend
        if rategasliftgas is not None:
            self.rategasliftgas = rategasliftgas
        if rateoilend is not None:
            self.rateoilend = rateoilend
        if ratewaterend is not None:
            self.ratewaterend = ratewaterend
        if salinitywaterend is not None:
            self.salinitywaterend = salinitywaterend
        if sandcutend is not None:
            self.sandcutend = sandcutend
        if syscreatedate is not None:
            self.syscreatedate = syscreatedate
        if syscreateuser is not None:
            self.syscreateuser = syscreateuser
        if syslockchildren is not None:
            self.syslockchildren = syslockchildren
        if syslockchildrenui is not None:
            self.syslockchildrenui = syslockchildrenui
        if syslockdate is not None:
            self.syslockdate = syslockdate
        if syslockme is not None:
            self.syslockme = syslockme
        if syslockmeui is not None:
            self.syslockmeui = syslockmeui
        if sysmoddate is not None:
            self.sysmoddate = sysmoddate
        if sysmoduser is not None:
            self.sysmoduser = sysmoduser
        if systag is not None:
            self.systag = systag
        if szdiachoke is not None:
            self.szdiachoke = szdiachoke
        if tempbhend is not None:
            self.tempbhend = tempbhend
        if tempbhinit is not None:
            self.tempbhinit = tempbhinit
        if tempcasend is not None:
            self.tempcasend = tempcasend
        if tempcasinit is not None:
            self.tempcasinit = tempcasinit
        if tempsepend is not None:
            self.tempsepend = tempsepend
        if tempsepinit is not None:
            self.tempsepinit = tempsepinit
        if temptubend is not None:
            self.temptubend = temptubend
        if temptubinit is not None:
            self.temptubinit = temptubinit
        if typ is not None:
            self.typ = typ
        if volumecondtotal is not None:
            self.volumecondtotal = volumecondtotal
        if volumegastotal is not None:
            self.volumegastotal = volumegastotal
        if volumeoiltotal is not None:
            self.volumeoiltotal = volumeoiltotal
        if volumewatertotal is not None:
            self.volumewatertotal = volumewatertotal
        if well_test_trans is not None:
            self.well_test_trans = well_test_trans

    @property
    def bswend(self):
        """Gets the bswend of this WellTestTransFlowPer.  # noqa: E501


        :return: The bswend of this WellTestTransFlowPer.  # noqa: E501
        :rtype: OneOfWellTestTransFlowPerBswend
        """
        return self._bswend

    @bswend.setter
    def bswend(self, bswend):
        """Sets the bswend of this WellTestTransFlowPer.


        :param bswend: The bswend of this WellTestTransFlowPer.  # noqa: E501
        :type: OneOfWellTestTransFlowPerBswend
        """

        self._bswend = bswend

    @property
    def com(self):
        """Gets the com of this WellTestTransFlowPer.  # noqa: E501


        :return: The com of this WellTestTransFlowPer.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this WellTestTransFlowPer.


        :param com: The com of this WellTestTransFlowPer.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def densitygasend(self):
        """Gets the densitygasend of this WellTestTransFlowPer.  # noqa: E501


        :return: The densitygasend of this WellTestTransFlowPer.  # noqa: E501
        :rtype: OneOfWellTestTransFlowPerDensitygasend
        """
        return self._densitygasend

    @densitygasend.setter
    def densitygasend(self, densitygasend):
        """Sets the densitygasend of this WellTestTransFlowPer.


        :param densitygasend: The densitygasend of this WellTestTransFlowPer.  # noqa: E501
        :type: OneOfWellTestTransFlowPerDensitygasend
        """

        self._densitygasend = densitygasend

    @property
    def densityoilend(self):
        """Gets the densityoilend of this WellTestTransFlowPer.  # noqa: E501


        :return: The densityoilend of this WellTestTransFlowPer.  # noqa: E501
        :rtype: OneOfWellTestTransFlowPerDensityoilend
        """
        return self._densityoilend

    @densityoilend.setter
    def densityoilend(self, densityoilend):
        """Sets the densityoilend of this WellTestTransFlowPer.


        :param densityoilend: The densityoilend of this WellTestTransFlowPer.  # noqa: E501
        :type: OneOfWellTestTransFlowPerDensityoilend
        """

        self._densityoilend = densityoilend

    @property
    def depthfluidlevelend(self):
        """Gets the depthfluidlevelend of this WellTestTransFlowPer.  # noqa: E501


        :return: The depthfluidlevelend of this WellTestTransFlowPer.  # noqa: E501
        :rtype: OneOfWellTestTransFlowPerDepthfluidlevelend
        """
        return self._depthfluidlevelend

    @depthfluidlevelend.setter
    def depthfluidlevelend(self, depthfluidlevelend):
        """Sets the depthfluidlevelend of this WellTestTransFlowPer.


        :param depthfluidlevelend: The depthfluidlevelend of this WellTestTransFlowPer.  # noqa: E501
        :type: OneOfWellTestTransFlowPerDepthfluidlevelend
        """

        self._depthfluidlevelend = depthfluidlevelend

    @property
    def dttmend(self):
        """Gets the dttmend of this WellTestTransFlowPer.  # noqa: E501


        :return: The dttmend of this WellTestTransFlowPer.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmend

    @dttmend.setter
    def dttmend(self, dttmend):
        """Sets the dttmend of this WellTestTransFlowPer.


        :param dttmend: The dttmend of this WellTestTransFlowPer.  # noqa: E501
        :type: datetime
        """

        self._dttmend = dttmend

    @property
    def dttmstart(self):
        """Gets the dttmstart of this WellTestTransFlowPer.  # noqa: E501


        :return: The dttmstart of this WellTestTransFlowPer.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmstart

    @dttmstart.setter
    def dttmstart(self, dttmstart):
        """Sets the dttmstart of this WellTestTransFlowPer.


        :param dttmstart: The dttmstart of this WellTestTransFlowPer.  # noqa: E501
        :type: datetime
        """

        self._dttmstart = dttmstart

    @property
    def efficiency(self):
        """Gets the efficiency of this WellTestTransFlowPer.  # noqa: E501


        :return: The efficiency of this WellTestTransFlowPer.  # noqa: E501
        :rtype: OneOfWellTestTransFlowPerEfficiency
        """
        return self._efficiency

    @efficiency.setter
    def efficiency(self, efficiency):
        """Sets the efficiency of this WellTestTransFlowPer.


        :param efficiency: The efficiency of this WellTestTransFlowPer.  # noqa: E501
        :type: OneOfWellTestTransFlowPerEfficiency
        """

        self._efficiency = efficiency

    @property
    def h2send(self):
        """Gets the h2send of this WellTestTransFlowPer.  # noqa: E501


        :return: The h2send of this WellTestTransFlowPer.  # noqa: E501
        :rtype: OneOfWellTestTransFlowPerH2send
        """
        return self._h2send

    @h2send.setter
    def h2send(self, h2send):
        """Sets the h2send of this WellTestTransFlowPer.


        :param h2send: The h2send of this WellTestTransFlowPer.  # noqa: E501
        :type: OneOfWellTestTransFlowPerH2send
        """

        self._h2send = h2send

    @property
    def idrec(self):
        """Gets the idrec of this WellTestTransFlowPer.  # noqa: E501


        :return: The idrec of this WellTestTransFlowPer.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this WellTestTransFlowPer.


        :param idrec: The idrec of this WellTestTransFlowPer.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecgaugeused(self):
        """Gets the idrecgaugeused of this WellTestTransFlowPer.  # noqa: E501


        :return: The idrecgaugeused of this WellTestTransFlowPer.  # noqa: E501
        :rtype: str
        """
        return self._idrecgaugeused

    @idrecgaugeused.setter
    def idrecgaugeused(self, idrecgaugeused):
        """Sets the idrecgaugeused of this WellTestTransFlowPer.


        :param idrecgaugeused: The idrecgaugeused of this WellTestTransFlowPer.  # noqa: E501
        :type: str
        """

        self._idrecgaugeused = idrecgaugeused

    @property
    def idrecgaugeusedtk(self):
        """Gets the idrecgaugeusedtk of this WellTestTransFlowPer.  # noqa: E501


        :return: The idrecgaugeusedtk of this WellTestTransFlowPer.  # noqa: E501
        :rtype: str
        """
        return self._idrecgaugeusedtk

    @idrecgaugeusedtk.setter
    def idrecgaugeusedtk(self, idrecgaugeusedtk):
        """Sets the idrecgaugeusedtk of this WellTestTransFlowPer.


        :param idrecgaugeusedtk: The idrecgaugeusedtk of this WellTestTransFlowPer.  # noqa: E501
        :type: str
        """

        self._idrecgaugeusedtk = idrecgaugeusedtk

    @property
    def idrecparent(self):
        """Gets the idrecparent of this WellTestTransFlowPer.  # noqa: E501


        :return: The idrecparent of this WellTestTransFlowPer.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this WellTestTransFlowPer.


        :param idrecparent: The idrecparent of this WellTestTransFlowPer.  # noqa: E501
        :type: str
        """

        self._idrecparent = idrecparent

    @property
    def idwell(self):
        """Gets the idwell of this WellTestTransFlowPer.  # noqa: E501


        :return: The idwell of this WellTestTransFlowPer.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this WellTestTransFlowPer.


        :param idwell: The idwell of this WellTestTransFlowPer.  # noqa: E501
        :type: str
        """

        self._idwell = idwell

    @property
    def phwaterend(self):
        """Gets the phwaterend of this WellTestTransFlowPer.  # noqa: E501


        :return: The phwaterend of this WellTestTransFlowPer.  # noqa: E501
        :rtype: OneOfWellTestTransFlowPerPhwaterend
        """
        return self._phwaterend

    @phwaterend.setter
    def phwaterend(self, phwaterend):
        """Sets the phwaterend of this WellTestTransFlowPer.


        :param phwaterend: The phwaterend of this WellTestTransFlowPer.  # noqa: E501
        :type: OneOfWellTestTransFlowPerPhwaterend
        """

        self._phwaterend = phwaterend

    @property
    def presbhend(self):
        """Gets the presbhend of this WellTestTransFlowPer.  # noqa: E501


        :return: The presbhend of this WellTestTransFlowPer.  # noqa: E501
        :rtype: OneOfWellTestTransFlowPerPresbhend
        """
        return self._presbhend

    @presbhend.setter
    def presbhend(self, presbhend):
        """Sets the presbhend of this WellTestTransFlowPer.


        :param presbhend: The presbhend of this WellTestTransFlowPer.  # noqa: E501
        :type: OneOfWellTestTransFlowPerPresbhend
        """

        self._presbhend = presbhend

    @property
    def presbhinit(self):
        """Gets the presbhinit of this WellTestTransFlowPer.  # noqa: E501


        :return: The presbhinit of this WellTestTransFlowPer.  # noqa: E501
        :rtype: OneOfWellTestTransFlowPerPresbhinit
        """
        return self._presbhinit

    @presbhinit.setter
    def presbhinit(self, presbhinit):
        """Sets the presbhinit of this WellTestTransFlowPer.


        :param presbhinit: The presbhinit of this WellTestTransFlowPer.  # noqa: E501
        :type: OneOfWellTestTransFlowPerPresbhinit
        """

        self._presbhinit = presbhinit

    @property
    def prescasend(self):
        """Gets the prescasend of this WellTestTransFlowPer.  # noqa: E501


        :return: The prescasend of this WellTestTransFlowPer.  # noqa: E501
        :rtype: OneOfWellTestTransFlowPerPrescasend
        """
        return self._prescasend

    @prescasend.setter
    def prescasend(self, prescasend):
        """Sets the prescasend of this WellTestTransFlowPer.


        :param prescasend: The prescasend of this WellTestTransFlowPer.  # noqa: E501
        :type: OneOfWellTestTransFlowPerPrescasend
        """

        self._prescasend = prescasend

    @property
    def prescasinit(self):
        """Gets the prescasinit of this WellTestTransFlowPer.  # noqa: E501


        :return: The prescasinit of this WellTestTransFlowPer.  # noqa: E501
        :rtype: OneOfWellTestTransFlowPerPrescasinit
        """
        return self._prescasinit

    @prescasinit.setter
    def prescasinit(self, prescasinit):
        """Sets the prescasinit of this WellTestTransFlowPer.


        :param prescasinit: The prescasinit of this WellTestTransFlowPer.  # noqa: E501
        :type: OneOfWellTestTransFlowPerPrescasinit
        """

        self._prescasinit = prescasinit

    @property
    def pressepend(self):
        """Gets the pressepend of this WellTestTransFlowPer.  # noqa: E501


        :return: The pressepend of this WellTestTransFlowPer.  # noqa: E501
        :rtype: OneOfWellTestTransFlowPerPressepend
        """
        return self._pressepend

    @pressepend.setter
    def pressepend(self, pressepend):
        """Sets the pressepend of this WellTestTransFlowPer.


        :param pressepend: The pressepend of this WellTestTransFlowPer.  # noqa: E501
        :type: OneOfWellTestTransFlowPerPressepend
        """

        self._pressepend = pressepend

    @property
    def pressepinit(self):
        """Gets the pressepinit of this WellTestTransFlowPer.  # noqa: E501


        :return: The pressepinit of this WellTestTransFlowPer.  # noqa: E501
        :rtype: OneOfWellTestTransFlowPerPressepinit
        """
        return self._pressepinit

    @pressepinit.setter
    def pressepinit(self, pressepinit):
        """Sets the pressepinit of this WellTestTransFlowPer.


        :param pressepinit: The pressepinit of this WellTestTransFlowPer.  # noqa: E501
        :type: OneOfWellTestTransFlowPerPressepinit
        """

        self._pressepinit = pressepinit

    @property
    def prestubend(self):
        """Gets the prestubend of this WellTestTransFlowPer.  # noqa: E501


        :return: The prestubend of this WellTestTransFlowPer.  # noqa: E501
        :rtype: OneOfWellTestTransFlowPerPrestubend
        """
        return self._prestubend

    @prestubend.setter
    def prestubend(self, prestubend):
        """Sets the prestubend of this WellTestTransFlowPer.


        :param prestubend: The prestubend of this WellTestTransFlowPer.  # noqa: E501
        :type: OneOfWellTestTransFlowPerPrestubend
        """

        self._prestubend = prestubend

    @property
    def prestubinit(self):
        """Gets the prestubinit of this WellTestTransFlowPer.  # noqa: E501


        :return: The prestubinit of this WellTestTransFlowPer.  # noqa: E501
        :rtype: OneOfWellTestTransFlowPerPrestubinit
        """
        return self._prestubinit

    @prestubinit.setter
    def prestubinit(self, prestubinit):
        """Sets the prestubinit of this WellTestTransFlowPer.


        :param prestubinit: The prestubinit of this WellTestTransFlowPer.  # noqa: E501
        :type: OneOfWellTestTransFlowPerPrestubinit
        """

        self._prestubinit = prestubinit

    @property
    def ratecondend(self):
        """Gets the ratecondend of this WellTestTransFlowPer.  # noqa: E501


        :return: The ratecondend of this WellTestTransFlowPer.  # noqa: E501
        :rtype: OneOfWellTestTransFlowPerRatecondend
        """
        return self._ratecondend

    @ratecondend.setter
    def ratecondend(self, ratecondend):
        """Sets the ratecondend of this WellTestTransFlowPer.


        :param ratecondend: The ratecondend of this WellTestTransFlowPer.  # noqa: E501
        :type: OneOfWellTestTransFlowPerRatecondend
        """

        self._ratecondend = ratecondend

    @property
    def rategasend(self):
        """Gets the rategasend of this WellTestTransFlowPer.  # noqa: E501


        :return: The rategasend of this WellTestTransFlowPer.  # noqa: E501
        :rtype: OneOfWellTestTransFlowPerRategasend
        """
        return self._rategasend

    @rategasend.setter
    def rategasend(self, rategasend):
        """Sets the rategasend of this WellTestTransFlowPer.


        :param rategasend: The rategasend of this WellTestTransFlowPer.  # noqa: E501
        :type: OneOfWellTestTransFlowPerRategasend
        """

        self._rategasend = rategasend

    @property
    def rategasliftgas(self):
        """Gets the rategasliftgas of this WellTestTransFlowPer.  # noqa: E501


        :return: The rategasliftgas of this WellTestTransFlowPer.  # noqa: E501
        :rtype: OneOfWellTestTransFlowPerRategasliftgas
        """
        return self._rategasliftgas

    @rategasliftgas.setter
    def rategasliftgas(self, rategasliftgas):
        """Sets the rategasliftgas of this WellTestTransFlowPer.


        :param rategasliftgas: The rategasliftgas of this WellTestTransFlowPer.  # noqa: E501
        :type: OneOfWellTestTransFlowPerRategasliftgas
        """

        self._rategasliftgas = rategasliftgas

    @property
    def rateoilend(self):
        """Gets the rateoilend of this WellTestTransFlowPer.  # noqa: E501


        :return: The rateoilend of this WellTestTransFlowPer.  # noqa: E501
        :rtype: OneOfWellTestTransFlowPerRateoilend
        """
        return self._rateoilend

    @rateoilend.setter
    def rateoilend(self, rateoilend):
        """Sets the rateoilend of this WellTestTransFlowPer.


        :param rateoilend: The rateoilend of this WellTestTransFlowPer.  # noqa: E501
        :type: OneOfWellTestTransFlowPerRateoilend
        """

        self._rateoilend = rateoilend

    @property
    def ratewaterend(self):
        """Gets the ratewaterend of this WellTestTransFlowPer.  # noqa: E501


        :return: The ratewaterend of this WellTestTransFlowPer.  # noqa: E501
        :rtype: OneOfWellTestTransFlowPerRatewaterend
        """
        return self._ratewaterend

    @ratewaterend.setter
    def ratewaterend(self, ratewaterend):
        """Sets the ratewaterend of this WellTestTransFlowPer.


        :param ratewaterend: The ratewaterend of this WellTestTransFlowPer.  # noqa: E501
        :type: OneOfWellTestTransFlowPerRatewaterend
        """

        self._ratewaterend = ratewaterend

    @property
    def salinitywaterend(self):
        """Gets the salinitywaterend of this WellTestTransFlowPer.  # noqa: E501


        :return: The salinitywaterend of this WellTestTransFlowPer.  # noqa: E501
        :rtype: OneOfWellTestTransFlowPerSalinitywaterend
        """
        return self._salinitywaterend

    @salinitywaterend.setter
    def salinitywaterend(self, salinitywaterend):
        """Sets the salinitywaterend of this WellTestTransFlowPer.


        :param salinitywaterend: The salinitywaterend of this WellTestTransFlowPer.  # noqa: E501
        :type: OneOfWellTestTransFlowPerSalinitywaterend
        """

        self._salinitywaterend = salinitywaterend

    @property
    def sandcutend(self):
        """Gets the sandcutend of this WellTestTransFlowPer.  # noqa: E501


        :return: The sandcutend of this WellTestTransFlowPer.  # noqa: E501
        :rtype: OneOfWellTestTransFlowPerSandcutend
        """
        return self._sandcutend

    @sandcutend.setter
    def sandcutend(self, sandcutend):
        """Sets the sandcutend of this WellTestTransFlowPer.


        :param sandcutend: The sandcutend of this WellTestTransFlowPer.  # noqa: E501
        :type: OneOfWellTestTransFlowPerSandcutend
        """

        self._sandcutend = sandcutend

    @property
    def syscreatedate(self):
        """Gets the syscreatedate of this WellTestTransFlowPer.  # noqa: E501


        :return: The syscreatedate of this WellTestTransFlowPer.  # noqa: E501
        :rtype: datetime
        """
        return self._syscreatedate

    @syscreatedate.setter
    def syscreatedate(self, syscreatedate):
        """Sets the syscreatedate of this WellTestTransFlowPer.


        :param syscreatedate: The syscreatedate of this WellTestTransFlowPer.  # noqa: E501
        :type: datetime
        """

        self._syscreatedate = syscreatedate

    @property
    def syscreateuser(self):
        """Gets the syscreateuser of this WellTestTransFlowPer.  # noqa: E501


        :return: The syscreateuser of this WellTestTransFlowPer.  # noqa: E501
        :rtype: str
        """
        return self._syscreateuser

    @syscreateuser.setter
    def syscreateuser(self, syscreateuser):
        """Sets the syscreateuser of this WellTestTransFlowPer.


        :param syscreateuser: The syscreateuser of this WellTestTransFlowPer.  # noqa: E501
        :type: str
        """

        self._syscreateuser = syscreateuser

    @property
    def syslockchildren(self):
        """Gets the syslockchildren of this WellTestTransFlowPer.  # noqa: E501


        :return: The syslockchildren of this WellTestTransFlowPer.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildren

    @syslockchildren.setter
    def syslockchildren(self, syslockchildren):
        """Sets the syslockchildren of this WellTestTransFlowPer.


        :param syslockchildren: The syslockchildren of this WellTestTransFlowPer.  # noqa: E501
        :type: int
        """

        self._syslockchildren = syslockchildren

    @property
    def syslockchildrenui(self):
        """Gets the syslockchildrenui of this WellTestTransFlowPer.  # noqa: E501


        :return: The syslockchildrenui of this WellTestTransFlowPer.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildrenui

    @syslockchildrenui.setter
    def syslockchildrenui(self, syslockchildrenui):
        """Sets the syslockchildrenui of this WellTestTransFlowPer.


        :param syslockchildrenui: The syslockchildrenui of this WellTestTransFlowPer.  # noqa: E501
        :type: int
        """

        self._syslockchildrenui = syslockchildrenui

    @property
    def syslockdate(self):
        """Gets the syslockdate of this WellTestTransFlowPer.  # noqa: E501


        :return: The syslockdate of this WellTestTransFlowPer.  # noqa: E501
        :rtype: datetime
        """
        return self._syslockdate

    @syslockdate.setter
    def syslockdate(self, syslockdate):
        """Sets the syslockdate of this WellTestTransFlowPer.


        :param syslockdate: The syslockdate of this WellTestTransFlowPer.  # noqa: E501
        :type: datetime
        """

        self._syslockdate = syslockdate

    @property
    def syslockme(self):
        """Gets the syslockme of this WellTestTransFlowPer.  # noqa: E501


        :return: The syslockme of this WellTestTransFlowPer.  # noqa: E501
        :rtype: int
        """
        return self._syslockme

    @syslockme.setter
    def syslockme(self, syslockme):
        """Sets the syslockme of this WellTestTransFlowPer.


        :param syslockme: The syslockme of this WellTestTransFlowPer.  # noqa: E501
        :type: int
        """

        self._syslockme = syslockme

    @property
    def syslockmeui(self):
        """Gets the syslockmeui of this WellTestTransFlowPer.  # noqa: E501


        :return: The syslockmeui of this WellTestTransFlowPer.  # noqa: E501
        :rtype: int
        """
        return self._syslockmeui

    @syslockmeui.setter
    def syslockmeui(self, syslockmeui):
        """Sets the syslockmeui of this WellTestTransFlowPer.


        :param syslockmeui: The syslockmeui of this WellTestTransFlowPer.  # noqa: E501
        :type: int
        """

        self._syslockmeui = syslockmeui

    @property
    def sysmoddate(self):
        """Gets the sysmoddate of this WellTestTransFlowPer.  # noqa: E501


        :return: The sysmoddate of this WellTestTransFlowPer.  # noqa: E501
        :rtype: datetime
        """
        return self._sysmoddate

    @sysmoddate.setter
    def sysmoddate(self, sysmoddate):
        """Sets the sysmoddate of this WellTestTransFlowPer.


        :param sysmoddate: The sysmoddate of this WellTestTransFlowPer.  # noqa: E501
        :type: datetime
        """

        self._sysmoddate = sysmoddate

    @property
    def sysmoduser(self):
        """Gets the sysmoduser of this WellTestTransFlowPer.  # noqa: E501


        :return: The sysmoduser of this WellTestTransFlowPer.  # noqa: E501
        :rtype: str
        """
        return self._sysmoduser

    @sysmoduser.setter
    def sysmoduser(self, sysmoduser):
        """Sets the sysmoduser of this WellTestTransFlowPer.


        :param sysmoduser: The sysmoduser of this WellTestTransFlowPer.  # noqa: E501
        :type: str
        """

        self._sysmoduser = sysmoduser

    @property
    def systag(self):
        """Gets the systag of this WellTestTransFlowPer.  # noqa: E501


        :return: The systag of this WellTestTransFlowPer.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this WellTestTransFlowPer.


        :param systag: The systag of this WellTestTransFlowPer.  # noqa: E501
        :type: str
        """

        self._systag = systag

    @property
    def szdiachoke(self):
        """Gets the szdiachoke of this WellTestTransFlowPer.  # noqa: E501


        :return: The szdiachoke of this WellTestTransFlowPer.  # noqa: E501
        :rtype: OneOfWellTestTransFlowPerSzdiachoke
        """
        return self._szdiachoke

    @szdiachoke.setter
    def szdiachoke(self, szdiachoke):
        """Sets the szdiachoke of this WellTestTransFlowPer.


        :param szdiachoke: The szdiachoke of this WellTestTransFlowPer.  # noqa: E501
        :type: OneOfWellTestTransFlowPerSzdiachoke
        """

        self._szdiachoke = szdiachoke

    @property
    def tempbhend(self):
        """Gets the tempbhend of this WellTestTransFlowPer.  # noqa: E501


        :return: The tempbhend of this WellTestTransFlowPer.  # noqa: E501
        :rtype: OneOfWellTestTransFlowPerTempbhend
        """
        return self._tempbhend

    @tempbhend.setter
    def tempbhend(self, tempbhend):
        """Sets the tempbhend of this WellTestTransFlowPer.


        :param tempbhend: The tempbhend of this WellTestTransFlowPer.  # noqa: E501
        :type: OneOfWellTestTransFlowPerTempbhend
        """

        self._tempbhend = tempbhend

    @property
    def tempbhinit(self):
        """Gets the tempbhinit of this WellTestTransFlowPer.  # noqa: E501


        :return: The tempbhinit of this WellTestTransFlowPer.  # noqa: E501
        :rtype: OneOfWellTestTransFlowPerTempbhinit
        """
        return self._tempbhinit

    @tempbhinit.setter
    def tempbhinit(self, tempbhinit):
        """Sets the tempbhinit of this WellTestTransFlowPer.


        :param tempbhinit: The tempbhinit of this WellTestTransFlowPer.  # noqa: E501
        :type: OneOfWellTestTransFlowPerTempbhinit
        """

        self._tempbhinit = tempbhinit

    @property
    def tempcasend(self):
        """Gets the tempcasend of this WellTestTransFlowPer.  # noqa: E501


        :return: The tempcasend of this WellTestTransFlowPer.  # noqa: E501
        :rtype: OneOfWellTestTransFlowPerTempcasend
        """
        return self._tempcasend

    @tempcasend.setter
    def tempcasend(self, tempcasend):
        """Sets the tempcasend of this WellTestTransFlowPer.


        :param tempcasend: The tempcasend of this WellTestTransFlowPer.  # noqa: E501
        :type: OneOfWellTestTransFlowPerTempcasend
        """

        self._tempcasend = tempcasend

    @property
    def tempcasinit(self):
        """Gets the tempcasinit of this WellTestTransFlowPer.  # noqa: E501


        :return: The tempcasinit of this WellTestTransFlowPer.  # noqa: E501
        :rtype: OneOfWellTestTransFlowPerTempcasinit
        """
        return self._tempcasinit

    @tempcasinit.setter
    def tempcasinit(self, tempcasinit):
        """Sets the tempcasinit of this WellTestTransFlowPer.


        :param tempcasinit: The tempcasinit of this WellTestTransFlowPer.  # noqa: E501
        :type: OneOfWellTestTransFlowPerTempcasinit
        """

        self._tempcasinit = tempcasinit

    @property
    def tempsepend(self):
        """Gets the tempsepend of this WellTestTransFlowPer.  # noqa: E501


        :return: The tempsepend of this WellTestTransFlowPer.  # noqa: E501
        :rtype: OneOfWellTestTransFlowPerTempsepend
        """
        return self._tempsepend

    @tempsepend.setter
    def tempsepend(self, tempsepend):
        """Sets the tempsepend of this WellTestTransFlowPer.


        :param tempsepend: The tempsepend of this WellTestTransFlowPer.  # noqa: E501
        :type: OneOfWellTestTransFlowPerTempsepend
        """

        self._tempsepend = tempsepend

    @property
    def tempsepinit(self):
        """Gets the tempsepinit of this WellTestTransFlowPer.  # noqa: E501


        :return: The tempsepinit of this WellTestTransFlowPer.  # noqa: E501
        :rtype: OneOfWellTestTransFlowPerTempsepinit
        """
        return self._tempsepinit

    @tempsepinit.setter
    def tempsepinit(self, tempsepinit):
        """Sets the tempsepinit of this WellTestTransFlowPer.


        :param tempsepinit: The tempsepinit of this WellTestTransFlowPer.  # noqa: E501
        :type: OneOfWellTestTransFlowPerTempsepinit
        """

        self._tempsepinit = tempsepinit

    @property
    def temptubend(self):
        """Gets the temptubend of this WellTestTransFlowPer.  # noqa: E501


        :return: The temptubend of this WellTestTransFlowPer.  # noqa: E501
        :rtype: OneOfWellTestTransFlowPerTemptubend
        """
        return self._temptubend

    @temptubend.setter
    def temptubend(self, temptubend):
        """Sets the temptubend of this WellTestTransFlowPer.


        :param temptubend: The temptubend of this WellTestTransFlowPer.  # noqa: E501
        :type: OneOfWellTestTransFlowPerTemptubend
        """

        self._temptubend = temptubend

    @property
    def temptubinit(self):
        """Gets the temptubinit of this WellTestTransFlowPer.  # noqa: E501


        :return: The temptubinit of this WellTestTransFlowPer.  # noqa: E501
        :rtype: OneOfWellTestTransFlowPerTemptubinit
        """
        return self._temptubinit

    @temptubinit.setter
    def temptubinit(self, temptubinit):
        """Sets the temptubinit of this WellTestTransFlowPer.


        :param temptubinit: The temptubinit of this WellTestTransFlowPer.  # noqa: E501
        :type: OneOfWellTestTransFlowPerTemptubinit
        """

        self._temptubinit = temptubinit

    @property
    def typ(self):
        """Gets the typ of this WellTestTransFlowPer.  # noqa: E501


        :return: The typ of this WellTestTransFlowPer.  # noqa: E501
        :rtype: str
        """
        return self._typ

    @typ.setter
    def typ(self, typ):
        """Sets the typ of this WellTestTransFlowPer.


        :param typ: The typ of this WellTestTransFlowPer.  # noqa: E501
        :type: str
        """

        self._typ = typ

    @property
    def volumecondtotal(self):
        """Gets the volumecondtotal of this WellTestTransFlowPer.  # noqa: E501


        :return: The volumecondtotal of this WellTestTransFlowPer.  # noqa: E501
        :rtype: OneOfWellTestTransFlowPerVolumecondtotal
        """
        return self._volumecondtotal

    @volumecondtotal.setter
    def volumecondtotal(self, volumecondtotal):
        """Sets the volumecondtotal of this WellTestTransFlowPer.


        :param volumecondtotal: The volumecondtotal of this WellTestTransFlowPer.  # noqa: E501
        :type: OneOfWellTestTransFlowPerVolumecondtotal
        """

        self._volumecondtotal = volumecondtotal

    @property
    def volumegastotal(self):
        """Gets the volumegastotal of this WellTestTransFlowPer.  # noqa: E501


        :return: The volumegastotal of this WellTestTransFlowPer.  # noqa: E501
        :rtype: OneOfWellTestTransFlowPerVolumegastotal
        """
        return self._volumegastotal

    @volumegastotal.setter
    def volumegastotal(self, volumegastotal):
        """Sets the volumegastotal of this WellTestTransFlowPer.


        :param volumegastotal: The volumegastotal of this WellTestTransFlowPer.  # noqa: E501
        :type: OneOfWellTestTransFlowPerVolumegastotal
        """

        self._volumegastotal = volumegastotal

    @property
    def volumeoiltotal(self):
        """Gets the volumeoiltotal of this WellTestTransFlowPer.  # noqa: E501


        :return: The volumeoiltotal of this WellTestTransFlowPer.  # noqa: E501
        :rtype: OneOfWellTestTransFlowPerVolumeoiltotal
        """
        return self._volumeoiltotal

    @volumeoiltotal.setter
    def volumeoiltotal(self, volumeoiltotal):
        """Sets the volumeoiltotal of this WellTestTransFlowPer.


        :param volumeoiltotal: The volumeoiltotal of this WellTestTransFlowPer.  # noqa: E501
        :type: OneOfWellTestTransFlowPerVolumeoiltotal
        """

        self._volumeoiltotal = volumeoiltotal

    @property
    def volumewatertotal(self):
        """Gets the volumewatertotal of this WellTestTransFlowPer.  # noqa: E501


        :return: The volumewatertotal of this WellTestTransFlowPer.  # noqa: E501
        :rtype: OneOfWellTestTransFlowPerVolumewatertotal
        """
        return self._volumewatertotal

    @volumewatertotal.setter
    def volumewatertotal(self, volumewatertotal):
        """Sets the volumewatertotal of this WellTestTransFlowPer.


        :param volumewatertotal: The volumewatertotal of this WellTestTransFlowPer.  # noqa: E501
        :type: OneOfWellTestTransFlowPerVolumewatertotal
        """

        self._volumewatertotal = volumewatertotal

    @property
    def well_test_trans(self):
        """Gets the well_test_trans of this WellTestTransFlowPer.  # noqa: E501


        :return: The well_test_trans of this WellTestTransFlowPer.  # noqa: E501
        :rtype: AnyOfWellTestTransFlowPerWellTestTrans
        """
        return self._well_test_trans

    @well_test_trans.setter
    def well_test_trans(self, well_test_trans):
        """Sets the well_test_trans of this WellTestTransFlowPer.


        :param well_test_trans: The well_test_trans of this WellTestTransFlowPer.  # noqa: E501
        :type: AnyOfWellTestTransFlowPerWellTestTrans
        """

        self._well_test_trans = well_test_trans

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WellTestTransFlowPer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WellTestTransFlowPer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
