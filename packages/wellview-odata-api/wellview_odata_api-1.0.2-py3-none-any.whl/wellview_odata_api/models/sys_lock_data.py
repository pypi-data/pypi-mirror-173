# coding: utf-8

"""
    OData Service for namespace Default

    This OData service is located at http://localhost  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SysLockData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'idappinstance': 'str',
        'idrec': 'str',
        'idwell': 'str',
        'idworkstation': 'str',
        'syscreatedate': 'datetime',
        'syscreateuser': 'str',
        'sysmoddate': 'datetime',
        'sysmoduser': 'str',
        'tblkey': 'str'
    }

    attribute_map = {
        'idappinstance': 'idappinstance',
        'idrec': 'idrec',
        'idwell': 'idwell',
        'idworkstation': 'idworkstation',
        'syscreatedate': 'syscreatedate',
        'syscreateuser': 'syscreateuser',
        'sysmoddate': 'sysmoddate',
        'sysmoduser': 'sysmoduser',
        'tblkey': 'tblkey'
    }

    def __init__(self, idappinstance=None, idrec=None, idwell=None, idworkstation=None, syscreatedate=None, syscreateuser=None, sysmoddate=None, sysmoduser=None, tblkey=None):  # noqa: E501
        """SysLockData - a model defined in Swagger"""  # noqa: E501
        self._idappinstance = None
        self._idrec = None
        self._idwell = None
        self._idworkstation = None
        self._syscreatedate = None
        self._syscreateuser = None
        self._sysmoddate = None
        self._sysmoduser = None
        self._tblkey = None
        self.discriminator = None
        if idappinstance is not None:
            self.idappinstance = idappinstance
        if idrec is not None:
            self.idrec = idrec
        if idwell is not None:
            self.idwell = idwell
        if idworkstation is not None:
            self.idworkstation = idworkstation
        if syscreatedate is not None:
            self.syscreatedate = syscreatedate
        if syscreateuser is not None:
            self.syscreateuser = syscreateuser
        if sysmoddate is not None:
            self.sysmoddate = sysmoddate
        if sysmoduser is not None:
            self.sysmoduser = sysmoduser
        if tblkey is not None:
            self.tblkey = tblkey

    @property
    def idappinstance(self):
        """Gets the idappinstance of this SysLockData.  # noqa: E501


        :return: The idappinstance of this SysLockData.  # noqa: E501
        :rtype: str
        """
        return self._idappinstance

    @idappinstance.setter
    def idappinstance(self, idappinstance):
        """Sets the idappinstance of this SysLockData.


        :param idappinstance: The idappinstance of this SysLockData.  # noqa: E501
        :type: str
        """

        self._idappinstance = idappinstance

    @property
    def idrec(self):
        """Gets the idrec of this SysLockData.  # noqa: E501


        :return: The idrec of this SysLockData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this SysLockData.


        :param idrec: The idrec of this SysLockData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idwell(self):
        """Gets the idwell of this SysLockData.  # noqa: E501


        :return: The idwell of this SysLockData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this SysLockData.


        :param idwell: The idwell of this SysLockData.  # noqa: E501
        :type: str
        """

        self._idwell = idwell

    @property
    def idworkstation(self):
        """Gets the idworkstation of this SysLockData.  # noqa: E501


        :return: The idworkstation of this SysLockData.  # noqa: E501
        :rtype: str
        """
        return self._idworkstation

    @idworkstation.setter
    def idworkstation(self, idworkstation):
        """Sets the idworkstation of this SysLockData.


        :param idworkstation: The idworkstation of this SysLockData.  # noqa: E501
        :type: str
        """

        self._idworkstation = idworkstation

    @property
    def syscreatedate(self):
        """Gets the syscreatedate of this SysLockData.  # noqa: E501


        :return: The syscreatedate of this SysLockData.  # noqa: E501
        :rtype: datetime
        """
        return self._syscreatedate

    @syscreatedate.setter
    def syscreatedate(self, syscreatedate):
        """Sets the syscreatedate of this SysLockData.


        :param syscreatedate: The syscreatedate of this SysLockData.  # noqa: E501
        :type: datetime
        """

        self._syscreatedate = syscreatedate

    @property
    def syscreateuser(self):
        """Gets the syscreateuser of this SysLockData.  # noqa: E501


        :return: The syscreateuser of this SysLockData.  # noqa: E501
        :rtype: str
        """
        return self._syscreateuser

    @syscreateuser.setter
    def syscreateuser(self, syscreateuser):
        """Sets the syscreateuser of this SysLockData.


        :param syscreateuser: The syscreateuser of this SysLockData.  # noqa: E501
        :type: str
        """

        self._syscreateuser = syscreateuser

    @property
    def sysmoddate(self):
        """Gets the sysmoddate of this SysLockData.  # noqa: E501


        :return: The sysmoddate of this SysLockData.  # noqa: E501
        :rtype: datetime
        """
        return self._sysmoddate

    @sysmoddate.setter
    def sysmoddate(self, sysmoddate):
        """Sets the sysmoddate of this SysLockData.


        :param sysmoddate: The sysmoddate of this SysLockData.  # noqa: E501
        :type: datetime
        """

        self._sysmoddate = sysmoddate

    @property
    def sysmoduser(self):
        """Gets the sysmoduser of this SysLockData.  # noqa: E501


        :return: The sysmoduser of this SysLockData.  # noqa: E501
        :rtype: str
        """
        return self._sysmoduser

    @sysmoduser.setter
    def sysmoduser(self, sysmoduser):
        """Sets the sysmoduser of this SysLockData.


        :param sysmoduser: The sysmoduser of this SysLockData.  # noqa: E501
        :type: str
        """

        self._sysmoduser = sysmoduser

    @property
    def tblkey(self):
        """Gets the tblkey of this SysLockData.  # noqa: E501


        :return: The tblkey of this SysLockData.  # noqa: E501
        :rtype: str
        """
        return self._tblkey

    @tblkey.setter
    def tblkey(self, tblkey):
        """Sets the tblkey of this SysLockData.


        :param tblkey: The tblkey of this SysLockData.  # noqa: E501
        :type: str
        """

        self._tblkey = tblkey

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SysLockData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SysLockData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
