# coding: utf-8

"""
    OData Service for namespace Default

    This OData service is located at http://localhost  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WellTestTrans(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'com': 'str',
        'depthbtm': 'OneOfWellTestTransDepthbtm',
        'depthtop': 'OneOfWellTestTransDepthtop',
        'des': 'str',
        'displayflag': 'int',
        'dttm': 'datetime',
        'idrec': 'str',
        'idrecjob': 'str',
        'idrecjobtk': 'str',
        'idrecwellbore': 'str',
        'idrecwellboretk': 'str',
        'idreczonecompletion': 'str',
        'idreczonecompletiontk': 'str',
        'idwell': 'str',
        'loadfluidtyp': 'str',
        'phasesepmethod': 'str',
        'porosity': 'OneOfWellTestTransPorosity',
        'porositysource': 'str',
        'producedto': 'str',
        'subtyp': 'str',
        'surfacetestequip': 'str',
        'syscreatedate': 'datetime',
        'syscreateuser': 'str',
        'syslockchildren': 'int',
        'syslockchildrenui': 'int',
        'syslockdate': 'datetime',
        'syslockme': 'int',
        'syslockmeui': 'int',
        'sysmoddate': 'datetime',
        'sysmoduser': 'str',
        'systag': 'str',
        'testedby': 'str',
        'typ': 'str',
        'volloadfluid': 'OneOfWellTestTransVolloadfluid',
        'volloadfluidunrecov': 'OneOfWellTestTransVolloadfluidunrecov',
        'volumemethod': 'str',
        'well_test_trans_dsts': 'list[WellTestTransDst]',
        'well_test_trans_flow_pers': 'list[WellTestTransFlowPer]',
        'well_test_trans_gauges': 'list[WellTestTransGauge]',
        'well_test_trans_rates': 'list[WellTestTransRate]',
        'well_test_trans_results': 'list[WellTestTransResult]',
        'wellheader': 'AnyOfWellTestTransWellheader'
    }

    attribute_map = {
        'com': 'com',
        'depthbtm': 'depthbtm',
        'depthtop': 'depthtop',
        'des': 'des',
        'displayflag': 'displayflag',
        'dttm': 'dttm',
        'idrec': 'idrec',
        'idrecjob': 'idrecjob',
        'idrecjobtk': 'idrecjobtk',
        'idrecwellbore': 'idrecwellbore',
        'idrecwellboretk': 'idrecwellboretk',
        'idreczonecompletion': 'idreczonecompletion',
        'idreczonecompletiontk': 'idreczonecompletiontk',
        'idwell': 'idwell',
        'loadfluidtyp': 'loadfluidtyp',
        'phasesepmethod': 'phasesepmethod',
        'porosity': 'porosity',
        'porositysource': 'porositysource',
        'producedto': 'producedto',
        'subtyp': 'subtyp',
        'surfacetestequip': 'surfacetestequip',
        'syscreatedate': 'syscreatedate',
        'syscreateuser': 'syscreateuser',
        'syslockchildren': 'syslockchildren',
        'syslockchildrenui': 'syslockchildrenui',
        'syslockdate': 'syslockdate',
        'syslockme': 'syslockme',
        'syslockmeui': 'syslockmeui',
        'sysmoddate': 'sysmoddate',
        'sysmoduser': 'sysmoduser',
        'systag': 'systag',
        'testedby': 'testedby',
        'typ': 'typ',
        'volloadfluid': 'volloadfluid',
        'volloadfluidunrecov': 'volloadfluidunrecov',
        'volumemethod': 'volumemethod',
        'well_test_trans_dsts': 'wellTestTransDsts',
        'well_test_trans_flow_pers': 'wellTestTransFlowPers',
        'well_test_trans_gauges': 'wellTestTransGauges',
        'well_test_trans_rates': 'wellTestTransRates',
        'well_test_trans_results': 'wellTestTransResults',
        'wellheader': 'wellheader'
    }

    def __init__(self, com=None, depthbtm=None, depthtop=None, des=None, displayflag=None, dttm=None, idrec=None, idrecjob=None, idrecjobtk=None, idrecwellbore=None, idrecwellboretk=None, idreczonecompletion=None, idreczonecompletiontk=None, idwell=None, loadfluidtyp=None, phasesepmethod=None, porosity=None, porositysource=None, producedto=None, subtyp=None, surfacetestequip=None, syscreatedate=None, syscreateuser=None, syslockchildren=None, syslockchildrenui=None, syslockdate=None, syslockme=None, syslockmeui=None, sysmoddate=None, sysmoduser=None, systag=None, testedby=None, typ=None, volloadfluid=None, volloadfluidunrecov=None, volumemethod=None, well_test_trans_dsts=None, well_test_trans_flow_pers=None, well_test_trans_gauges=None, well_test_trans_rates=None, well_test_trans_results=None, wellheader=None):  # noqa: E501
        """WellTestTrans - a model defined in Swagger"""  # noqa: E501
        self._com = None
        self._depthbtm = None
        self._depthtop = None
        self._des = None
        self._displayflag = None
        self._dttm = None
        self._idrec = None
        self._idrecjob = None
        self._idrecjobtk = None
        self._idrecwellbore = None
        self._idrecwellboretk = None
        self._idreczonecompletion = None
        self._idreczonecompletiontk = None
        self._idwell = None
        self._loadfluidtyp = None
        self._phasesepmethod = None
        self._porosity = None
        self._porositysource = None
        self._producedto = None
        self._subtyp = None
        self._surfacetestequip = None
        self._syscreatedate = None
        self._syscreateuser = None
        self._syslockchildren = None
        self._syslockchildrenui = None
        self._syslockdate = None
        self._syslockme = None
        self._syslockmeui = None
        self._sysmoddate = None
        self._sysmoduser = None
        self._systag = None
        self._testedby = None
        self._typ = None
        self._volloadfluid = None
        self._volloadfluidunrecov = None
        self._volumemethod = None
        self._well_test_trans_dsts = None
        self._well_test_trans_flow_pers = None
        self._well_test_trans_gauges = None
        self._well_test_trans_rates = None
        self._well_test_trans_results = None
        self._wellheader = None
        self.discriminator = None
        if com is not None:
            self.com = com
        if depthbtm is not None:
            self.depthbtm = depthbtm
        if depthtop is not None:
            self.depthtop = depthtop
        if des is not None:
            self.des = des
        if displayflag is not None:
            self.displayflag = displayflag
        if dttm is not None:
            self.dttm = dttm
        if idrec is not None:
            self.idrec = idrec
        if idrecjob is not None:
            self.idrecjob = idrecjob
        if idrecjobtk is not None:
            self.idrecjobtk = idrecjobtk
        if idrecwellbore is not None:
            self.idrecwellbore = idrecwellbore
        if idrecwellboretk is not None:
            self.idrecwellboretk = idrecwellboretk
        if idreczonecompletion is not None:
            self.idreczonecompletion = idreczonecompletion
        if idreczonecompletiontk is not None:
            self.idreczonecompletiontk = idreczonecompletiontk
        if idwell is not None:
            self.idwell = idwell
        if loadfluidtyp is not None:
            self.loadfluidtyp = loadfluidtyp
        if phasesepmethod is not None:
            self.phasesepmethod = phasesepmethod
        if porosity is not None:
            self.porosity = porosity
        if porositysource is not None:
            self.porositysource = porositysource
        if producedto is not None:
            self.producedto = producedto
        if subtyp is not None:
            self.subtyp = subtyp
        if surfacetestequip is not None:
            self.surfacetestequip = surfacetestequip
        if syscreatedate is not None:
            self.syscreatedate = syscreatedate
        if syscreateuser is not None:
            self.syscreateuser = syscreateuser
        if syslockchildren is not None:
            self.syslockchildren = syslockchildren
        if syslockchildrenui is not None:
            self.syslockchildrenui = syslockchildrenui
        if syslockdate is not None:
            self.syslockdate = syslockdate
        if syslockme is not None:
            self.syslockme = syslockme
        if syslockmeui is not None:
            self.syslockmeui = syslockmeui
        if sysmoddate is not None:
            self.sysmoddate = sysmoddate
        if sysmoduser is not None:
            self.sysmoduser = sysmoduser
        if systag is not None:
            self.systag = systag
        if testedby is not None:
            self.testedby = testedby
        if typ is not None:
            self.typ = typ
        if volloadfluid is not None:
            self.volloadfluid = volloadfluid
        if volloadfluidunrecov is not None:
            self.volloadfluidunrecov = volloadfluidunrecov
        if volumemethod is not None:
            self.volumemethod = volumemethod
        if well_test_trans_dsts is not None:
            self.well_test_trans_dsts = well_test_trans_dsts
        if well_test_trans_flow_pers is not None:
            self.well_test_trans_flow_pers = well_test_trans_flow_pers
        if well_test_trans_gauges is not None:
            self.well_test_trans_gauges = well_test_trans_gauges
        if well_test_trans_rates is not None:
            self.well_test_trans_rates = well_test_trans_rates
        if well_test_trans_results is not None:
            self.well_test_trans_results = well_test_trans_results
        if wellheader is not None:
            self.wellheader = wellheader

    @property
    def com(self):
        """Gets the com of this WellTestTrans.  # noqa: E501


        :return: The com of this WellTestTrans.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this WellTestTrans.


        :param com: The com of this WellTestTrans.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def depthbtm(self):
        """Gets the depthbtm of this WellTestTrans.  # noqa: E501


        :return: The depthbtm of this WellTestTrans.  # noqa: E501
        :rtype: OneOfWellTestTransDepthbtm
        """
        return self._depthbtm

    @depthbtm.setter
    def depthbtm(self, depthbtm):
        """Sets the depthbtm of this WellTestTrans.


        :param depthbtm: The depthbtm of this WellTestTrans.  # noqa: E501
        :type: OneOfWellTestTransDepthbtm
        """

        self._depthbtm = depthbtm

    @property
    def depthtop(self):
        """Gets the depthtop of this WellTestTrans.  # noqa: E501


        :return: The depthtop of this WellTestTrans.  # noqa: E501
        :rtype: OneOfWellTestTransDepthtop
        """
        return self._depthtop

    @depthtop.setter
    def depthtop(self, depthtop):
        """Sets the depthtop of this WellTestTrans.


        :param depthtop: The depthtop of this WellTestTrans.  # noqa: E501
        :type: OneOfWellTestTransDepthtop
        """

        self._depthtop = depthtop

    @property
    def des(self):
        """Gets the des of this WellTestTrans.  # noqa: E501


        :return: The des of this WellTestTrans.  # noqa: E501
        :rtype: str
        """
        return self._des

    @des.setter
    def des(self, des):
        """Sets the des of this WellTestTrans.


        :param des: The des of this WellTestTrans.  # noqa: E501
        :type: str
        """

        self._des = des

    @property
    def displayflag(self):
        """Gets the displayflag of this WellTestTrans.  # noqa: E501


        :return: The displayflag of this WellTestTrans.  # noqa: E501
        :rtype: int
        """
        return self._displayflag

    @displayflag.setter
    def displayflag(self, displayflag):
        """Sets the displayflag of this WellTestTrans.


        :param displayflag: The displayflag of this WellTestTrans.  # noqa: E501
        :type: int
        """

        self._displayflag = displayflag

    @property
    def dttm(self):
        """Gets the dttm of this WellTestTrans.  # noqa: E501


        :return: The dttm of this WellTestTrans.  # noqa: E501
        :rtype: datetime
        """
        return self._dttm

    @dttm.setter
    def dttm(self, dttm):
        """Sets the dttm of this WellTestTrans.


        :param dttm: The dttm of this WellTestTrans.  # noqa: E501
        :type: datetime
        """

        self._dttm = dttm

    @property
    def idrec(self):
        """Gets the idrec of this WellTestTrans.  # noqa: E501


        :return: The idrec of this WellTestTrans.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this WellTestTrans.


        :param idrec: The idrec of this WellTestTrans.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecjob(self):
        """Gets the idrecjob of this WellTestTrans.  # noqa: E501


        :return: The idrecjob of this WellTestTrans.  # noqa: E501
        :rtype: str
        """
        return self._idrecjob

    @idrecjob.setter
    def idrecjob(self, idrecjob):
        """Sets the idrecjob of this WellTestTrans.


        :param idrecjob: The idrecjob of this WellTestTrans.  # noqa: E501
        :type: str
        """

        self._idrecjob = idrecjob

    @property
    def idrecjobtk(self):
        """Gets the idrecjobtk of this WellTestTrans.  # noqa: E501


        :return: The idrecjobtk of this WellTestTrans.  # noqa: E501
        :rtype: str
        """
        return self._idrecjobtk

    @idrecjobtk.setter
    def idrecjobtk(self, idrecjobtk):
        """Sets the idrecjobtk of this WellTestTrans.


        :param idrecjobtk: The idrecjobtk of this WellTestTrans.  # noqa: E501
        :type: str
        """

        self._idrecjobtk = idrecjobtk

    @property
    def idrecwellbore(self):
        """Gets the idrecwellbore of this WellTestTrans.  # noqa: E501


        :return: The idrecwellbore of this WellTestTrans.  # noqa: E501
        :rtype: str
        """
        return self._idrecwellbore

    @idrecwellbore.setter
    def idrecwellbore(self, idrecwellbore):
        """Sets the idrecwellbore of this WellTestTrans.


        :param idrecwellbore: The idrecwellbore of this WellTestTrans.  # noqa: E501
        :type: str
        """

        self._idrecwellbore = idrecwellbore

    @property
    def idrecwellboretk(self):
        """Gets the idrecwellboretk of this WellTestTrans.  # noqa: E501


        :return: The idrecwellboretk of this WellTestTrans.  # noqa: E501
        :rtype: str
        """
        return self._idrecwellboretk

    @idrecwellboretk.setter
    def idrecwellboretk(self, idrecwellboretk):
        """Sets the idrecwellboretk of this WellTestTrans.


        :param idrecwellboretk: The idrecwellboretk of this WellTestTrans.  # noqa: E501
        :type: str
        """

        self._idrecwellboretk = idrecwellboretk

    @property
    def idreczonecompletion(self):
        """Gets the idreczonecompletion of this WellTestTrans.  # noqa: E501


        :return: The idreczonecompletion of this WellTestTrans.  # noqa: E501
        :rtype: str
        """
        return self._idreczonecompletion

    @idreczonecompletion.setter
    def idreczonecompletion(self, idreczonecompletion):
        """Sets the idreczonecompletion of this WellTestTrans.


        :param idreczonecompletion: The idreczonecompletion of this WellTestTrans.  # noqa: E501
        :type: str
        """

        self._idreczonecompletion = idreczonecompletion

    @property
    def idreczonecompletiontk(self):
        """Gets the idreczonecompletiontk of this WellTestTrans.  # noqa: E501


        :return: The idreczonecompletiontk of this WellTestTrans.  # noqa: E501
        :rtype: str
        """
        return self._idreczonecompletiontk

    @idreczonecompletiontk.setter
    def idreczonecompletiontk(self, idreczonecompletiontk):
        """Sets the idreczonecompletiontk of this WellTestTrans.


        :param idreczonecompletiontk: The idreczonecompletiontk of this WellTestTrans.  # noqa: E501
        :type: str
        """

        self._idreczonecompletiontk = idreczonecompletiontk

    @property
    def idwell(self):
        """Gets the idwell of this WellTestTrans.  # noqa: E501


        :return: The idwell of this WellTestTrans.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this WellTestTrans.


        :param idwell: The idwell of this WellTestTrans.  # noqa: E501
        :type: str
        """

        self._idwell = idwell

    @property
    def loadfluidtyp(self):
        """Gets the loadfluidtyp of this WellTestTrans.  # noqa: E501


        :return: The loadfluidtyp of this WellTestTrans.  # noqa: E501
        :rtype: str
        """
        return self._loadfluidtyp

    @loadfluidtyp.setter
    def loadfluidtyp(self, loadfluidtyp):
        """Sets the loadfluidtyp of this WellTestTrans.


        :param loadfluidtyp: The loadfluidtyp of this WellTestTrans.  # noqa: E501
        :type: str
        """

        self._loadfluidtyp = loadfluidtyp

    @property
    def phasesepmethod(self):
        """Gets the phasesepmethod of this WellTestTrans.  # noqa: E501


        :return: The phasesepmethod of this WellTestTrans.  # noqa: E501
        :rtype: str
        """
        return self._phasesepmethod

    @phasesepmethod.setter
    def phasesepmethod(self, phasesepmethod):
        """Sets the phasesepmethod of this WellTestTrans.


        :param phasesepmethod: The phasesepmethod of this WellTestTrans.  # noqa: E501
        :type: str
        """

        self._phasesepmethod = phasesepmethod

    @property
    def porosity(self):
        """Gets the porosity of this WellTestTrans.  # noqa: E501


        :return: The porosity of this WellTestTrans.  # noqa: E501
        :rtype: OneOfWellTestTransPorosity
        """
        return self._porosity

    @porosity.setter
    def porosity(self, porosity):
        """Sets the porosity of this WellTestTrans.


        :param porosity: The porosity of this WellTestTrans.  # noqa: E501
        :type: OneOfWellTestTransPorosity
        """

        self._porosity = porosity

    @property
    def porositysource(self):
        """Gets the porositysource of this WellTestTrans.  # noqa: E501


        :return: The porositysource of this WellTestTrans.  # noqa: E501
        :rtype: str
        """
        return self._porositysource

    @porositysource.setter
    def porositysource(self, porositysource):
        """Sets the porositysource of this WellTestTrans.


        :param porositysource: The porositysource of this WellTestTrans.  # noqa: E501
        :type: str
        """

        self._porositysource = porositysource

    @property
    def producedto(self):
        """Gets the producedto of this WellTestTrans.  # noqa: E501


        :return: The producedto of this WellTestTrans.  # noqa: E501
        :rtype: str
        """
        return self._producedto

    @producedto.setter
    def producedto(self, producedto):
        """Sets the producedto of this WellTestTrans.


        :param producedto: The producedto of this WellTestTrans.  # noqa: E501
        :type: str
        """

        self._producedto = producedto

    @property
    def subtyp(self):
        """Gets the subtyp of this WellTestTrans.  # noqa: E501


        :return: The subtyp of this WellTestTrans.  # noqa: E501
        :rtype: str
        """
        return self._subtyp

    @subtyp.setter
    def subtyp(self, subtyp):
        """Sets the subtyp of this WellTestTrans.


        :param subtyp: The subtyp of this WellTestTrans.  # noqa: E501
        :type: str
        """

        self._subtyp = subtyp

    @property
    def surfacetestequip(self):
        """Gets the surfacetestequip of this WellTestTrans.  # noqa: E501


        :return: The surfacetestequip of this WellTestTrans.  # noqa: E501
        :rtype: str
        """
        return self._surfacetestequip

    @surfacetestequip.setter
    def surfacetestequip(self, surfacetestequip):
        """Sets the surfacetestequip of this WellTestTrans.


        :param surfacetestequip: The surfacetestequip of this WellTestTrans.  # noqa: E501
        :type: str
        """

        self._surfacetestequip = surfacetestequip

    @property
    def syscreatedate(self):
        """Gets the syscreatedate of this WellTestTrans.  # noqa: E501


        :return: The syscreatedate of this WellTestTrans.  # noqa: E501
        :rtype: datetime
        """
        return self._syscreatedate

    @syscreatedate.setter
    def syscreatedate(self, syscreatedate):
        """Sets the syscreatedate of this WellTestTrans.


        :param syscreatedate: The syscreatedate of this WellTestTrans.  # noqa: E501
        :type: datetime
        """

        self._syscreatedate = syscreatedate

    @property
    def syscreateuser(self):
        """Gets the syscreateuser of this WellTestTrans.  # noqa: E501


        :return: The syscreateuser of this WellTestTrans.  # noqa: E501
        :rtype: str
        """
        return self._syscreateuser

    @syscreateuser.setter
    def syscreateuser(self, syscreateuser):
        """Sets the syscreateuser of this WellTestTrans.


        :param syscreateuser: The syscreateuser of this WellTestTrans.  # noqa: E501
        :type: str
        """

        self._syscreateuser = syscreateuser

    @property
    def syslockchildren(self):
        """Gets the syslockchildren of this WellTestTrans.  # noqa: E501


        :return: The syslockchildren of this WellTestTrans.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildren

    @syslockchildren.setter
    def syslockchildren(self, syslockchildren):
        """Sets the syslockchildren of this WellTestTrans.


        :param syslockchildren: The syslockchildren of this WellTestTrans.  # noqa: E501
        :type: int
        """

        self._syslockchildren = syslockchildren

    @property
    def syslockchildrenui(self):
        """Gets the syslockchildrenui of this WellTestTrans.  # noqa: E501


        :return: The syslockchildrenui of this WellTestTrans.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildrenui

    @syslockchildrenui.setter
    def syslockchildrenui(self, syslockchildrenui):
        """Sets the syslockchildrenui of this WellTestTrans.


        :param syslockchildrenui: The syslockchildrenui of this WellTestTrans.  # noqa: E501
        :type: int
        """

        self._syslockchildrenui = syslockchildrenui

    @property
    def syslockdate(self):
        """Gets the syslockdate of this WellTestTrans.  # noqa: E501


        :return: The syslockdate of this WellTestTrans.  # noqa: E501
        :rtype: datetime
        """
        return self._syslockdate

    @syslockdate.setter
    def syslockdate(self, syslockdate):
        """Sets the syslockdate of this WellTestTrans.


        :param syslockdate: The syslockdate of this WellTestTrans.  # noqa: E501
        :type: datetime
        """

        self._syslockdate = syslockdate

    @property
    def syslockme(self):
        """Gets the syslockme of this WellTestTrans.  # noqa: E501


        :return: The syslockme of this WellTestTrans.  # noqa: E501
        :rtype: int
        """
        return self._syslockme

    @syslockme.setter
    def syslockme(self, syslockme):
        """Sets the syslockme of this WellTestTrans.


        :param syslockme: The syslockme of this WellTestTrans.  # noqa: E501
        :type: int
        """

        self._syslockme = syslockme

    @property
    def syslockmeui(self):
        """Gets the syslockmeui of this WellTestTrans.  # noqa: E501


        :return: The syslockmeui of this WellTestTrans.  # noqa: E501
        :rtype: int
        """
        return self._syslockmeui

    @syslockmeui.setter
    def syslockmeui(self, syslockmeui):
        """Sets the syslockmeui of this WellTestTrans.


        :param syslockmeui: The syslockmeui of this WellTestTrans.  # noqa: E501
        :type: int
        """

        self._syslockmeui = syslockmeui

    @property
    def sysmoddate(self):
        """Gets the sysmoddate of this WellTestTrans.  # noqa: E501


        :return: The sysmoddate of this WellTestTrans.  # noqa: E501
        :rtype: datetime
        """
        return self._sysmoddate

    @sysmoddate.setter
    def sysmoddate(self, sysmoddate):
        """Sets the sysmoddate of this WellTestTrans.


        :param sysmoddate: The sysmoddate of this WellTestTrans.  # noqa: E501
        :type: datetime
        """

        self._sysmoddate = sysmoddate

    @property
    def sysmoduser(self):
        """Gets the sysmoduser of this WellTestTrans.  # noqa: E501


        :return: The sysmoduser of this WellTestTrans.  # noqa: E501
        :rtype: str
        """
        return self._sysmoduser

    @sysmoduser.setter
    def sysmoduser(self, sysmoduser):
        """Sets the sysmoduser of this WellTestTrans.


        :param sysmoduser: The sysmoduser of this WellTestTrans.  # noqa: E501
        :type: str
        """

        self._sysmoduser = sysmoduser

    @property
    def systag(self):
        """Gets the systag of this WellTestTrans.  # noqa: E501


        :return: The systag of this WellTestTrans.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this WellTestTrans.


        :param systag: The systag of this WellTestTrans.  # noqa: E501
        :type: str
        """

        self._systag = systag

    @property
    def testedby(self):
        """Gets the testedby of this WellTestTrans.  # noqa: E501


        :return: The testedby of this WellTestTrans.  # noqa: E501
        :rtype: str
        """
        return self._testedby

    @testedby.setter
    def testedby(self, testedby):
        """Sets the testedby of this WellTestTrans.


        :param testedby: The testedby of this WellTestTrans.  # noqa: E501
        :type: str
        """

        self._testedby = testedby

    @property
    def typ(self):
        """Gets the typ of this WellTestTrans.  # noqa: E501


        :return: The typ of this WellTestTrans.  # noqa: E501
        :rtype: str
        """
        return self._typ

    @typ.setter
    def typ(self, typ):
        """Sets the typ of this WellTestTrans.


        :param typ: The typ of this WellTestTrans.  # noqa: E501
        :type: str
        """

        self._typ = typ

    @property
    def volloadfluid(self):
        """Gets the volloadfluid of this WellTestTrans.  # noqa: E501


        :return: The volloadfluid of this WellTestTrans.  # noqa: E501
        :rtype: OneOfWellTestTransVolloadfluid
        """
        return self._volloadfluid

    @volloadfluid.setter
    def volloadfluid(self, volloadfluid):
        """Sets the volloadfluid of this WellTestTrans.


        :param volloadfluid: The volloadfluid of this WellTestTrans.  # noqa: E501
        :type: OneOfWellTestTransVolloadfluid
        """

        self._volloadfluid = volloadfluid

    @property
    def volloadfluidunrecov(self):
        """Gets the volloadfluidunrecov of this WellTestTrans.  # noqa: E501


        :return: The volloadfluidunrecov of this WellTestTrans.  # noqa: E501
        :rtype: OneOfWellTestTransVolloadfluidunrecov
        """
        return self._volloadfluidunrecov

    @volloadfluidunrecov.setter
    def volloadfluidunrecov(self, volloadfluidunrecov):
        """Sets the volloadfluidunrecov of this WellTestTrans.


        :param volloadfluidunrecov: The volloadfluidunrecov of this WellTestTrans.  # noqa: E501
        :type: OneOfWellTestTransVolloadfluidunrecov
        """

        self._volloadfluidunrecov = volloadfluidunrecov

    @property
    def volumemethod(self):
        """Gets the volumemethod of this WellTestTrans.  # noqa: E501


        :return: The volumemethod of this WellTestTrans.  # noqa: E501
        :rtype: str
        """
        return self._volumemethod

    @volumemethod.setter
    def volumemethod(self, volumemethod):
        """Sets the volumemethod of this WellTestTrans.


        :param volumemethod: The volumemethod of this WellTestTrans.  # noqa: E501
        :type: str
        """

        self._volumemethod = volumemethod

    @property
    def well_test_trans_dsts(self):
        """Gets the well_test_trans_dsts of this WellTestTrans.  # noqa: E501


        :return: The well_test_trans_dsts of this WellTestTrans.  # noqa: E501
        :rtype: list[WellTestTransDst]
        """
        return self._well_test_trans_dsts

    @well_test_trans_dsts.setter
    def well_test_trans_dsts(self, well_test_trans_dsts):
        """Sets the well_test_trans_dsts of this WellTestTrans.


        :param well_test_trans_dsts: The well_test_trans_dsts of this WellTestTrans.  # noqa: E501
        :type: list[WellTestTransDst]
        """

        self._well_test_trans_dsts = well_test_trans_dsts

    @property
    def well_test_trans_flow_pers(self):
        """Gets the well_test_trans_flow_pers of this WellTestTrans.  # noqa: E501


        :return: The well_test_trans_flow_pers of this WellTestTrans.  # noqa: E501
        :rtype: list[WellTestTransFlowPer]
        """
        return self._well_test_trans_flow_pers

    @well_test_trans_flow_pers.setter
    def well_test_trans_flow_pers(self, well_test_trans_flow_pers):
        """Sets the well_test_trans_flow_pers of this WellTestTrans.


        :param well_test_trans_flow_pers: The well_test_trans_flow_pers of this WellTestTrans.  # noqa: E501
        :type: list[WellTestTransFlowPer]
        """

        self._well_test_trans_flow_pers = well_test_trans_flow_pers

    @property
    def well_test_trans_gauges(self):
        """Gets the well_test_trans_gauges of this WellTestTrans.  # noqa: E501


        :return: The well_test_trans_gauges of this WellTestTrans.  # noqa: E501
        :rtype: list[WellTestTransGauge]
        """
        return self._well_test_trans_gauges

    @well_test_trans_gauges.setter
    def well_test_trans_gauges(self, well_test_trans_gauges):
        """Sets the well_test_trans_gauges of this WellTestTrans.


        :param well_test_trans_gauges: The well_test_trans_gauges of this WellTestTrans.  # noqa: E501
        :type: list[WellTestTransGauge]
        """

        self._well_test_trans_gauges = well_test_trans_gauges

    @property
    def well_test_trans_rates(self):
        """Gets the well_test_trans_rates of this WellTestTrans.  # noqa: E501


        :return: The well_test_trans_rates of this WellTestTrans.  # noqa: E501
        :rtype: list[WellTestTransRate]
        """
        return self._well_test_trans_rates

    @well_test_trans_rates.setter
    def well_test_trans_rates(self, well_test_trans_rates):
        """Sets the well_test_trans_rates of this WellTestTrans.


        :param well_test_trans_rates: The well_test_trans_rates of this WellTestTrans.  # noqa: E501
        :type: list[WellTestTransRate]
        """

        self._well_test_trans_rates = well_test_trans_rates

    @property
    def well_test_trans_results(self):
        """Gets the well_test_trans_results of this WellTestTrans.  # noqa: E501


        :return: The well_test_trans_results of this WellTestTrans.  # noqa: E501
        :rtype: list[WellTestTransResult]
        """
        return self._well_test_trans_results

    @well_test_trans_results.setter
    def well_test_trans_results(self, well_test_trans_results):
        """Sets the well_test_trans_results of this WellTestTrans.


        :param well_test_trans_results: The well_test_trans_results of this WellTestTrans.  # noqa: E501
        :type: list[WellTestTransResult]
        """

        self._well_test_trans_results = well_test_trans_results

    @property
    def wellheader(self):
        """Gets the wellheader of this WellTestTrans.  # noqa: E501


        :return: The wellheader of this WellTestTrans.  # noqa: E501
        :rtype: AnyOfWellTestTransWellheader
        """
        return self._wellheader

    @wellheader.setter
    def wellheader(self, wellheader):
        """Sets the wellheader of this WellTestTrans.


        :param wellheader: The wellheader of this WellTestTrans.  # noqa: E501
        :type: AnyOfWellTestTransWellheader
        """

        self._wellheader = wellheader

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WellTestTrans, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WellTestTrans):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
