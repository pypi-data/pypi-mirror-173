# coding: utf-8

"""
    OData Service for namespace Default

    This OData service is located at http://localhost  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TestEquip(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'operator': 'str',
        'com': 'str',
        'des': 'str',
        'dttm': 'datetime',
        'dttmnexttest': 'datetime',
        'failflag': 'int',
        'fluiddensity': 'OneOfTestEquipFluiddensity',
        'idrec': 'str',
        'idrecjob': 'str',
        'idrecjobtk': 'str',
        'idrectestitem': 'str',
        'idrectestitemtk': 'str',
        'idwell': 'str',
        'presrefmeasure': 'str',
        'refnochart': 'str',
        'syscreatedate': 'datetime',
        'syscreateuser': 'str',
        'syslockchildren': 'int',
        'syslockchildrenui': 'int',
        'syslockdate': 'datetime',
        'syslockme': 'int',
        'syslockmeui': 'int',
        'sysmoddate': 'datetime',
        'sysmoduser': 'str',
        'systag': 'str',
        'test_equip_data': 'list[TestEquipData]',
        'testfluidtyp': 'str',
        'testsubtyp': 'str',
        'testtyp': 'str',
        'usernum1': 'OneOfTestEquipUsernum1',
        'usernum2': 'OneOfTestEquipUsernum2',
        'usernum3': 'OneOfTestEquipUsernum3',
        'usertxt1': 'str',
        'vollost': 'OneOfTestEquipVollost',
        'volpumped': 'OneOfTestEquipVolpumped',
        'wellheader': 'AnyOfTestEquipWellheader',
        'wellpresused': 'int'
    }

    attribute_map = {
        'operator': '_operator',
        'com': 'com',
        'des': 'des',
        'dttm': 'dttm',
        'dttmnexttest': 'dttmnexttest',
        'failflag': 'failflag',
        'fluiddensity': 'fluiddensity',
        'idrec': 'idrec',
        'idrecjob': 'idrecjob',
        'idrecjobtk': 'idrecjobtk',
        'idrectestitem': 'idrectestitem',
        'idrectestitemtk': 'idrectestitemtk',
        'idwell': 'idwell',
        'presrefmeasure': 'presrefmeasure',
        'refnochart': 'refnochart',
        'syscreatedate': 'syscreatedate',
        'syscreateuser': 'syscreateuser',
        'syslockchildren': 'syslockchildren',
        'syslockchildrenui': 'syslockchildrenui',
        'syslockdate': 'syslockdate',
        'syslockme': 'syslockme',
        'syslockmeui': 'syslockmeui',
        'sysmoddate': 'sysmoddate',
        'sysmoduser': 'sysmoduser',
        'systag': 'systag',
        'test_equip_data': 'testEquipData',
        'testfluidtyp': 'testfluidtyp',
        'testsubtyp': 'testsubtyp',
        'testtyp': 'testtyp',
        'usernum1': 'usernum1',
        'usernum2': 'usernum2',
        'usernum3': 'usernum3',
        'usertxt1': 'usertxt1',
        'vollost': 'vollost',
        'volpumped': 'volpumped',
        'wellheader': 'wellheader',
        'wellpresused': 'wellpresused'
    }

    def __init__(self, operator=None, com=None, des=None, dttm=None, dttmnexttest=None, failflag=None, fluiddensity=None, idrec=None, idrecjob=None, idrecjobtk=None, idrectestitem=None, idrectestitemtk=None, idwell=None, presrefmeasure=None, refnochart=None, syscreatedate=None, syscreateuser=None, syslockchildren=None, syslockchildrenui=None, syslockdate=None, syslockme=None, syslockmeui=None, sysmoddate=None, sysmoduser=None, systag=None, test_equip_data=None, testfluidtyp=None, testsubtyp=None, testtyp=None, usernum1=None, usernum2=None, usernum3=None, usertxt1=None, vollost=None, volpumped=None, wellheader=None, wellpresused=None):  # noqa: E501
        """TestEquip - a model defined in Swagger"""  # noqa: E501
        self._operator = None
        self._com = None
        self._des = None
        self._dttm = None
        self._dttmnexttest = None
        self._failflag = None
        self._fluiddensity = None
        self._idrec = None
        self._idrecjob = None
        self._idrecjobtk = None
        self._idrectestitem = None
        self._idrectestitemtk = None
        self._idwell = None
        self._presrefmeasure = None
        self._refnochart = None
        self._syscreatedate = None
        self._syscreateuser = None
        self._syslockchildren = None
        self._syslockchildrenui = None
        self._syslockdate = None
        self._syslockme = None
        self._syslockmeui = None
        self._sysmoddate = None
        self._sysmoduser = None
        self._systag = None
        self._test_equip_data = None
        self._testfluidtyp = None
        self._testsubtyp = None
        self._testtyp = None
        self._usernum1 = None
        self._usernum2 = None
        self._usernum3 = None
        self._usertxt1 = None
        self._vollost = None
        self._volpumped = None
        self._wellheader = None
        self._wellpresused = None
        self.discriminator = None
        if operator is not None:
            self.operator = operator
        if com is not None:
            self.com = com
        if des is not None:
            self.des = des
        if dttm is not None:
            self.dttm = dttm
        if dttmnexttest is not None:
            self.dttmnexttest = dttmnexttest
        if failflag is not None:
            self.failflag = failflag
        if fluiddensity is not None:
            self.fluiddensity = fluiddensity
        if idrec is not None:
            self.idrec = idrec
        if idrecjob is not None:
            self.idrecjob = idrecjob
        if idrecjobtk is not None:
            self.idrecjobtk = idrecjobtk
        if idrectestitem is not None:
            self.idrectestitem = idrectestitem
        if idrectestitemtk is not None:
            self.idrectestitemtk = idrectestitemtk
        if idwell is not None:
            self.idwell = idwell
        if presrefmeasure is not None:
            self.presrefmeasure = presrefmeasure
        if refnochart is not None:
            self.refnochart = refnochart
        if syscreatedate is not None:
            self.syscreatedate = syscreatedate
        if syscreateuser is not None:
            self.syscreateuser = syscreateuser
        if syslockchildren is not None:
            self.syslockchildren = syslockchildren
        if syslockchildrenui is not None:
            self.syslockchildrenui = syslockchildrenui
        if syslockdate is not None:
            self.syslockdate = syslockdate
        if syslockme is not None:
            self.syslockme = syslockme
        if syslockmeui is not None:
            self.syslockmeui = syslockmeui
        if sysmoddate is not None:
            self.sysmoddate = sysmoddate
        if sysmoduser is not None:
            self.sysmoduser = sysmoduser
        if systag is not None:
            self.systag = systag
        if test_equip_data is not None:
            self.test_equip_data = test_equip_data
        if testfluidtyp is not None:
            self.testfluidtyp = testfluidtyp
        if testsubtyp is not None:
            self.testsubtyp = testsubtyp
        if testtyp is not None:
            self.testtyp = testtyp
        if usernum1 is not None:
            self.usernum1 = usernum1
        if usernum2 is not None:
            self.usernum2 = usernum2
        if usernum3 is not None:
            self.usernum3 = usernum3
        if usertxt1 is not None:
            self.usertxt1 = usertxt1
        if vollost is not None:
            self.vollost = vollost
        if volpumped is not None:
            self.volpumped = volpumped
        if wellheader is not None:
            self.wellheader = wellheader
        if wellpresused is not None:
            self.wellpresused = wellpresused

    @property
    def operator(self):
        """Gets the operator of this TestEquip.  # noqa: E501


        :return: The operator of this TestEquip.  # noqa: E501
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this TestEquip.


        :param operator: The operator of this TestEquip.  # noqa: E501
        :type: str
        """

        self._operator = operator

    @property
    def com(self):
        """Gets the com of this TestEquip.  # noqa: E501


        :return: The com of this TestEquip.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this TestEquip.


        :param com: The com of this TestEquip.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def des(self):
        """Gets the des of this TestEquip.  # noqa: E501


        :return: The des of this TestEquip.  # noqa: E501
        :rtype: str
        """
        return self._des

    @des.setter
    def des(self, des):
        """Sets the des of this TestEquip.


        :param des: The des of this TestEquip.  # noqa: E501
        :type: str
        """

        self._des = des

    @property
    def dttm(self):
        """Gets the dttm of this TestEquip.  # noqa: E501


        :return: The dttm of this TestEquip.  # noqa: E501
        :rtype: datetime
        """
        return self._dttm

    @dttm.setter
    def dttm(self, dttm):
        """Sets the dttm of this TestEquip.


        :param dttm: The dttm of this TestEquip.  # noqa: E501
        :type: datetime
        """

        self._dttm = dttm

    @property
    def dttmnexttest(self):
        """Gets the dttmnexttest of this TestEquip.  # noqa: E501


        :return: The dttmnexttest of this TestEquip.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmnexttest

    @dttmnexttest.setter
    def dttmnexttest(self, dttmnexttest):
        """Sets the dttmnexttest of this TestEquip.


        :param dttmnexttest: The dttmnexttest of this TestEquip.  # noqa: E501
        :type: datetime
        """

        self._dttmnexttest = dttmnexttest

    @property
    def failflag(self):
        """Gets the failflag of this TestEquip.  # noqa: E501


        :return: The failflag of this TestEquip.  # noqa: E501
        :rtype: int
        """
        return self._failflag

    @failflag.setter
    def failflag(self, failflag):
        """Sets the failflag of this TestEquip.


        :param failflag: The failflag of this TestEquip.  # noqa: E501
        :type: int
        """

        self._failflag = failflag

    @property
    def fluiddensity(self):
        """Gets the fluiddensity of this TestEquip.  # noqa: E501


        :return: The fluiddensity of this TestEquip.  # noqa: E501
        :rtype: OneOfTestEquipFluiddensity
        """
        return self._fluiddensity

    @fluiddensity.setter
    def fluiddensity(self, fluiddensity):
        """Sets the fluiddensity of this TestEquip.


        :param fluiddensity: The fluiddensity of this TestEquip.  # noqa: E501
        :type: OneOfTestEquipFluiddensity
        """

        self._fluiddensity = fluiddensity

    @property
    def idrec(self):
        """Gets the idrec of this TestEquip.  # noqa: E501


        :return: The idrec of this TestEquip.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this TestEquip.


        :param idrec: The idrec of this TestEquip.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecjob(self):
        """Gets the idrecjob of this TestEquip.  # noqa: E501


        :return: The idrecjob of this TestEquip.  # noqa: E501
        :rtype: str
        """
        return self._idrecjob

    @idrecjob.setter
    def idrecjob(self, idrecjob):
        """Sets the idrecjob of this TestEquip.


        :param idrecjob: The idrecjob of this TestEquip.  # noqa: E501
        :type: str
        """

        self._idrecjob = idrecjob

    @property
    def idrecjobtk(self):
        """Gets the idrecjobtk of this TestEquip.  # noqa: E501


        :return: The idrecjobtk of this TestEquip.  # noqa: E501
        :rtype: str
        """
        return self._idrecjobtk

    @idrecjobtk.setter
    def idrecjobtk(self, idrecjobtk):
        """Sets the idrecjobtk of this TestEquip.


        :param idrecjobtk: The idrecjobtk of this TestEquip.  # noqa: E501
        :type: str
        """

        self._idrecjobtk = idrecjobtk

    @property
    def idrectestitem(self):
        """Gets the idrectestitem of this TestEquip.  # noqa: E501


        :return: The idrectestitem of this TestEquip.  # noqa: E501
        :rtype: str
        """
        return self._idrectestitem

    @idrectestitem.setter
    def idrectestitem(self, idrectestitem):
        """Sets the idrectestitem of this TestEquip.


        :param idrectestitem: The idrectestitem of this TestEquip.  # noqa: E501
        :type: str
        """

        self._idrectestitem = idrectestitem

    @property
    def idrectestitemtk(self):
        """Gets the idrectestitemtk of this TestEquip.  # noqa: E501


        :return: The idrectestitemtk of this TestEquip.  # noqa: E501
        :rtype: str
        """
        return self._idrectestitemtk

    @idrectestitemtk.setter
    def idrectestitemtk(self, idrectestitemtk):
        """Sets the idrectestitemtk of this TestEquip.


        :param idrectestitemtk: The idrectestitemtk of this TestEquip.  # noqa: E501
        :type: str
        """

        self._idrectestitemtk = idrectestitemtk

    @property
    def idwell(self):
        """Gets the idwell of this TestEquip.  # noqa: E501


        :return: The idwell of this TestEquip.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this TestEquip.


        :param idwell: The idwell of this TestEquip.  # noqa: E501
        :type: str
        """

        self._idwell = idwell

    @property
    def presrefmeasure(self):
        """Gets the presrefmeasure of this TestEquip.  # noqa: E501


        :return: The presrefmeasure of this TestEquip.  # noqa: E501
        :rtype: str
        """
        return self._presrefmeasure

    @presrefmeasure.setter
    def presrefmeasure(self, presrefmeasure):
        """Sets the presrefmeasure of this TestEquip.


        :param presrefmeasure: The presrefmeasure of this TestEquip.  # noqa: E501
        :type: str
        """

        self._presrefmeasure = presrefmeasure

    @property
    def refnochart(self):
        """Gets the refnochart of this TestEquip.  # noqa: E501


        :return: The refnochart of this TestEquip.  # noqa: E501
        :rtype: str
        """
        return self._refnochart

    @refnochart.setter
    def refnochart(self, refnochart):
        """Sets the refnochart of this TestEquip.


        :param refnochart: The refnochart of this TestEquip.  # noqa: E501
        :type: str
        """

        self._refnochart = refnochart

    @property
    def syscreatedate(self):
        """Gets the syscreatedate of this TestEquip.  # noqa: E501


        :return: The syscreatedate of this TestEquip.  # noqa: E501
        :rtype: datetime
        """
        return self._syscreatedate

    @syscreatedate.setter
    def syscreatedate(self, syscreatedate):
        """Sets the syscreatedate of this TestEquip.


        :param syscreatedate: The syscreatedate of this TestEquip.  # noqa: E501
        :type: datetime
        """

        self._syscreatedate = syscreatedate

    @property
    def syscreateuser(self):
        """Gets the syscreateuser of this TestEquip.  # noqa: E501


        :return: The syscreateuser of this TestEquip.  # noqa: E501
        :rtype: str
        """
        return self._syscreateuser

    @syscreateuser.setter
    def syscreateuser(self, syscreateuser):
        """Sets the syscreateuser of this TestEquip.


        :param syscreateuser: The syscreateuser of this TestEquip.  # noqa: E501
        :type: str
        """

        self._syscreateuser = syscreateuser

    @property
    def syslockchildren(self):
        """Gets the syslockchildren of this TestEquip.  # noqa: E501


        :return: The syslockchildren of this TestEquip.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildren

    @syslockchildren.setter
    def syslockchildren(self, syslockchildren):
        """Sets the syslockchildren of this TestEquip.


        :param syslockchildren: The syslockchildren of this TestEquip.  # noqa: E501
        :type: int
        """

        self._syslockchildren = syslockchildren

    @property
    def syslockchildrenui(self):
        """Gets the syslockchildrenui of this TestEquip.  # noqa: E501


        :return: The syslockchildrenui of this TestEquip.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildrenui

    @syslockchildrenui.setter
    def syslockchildrenui(self, syslockchildrenui):
        """Sets the syslockchildrenui of this TestEquip.


        :param syslockchildrenui: The syslockchildrenui of this TestEquip.  # noqa: E501
        :type: int
        """

        self._syslockchildrenui = syslockchildrenui

    @property
    def syslockdate(self):
        """Gets the syslockdate of this TestEquip.  # noqa: E501


        :return: The syslockdate of this TestEquip.  # noqa: E501
        :rtype: datetime
        """
        return self._syslockdate

    @syslockdate.setter
    def syslockdate(self, syslockdate):
        """Sets the syslockdate of this TestEquip.


        :param syslockdate: The syslockdate of this TestEquip.  # noqa: E501
        :type: datetime
        """

        self._syslockdate = syslockdate

    @property
    def syslockme(self):
        """Gets the syslockme of this TestEquip.  # noqa: E501


        :return: The syslockme of this TestEquip.  # noqa: E501
        :rtype: int
        """
        return self._syslockme

    @syslockme.setter
    def syslockme(self, syslockme):
        """Sets the syslockme of this TestEquip.


        :param syslockme: The syslockme of this TestEquip.  # noqa: E501
        :type: int
        """

        self._syslockme = syslockme

    @property
    def syslockmeui(self):
        """Gets the syslockmeui of this TestEquip.  # noqa: E501


        :return: The syslockmeui of this TestEquip.  # noqa: E501
        :rtype: int
        """
        return self._syslockmeui

    @syslockmeui.setter
    def syslockmeui(self, syslockmeui):
        """Sets the syslockmeui of this TestEquip.


        :param syslockmeui: The syslockmeui of this TestEquip.  # noqa: E501
        :type: int
        """

        self._syslockmeui = syslockmeui

    @property
    def sysmoddate(self):
        """Gets the sysmoddate of this TestEquip.  # noqa: E501


        :return: The sysmoddate of this TestEquip.  # noqa: E501
        :rtype: datetime
        """
        return self._sysmoddate

    @sysmoddate.setter
    def sysmoddate(self, sysmoddate):
        """Sets the sysmoddate of this TestEquip.


        :param sysmoddate: The sysmoddate of this TestEquip.  # noqa: E501
        :type: datetime
        """

        self._sysmoddate = sysmoddate

    @property
    def sysmoduser(self):
        """Gets the sysmoduser of this TestEquip.  # noqa: E501


        :return: The sysmoduser of this TestEquip.  # noqa: E501
        :rtype: str
        """
        return self._sysmoduser

    @sysmoduser.setter
    def sysmoduser(self, sysmoduser):
        """Sets the sysmoduser of this TestEquip.


        :param sysmoduser: The sysmoduser of this TestEquip.  # noqa: E501
        :type: str
        """

        self._sysmoduser = sysmoduser

    @property
    def systag(self):
        """Gets the systag of this TestEquip.  # noqa: E501


        :return: The systag of this TestEquip.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this TestEquip.


        :param systag: The systag of this TestEquip.  # noqa: E501
        :type: str
        """

        self._systag = systag

    @property
    def test_equip_data(self):
        """Gets the test_equip_data of this TestEquip.  # noqa: E501


        :return: The test_equip_data of this TestEquip.  # noqa: E501
        :rtype: list[TestEquipData]
        """
        return self._test_equip_data

    @test_equip_data.setter
    def test_equip_data(self, test_equip_data):
        """Sets the test_equip_data of this TestEquip.


        :param test_equip_data: The test_equip_data of this TestEquip.  # noqa: E501
        :type: list[TestEquipData]
        """

        self._test_equip_data = test_equip_data

    @property
    def testfluidtyp(self):
        """Gets the testfluidtyp of this TestEquip.  # noqa: E501


        :return: The testfluidtyp of this TestEquip.  # noqa: E501
        :rtype: str
        """
        return self._testfluidtyp

    @testfluidtyp.setter
    def testfluidtyp(self, testfluidtyp):
        """Sets the testfluidtyp of this TestEquip.


        :param testfluidtyp: The testfluidtyp of this TestEquip.  # noqa: E501
        :type: str
        """

        self._testfluidtyp = testfluidtyp

    @property
    def testsubtyp(self):
        """Gets the testsubtyp of this TestEquip.  # noqa: E501


        :return: The testsubtyp of this TestEquip.  # noqa: E501
        :rtype: str
        """
        return self._testsubtyp

    @testsubtyp.setter
    def testsubtyp(self, testsubtyp):
        """Sets the testsubtyp of this TestEquip.


        :param testsubtyp: The testsubtyp of this TestEquip.  # noqa: E501
        :type: str
        """

        self._testsubtyp = testsubtyp

    @property
    def testtyp(self):
        """Gets the testtyp of this TestEquip.  # noqa: E501


        :return: The testtyp of this TestEquip.  # noqa: E501
        :rtype: str
        """
        return self._testtyp

    @testtyp.setter
    def testtyp(self, testtyp):
        """Sets the testtyp of this TestEquip.


        :param testtyp: The testtyp of this TestEquip.  # noqa: E501
        :type: str
        """

        self._testtyp = testtyp

    @property
    def usernum1(self):
        """Gets the usernum1 of this TestEquip.  # noqa: E501


        :return: The usernum1 of this TestEquip.  # noqa: E501
        :rtype: OneOfTestEquipUsernum1
        """
        return self._usernum1

    @usernum1.setter
    def usernum1(self, usernum1):
        """Sets the usernum1 of this TestEquip.


        :param usernum1: The usernum1 of this TestEquip.  # noqa: E501
        :type: OneOfTestEquipUsernum1
        """

        self._usernum1 = usernum1

    @property
    def usernum2(self):
        """Gets the usernum2 of this TestEquip.  # noqa: E501


        :return: The usernum2 of this TestEquip.  # noqa: E501
        :rtype: OneOfTestEquipUsernum2
        """
        return self._usernum2

    @usernum2.setter
    def usernum2(self, usernum2):
        """Sets the usernum2 of this TestEquip.


        :param usernum2: The usernum2 of this TestEquip.  # noqa: E501
        :type: OneOfTestEquipUsernum2
        """

        self._usernum2 = usernum2

    @property
    def usernum3(self):
        """Gets the usernum3 of this TestEquip.  # noqa: E501


        :return: The usernum3 of this TestEquip.  # noqa: E501
        :rtype: OneOfTestEquipUsernum3
        """
        return self._usernum3

    @usernum3.setter
    def usernum3(self, usernum3):
        """Sets the usernum3 of this TestEquip.


        :param usernum3: The usernum3 of this TestEquip.  # noqa: E501
        :type: OneOfTestEquipUsernum3
        """

        self._usernum3 = usernum3

    @property
    def usertxt1(self):
        """Gets the usertxt1 of this TestEquip.  # noqa: E501


        :return: The usertxt1 of this TestEquip.  # noqa: E501
        :rtype: str
        """
        return self._usertxt1

    @usertxt1.setter
    def usertxt1(self, usertxt1):
        """Sets the usertxt1 of this TestEquip.


        :param usertxt1: The usertxt1 of this TestEquip.  # noqa: E501
        :type: str
        """

        self._usertxt1 = usertxt1

    @property
    def vollost(self):
        """Gets the vollost of this TestEquip.  # noqa: E501


        :return: The vollost of this TestEquip.  # noqa: E501
        :rtype: OneOfTestEquipVollost
        """
        return self._vollost

    @vollost.setter
    def vollost(self, vollost):
        """Sets the vollost of this TestEquip.


        :param vollost: The vollost of this TestEquip.  # noqa: E501
        :type: OneOfTestEquipVollost
        """

        self._vollost = vollost

    @property
    def volpumped(self):
        """Gets the volpumped of this TestEquip.  # noqa: E501


        :return: The volpumped of this TestEquip.  # noqa: E501
        :rtype: OneOfTestEquipVolpumped
        """
        return self._volpumped

    @volpumped.setter
    def volpumped(self, volpumped):
        """Sets the volpumped of this TestEquip.


        :param volpumped: The volpumped of this TestEquip.  # noqa: E501
        :type: OneOfTestEquipVolpumped
        """

        self._volpumped = volpumped

    @property
    def wellheader(self):
        """Gets the wellheader of this TestEquip.  # noqa: E501


        :return: The wellheader of this TestEquip.  # noqa: E501
        :rtype: AnyOfTestEquipWellheader
        """
        return self._wellheader

    @wellheader.setter
    def wellheader(self, wellheader):
        """Sets the wellheader of this TestEquip.


        :param wellheader: The wellheader of this TestEquip.  # noqa: E501
        :type: AnyOfTestEquipWellheader
        """

        self._wellheader = wellheader

    @property
    def wellpresused(self):
        """Gets the wellpresused of this TestEquip.  # noqa: E501


        :return: The wellpresused of this TestEquip.  # noqa: E501
        :rtype: int
        """
        return self._wellpresused

    @wellpresused.setter
    def wellpresused(self, wellpresused):
        """Sets the wellpresused of this TestEquip.


        :param wellpresused: The wellpresused of this TestEquip.  # noqa: E501
        :type: int
        """

        self._wellpresused = wellpresused

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TestEquip, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TestEquip):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
