# coding: utf-8

"""
    OData Service for namespace Default

    This OData service is located at http://localhost  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WellTestProd(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bsw': 'OneOfWellTestProdBsw',
        'com': 'str',
        'datasource': 'str',
        'densitygas': 'OneOfWellTestProdDensitygas',
        'densityoilcond': 'OneOfWellTestProdDensityoilcond',
        'des': 'str',
        'displayflag': 'int',
        'dttm': 'datetime',
        'duration': 'OneOfWellTestProdDuration',
        'h2s': 'OneOfWellTestProdH2s',
        'idrec': 'str',
        'idrecjob': 'str',
        'idrecjobtk': 'str',
        'idreczonecompletion': 'str',
        'idreczonecompletiontk': 'str',
        'idwell': 'str',
        'phwater': 'OneOfWellTestProdPhwater',
        'presbh': 'OneOfWellTestProdPresbh',
        'prescas': 'OneOfWellTestProdPrescas',
        'presinjectgasliftgas': 'OneOfWellTestProdPresinjectgasliftgas',
        'presprodsep': 'OneOfWellTestProdPresprodsep',
        'prestestsep': 'OneOfWellTestProdPrestestsep',
        'preswh': 'OneOfWellTestProdPreswh',
        'purposealloc': 'int',
        'purposedeliv': 'int',
        'purposereg': 'int',
        'qualitysteam': 'OneOfWellTestProdQualitysteam',
        'ratecond': 'OneOfWellTestProdRatecond',
        'rategas': 'OneOfWellTestProdRategas',
        'rateinjectdiluent': 'OneOfWellTestProdRateinjectdiluent',
        'rateinjectgasliftgas': 'OneOfWellTestProdRateinjectgasliftgas',
        'rateoil': 'OneOfWellTestProdRateoil',
        'ratesteam': 'OneOfWellTestProdRatesteam',
        'ratewater': 'OneOfWellTestProdRatewater',
        'salinity': 'OneOfWellTestProdSalinity',
        'sandcut': 'OneOfWellTestProdSandcut',
        'syscreatedate': 'datetime',
        'syscreateuser': 'str',
        'syslockchildren': 'int',
        'syslockchildrenui': 'int',
        'syslockdate': 'datetime',
        'syslockme': 'int',
        'syslockmeui': 'int',
        'sysmoddate': 'datetime',
        'sysmoduser': 'str',
        'systag': 'str',
        'szdiachoke': 'OneOfWellTestProdSzdiachoke',
        'tempbh': 'OneOfWellTestProdTempbh',
        'tempprodsep': 'OneOfWellTestProdTempprodsep',
        'temptestsep': 'OneOfWellTestProdTemptestsep',
        'tempwh': 'OneOfWellTestProdTempwh',
        'testedby': 'str',
        'typ1': 'str',
        'typ2': 'str',
        'typvolpctother': 'str',
        'volpctco2': 'OneOfWellTestProdVolpctco2',
        'volpctn2': 'OneOfWellTestProdVolpctn2',
        'volpctother': 'OneOfWellTestProdVolpctother',
        'wellheader': 'AnyOfWellTestProdWellheader'
    }

    attribute_map = {
        'bsw': 'bsw',
        'com': 'com',
        'datasource': 'datasource',
        'densitygas': 'densitygas',
        'densityoilcond': 'densityoilcond',
        'des': 'des',
        'displayflag': 'displayflag',
        'dttm': 'dttm',
        'duration': 'duration',
        'h2s': 'h2s',
        'idrec': 'idrec',
        'idrecjob': 'idrecjob',
        'idrecjobtk': 'idrecjobtk',
        'idreczonecompletion': 'idreczonecompletion',
        'idreczonecompletiontk': 'idreczonecompletiontk',
        'idwell': 'idwell',
        'phwater': 'phwater',
        'presbh': 'presbh',
        'prescas': 'prescas',
        'presinjectgasliftgas': 'presinjectgasliftgas',
        'presprodsep': 'presprodsep',
        'prestestsep': 'prestestsep',
        'preswh': 'preswh',
        'purposealloc': 'purposealloc',
        'purposedeliv': 'purposedeliv',
        'purposereg': 'purposereg',
        'qualitysteam': 'qualitysteam',
        'ratecond': 'ratecond',
        'rategas': 'rategas',
        'rateinjectdiluent': 'rateinjectdiluent',
        'rateinjectgasliftgas': 'rateinjectgasliftgas',
        'rateoil': 'rateoil',
        'ratesteam': 'ratesteam',
        'ratewater': 'ratewater',
        'salinity': 'salinity',
        'sandcut': 'sandcut',
        'syscreatedate': 'syscreatedate',
        'syscreateuser': 'syscreateuser',
        'syslockchildren': 'syslockchildren',
        'syslockchildrenui': 'syslockchildrenui',
        'syslockdate': 'syslockdate',
        'syslockme': 'syslockme',
        'syslockmeui': 'syslockmeui',
        'sysmoddate': 'sysmoddate',
        'sysmoduser': 'sysmoduser',
        'systag': 'systag',
        'szdiachoke': 'szdiachoke',
        'tempbh': 'tempbh',
        'tempprodsep': 'tempprodsep',
        'temptestsep': 'temptestsep',
        'tempwh': 'tempwh',
        'testedby': 'testedby',
        'typ1': 'typ1',
        'typ2': 'typ2',
        'typvolpctother': 'typvolpctother',
        'volpctco2': 'volpctco2',
        'volpctn2': 'volpctn2',
        'volpctother': 'volpctother',
        'wellheader': 'wellheader'
    }

    def __init__(self, bsw=None, com=None, datasource=None, densitygas=None, densityoilcond=None, des=None, displayflag=None, dttm=None, duration=None, h2s=None, idrec=None, idrecjob=None, idrecjobtk=None, idreczonecompletion=None, idreczonecompletiontk=None, idwell=None, phwater=None, presbh=None, prescas=None, presinjectgasliftgas=None, presprodsep=None, prestestsep=None, preswh=None, purposealloc=None, purposedeliv=None, purposereg=None, qualitysteam=None, ratecond=None, rategas=None, rateinjectdiluent=None, rateinjectgasliftgas=None, rateoil=None, ratesteam=None, ratewater=None, salinity=None, sandcut=None, syscreatedate=None, syscreateuser=None, syslockchildren=None, syslockchildrenui=None, syslockdate=None, syslockme=None, syslockmeui=None, sysmoddate=None, sysmoduser=None, systag=None, szdiachoke=None, tempbh=None, tempprodsep=None, temptestsep=None, tempwh=None, testedby=None, typ1=None, typ2=None, typvolpctother=None, volpctco2=None, volpctn2=None, volpctother=None, wellheader=None):  # noqa: E501
        """WellTestProd - a model defined in Swagger"""  # noqa: E501
        self._bsw = None
        self._com = None
        self._datasource = None
        self._densitygas = None
        self._densityoilcond = None
        self._des = None
        self._displayflag = None
        self._dttm = None
        self._duration = None
        self._h2s = None
        self._idrec = None
        self._idrecjob = None
        self._idrecjobtk = None
        self._idreczonecompletion = None
        self._idreczonecompletiontk = None
        self._idwell = None
        self._phwater = None
        self._presbh = None
        self._prescas = None
        self._presinjectgasliftgas = None
        self._presprodsep = None
        self._prestestsep = None
        self._preswh = None
        self._purposealloc = None
        self._purposedeliv = None
        self._purposereg = None
        self._qualitysteam = None
        self._ratecond = None
        self._rategas = None
        self._rateinjectdiluent = None
        self._rateinjectgasliftgas = None
        self._rateoil = None
        self._ratesteam = None
        self._ratewater = None
        self._salinity = None
        self._sandcut = None
        self._syscreatedate = None
        self._syscreateuser = None
        self._syslockchildren = None
        self._syslockchildrenui = None
        self._syslockdate = None
        self._syslockme = None
        self._syslockmeui = None
        self._sysmoddate = None
        self._sysmoduser = None
        self._systag = None
        self._szdiachoke = None
        self._tempbh = None
        self._tempprodsep = None
        self._temptestsep = None
        self._tempwh = None
        self._testedby = None
        self._typ1 = None
        self._typ2 = None
        self._typvolpctother = None
        self._volpctco2 = None
        self._volpctn2 = None
        self._volpctother = None
        self._wellheader = None
        self.discriminator = None
        if bsw is not None:
            self.bsw = bsw
        if com is not None:
            self.com = com
        if datasource is not None:
            self.datasource = datasource
        if densitygas is not None:
            self.densitygas = densitygas
        if densityoilcond is not None:
            self.densityoilcond = densityoilcond
        if des is not None:
            self.des = des
        if displayflag is not None:
            self.displayflag = displayflag
        if dttm is not None:
            self.dttm = dttm
        if duration is not None:
            self.duration = duration
        if h2s is not None:
            self.h2s = h2s
        if idrec is not None:
            self.idrec = idrec
        if idrecjob is not None:
            self.idrecjob = idrecjob
        if idrecjobtk is not None:
            self.idrecjobtk = idrecjobtk
        if idreczonecompletion is not None:
            self.idreczonecompletion = idreczonecompletion
        if idreczonecompletiontk is not None:
            self.idreczonecompletiontk = idreczonecompletiontk
        if idwell is not None:
            self.idwell = idwell
        if phwater is not None:
            self.phwater = phwater
        if presbh is not None:
            self.presbh = presbh
        if prescas is not None:
            self.prescas = prescas
        if presinjectgasliftgas is not None:
            self.presinjectgasliftgas = presinjectgasliftgas
        if presprodsep is not None:
            self.presprodsep = presprodsep
        if prestestsep is not None:
            self.prestestsep = prestestsep
        if preswh is not None:
            self.preswh = preswh
        if purposealloc is not None:
            self.purposealloc = purposealloc
        if purposedeliv is not None:
            self.purposedeliv = purposedeliv
        if purposereg is not None:
            self.purposereg = purposereg
        if qualitysteam is not None:
            self.qualitysteam = qualitysteam
        if ratecond is not None:
            self.ratecond = ratecond
        if rategas is not None:
            self.rategas = rategas
        if rateinjectdiluent is not None:
            self.rateinjectdiluent = rateinjectdiluent
        if rateinjectgasliftgas is not None:
            self.rateinjectgasliftgas = rateinjectgasliftgas
        if rateoil is not None:
            self.rateoil = rateoil
        if ratesteam is not None:
            self.ratesteam = ratesteam
        if ratewater is not None:
            self.ratewater = ratewater
        if salinity is not None:
            self.salinity = salinity
        if sandcut is not None:
            self.sandcut = sandcut
        if syscreatedate is not None:
            self.syscreatedate = syscreatedate
        if syscreateuser is not None:
            self.syscreateuser = syscreateuser
        if syslockchildren is not None:
            self.syslockchildren = syslockchildren
        if syslockchildrenui is not None:
            self.syslockchildrenui = syslockchildrenui
        if syslockdate is not None:
            self.syslockdate = syslockdate
        if syslockme is not None:
            self.syslockme = syslockme
        if syslockmeui is not None:
            self.syslockmeui = syslockmeui
        if sysmoddate is not None:
            self.sysmoddate = sysmoddate
        if sysmoduser is not None:
            self.sysmoduser = sysmoduser
        if systag is not None:
            self.systag = systag
        if szdiachoke is not None:
            self.szdiachoke = szdiachoke
        if tempbh is not None:
            self.tempbh = tempbh
        if tempprodsep is not None:
            self.tempprodsep = tempprodsep
        if temptestsep is not None:
            self.temptestsep = temptestsep
        if tempwh is not None:
            self.tempwh = tempwh
        if testedby is not None:
            self.testedby = testedby
        if typ1 is not None:
            self.typ1 = typ1
        if typ2 is not None:
            self.typ2 = typ2
        if typvolpctother is not None:
            self.typvolpctother = typvolpctother
        if volpctco2 is not None:
            self.volpctco2 = volpctco2
        if volpctn2 is not None:
            self.volpctn2 = volpctn2
        if volpctother is not None:
            self.volpctother = volpctother
        if wellheader is not None:
            self.wellheader = wellheader

    @property
    def bsw(self):
        """Gets the bsw of this WellTestProd.  # noqa: E501


        :return: The bsw of this WellTestProd.  # noqa: E501
        :rtype: OneOfWellTestProdBsw
        """
        return self._bsw

    @bsw.setter
    def bsw(self, bsw):
        """Sets the bsw of this WellTestProd.


        :param bsw: The bsw of this WellTestProd.  # noqa: E501
        :type: OneOfWellTestProdBsw
        """

        self._bsw = bsw

    @property
    def com(self):
        """Gets the com of this WellTestProd.  # noqa: E501


        :return: The com of this WellTestProd.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this WellTestProd.


        :param com: The com of this WellTestProd.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def datasource(self):
        """Gets the datasource of this WellTestProd.  # noqa: E501


        :return: The datasource of this WellTestProd.  # noqa: E501
        :rtype: str
        """
        return self._datasource

    @datasource.setter
    def datasource(self, datasource):
        """Sets the datasource of this WellTestProd.


        :param datasource: The datasource of this WellTestProd.  # noqa: E501
        :type: str
        """

        self._datasource = datasource

    @property
    def densitygas(self):
        """Gets the densitygas of this WellTestProd.  # noqa: E501


        :return: The densitygas of this WellTestProd.  # noqa: E501
        :rtype: OneOfWellTestProdDensitygas
        """
        return self._densitygas

    @densitygas.setter
    def densitygas(self, densitygas):
        """Sets the densitygas of this WellTestProd.


        :param densitygas: The densitygas of this WellTestProd.  # noqa: E501
        :type: OneOfWellTestProdDensitygas
        """

        self._densitygas = densitygas

    @property
    def densityoilcond(self):
        """Gets the densityoilcond of this WellTestProd.  # noqa: E501


        :return: The densityoilcond of this WellTestProd.  # noqa: E501
        :rtype: OneOfWellTestProdDensityoilcond
        """
        return self._densityoilcond

    @densityoilcond.setter
    def densityoilcond(self, densityoilcond):
        """Sets the densityoilcond of this WellTestProd.


        :param densityoilcond: The densityoilcond of this WellTestProd.  # noqa: E501
        :type: OneOfWellTestProdDensityoilcond
        """

        self._densityoilcond = densityoilcond

    @property
    def des(self):
        """Gets the des of this WellTestProd.  # noqa: E501


        :return: The des of this WellTestProd.  # noqa: E501
        :rtype: str
        """
        return self._des

    @des.setter
    def des(self, des):
        """Sets the des of this WellTestProd.


        :param des: The des of this WellTestProd.  # noqa: E501
        :type: str
        """

        self._des = des

    @property
    def displayflag(self):
        """Gets the displayflag of this WellTestProd.  # noqa: E501


        :return: The displayflag of this WellTestProd.  # noqa: E501
        :rtype: int
        """
        return self._displayflag

    @displayflag.setter
    def displayflag(self, displayflag):
        """Sets the displayflag of this WellTestProd.


        :param displayflag: The displayflag of this WellTestProd.  # noqa: E501
        :type: int
        """

        self._displayflag = displayflag

    @property
    def dttm(self):
        """Gets the dttm of this WellTestProd.  # noqa: E501


        :return: The dttm of this WellTestProd.  # noqa: E501
        :rtype: datetime
        """
        return self._dttm

    @dttm.setter
    def dttm(self, dttm):
        """Sets the dttm of this WellTestProd.


        :param dttm: The dttm of this WellTestProd.  # noqa: E501
        :type: datetime
        """

        self._dttm = dttm

    @property
    def duration(self):
        """Gets the duration of this WellTestProd.  # noqa: E501


        :return: The duration of this WellTestProd.  # noqa: E501
        :rtype: OneOfWellTestProdDuration
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this WellTestProd.


        :param duration: The duration of this WellTestProd.  # noqa: E501
        :type: OneOfWellTestProdDuration
        """

        self._duration = duration

    @property
    def h2s(self):
        """Gets the h2s of this WellTestProd.  # noqa: E501


        :return: The h2s of this WellTestProd.  # noqa: E501
        :rtype: OneOfWellTestProdH2s
        """
        return self._h2s

    @h2s.setter
    def h2s(self, h2s):
        """Sets the h2s of this WellTestProd.


        :param h2s: The h2s of this WellTestProd.  # noqa: E501
        :type: OneOfWellTestProdH2s
        """

        self._h2s = h2s

    @property
    def idrec(self):
        """Gets the idrec of this WellTestProd.  # noqa: E501


        :return: The idrec of this WellTestProd.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this WellTestProd.


        :param idrec: The idrec of this WellTestProd.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecjob(self):
        """Gets the idrecjob of this WellTestProd.  # noqa: E501


        :return: The idrecjob of this WellTestProd.  # noqa: E501
        :rtype: str
        """
        return self._idrecjob

    @idrecjob.setter
    def idrecjob(self, idrecjob):
        """Sets the idrecjob of this WellTestProd.


        :param idrecjob: The idrecjob of this WellTestProd.  # noqa: E501
        :type: str
        """

        self._idrecjob = idrecjob

    @property
    def idrecjobtk(self):
        """Gets the idrecjobtk of this WellTestProd.  # noqa: E501


        :return: The idrecjobtk of this WellTestProd.  # noqa: E501
        :rtype: str
        """
        return self._idrecjobtk

    @idrecjobtk.setter
    def idrecjobtk(self, idrecjobtk):
        """Sets the idrecjobtk of this WellTestProd.


        :param idrecjobtk: The idrecjobtk of this WellTestProd.  # noqa: E501
        :type: str
        """

        self._idrecjobtk = idrecjobtk

    @property
    def idreczonecompletion(self):
        """Gets the idreczonecompletion of this WellTestProd.  # noqa: E501


        :return: The idreczonecompletion of this WellTestProd.  # noqa: E501
        :rtype: str
        """
        return self._idreczonecompletion

    @idreczonecompletion.setter
    def idreczonecompletion(self, idreczonecompletion):
        """Sets the idreczonecompletion of this WellTestProd.


        :param idreczonecompletion: The idreczonecompletion of this WellTestProd.  # noqa: E501
        :type: str
        """

        self._idreczonecompletion = idreczonecompletion

    @property
    def idreczonecompletiontk(self):
        """Gets the idreczonecompletiontk of this WellTestProd.  # noqa: E501


        :return: The idreczonecompletiontk of this WellTestProd.  # noqa: E501
        :rtype: str
        """
        return self._idreczonecompletiontk

    @idreczonecompletiontk.setter
    def idreczonecompletiontk(self, idreczonecompletiontk):
        """Sets the idreczonecompletiontk of this WellTestProd.


        :param idreczonecompletiontk: The idreczonecompletiontk of this WellTestProd.  # noqa: E501
        :type: str
        """

        self._idreczonecompletiontk = idreczonecompletiontk

    @property
    def idwell(self):
        """Gets the idwell of this WellTestProd.  # noqa: E501


        :return: The idwell of this WellTestProd.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this WellTestProd.


        :param idwell: The idwell of this WellTestProd.  # noqa: E501
        :type: str
        """

        self._idwell = idwell

    @property
    def phwater(self):
        """Gets the phwater of this WellTestProd.  # noqa: E501


        :return: The phwater of this WellTestProd.  # noqa: E501
        :rtype: OneOfWellTestProdPhwater
        """
        return self._phwater

    @phwater.setter
    def phwater(self, phwater):
        """Sets the phwater of this WellTestProd.


        :param phwater: The phwater of this WellTestProd.  # noqa: E501
        :type: OneOfWellTestProdPhwater
        """

        self._phwater = phwater

    @property
    def presbh(self):
        """Gets the presbh of this WellTestProd.  # noqa: E501


        :return: The presbh of this WellTestProd.  # noqa: E501
        :rtype: OneOfWellTestProdPresbh
        """
        return self._presbh

    @presbh.setter
    def presbh(self, presbh):
        """Sets the presbh of this WellTestProd.


        :param presbh: The presbh of this WellTestProd.  # noqa: E501
        :type: OneOfWellTestProdPresbh
        """

        self._presbh = presbh

    @property
    def prescas(self):
        """Gets the prescas of this WellTestProd.  # noqa: E501


        :return: The prescas of this WellTestProd.  # noqa: E501
        :rtype: OneOfWellTestProdPrescas
        """
        return self._prescas

    @prescas.setter
    def prescas(self, prescas):
        """Sets the prescas of this WellTestProd.


        :param prescas: The prescas of this WellTestProd.  # noqa: E501
        :type: OneOfWellTestProdPrescas
        """

        self._prescas = prescas

    @property
    def presinjectgasliftgas(self):
        """Gets the presinjectgasliftgas of this WellTestProd.  # noqa: E501


        :return: The presinjectgasliftgas of this WellTestProd.  # noqa: E501
        :rtype: OneOfWellTestProdPresinjectgasliftgas
        """
        return self._presinjectgasliftgas

    @presinjectgasliftgas.setter
    def presinjectgasliftgas(self, presinjectgasliftgas):
        """Sets the presinjectgasliftgas of this WellTestProd.


        :param presinjectgasliftgas: The presinjectgasliftgas of this WellTestProd.  # noqa: E501
        :type: OneOfWellTestProdPresinjectgasliftgas
        """

        self._presinjectgasliftgas = presinjectgasliftgas

    @property
    def presprodsep(self):
        """Gets the presprodsep of this WellTestProd.  # noqa: E501


        :return: The presprodsep of this WellTestProd.  # noqa: E501
        :rtype: OneOfWellTestProdPresprodsep
        """
        return self._presprodsep

    @presprodsep.setter
    def presprodsep(self, presprodsep):
        """Sets the presprodsep of this WellTestProd.


        :param presprodsep: The presprodsep of this WellTestProd.  # noqa: E501
        :type: OneOfWellTestProdPresprodsep
        """

        self._presprodsep = presprodsep

    @property
    def prestestsep(self):
        """Gets the prestestsep of this WellTestProd.  # noqa: E501


        :return: The prestestsep of this WellTestProd.  # noqa: E501
        :rtype: OneOfWellTestProdPrestestsep
        """
        return self._prestestsep

    @prestestsep.setter
    def prestestsep(self, prestestsep):
        """Sets the prestestsep of this WellTestProd.


        :param prestestsep: The prestestsep of this WellTestProd.  # noqa: E501
        :type: OneOfWellTestProdPrestestsep
        """

        self._prestestsep = prestestsep

    @property
    def preswh(self):
        """Gets the preswh of this WellTestProd.  # noqa: E501


        :return: The preswh of this WellTestProd.  # noqa: E501
        :rtype: OneOfWellTestProdPreswh
        """
        return self._preswh

    @preswh.setter
    def preswh(self, preswh):
        """Sets the preswh of this WellTestProd.


        :param preswh: The preswh of this WellTestProd.  # noqa: E501
        :type: OneOfWellTestProdPreswh
        """

        self._preswh = preswh

    @property
    def purposealloc(self):
        """Gets the purposealloc of this WellTestProd.  # noqa: E501


        :return: The purposealloc of this WellTestProd.  # noqa: E501
        :rtype: int
        """
        return self._purposealloc

    @purposealloc.setter
    def purposealloc(self, purposealloc):
        """Sets the purposealloc of this WellTestProd.


        :param purposealloc: The purposealloc of this WellTestProd.  # noqa: E501
        :type: int
        """

        self._purposealloc = purposealloc

    @property
    def purposedeliv(self):
        """Gets the purposedeliv of this WellTestProd.  # noqa: E501


        :return: The purposedeliv of this WellTestProd.  # noqa: E501
        :rtype: int
        """
        return self._purposedeliv

    @purposedeliv.setter
    def purposedeliv(self, purposedeliv):
        """Sets the purposedeliv of this WellTestProd.


        :param purposedeliv: The purposedeliv of this WellTestProd.  # noqa: E501
        :type: int
        """

        self._purposedeliv = purposedeliv

    @property
    def purposereg(self):
        """Gets the purposereg of this WellTestProd.  # noqa: E501


        :return: The purposereg of this WellTestProd.  # noqa: E501
        :rtype: int
        """
        return self._purposereg

    @purposereg.setter
    def purposereg(self, purposereg):
        """Sets the purposereg of this WellTestProd.


        :param purposereg: The purposereg of this WellTestProd.  # noqa: E501
        :type: int
        """

        self._purposereg = purposereg

    @property
    def qualitysteam(self):
        """Gets the qualitysteam of this WellTestProd.  # noqa: E501


        :return: The qualitysteam of this WellTestProd.  # noqa: E501
        :rtype: OneOfWellTestProdQualitysteam
        """
        return self._qualitysteam

    @qualitysteam.setter
    def qualitysteam(self, qualitysteam):
        """Sets the qualitysteam of this WellTestProd.


        :param qualitysteam: The qualitysteam of this WellTestProd.  # noqa: E501
        :type: OneOfWellTestProdQualitysteam
        """

        self._qualitysteam = qualitysteam

    @property
    def ratecond(self):
        """Gets the ratecond of this WellTestProd.  # noqa: E501


        :return: The ratecond of this WellTestProd.  # noqa: E501
        :rtype: OneOfWellTestProdRatecond
        """
        return self._ratecond

    @ratecond.setter
    def ratecond(self, ratecond):
        """Sets the ratecond of this WellTestProd.


        :param ratecond: The ratecond of this WellTestProd.  # noqa: E501
        :type: OneOfWellTestProdRatecond
        """

        self._ratecond = ratecond

    @property
    def rategas(self):
        """Gets the rategas of this WellTestProd.  # noqa: E501


        :return: The rategas of this WellTestProd.  # noqa: E501
        :rtype: OneOfWellTestProdRategas
        """
        return self._rategas

    @rategas.setter
    def rategas(self, rategas):
        """Sets the rategas of this WellTestProd.


        :param rategas: The rategas of this WellTestProd.  # noqa: E501
        :type: OneOfWellTestProdRategas
        """

        self._rategas = rategas

    @property
    def rateinjectdiluent(self):
        """Gets the rateinjectdiluent of this WellTestProd.  # noqa: E501


        :return: The rateinjectdiluent of this WellTestProd.  # noqa: E501
        :rtype: OneOfWellTestProdRateinjectdiluent
        """
        return self._rateinjectdiluent

    @rateinjectdiluent.setter
    def rateinjectdiluent(self, rateinjectdiluent):
        """Sets the rateinjectdiluent of this WellTestProd.


        :param rateinjectdiluent: The rateinjectdiluent of this WellTestProd.  # noqa: E501
        :type: OneOfWellTestProdRateinjectdiluent
        """

        self._rateinjectdiluent = rateinjectdiluent

    @property
    def rateinjectgasliftgas(self):
        """Gets the rateinjectgasliftgas of this WellTestProd.  # noqa: E501


        :return: The rateinjectgasliftgas of this WellTestProd.  # noqa: E501
        :rtype: OneOfWellTestProdRateinjectgasliftgas
        """
        return self._rateinjectgasliftgas

    @rateinjectgasliftgas.setter
    def rateinjectgasliftgas(self, rateinjectgasliftgas):
        """Sets the rateinjectgasliftgas of this WellTestProd.


        :param rateinjectgasliftgas: The rateinjectgasliftgas of this WellTestProd.  # noqa: E501
        :type: OneOfWellTestProdRateinjectgasliftgas
        """

        self._rateinjectgasliftgas = rateinjectgasliftgas

    @property
    def rateoil(self):
        """Gets the rateoil of this WellTestProd.  # noqa: E501


        :return: The rateoil of this WellTestProd.  # noqa: E501
        :rtype: OneOfWellTestProdRateoil
        """
        return self._rateoil

    @rateoil.setter
    def rateoil(self, rateoil):
        """Sets the rateoil of this WellTestProd.


        :param rateoil: The rateoil of this WellTestProd.  # noqa: E501
        :type: OneOfWellTestProdRateoil
        """

        self._rateoil = rateoil

    @property
    def ratesteam(self):
        """Gets the ratesteam of this WellTestProd.  # noqa: E501


        :return: The ratesteam of this WellTestProd.  # noqa: E501
        :rtype: OneOfWellTestProdRatesteam
        """
        return self._ratesteam

    @ratesteam.setter
    def ratesteam(self, ratesteam):
        """Sets the ratesteam of this WellTestProd.


        :param ratesteam: The ratesteam of this WellTestProd.  # noqa: E501
        :type: OneOfWellTestProdRatesteam
        """

        self._ratesteam = ratesteam

    @property
    def ratewater(self):
        """Gets the ratewater of this WellTestProd.  # noqa: E501


        :return: The ratewater of this WellTestProd.  # noqa: E501
        :rtype: OneOfWellTestProdRatewater
        """
        return self._ratewater

    @ratewater.setter
    def ratewater(self, ratewater):
        """Sets the ratewater of this WellTestProd.


        :param ratewater: The ratewater of this WellTestProd.  # noqa: E501
        :type: OneOfWellTestProdRatewater
        """

        self._ratewater = ratewater

    @property
    def salinity(self):
        """Gets the salinity of this WellTestProd.  # noqa: E501


        :return: The salinity of this WellTestProd.  # noqa: E501
        :rtype: OneOfWellTestProdSalinity
        """
        return self._salinity

    @salinity.setter
    def salinity(self, salinity):
        """Sets the salinity of this WellTestProd.


        :param salinity: The salinity of this WellTestProd.  # noqa: E501
        :type: OneOfWellTestProdSalinity
        """

        self._salinity = salinity

    @property
    def sandcut(self):
        """Gets the sandcut of this WellTestProd.  # noqa: E501


        :return: The sandcut of this WellTestProd.  # noqa: E501
        :rtype: OneOfWellTestProdSandcut
        """
        return self._sandcut

    @sandcut.setter
    def sandcut(self, sandcut):
        """Sets the sandcut of this WellTestProd.


        :param sandcut: The sandcut of this WellTestProd.  # noqa: E501
        :type: OneOfWellTestProdSandcut
        """

        self._sandcut = sandcut

    @property
    def syscreatedate(self):
        """Gets the syscreatedate of this WellTestProd.  # noqa: E501


        :return: The syscreatedate of this WellTestProd.  # noqa: E501
        :rtype: datetime
        """
        return self._syscreatedate

    @syscreatedate.setter
    def syscreatedate(self, syscreatedate):
        """Sets the syscreatedate of this WellTestProd.


        :param syscreatedate: The syscreatedate of this WellTestProd.  # noqa: E501
        :type: datetime
        """

        self._syscreatedate = syscreatedate

    @property
    def syscreateuser(self):
        """Gets the syscreateuser of this WellTestProd.  # noqa: E501


        :return: The syscreateuser of this WellTestProd.  # noqa: E501
        :rtype: str
        """
        return self._syscreateuser

    @syscreateuser.setter
    def syscreateuser(self, syscreateuser):
        """Sets the syscreateuser of this WellTestProd.


        :param syscreateuser: The syscreateuser of this WellTestProd.  # noqa: E501
        :type: str
        """

        self._syscreateuser = syscreateuser

    @property
    def syslockchildren(self):
        """Gets the syslockchildren of this WellTestProd.  # noqa: E501


        :return: The syslockchildren of this WellTestProd.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildren

    @syslockchildren.setter
    def syslockchildren(self, syslockchildren):
        """Sets the syslockchildren of this WellTestProd.


        :param syslockchildren: The syslockchildren of this WellTestProd.  # noqa: E501
        :type: int
        """

        self._syslockchildren = syslockchildren

    @property
    def syslockchildrenui(self):
        """Gets the syslockchildrenui of this WellTestProd.  # noqa: E501


        :return: The syslockchildrenui of this WellTestProd.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildrenui

    @syslockchildrenui.setter
    def syslockchildrenui(self, syslockchildrenui):
        """Sets the syslockchildrenui of this WellTestProd.


        :param syslockchildrenui: The syslockchildrenui of this WellTestProd.  # noqa: E501
        :type: int
        """

        self._syslockchildrenui = syslockchildrenui

    @property
    def syslockdate(self):
        """Gets the syslockdate of this WellTestProd.  # noqa: E501


        :return: The syslockdate of this WellTestProd.  # noqa: E501
        :rtype: datetime
        """
        return self._syslockdate

    @syslockdate.setter
    def syslockdate(self, syslockdate):
        """Sets the syslockdate of this WellTestProd.


        :param syslockdate: The syslockdate of this WellTestProd.  # noqa: E501
        :type: datetime
        """

        self._syslockdate = syslockdate

    @property
    def syslockme(self):
        """Gets the syslockme of this WellTestProd.  # noqa: E501


        :return: The syslockme of this WellTestProd.  # noqa: E501
        :rtype: int
        """
        return self._syslockme

    @syslockme.setter
    def syslockme(self, syslockme):
        """Sets the syslockme of this WellTestProd.


        :param syslockme: The syslockme of this WellTestProd.  # noqa: E501
        :type: int
        """

        self._syslockme = syslockme

    @property
    def syslockmeui(self):
        """Gets the syslockmeui of this WellTestProd.  # noqa: E501


        :return: The syslockmeui of this WellTestProd.  # noqa: E501
        :rtype: int
        """
        return self._syslockmeui

    @syslockmeui.setter
    def syslockmeui(self, syslockmeui):
        """Sets the syslockmeui of this WellTestProd.


        :param syslockmeui: The syslockmeui of this WellTestProd.  # noqa: E501
        :type: int
        """

        self._syslockmeui = syslockmeui

    @property
    def sysmoddate(self):
        """Gets the sysmoddate of this WellTestProd.  # noqa: E501


        :return: The sysmoddate of this WellTestProd.  # noqa: E501
        :rtype: datetime
        """
        return self._sysmoddate

    @sysmoddate.setter
    def sysmoddate(self, sysmoddate):
        """Sets the sysmoddate of this WellTestProd.


        :param sysmoddate: The sysmoddate of this WellTestProd.  # noqa: E501
        :type: datetime
        """

        self._sysmoddate = sysmoddate

    @property
    def sysmoduser(self):
        """Gets the sysmoduser of this WellTestProd.  # noqa: E501


        :return: The sysmoduser of this WellTestProd.  # noqa: E501
        :rtype: str
        """
        return self._sysmoduser

    @sysmoduser.setter
    def sysmoduser(self, sysmoduser):
        """Sets the sysmoduser of this WellTestProd.


        :param sysmoduser: The sysmoduser of this WellTestProd.  # noqa: E501
        :type: str
        """

        self._sysmoduser = sysmoduser

    @property
    def systag(self):
        """Gets the systag of this WellTestProd.  # noqa: E501


        :return: The systag of this WellTestProd.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this WellTestProd.


        :param systag: The systag of this WellTestProd.  # noqa: E501
        :type: str
        """

        self._systag = systag

    @property
    def szdiachoke(self):
        """Gets the szdiachoke of this WellTestProd.  # noqa: E501


        :return: The szdiachoke of this WellTestProd.  # noqa: E501
        :rtype: OneOfWellTestProdSzdiachoke
        """
        return self._szdiachoke

    @szdiachoke.setter
    def szdiachoke(self, szdiachoke):
        """Sets the szdiachoke of this WellTestProd.


        :param szdiachoke: The szdiachoke of this WellTestProd.  # noqa: E501
        :type: OneOfWellTestProdSzdiachoke
        """

        self._szdiachoke = szdiachoke

    @property
    def tempbh(self):
        """Gets the tempbh of this WellTestProd.  # noqa: E501


        :return: The tempbh of this WellTestProd.  # noqa: E501
        :rtype: OneOfWellTestProdTempbh
        """
        return self._tempbh

    @tempbh.setter
    def tempbh(self, tempbh):
        """Sets the tempbh of this WellTestProd.


        :param tempbh: The tempbh of this WellTestProd.  # noqa: E501
        :type: OneOfWellTestProdTempbh
        """

        self._tempbh = tempbh

    @property
    def tempprodsep(self):
        """Gets the tempprodsep of this WellTestProd.  # noqa: E501


        :return: The tempprodsep of this WellTestProd.  # noqa: E501
        :rtype: OneOfWellTestProdTempprodsep
        """
        return self._tempprodsep

    @tempprodsep.setter
    def tempprodsep(self, tempprodsep):
        """Sets the tempprodsep of this WellTestProd.


        :param tempprodsep: The tempprodsep of this WellTestProd.  # noqa: E501
        :type: OneOfWellTestProdTempprodsep
        """

        self._tempprodsep = tempprodsep

    @property
    def temptestsep(self):
        """Gets the temptestsep of this WellTestProd.  # noqa: E501


        :return: The temptestsep of this WellTestProd.  # noqa: E501
        :rtype: OneOfWellTestProdTemptestsep
        """
        return self._temptestsep

    @temptestsep.setter
    def temptestsep(self, temptestsep):
        """Sets the temptestsep of this WellTestProd.


        :param temptestsep: The temptestsep of this WellTestProd.  # noqa: E501
        :type: OneOfWellTestProdTemptestsep
        """

        self._temptestsep = temptestsep

    @property
    def tempwh(self):
        """Gets the tempwh of this WellTestProd.  # noqa: E501


        :return: The tempwh of this WellTestProd.  # noqa: E501
        :rtype: OneOfWellTestProdTempwh
        """
        return self._tempwh

    @tempwh.setter
    def tempwh(self, tempwh):
        """Sets the tempwh of this WellTestProd.


        :param tempwh: The tempwh of this WellTestProd.  # noqa: E501
        :type: OneOfWellTestProdTempwh
        """

        self._tempwh = tempwh

    @property
    def testedby(self):
        """Gets the testedby of this WellTestProd.  # noqa: E501


        :return: The testedby of this WellTestProd.  # noqa: E501
        :rtype: str
        """
        return self._testedby

    @testedby.setter
    def testedby(self, testedby):
        """Sets the testedby of this WellTestProd.


        :param testedby: The testedby of this WellTestProd.  # noqa: E501
        :type: str
        """

        self._testedby = testedby

    @property
    def typ1(self):
        """Gets the typ1 of this WellTestProd.  # noqa: E501


        :return: The typ1 of this WellTestProd.  # noqa: E501
        :rtype: str
        """
        return self._typ1

    @typ1.setter
    def typ1(self, typ1):
        """Sets the typ1 of this WellTestProd.


        :param typ1: The typ1 of this WellTestProd.  # noqa: E501
        :type: str
        """

        self._typ1 = typ1

    @property
    def typ2(self):
        """Gets the typ2 of this WellTestProd.  # noqa: E501


        :return: The typ2 of this WellTestProd.  # noqa: E501
        :rtype: str
        """
        return self._typ2

    @typ2.setter
    def typ2(self, typ2):
        """Sets the typ2 of this WellTestProd.


        :param typ2: The typ2 of this WellTestProd.  # noqa: E501
        :type: str
        """

        self._typ2 = typ2

    @property
    def typvolpctother(self):
        """Gets the typvolpctother of this WellTestProd.  # noqa: E501


        :return: The typvolpctother of this WellTestProd.  # noqa: E501
        :rtype: str
        """
        return self._typvolpctother

    @typvolpctother.setter
    def typvolpctother(self, typvolpctother):
        """Sets the typvolpctother of this WellTestProd.


        :param typvolpctother: The typvolpctother of this WellTestProd.  # noqa: E501
        :type: str
        """

        self._typvolpctother = typvolpctother

    @property
    def volpctco2(self):
        """Gets the volpctco2 of this WellTestProd.  # noqa: E501


        :return: The volpctco2 of this WellTestProd.  # noqa: E501
        :rtype: OneOfWellTestProdVolpctco2
        """
        return self._volpctco2

    @volpctco2.setter
    def volpctco2(self, volpctco2):
        """Sets the volpctco2 of this WellTestProd.


        :param volpctco2: The volpctco2 of this WellTestProd.  # noqa: E501
        :type: OneOfWellTestProdVolpctco2
        """

        self._volpctco2 = volpctco2

    @property
    def volpctn2(self):
        """Gets the volpctn2 of this WellTestProd.  # noqa: E501


        :return: The volpctn2 of this WellTestProd.  # noqa: E501
        :rtype: OneOfWellTestProdVolpctn2
        """
        return self._volpctn2

    @volpctn2.setter
    def volpctn2(self, volpctn2):
        """Sets the volpctn2 of this WellTestProd.


        :param volpctn2: The volpctn2 of this WellTestProd.  # noqa: E501
        :type: OneOfWellTestProdVolpctn2
        """

        self._volpctn2 = volpctn2

    @property
    def volpctother(self):
        """Gets the volpctother of this WellTestProd.  # noqa: E501


        :return: The volpctother of this WellTestProd.  # noqa: E501
        :rtype: OneOfWellTestProdVolpctother
        """
        return self._volpctother

    @volpctother.setter
    def volpctother(self, volpctother):
        """Sets the volpctother of this WellTestProd.


        :param volpctother: The volpctother of this WellTestProd.  # noqa: E501
        :type: OneOfWellTestProdVolpctother
        """

        self._volpctother = volpctother

    @property
    def wellheader(self):
        """Gets the wellheader of this WellTestProd.  # noqa: E501


        :return: The wellheader of this WellTestProd.  # noqa: E501
        :rtype: AnyOfWellTestProdWellheader
        """
        return self._wellheader

    @wellheader.setter
    def wellheader(self, wellheader):
        """Sets the wellheader of this WellTestProd.


        :param wellheader: The wellheader of this WellTestProd.  # noqa: E501
        :type: AnyOfWellTestProdWellheader
        """

        self._wellheader = wellheader

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WellTestProd, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WellTestProd):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
