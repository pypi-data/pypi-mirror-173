# coding: utf-8

"""
    OData Service for namespace Default

    This OData service is located at http://localhost  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProdSetting(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'com': 'str',
        'dttmend': 'datetime',
        'dttmstart': 'datetime',
        'idrec': 'str',
        'idreczonecompletion': 'str',
        'idreczonecompletiontk': 'str',
        'idwell': 'str',
        'prescas': 'OneOfProdSettingPrescas',
        'prestub': 'OneOfProdSettingPrestub',
        'prod_setting_esps': 'list[ProdSettingEsp]',
        'prod_setting_flows': 'list[ProdSettingFlow]',
        'prod_setting_gas_lifts': 'list[ProdSettingGasLift]',
        'prod_setting_pcps': 'list[ProdSettingPcp]',
        'prod_setting_plungers': 'list[ProdSettingPlunger]',
        'prod_setting_rod_pumps': 'list[ProdSettingRodPump]',
        'prodmethdetail': 'str',
        'prodmethtyp': 'str',
        'settingobjective': 'str',
        'settingresult': 'str',
        'syscreatedate': 'datetime',
        'syscreateuser': 'str',
        'syslockchildren': 'int',
        'syslockchildrenui': 'int',
        'syslockdate': 'datetime',
        'syslockme': 'int',
        'syslockmeui': 'int',
        'sysmoddate': 'datetime',
        'sysmoduser': 'str',
        'systag': 'str',
        'wellheader': 'AnyOfProdSettingWellheader'
    }

    attribute_map = {
        'com': 'com',
        'dttmend': 'dttmend',
        'dttmstart': 'dttmstart',
        'idrec': 'idrec',
        'idreczonecompletion': 'idreczonecompletion',
        'idreczonecompletiontk': 'idreczonecompletiontk',
        'idwell': 'idwell',
        'prescas': 'prescas',
        'prestub': 'prestub',
        'prod_setting_esps': 'prodSettingEsps',
        'prod_setting_flows': 'prodSettingFlows',
        'prod_setting_gas_lifts': 'prodSettingGasLifts',
        'prod_setting_pcps': 'prodSettingPcps',
        'prod_setting_plungers': 'prodSettingPlungers',
        'prod_setting_rod_pumps': 'prodSettingRodPumps',
        'prodmethdetail': 'prodmethdetail',
        'prodmethtyp': 'prodmethtyp',
        'settingobjective': 'settingobjective',
        'settingresult': 'settingresult',
        'syscreatedate': 'syscreatedate',
        'syscreateuser': 'syscreateuser',
        'syslockchildren': 'syslockchildren',
        'syslockchildrenui': 'syslockchildrenui',
        'syslockdate': 'syslockdate',
        'syslockme': 'syslockme',
        'syslockmeui': 'syslockmeui',
        'sysmoddate': 'sysmoddate',
        'sysmoduser': 'sysmoduser',
        'systag': 'systag',
        'wellheader': 'wellheader'
    }

    def __init__(self, com=None, dttmend=None, dttmstart=None, idrec=None, idreczonecompletion=None, idreczonecompletiontk=None, idwell=None, prescas=None, prestub=None, prod_setting_esps=None, prod_setting_flows=None, prod_setting_gas_lifts=None, prod_setting_pcps=None, prod_setting_plungers=None, prod_setting_rod_pumps=None, prodmethdetail=None, prodmethtyp=None, settingobjective=None, settingresult=None, syscreatedate=None, syscreateuser=None, syslockchildren=None, syslockchildrenui=None, syslockdate=None, syslockme=None, syslockmeui=None, sysmoddate=None, sysmoduser=None, systag=None, wellheader=None):  # noqa: E501
        """ProdSetting - a model defined in Swagger"""  # noqa: E501
        self._com = None
        self._dttmend = None
        self._dttmstart = None
        self._idrec = None
        self._idreczonecompletion = None
        self._idreczonecompletiontk = None
        self._idwell = None
        self._prescas = None
        self._prestub = None
        self._prod_setting_esps = None
        self._prod_setting_flows = None
        self._prod_setting_gas_lifts = None
        self._prod_setting_pcps = None
        self._prod_setting_plungers = None
        self._prod_setting_rod_pumps = None
        self._prodmethdetail = None
        self._prodmethtyp = None
        self._settingobjective = None
        self._settingresult = None
        self._syscreatedate = None
        self._syscreateuser = None
        self._syslockchildren = None
        self._syslockchildrenui = None
        self._syslockdate = None
        self._syslockme = None
        self._syslockmeui = None
        self._sysmoddate = None
        self._sysmoduser = None
        self._systag = None
        self._wellheader = None
        self.discriminator = None
        if com is not None:
            self.com = com
        if dttmend is not None:
            self.dttmend = dttmend
        if dttmstart is not None:
            self.dttmstart = dttmstart
        if idrec is not None:
            self.idrec = idrec
        if idreczonecompletion is not None:
            self.idreczonecompletion = idreczonecompletion
        if idreczonecompletiontk is not None:
            self.idreczonecompletiontk = idreczonecompletiontk
        if idwell is not None:
            self.idwell = idwell
        if prescas is not None:
            self.prescas = prescas
        if prestub is not None:
            self.prestub = prestub
        if prod_setting_esps is not None:
            self.prod_setting_esps = prod_setting_esps
        if prod_setting_flows is not None:
            self.prod_setting_flows = prod_setting_flows
        if prod_setting_gas_lifts is not None:
            self.prod_setting_gas_lifts = prod_setting_gas_lifts
        if prod_setting_pcps is not None:
            self.prod_setting_pcps = prod_setting_pcps
        if prod_setting_plungers is not None:
            self.prod_setting_plungers = prod_setting_plungers
        if prod_setting_rod_pumps is not None:
            self.prod_setting_rod_pumps = prod_setting_rod_pumps
        if prodmethdetail is not None:
            self.prodmethdetail = prodmethdetail
        if prodmethtyp is not None:
            self.prodmethtyp = prodmethtyp
        if settingobjective is not None:
            self.settingobjective = settingobjective
        if settingresult is not None:
            self.settingresult = settingresult
        if syscreatedate is not None:
            self.syscreatedate = syscreatedate
        if syscreateuser is not None:
            self.syscreateuser = syscreateuser
        if syslockchildren is not None:
            self.syslockchildren = syslockchildren
        if syslockchildrenui is not None:
            self.syslockchildrenui = syslockchildrenui
        if syslockdate is not None:
            self.syslockdate = syslockdate
        if syslockme is not None:
            self.syslockme = syslockme
        if syslockmeui is not None:
            self.syslockmeui = syslockmeui
        if sysmoddate is not None:
            self.sysmoddate = sysmoddate
        if sysmoduser is not None:
            self.sysmoduser = sysmoduser
        if systag is not None:
            self.systag = systag
        if wellheader is not None:
            self.wellheader = wellheader

    @property
    def com(self):
        """Gets the com of this ProdSetting.  # noqa: E501


        :return: The com of this ProdSetting.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this ProdSetting.


        :param com: The com of this ProdSetting.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def dttmend(self):
        """Gets the dttmend of this ProdSetting.  # noqa: E501


        :return: The dttmend of this ProdSetting.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmend

    @dttmend.setter
    def dttmend(self, dttmend):
        """Sets the dttmend of this ProdSetting.


        :param dttmend: The dttmend of this ProdSetting.  # noqa: E501
        :type: datetime
        """

        self._dttmend = dttmend

    @property
    def dttmstart(self):
        """Gets the dttmstart of this ProdSetting.  # noqa: E501


        :return: The dttmstart of this ProdSetting.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmstart

    @dttmstart.setter
    def dttmstart(self, dttmstart):
        """Sets the dttmstart of this ProdSetting.


        :param dttmstart: The dttmstart of this ProdSetting.  # noqa: E501
        :type: datetime
        """

        self._dttmstart = dttmstart

    @property
    def idrec(self):
        """Gets the idrec of this ProdSetting.  # noqa: E501


        :return: The idrec of this ProdSetting.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this ProdSetting.


        :param idrec: The idrec of this ProdSetting.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idreczonecompletion(self):
        """Gets the idreczonecompletion of this ProdSetting.  # noqa: E501


        :return: The idreczonecompletion of this ProdSetting.  # noqa: E501
        :rtype: str
        """
        return self._idreczonecompletion

    @idreczonecompletion.setter
    def idreczonecompletion(self, idreczonecompletion):
        """Sets the idreczonecompletion of this ProdSetting.


        :param idreczonecompletion: The idreczonecompletion of this ProdSetting.  # noqa: E501
        :type: str
        """

        self._idreczonecompletion = idreczonecompletion

    @property
    def idreczonecompletiontk(self):
        """Gets the idreczonecompletiontk of this ProdSetting.  # noqa: E501


        :return: The idreczonecompletiontk of this ProdSetting.  # noqa: E501
        :rtype: str
        """
        return self._idreczonecompletiontk

    @idreczonecompletiontk.setter
    def idreczonecompletiontk(self, idreczonecompletiontk):
        """Sets the idreczonecompletiontk of this ProdSetting.


        :param idreczonecompletiontk: The idreczonecompletiontk of this ProdSetting.  # noqa: E501
        :type: str
        """

        self._idreczonecompletiontk = idreczonecompletiontk

    @property
    def idwell(self):
        """Gets the idwell of this ProdSetting.  # noqa: E501


        :return: The idwell of this ProdSetting.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this ProdSetting.


        :param idwell: The idwell of this ProdSetting.  # noqa: E501
        :type: str
        """

        self._idwell = idwell

    @property
    def prescas(self):
        """Gets the prescas of this ProdSetting.  # noqa: E501


        :return: The prescas of this ProdSetting.  # noqa: E501
        :rtype: OneOfProdSettingPrescas
        """
        return self._prescas

    @prescas.setter
    def prescas(self, prescas):
        """Sets the prescas of this ProdSetting.


        :param prescas: The prescas of this ProdSetting.  # noqa: E501
        :type: OneOfProdSettingPrescas
        """

        self._prescas = prescas

    @property
    def prestub(self):
        """Gets the prestub of this ProdSetting.  # noqa: E501


        :return: The prestub of this ProdSetting.  # noqa: E501
        :rtype: OneOfProdSettingPrestub
        """
        return self._prestub

    @prestub.setter
    def prestub(self, prestub):
        """Sets the prestub of this ProdSetting.


        :param prestub: The prestub of this ProdSetting.  # noqa: E501
        :type: OneOfProdSettingPrestub
        """

        self._prestub = prestub

    @property
    def prod_setting_esps(self):
        """Gets the prod_setting_esps of this ProdSetting.  # noqa: E501


        :return: The prod_setting_esps of this ProdSetting.  # noqa: E501
        :rtype: list[ProdSettingEsp]
        """
        return self._prod_setting_esps

    @prod_setting_esps.setter
    def prod_setting_esps(self, prod_setting_esps):
        """Sets the prod_setting_esps of this ProdSetting.


        :param prod_setting_esps: The prod_setting_esps of this ProdSetting.  # noqa: E501
        :type: list[ProdSettingEsp]
        """

        self._prod_setting_esps = prod_setting_esps

    @property
    def prod_setting_flows(self):
        """Gets the prod_setting_flows of this ProdSetting.  # noqa: E501


        :return: The prod_setting_flows of this ProdSetting.  # noqa: E501
        :rtype: list[ProdSettingFlow]
        """
        return self._prod_setting_flows

    @prod_setting_flows.setter
    def prod_setting_flows(self, prod_setting_flows):
        """Sets the prod_setting_flows of this ProdSetting.


        :param prod_setting_flows: The prod_setting_flows of this ProdSetting.  # noqa: E501
        :type: list[ProdSettingFlow]
        """

        self._prod_setting_flows = prod_setting_flows

    @property
    def prod_setting_gas_lifts(self):
        """Gets the prod_setting_gas_lifts of this ProdSetting.  # noqa: E501


        :return: The prod_setting_gas_lifts of this ProdSetting.  # noqa: E501
        :rtype: list[ProdSettingGasLift]
        """
        return self._prod_setting_gas_lifts

    @prod_setting_gas_lifts.setter
    def prod_setting_gas_lifts(self, prod_setting_gas_lifts):
        """Sets the prod_setting_gas_lifts of this ProdSetting.


        :param prod_setting_gas_lifts: The prod_setting_gas_lifts of this ProdSetting.  # noqa: E501
        :type: list[ProdSettingGasLift]
        """

        self._prod_setting_gas_lifts = prod_setting_gas_lifts

    @property
    def prod_setting_pcps(self):
        """Gets the prod_setting_pcps of this ProdSetting.  # noqa: E501


        :return: The prod_setting_pcps of this ProdSetting.  # noqa: E501
        :rtype: list[ProdSettingPcp]
        """
        return self._prod_setting_pcps

    @prod_setting_pcps.setter
    def prod_setting_pcps(self, prod_setting_pcps):
        """Sets the prod_setting_pcps of this ProdSetting.


        :param prod_setting_pcps: The prod_setting_pcps of this ProdSetting.  # noqa: E501
        :type: list[ProdSettingPcp]
        """

        self._prod_setting_pcps = prod_setting_pcps

    @property
    def prod_setting_plungers(self):
        """Gets the prod_setting_plungers of this ProdSetting.  # noqa: E501


        :return: The prod_setting_plungers of this ProdSetting.  # noqa: E501
        :rtype: list[ProdSettingPlunger]
        """
        return self._prod_setting_plungers

    @prod_setting_plungers.setter
    def prod_setting_plungers(self, prod_setting_plungers):
        """Sets the prod_setting_plungers of this ProdSetting.


        :param prod_setting_plungers: The prod_setting_plungers of this ProdSetting.  # noqa: E501
        :type: list[ProdSettingPlunger]
        """

        self._prod_setting_plungers = prod_setting_plungers

    @property
    def prod_setting_rod_pumps(self):
        """Gets the prod_setting_rod_pumps of this ProdSetting.  # noqa: E501


        :return: The prod_setting_rod_pumps of this ProdSetting.  # noqa: E501
        :rtype: list[ProdSettingRodPump]
        """
        return self._prod_setting_rod_pumps

    @prod_setting_rod_pumps.setter
    def prod_setting_rod_pumps(self, prod_setting_rod_pumps):
        """Sets the prod_setting_rod_pumps of this ProdSetting.


        :param prod_setting_rod_pumps: The prod_setting_rod_pumps of this ProdSetting.  # noqa: E501
        :type: list[ProdSettingRodPump]
        """

        self._prod_setting_rod_pumps = prod_setting_rod_pumps

    @property
    def prodmethdetail(self):
        """Gets the prodmethdetail of this ProdSetting.  # noqa: E501


        :return: The prodmethdetail of this ProdSetting.  # noqa: E501
        :rtype: str
        """
        return self._prodmethdetail

    @prodmethdetail.setter
    def prodmethdetail(self, prodmethdetail):
        """Sets the prodmethdetail of this ProdSetting.


        :param prodmethdetail: The prodmethdetail of this ProdSetting.  # noqa: E501
        :type: str
        """

        self._prodmethdetail = prodmethdetail

    @property
    def prodmethtyp(self):
        """Gets the prodmethtyp of this ProdSetting.  # noqa: E501


        :return: The prodmethtyp of this ProdSetting.  # noqa: E501
        :rtype: str
        """
        return self._prodmethtyp

    @prodmethtyp.setter
    def prodmethtyp(self, prodmethtyp):
        """Sets the prodmethtyp of this ProdSetting.


        :param prodmethtyp: The prodmethtyp of this ProdSetting.  # noqa: E501
        :type: str
        """

        self._prodmethtyp = prodmethtyp

    @property
    def settingobjective(self):
        """Gets the settingobjective of this ProdSetting.  # noqa: E501


        :return: The settingobjective of this ProdSetting.  # noqa: E501
        :rtype: str
        """
        return self._settingobjective

    @settingobjective.setter
    def settingobjective(self, settingobjective):
        """Sets the settingobjective of this ProdSetting.


        :param settingobjective: The settingobjective of this ProdSetting.  # noqa: E501
        :type: str
        """

        self._settingobjective = settingobjective

    @property
    def settingresult(self):
        """Gets the settingresult of this ProdSetting.  # noqa: E501


        :return: The settingresult of this ProdSetting.  # noqa: E501
        :rtype: str
        """
        return self._settingresult

    @settingresult.setter
    def settingresult(self, settingresult):
        """Sets the settingresult of this ProdSetting.


        :param settingresult: The settingresult of this ProdSetting.  # noqa: E501
        :type: str
        """

        self._settingresult = settingresult

    @property
    def syscreatedate(self):
        """Gets the syscreatedate of this ProdSetting.  # noqa: E501


        :return: The syscreatedate of this ProdSetting.  # noqa: E501
        :rtype: datetime
        """
        return self._syscreatedate

    @syscreatedate.setter
    def syscreatedate(self, syscreatedate):
        """Sets the syscreatedate of this ProdSetting.


        :param syscreatedate: The syscreatedate of this ProdSetting.  # noqa: E501
        :type: datetime
        """

        self._syscreatedate = syscreatedate

    @property
    def syscreateuser(self):
        """Gets the syscreateuser of this ProdSetting.  # noqa: E501


        :return: The syscreateuser of this ProdSetting.  # noqa: E501
        :rtype: str
        """
        return self._syscreateuser

    @syscreateuser.setter
    def syscreateuser(self, syscreateuser):
        """Sets the syscreateuser of this ProdSetting.


        :param syscreateuser: The syscreateuser of this ProdSetting.  # noqa: E501
        :type: str
        """

        self._syscreateuser = syscreateuser

    @property
    def syslockchildren(self):
        """Gets the syslockchildren of this ProdSetting.  # noqa: E501


        :return: The syslockchildren of this ProdSetting.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildren

    @syslockchildren.setter
    def syslockchildren(self, syslockchildren):
        """Sets the syslockchildren of this ProdSetting.


        :param syslockchildren: The syslockchildren of this ProdSetting.  # noqa: E501
        :type: int
        """

        self._syslockchildren = syslockchildren

    @property
    def syslockchildrenui(self):
        """Gets the syslockchildrenui of this ProdSetting.  # noqa: E501


        :return: The syslockchildrenui of this ProdSetting.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildrenui

    @syslockchildrenui.setter
    def syslockchildrenui(self, syslockchildrenui):
        """Sets the syslockchildrenui of this ProdSetting.


        :param syslockchildrenui: The syslockchildrenui of this ProdSetting.  # noqa: E501
        :type: int
        """

        self._syslockchildrenui = syslockchildrenui

    @property
    def syslockdate(self):
        """Gets the syslockdate of this ProdSetting.  # noqa: E501


        :return: The syslockdate of this ProdSetting.  # noqa: E501
        :rtype: datetime
        """
        return self._syslockdate

    @syslockdate.setter
    def syslockdate(self, syslockdate):
        """Sets the syslockdate of this ProdSetting.


        :param syslockdate: The syslockdate of this ProdSetting.  # noqa: E501
        :type: datetime
        """

        self._syslockdate = syslockdate

    @property
    def syslockme(self):
        """Gets the syslockme of this ProdSetting.  # noqa: E501


        :return: The syslockme of this ProdSetting.  # noqa: E501
        :rtype: int
        """
        return self._syslockme

    @syslockme.setter
    def syslockme(self, syslockme):
        """Sets the syslockme of this ProdSetting.


        :param syslockme: The syslockme of this ProdSetting.  # noqa: E501
        :type: int
        """

        self._syslockme = syslockme

    @property
    def syslockmeui(self):
        """Gets the syslockmeui of this ProdSetting.  # noqa: E501


        :return: The syslockmeui of this ProdSetting.  # noqa: E501
        :rtype: int
        """
        return self._syslockmeui

    @syslockmeui.setter
    def syslockmeui(self, syslockmeui):
        """Sets the syslockmeui of this ProdSetting.


        :param syslockmeui: The syslockmeui of this ProdSetting.  # noqa: E501
        :type: int
        """

        self._syslockmeui = syslockmeui

    @property
    def sysmoddate(self):
        """Gets the sysmoddate of this ProdSetting.  # noqa: E501


        :return: The sysmoddate of this ProdSetting.  # noqa: E501
        :rtype: datetime
        """
        return self._sysmoddate

    @sysmoddate.setter
    def sysmoddate(self, sysmoddate):
        """Sets the sysmoddate of this ProdSetting.


        :param sysmoddate: The sysmoddate of this ProdSetting.  # noqa: E501
        :type: datetime
        """

        self._sysmoddate = sysmoddate

    @property
    def sysmoduser(self):
        """Gets the sysmoduser of this ProdSetting.  # noqa: E501


        :return: The sysmoduser of this ProdSetting.  # noqa: E501
        :rtype: str
        """
        return self._sysmoduser

    @sysmoduser.setter
    def sysmoduser(self, sysmoduser):
        """Sets the sysmoduser of this ProdSetting.


        :param sysmoduser: The sysmoduser of this ProdSetting.  # noqa: E501
        :type: str
        """

        self._sysmoduser = sysmoduser

    @property
    def systag(self):
        """Gets the systag of this ProdSetting.  # noqa: E501


        :return: The systag of this ProdSetting.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this ProdSetting.


        :param systag: The systag of this ProdSetting.  # noqa: E501
        :type: str
        """

        self._systag = systag

    @property
    def wellheader(self):
        """Gets the wellheader of this ProdSetting.  # noqa: E501


        :return: The wellheader of this ProdSetting.  # noqa: E501
        :rtype: AnyOfProdSettingWellheader
        """
        return self._wellheader

    @wellheader.setter
    def wellheader(self, wellheader):
        """Sets the wellheader of this ProdSetting.


        :param wellheader: The wellheader of this ProdSetting.  # noqa: E501
        :type: AnyOfProdSettingWellheader
        """

        self._wellheader = wellheader

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProdSetting, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProdSetting):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
