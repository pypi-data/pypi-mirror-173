# coding: utf-8

"""
    OData Service for namespace Default

    This OData service is located at http://localhost  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProblemDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'areafailed': 'str',
        'category': 'str',
        'com': 'str',
        'depth': 'OneOfProblemDetailDepth',
        'des': 'str',
        'durequipinservice': 'OneOfProblemDetailDurequipinservice',
        'durrun': 'OneOfProblemDetailDurrun',
        'idrec': 'str',
        'idrecfaileditem': 'str',
        'idrecfaileditemtk': 'str',
        'idrecparent': 'str',
        'idwell': 'str',
        'problem': 'AnyOfProblemDetailProblem',
        'problem_detail_analyses': 'list[ProblemDetailAnalysis]',
        'subitem': 'str',
        'syscreatedate': 'datetime',
        'syscreateuser': 'str',
        'syslockchildren': 'int',
        'syslockchildrenui': 'int',
        'syslockdate': 'datetime',
        'syslockme': 'int',
        'syslockmeui': 'int',
        'sysmoddate': 'datetime',
        'sysmoduser': 'str',
        'systag': 'str'
    }

    attribute_map = {
        'areafailed': 'areafailed',
        'category': 'category',
        'com': 'com',
        'depth': 'depth',
        'des': 'des',
        'durequipinservice': 'durequipinservice',
        'durrun': 'durrun',
        'idrec': 'idrec',
        'idrecfaileditem': 'idrecfaileditem',
        'idrecfaileditemtk': 'idrecfaileditemtk',
        'idrecparent': 'idrecparent',
        'idwell': 'idwell',
        'problem': 'problem',
        'problem_detail_analyses': 'problemDetailAnalyses',
        'subitem': 'subitem',
        'syscreatedate': 'syscreatedate',
        'syscreateuser': 'syscreateuser',
        'syslockchildren': 'syslockchildren',
        'syslockchildrenui': 'syslockchildrenui',
        'syslockdate': 'syslockdate',
        'syslockme': 'syslockme',
        'syslockmeui': 'syslockmeui',
        'sysmoddate': 'sysmoddate',
        'sysmoduser': 'sysmoduser',
        'systag': 'systag'
    }

    def __init__(self, areafailed=None, category=None, com=None, depth=None, des=None, durequipinservice=None, durrun=None, idrec=None, idrecfaileditem=None, idrecfaileditemtk=None, idrecparent=None, idwell=None, problem=None, problem_detail_analyses=None, subitem=None, syscreatedate=None, syscreateuser=None, syslockchildren=None, syslockchildrenui=None, syslockdate=None, syslockme=None, syslockmeui=None, sysmoddate=None, sysmoduser=None, systag=None):  # noqa: E501
        """ProblemDetail - a model defined in Swagger"""  # noqa: E501
        self._areafailed = None
        self._category = None
        self._com = None
        self._depth = None
        self._des = None
        self._durequipinservice = None
        self._durrun = None
        self._idrec = None
        self._idrecfaileditem = None
        self._idrecfaileditemtk = None
        self._idrecparent = None
        self._idwell = None
        self._problem = None
        self._problem_detail_analyses = None
        self._subitem = None
        self._syscreatedate = None
        self._syscreateuser = None
        self._syslockchildren = None
        self._syslockchildrenui = None
        self._syslockdate = None
        self._syslockme = None
        self._syslockmeui = None
        self._sysmoddate = None
        self._sysmoduser = None
        self._systag = None
        self.discriminator = None
        if areafailed is not None:
            self.areafailed = areafailed
        if category is not None:
            self.category = category
        if com is not None:
            self.com = com
        if depth is not None:
            self.depth = depth
        if des is not None:
            self.des = des
        if durequipinservice is not None:
            self.durequipinservice = durequipinservice
        if durrun is not None:
            self.durrun = durrun
        if idrec is not None:
            self.idrec = idrec
        if idrecfaileditem is not None:
            self.idrecfaileditem = idrecfaileditem
        if idrecfaileditemtk is not None:
            self.idrecfaileditemtk = idrecfaileditemtk
        if idrecparent is not None:
            self.idrecparent = idrecparent
        if idwell is not None:
            self.idwell = idwell
        if problem is not None:
            self.problem = problem
        if problem_detail_analyses is not None:
            self.problem_detail_analyses = problem_detail_analyses
        if subitem is not None:
            self.subitem = subitem
        if syscreatedate is not None:
            self.syscreatedate = syscreatedate
        if syscreateuser is not None:
            self.syscreateuser = syscreateuser
        if syslockchildren is not None:
            self.syslockchildren = syslockchildren
        if syslockchildrenui is not None:
            self.syslockchildrenui = syslockchildrenui
        if syslockdate is not None:
            self.syslockdate = syslockdate
        if syslockme is not None:
            self.syslockme = syslockme
        if syslockmeui is not None:
            self.syslockmeui = syslockmeui
        if sysmoddate is not None:
            self.sysmoddate = sysmoddate
        if sysmoduser is not None:
            self.sysmoduser = sysmoduser
        if systag is not None:
            self.systag = systag

    @property
    def areafailed(self):
        """Gets the areafailed of this ProblemDetail.  # noqa: E501


        :return: The areafailed of this ProblemDetail.  # noqa: E501
        :rtype: str
        """
        return self._areafailed

    @areafailed.setter
    def areafailed(self, areafailed):
        """Sets the areafailed of this ProblemDetail.


        :param areafailed: The areafailed of this ProblemDetail.  # noqa: E501
        :type: str
        """

        self._areafailed = areafailed

    @property
    def category(self):
        """Gets the category of this ProblemDetail.  # noqa: E501


        :return: The category of this ProblemDetail.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this ProblemDetail.


        :param category: The category of this ProblemDetail.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def com(self):
        """Gets the com of this ProblemDetail.  # noqa: E501


        :return: The com of this ProblemDetail.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this ProblemDetail.


        :param com: The com of this ProblemDetail.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def depth(self):
        """Gets the depth of this ProblemDetail.  # noqa: E501


        :return: The depth of this ProblemDetail.  # noqa: E501
        :rtype: OneOfProblemDetailDepth
        """
        return self._depth

    @depth.setter
    def depth(self, depth):
        """Sets the depth of this ProblemDetail.


        :param depth: The depth of this ProblemDetail.  # noqa: E501
        :type: OneOfProblemDetailDepth
        """

        self._depth = depth

    @property
    def des(self):
        """Gets the des of this ProblemDetail.  # noqa: E501


        :return: The des of this ProblemDetail.  # noqa: E501
        :rtype: str
        """
        return self._des

    @des.setter
    def des(self, des):
        """Sets the des of this ProblemDetail.


        :param des: The des of this ProblemDetail.  # noqa: E501
        :type: str
        """

        self._des = des

    @property
    def durequipinservice(self):
        """Gets the durequipinservice of this ProblemDetail.  # noqa: E501


        :return: The durequipinservice of this ProblemDetail.  # noqa: E501
        :rtype: OneOfProblemDetailDurequipinservice
        """
        return self._durequipinservice

    @durequipinservice.setter
    def durequipinservice(self, durequipinservice):
        """Sets the durequipinservice of this ProblemDetail.


        :param durequipinservice: The durequipinservice of this ProblemDetail.  # noqa: E501
        :type: OneOfProblemDetailDurequipinservice
        """

        self._durequipinservice = durequipinservice

    @property
    def durrun(self):
        """Gets the durrun of this ProblemDetail.  # noqa: E501


        :return: The durrun of this ProblemDetail.  # noqa: E501
        :rtype: OneOfProblemDetailDurrun
        """
        return self._durrun

    @durrun.setter
    def durrun(self, durrun):
        """Sets the durrun of this ProblemDetail.


        :param durrun: The durrun of this ProblemDetail.  # noqa: E501
        :type: OneOfProblemDetailDurrun
        """

        self._durrun = durrun

    @property
    def idrec(self):
        """Gets the idrec of this ProblemDetail.  # noqa: E501


        :return: The idrec of this ProblemDetail.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this ProblemDetail.


        :param idrec: The idrec of this ProblemDetail.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecfaileditem(self):
        """Gets the idrecfaileditem of this ProblemDetail.  # noqa: E501


        :return: The idrecfaileditem of this ProblemDetail.  # noqa: E501
        :rtype: str
        """
        return self._idrecfaileditem

    @idrecfaileditem.setter
    def idrecfaileditem(self, idrecfaileditem):
        """Sets the idrecfaileditem of this ProblemDetail.


        :param idrecfaileditem: The idrecfaileditem of this ProblemDetail.  # noqa: E501
        :type: str
        """

        self._idrecfaileditem = idrecfaileditem

    @property
    def idrecfaileditemtk(self):
        """Gets the idrecfaileditemtk of this ProblemDetail.  # noqa: E501


        :return: The idrecfaileditemtk of this ProblemDetail.  # noqa: E501
        :rtype: str
        """
        return self._idrecfaileditemtk

    @idrecfaileditemtk.setter
    def idrecfaileditemtk(self, idrecfaileditemtk):
        """Sets the idrecfaileditemtk of this ProblemDetail.


        :param idrecfaileditemtk: The idrecfaileditemtk of this ProblemDetail.  # noqa: E501
        :type: str
        """

        self._idrecfaileditemtk = idrecfaileditemtk

    @property
    def idrecparent(self):
        """Gets the idrecparent of this ProblemDetail.  # noqa: E501


        :return: The idrecparent of this ProblemDetail.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this ProblemDetail.


        :param idrecparent: The idrecparent of this ProblemDetail.  # noqa: E501
        :type: str
        """

        self._idrecparent = idrecparent

    @property
    def idwell(self):
        """Gets the idwell of this ProblemDetail.  # noqa: E501


        :return: The idwell of this ProblemDetail.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this ProblemDetail.


        :param idwell: The idwell of this ProblemDetail.  # noqa: E501
        :type: str
        """

        self._idwell = idwell

    @property
    def problem(self):
        """Gets the problem of this ProblemDetail.  # noqa: E501


        :return: The problem of this ProblemDetail.  # noqa: E501
        :rtype: AnyOfProblemDetailProblem
        """
        return self._problem

    @problem.setter
    def problem(self, problem):
        """Sets the problem of this ProblemDetail.


        :param problem: The problem of this ProblemDetail.  # noqa: E501
        :type: AnyOfProblemDetailProblem
        """

        self._problem = problem

    @property
    def problem_detail_analyses(self):
        """Gets the problem_detail_analyses of this ProblemDetail.  # noqa: E501


        :return: The problem_detail_analyses of this ProblemDetail.  # noqa: E501
        :rtype: list[ProblemDetailAnalysis]
        """
        return self._problem_detail_analyses

    @problem_detail_analyses.setter
    def problem_detail_analyses(self, problem_detail_analyses):
        """Sets the problem_detail_analyses of this ProblemDetail.


        :param problem_detail_analyses: The problem_detail_analyses of this ProblemDetail.  # noqa: E501
        :type: list[ProblemDetailAnalysis]
        """

        self._problem_detail_analyses = problem_detail_analyses

    @property
    def subitem(self):
        """Gets the subitem of this ProblemDetail.  # noqa: E501


        :return: The subitem of this ProblemDetail.  # noqa: E501
        :rtype: str
        """
        return self._subitem

    @subitem.setter
    def subitem(self, subitem):
        """Sets the subitem of this ProblemDetail.


        :param subitem: The subitem of this ProblemDetail.  # noqa: E501
        :type: str
        """

        self._subitem = subitem

    @property
    def syscreatedate(self):
        """Gets the syscreatedate of this ProblemDetail.  # noqa: E501


        :return: The syscreatedate of this ProblemDetail.  # noqa: E501
        :rtype: datetime
        """
        return self._syscreatedate

    @syscreatedate.setter
    def syscreatedate(self, syscreatedate):
        """Sets the syscreatedate of this ProblemDetail.


        :param syscreatedate: The syscreatedate of this ProblemDetail.  # noqa: E501
        :type: datetime
        """

        self._syscreatedate = syscreatedate

    @property
    def syscreateuser(self):
        """Gets the syscreateuser of this ProblemDetail.  # noqa: E501


        :return: The syscreateuser of this ProblemDetail.  # noqa: E501
        :rtype: str
        """
        return self._syscreateuser

    @syscreateuser.setter
    def syscreateuser(self, syscreateuser):
        """Sets the syscreateuser of this ProblemDetail.


        :param syscreateuser: The syscreateuser of this ProblemDetail.  # noqa: E501
        :type: str
        """

        self._syscreateuser = syscreateuser

    @property
    def syslockchildren(self):
        """Gets the syslockchildren of this ProblemDetail.  # noqa: E501


        :return: The syslockchildren of this ProblemDetail.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildren

    @syslockchildren.setter
    def syslockchildren(self, syslockchildren):
        """Sets the syslockchildren of this ProblemDetail.


        :param syslockchildren: The syslockchildren of this ProblemDetail.  # noqa: E501
        :type: int
        """

        self._syslockchildren = syslockchildren

    @property
    def syslockchildrenui(self):
        """Gets the syslockchildrenui of this ProblemDetail.  # noqa: E501


        :return: The syslockchildrenui of this ProblemDetail.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildrenui

    @syslockchildrenui.setter
    def syslockchildrenui(self, syslockchildrenui):
        """Sets the syslockchildrenui of this ProblemDetail.


        :param syslockchildrenui: The syslockchildrenui of this ProblemDetail.  # noqa: E501
        :type: int
        """

        self._syslockchildrenui = syslockchildrenui

    @property
    def syslockdate(self):
        """Gets the syslockdate of this ProblemDetail.  # noqa: E501


        :return: The syslockdate of this ProblemDetail.  # noqa: E501
        :rtype: datetime
        """
        return self._syslockdate

    @syslockdate.setter
    def syslockdate(self, syslockdate):
        """Sets the syslockdate of this ProblemDetail.


        :param syslockdate: The syslockdate of this ProblemDetail.  # noqa: E501
        :type: datetime
        """

        self._syslockdate = syslockdate

    @property
    def syslockme(self):
        """Gets the syslockme of this ProblemDetail.  # noqa: E501


        :return: The syslockme of this ProblemDetail.  # noqa: E501
        :rtype: int
        """
        return self._syslockme

    @syslockme.setter
    def syslockme(self, syslockme):
        """Sets the syslockme of this ProblemDetail.


        :param syslockme: The syslockme of this ProblemDetail.  # noqa: E501
        :type: int
        """

        self._syslockme = syslockme

    @property
    def syslockmeui(self):
        """Gets the syslockmeui of this ProblemDetail.  # noqa: E501


        :return: The syslockmeui of this ProblemDetail.  # noqa: E501
        :rtype: int
        """
        return self._syslockmeui

    @syslockmeui.setter
    def syslockmeui(self, syslockmeui):
        """Sets the syslockmeui of this ProblemDetail.


        :param syslockmeui: The syslockmeui of this ProblemDetail.  # noqa: E501
        :type: int
        """

        self._syslockmeui = syslockmeui

    @property
    def sysmoddate(self):
        """Gets the sysmoddate of this ProblemDetail.  # noqa: E501


        :return: The sysmoddate of this ProblemDetail.  # noqa: E501
        :rtype: datetime
        """
        return self._sysmoddate

    @sysmoddate.setter
    def sysmoddate(self, sysmoddate):
        """Sets the sysmoddate of this ProblemDetail.


        :param sysmoddate: The sysmoddate of this ProblemDetail.  # noqa: E501
        :type: datetime
        """

        self._sysmoddate = sysmoddate

    @property
    def sysmoduser(self):
        """Gets the sysmoduser of this ProblemDetail.  # noqa: E501


        :return: The sysmoduser of this ProblemDetail.  # noqa: E501
        :rtype: str
        """
        return self._sysmoduser

    @sysmoduser.setter
    def sysmoduser(self, sysmoduser):
        """Sets the sysmoduser of this ProblemDetail.


        :param sysmoduser: The sysmoduser of this ProblemDetail.  # noqa: E501
        :type: str
        """

        self._sysmoduser = sysmoduser

    @property
    def systag(self):
        """Gets the systag of this ProblemDetail.  # noqa: E501


        :return: The systag of this ProblemDetail.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this ProblemDetail.


        :param systag: The systag of this ProblemDetail.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProblemDetail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProblemDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
