# coding: utf-8

"""
    OData Service for namespace Default

    This OData service is located at http://localhost  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SurfControlEquipVsd(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'currentrating': 'OneOfSurfControlEquipVsdCurrentrating',
        'fusesz': 'str',
        'harmonicfilterinput': 'int',
        'harmonicfilteroutput': 'int',
        'idrec': 'str',
        'idrecparent': 'str',
        'idwell': 'str',
        'inputfreq': 'OneOfSurfControlEquipVsdInputfreq',
        'kvarating': 'OneOfSurfControlEquipVsdKvarating',
        'lowerfreq': 'OneOfSurfControlEquipVsdLowerfreq',
        'mtrcontrollerdes': 'str',
        'note': 'str',
        'ratioctfinal': 'str',
        'ratioctinitial': 'str',
        'surf_control_equip': 'AnyOfSurfControlEquipVsdSurfControlEquip',
        'syscreatedate': 'datetime',
        'syscreateuser': 'str',
        'syslockchildren': 'int',
        'syslockchildrenui': 'int',
        'syslockdate': 'datetime',
        'syslockme': 'int',
        'syslockmeui': 'int',
        'sysmoddate': 'datetime',
        'sysmoduser': 'str',
        'systag': 'str',
        'tvssdes': 'str',
        'tvssinstalled': 'int',
        'upperfreq': 'OneOfSurfControlEquipVsdUpperfreq',
        'voltageinput': 'OneOfSurfControlEquipVsdVoltageinput',
        'voltageoutput': 'OneOfSurfControlEquipVsdVoltageoutput'
    }

    attribute_map = {
        'currentrating': 'currentrating',
        'fusesz': 'fusesz',
        'harmonicfilterinput': 'harmonicfilterinput',
        'harmonicfilteroutput': 'harmonicfilteroutput',
        'idrec': 'idrec',
        'idrecparent': 'idrecparent',
        'idwell': 'idwell',
        'inputfreq': 'inputfreq',
        'kvarating': 'kvarating',
        'lowerfreq': 'lowerfreq',
        'mtrcontrollerdes': 'mtrcontrollerdes',
        'note': 'note',
        'ratioctfinal': 'ratioctfinal',
        'ratioctinitial': 'ratioctinitial',
        'surf_control_equip': 'surfControlEquip',
        'syscreatedate': 'syscreatedate',
        'syscreateuser': 'syscreateuser',
        'syslockchildren': 'syslockchildren',
        'syslockchildrenui': 'syslockchildrenui',
        'syslockdate': 'syslockdate',
        'syslockme': 'syslockme',
        'syslockmeui': 'syslockmeui',
        'sysmoddate': 'sysmoddate',
        'sysmoduser': 'sysmoduser',
        'systag': 'systag',
        'tvssdes': 'tvssdes',
        'tvssinstalled': 'tvssinstalled',
        'upperfreq': 'upperfreq',
        'voltageinput': 'voltageinput',
        'voltageoutput': 'voltageoutput'
    }

    def __init__(self, currentrating=None, fusesz=None, harmonicfilterinput=None, harmonicfilteroutput=None, idrec=None, idrecparent=None, idwell=None, inputfreq=None, kvarating=None, lowerfreq=None, mtrcontrollerdes=None, note=None, ratioctfinal=None, ratioctinitial=None, surf_control_equip=None, syscreatedate=None, syscreateuser=None, syslockchildren=None, syslockchildrenui=None, syslockdate=None, syslockme=None, syslockmeui=None, sysmoddate=None, sysmoduser=None, systag=None, tvssdes=None, tvssinstalled=None, upperfreq=None, voltageinput=None, voltageoutput=None):  # noqa: E501
        """SurfControlEquipVsd - a model defined in Swagger"""  # noqa: E501
        self._currentrating = None
        self._fusesz = None
        self._harmonicfilterinput = None
        self._harmonicfilteroutput = None
        self._idrec = None
        self._idrecparent = None
        self._idwell = None
        self._inputfreq = None
        self._kvarating = None
        self._lowerfreq = None
        self._mtrcontrollerdes = None
        self._note = None
        self._ratioctfinal = None
        self._ratioctinitial = None
        self._surf_control_equip = None
        self._syscreatedate = None
        self._syscreateuser = None
        self._syslockchildren = None
        self._syslockchildrenui = None
        self._syslockdate = None
        self._syslockme = None
        self._syslockmeui = None
        self._sysmoddate = None
        self._sysmoduser = None
        self._systag = None
        self._tvssdes = None
        self._tvssinstalled = None
        self._upperfreq = None
        self._voltageinput = None
        self._voltageoutput = None
        self.discriminator = None
        if currentrating is not None:
            self.currentrating = currentrating
        if fusesz is not None:
            self.fusesz = fusesz
        if harmonicfilterinput is not None:
            self.harmonicfilterinput = harmonicfilterinput
        if harmonicfilteroutput is not None:
            self.harmonicfilteroutput = harmonicfilteroutput
        if idrec is not None:
            self.idrec = idrec
        if idrecparent is not None:
            self.idrecparent = idrecparent
        if idwell is not None:
            self.idwell = idwell
        if inputfreq is not None:
            self.inputfreq = inputfreq
        if kvarating is not None:
            self.kvarating = kvarating
        if lowerfreq is not None:
            self.lowerfreq = lowerfreq
        if mtrcontrollerdes is not None:
            self.mtrcontrollerdes = mtrcontrollerdes
        if note is not None:
            self.note = note
        if ratioctfinal is not None:
            self.ratioctfinal = ratioctfinal
        if ratioctinitial is not None:
            self.ratioctinitial = ratioctinitial
        if surf_control_equip is not None:
            self.surf_control_equip = surf_control_equip
        if syscreatedate is not None:
            self.syscreatedate = syscreatedate
        if syscreateuser is not None:
            self.syscreateuser = syscreateuser
        if syslockchildren is not None:
            self.syslockchildren = syslockchildren
        if syslockchildrenui is not None:
            self.syslockchildrenui = syslockchildrenui
        if syslockdate is not None:
            self.syslockdate = syslockdate
        if syslockme is not None:
            self.syslockme = syslockme
        if syslockmeui is not None:
            self.syslockmeui = syslockmeui
        if sysmoddate is not None:
            self.sysmoddate = sysmoddate
        if sysmoduser is not None:
            self.sysmoduser = sysmoduser
        if systag is not None:
            self.systag = systag
        if tvssdes is not None:
            self.tvssdes = tvssdes
        if tvssinstalled is not None:
            self.tvssinstalled = tvssinstalled
        if upperfreq is not None:
            self.upperfreq = upperfreq
        if voltageinput is not None:
            self.voltageinput = voltageinput
        if voltageoutput is not None:
            self.voltageoutput = voltageoutput

    @property
    def currentrating(self):
        """Gets the currentrating of this SurfControlEquipVsd.  # noqa: E501


        :return: The currentrating of this SurfControlEquipVsd.  # noqa: E501
        :rtype: OneOfSurfControlEquipVsdCurrentrating
        """
        return self._currentrating

    @currentrating.setter
    def currentrating(self, currentrating):
        """Sets the currentrating of this SurfControlEquipVsd.


        :param currentrating: The currentrating of this SurfControlEquipVsd.  # noqa: E501
        :type: OneOfSurfControlEquipVsdCurrentrating
        """

        self._currentrating = currentrating

    @property
    def fusesz(self):
        """Gets the fusesz of this SurfControlEquipVsd.  # noqa: E501


        :return: The fusesz of this SurfControlEquipVsd.  # noqa: E501
        :rtype: str
        """
        return self._fusesz

    @fusesz.setter
    def fusesz(self, fusesz):
        """Sets the fusesz of this SurfControlEquipVsd.


        :param fusesz: The fusesz of this SurfControlEquipVsd.  # noqa: E501
        :type: str
        """

        self._fusesz = fusesz

    @property
    def harmonicfilterinput(self):
        """Gets the harmonicfilterinput of this SurfControlEquipVsd.  # noqa: E501


        :return: The harmonicfilterinput of this SurfControlEquipVsd.  # noqa: E501
        :rtype: int
        """
        return self._harmonicfilterinput

    @harmonicfilterinput.setter
    def harmonicfilterinput(self, harmonicfilterinput):
        """Sets the harmonicfilterinput of this SurfControlEquipVsd.


        :param harmonicfilterinput: The harmonicfilterinput of this SurfControlEquipVsd.  # noqa: E501
        :type: int
        """

        self._harmonicfilterinput = harmonicfilterinput

    @property
    def harmonicfilteroutput(self):
        """Gets the harmonicfilteroutput of this SurfControlEquipVsd.  # noqa: E501


        :return: The harmonicfilteroutput of this SurfControlEquipVsd.  # noqa: E501
        :rtype: int
        """
        return self._harmonicfilteroutput

    @harmonicfilteroutput.setter
    def harmonicfilteroutput(self, harmonicfilteroutput):
        """Sets the harmonicfilteroutput of this SurfControlEquipVsd.


        :param harmonicfilteroutput: The harmonicfilteroutput of this SurfControlEquipVsd.  # noqa: E501
        :type: int
        """

        self._harmonicfilteroutput = harmonicfilteroutput

    @property
    def idrec(self):
        """Gets the idrec of this SurfControlEquipVsd.  # noqa: E501


        :return: The idrec of this SurfControlEquipVsd.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this SurfControlEquipVsd.


        :param idrec: The idrec of this SurfControlEquipVsd.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecparent(self):
        """Gets the idrecparent of this SurfControlEquipVsd.  # noqa: E501


        :return: The idrecparent of this SurfControlEquipVsd.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this SurfControlEquipVsd.


        :param idrecparent: The idrecparent of this SurfControlEquipVsd.  # noqa: E501
        :type: str
        """

        self._idrecparent = idrecparent

    @property
    def idwell(self):
        """Gets the idwell of this SurfControlEquipVsd.  # noqa: E501


        :return: The idwell of this SurfControlEquipVsd.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this SurfControlEquipVsd.


        :param idwell: The idwell of this SurfControlEquipVsd.  # noqa: E501
        :type: str
        """

        self._idwell = idwell

    @property
    def inputfreq(self):
        """Gets the inputfreq of this SurfControlEquipVsd.  # noqa: E501


        :return: The inputfreq of this SurfControlEquipVsd.  # noqa: E501
        :rtype: OneOfSurfControlEquipVsdInputfreq
        """
        return self._inputfreq

    @inputfreq.setter
    def inputfreq(self, inputfreq):
        """Sets the inputfreq of this SurfControlEquipVsd.


        :param inputfreq: The inputfreq of this SurfControlEquipVsd.  # noqa: E501
        :type: OneOfSurfControlEquipVsdInputfreq
        """

        self._inputfreq = inputfreq

    @property
    def kvarating(self):
        """Gets the kvarating of this SurfControlEquipVsd.  # noqa: E501


        :return: The kvarating of this SurfControlEquipVsd.  # noqa: E501
        :rtype: OneOfSurfControlEquipVsdKvarating
        """
        return self._kvarating

    @kvarating.setter
    def kvarating(self, kvarating):
        """Sets the kvarating of this SurfControlEquipVsd.


        :param kvarating: The kvarating of this SurfControlEquipVsd.  # noqa: E501
        :type: OneOfSurfControlEquipVsdKvarating
        """

        self._kvarating = kvarating

    @property
    def lowerfreq(self):
        """Gets the lowerfreq of this SurfControlEquipVsd.  # noqa: E501


        :return: The lowerfreq of this SurfControlEquipVsd.  # noqa: E501
        :rtype: OneOfSurfControlEquipVsdLowerfreq
        """
        return self._lowerfreq

    @lowerfreq.setter
    def lowerfreq(self, lowerfreq):
        """Sets the lowerfreq of this SurfControlEquipVsd.


        :param lowerfreq: The lowerfreq of this SurfControlEquipVsd.  # noqa: E501
        :type: OneOfSurfControlEquipVsdLowerfreq
        """

        self._lowerfreq = lowerfreq

    @property
    def mtrcontrollerdes(self):
        """Gets the mtrcontrollerdes of this SurfControlEquipVsd.  # noqa: E501


        :return: The mtrcontrollerdes of this SurfControlEquipVsd.  # noqa: E501
        :rtype: str
        """
        return self._mtrcontrollerdes

    @mtrcontrollerdes.setter
    def mtrcontrollerdes(self, mtrcontrollerdes):
        """Sets the mtrcontrollerdes of this SurfControlEquipVsd.


        :param mtrcontrollerdes: The mtrcontrollerdes of this SurfControlEquipVsd.  # noqa: E501
        :type: str
        """

        self._mtrcontrollerdes = mtrcontrollerdes

    @property
    def note(self):
        """Gets the note of this SurfControlEquipVsd.  # noqa: E501


        :return: The note of this SurfControlEquipVsd.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this SurfControlEquipVsd.


        :param note: The note of this SurfControlEquipVsd.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def ratioctfinal(self):
        """Gets the ratioctfinal of this SurfControlEquipVsd.  # noqa: E501


        :return: The ratioctfinal of this SurfControlEquipVsd.  # noqa: E501
        :rtype: str
        """
        return self._ratioctfinal

    @ratioctfinal.setter
    def ratioctfinal(self, ratioctfinal):
        """Sets the ratioctfinal of this SurfControlEquipVsd.


        :param ratioctfinal: The ratioctfinal of this SurfControlEquipVsd.  # noqa: E501
        :type: str
        """

        self._ratioctfinal = ratioctfinal

    @property
    def ratioctinitial(self):
        """Gets the ratioctinitial of this SurfControlEquipVsd.  # noqa: E501


        :return: The ratioctinitial of this SurfControlEquipVsd.  # noqa: E501
        :rtype: str
        """
        return self._ratioctinitial

    @ratioctinitial.setter
    def ratioctinitial(self, ratioctinitial):
        """Sets the ratioctinitial of this SurfControlEquipVsd.


        :param ratioctinitial: The ratioctinitial of this SurfControlEquipVsd.  # noqa: E501
        :type: str
        """

        self._ratioctinitial = ratioctinitial

    @property
    def surf_control_equip(self):
        """Gets the surf_control_equip of this SurfControlEquipVsd.  # noqa: E501


        :return: The surf_control_equip of this SurfControlEquipVsd.  # noqa: E501
        :rtype: AnyOfSurfControlEquipVsdSurfControlEquip
        """
        return self._surf_control_equip

    @surf_control_equip.setter
    def surf_control_equip(self, surf_control_equip):
        """Sets the surf_control_equip of this SurfControlEquipVsd.


        :param surf_control_equip: The surf_control_equip of this SurfControlEquipVsd.  # noqa: E501
        :type: AnyOfSurfControlEquipVsdSurfControlEquip
        """

        self._surf_control_equip = surf_control_equip

    @property
    def syscreatedate(self):
        """Gets the syscreatedate of this SurfControlEquipVsd.  # noqa: E501


        :return: The syscreatedate of this SurfControlEquipVsd.  # noqa: E501
        :rtype: datetime
        """
        return self._syscreatedate

    @syscreatedate.setter
    def syscreatedate(self, syscreatedate):
        """Sets the syscreatedate of this SurfControlEquipVsd.


        :param syscreatedate: The syscreatedate of this SurfControlEquipVsd.  # noqa: E501
        :type: datetime
        """

        self._syscreatedate = syscreatedate

    @property
    def syscreateuser(self):
        """Gets the syscreateuser of this SurfControlEquipVsd.  # noqa: E501


        :return: The syscreateuser of this SurfControlEquipVsd.  # noqa: E501
        :rtype: str
        """
        return self._syscreateuser

    @syscreateuser.setter
    def syscreateuser(self, syscreateuser):
        """Sets the syscreateuser of this SurfControlEquipVsd.


        :param syscreateuser: The syscreateuser of this SurfControlEquipVsd.  # noqa: E501
        :type: str
        """

        self._syscreateuser = syscreateuser

    @property
    def syslockchildren(self):
        """Gets the syslockchildren of this SurfControlEquipVsd.  # noqa: E501


        :return: The syslockchildren of this SurfControlEquipVsd.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildren

    @syslockchildren.setter
    def syslockchildren(self, syslockchildren):
        """Sets the syslockchildren of this SurfControlEquipVsd.


        :param syslockchildren: The syslockchildren of this SurfControlEquipVsd.  # noqa: E501
        :type: int
        """

        self._syslockchildren = syslockchildren

    @property
    def syslockchildrenui(self):
        """Gets the syslockchildrenui of this SurfControlEquipVsd.  # noqa: E501


        :return: The syslockchildrenui of this SurfControlEquipVsd.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildrenui

    @syslockchildrenui.setter
    def syslockchildrenui(self, syslockchildrenui):
        """Sets the syslockchildrenui of this SurfControlEquipVsd.


        :param syslockchildrenui: The syslockchildrenui of this SurfControlEquipVsd.  # noqa: E501
        :type: int
        """

        self._syslockchildrenui = syslockchildrenui

    @property
    def syslockdate(self):
        """Gets the syslockdate of this SurfControlEquipVsd.  # noqa: E501


        :return: The syslockdate of this SurfControlEquipVsd.  # noqa: E501
        :rtype: datetime
        """
        return self._syslockdate

    @syslockdate.setter
    def syslockdate(self, syslockdate):
        """Sets the syslockdate of this SurfControlEquipVsd.


        :param syslockdate: The syslockdate of this SurfControlEquipVsd.  # noqa: E501
        :type: datetime
        """

        self._syslockdate = syslockdate

    @property
    def syslockme(self):
        """Gets the syslockme of this SurfControlEquipVsd.  # noqa: E501


        :return: The syslockme of this SurfControlEquipVsd.  # noqa: E501
        :rtype: int
        """
        return self._syslockme

    @syslockme.setter
    def syslockme(self, syslockme):
        """Sets the syslockme of this SurfControlEquipVsd.


        :param syslockme: The syslockme of this SurfControlEquipVsd.  # noqa: E501
        :type: int
        """

        self._syslockme = syslockme

    @property
    def syslockmeui(self):
        """Gets the syslockmeui of this SurfControlEquipVsd.  # noqa: E501


        :return: The syslockmeui of this SurfControlEquipVsd.  # noqa: E501
        :rtype: int
        """
        return self._syslockmeui

    @syslockmeui.setter
    def syslockmeui(self, syslockmeui):
        """Sets the syslockmeui of this SurfControlEquipVsd.


        :param syslockmeui: The syslockmeui of this SurfControlEquipVsd.  # noqa: E501
        :type: int
        """

        self._syslockmeui = syslockmeui

    @property
    def sysmoddate(self):
        """Gets the sysmoddate of this SurfControlEquipVsd.  # noqa: E501


        :return: The sysmoddate of this SurfControlEquipVsd.  # noqa: E501
        :rtype: datetime
        """
        return self._sysmoddate

    @sysmoddate.setter
    def sysmoddate(self, sysmoddate):
        """Sets the sysmoddate of this SurfControlEquipVsd.


        :param sysmoddate: The sysmoddate of this SurfControlEquipVsd.  # noqa: E501
        :type: datetime
        """

        self._sysmoddate = sysmoddate

    @property
    def sysmoduser(self):
        """Gets the sysmoduser of this SurfControlEquipVsd.  # noqa: E501


        :return: The sysmoduser of this SurfControlEquipVsd.  # noqa: E501
        :rtype: str
        """
        return self._sysmoduser

    @sysmoduser.setter
    def sysmoduser(self, sysmoduser):
        """Sets the sysmoduser of this SurfControlEquipVsd.


        :param sysmoduser: The sysmoduser of this SurfControlEquipVsd.  # noqa: E501
        :type: str
        """

        self._sysmoduser = sysmoduser

    @property
    def systag(self):
        """Gets the systag of this SurfControlEquipVsd.  # noqa: E501


        :return: The systag of this SurfControlEquipVsd.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this SurfControlEquipVsd.


        :param systag: The systag of this SurfControlEquipVsd.  # noqa: E501
        :type: str
        """

        self._systag = systag

    @property
    def tvssdes(self):
        """Gets the tvssdes of this SurfControlEquipVsd.  # noqa: E501


        :return: The tvssdes of this SurfControlEquipVsd.  # noqa: E501
        :rtype: str
        """
        return self._tvssdes

    @tvssdes.setter
    def tvssdes(self, tvssdes):
        """Sets the tvssdes of this SurfControlEquipVsd.


        :param tvssdes: The tvssdes of this SurfControlEquipVsd.  # noqa: E501
        :type: str
        """

        self._tvssdes = tvssdes

    @property
    def tvssinstalled(self):
        """Gets the tvssinstalled of this SurfControlEquipVsd.  # noqa: E501


        :return: The tvssinstalled of this SurfControlEquipVsd.  # noqa: E501
        :rtype: int
        """
        return self._tvssinstalled

    @tvssinstalled.setter
    def tvssinstalled(self, tvssinstalled):
        """Sets the tvssinstalled of this SurfControlEquipVsd.


        :param tvssinstalled: The tvssinstalled of this SurfControlEquipVsd.  # noqa: E501
        :type: int
        """

        self._tvssinstalled = tvssinstalled

    @property
    def upperfreq(self):
        """Gets the upperfreq of this SurfControlEquipVsd.  # noqa: E501


        :return: The upperfreq of this SurfControlEquipVsd.  # noqa: E501
        :rtype: OneOfSurfControlEquipVsdUpperfreq
        """
        return self._upperfreq

    @upperfreq.setter
    def upperfreq(self, upperfreq):
        """Sets the upperfreq of this SurfControlEquipVsd.


        :param upperfreq: The upperfreq of this SurfControlEquipVsd.  # noqa: E501
        :type: OneOfSurfControlEquipVsdUpperfreq
        """

        self._upperfreq = upperfreq

    @property
    def voltageinput(self):
        """Gets the voltageinput of this SurfControlEquipVsd.  # noqa: E501


        :return: The voltageinput of this SurfControlEquipVsd.  # noqa: E501
        :rtype: OneOfSurfControlEquipVsdVoltageinput
        """
        return self._voltageinput

    @voltageinput.setter
    def voltageinput(self, voltageinput):
        """Sets the voltageinput of this SurfControlEquipVsd.


        :param voltageinput: The voltageinput of this SurfControlEquipVsd.  # noqa: E501
        :type: OneOfSurfControlEquipVsdVoltageinput
        """

        self._voltageinput = voltageinput

    @property
    def voltageoutput(self):
        """Gets the voltageoutput of this SurfControlEquipVsd.  # noqa: E501


        :return: The voltageoutput of this SurfControlEquipVsd.  # noqa: E501
        :rtype: OneOfSurfControlEquipVsdVoltageoutput
        """
        return self._voltageoutput

    @voltageoutput.setter
    def voltageoutput(self, voltageoutput):
        """Sets the voltageoutput of this SurfControlEquipVsd.


        :param voltageoutput: The voltageoutput of this SurfControlEquipVsd.  # noqa: E501
        :type: OneOfSurfControlEquipVsdVoltageoutput
        """

        self._voltageoutput = voltageoutput

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SurfControlEquipVsd, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SurfControlEquipVsd):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
