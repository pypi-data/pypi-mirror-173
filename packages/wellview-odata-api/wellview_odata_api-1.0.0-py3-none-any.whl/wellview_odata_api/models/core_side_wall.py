# coding: utf-8

"""
    OData Service for namespace Default

    This OData service is located at http://localhost  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CoreSideWall(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bulletsfire': 'int',
        'bulletsmisfire': 'int',
        'com': 'str',
        'contractor': 'str',
        'core_side_wall_samples': 'list[CoreSideWallSample]',
        'des': 'str',
        'dttm': 'datetime',
        'idrec': 'str',
        'idrecdrillstringcomp': 'str',
        'idrecdrillstringcomptk': 'str',
        'idrecgeoeval': 'str',
        'idrecgeoevaltk': 'str',
        'idrecjob': 'str',
        'idrecjobtk': 'str',
        'idreclog': 'str',
        'idreclogtk': 'str',
        'idrecwellbore': 'str',
        'idrecwellboretk': 'str',
        'idwell': 'str',
        'proposed': 'int',
        'purpose': 'str',
        'runno': 'str',
        'samplesempty': 'int',
        'sampleslostinhole': 'int',
        'samplesplan': 'int',
        'samplesrecover': 'int',
        'syscreatedate': 'datetime',
        'syscreateuser': 'str',
        'syslockchildren': 'int',
        'syslockchildrenui': 'int',
        'syslockdate': 'datetime',
        'syslockme': 'int',
        'syslockmeui': 'int',
        'sysmoddate': 'datetime',
        'sysmoduser': 'str',
        'systag': 'str',
        'szdiacore': 'OneOfCoreSideWallSzdiacore',
        'typ': 'str'
    }

    attribute_map = {
        'bulletsfire': 'bulletsfire',
        'bulletsmisfire': 'bulletsmisfire',
        'com': 'com',
        'contractor': 'contractor',
        'core_side_wall_samples': 'coreSideWallSamples',
        'des': 'des',
        'dttm': 'dttm',
        'idrec': 'idrec',
        'idrecdrillstringcomp': 'idrecdrillstringcomp',
        'idrecdrillstringcomptk': 'idrecdrillstringcomptk',
        'idrecgeoeval': 'idrecgeoeval',
        'idrecgeoevaltk': 'idrecgeoevaltk',
        'idrecjob': 'idrecjob',
        'idrecjobtk': 'idrecjobtk',
        'idreclog': 'idreclog',
        'idreclogtk': 'idreclogtk',
        'idrecwellbore': 'idrecwellbore',
        'idrecwellboretk': 'idrecwellboretk',
        'idwell': 'idwell',
        'proposed': 'proposed',
        'purpose': 'purpose',
        'runno': 'runno',
        'samplesempty': 'samplesempty',
        'sampleslostinhole': 'sampleslostinhole',
        'samplesplan': 'samplesplan',
        'samplesrecover': 'samplesrecover',
        'syscreatedate': 'syscreatedate',
        'syscreateuser': 'syscreateuser',
        'syslockchildren': 'syslockchildren',
        'syslockchildrenui': 'syslockchildrenui',
        'syslockdate': 'syslockdate',
        'syslockme': 'syslockme',
        'syslockmeui': 'syslockmeui',
        'sysmoddate': 'sysmoddate',
        'sysmoduser': 'sysmoduser',
        'systag': 'systag',
        'szdiacore': 'szdiacore',
        'typ': 'typ'
    }

    def __init__(self, bulletsfire=None, bulletsmisfire=None, com=None, contractor=None, core_side_wall_samples=None, des=None, dttm=None, idrec=None, idrecdrillstringcomp=None, idrecdrillstringcomptk=None, idrecgeoeval=None, idrecgeoevaltk=None, idrecjob=None, idrecjobtk=None, idreclog=None, idreclogtk=None, idrecwellbore=None, idrecwellboretk=None, idwell=None, proposed=None, purpose=None, runno=None, samplesempty=None, sampleslostinhole=None, samplesplan=None, samplesrecover=None, syscreatedate=None, syscreateuser=None, syslockchildren=None, syslockchildrenui=None, syslockdate=None, syslockme=None, syslockmeui=None, sysmoddate=None, sysmoduser=None, systag=None, szdiacore=None, typ=None):  # noqa: E501
        """CoreSideWall - a model defined in Swagger"""  # noqa: E501
        self._bulletsfire = None
        self._bulletsmisfire = None
        self._com = None
        self._contractor = None
        self._core_side_wall_samples = None
        self._des = None
        self._dttm = None
        self._idrec = None
        self._idrecdrillstringcomp = None
        self._idrecdrillstringcomptk = None
        self._idrecgeoeval = None
        self._idrecgeoevaltk = None
        self._idrecjob = None
        self._idrecjobtk = None
        self._idreclog = None
        self._idreclogtk = None
        self._idrecwellbore = None
        self._idrecwellboretk = None
        self._idwell = None
        self._proposed = None
        self._purpose = None
        self._runno = None
        self._samplesempty = None
        self._sampleslostinhole = None
        self._samplesplan = None
        self._samplesrecover = None
        self._syscreatedate = None
        self._syscreateuser = None
        self._syslockchildren = None
        self._syslockchildrenui = None
        self._syslockdate = None
        self._syslockme = None
        self._syslockmeui = None
        self._sysmoddate = None
        self._sysmoduser = None
        self._systag = None
        self._szdiacore = None
        self._typ = None
        self.discriminator = None
        if bulletsfire is not None:
            self.bulletsfire = bulletsfire
        if bulletsmisfire is not None:
            self.bulletsmisfire = bulletsmisfire
        if com is not None:
            self.com = com
        if contractor is not None:
            self.contractor = contractor
        if core_side_wall_samples is not None:
            self.core_side_wall_samples = core_side_wall_samples
        if des is not None:
            self.des = des
        if dttm is not None:
            self.dttm = dttm
        if idrec is not None:
            self.idrec = idrec
        if idrecdrillstringcomp is not None:
            self.idrecdrillstringcomp = idrecdrillstringcomp
        if idrecdrillstringcomptk is not None:
            self.idrecdrillstringcomptk = idrecdrillstringcomptk
        if idrecgeoeval is not None:
            self.idrecgeoeval = idrecgeoeval
        if idrecgeoevaltk is not None:
            self.idrecgeoevaltk = idrecgeoevaltk
        if idrecjob is not None:
            self.idrecjob = idrecjob
        if idrecjobtk is not None:
            self.idrecjobtk = idrecjobtk
        if idreclog is not None:
            self.idreclog = idreclog
        if idreclogtk is not None:
            self.idreclogtk = idreclogtk
        if idrecwellbore is not None:
            self.idrecwellbore = idrecwellbore
        if idrecwellboretk is not None:
            self.idrecwellboretk = idrecwellboretk
        if idwell is not None:
            self.idwell = idwell
        if proposed is not None:
            self.proposed = proposed
        if purpose is not None:
            self.purpose = purpose
        if runno is not None:
            self.runno = runno
        if samplesempty is not None:
            self.samplesempty = samplesempty
        if sampleslostinhole is not None:
            self.sampleslostinhole = sampleslostinhole
        if samplesplan is not None:
            self.samplesplan = samplesplan
        if samplesrecover is not None:
            self.samplesrecover = samplesrecover
        if syscreatedate is not None:
            self.syscreatedate = syscreatedate
        if syscreateuser is not None:
            self.syscreateuser = syscreateuser
        if syslockchildren is not None:
            self.syslockchildren = syslockchildren
        if syslockchildrenui is not None:
            self.syslockchildrenui = syslockchildrenui
        if syslockdate is not None:
            self.syslockdate = syslockdate
        if syslockme is not None:
            self.syslockme = syslockme
        if syslockmeui is not None:
            self.syslockmeui = syslockmeui
        if sysmoddate is not None:
            self.sysmoddate = sysmoddate
        if sysmoduser is not None:
            self.sysmoduser = sysmoduser
        if systag is not None:
            self.systag = systag
        if szdiacore is not None:
            self.szdiacore = szdiacore
        if typ is not None:
            self.typ = typ

    @property
    def bulletsfire(self):
        """Gets the bulletsfire of this CoreSideWall.  # noqa: E501


        :return: The bulletsfire of this CoreSideWall.  # noqa: E501
        :rtype: int
        """
        return self._bulletsfire

    @bulletsfire.setter
    def bulletsfire(self, bulletsfire):
        """Sets the bulletsfire of this CoreSideWall.


        :param bulletsfire: The bulletsfire of this CoreSideWall.  # noqa: E501
        :type: int
        """

        self._bulletsfire = bulletsfire

    @property
    def bulletsmisfire(self):
        """Gets the bulletsmisfire of this CoreSideWall.  # noqa: E501


        :return: The bulletsmisfire of this CoreSideWall.  # noqa: E501
        :rtype: int
        """
        return self._bulletsmisfire

    @bulletsmisfire.setter
    def bulletsmisfire(self, bulletsmisfire):
        """Sets the bulletsmisfire of this CoreSideWall.


        :param bulletsmisfire: The bulletsmisfire of this CoreSideWall.  # noqa: E501
        :type: int
        """

        self._bulletsmisfire = bulletsmisfire

    @property
    def com(self):
        """Gets the com of this CoreSideWall.  # noqa: E501


        :return: The com of this CoreSideWall.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this CoreSideWall.


        :param com: The com of this CoreSideWall.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def contractor(self):
        """Gets the contractor of this CoreSideWall.  # noqa: E501


        :return: The contractor of this CoreSideWall.  # noqa: E501
        :rtype: str
        """
        return self._contractor

    @contractor.setter
    def contractor(self, contractor):
        """Sets the contractor of this CoreSideWall.


        :param contractor: The contractor of this CoreSideWall.  # noqa: E501
        :type: str
        """

        self._contractor = contractor

    @property
    def core_side_wall_samples(self):
        """Gets the core_side_wall_samples of this CoreSideWall.  # noqa: E501


        :return: The core_side_wall_samples of this CoreSideWall.  # noqa: E501
        :rtype: list[CoreSideWallSample]
        """
        return self._core_side_wall_samples

    @core_side_wall_samples.setter
    def core_side_wall_samples(self, core_side_wall_samples):
        """Sets the core_side_wall_samples of this CoreSideWall.


        :param core_side_wall_samples: The core_side_wall_samples of this CoreSideWall.  # noqa: E501
        :type: list[CoreSideWallSample]
        """

        self._core_side_wall_samples = core_side_wall_samples

    @property
    def des(self):
        """Gets the des of this CoreSideWall.  # noqa: E501


        :return: The des of this CoreSideWall.  # noqa: E501
        :rtype: str
        """
        return self._des

    @des.setter
    def des(self, des):
        """Sets the des of this CoreSideWall.


        :param des: The des of this CoreSideWall.  # noqa: E501
        :type: str
        """

        self._des = des

    @property
    def dttm(self):
        """Gets the dttm of this CoreSideWall.  # noqa: E501


        :return: The dttm of this CoreSideWall.  # noqa: E501
        :rtype: datetime
        """
        return self._dttm

    @dttm.setter
    def dttm(self, dttm):
        """Sets the dttm of this CoreSideWall.


        :param dttm: The dttm of this CoreSideWall.  # noqa: E501
        :type: datetime
        """

        self._dttm = dttm

    @property
    def idrec(self):
        """Gets the idrec of this CoreSideWall.  # noqa: E501


        :return: The idrec of this CoreSideWall.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this CoreSideWall.


        :param idrec: The idrec of this CoreSideWall.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecdrillstringcomp(self):
        """Gets the idrecdrillstringcomp of this CoreSideWall.  # noqa: E501


        :return: The idrecdrillstringcomp of this CoreSideWall.  # noqa: E501
        :rtype: str
        """
        return self._idrecdrillstringcomp

    @idrecdrillstringcomp.setter
    def idrecdrillstringcomp(self, idrecdrillstringcomp):
        """Sets the idrecdrillstringcomp of this CoreSideWall.


        :param idrecdrillstringcomp: The idrecdrillstringcomp of this CoreSideWall.  # noqa: E501
        :type: str
        """

        self._idrecdrillstringcomp = idrecdrillstringcomp

    @property
    def idrecdrillstringcomptk(self):
        """Gets the idrecdrillstringcomptk of this CoreSideWall.  # noqa: E501


        :return: The idrecdrillstringcomptk of this CoreSideWall.  # noqa: E501
        :rtype: str
        """
        return self._idrecdrillstringcomptk

    @idrecdrillstringcomptk.setter
    def idrecdrillstringcomptk(self, idrecdrillstringcomptk):
        """Sets the idrecdrillstringcomptk of this CoreSideWall.


        :param idrecdrillstringcomptk: The idrecdrillstringcomptk of this CoreSideWall.  # noqa: E501
        :type: str
        """

        self._idrecdrillstringcomptk = idrecdrillstringcomptk

    @property
    def idrecgeoeval(self):
        """Gets the idrecgeoeval of this CoreSideWall.  # noqa: E501


        :return: The idrecgeoeval of this CoreSideWall.  # noqa: E501
        :rtype: str
        """
        return self._idrecgeoeval

    @idrecgeoeval.setter
    def idrecgeoeval(self, idrecgeoeval):
        """Sets the idrecgeoeval of this CoreSideWall.


        :param idrecgeoeval: The idrecgeoeval of this CoreSideWall.  # noqa: E501
        :type: str
        """

        self._idrecgeoeval = idrecgeoeval

    @property
    def idrecgeoevaltk(self):
        """Gets the idrecgeoevaltk of this CoreSideWall.  # noqa: E501


        :return: The idrecgeoevaltk of this CoreSideWall.  # noqa: E501
        :rtype: str
        """
        return self._idrecgeoevaltk

    @idrecgeoevaltk.setter
    def idrecgeoevaltk(self, idrecgeoevaltk):
        """Sets the idrecgeoevaltk of this CoreSideWall.


        :param idrecgeoevaltk: The idrecgeoevaltk of this CoreSideWall.  # noqa: E501
        :type: str
        """

        self._idrecgeoevaltk = idrecgeoevaltk

    @property
    def idrecjob(self):
        """Gets the idrecjob of this CoreSideWall.  # noqa: E501


        :return: The idrecjob of this CoreSideWall.  # noqa: E501
        :rtype: str
        """
        return self._idrecjob

    @idrecjob.setter
    def idrecjob(self, idrecjob):
        """Sets the idrecjob of this CoreSideWall.


        :param idrecjob: The idrecjob of this CoreSideWall.  # noqa: E501
        :type: str
        """

        self._idrecjob = idrecjob

    @property
    def idrecjobtk(self):
        """Gets the idrecjobtk of this CoreSideWall.  # noqa: E501


        :return: The idrecjobtk of this CoreSideWall.  # noqa: E501
        :rtype: str
        """
        return self._idrecjobtk

    @idrecjobtk.setter
    def idrecjobtk(self, idrecjobtk):
        """Sets the idrecjobtk of this CoreSideWall.


        :param idrecjobtk: The idrecjobtk of this CoreSideWall.  # noqa: E501
        :type: str
        """

        self._idrecjobtk = idrecjobtk

    @property
    def idreclog(self):
        """Gets the idreclog of this CoreSideWall.  # noqa: E501


        :return: The idreclog of this CoreSideWall.  # noqa: E501
        :rtype: str
        """
        return self._idreclog

    @idreclog.setter
    def idreclog(self, idreclog):
        """Sets the idreclog of this CoreSideWall.


        :param idreclog: The idreclog of this CoreSideWall.  # noqa: E501
        :type: str
        """

        self._idreclog = idreclog

    @property
    def idreclogtk(self):
        """Gets the idreclogtk of this CoreSideWall.  # noqa: E501


        :return: The idreclogtk of this CoreSideWall.  # noqa: E501
        :rtype: str
        """
        return self._idreclogtk

    @idreclogtk.setter
    def idreclogtk(self, idreclogtk):
        """Sets the idreclogtk of this CoreSideWall.


        :param idreclogtk: The idreclogtk of this CoreSideWall.  # noqa: E501
        :type: str
        """

        self._idreclogtk = idreclogtk

    @property
    def idrecwellbore(self):
        """Gets the idrecwellbore of this CoreSideWall.  # noqa: E501


        :return: The idrecwellbore of this CoreSideWall.  # noqa: E501
        :rtype: str
        """
        return self._idrecwellbore

    @idrecwellbore.setter
    def idrecwellbore(self, idrecwellbore):
        """Sets the idrecwellbore of this CoreSideWall.


        :param idrecwellbore: The idrecwellbore of this CoreSideWall.  # noqa: E501
        :type: str
        """

        self._idrecwellbore = idrecwellbore

    @property
    def idrecwellboretk(self):
        """Gets the idrecwellboretk of this CoreSideWall.  # noqa: E501


        :return: The idrecwellboretk of this CoreSideWall.  # noqa: E501
        :rtype: str
        """
        return self._idrecwellboretk

    @idrecwellboretk.setter
    def idrecwellboretk(self, idrecwellboretk):
        """Sets the idrecwellboretk of this CoreSideWall.


        :param idrecwellboretk: The idrecwellboretk of this CoreSideWall.  # noqa: E501
        :type: str
        """

        self._idrecwellboretk = idrecwellboretk

    @property
    def idwell(self):
        """Gets the idwell of this CoreSideWall.  # noqa: E501


        :return: The idwell of this CoreSideWall.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this CoreSideWall.


        :param idwell: The idwell of this CoreSideWall.  # noqa: E501
        :type: str
        """

        self._idwell = idwell

    @property
    def proposed(self):
        """Gets the proposed of this CoreSideWall.  # noqa: E501


        :return: The proposed of this CoreSideWall.  # noqa: E501
        :rtype: int
        """
        return self._proposed

    @proposed.setter
    def proposed(self, proposed):
        """Sets the proposed of this CoreSideWall.


        :param proposed: The proposed of this CoreSideWall.  # noqa: E501
        :type: int
        """

        self._proposed = proposed

    @property
    def purpose(self):
        """Gets the purpose of this CoreSideWall.  # noqa: E501


        :return: The purpose of this CoreSideWall.  # noqa: E501
        :rtype: str
        """
        return self._purpose

    @purpose.setter
    def purpose(self, purpose):
        """Sets the purpose of this CoreSideWall.


        :param purpose: The purpose of this CoreSideWall.  # noqa: E501
        :type: str
        """

        self._purpose = purpose

    @property
    def runno(self):
        """Gets the runno of this CoreSideWall.  # noqa: E501


        :return: The runno of this CoreSideWall.  # noqa: E501
        :rtype: str
        """
        return self._runno

    @runno.setter
    def runno(self, runno):
        """Sets the runno of this CoreSideWall.


        :param runno: The runno of this CoreSideWall.  # noqa: E501
        :type: str
        """

        self._runno = runno

    @property
    def samplesempty(self):
        """Gets the samplesempty of this CoreSideWall.  # noqa: E501


        :return: The samplesempty of this CoreSideWall.  # noqa: E501
        :rtype: int
        """
        return self._samplesempty

    @samplesempty.setter
    def samplesempty(self, samplesempty):
        """Sets the samplesempty of this CoreSideWall.


        :param samplesempty: The samplesempty of this CoreSideWall.  # noqa: E501
        :type: int
        """

        self._samplesempty = samplesempty

    @property
    def sampleslostinhole(self):
        """Gets the sampleslostinhole of this CoreSideWall.  # noqa: E501


        :return: The sampleslostinhole of this CoreSideWall.  # noqa: E501
        :rtype: int
        """
        return self._sampleslostinhole

    @sampleslostinhole.setter
    def sampleslostinhole(self, sampleslostinhole):
        """Sets the sampleslostinhole of this CoreSideWall.


        :param sampleslostinhole: The sampleslostinhole of this CoreSideWall.  # noqa: E501
        :type: int
        """

        self._sampleslostinhole = sampleslostinhole

    @property
    def samplesplan(self):
        """Gets the samplesplan of this CoreSideWall.  # noqa: E501


        :return: The samplesplan of this CoreSideWall.  # noqa: E501
        :rtype: int
        """
        return self._samplesplan

    @samplesplan.setter
    def samplesplan(self, samplesplan):
        """Sets the samplesplan of this CoreSideWall.


        :param samplesplan: The samplesplan of this CoreSideWall.  # noqa: E501
        :type: int
        """

        self._samplesplan = samplesplan

    @property
    def samplesrecover(self):
        """Gets the samplesrecover of this CoreSideWall.  # noqa: E501


        :return: The samplesrecover of this CoreSideWall.  # noqa: E501
        :rtype: int
        """
        return self._samplesrecover

    @samplesrecover.setter
    def samplesrecover(self, samplesrecover):
        """Sets the samplesrecover of this CoreSideWall.


        :param samplesrecover: The samplesrecover of this CoreSideWall.  # noqa: E501
        :type: int
        """

        self._samplesrecover = samplesrecover

    @property
    def syscreatedate(self):
        """Gets the syscreatedate of this CoreSideWall.  # noqa: E501


        :return: The syscreatedate of this CoreSideWall.  # noqa: E501
        :rtype: datetime
        """
        return self._syscreatedate

    @syscreatedate.setter
    def syscreatedate(self, syscreatedate):
        """Sets the syscreatedate of this CoreSideWall.


        :param syscreatedate: The syscreatedate of this CoreSideWall.  # noqa: E501
        :type: datetime
        """

        self._syscreatedate = syscreatedate

    @property
    def syscreateuser(self):
        """Gets the syscreateuser of this CoreSideWall.  # noqa: E501


        :return: The syscreateuser of this CoreSideWall.  # noqa: E501
        :rtype: str
        """
        return self._syscreateuser

    @syscreateuser.setter
    def syscreateuser(self, syscreateuser):
        """Sets the syscreateuser of this CoreSideWall.


        :param syscreateuser: The syscreateuser of this CoreSideWall.  # noqa: E501
        :type: str
        """

        self._syscreateuser = syscreateuser

    @property
    def syslockchildren(self):
        """Gets the syslockchildren of this CoreSideWall.  # noqa: E501


        :return: The syslockchildren of this CoreSideWall.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildren

    @syslockchildren.setter
    def syslockchildren(self, syslockchildren):
        """Sets the syslockchildren of this CoreSideWall.


        :param syslockchildren: The syslockchildren of this CoreSideWall.  # noqa: E501
        :type: int
        """

        self._syslockchildren = syslockchildren

    @property
    def syslockchildrenui(self):
        """Gets the syslockchildrenui of this CoreSideWall.  # noqa: E501


        :return: The syslockchildrenui of this CoreSideWall.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildrenui

    @syslockchildrenui.setter
    def syslockchildrenui(self, syslockchildrenui):
        """Sets the syslockchildrenui of this CoreSideWall.


        :param syslockchildrenui: The syslockchildrenui of this CoreSideWall.  # noqa: E501
        :type: int
        """

        self._syslockchildrenui = syslockchildrenui

    @property
    def syslockdate(self):
        """Gets the syslockdate of this CoreSideWall.  # noqa: E501


        :return: The syslockdate of this CoreSideWall.  # noqa: E501
        :rtype: datetime
        """
        return self._syslockdate

    @syslockdate.setter
    def syslockdate(self, syslockdate):
        """Sets the syslockdate of this CoreSideWall.


        :param syslockdate: The syslockdate of this CoreSideWall.  # noqa: E501
        :type: datetime
        """

        self._syslockdate = syslockdate

    @property
    def syslockme(self):
        """Gets the syslockme of this CoreSideWall.  # noqa: E501


        :return: The syslockme of this CoreSideWall.  # noqa: E501
        :rtype: int
        """
        return self._syslockme

    @syslockme.setter
    def syslockme(self, syslockme):
        """Sets the syslockme of this CoreSideWall.


        :param syslockme: The syslockme of this CoreSideWall.  # noqa: E501
        :type: int
        """

        self._syslockme = syslockme

    @property
    def syslockmeui(self):
        """Gets the syslockmeui of this CoreSideWall.  # noqa: E501


        :return: The syslockmeui of this CoreSideWall.  # noqa: E501
        :rtype: int
        """
        return self._syslockmeui

    @syslockmeui.setter
    def syslockmeui(self, syslockmeui):
        """Sets the syslockmeui of this CoreSideWall.


        :param syslockmeui: The syslockmeui of this CoreSideWall.  # noqa: E501
        :type: int
        """

        self._syslockmeui = syslockmeui

    @property
    def sysmoddate(self):
        """Gets the sysmoddate of this CoreSideWall.  # noqa: E501


        :return: The sysmoddate of this CoreSideWall.  # noqa: E501
        :rtype: datetime
        """
        return self._sysmoddate

    @sysmoddate.setter
    def sysmoddate(self, sysmoddate):
        """Sets the sysmoddate of this CoreSideWall.


        :param sysmoddate: The sysmoddate of this CoreSideWall.  # noqa: E501
        :type: datetime
        """

        self._sysmoddate = sysmoddate

    @property
    def sysmoduser(self):
        """Gets the sysmoduser of this CoreSideWall.  # noqa: E501


        :return: The sysmoduser of this CoreSideWall.  # noqa: E501
        :rtype: str
        """
        return self._sysmoduser

    @sysmoduser.setter
    def sysmoduser(self, sysmoduser):
        """Sets the sysmoduser of this CoreSideWall.


        :param sysmoduser: The sysmoduser of this CoreSideWall.  # noqa: E501
        :type: str
        """

        self._sysmoduser = sysmoduser

    @property
    def systag(self):
        """Gets the systag of this CoreSideWall.  # noqa: E501


        :return: The systag of this CoreSideWall.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this CoreSideWall.


        :param systag: The systag of this CoreSideWall.  # noqa: E501
        :type: str
        """

        self._systag = systag

    @property
    def szdiacore(self):
        """Gets the szdiacore of this CoreSideWall.  # noqa: E501


        :return: The szdiacore of this CoreSideWall.  # noqa: E501
        :rtype: OneOfCoreSideWallSzdiacore
        """
        return self._szdiacore

    @szdiacore.setter
    def szdiacore(self, szdiacore):
        """Sets the szdiacore of this CoreSideWall.


        :param szdiacore: The szdiacore of this CoreSideWall.  # noqa: E501
        :type: OneOfCoreSideWallSzdiacore
        """

        self._szdiacore = szdiacore

    @property
    def typ(self):
        """Gets the typ of this CoreSideWall.  # noqa: E501


        :return: The typ of this CoreSideWall.  # noqa: E501
        :rtype: str
        """
        return self._typ

    @typ.setter
    def typ(self, typ):
        """Sets the typ of this CoreSideWall.


        :param typ: The typ of this CoreSideWall.  # noqa: E501
        :type: str
        """

        self._typ = typ

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CoreSideWall, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CoreSideWall):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
