# coding: utf-8

"""
    OData Service for namespace Default

    This OData service is located at http://localhost  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class JobKick(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'depthend': 'OneOfJobKickDepthend',
        'depthstart': 'OneOfJobKickDepthstart',
        'depthtvdendcalc': 'OneOfJobKickDepthtvdendcalc',
        'depthtvdstartcalc': 'OneOfJobKickDepthtvdstartcalc',
        'dttmend': 'datetime',
        'dttmstart': 'datetime',
        'fluiddes': 'str',
        'idrec': 'str',
        'idrecjobprogramphasecalc': 'str',
        'idrecjobprogramphasecalctk': 'str',
        'idrecparent': 'str',
        'idrecwellbore': 'str',
        'idrecwellboretk': 'str',
        'idwell': 'str',
        'inikickheight': 'OneOfJobKickInikickheight',
        'job': 'AnyOfJobKickJob',
        'job_kick_actions': 'list[JobKickAction]',
        'job_kick_causes': 'list[JobKickCause]',
        'job_kick_pres': 'list[JobKickPres]',
        'kickclass': 'str',
        'kickindicator': 'str',
        'killprocedure': 'str',
        'muddensityaftercalc': 'OneOfJobKickMuddensityaftercalc',
        'muddensitybeforecalc': 'OneOfJobKickMuddensitybeforecalc',
        'opsinprog': 'str',
        'prespump': 'OneOfJobKickPrespump',
        'pressic': 'OneOfJobKickPressic',
        'pressidp': 'OneOfJobKickPressidp',
        'ratepump': 'OneOfJobKickRatepump',
        'syscreatedate': 'datetime',
        'syscreateuser': 'str',
        'syslockchildren': 'int',
        'syslockchildrenui': 'int',
        'syslockdate': 'datetime',
        'syslockme': 'int',
        'syslockmeui': 'int',
        'sysmoddate': 'datetime',
        'sysmoduser': 'str',
        'systag': 'str',
        'typ1': 'str',
        'typ2': 'str',
        'volkick': 'OneOfJobKickVolkick'
    }

    attribute_map = {
        'depthend': 'depthend',
        'depthstart': 'depthstart',
        'depthtvdendcalc': 'depthtvdendcalc',
        'depthtvdstartcalc': 'depthtvdstartcalc',
        'dttmend': 'dttmend',
        'dttmstart': 'dttmstart',
        'fluiddes': 'fluiddes',
        'idrec': 'idrec',
        'idrecjobprogramphasecalc': 'idrecjobprogramphasecalc',
        'idrecjobprogramphasecalctk': 'idrecjobprogramphasecalctk',
        'idrecparent': 'idrecparent',
        'idrecwellbore': 'idrecwellbore',
        'idrecwellboretk': 'idrecwellboretk',
        'idwell': 'idwell',
        'inikickheight': 'inikickheight',
        'job': 'job',
        'job_kick_actions': 'jobKickActions',
        'job_kick_causes': 'jobKickCauses',
        'job_kick_pres': 'jobKickPres',
        'kickclass': 'kickclass',
        'kickindicator': 'kickindicator',
        'killprocedure': 'killprocedure',
        'muddensityaftercalc': 'muddensityaftercalc',
        'muddensitybeforecalc': 'muddensitybeforecalc',
        'opsinprog': 'opsinprog',
        'prespump': 'prespump',
        'pressic': 'pressic',
        'pressidp': 'pressidp',
        'ratepump': 'ratepump',
        'syscreatedate': 'syscreatedate',
        'syscreateuser': 'syscreateuser',
        'syslockchildren': 'syslockchildren',
        'syslockchildrenui': 'syslockchildrenui',
        'syslockdate': 'syslockdate',
        'syslockme': 'syslockme',
        'syslockmeui': 'syslockmeui',
        'sysmoddate': 'sysmoddate',
        'sysmoduser': 'sysmoduser',
        'systag': 'systag',
        'typ1': 'typ1',
        'typ2': 'typ2',
        'volkick': 'volkick'
    }

    def __init__(self, depthend=None, depthstart=None, depthtvdendcalc=None, depthtvdstartcalc=None, dttmend=None, dttmstart=None, fluiddes=None, idrec=None, idrecjobprogramphasecalc=None, idrecjobprogramphasecalctk=None, idrecparent=None, idrecwellbore=None, idrecwellboretk=None, idwell=None, inikickheight=None, job=None, job_kick_actions=None, job_kick_causes=None, job_kick_pres=None, kickclass=None, kickindicator=None, killprocedure=None, muddensityaftercalc=None, muddensitybeforecalc=None, opsinprog=None, prespump=None, pressic=None, pressidp=None, ratepump=None, syscreatedate=None, syscreateuser=None, syslockchildren=None, syslockchildrenui=None, syslockdate=None, syslockme=None, syslockmeui=None, sysmoddate=None, sysmoduser=None, systag=None, typ1=None, typ2=None, volkick=None):  # noqa: E501
        """JobKick - a model defined in Swagger"""  # noqa: E501
        self._depthend = None
        self._depthstart = None
        self._depthtvdendcalc = None
        self._depthtvdstartcalc = None
        self._dttmend = None
        self._dttmstart = None
        self._fluiddes = None
        self._idrec = None
        self._idrecjobprogramphasecalc = None
        self._idrecjobprogramphasecalctk = None
        self._idrecparent = None
        self._idrecwellbore = None
        self._idrecwellboretk = None
        self._idwell = None
        self._inikickheight = None
        self._job = None
        self._job_kick_actions = None
        self._job_kick_causes = None
        self._job_kick_pres = None
        self._kickclass = None
        self._kickindicator = None
        self._killprocedure = None
        self._muddensityaftercalc = None
        self._muddensitybeforecalc = None
        self._opsinprog = None
        self._prespump = None
        self._pressic = None
        self._pressidp = None
        self._ratepump = None
        self._syscreatedate = None
        self._syscreateuser = None
        self._syslockchildren = None
        self._syslockchildrenui = None
        self._syslockdate = None
        self._syslockme = None
        self._syslockmeui = None
        self._sysmoddate = None
        self._sysmoduser = None
        self._systag = None
        self._typ1 = None
        self._typ2 = None
        self._volkick = None
        self.discriminator = None
        if depthend is not None:
            self.depthend = depthend
        if depthstart is not None:
            self.depthstart = depthstart
        if depthtvdendcalc is not None:
            self.depthtvdendcalc = depthtvdendcalc
        if depthtvdstartcalc is not None:
            self.depthtvdstartcalc = depthtvdstartcalc
        if dttmend is not None:
            self.dttmend = dttmend
        if dttmstart is not None:
            self.dttmstart = dttmstart
        if fluiddes is not None:
            self.fluiddes = fluiddes
        if idrec is not None:
            self.idrec = idrec
        if idrecjobprogramphasecalc is not None:
            self.idrecjobprogramphasecalc = idrecjobprogramphasecalc
        if idrecjobprogramphasecalctk is not None:
            self.idrecjobprogramphasecalctk = idrecjobprogramphasecalctk
        if idrecparent is not None:
            self.idrecparent = idrecparent
        if idrecwellbore is not None:
            self.idrecwellbore = idrecwellbore
        if idrecwellboretk is not None:
            self.idrecwellboretk = idrecwellboretk
        if idwell is not None:
            self.idwell = idwell
        if inikickheight is not None:
            self.inikickheight = inikickheight
        if job is not None:
            self.job = job
        if job_kick_actions is not None:
            self.job_kick_actions = job_kick_actions
        if job_kick_causes is not None:
            self.job_kick_causes = job_kick_causes
        if job_kick_pres is not None:
            self.job_kick_pres = job_kick_pres
        if kickclass is not None:
            self.kickclass = kickclass
        if kickindicator is not None:
            self.kickindicator = kickindicator
        if killprocedure is not None:
            self.killprocedure = killprocedure
        if muddensityaftercalc is not None:
            self.muddensityaftercalc = muddensityaftercalc
        if muddensitybeforecalc is not None:
            self.muddensitybeforecalc = muddensitybeforecalc
        if opsinprog is not None:
            self.opsinprog = opsinprog
        if prespump is not None:
            self.prespump = prespump
        if pressic is not None:
            self.pressic = pressic
        if pressidp is not None:
            self.pressidp = pressidp
        if ratepump is not None:
            self.ratepump = ratepump
        if syscreatedate is not None:
            self.syscreatedate = syscreatedate
        if syscreateuser is not None:
            self.syscreateuser = syscreateuser
        if syslockchildren is not None:
            self.syslockchildren = syslockchildren
        if syslockchildrenui is not None:
            self.syslockchildrenui = syslockchildrenui
        if syslockdate is not None:
            self.syslockdate = syslockdate
        if syslockme is not None:
            self.syslockme = syslockme
        if syslockmeui is not None:
            self.syslockmeui = syslockmeui
        if sysmoddate is not None:
            self.sysmoddate = sysmoddate
        if sysmoduser is not None:
            self.sysmoduser = sysmoduser
        if systag is not None:
            self.systag = systag
        if typ1 is not None:
            self.typ1 = typ1
        if typ2 is not None:
            self.typ2 = typ2
        if volkick is not None:
            self.volkick = volkick

    @property
    def depthend(self):
        """Gets the depthend of this JobKick.  # noqa: E501


        :return: The depthend of this JobKick.  # noqa: E501
        :rtype: OneOfJobKickDepthend
        """
        return self._depthend

    @depthend.setter
    def depthend(self, depthend):
        """Sets the depthend of this JobKick.


        :param depthend: The depthend of this JobKick.  # noqa: E501
        :type: OneOfJobKickDepthend
        """

        self._depthend = depthend

    @property
    def depthstart(self):
        """Gets the depthstart of this JobKick.  # noqa: E501


        :return: The depthstart of this JobKick.  # noqa: E501
        :rtype: OneOfJobKickDepthstart
        """
        return self._depthstart

    @depthstart.setter
    def depthstart(self, depthstart):
        """Sets the depthstart of this JobKick.


        :param depthstart: The depthstart of this JobKick.  # noqa: E501
        :type: OneOfJobKickDepthstart
        """

        self._depthstart = depthstart

    @property
    def depthtvdendcalc(self):
        """Gets the depthtvdendcalc of this JobKick.  # noqa: E501


        :return: The depthtvdendcalc of this JobKick.  # noqa: E501
        :rtype: OneOfJobKickDepthtvdendcalc
        """
        return self._depthtvdendcalc

    @depthtvdendcalc.setter
    def depthtvdendcalc(self, depthtvdendcalc):
        """Sets the depthtvdendcalc of this JobKick.


        :param depthtvdendcalc: The depthtvdendcalc of this JobKick.  # noqa: E501
        :type: OneOfJobKickDepthtvdendcalc
        """

        self._depthtvdendcalc = depthtvdendcalc

    @property
    def depthtvdstartcalc(self):
        """Gets the depthtvdstartcalc of this JobKick.  # noqa: E501


        :return: The depthtvdstartcalc of this JobKick.  # noqa: E501
        :rtype: OneOfJobKickDepthtvdstartcalc
        """
        return self._depthtvdstartcalc

    @depthtvdstartcalc.setter
    def depthtvdstartcalc(self, depthtvdstartcalc):
        """Sets the depthtvdstartcalc of this JobKick.


        :param depthtvdstartcalc: The depthtvdstartcalc of this JobKick.  # noqa: E501
        :type: OneOfJobKickDepthtvdstartcalc
        """

        self._depthtvdstartcalc = depthtvdstartcalc

    @property
    def dttmend(self):
        """Gets the dttmend of this JobKick.  # noqa: E501


        :return: The dttmend of this JobKick.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmend

    @dttmend.setter
    def dttmend(self, dttmend):
        """Sets the dttmend of this JobKick.


        :param dttmend: The dttmend of this JobKick.  # noqa: E501
        :type: datetime
        """

        self._dttmend = dttmend

    @property
    def dttmstart(self):
        """Gets the dttmstart of this JobKick.  # noqa: E501


        :return: The dttmstart of this JobKick.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmstart

    @dttmstart.setter
    def dttmstart(self, dttmstart):
        """Sets the dttmstart of this JobKick.


        :param dttmstart: The dttmstart of this JobKick.  # noqa: E501
        :type: datetime
        """

        self._dttmstart = dttmstart

    @property
    def fluiddes(self):
        """Gets the fluiddes of this JobKick.  # noqa: E501


        :return: The fluiddes of this JobKick.  # noqa: E501
        :rtype: str
        """
        return self._fluiddes

    @fluiddes.setter
    def fluiddes(self, fluiddes):
        """Sets the fluiddes of this JobKick.


        :param fluiddes: The fluiddes of this JobKick.  # noqa: E501
        :type: str
        """

        self._fluiddes = fluiddes

    @property
    def idrec(self):
        """Gets the idrec of this JobKick.  # noqa: E501


        :return: The idrec of this JobKick.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this JobKick.


        :param idrec: The idrec of this JobKick.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecjobprogramphasecalc(self):
        """Gets the idrecjobprogramphasecalc of this JobKick.  # noqa: E501


        :return: The idrecjobprogramphasecalc of this JobKick.  # noqa: E501
        :rtype: str
        """
        return self._idrecjobprogramphasecalc

    @idrecjobprogramphasecalc.setter
    def idrecjobprogramphasecalc(self, idrecjobprogramphasecalc):
        """Sets the idrecjobprogramphasecalc of this JobKick.


        :param idrecjobprogramphasecalc: The idrecjobprogramphasecalc of this JobKick.  # noqa: E501
        :type: str
        """

        self._idrecjobprogramphasecalc = idrecjobprogramphasecalc

    @property
    def idrecjobprogramphasecalctk(self):
        """Gets the idrecjobprogramphasecalctk of this JobKick.  # noqa: E501


        :return: The idrecjobprogramphasecalctk of this JobKick.  # noqa: E501
        :rtype: str
        """
        return self._idrecjobprogramphasecalctk

    @idrecjobprogramphasecalctk.setter
    def idrecjobprogramphasecalctk(self, idrecjobprogramphasecalctk):
        """Sets the idrecjobprogramphasecalctk of this JobKick.


        :param idrecjobprogramphasecalctk: The idrecjobprogramphasecalctk of this JobKick.  # noqa: E501
        :type: str
        """

        self._idrecjobprogramphasecalctk = idrecjobprogramphasecalctk

    @property
    def idrecparent(self):
        """Gets the idrecparent of this JobKick.  # noqa: E501


        :return: The idrecparent of this JobKick.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this JobKick.


        :param idrecparent: The idrecparent of this JobKick.  # noqa: E501
        :type: str
        """

        self._idrecparent = idrecparent

    @property
    def idrecwellbore(self):
        """Gets the idrecwellbore of this JobKick.  # noqa: E501


        :return: The idrecwellbore of this JobKick.  # noqa: E501
        :rtype: str
        """
        return self._idrecwellbore

    @idrecwellbore.setter
    def idrecwellbore(self, idrecwellbore):
        """Sets the idrecwellbore of this JobKick.


        :param idrecwellbore: The idrecwellbore of this JobKick.  # noqa: E501
        :type: str
        """

        self._idrecwellbore = idrecwellbore

    @property
    def idrecwellboretk(self):
        """Gets the idrecwellboretk of this JobKick.  # noqa: E501


        :return: The idrecwellboretk of this JobKick.  # noqa: E501
        :rtype: str
        """
        return self._idrecwellboretk

    @idrecwellboretk.setter
    def idrecwellboretk(self, idrecwellboretk):
        """Sets the idrecwellboretk of this JobKick.


        :param idrecwellboretk: The idrecwellboretk of this JobKick.  # noqa: E501
        :type: str
        """

        self._idrecwellboretk = idrecwellboretk

    @property
    def idwell(self):
        """Gets the idwell of this JobKick.  # noqa: E501


        :return: The idwell of this JobKick.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this JobKick.


        :param idwell: The idwell of this JobKick.  # noqa: E501
        :type: str
        """

        self._idwell = idwell

    @property
    def inikickheight(self):
        """Gets the inikickheight of this JobKick.  # noqa: E501


        :return: The inikickheight of this JobKick.  # noqa: E501
        :rtype: OneOfJobKickInikickheight
        """
        return self._inikickheight

    @inikickheight.setter
    def inikickheight(self, inikickheight):
        """Sets the inikickheight of this JobKick.


        :param inikickheight: The inikickheight of this JobKick.  # noqa: E501
        :type: OneOfJobKickInikickheight
        """

        self._inikickheight = inikickheight

    @property
    def job(self):
        """Gets the job of this JobKick.  # noqa: E501


        :return: The job of this JobKick.  # noqa: E501
        :rtype: AnyOfJobKickJob
        """
        return self._job

    @job.setter
    def job(self, job):
        """Sets the job of this JobKick.


        :param job: The job of this JobKick.  # noqa: E501
        :type: AnyOfJobKickJob
        """

        self._job = job

    @property
    def job_kick_actions(self):
        """Gets the job_kick_actions of this JobKick.  # noqa: E501


        :return: The job_kick_actions of this JobKick.  # noqa: E501
        :rtype: list[JobKickAction]
        """
        return self._job_kick_actions

    @job_kick_actions.setter
    def job_kick_actions(self, job_kick_actions):
        """Sets the job_kick_actions of this JobKick.


        :param job_kick_actions: The job_kick_actions of this JobKick.  # noqa: E501
        :type: list[JobKickAction]
        """

        self._job_kick_actions = job_kick_actions

    @property
    def job_kick_causes(self):
        """Gets the job_kick_causes of this JobKick.  # noqa: E501


        :return: The job_kick_causes of this JobKick.  # noqa: E501
        :rtype: list[JobKickCause]
        """
        return self._job_kick_causes

    @job_kick_causes.setter
    def job_kick_causes(self, job_kick_causes):
        """Sets the job_kick_causes of this JobKick.


        :param job_kick_causes: The job_kick_causes of this JobKick.  # noqa: E501
        :type: list[JobKickCause]
        """

        self._job_kick_causes = job_kick_causes

    @property
    def job_kick_pres(self):
        """Gets the job_kick_pres of this JobKick.  # noqa: E501


        :return: The job_kick_pres of this JobKick.  # noqa: E501
        :rtype: list[JobKickPres]
        """
        return self._job_kick_pres

    @job_kick_pres.setter
    def job_kick_pres(self, job_kick_pres):
        """Sets the job_kick_pres of this JobKick.


        :param job_kick_pres: The job_kick_pres of this JobKick.  # noqa: E501
        :type: list[JobKickPres]
        """

        self._job_kick_pres = job_kick_pres

    @property
    def kickclass(self):
        """Gets the kickclass of this JobKick.  # noqa: E501


        :return: The kickclass of this JobKick.  # noqa: E501
        :rtype: str
        """
        return self._kickclass

    @kickclass.setter
    def kickclass(self, kickclass):
        """Sets the kickclass of this JobKick.


        :param kickclass: The kickclass of this JobKick.  # noqa: E501
        :type: str
        """

        self._kickclass = kickclass

    @property
    def kickindicator(self):
        """Gets the kickindicator of this JobKick.  # noqa: E501


        :return: The kickindicator of this JobKick.  # noqa: E501
        :rtype: str
        """
        return self._kickindicator

    @kickindicator.setter
    def kickindicator(self, kickindicator):
        """Sets the kickindicator of this JobKick.


        :param kickindicator: The kickindicator of this JobKick.  # noqa: E501
        :type: str
        """

        self._kickindicator = kickindicator

    @property
    def killprocedure(self):
        """Gets the killprocedure of this JobKick.  # noqa: E501


        :return: The killprocedure of this JobKick.  # noqa: E501
        :rtype: str
        """
        return self._killprocedure

    @killprocedure.setter
    def killprocedure(self, killprocedure):
        """Sets the killprocedure of this JobKick.


        :param killprocedure: The killprocedure of this JobKick.  # noqa: E501
        :type: str
        """

        self._killprocedure = killprocedure

    @property
    def muddensityaftercalc(self):
        """Gets the muddensityaftercalc of this JobKick.  # noqa: E501


        :return: The muddensityaftercalc of this JobKick.  # noqa: E501
        :rtype: OneOfJobKickMuddensityaftercalc
        """
        return self._muddensityaftercalc

    @muddensityaftercalc.setter
    def muddensityaftercalc(self, muddensityaftercalc):
        """Sets the muddensityaftercalc of this JobKick.


        :param muddensityaftercalc: The muddensityaftercalc of this JobKick.  # noqa: E501
        :type: OneOfJobKickMuddensityaftercalc
        """

        self._muddensityaftercalc = muddensityaftercalc

    @property
    def muddensitybeforecalc(self):
        """Gets the muddensitybeforecalc of this JobKick.  # noqa: E501


        :return: The muddensitybeforecalc of this JobKick.  # noqa: E501
        :rtype: OneOfJobKickMuddensitybeforecalc
        """
        return self._muddensitybeforecalc

    @muddensitybeforecalc.setter
    def muddensitybeforecalc(self, muddensitybeforecalc):
        """Sets the muddensitybeforecalc of this JobKick.


        :param muddensitybeforecalc: The muddensitybeforecalc of this JobKick.  # noqa: E501
        :type: OneOfJobKickMuddensitybeforecalc
        """

        self._muddensitybeforecalc = muddensitybeforecalc

    @property
    def opsinprog(self):
        """Gets the opsinprog of this JobKick.  # noqa: E501


        :return: The opsinprog of this JobKick.  # noqa: E501
        :rtype: str
        """
        return self._opsinprog

    @opsinprog.setter
    def opsinprog(self, opsinprog):
        """Sets the opsinprog of this JobKick.


        :param opsinprog: The opsinprog of this JobKick.  # noqa: E501
        :type: str
        """

        self._opsinprog = opsinprog

    @property
    def prespump(self):
        """Gets the prespump of this JobKick.  # noqa: E501


        :return: The prespump of this JobKick.  # noqa: E501
        :rtype: OneOfJobKickPrespump
        """
        return self._prespump

    @prespump.setter
    def prespump(self, prespump):
        """Sets the prespump of this JobKick.


        :param prespump: The prespump of this JobKick.  # noqa: E501
        :type: OneOfJobKickPrespump
        """

        self._prespump = prespump

    @property
    def pressic(self):
        """Gets the pressic of this JobKick.  # noqa: E501


        :return: The pressic of this JobKick.  # noqa: E501
        :rtype: OneOfJobKickPressic
        """
        return self._pressic

    @pressic.setter
    def pressic(self, pressic):
        """Sets the pressic of this JobKick.


        :param pressic: The pressic of this JobKick.  # noqa: E501
        :type: OneOfJobKickPressic
        """

        self._pressic = pressic

    @property
    def pressidp(self):
        """Gets the pressidp of this JobKick.  # noqa: E501


        :return: The pressidp of this JobKick.  # noqa: E501
        :rtype: OneOfJobKickPressidp
        """
        return self._pressidp

    @pressidp.setter
    def pressidp(self, pressidp):
        """Sets the pressidp of this JobKick.


        :param pressidp: The pressidp of this JobKick.  # noqa: E501
        :type: OneOfJobKickPressidp
        """

        self._pressidp = pressidp

    @property
    def ratepump(self):
        """Gets the ratepump of this JobKick.  # noqa: E501


        :return: The ratepump of this JobKick.  # noqa: E501
        :rtype: OneOfJobKickRatepump
        """
        return self._ratepump

    @ratepump.setter
    def ratepump(self, ratepump):
        """Sets the ratepump of this JobKick.


        :param ratepump: The ratepump of this JobKick.  # noqa: E501
        :type: OneOfJobKickRatepump
        """

        self._ratepump = ratepump

    @property
    def syscreatedate(self):
        """Gets the syscreatedate of this JobKick.  # noqa: E501


        :return: The syscreatedate of this JobKick.  # noqa: E501
        :rtype: datetime
        """
        return self._syscreatedate

    @syscreatedate.setter
    def syscreatedate(self, syscreatedate):
        """Sets the syscreatedate of this JobKick.


        :param syscreatedate: The syscreatedate of this JobKick.  # noqa: E501
        :type: datetime
        """

        self._syscreatedate = syscreatedate

    @property
    def syscreateuser(self):
        """Gets the syscreateuser of this JobKick.  # noqa: E501


        :return: The syscreateuser of this JobKick.  # noqa: E501
        :rtype: str
        """
        return self._syscreateuser

    @syscreateuser.setter
    def syscreateuser(self, syscreateuser):
        """Sets the syscreateuser of this JobKick.


        :param syscreateuser: The syscreateuser of this JobKick.  # noqa: E501
        :type: str
        """

        self._syscreateuser = syscreateuser

    @property
    def syslockchildren(self):
        """Gets the syslockchildren of this JobKick.  # noqa: E501


        :return: The syslockchildren of this JobKick.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildren

    @syslockchildren.setter
    def syslockchildren(self, syslockchildren):
        """Sets the syslockchildren of this JobKick.


        :param syslockchildren: The syslockchildren of this JobKick.  # noqa: E501
        :type: int
        """

        self._syslockchildren = syslockchildren

    @property
    def syslockchildrenui(self):
        """Gets the syslockchildrenui of this JobKick.  # noqa: E501


        :return: The syslockchildrenui of this JobKick.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildrenui

    @syslockchildrenui.setter
    def syslockchildrenui(self, syslockchildrenui):
        """Sets the syslockchildrenui of this JobKick.


        :param syslockchildrenui: The syslockchildrenui of this JobKick.  # noqa: E501
        :type: int
        """

        self._syslockchildrenui = syslockchildrenui

    @property
    def syslockdate(self):
        """Gets the syslockdate of this JobKick.  # noqa: E501


        :return: The syslockdate of this JobKick.  # noqa: E501
        :rtype: datetime
        """
        return self._syslockdate

    @syslockdate.setter
    def syslockdate(self, syslockdate):
        """Sets the syslockdate of this JobKick.


        :param syslockdate: The syslockdate of this JobKick.  # noqa: E501
        :type: datetime
        """

        self._syslockdate = syslockdate

    @property
    def syslockme(self):
        """Gets the syslockme of this JobKick.  # noqa: E501


        :return: The syslockme of this JobKick.  # noqa: E501
        :rtype: int
        """
        return self._syslockme

    @syslockme.setter
    def syslockme(self, syslockme):
        """Sets the syslockme of this JobKick.


        :param syslockme: The syslockme of this JobKick.  # noqa: E501
        :type: int
        """

        self._syslockme = syslockme

    @property
    def syslockmeui(self):
        """Gets the syslockmeui of this JobKick.  # noqa: E501


        :return: The syslockmeui of this JobKick.  # noqa: E501
        :rtype: int
        """
        return self._syslockmeui

    @syslockmeui.setter
    def syslockmeui(self, syslockmeui):
        """Sets the syslockmeui of this JobKick.


        :param syslockmeui: The syslockmeui of this JobKick.  # noqa: E501
        :type: int
        """

        self._syslockmeui = syslockmeui

    @property
    def sysmoddate(self):
        """Gets the sysmoddate of this JobKick.  # noqa: E501


        :return: The sysmoddate of this JobKick.  # noqa: E501
        :rtype: datetime
        """
        return self._sysmoddate

    @sysmoddate.setter
    def sysmoddate(self, sysmoddate):
        """Sets the sysmoddate of this JobKick.


        :param sysmoddate: The sysmoddate of this JobKick.  # noqa: E501
        :type: datetime
        """

        self._sysmoddate = sysmoddate

    @property
    def sysmoduser(self):
        """Gets the sysmoduser of this JobKick.  # noqa: E501


        :return: The sysmoduser of this JobKick.  # noqa: E501
        :rtype: str
        """
        return self._sysmoduser

    @sysmoduser.setter
    def sysmoduser(self, sysmoduser):
        """Sets the sysmoduser of this JobKick.


        :param sysmoduser: The sysmoduser of this JobKick.  # noqa: E501
        :type: str
        """

        self._sysmoduser = sysmoduser

    @property
    def systag(self):
        """Gets the systag of this JobKick.  # noqa: E501


        :return: The systag of this JobKick.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this JobKick.


        :param systag: The systag of this JobKick.  # noqa: E501
        :type: str
        """

        self._systag = systag

    @property
    def typ1(self):
        """Gets the typ1 of this JobKick.  # noqa: E501


        :return: The typ1 of this JobKick.  # noqa: E501
        :rtype: str
        """
        return self._typ1

    @typ1.setter
    def typ1(self, typ1):
        """Sets the typ1 of this JobKick.


        :param typ1: The typ1 of this JobKick.  # noqa: E501
        :type: str
        """

        self._typ1 = typ1

    @property
    def typ2(self):
        """Gets the typ2 of this JobKick.  # noqa: E501


        :return: The typ2 of this JobKick.  # noqa: E501
        :rtype: str
        """
        return self._typ2

    @typ2.setter
    def typ2(self, typ2):
        """Sets the typ2 of this JobKick.


        :param typ2: The typ2 of this JobKick.  # noqa: E501
        :type: str
        """

        self._typ2 = typ2

    @property
    def volkick(self):
        """Gets the volkick of this JobKick.  # noqa: E501


        :return: The volkick of this JobKick.  # noqa: E501
        :rtype: OneOfJobKickVolkick
        """
        return self._volkick

    @volkick.setter
    def volkick(self, volkick):
        """Sets the volkick of this JobKick.


        :param volkick: The volkick of this JobKick.  # noqa: E501
        :type: OneOfJobKickVolkick
        """

        self._volkick = volkick

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JobKick, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobKick):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
