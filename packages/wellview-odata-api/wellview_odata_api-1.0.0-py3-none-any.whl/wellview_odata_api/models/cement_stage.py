# coding: utf-8

"""
    OData Service for namespace Default

    This OData service is located at http://localhost  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CementStage(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'btmplug': 'int',
        'cement': 'AnyOfCementStageCement',
        'cement_stage_fluids': 'list[CementStageFluid]',
        'com': 'str',
        'depthbtm': 'OneOfCementStageDepthbtm',
        'depthdrillout': 'OneOfCementStageDepthdrillout',
        'depthtagged': 'OneOfCementStageDepthtagged',
        'depthtop': 'OneOfCementStageDepthtop',
        'depthtvdbtmcalc': 'OneOfCementStageDepthtvdbtmcalc',
        'depthtvdtopcalc': 'OneOfCementStageDepthtvdtopcalc',
        'des': 'str',
        'dttmdrillout': 'datetime',
        'dttmendpump': 'datetime',
        'dttmreleasedpres': 'datetime',
        'dttmstartpump': 'datetime',
        'dttmtagged': 'datetime',
        'durdrillouttopumpendcalc': 'OneOfCementStageDurdrillouttopumpendcalc',
        'floatfailed': 'int',
        'fullreturn': 'int',
        'idrec': 'str',
        'idrecparent': 'str',
        'idwell': 'str',
        'measmethod': 'str',
        'objective': 'str',
        'oddrillout': 'OneOfCementStageOddrillout',
        'pipemovenote': 'str',
        'plugfailed': 'int',
        'presheld': 'OneOfCementStagePresheld',
        'presplugbump': 'OneOfCementStagePresplugbump',
        'prespumpend': 'OneOfCementStagePrespumpend',
        'proposeddrillout': 'int',
        'ratepumpavg': 'OneOfCementStageRatepumpavg',
        'ratepumpend': 'OneOfCementStageRatepumpend',
        'ratepumpstart': 'OneOfCementStageRatepumpstart',
        'reciprate': 'OneOfCementStageReciprate',
        'reciprocated': 'int',
        'recipstroke': 'OneOfCementStageRecipstroke',
        'rotated': 'int',
        'rotaterpm': 'OneOfCementStageRotaterpm',
        'stagenum': 'int',
        'syscreatedate': 'datetime',
        'syscreateuser': 'str',
        'syslockchildren': 'int',
        'syslockchildrenui': 'int',
        'syslockdate': 'datetime',
        'syslockme': 'int',
        'syslockmeui': 'int',
        'sysmoddate': 'datetime',
        'sysmoduser': 'str',
        'systag': 'str',
        'tagmethod': 'str',
        'topplug': 'int',
        'volinfrm': 'OneOfCementStageVolinfrm',
        'vollost': 'OneOfCementStageVollost',
        'volreturncmnt': 'OneOfCementStageVolreturncmnt',
        'weighttagged': 'OneOfCementStageWeighttagged'
    }

    attribute_map = {
        'btmplug': 'btmplug',
        'cement': 'cement',
        'cement_stage_fluids': 'cementStageFluids',
        'com': 'com',
        'depthbtm': 'depthbtm',
        'depthdrillout': 'depthdrillout',
        'depthtagged': 'depthtagged',
        'depthtop': 'depthtop',
        'depthtvdbtmcalc': 'depthtvdbtmcalc',
        'depthtvdtopcalc': 'depthtvdtopcalc',
        'des': 'des',
        'dttmdrillout': 'dttmdrillout',
        'dttmendpump': 'dttmendpump',
        'dttmreleasedpres': 'dttmreleasedpres',
        'dttmstartpump': 'dttmstartpump',
        'dttmtagged': 'dttmtagged',
        'durdrillouttopumpendcalc': 'durdrillouttopumpendcalc',
        'floatfailed': 'floatfailed',
        'fullreturn': 'fullreturn',
        'idrec': 'idrec',
        'idrecparent': 'idrecparent',
        'idwell': 'idwell',
        'measmethod': 'measmethod',
        'objective': 'objective',
        'oddrillout': 'oddrillout',
        'pipemovenote': 'pipemovenote',
        'plugfailed': 'plugfailed',
        'presheld': 'presheld',
        'presplugbump': 'presplugbump',
        'prespumpend': 'prespumpend',
        'proposeddrillout': 'proposeddrillout',
        'ratepumpavg': 'ratepumpavg',
        'ratepumpend': 'ratepumpend',
        'ratepumpstart': 'ratepumpstart',
        'reciprate': 'reciprate',
        'reciprocated': 'reciprocated',
        'recipstroke': 'recipstroke',
        'rotated': 'rotated',
        'rotaterpm': 'rotaterpm',
        'stagenum': 'stagenum',
        'syscreatedate': 'syscreatedate',
        'syscreateuser': 'syscreateuser',
        'syslockchildren': 'syslockchildren',
        'syslockchildrenui': 'syslockchildrenui',
        'syslockdate': 'syslockdate',
        'syslockme': 'syslockme',
        'syslockmeui': 'syslockmeui',
        'sysmoddate': 'sysmoddate',
        'sysmoduser': 'sysmoduser',
        'systag': 'systag',
        'tagmethod': 'tagmethod',
        'topplug': 'topplug',
        'volinfrm': 'volinfrm',
        'vollost': 'vollost',
        'volreturncmnt': 'volreturncmnt',
        'weighttagged': 'weighttagged'
    }

    def __init__(self, btmplug=None, cement=None, cement_stage_fluids=None, com=None, depthbtm=None, depthdrillout=None, depthtagged=None, depthtop=None, depthtvdbtmcalc=None, depthtvdtopcalc=None, des=None, dttmdrillout=None, dttmendpump=None, dttmreleasedpres=None, dttmstartpump=None, dttmtagged=None, durdrillouttopumpendcalc=None, floatfailed=None, fullreturn=None, idrec=None, idrecparent=None, idwell=None, measmethod=None, objective=None, oddrillout=None, pipemovenote=None, plugfailed=None, presheld=None, presplugbump=None, prespumpend=None, proposeddrillout=None, ratepumpavg=None, ratepumpend=None, ratepumpstart=None, reciprate=None, reciprocated=None, recipstroke=None, rotated=None, rotaterpm=None, stagenum=None, syscreatedate=None, syscreateuser=None, syslockchildren=None, syslockchildrenui=None, syslockdate=None, syslockme=None, syslockmeui=None, sysmoddate=None, sysmoduser=None, systag=None, tagmethod=None, topplug=None, volinfrm=None, vollost=None, volreturncmnt=None, weighttagged=None):  # noqa: E501
        """CementStage - a model defined in Swagger"""  # noqa: E501
        self._btmplug = None
        self._cement = None
        self._cement_stage_fluids = None
        self._com = None
        self._depthbtm = None
        self._depthdrillout = None
        self._depthtagged = None
        self._depthtop = None
        self._depthtvdbtmcalc = None
        self._depthtvdtopcalc = None
        self._des = None
        self._dttmdrillout = None
        self._dttmendpump = None
        self._dttmreleasedpres = None
        self._dttmstartpump = None
        self._dttmtagged = None
        self._durdrillouttopumpendcalc = None
        self._floatfailed = None
        self._fullreturn = None
        self._idrec = None
        self._idrecparent = None
        self._idwell = None
        self._measmethod = None
        self._objective = None
        self._oddrillout = None
        self._pipemovenote = None
        self._plugfailed = None
        self._presheld = None
        self._presplugbump = None
        self._prespumpend = None
        self._proposeddrillout = None
        self._ratepumpavg = None
        self._ratepumpend = None
        self._ratepumpstart = None
        self._reciprate = None
        self._reciprocated = None
        self._recipstroke = None
        self._rotated = None
        self._rotaterpm = None
        self._stagenum = None
        self._syscreatedate = None
        self._syscreateuser = None
        self._syslockchildren = None
        self._syslockchildrenui = None
        self._syslockdate = None
        self._syslockme = None
        self._syslockmeui = None
        self._sysmoddate = None
        self._sysmoduser = None
        self._systag = None
        self._tagmethod = None
        self._topplug = None
        self._volinfrm = None
        self._vollost = None
        self._volreturncmnt = None
        self._weighttagged = None
        self.discriminator = None
        if btmplug is not None:
            self.btmplug = btmplug
        if cement is not None:
            self.cement = cement
        if cement_stage_fluids is not None:
            self.cement_stage_fluids = cement_stage_fluids
        if com is not None:
            self.com = com
        if depthbtm is not None:
            self.depthbtm = depthbtm
        if depthdrillout is not None:
            self.depthdrillout = depthdrillout
        if depthtagged is not None:
            self.depthtagged = depthtagged
        if depthtop is not None:
            self.depthtop = depthtop
        if depthtvdbtmcalc is not None:
            self.depthtvdbtmcalc = depthtvdbtmcalc
        if depthtvdtopcalc is not None:
            self.depthtvdtopcalc = depthtvdtopcalc
        if des is not None:
            self.des = des
        if dttmdrillout is not None:
            self.dttmdrillout = dttmdrillout
        if dttmendpump is not None:
            self.dttmendpump = dttmendpump
        if dttmreleasedpres is not None:
            self.dttmreleasedpres = dttmreleasedpres
        if dttmstartpump is not None:
            self.dttmstartpump = dttmstartpump
        if dttmtagged is not None:
            self.dttmtagged = dttmtagged
        if durdrillouttopumpendcalc is not None:
            self.durdrillouttopumpendcalc = durdrillouttopumpendcalc
        if floatfailed is not None:
            self.floatfailed = floatfailed
        if fullreturn is not None:
            self.fullreturn = fullreturn
        if idrec is not None:
            self.idrec = idrec
        if idrecparent is not None:
            self.idrecparent = idrecparent
        if idwell is not None:
            self.idwell = idwell
        if measmethod is not None:
            self.measmethod = measmethod
        if objective is not None:
            self.objective = objective
        if oddrillout is not None:
            self.oddrillout = oddrillout
        if pipemovenote is not None:
            self.pipemovenote = pipemovenote
        if plugfailed is not None:
            self.plugfailed = plugfailed
        if presheld is not None:
            self.presheld = presheld
        if presplugbump is not None:
            self.presplugbump = presplugbump
        if prespumpend is not None:
            self.prespumpend = prespumpend
        if proposeddrillout is not None:
            self.proposeddrillout = proposeddrillout
        if ratepumpavg is not None:
            self.ratepumpavg = ratepumpavg
        if ratepumpend is not None:
            self.ratepumpend = ratepumpend
        if ratepumpstart is not None:
            self.ratepumpstart = ratepumpstart
        if reciprate is not None:
            self.reciprate = reciprate
        if reciprocated is not None:
            self.reciprocated = reciprocated
        if recipstroke is not None:
            self.recipstroke = recipstroke
        if rotated is not None:
            self.rotated = rotated
        if rotaterpm is not None:
            self.rotaterpm = rotaterpm
        if stagenum is not None:
            self.stagenum = stagenum
        if syscreatedate is not None:
            self.syscreatedate = syscreatedate
        if syscreateuser is not None:
            self.syscreateuser = syscreateuser
        if syslockchildren is not None:
            self.syslockchildren = syslockchildren
        if syslockchildrenui is not None:
            self.syslockchildrenui = syslockchildrenui
        if syslockdate is not None:
            self.syslockdate = syslockdate
        if syslockme is not None:
            self.syslockme = syslockme
        if syslockmeui is not None:
            self.syslockmeui = syslockmeui
        if sysmoddate is not None:
            self.sysmoddate = sysmoddate
        if sysmoduser is not None:
            self.sysmoduser = sysmoduser
        if systag is not None:
            self.systag = systag
        if tagmethod is not None:
            self.tagmethod = tagmethod
        if topplug is not None:
            self.topplug = topplug
        if volinfrm is not None:
            self.volinfrm = volinfrm
        if vollost is not None:
            self.vollost = vollost
        if volreturncmnt is not None:
            self.volreturncmnt = volreturncmnt
        if weighttagged is not None:
            self.weighttagged = weighttagged

    @property
    def btmplug(self):
        """Gets the btmplug of this CementStage.  # noqa: E501


        :return: The btmplug of this CementStage.  # noqa: E501
        :rtype: int
        """
        return self._btmplug

    @btmplug.setter
    def btmplug(self, btmplug):
        """Sets the btmplug of this CementStage.


        :param btmplug: The btmplug of this CementStage.  # noqa: E501
        :type: int
        """

        self._btmplug = btmplug

    @property
    def cement(self):
        """Gets the cement of this CementStage.  # noqa: E501


        :return: The cement of this CementStage.  # noqa: E501
        :rtype: AnyOfCementStageCement
        """
        return self._cement

    @cement.setter
    def cement(self, cement):
        """Sets the cement of this CementStage.


        :param cement: The cement of this CementStage.  # noqa: E501
        :type: AnyOfCementStageCement
        """

        self._cement = cement

    @property
    def cement_stage_fluids(self):
        """Gets the cement_stage_fluids of this CementStage.  # noqa: E501


        :return: The cement_stage_fluids of this CementStage.  # noqa: E501
        :rtype: list[CementStageFluid]
        """
        return self._cement_stage_fluids

    @cement_stage_fluids.setter
    def cement_stage_fluids(self, cement_stage_fluids):
        """Sets the cement_stage_fluids of this CementStage.


        :param cement_stage_fluids: The cement_stage_fluids of this CementStage.  # noqa: E501
        :type: list[CementStageFluid]
        """

        self._cement_stage_fluids = cement_stage_fluids

    @property
    def com(self):
        """Gets the com of this CementStage.  # noqa: E501


        :return: The com of this CementStage.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this CementStage.


        :param com: The com of this CementStage.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def depthbtm(self):
        """Gets the depthbtm of this CementStage.  # noqa: E501


        :return: The depthbtm of this CementStage.  # noqa: E501
        :rtype: OneOfCementStageDepthbtm
        """
        return self._depthbtm

    @depthbtm.setter
    def depthbtm(self, depthbtm):
        """Sets the depthbtm of this CementStage.


        :param depthbtm: The depthbtm of this CementStage.  # noqa: E501
        :type: OneOfCementStageDepthbtm
        """

        self._depthbtm = depthbtm

    @property
    def depthdrillout(self):
        """Gets the depthdrillout of this CementStage.  # noqa: E501


        :return: The depthdrillout of this CementStage.  # noqa: E501
        :rtype: OneOfCementStageDepthdrillout
        """
        return self._depthdrillout

    @depthdrillout.setter
    def depthdrillout(self, depthdrillout):
        """Sets the depthdrillout of this CementStage.


        :param depthdrillout: The depthdrillout of this CementStage.  # noqa: E501
        :type: OneOfCementStageDepthdrillout
        """

        self._depthdrillout = depthdrillout

    @property
    def depthtagged(self):
        """Gets the depthtagged of this CementStage.  # noqa: E501


        :return: The depthtagged of this CementStage.  # noqa: E501
        :rtype: OneOfCementStageDepthtagged
        """
        return self._depthtagged

    @depthtagged.setter
    def depthtagged(self, depthtagged):
        """Sets the depthtagged of this CementStage.


        :param depthtagged: The depthtagged of this CementStage.  # noqa: E501
        :type: OneOfCementStageDepthtagged
        """

        self._depthtagged = depthtagged

    @property
    def depthtop(self):
        """Gets the depthtop of this CementStage.  # noqa: E501


        :return: The depthtop of this CementStage.  # noqa: E501
        :rtype: OneOfCementStageDepthtop
        """
        return self._depthtop

    @depthtop.setter
    def depthtop(self, depthtop):
        """Sets the depthtop of this CementStage.


        :param depthtop: The depthtop of this CementStage.  # noqa: E501
        :type: OneOfCementStageDepthtop
        """

        self._depthtop = depthtop

    @property
    def depthtvdbtmcalc(self):
        """Gets the depthtvdbtmcalc of this CementStage.  # noqa: E501


        :return: The depthtvdbtmcalc of this CementStage.  # noqa: E501
        :rtype: OneOfCementStageDepthtvdbtmcalc
        """
        return self._depthtvdbtmcalc

    @depthtvdbtmcalc.setter
    def depthtvdbtmcalc(self, depthtvdbtmcalc):
        """Sets the depthtvdbtmcalc of this CementStage.


        :param depthtvdbtmcalc: The depthtvdbtmcalc of this CementStage.  # noqa: E501
        :type: OneOfCementStageDepthtvdbtmcalc
        """

        self._depthtvdbtmcalc = depthtvdbtmcalc

    @property
    def depthtvdtopcalc(self):
        """Gets the depthtvdtopcalc of this CementStage.  # noqa: E501


        :return: The depthtvdtopcalc of this CementStage.  # noqa: E501
        :rtype: OneOfCementStageDepthtvdtopcalc
        """
        return self._depthtvdtopcalc

    @depthtvdtopcalc.setter
    def depthtvdtopcalc(self, depthtvdtopcalc):
        """Sets the depthtvdtopcalc of this CementStage.


        :param depthtvdtopcalc: The depthtvdtopcalc of this CementStage.  # noqa: E501
        :type: OneOfCementStageDepthtvdtopcalc
        """

        self._depthtvdtopcalc = depthtvdtopcalc

    @property
    def des(self):
        """Gets the des of this CementStage.  # noqa: E501


        :return: The des of this CementStage.  # noqa: E501
        :rtype: str
        """
        return self._des

    @des.setter
    def des(self, des):
        """Sets the des of this CementStage.


        :param des: The des of this CementStage.  # noqa: E501
        :type: str
        """

        self._des = des

    @property
    def dttmdrillout(self):
        """Gets the dttmdrillout of this CementStage.  # noqa: E501


        :return: The dttmdrillout of this CementStage.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmdrillout

    @dttmdrillout.setter
    def dttmdrillout(self, dttmdrillout):
        """Sets the dttmdrillout of this CementStage.


        :param dttmdrillout: The dttmdrillout of this CementStage.  # noqa: E501
        :type: datetime
        """

        self._dttmdrillout = dttmdrillout

    @property
    def dttmendpump(self):
        """Gets the dttmendpump of this CementStage.  # noqa: E501


        :return: The dttmendpump of this CementStage.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmendpump

    @dttmendpump.setter
    def dttmendpump(self, dttmendpump):
        """Sets the dttmendpump of this CementStage.


        :param dttmendpump: The dttmendpump of this CementStage.  # noqa: E501
        :type: datetime
        """

        self._dttmendpump = dttmendpump

    @property
    def dttmreleasedpres(self):
        """Gets the dttmreleasedpres of this CementStage.  # noqa: E501


        :return: The dttmreleasedpres of this CementStage.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmreleasedpres

    @dttmreleasedpres.setter
    def dttmreleasedpres(self, dttmreleasedpres):
        """Sets the dttmreleasedpres of this CementStage.


        :param dttmreleasedpres: The dttmreleasedpres of this CementStage.  # noqa: E501
        :type: datetime
        """

        self._dttmreleasedpres = dttmreleasedpres

    @property
    def dttmstartpump(self):
        """Gets the dttmstartpump of this CementStage.  # noqa: E501


        :return: The dttmstartpump of this CementStage.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmstartpump

    @dttmstartpump.setter
    def dttmstartpump(self, dttmstartpump):
        """Sets the dttmstartpump of this CementStage.


        :param dttmstartpump: The dttmstartpump of this CementStage.  # noqa: E501
        :type: datetime
        """

        self._dttmstartpump = dttmstartpump

    @property
    def dttmtagged(self):
        """Gets the dttmtagged of this CementStage.  # noqa: E501


        :return: The dttmtagged of this CementStage.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmtagged

    @dttmtagged.setter
    def dttmtagged(self, dttmtagged):
        """Sets the dttmtagged of this CementStage.


        :param dttmtagged: The dttmtagged of this CementStage.  # noqa: E501
        :type: datetime
        """

        self._dttmtagged = dttmtagged

    @property
    def durdrillouttopumpendcalc(self):
        """Gets the durdrillouttopumpendcalc of this CementStage.  # noqa: E501


        :return: The durdrillouttopumpendcalc of this CementStage.  # noqa: E501
        :rtype: OneOfCementStageDurdrillouttopumpendcalc
        """
        return self._durdrillouttopumpendcalc

    @durdrillouttopumpendcalc.setter
    def durdrillouttopumpendcalc(self, durdrillouttopumpendcalc):
        """Sets the durdrillouttopumpendcalc of this CementStage.


        :param durdrillouttopumpendcalc: The durdrillouttopumpendcalc of this CementStage.  # noqa: E501
        :type: OneOfCementStageDurdrillouttopumpendcalc
        """

        self._durdrillouttopumpendcalc = durdrillouttopumpendcalc

    @property
    def floatfailed(self):
        """Gets the floatfailed of this CementStage.  # noqa: E501


        :return: The floatfailed of this CementStage.  # noqa: E501
        :rtype: int
        """
        return self._floatfailed

    @floatfailed.setter
    def floatfailed(self, floatfailed):
        """Sets the floatfailed of this CementStage.


        :param floatfailed: The floatfailed of this CementStage.  # noqa: E501
        :type: int
        """

        self._floatfailed = floatfailed

    @property
    def fullreturn(self):
        """Gets the fullreturn of this CementStage.  # noqa: E501


        :return: The fullreturn of this CementStage.  # noqa: E501
        :rtype: int
        """
        return self._fullreturn

    @fullreturn.setter
    def fullreturn(self, fullreturn):
        """Sets the fullreturn of this CementStage.


        :param fullreturn: The fullreturn of this CementStage.  # noqa: E501
        :type: int
        """

        self._fullreturn = fullreturn

    @property
    def idrec(self):
        """Gets the idrec of this CementStage.  # noqa: E501


        :return: The idrec of this CementStage.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this CementStage.


        :param idrec: The idrec of this CementStage.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecparent(self):
        """Gets the idrecparent of this CementStage.  # noqa: E501


        :return: The idrecparent of this CementStage.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this CementStage.


        :param idrecparent: The idrecparent of this CementStage.  # noqa: E501
        :type: str
        """

        self._idrecparent = idrecparent

    @property
    def idwell(self):
        """Gets the idwell of this CementStage.  # noqa: E501


        :return: The idwell of this CementStage.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this CementStage.


        :param idwell: The idwell of this CementStage.  # noqa: E501
        :type: str
        """

        self._idwell = idwell

    @property
    def measmethod(self):
        """Gets the measmethod of this CementStage.  # noqa: E501


        :return: The measmethod of this CementStage.  # noqa: E501
        :rtype: str
        """
        return self._measmethod

    @measmethod.setter
    def measmethod(self, measmethod):
        """Sets the measmethod of this CementStage.


        :param measmethod: The measmethod of this CementStage.  # noqa: E501
        :type: str
        """

        self._measmethod = measmethod

    @property
    def objective(self):
        """Gets the objective of this CementStage.  # noqa: E501


        :return: The objective of this CementStage.  # noqa: E501
        :rtype: str
        """
        return self._objective

    @objective.setter
    def objective(self, objective):
        """Sets the objective of this CementStage.


        :param objective: The objective of this CementStage.  # noqa: E501
        :type: str
        """

        self._objective = objective

    @property
    def oddrillout(self):
        """Gets the oddrillout of this CementStage.  # noqa: E501


        :return: The oddrillout of this CementStage.  # noqa: E501
        :rtype: OneOfCementStageOddrillout
        """
        return self._oddrillout

    @oddrillout.setter
    def oddrillout(self, oddrillout):
        """Sets the oddrillout of this CementStage.


        :param oddrillout: The oddrillout of this CementStage.  # noqa: E501
        :type: OneOfCementStageOddrillout
        """

        self._oddrillout = oddrillout

    @property
    def pipemovenote(self):
        """Gets the pipemovenote of this CementStage.  # noqa: E501


        :return: The pipemovenote of this CementStage.  # noqa: E501
        :rtype: str
        """
        return self._pipemovenote

    @pipemovenote.setter
    def pipemovenote(self, pipemovenote):
        """Sets the pipemovenote of this CementStage.


        :param pipemovenote: The pipemovenote of this CementStage.  # noqa: E501
        :type: str
        """

        self._pipemovenote = pipemovenote

    @property
    def plugfailed(self):
        """Gets the plugfailed of this CementStage.  # noqa: E501


        :return: The plugfailed of this CementStage.  # noqa: E501
        :rtype: int
        """
        return self._plugfailed

    @plugfailed.setter
    def plugfailed(self, plugfailed):
        """Sets the plugfailed of this CementStage.


        :param plugfailed: The plugfailed of this CementStage.  # noqa: E501
        :type: int
        """

        self._plugfailed = plugfailed

    @property
    def presheld(self):
        """Gets the presheld of this CementStage.  # noqa: E501


        :return: The presheld of this CementStage.  # noqa: E501
        :rtype: OneOfCementStagePresheld
        """
        return self._presheld

    @presheld.setter
    def presheld(self, presheld):
        """Sets the presheld of this CementStage.


        :param presheld: The presheld of this CementStage.  # noqa: E501
        :type: OneOfCementStagePresheld
        """

        self._presheld = presheld

    @property
    def presplugbump(self):
        """Gets the presplugbump of this CementStage.  # noqa: E501


        :return: The presplugbump of this CementStage.  # noqa: E501
        :rtype: OneOfCementStagePresplugbump
        """
        return self._presplugbump

    @presplugbump.setter
    def presplugbump(self, presplugbump):
        """Sets the presplugbump of this CementStage.


        :param presplugbump: The presplugbump of this CementStage.  # noqa: E501
        :type: OneOfCementStagePresplugbump
        """

        self._presplugbump = presplugbump

    @property
    def prespumpend(self):
        """Gets the prespumpend of this CementStage.  # noqa: E501


        :return: The prespumpend of this CementStage.  # noqa: E501
        :rtype: OneOfCementStagePrespumpend
        """
        return self._prespumpend

    @prespumpend.setter
    def prespumpend(self, prespumpend):
        """Sets the prespumpend of this CementStage.


        :param prespumpend: The prespumpend of this CementStage.  # noqa: E501
        :type: OneOfCementStagePrespumpend
        """

        self._prespumpend = prespumpend

    @property
    def proposeddrillout(self):
        """Gets the proposeddrillout of this CementStage.  # noqa: E501


        :return: The proposeddrillout of this CementStage.  # noqa: E501
        :rtype: int
        """
        return self._proposeddrillout

    @proposeddrillout.setter
    def proposeddrillout(self, proposeddrillout):
        """Sets the proposeddrillout of this CementStage.


        :param proposeddrillout: The proposeddrillout of this CementStage.  # noqa: E501
        :type: int
        """

        self._proposeddrillout = proposeddrillout

    @property
    def ratepumpavg(self):
        """Gets the ratepumpavg of this CementStage.  # noqa: E501


        :return: The ratepumpavg of this CementStage.  # noqa: E501
        :rtype: OneOfCementStageRatepumpavg
        """
        return self._ratepumpavg

    @ratepumpavg.setter
    def ratepumpavg(self, ratepumpavg):
        """Sets the ratepumpavg of this CementStage.


        :param ratepumpavg: The ratepumpavg of this CementStage.  # noqa: E501
        :type: OneOfCementStageRatepumpavg
        """

        self._ratepumpavg = ratepumpavg

    @property
    def ratepumpend(self):
        """Gets the ratepumpend of this CementStage.  # noqa: E501


        :return: The ratepumpend of this CementStage.  # noqa: E501
        :rtype: OneOfCementStageRatepumpend
        """
        return self._ratepumpend

    @ratepumpend.setter
    def ratepumpend(self, ratepumpend):
        """Sets the ratepumpend of this CementStage.


        :param ratepumpend: The ratepumpend of this CementStage.  # noqa: E501
        :type: OneOfCementStageRatepumpend
        """

        self._ratepumpend = ratepumpend

    @property
    def ratepumpstart(self):
        """Gets the ratepumpstart of this CementStage.  # noqa: E501


        :return: The ratepumpstart of this CementStage.  # noqa: E501
        :rtype: OneOfCementStageRatepumpstart
        """
        return self._ratepumpstart

    @ratepumpstart.setter
    def ratepumpstart(self, ratepumpstart):
        """Sets the ratepumpstart of this CementStage.


        :param ratepumpstart: The ratepumpstart of this CementStage.  # noqa: E501
        :type: OneOfCementStageRatepumpstart
        """

        self._ratepumpstart = ratepumpstart

    @property
    def reciprate(self):
        """Gets the reciprate of this CementStage.  # noqa: E501


        :return: The reciprate of this CementStage.  # noqa: E501
        :rtype: OneOfCementStageReciprate
        """
        return self._reciprate

    @reciprate.setter
    def reciprate(self, reciprate):
        """Sets the reciprate of this CementStage.


        :param reciprate: The reciprate of this CementStage.  # noqa: E501
        :type: OneOfCementStageReciprate
        """

        self._reciprate = reciprate

    @property
    def reciprocated(self):
        """Gets the reciprocated of this CementStage.  # noqa: E501


        :return: The reciprocated of this CementStage.  # noqa: E501
        :rtype: int
        """
        return self._reciprocated

    @reciprocated.setter
    def reciprocated(self, reciprocated):
        """Sets the reciprocated of this CementStage.


        :param reciprocated: The reciprocated of this CementStage.  # noqa: E501
        :type: int
        """

        self._reciprocated = reciprocated

    @property
    def recipstroke(self):
        """Gets the recipstroke of this CementStage.  # noqa: E501


        :return: The recipstroke of this CementStage.  # noqa: E501
        :rtype: OneOfCementStageRecipstroke
        """
        return self._recipstroke

    @recipstroke.setter
    def recipstroke(self, recipstroke):
        """Sets the recipstroke of this CementStage.


        :param recipstroke: The recipstroke of this CementStage.  # noqa: E501
        :type: OneOfCementStageRecipstroke
        """

        self._recipstroke = recipstroke

    @property
    def rotated(self):
        """Gets the rotated of this CementStage.  # noqa: E501


        :return: The rotated of this CementStage.  # noqa: E501
        :rtype: int
        """
        return self._rotated

    @rotated.setter
    def rotated(self, rotated):
        """Sets the rotated of this CementStage.


        :param rotated: The rotated of this CementStage.  # noqa: E501
        :type: int
        """

        self._rotated = rotated

    @property
    def rotaterpm(self):
        """Gets the rotaterpm of this CementStage.  # noqa: E501


        :return: The rotaterpm of this CementStage.  # noqa: E501
        :rtype: OneOfCementStageRotaterpm
        """
        return self._rotaterpm

    @rotaterpm.setter
    def rotaterpm(self, rotaterpm):
        """Sets the rotaterpm of this CementStage.


        :param rotaterpm: The rotaterpm of this CementStage.  # noqa: E501
        :type: OneOfCementStageRotaterpm
        """

        self._rotaterpm = rotaterpm

    @property
    def stagenum(self):
        """Gets the stagenum of this CementStage.  # noqa: E501


        :return: The stagenum of this CementStage.  # noqa: E501
        :rtype: int
        """
        return self._stagenum

    @stagenum.setter
    def stagenum(self, stagenum):
        """Sets the stagenum of this CementStage.


        :param stagenum: The stagenum of this CementStage.  # noqa: E501
        :type: int
        """

        self._stagenum = stagenum

    @property
    def syscreatedate(self):
        """Gets the syscreatedate of this CementStage.  # noqa: E501


        :return: The syscreatedate of this CementStage.  # noqa: E501
        :rtype: datetime
        """
        return self._syscreatedate

    @syscreatedate.setter
    def syscreatedate(self, syscreatedate):
        """Sets the syscreatedate of this CementStage.


        :param syscreatedate: The syscreatedate of this CementStage.  # noqa: E501
        :type: datetime
        """

        self._syscreatedate = syscreatedate

    @property
    def syscreateuser(self):
        """Gets the syscreateuser of this CementStage.  # noqa: E501


        :return: The syscreateuser of this CementStage.  # noqa: E501
        :rtype: str
        """
        return self._syscreateuser

    @syscreateuser.setter
    def syscreateuser(self, syscreateuser):
        """Sets the syscreateuser of this CementStage.


        :param syscreateuser: The syscreateuser of this CementStage.  # noqa: E501
        :type: str
        """

        self._syscreateuser = syscreateuser

    @property
    def syslockchildren(self):
        """Gets the syslockchildren of this CementStage.  # noqa: E501


        :return: The syslockchildren of this CementStage.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildren

    @syslockchildren.setter
    def syslockchildren(self, syslockchildren):
        """Sets the syslockchildren of this CementStage.


        :param syslockchildren: The syslockchildren of this CementStage.  # noqa: E501
        :type: int
        """

        self._syslockchildren = syslockchildren

    @property
    def syslockchildrenui(self):
        """Gets the syslockchildrenui of this CementStage.  # noqa: E501


        :return: The syslockchildrenui of this CementStage.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildrenui

    @syslockchildrenui.setter
    def syslockchildrenui(self, syslockchildrenui):
        """Sets the syslockchildrenui of this CementStage.


        :param syslockchildrenui: The syslockchildrenui of this CementStage.  # noqa: E501
        :type: int
        """

        self._syslockchildrenui = syslockchildrenui

    @property
    def syslockdate(self):
        """Gets the syslockdate of this CementStage.  # noqa: E501


        :return: The syslockdate of this CementStage.  # noqa: E501
        :rtype: datetime
        """
        return self._syslockdate

    @syslockdate.setter
    def syslockdate(self, syslockdate):
        """Sets the syslockdate of this CementStage.


        :param syslockdate: The syslockdate of this CementStage.  # noqa: E501
        :type: datetime
        """

        self._syslockdate = syslockdate

    @property
    def syslockme(self):
        """Gets the syslockme of this CementStage.  # noqa: E501


        :return: The syslockme of this CementStage.  # noqa: E501
        :rtype: int
        """
        return self._syslockme

    @syslockme.setter
    def syslockme(self, syslockme):
        """Sets the syslockme of this CementStage.


        :param syslockme: The syslockme of this CementStage.  # noqa: E501
        :type: int
        """

        self._syslockme = syslockme

    @property
    def syslockmeui(self):
        """Gets the syslockmeui of this CementStage.  # noqa: E501


        :return: The syslockmeui of this CementStage.  # noqa: E501
        :rtype: int
        """
        return self._syslockmeui

    @syslockmeui.setter
    def syslockmeui(self, syslockmeui):
        """Sets the syslockmeui of this CementStage.


        :param syslockmeui: The syslockmeui of this CementStage.  # noqa: E501
        :type: int
        """

        self._syslockmeui = syslockmeui

    @property
    def sysmoddate(self):
        """Gets the sysmoddate of this CementStage.  # noqa: E501


        :return: The sysmoddate of this CementStage.  # noqa: E501
        :rtype: datetime
        """
        return self._sysmoddate

    @sysmoddate.setter
    def sysmoddate(self, sysmoddate):
        """Sets the sysmoddate of this CementStage.


        :param sysmoddate: The sysmoddate of this CementStage.  # noqa: E501
        :type: datetime
        """

        self._sysmoddate = sysmoddate

    @property
    def sysmoduser(self):
        """Gets the sysmoduser of this CementStage.  # noqa: E501


        :return: The sysmoduser of this CementStage.  # noqa: E501
        :rtype: str
        """
        return self._sysmoduser

    @sysmoduser.setter
    def sysmoduser(self, sysmoduser):
        """Sets the sysmoduser of this CementStage.


        :param sysmoduser: The sysmoduser of this CementStage.  # noqa: E501
        :type: str
        """

        self._sysmoduser = sysmoduser

    @property
    def systag(self):
        """Gets the systag of this CementStage.  # noqa: E501


        :return: The systag of this CementStage.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this CementStage.


        :param systag: The systag of this CementStage.  # noqa: E501
        :type: str
        """

        self._systag = systag

    @property
    def tagmethod(self):
        """Gets the tagmethod of this CementStage.  # noqa: E501


        :return: The tagmethod of this CementStage.  # noqa: E501
        :rtype: str
        """
        return self._tagmethod

    @tagmethod.setter
    def tagmethod(self, tagmethod):
        """Sets the tagmethod of this CementStage.


        :param tagmethod: The tagmethod of this CementStage.  # noqa: E501
        :type: str
        """

        self._tagmethod = tagmethod

    @property
    def topplug(self):
        """Gets the topplug of this CementStage.  # noqa: E501


        :return: The topplug of this CementStage.  # noqa: E501
        :rtype: int
        """
        return self._topplug

    @topplug.setter
    def topplug(self, topplug):
        """Sets the topplug of this CementStage.


        :param topplug: The topplug of this CementStage.  # noqa: E501
        :type: int
        """

        self._topplug = topplug

    @property
    def volinfrm(self):
        """Gets the volinfrm of this CementStage.  # noqa: E501


        :return: The volinfrm of this CementStage.  # noqa: E501
        :rtype: OneOfCementStageVolinfrm
        """
        return self._volinfrm

    @volinfrm.setter
    def volinfrm(self, volinfrm):
        """Sets the volinfrm of this CementStage.


        :param volinfrm: The volinfrm of this CementStage.  # noqa: E501
        :type: OneOfCementStageVolinfrm
        """

        self._volinfrm = volinfrm

    @property
    def vollost(self):
        """Gets the vollost of this CementStage.  # noqa: E501


        :return: The vollost of this CementStage.  # noqa: E501
        :rtype: OneOfCementStageVollost
        """
        return self._vollost

    @vollost.setter
    def vollost(self, vollost):
        """Sets the vollost of this CementStage.


        :param vollost: The vollost of this CementStage.  # noqa: E501
        :type: OneOfCementStageVollost
        """

        self._vollost = vollost

    @property
    def volreturncmnt(self):
        """Gets the volreturncmnt of this CementStage.  # noqa: E501


        :return: The volreturncmnt of this CementStage.  # noqa: E501
        :rtype: OneOfCementStageVolreturncmnt
        """
        return self._volreturncmnt

    @volreturncmnt.setter
    def volreturncmnt(self, volreturncmnt):
        """Sets the volreturncmnt of this CementStage.


        :param volreturncmnt: The volreturncmnt of this CementStage.  # noqa: E501
        :type: OneOfCementStageVolreturncmnt
        """

        self._volreturncmnt = volreturncmnt

    @property
    def weighttagged(self):
        """Gets the weighttagged of this CementStage.  # noqa: E501


        :return: The weighttagged of this CementStage.  # noqa: E501
        :rtype: OneOfCementStageWeighttagged
        """
        return self._weighttagged

    @weighttagged.setter
    def weighttagged(self, weighttagged):
        """Sets the weighttagged of this CementStage.


        :param weighttagged: The weighttagged of this CementStage.  # noqa: E501
        :type: OneOfCementStageWeighttagged
        """

        self._weighttagged = weighttagged

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CementStage, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CementStage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
