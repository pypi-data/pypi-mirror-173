# coding: utf-8

"""
    OData Service for namespace Default

    This OData service is located at http://localhost  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class StimInt(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ballsno': 'int',
        'breakdowngradient': 'OneOfStimIntBreakdowngradient',
        'closuregradient': 'OneOfStimIntClosuregradient',
        'com': 'str',
        'concbhavg': 'OneOfStimIntConcbhavg',
        'concbhmax': 'OneOfStimIntConcbhmax',
        'concbhmin': 'OneOfStimIntConcbhmin',
        'concint': 'OneOfStimIntConcint',
        'concsurfavg': 'OneOfStimIntConcsurfavg',
        'concsurfmax': 'OneOfStimIntConcsurfmax',
        'concsurfmin': 'OneOfStimIntConcsurfmin',
        'deliverymode': 'str',
        'depthbtm': 'OneOfStimIntDepthbtm',
        'depthbtmelement': 'OneOfStimIntDepthbtmelement',
        'depthtop': 'OneOfStimIntDepthtop',
        'depthtopelement': 'OneOfStimIntDepthtopelement',
        'depthtopproppant': 'OneOfStimIntDepthtopproppant',
        'des': 'str',
        'dttmend': 'datetime',
        'dttmstart': 'datetime',
        'durclosure': 'OneOfStimIntDurclosure',
        'durpump': 'OneOfStimIntDurpump',
        'fluidefficiency': 'OneOfStimIntFluidefficiency',
        'fracdiagnosticmethod': 'str',
        'fracgradient': 'OneOfStimIntFracgradient',
        'fracgradientend': 'OneOfStimIntFracgradientend',
        'fracheight': 'OneOfStimIntFracheight',
        'fraclength': 'OneOfStimIntFraclength',
        'fracwidth': 'OneOfStimIntFracwidth',
        'gasvollostdownhole': 'OneOfStimIntGasvollostdownhole',
        'gasvollostsurface': 'OneOfStimIntGasvollostsurface',
        'gasvollosttransport': 'OneOfStimIntGasvollosttransport',
        'idrec': 'str',
        'idrecparent': 'str',
        'idrecstring': 'str',
        'idrecstringtk': 'str',
        'idrecwellbore': 'str',
        'idrecwellboretk': 'str',
        'idreczoneor': 'str',
        'idreczoneortk': 'str',
        'idwell': 'str',
        'intrefno': 'int',
        'masspropdesign': 'OneOfStimIntMasspropdesign',
        'masspropinfrm': 'OneOfStimIntMasspropinfrm',
        'masspropinwellbore': 'OneOfStimIntMasspropinwellbore',
        'masspropreturn': 'OneOfStimIntMasspropreturn',
        'massproptotal': 'OneOfStimIntMassproptotal',
        'netpayest': 'OneOfStimIntNetpayest',
        'perfsopennoest': 'int',
        'presavgannulus': 'OneOfStimIntPresavgannulus',
        'presavgcasing': 'OneOfStimIntPresavgcasing',
        'presavgtubing': 'OneOfStimIntPresavgtubing',
        'presbhbreakdown': 'OneOfStimIntPresbhbreakdown',
        'presbhclosure': 'OneOfStimIntPresbhclosure',
        'presbhmethod': 'str',
        'presbreakdown': 'OneOfStimIntPresbreakdown',
        'presclosure': 'OneOfStimIntPresclosure',
        'presclosuremethod': 'str',
        'presfrictionloss': 'OneOfStimIntPresfrictionloss',
        'preshyd': 'OneOfStimIntPreshyd',
        'presmaxannulus': 'OneOfStimIntPresmaxannulus',
        'presmaxcasing': 'OneOfStimIntPresmaxcasing',
        'presmaxtubing': 'OneOfStimIntPresmaxtubing',
        'presminannulus': 'OneOfStimIntPresminannulus',
        'presmincasing': 'OneOfStimIntPresmincasing',
        'presmintubing': 'OneOfStimIntPresmintubing',
        'presscreenout': 'OneOfStimIntPresscreenout',
        'pressleeveshift': 'OneOfStimIntPressleeveshift',
        'prestreatavg': 'OneOfStimIntPrestreatavg',
        'prestreatmax': 'OneOfStimIntPrestreatmax',
        'prestreatmin': 'OneOfStimIntPrestreatmin',
        'proposed': 'int',
        'pumppoweravg': 'OneOfStimIntPumppoweravg',
        'pumppowerco2': 'OneOfStimIntPumppowerco2',
        'pumppowerfluid': 'OneOfStimIntPumppowerfluid',
        'pumppowermax': 'OneOfStimIntPumppowermax',
        'pumpsonlineno': 'int',
        'rateavgannulus': 'OneOfStimIntRateavgannulus',
        'rateavgcasing': 'OneOfStimIntRateavgcasing',
        'rateavgtubing': 'OneOfStimIntRateavgtubing',
        'ratebhavg': 'OneOfStimIntRatebhavg',
        'ratebhmax': 'OneOfStimIntRatebhmax',
        'ratebhmin': 'OneOfStimIntRatebhmin',
        'ratebreakdown': 'OneOfStimIntRatebreakdown',
        'ratecleanavg': 'OneOfStimIntRatecleanavg',
        'ratecleanmax': 'OneOfStimIntRatecleanmax',
        'ratecleanmin': 'OneOfStimIntRatecleanmin',
        'ratemaxannulus': 'OneOfStimIntRatemaxannulus',
        'ratemaxcasing': 'OneOfStimIntRatemaxcasing',
        'ratemaxtubing': 'OneOfStimIntRatemaxtubing',
        'rateslurryavg': 'OneOfStimIntRateslurryavg',
        'rateslurrymax': 'OneOfStimIntRateslurrymax',
        'rateslurrymin': 'OneOfStimIntRateslurrymin',
        'ratiopropdesigntotal': 'OneOfStimIntRatiopropdesigntotal',
        'resulttechnical': 'str',
        'resulttechnicaldetail': 'str',
        'resulttechnicalnote': 'str',
        'shutinpres1': 'OneOfStimIntShutinpres1',
        'shutinpres10': 'OneOfStimIntShutinpres10',
        'shutinpres15': 'OneOfStimIntShutinpres15',
        'shutinpres3': 'OneOfStimIntShutinpres3',
        'shutinpres4': 'OneOfStimIntShutinpres4',
        'shutinpres5': 'OneOfStimIntShutinpres5',
        'shutinpresbhfinal': 'OneOfStimIntShutinpresbhfinal',
        'shutinpresfinal': 'OneOfStimIntShutinpresfinal',
        'shutinpresinitial': 'OneOfStimIntShutinpresinitial',
        'shutinpresinst': 'OneOfStimIntShutinpresinst',
        'shutintmfinal': 'OneOfStimIntShutintmfinal',
        'stim': 'AnyOfStimIntStim',
        'stim_int_fluids': 'list[StimIntFluid]',
        'stim_int_pres_dtls': 'list[StimIntPresDtl]',
        'stim_int_props': 'list[StimIntProp]',
        'stim_int_stgs': 'list[StimIntStg]',
        'syscreatedate': 'datetime',
        'syscreateuser': 'str',
        'syslockchildren': 'int',
        'syslockchildrenui': 'int',
        'syslockdate': 'datetime',
        'syslockme': 'int',
        'syslockmeui': 'int',
        'sysmoddate': 'datetime',
        'sysmoduser': 'str',
        'systag': 'str',
        'szballs': 'OneOfStimIntSzballs',
        'tempstaticavg': 'OneOfStimIntTempstaticavg',
        'temptreatavg': 'OneOfStimIntTemptreatavg',
        'typ1': 'str',
        'typ2': 'str',
        'usernum1': 'OneOfStimIntUsernum1',
        'usernum2': 'OneOfStimIntUsernum2',
        'usernum3': 'OneOfStimIntUsernum3',
        'usertxt1': 'str',
        'volcleantotal': 'OneOfStimIntVolcleantotal',
        'volco2total': 'OneOfStimIntVolco2total',
        'voln2total': 'OneOfStimIntVoln2total',
        'volrecoveredtotal': 'OneOfStimIntVolrecoveredtotal',
        'volslurrytotal': 'OneOfStimIntVolslurrytotal'
    }

    attribute_map = {
        'ballsno': 'ballsno',
        'breakdowngradient': 'breakdowngradient',
        'closuregradient': 'closuregradient',
        'com': 'com',
        'concbhavg': 'concbhavg',
        'concbhmax': 'concbhmax',
        'concbhmin': 'concbhmin',
        'concint': 'concint',
        'concsurfavg': 'concsurfavg',
        'concsurfmax': 'concsurfmax',
        'concsurfmin': 'concsurfmin',
        'deliverymode': 'deliverymode',
        'depthbtm': 'depthbtm',
        'depthbtmelement': 'depthbtmelement',
        'depthtop': 'depthtop',
        'depthtopelement': 'depthtopelement',
        'depthtopproppant': 'depthtopproppant',
        'des': 'des',
        'dttmend': 'dttmend',
        'dttmstart': 'dttmstart',
        'durclosure': 'durclosure',
        'durpump': 'durpump',
        'fluidefficiency': 'fluidefficiency',
        'fracdiagnosticmethod': 'fracdiagnosticmethod',
        'fracgradient': 'fracgradient',
        'fracgradientend': 'fracgradientend',
        'fracheight': 'fracheight',
        'fraclength': 'fraclength',
        'fracwidth': 'fracwidth',
        'gasvollostdownhole': 'gasvollostdownhole',
        'gasvollostsurface': 'gasvollostsurface',
        'gasvollosttransport': 'gasvollosttransport',
        'idrec': 'idrec',
        'idrecparent': 'idrecparent',
        'idrecstring': 'idrecstring',
        'idrecstringtk': 'idrecstringtk',
        'idrecwellbore': 'idrecwellbore',
        'idrecwellboretk': 'idrecwellboretk',
        'idreczoneor': 'idreczoneor',
        'idreczoneortk': 'idreczoneortk',
        'idwell': 'idwell',
        'intrefno': 'intrefno',
        'masspropdesign': 'masspropdesign',
        'masspropinfrm': 'masspropinfrm',
        'masspropinwellbore': 'masspropinwellbore',
        'masspropreturn': 'masspropreturn',
        'massproptotal': 'massproptotal',
        'netpayest': 'netpayest',
        'perfsopennoest': 'perfsopennoest',
        'presavgannulus': 'presavgannulus',
        'presavgcasing': 'presavgcasing',
        'presavgtubing': 'presavgtubing',
        'presbhbreakdown': 'presbhbreakdown',
        'presbhclosure': 'presbhclosure',
        'presbhmethod': 'presbhmethod',
        'presbreakdown': 'presbreakdown',
        'presclosure': 'presclosure',
        'presclosuremethod': 'presclosuremethod',
        'presfrictionloss': 'presfrictionloss',
        'preshyd': 'preshyd',
        'presmaxannulus': 'presmaxannulus',
        'presmaxcasing': 'presmaxcasing',
        'presmaxtubing': 'presmaxtubing',
        'presminannulus': 'presminannulus',
        'presmincasing': 'presmincasing',
        'presmintubing': 'presmintubing',
        'presscreenout': 'presscreenout',
        'pressleeveshift': 'pressleeveshift',
        'prestreatavg': 'prestreatavg',
        'prestreatmax': 'prestreatmax',
        'prestreatmin': 'prestreatmin',
        'proposed': 'proposed',
        'pumppoweravg': 'pumppoweravg',
        'pumppowerco2': 'pumppowerco2',
        'pumppowerfluid': 'pumppowerfluid',
        'pumppowermax': 'pumppowermax',
        'pumpsonlineno': 'pumpsonlineno',
        'rateavgannulus': 'rateavgannulus',
        'rateavgcasing': 'rateavgcasing',
        'rateavgtubing': 'rateavgtubing',
        'ratebhavg': 'ratebhavg',
        'ratebhmax': 'ratebhmax',
        'ratebhmin': 'ratebhmin',
        'ratebreakdown': 'ratebreakdown',
        'ratecleanavg': 'ratecleanavg',
        'ratecleanmax': 'ratecleanmax',
        'ratecleanmin': 'ratecleanmin',
        'ratemaxannulus': 'ratemaxannulus',
        'ratemaxcasing': 'ratemaxcasing',
        'ratemaxtubing': 'ratemaxtubing',
        'rateslurryavg': 'rateslurryavg',
        'rateslurrymax': 'rateslurrymax',
        'rateslurrymin': 'rateslurrymin',
        'ratiopropdesigntotal': 'ratiopropdesigntotal',
        'resulttechnical': 'resulttechnical',
        'resulttechnicaldetail': 'resulttechnicaldetail',
        'resulttechnicalnote': 'resulttechnicalnote',
        'shutinpres1': 'shutinpres1',
        'shutinpres10': 'shutinpres10',
        'shutinpres15': 'shutinpres15',
        'shutinpres3': 'shutinpres3',
        'shutinpres4': 'shutinpres4',
        'shutinpres5': 'shutinpres5',
        'shutinpresbhfinal': 'shutinpresbhfinal',
        'shutinpresfinal': 'shutinpresfinal',
        'shutinpresinitial': 'shutinpresinitial',
        'shutinpresinst': 'shutinpresinst',
        'shutintmfinal': 'shutintmfinal',
        'stim': 'stim',
        'stim_int_fluids': 'stimIntFluids',
        'stim_int_pres_dtls': 'stimIntPresDtls',
        'stim_int_props': 'stimIntProps',
        'stim_int_stgs': 'stimIntStgs',
        'syscreatedate': 'syscreatedate',
        'syscreateuser': 'syscreateuser',
        'syslockchildren': 'syslockchildren',
        'syslockchildrenui': 'syslockchildrenui',
        'syslockdate': 'syslockdate',
        'syslockme': 'syslockme',
        'syslockmeui': 'syslockmeui',
        'sysmoddate': 'sysmoddate',
        'sysmoduser': 'sysmoduser',
        'systag': 'systag',
        'szballs': 'szballs',
        'tempstaticavg': 'tempstaticavg',
        'temptreatavg': 'temptreatavg',
        'typ1': 'typ1',
        'typ2': 'typ2',
        'usernum1': 'usernum1',
        'usernum2': 'usernum2',
        'usernum3': 'usernum3',
        'usertxt1': 'usertxt1',
        'volcleantotal': 'volcleantotal',
        'volco2total': 'volco2total',
        'voln2total': 'voln2total',
        'volrecoveredtotal': 'volrecoveredtotal',
        'volslurrytotal': 'volslurrytotal'
    }

    def __init__(self, ballsno=None, breakdowngradient=None, closuregradient=None, com=None, concbhavg=None, concbhmax=None, concbhmin=None, concint=None, concsurfavg=None, concsurfmax=None, concsurfmin=None, deliverymode=None, depthbtm=None, depthbtmelement=None, depthtop=None, depthtopelement=None, depthtopproppant=None, des=None, dttmend=None, dttmstart=None, durclosure=None, durpump=None, fluidefficiency=None, fracdiagnosticmethod=None, fracgradient=None, fracgradientend=None, fracheight=None, fraclength=None, fracwidth=None, gasvollostdownhole=None, gasvollostsurface=None, gasvollosttransport=None, idrec=None, idrecparent=None, idrecstring=None, idrecstringtk=None, idrecwellbore=None, idrecwellboretk=None, idreczoneor=None, idreczoneortk=None, idwell=None, intrefno=None, masspropdesign=None, masspropinfrm=None, masspropinwellbore=None, masspropreturn=None, massproptotal=None, netpayest=None, perfsopennoest=None, presavgannulus=None, presavgcasing=None, presavgtubing=None, presbhbreakdown=None, presbhclosure=None, presbhmethod=None, presbreakdown=None, presclosure=None, presclosuremethod=None, presfrictionloss=None, preshyd=None, presmaxannulus=None, presmaxcasing=None, presmaxtubing=None, presminannulus=None, presmincasing=None, presmintubing=None, presscreenout=None, pressleeveshift=None, prestreatavg=None, prestreatmax=None, prestreatmin=None, proposed=None, pumppoweravg=None, pumppowerco2=None, pumppowerfluid=None, pumppowermax=None, pumpsonlineno=None, rateavgannulus=None, rateavgcasing=None, rateavgtubing=None, ratebhavg=None, ratebhmax=None, ratebhmin=None, ratebreakdown=None, ratecleanavg=None, ratecleanmax=None, ratecleanmin=None, ratemaxannulus=None, ratemaxcasing=None, ratemaxtubing=None, rateslurryavg=None, rateslurrymax=None, rateslurrymin=None, ratiopropdesigntotal=None, resulttechnical=None, resulttechnicaldetail=None, resulttechnicalnote=None, shutinpres1=None, shutinpres10=None, shutinpres15=None, shutinpres3=None, shutinpres4=None, shutinpres5=None, shutinpresbhfinal=None, shutinpresfinal=None, shutinpresinitial=None, shutinpresinst=None, shutintmfinal=None, stim=None, stim_int_fluids=None, stim_int_pres_dtls=None, stim_int_props=None, stim_int_stgs=None, syscreatedate=None, syscreateuser=None, syslockchildren=None, syslockchildrenui=None, syslockdate=None, syslockme=None, syslockmeui=None, sysmoddate=None, sysmoduser=None, systag=None, szballs=None, tempstaticavg=None, temptreatavg=None, typ1=None, typ2=None, usernum1=None, usernum2=None, usernum3=None, usertxt1=None, volcleantotal=None, volco2total=None, voln2total=None, volrecoveredtotal=None, volslurrytotal=None):  # noqa: E501
        """StimInt - a model defined in Swagger"""  # noqa: E501
        self._ballsno = None
        self._breakdowngradient = None
        self._closuregradient = None
        self._com = None
        self._concbhavg = None
        self._concbhmax = None
        self._concbhmin = None
        self._concint = None
        self._concsurfavg = None
        self._concsurfmax = None
        self._concsurfmin = None
        self._deliverymode = None
        self._depthbtm = None
        self._depthbtmelement = None
        self._depthtop = None
        self._depthtopelement = None
        self._depthtopproppant = None
        self._des = None
        self._dttmend = None
        self._dttmstart = None
        self._durclosure = None
        self._durpump = None
        self._fluidefficiency = None
        self._fracdiagnosticmethod = None
        self._fracgradient = None
        self._fracgradientend = None
        self._fracheight = None
        self._fraclength = None
        self._fracwidth = None
        self._gasvollostdownhole = None
        self._gasvollostsurface = None
        self._gasvollosttransport = None
        self._idrec = None
        self._idrecparent = None
        self._idrecstring = None
        self._idrecstringtk = None
        self._idrecwellbore = None
        self._idrecwellboretk = None
        self._idreczoneor = None
        self._idreczoneortk = None
        self._idwell = None
        self._intrefno = None
        self._masspropdesign = None
        self._masspropinfrm = None
        self._masspropinwellbore = None
        self._masspropreturn = None
        self._massproptotal = None
        self._netpayest = None
        self._perfsopennoest = None
        self._presavgannulus = None
        self._presavgcasing = None
        self._presavgtubing = None
        self._presbhbreakdown = None
        self._presbhclosure = None
        self._presbhmethod = None
        self._presbreakdown = None
        self._presclosure = None
        self._presclosuremethod = None
        self._presfrictionloss = None
        self._preshyd = None
        self._presmaxannulus = None
        self._presmaxcasing = None
        self._presmaxtubing = None
        self._presminannulus = None
        self._presmincasing = None
        self._presmintubing = None
        self._presscreenout = None
        self._pressleeveshift = None
        self._prestreatavg = None
        self._prestreatmax = None
        self._prestreatmin = None
        self._proposed = None
        self._pumppoweravg = None
        self._pumppowerco2 = None
        self._pumppowerfluid = None
        self._pumppowermax = None
        self._pumpsonlineno = None
        self._rateavgannulus = None
        self._rateavgcasing = None
        self._rateavgtubing = None
        self._ratebhavg = None
        self._ratebhmax = None
        self._ratebhmin = None
        self._ratebreakdown = None
        self._ratecleanavg = None
        self._ratecleanmax = None
        self._ratecleanmin = None
        self._ratemaxannulus = None
        self._ratemaxcasing = None
        self._ratemaxtubing = None
        self._rateslurryavg = None
        self._rateslurrymax = None
        self._rateslurrymin = None
        self._ratiopropdesigntotal = None
        self._resulttechnical = None
        self._resulttechnicaldetail = None
        self._resulttechnicalnote = None
        self._shutinpres1 = None
        self._shutinpres10 = None
        self._shutinpres15 = None
        self._shutinpres3 = None
        self._shutinpres4 = None
        self._shutinpres5 = None
        self._shutinpresbhfinal = None
        self._shutinpresfinal = None
        self._shutinpresinitial = None
        self._shutinpresinst = None
        self._shutintmfinal = None
        self._stim = None
        self._stim_int_fluids = None
        self._stim_int_pres_dtls = None
        self._stim_int_props = None
        self._stim_int_stgs = None
        self._syscreatedate = None
        self._syscreateuser = None
        self._syslockchildren = None
        self._syslockchildrenui = None
        self._syslockdate = None
        self._syslockme = None
        self._syslockmeui = None
        self._sysmoddate = None
        self._sysmoduser = None
        self._systag = None
        self._szballs = None
        self._tempstaticavg = None
        self._temptreatavg = None
        self._typ1 = None
        self._typ2 = None
        self._usernum1 = None
        self._usernum2 = None
        self._usernum3 = None
        self._usertxt1 = None
        self._volcleantotal = None
        self._volco2total = None
        self._voln2total = None
        self._volrecoveredtotal = None
        self._volslurrytotal = None
        self.discriminator = None
        if ballsno is not None:
            self.ballsno = ballsno
        if breakdowngradient is not None:
            self.breakdowngradient = breakdowngradient
        if closuregradient is not None:
            self.closuregradient = closuregradient
        if com is not None:
            self.com = com
        if concbhavg is not None:
            self.concbhavg = concbhavg
        if concbhmax is not None:
            self.concbhmax = concbhmax
        if concbhmin is not None:
            self.concbhmin = concbhmin
        if concint is not None:
            self.concint = concint
        if concsurfavg is not None:
            self.concsurfavg = concsurfavg
        if concsurfmax is not None:
            self.concsurfmax = concsurfmax
        if concsurfmin is not None:
            self.concsurfmin = concsurfmin
        if deliverymode is not None:
            self.deliverymode = deliverymode
        if depthbtm is not None:
            self.depthbtm = depthbtm
        if depthbtmelement is not None:
            self.depthbtmelement = depthbtmelement
        if depthtop is not None:
            self.depthtop = depthtop
        if depthtopelement is not None:
            self.depthtopelement = depthtopelement
        if depthtopproppant is not None:
            self.depthtopproppant = depthtopproppant
        if des is not None:
            self.des = des
        if dttmend is not None:
            self.dttmend = dttmend
        if dttmstart is not None:
            self.dttmstart = dttmstart
        if durclosure is not None:
            self.durclosure = durclosure
        if durpump is not None:
            self.durpump = durpump
        if fluidefficiency is not None:
            self.fluidefficiency = fluidefficiency
        if fracdiagnosticmethod is not None:
            self.fracdiagnosticmethod = fracdiagnosticmethod
        if fracgradient is not None:
            self.fracgradient = fracgradient
        if fracgradientend is not None:
            self.fracgradientend = fracgradientend
        if fracheight is not None:
            self.fracheight = fracheight
        if fraclength is not None:
            self.fraclength = fraclength
        if fracwidth is not None:
            self.fracwidth = fracwidth
        if gasvollostdownhole is not None:
            self.gasvollostdownhole = gasvollostdownhole
        if gasvollostsurface is not None:
            self.gasvollostsurface = gasvollostsurface
        if gasvollosttransport is not None:
            self.gasvollosttransport = gasvollosttransport
        if idrec is not None:
            self.idrec = idrec
        if idrecparent is not None:
            self.idrecparent = idrecparent
        if idrecstring is not None:
            self.idrecstring = idrecstring
        if idrecstringtk is not None:
            self.idrecstringtk = idrecstringtk
        if idrecwellbore is not None:
            self.idrecwellbore = idrecwellbore
        if idrecwellboretk is not None:
            self.idrecwellboretk = idrecwellboretk
        if idreczoneor is not None:
            self.idreczoneor = idreczoneor
        if idreczoneortk is not None:
            self.idreczoneortk = idreczoneortk
        if idwell is not None:
            self.idwell = idwell
        if intrefno is not None:
            self.intrefno = intrefno
        if masspropdesign is not None:
            self.masspropdesign = masspropdesign
        if masspropinfrm is not None:
            self.masspropinfrm = masspropinfrm
        if masspropinwellbore is not None:
            self.masspropinwellbore = masspropinwellbore
        if masspropreturn is not None:
            self.masspropreturn = masspropreturn
        if massproptotal is not None:
            self.massproptotal = massproptotal
        if netpayest is not None:
            self.netpayest = netpayest
        if perfsopennoest is not None:
            self.perfsopennoest = perfsopennoest
        if presavgannulus is not None:
            self.presavgannulus = presavgannulus
        if presavgcasing is not None:
            self.presavgcasing = presavgcasing
        if presavgtubing is not None:
            self.presavgtubing = presavgtubing
        if presbhbreakdown is not None:
            self.presbhbreakdown = presbhbreakdown
        if presbhclosure is not None:
            self.presbhclosure = presbhclosure
        if presbhmethod is not None:
            self.presbhmethod = presbhmethod
        if presbreakdown is not None:
            self.presbreakdown = presbreakdown
        if presclosure is not None:
            self.presclosure = presclosure
        if presclosuremethod is not None:
            self.presclosuremethod = presclosuremethod
        if presfrictionloss is not None:
            self.presfrictionloss = presfrictionloss
        if preshyd is not None:
            self.preshyd = preshyd
        if presmaxannulus is not None:
            self.presmaxannulus = presmaxannulus
        if presmaxcasing is not None:
            self.presmaxcasing = presmaxcasing
        if presmaxtubing is not None:
            self.presmaxtubing = presmaxtubing
        if presminannulus is not None:
            self.presminannulus = presminannulus
        if presmincasing is not None:
            self.presmincasing = presmincasing
        if presmintubing is not None:
            self.presmintubing = presmintubing
        if presscreenout is not None:
            self.presscreenout = presscreenout
        if pressleeveshift is not None:
            self.pressleeveshift = pressleeveshift
        if prestreatavg is not None:
            self.prestreatavg = prestreatavg
        if prestreatmax is not None:
            self.prestreatmax = prestreatmax
        if prestreatmin is not None:
            self.prestreatmin = prestreatmin
        if proposed is not None:
            self.proposed = proposed
        if pumppoweravg is not None:
            self.pumppoweravg = pumppoweravg
        if pumppowerco2 is not None:
            self.pumppowerco2 = pumppowerco2
        if pumppowerfluid is not None:
            self.pumppowerfluid = pumppowerfluid
        if pumppowermax is not None:
            self.pumppowermax = pumppowermax
        if pumpsonlineno is not None:
            self.pumpsonlineno = pumpsonlineno
        if rateavgannulus is not None:
            self.rateavgannulus = rateavgannulus
        if rateavgcasing is not None:
            self.rateavgcasing = rateavgcasing
        if rateavgtubing is not None:
            self.rateavgtubing = rateavgtubing
        if ratebhavg is not None:
            self.ratebhavg = ratebhavg
        if ratebhmax is not None:
            self.ratebhmax = ratebhmax
        if ratebhmin is not None:
            self.ratebhmin = ratebhmin
        if ratebreakdown is not None:
            self.ratebreakdown = ratebreakdown
        if ratecleanavg is not None:
            self.ratecleanavg = ratecleanavg
        if ratecleanmax is not None:
            self.ratecleanmax = ratecleanmax
        if ratecleanmin is not None:
            self.ratecleanmin = ratecleanmin
        if ratemaxannulus is not None:
            self.ratemaxannulus = ratemaxannulus
        if ratemaxcasing is not None:
            self.ratemaxcasing = ratemaxcasing
        if ratemaxtubing is not None:
            self.ratemaxtubing = ratemaxtubing
        if rateslurryavg is not None:
            self.rateslurryavg = rateslurryavg
        if rateslurrymax is not None:
            self.rateslurrymax = rateslurrymax
        if rateslurrymin is not None:
            self.rateslurrymin = rateslurrymin
        if ratiopropdesigntotal is not None:
            self.ratiopropdesigntotal = ratiopropdesigntotal
        if resulttechnical is not None:
            self.resulttechnical = resulttechnical
        if resulttechnicaldetail is not None:
            self.resulttechnicaldetail = resulttechnicaldetail
        if resulttechnicalnote is not None:
            self.resulttechnicalnote = resulttechnicalnote
        if shutinpres1 is not None:
            self.shutinpres1 = shutinpres1
        if shutinpres10 is not None:
            self.shutinpres10 = shutinpres10
        if shutinpres15 is not None:
            self.shutinpres15 = shutinpres15
        if shutinpres3 is not None:
            self.shutinpres3 = shutinpres3
        if shutinpres4 is not None:
            self.shutinpres4 = shutinpres4
        if shutinpres5 is not None:
            self.shutinpres5 = shutinpres5
        if shutinpresbhfinal is not None:
            self.shutinpresbhfinal = shutinpresbhfinal
        if shutinpresfinal is not None:
            self.shutinpresfinal = shutinpresfinal
        if shutinpresinitial is not None:
            self.shutinpresinitial = shutinpresinitial
        if shutinpresinst is not None:
            self.shutinpresinst = shutinpresinst
        if shutintmfinal is not None:
            self.shutintmfinal = shutintmfinal
        if stim is not None:
            self.stim = stim
        if stim_int_fluids is not None:
            self.stim_int_fluids = stim_int_fluids
        if stim_int_pres_dtls is not None:
            self.stim_int_pres_dtls = stim_int_pres_dtls
        if stim_int_props is not None:
            self.stim_int_props = stim_int_props
        if stim_int_stgs is not None:
            self.stim_int_stgs = stim_int_stgs
        if syscreatedate is not None:
            self.syscreatedate = syscreatedate
        if syscreateuser is not None:
            self.syscreateuser = syscreateuser
        if syslockchildren is not None:
            self.syslockchildren = syslockchildren
        if syslockchildrenui is not None:
            self.syslockchildrenui = syslockchildrenui
        if syslockdate is not None:
            self.syslockdate = syslockdate
        if syslockme is not None:
            self.syslockme = syslockme
        if syslockmeui is not None:
            self.syslockmeui = syslockmeui
        if sysmoddate is not None:
            self.sysmoddate = sysmoddate
        if sysmoduser is not None:
            self.sysmoduser = sysmoduser
        if systag is not None:
            self.systag = systag
        if szballs is not None:
            self.szballs = szballs
        if tempstaticavg is not None:
            self.tempstaticavg = tempstaticavg
        if temptreatavg is not None:
            self.temptreatavg = temptreatavg
        if typ1 is not None:
            self.typ1 = typ1
        if typ2 is not None:
            self.typ2 = typ2
        if usernum1 is not None:
            self.usernum1 = usernum1
        if usernum2 is not None:
            self.usernum2 = usernum2
        if usernum3 is not None:
            self.usernum3 = usernum3
        if usertxt1 is not None:
            self.usertxt1 = usertxt1
        if volcleantotal is not None:
            self.volcleantotal = volcleantotal
        if volco2total is not None:
            self.volco2total = volco2total
        if voln2total is not None:
            self.voln2total = voln2total
        if volrecoveredtotal is not None:
            self.volrecoveredtotal = volrecoveredtotal
        if volslurrytotal is not None:
            self.volslurrytotal = volslurrytotal

    @property
    def ballsno(self):
        """Gets the ballsno of this StimInt.  # noqa: E501


        :return: The ballsno of this StimInt.  # noqa: E501
        :rtype: int
        """
        return self._ballsno

    @ballsno.setter
    def ballsno(self, ballsno):
        """Sets the ballsno of this StimInt.


        :param ballsno: The ballsno of this StimInt.  # noqa: E501
        :type: int
        """

        self._ballsno = ballsno

    @property
    def breakdowngradient(self):
        """Gets the breakdowngradient of this StimInt.  # noqa: E501


        :return: The breakdowngradient of this StimInt.  # noqa: E501
        :rtype: OneOfStimIntBreakdowngradient
        """
        return self._breakdowngradient

    @breakdowngradient.setter
    def breakdowngradient(self, breakdowngradient):
        """Sets the breakdowngradient of this StimInt.


        :param breakdowngradient: The breakdowngradient of this StimInt.  # noqa: E501
        :type: OneOfStimIntBreakdowngradient
        """

        self._breakdowngradient = breakdowngradient

    @property
    def closuregradient(self):
        """Gets the closuregradient of this StimInt.  # noqa: E501


        :return: The closuregradient of this StimInt.  # noqa: E501
        :rtype: OneOfStimIntClosuregradient
        """
        return self._closuregradient

    @closuregradient.setter
    def closuregradient(self, closuregradient):
        """Sets the closuregradient of this StimInt.


        :param closuregradient: The closuregradient of this StimInt.  # noqa: E501
        :type: OneOfStimIntClosuregradient
        """

        self._closuregradient = closuregradient

    @property
    def com(self):
        """Gets the com of this StimInt.  # noqa: E501


        :return: The com of this StimInt.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this StimInt.


        :param com: The com of this StimInt.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def concbhavg(self):
        """Gets the concbhavg of this StimInt.  # noqa: E501


        :return: The concbhavg of this StimInt.  # noqa: E501
        :rtype: OneOfStimIntConcbhavg
        """
        return self._concbhavg

    @concbhavg.setter
    def concbhavg(self, concbhavg):
        """Sets the concbhavg of this StimInt.


        :param concbhavg: The concbhavg of this StimInt.  # noqa: E501
        :type: OneOfStimIntConcbhavg
        """

        self._concbhavg = concbhavg

    @property
    def concbhmax(self):
        """Gets the concbhmax of this StimInt.  # noqa: E501


        :return: The concbhmax of this StimInt.  # noqa: E501
        :rtype: OneOfStimIntConcbhmax
        """
        return self._concbhmax

    @concbhmax.setter
    def concbhmax(self, concbhmax):
        """Sets the concbhmax of this StimInt.


        :param concbhmax: The concbhmax of this StimInt.  # noqa: E501
        :type: OneOfStimIntConcbhmax
        """

        self._concbhmax = concbhmax

    @property
    def concbhmin(self):
        """Gets the concbhmin of this StimInt.  # noqa: E501


        :return: The concbhmin of this StimInt.  # noqa: E501
        :rtype: OneOfStimIntConcbhmin
        """
        return self._concbhmin

    @concbhmin.setter
    def concbhmin(self, concbhmin):
        """Sets the concbhmin of this StimInt.


        :param concbhmin: The concbhmin of this StimInt.  # noqa: E501
        :type: OneOfStimIntConcbhmin
        """

        self._concbhmin = concbhmin

    @property
    def concint(self):
        """Gets the concint of this StimInt.  # noqa: E501


        :return: The concint of this StimInt.  # noqa: E501
        :rtype: OneOfStimIntConcint
        """
        return self._concint

    @concint.setter
    def concint(self, concint):
        """Sets the concint of this StimInt.


        :param concint: The concint of this StimInt.  # noqa: E501
        :type: OneOfStimIntConcint
        """

        self._concint = concint

    @property
    def concsurfavg(self):
        """Gets the concsurfavg of this StimInt.  # noqa: E501


        :return: The concsurfavg of this StimInt.  # noqa: E501
        :rtype: OneOfStimIntConcsurfavg
        """
        return self._concsurfavg

    @concsurfavg.setter
    def concsurfavg(self, concsurfavg):
        """Sets the concsurfavg of this StimInt.


        :param concsurfavg: The concsurfavg of this StimInt.  # noqa: E501
        :type: OneOfStimIntConcsurfavg
        """

        self._concsurfavg = concsurfavg

    @property
    def concsurfmax(self):
        """Gets the concsurfmax of this StimInt.  # noqa: E501


        :return: The concsurfmax of this StimInt.  # noqa: E501
        :rtype: OneOfStimIntConcsurfmax
        """
        return self._concsurfmax

    @concsurfmax.setter
    def concsurfmax(self, concsurfmax):
        """Sets the concsurfmax of this StimInt.


        :param concsurfmax: The concsurfmax of this StimInt.  # noqa: E501
        :type: OneOfStimIntConcsurfmax
        """

        self._concsurfmax = concsurfmax

    @property
    def concsurfmin(self):
        """Gets the concsurfmin of this StimInt.  # noqa: E501


        :return: The concsurfmin of this StimInt.  # noqa: E501
        :rtype: OneOfStimIntConcsurfmin
        """
        return self._concsurfmin

    @concsurfmin.setter
    def concsurfmin(self, concsurfmin):
        """Sets the concsurfmin of this StimInt.


        :param concsurfmin: The concsurfmin of this StimInt.  # noqa: E501
        :type: OneOfStimIntConcsurfmin
        """

        self._concsurfmin = concsurfmin

    @property
    def deliverymode(self):
        """Gets the deliverymode of this StimInt.  # noqa: E501


        :return: The deliverymode of this StimInt.  # noqa: E501
        :rtype: str
        """
        return self._deliverymode

    @deliverymode.setter
    def deliverymode(self, deliverymode):
        """Sets the deliverymode of this StimInt.


        :param deliverymode: The deliverymode of this StimInt.  # noqa: E501
        :type: str
        """

        self._deliverymode = deliverymode

    @property
    def depthbtm(self):
        """Gets the depthbtm of this StimInt.  # noqa: E501


        :return: The depthbtm of this StimInt.  # noqa: E501
        :rtype: OneOfStimIntDepthbtm
        """
        return self._depthbtm

    @depthbtm.setter
    def depthbtm(self, depthbtm):
        """Sets the depthbtm of this StimInt.


        :param depthbtm: The depthbtm of this StimInt.  # noqa: E501
        :type: OneOfStimIntDepthbtm
        """

        self._depthbtm = depthbtm

    @property
    def depthbtmelement(self):
        """Gets the depthbtmelement of this StimInt.  # noqa: E501


        :return: The depthbtmelement of this StimInt.  # noqa: E501
        :rtype: OneOfStimIntDepthbtmelement
        """
        return self._depthbtmelement

    @depthbtmelement.setter
    def depthbtmelement(self, depthbtmelement):
        """Sets the depthbtmelement of this StimInt.


        :param depthbtmelement: The depthbtmelement of this StimInt.  # noqa: E501
        :type: OneOfStimIntDepthbtmelement
        """

        self._depthbtmelement = depthbtmelement

    @property
    def depthtop(self):
        """Gets the depthtop of this StimInt.  # noqa: E501


        :return: The depthtop of this StimInt.  # noqa: E501
        :rtype: OneOfStimIntDepthtop
        """
        return self._depthtop

    @depthtop.setter
    def depthtop(self, depthtop):
        """Sets the depthtop of this StimInt.


        :param depthtop: The depthtop of this StimInt.  # noqa: E501
        :type: OneOfStimIntDepthtop
        """

        self._depthtop = depthtop

    @property
    def depthtopelement(self):
        """Gets the depthtopelement of this StimInt.  # noqa: E501


        :return: The depthtopelement of this StimInt.  # noqa: E501
        :rtype: OneOfStimIntDepthtopelement
        """
        return self._depthtopelement

    @depthtopelement.setter
    def depthtopelement(self, depthtopelement):
        """Sets the depthtopelement of this StimInt.


        :param depthtopelement: The depthtopelement of this StimInt.  # noqa: E501
        :type: OneOfStimIntDepthtopelement
        """

        self._depthtopelement = depthtopelement

    @property
    def depthtopproppant(self):
        """Gets the depthtopproppant of this StimInt.  # noqa: E501


        :return: The depthtopproppant of this StimInt.  # noqa: E501
        :rtype: OneOfStimIntDepthtopproppant
        """
        return self._depthtopproppant

    @depthtopproppant.setter
    def depthtopproppant(self, depthtopproppant):
        """Sets the depthtopproppant of this StimInt.


        :param depthtopproppant: The depthtopproppant of this StimInt.  # noqa: E501
        :type: OneOfStimIntDepthtopproppant
        """

        self._depthtopproppant = depthtopproppant

    @property
    def des(self):
        """Gets the des of this StimInt.  # noqa: E501


        :return: The des of this StimInt.  # noqa: E501
        :rtype: str
        """
        return self._des

    @des.setter
    def des(self, des):
        """Sets the des of this StimInt.


        :param des: The des of this StimInt.  # noqa: E501
        :type: str
        """

        self._des = des

    @property
    def dttmend(self):
        """Gets the dttmend of this StimInt.  # noqa: E501


        :return: The dttmend of this StimInt.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmend

    @dttmend.setter
    def dttmend(self, dttmend):
        """Sets the dttmend of this StimInt.


        :param dttmend: The dttmend of this StimInt.  # noqa: E501
        :type: datetime
        """

        self._dttmend = dttmend

    @property
    def dttmstart(self):
        """Gets the dttmstart of this StimInt.  # noqa: E501


        :return: The dttmstart of this StimInt.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmstart

    @dttmstart.setter
    def dttmstart(self, dttmstart):
        """Sets the dttmstart of this StimInt.


        :param dttmstart: The dttmstart of this StimInt.  # noqa: E501
        :type: datetime
        """

        self._dttmstart = dttmstart

    @property
    def durclosure(self):
        """Gets the durclosure of this StimInt.  # noqa: E501


        :return: The durclosure of this StimInt.  # noqa: E501
        :rtype: OneOfStimIntDurclosure
        """
        return self._durclosure

    @durclosure.setter
    def durclosure(self, durclosure):
        """Sets the durclosure of this StimInt.


        :param durclosure: The durclosure of this StimInt.  # noqa: E501
        :type: OneOfStimIntDurclosure
        """

        self._durclosure = durclosure

    @property
    def durpump(self):
        """Gets the durpump of this StimInt.  # noqa: E501


        :return: The durpump of this StimInt.  # noqa: E501
        :rtype: OneOfStimIntDurpump
        """
        return self._durpump

    @durpump.setter
    def durpump(self, durpump):
        """Sets the durpump of this StimInt.


        :param durpump: The durpump of this StimInt.  # noqa: E501
        :type: OneOfStimIntDurpump
        """

        self._durpump = durpump

    @property
    def fluidefficiency(self):
        """Gets the fluidefficiency of this StimInt.  # noqa: E501


        :return: The fluidefficiency of this StimInt.  # noqa: E501
        :rtype: OneOfStimIntFluidefficiency
        """
        return self._fluidefficiency

    @fluidefficiency.setter
    def fluidefficiency(self, fluidefficiency):
        """Sets the fluidefficiency of this StimInt.


        :param fluidefficiency: The fluidefficiency of this StimInt.  # noqa: E501
        :type: OneOfStimIntFluidefficiency
        """

        self._fluidefficiency = fluidefficiency

    @property
    def fracdiagnosticmethod(self):
        """Gets the fracdiagnosticmethod of this StimInt.  # noqa: E501


        :return: The fracdiagnosticmethod of this StimInt.  # noqa: E501
        :rtype: str
        """
        return self._fracdiagnosticmethod

    @fracdiagnosticmethod.setter
    def fracdiagnosticmethod(self, fracdiagnosticmethod):
        """Sets the fracdiagnosticmethod of this StimInt.


        :param fracdiagnosticmethod: The fracdiagnosticmethod of this StimInt.  # noqa: E501
        :type: str
        """

        self._fracdiagnosticmethod = fracdiagnosticmethod

    @property
    def fracgradient(self):
        """Gets the fracgradient of this StimInt.  # noqa: E501


        :return: The fracgradient of this StimInt.  # noqa: E501
        :rtype: OneOfStimIntFracgradient
        """
        return self._fracgradient

    @fracgradient.setter
    def fracgradient(self, fracgradient):
        """Sets the fracgradient of this StimInt.


        :param fracgradient: The fracgradient of this StimInt.  # noqa: E501
        :type: OneOfStimIntFracgradient
        """

        self._fracgradient = fracgradient

    @property
    def fracgradientend(self):
        """Gets the fracgradientend of this StimInt.  # noqa: E501


        :return: The fracgradientend of this StimInt.  # noqa: E501
        :rtype: OneOfStimIntFracgradientend
        """
        return self._fracgradientend

    @fracgradientend.setter
    def fracgradientend(self, fracgradientend):
        """Sets the fracgradientend of this StimInt.


        :param fracgradientend: The fracgradientend of this StimInt.  # noqa: E501
        :type: OneOfStimIntFracgradientend
        """

        self._fracgradientend = fracgradientend

    @property
    def fracheight(self):
        """Gets the fracheight of this StimInt.  # noqa: E501


        :return: The fracheight of this StimInt.  # noqa: E501
        :rtype: OneOfStimIntFracheight
        """
        return self._fracheight

    @fracheight.setter
    def fracheight(self, fracheight):
        """Sets the fracheight of this StimInt.


        :param fracheight: The fracheight of this StimInt.  # noqa: E501
        :type: OneOfStimIntFracheight
        """

        self._fracheight = fracheight

    @property
    def fraclength(self):
        """Gets the fraclength of this StimInt.  # noqa: E501


        :return: The fraclength of this StimInt.  # noqa: E501
        :rtype: OneOfStimIntFraclength
        """
        return self._fraclength

    @fraclength.setter
    def fraclength(self, fraclength):
        """Sets the fraclength of this StimInt.


        :param fraclength: The fraclength of this StimInt.  # noqa: E501
        :type: OneOfStimIntFraclength
        """

        self._fraclength = fraclength

    @property
    def fracwidth(self):
        """Gets the fracwidth of this StimInt.  # noqa: E501


        :return: The fracwidth of this StimInt.  # noqa: E501
        :rtype: OneOfStimIntFracwidth
        """
        return self._fracwidth

    @fracwidth.setter
    def fracwidth(self, fracwidth):
        """Sets the fracwidth of this StimInt.


        :param fracwidth: The fracwidth of this StimInt.  # noqa: E501
        :type: OneOfStimIntFracwidth
        """

        self._fracwidth = fracwidth

    @property
    def gasvollostdownhole(self):
        """Gets the gasvollostdownhole of this StimInt.  # noqa: E501


        :return: The gasvollostdownhole of this StimInt.  # noqa: E501
        :rtype: OneOfStimIntGasvollostdownhole
        """
        return self._gasvollostdownhole

    @gasvollostdownhole.setter
    def gasvollostdownhole(self, gasvollostdownhole):
        """Sets the gasvollostdownhole of this StimInt.


        :param gasvollostdownhole: The gasvollostdownhole of this StimInt.  # noqa: E501
        :type: OneOfStimIntGasvollostdownhole
        """

        self._gasvollostdownhole = gasvollostdownhole

    @property
    def gasvollostsurface(self):
        """Gets the gasvollostsurface of this StimInt.  # noqa: E501


        :return: The gasvollostsurface of this StimInt.  # noqa: E501
        :rtype: OneOfStimIntGasvollostsurface
        """
        return self._gasvollostsurface

    @gasvollostsurface.setter
    def gasvollostsurface(self, gasvollostsurface):
        """Sets the gasvollostsurface of this StimInt.


        :param gasvollostsurface: The gasvollostsurface of this StimInt.  # noqa: E501
        :type: OneOfStimIntGasvollostsurface
        """

        self._gasvollostsurface = gasvollostsurface

    @property
    def gasvollosttransport(self):
        """Gets the gasvollosttransport of this StimInt.  # noqa: E501


        :return: The gasvollosttransport of this StimInt.  # noqa: E501
        :rtype: OneOfStimIntGasvollosttransport
        """
        return self._gasvollosttransport

    @gasvollosttransport.setter
    def gasvollosttransport(self, gasvollosttransport):
        """Sets the gasvollosttransport of this StimInt.


        :param gasvollosttransport: The gasvollosttransport of this StimInt.  # noqa: E501
        :type: OneOfStimIntGasvollosttransport
        """

        self._gasvollosttransport = gasvollosttransport

    @property
    def idrec(self):
        """Gets the idrec of this StimInt.  # noqa: E501


        :return: The idrec of this StimInt.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this StimInt.


        :param idrec: The idrec of this StimInt.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecparent(self):
        """Gets the idrecparent of this StimInt.  # noqa: E501


        :return: The idrecparent of this StimInt.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this StimInt.


        :param idrecparent: The idrecparent of this StimInt.  # noqa: E501
        :type: str
        """

        self._idrecparent = idrecparent

    @property
    def idrecstring(self):
        """Gets the idrecstring of this StimInt.  # noqa: E501


        :return: The idrecstring of this StimInt.  # noqa: E501
        :rtype: str
        """
        return self._idrecstring

    @idrecstring.setter
    def idrecstring(self, idrecstring):
        """Sets the idrecstring of this StimInt.


        :param idrecstring: The idrecstring of this StimInt.  # noqa: E501
        :type: str
        """

        self._idrecstring = idrecstring

    @property
    def idrecstringtk(self):
        """Gets the idrecstringtk of this StimInt.  # noqa: E501


        :return: The idrecstringtk of this StimInt.  # noqa: E501
        :rtype: str
        """
        return self._idrecstringtk

    @idrecstringtk.setter
    def idrecstringtk(self, idrecstringtk):
        """Sets the idrecstringtk of this StimInt.


        :param idrecstringtk: The idrecstringtk of this StimInt.  # noqa: E501
        :type: str
        """

        self._idrecstringtk = idrecstringtk

    @property
    def idrecwellbore(self):
        """Gets the idrecwellbore of this StimInt.  # noqa: E501


        :return: The idrecwellbore of this StimInt.  # noqa: E501
        :rtype: str
        """
        return self._idrecwellbore

    @idrecwellbore.setter
    def idrecwellbore(self, idrecwellbore):
        """Sets the idrecwellbore of this StimInt.


        :param idrecwellbore: The idrecwellbore of this StimInt.  # noqa: E501
        :type: str
        """

        self._idrecwellbore = idrecwellbore

    @property
    def idrecwellboretk(self):
        """Gets the idrecwellboretk of this StimInt.  # noqa: E501


        :return: The idrecwellboretk of this StimInt.  # noqa: E501
        :rtype: str
        """
        return self._idrecwellboretk

    @idrecwellboretk.setter
    def idrecwellboretk(self, idrecwellboretk):
        """Sets the idrecwellboretk of this StimInt.


        :param idrecwellboretk: The idrecwellboretk of this StimInt.  # noqa: E501
        :type: str
        """

        self._idrecwellboretk = idrecwellboretk

    @property
    def idreczoneor(self):
        """Gets the idreczoneor of this StimInt.  # noqa: E501


        :return: The idreczoneor of this StimInt.  # noqa: E501
        :rtype: str
        """
        return self._idreczoneor

    @idreczoneor.setter
    def idreczoneor(self, idreczoneor):
        """Sets the idreczoneor of this StimInt.


        :param idreczoneor: The idreczoneor of this StimInt.  # noqa: E501
        :type: str
        """

        self._idreczoneor = idreczoneor

    @property
    def idreczoneortk(self):
        """Gets the idreczoneortk of this StimInt.  # noqa: E501


        :return: The idreczoneortk of this StimInt.  # noqa: E501
        :rtype: str
        """
        return self._idreczoneortk

    @idreczoneortk.setter
    def idreczoneortk(self, idreczoneortk):
        """Sets the idreczoneortk of this StimInt.


        :param idreczoneortk: The idreczoneortk of this StimInt.  # noqa: E501
        :type: str
        """

        self._idreczoneortk = idreczoneortk

    @property
    def idwell(self):
        """Gets the idwell of this StimInt.  # noqa: E501


        :return: The idwell of this StimInt.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this StimInt.


        :param idwell: The idwell of this StimInt.  # noqa: E501
        :type: str
        """

        self._idwell = idwell

    @property
    def intrefno(self):
        """Gets the intrefno of this StimInt.  # noqa: E501


        :return: The intrefno of this StimInt.  # noqa: E501
        :rtype: int
        """
        return self._intrefno

    @intrefno.setter
    def intrefno(self, intrefno):
        """Sets the intrefno of this StimInt.


        :param intrefno: The intrefno of this StimInt.  # noqa: E501
        :type: int
        """

        self._intrefno = intrefno

    @property
    def masspropdesign(self):
        """Gets the masspropdesign of this StimInt.  # noqa: E501


        :return: The masspropdesign of this StimInt.  # noqa: E501
        :rtype: OneOfStimIntMasspropdesign
        """
        return self._masspropdesign

    @masspropdesign.setter
    def masspropdesign(self, masspropdesign):
        """Sets the masspropdesign of this StimInt.


        :param masspropdesign: The masspropdesign of this StimInt.  # noqa: E501
        :type: OneOfStimIntMasspropdesign
        """

        self._masspropdesign = masspropdesign

    @property
    def masspropinfrm(self):
        """Gets the masspropinfrm of this StimInt.  # noqa: E501


        :return: The masspropinfrm of this StimInt.  # noqa: E501
        :rtype: OneOfStimIntMasspropinfrm
        """
        return self._masspropinfrm

    @masspropinfrm.setter
    def masspropinfrm(self, masspropinfrm):
        """Sets the masspropinfrm of this StimInt.


        :param masspropinfrm: The masspropinfrm of this StimInt.  # noqa: E501
        :type: OneOfStimIntMasspropinfrm
        """

        self._masspropinfrm = masspropinfrm

    @property
    def masspropinwellbore(self):
        """Gets the masspropinwellbore of this StimInt.  # noqa: E501


        :return: The masspropinwellbore of this StimInt.  # noqa: E501
        :rtype: OneOfStimIntMasspropinwellbore
        """
        return self._masspropinwellbore

    @masspropinwellbore.setter
    def masspropinwellbore(self, masspropinwellbore):
        """Sets the masspropinwellbore of this StimInt.


        :param masspropinwellbore: The masspropinwellbore of this StimInt.  # noqa: E501
        :type: OneOfStimIntMasspropinwellbore
        """

        self._masspropinwellbore = masspropinwellbore

    @property
    def masspropreturn(self):
        """Gets the masspropreturn of this StimInt.  # noqa: E501


        :return: The masspropreturn of this StimInt.  # noqa: E501
        :rtype: OneOfStimIntMasspropreturn
        """
        return self._masspropreturn

    @masspropreturn.setter
    def masspropreturn(self, masspropreturn):
        """Sets the masspropreturn of this StimInt.


        :param masspropreturn: The masspropreturn of this StimInt.  # noqa: E501
        :type: OneOfStimIntMasspropreturn
        """

        self._masspropreturn = masspropreturn

    @property
    def massproptotal(self):
        """Gets the massproptotal of this StimInt.  # noqa: E501


        :return: The massproptotal of this StimInt.  # noqa: E501
        :rtype: OneOfStimIntMassproptotal
        """
        return self._massproptotal

    @massproptotal.setter
    def massproptotal(self, massproptotal):
        """Sets the massproptotal of this StimInt.


        :param massproptotal: The massproptotal of this StimInt.  # noqa: E501
        :type: OneOfStimIntMassproptotal
        """

        self._massproptotal = massproptotal

    @property
    def netpayest(self):
        """Gets the netpayest of this StimInt.  # noqa: E501


        :return: The netpayest of this StimInt.  # noqa: E501
        :rtype: OneOfStimIntNetpayest
        """
        return self._netpayest

    @netpayest.setter
    def netpayest(self, netpayest):
        """Sets the netpayest of this StimInt.


        :param netpayest: The netpayest of this StimInt.  # noqa: E501
        :type: OneOfStimIntNetpayest
        """

        self._netpayest = netpayest

    @property
    def perfsopennoest(self):
        """Gets the perfsopennoest of this StimInt.  # noqa: E501


        :return: The perfsopennoest of this StimInt.  # noqa: E501
        :rtype: int
        """
        return self._perfsopennoest

    @perfsopennoest.setter
    def perfsopennoest(self, perfsopennoest):
        """Sets the perfsopennoest of this StimInt.


        :param perfsopennoest: The perfsopennoest of this StimInt.  # noqa: E501
        :type: int
        """

        self._perfsopennoest = perfsopennoest

    @property
    def presavgannulus(self):
        """Gets the presavgannulus of this StimInt.  # noqa: E501


        :return: The presavgannulus of this StimInt.  # noqa: E501
        :rtype: OneOfStimIntPresavgannulus
        """
        return self._presavgannulus

    @presavgannulus.setter
    def presavgannulus(self, presavgannulus):
        """Sets the presavgannulus of this StimInt.


        :param presavgannulus: The presavgannulus of this StimInt.  # noqa: E501
        :type: OneOfStimIntPresavgannulus
        """

        self._presavgannulus = presavgannulus

    @property
    def presavgcasing(self):
        """Gets the presavgcasing of this StimInt.  # noqa: E501


        :return: The presavgcasing of this StimInt.  # noqa: E501
        :rtype: OneOfStimIntPresavgcasing
        """
        return self._presavgcasing

    @presavgcasing.setter
    def presavgcasing(self, presavgcasing):
        """Sets the presavgcasing of this StimInt.


        :param presavgcasing: The presavgcasing of this StimInt.  # noqa: E501
        :type: OneOfStimIntPresavgcasing
        """

        self._presavgcasing = presavgcasing

    @property
    def presavgtubing(self):
        """Gets the presavgtubing of this StimInt.  # noqa: E501


        :return: The presavgtubing of this StimInt.  # noqa: E501
        :rtype: OneOfStimIntPresavgtubing
        """
        return self._presavgtubing

    @presavgtubing.setter
    def presavgtubing(self, presavgtubing):
        """Sets the presavgtubing of this StimInt.


        :param presavgtubing: The presavgtubing of this StimInt.  # noqa: E501
        :type: OneOfStimIntPresavgtubing
        """

        self._presavgtubing = presavgtubing

    @property
    def presbhbreakdown(self):
        """Gets the presbhbreakdown of this StimInt.  # noqa: E501


        :return: The presbhbreakdown of this StimInt.  # noqa: E501
        :rtype: OneOfStimIntPresbhbreakdown
        """
        return self._presbhbreakdown

    @presbhbreakdown.setter
    def presbhbreakdown(self, presbhbreakdown):
        """Sets the presbhbreakdown of this StimInt.


        :param presbhbreakdown: The presbhbreakdown of this StimInt.  # noqa: E501
        :type: OneOfStimIntPresbhbreakdown
        """

        self._presbhbreakdown = presbhbreakdown

    @property
    def presbhclosure(self):
        """Gets the presbhclosure of this StimInt.  # noqa: E501


        :return: The presbhclosure of this StimInt.  # noqa: E501
        :rtype: OneOfStimIntPresbhclosure
        """
        return self._presbhclosure

    @presbhclosure.setter
    def presbhclosure(self, presbhclosure):
        """Sets the presbhclosure of this StimInt.


        :param presbhclosure: The presbhclosure of this StimInt.  # noqa: E501
        :type: OneOfStimIntPresbhclosure
        """

        self._presbhclosure = presbhclosure

    @property
    def presbhmethod(self):
        """Gets the presbhmethod of this StimInt.  # noqa: E501


        :return: The presbhmethod of this StimInt.  # noqa: E501
        :rtype: str
        """
        return self._presbhmethod

    @presbhmethod.setter
    def presbhmethod(self, presbhmethod):
        """Sets the presbhmethod of this StimInt.


        :param presbhmethod: The presbhmethod of this StimInt.  # noqa: E501
        :type: str
        """

        self._presbhmethod = presbhmethod

    @property
    def presbreakdown(self):
        """Gets the presbreakdown of this StimInt.  # noqa: E501


        :return: The presbreakdown of this StimInt.  # noqa: E501
        :rtype: OneOfStimIntPresbreakdown
        """
        return self._presbreakdown

    @presbreakdown.setter
    def presbreakdown(self, presbreakdown):
        """Sets the presbreakdown of this StimInt.


        :param presbreakdown: The presbreakdown of this StimInt.  # noqa: E501
        :type: OneOfStimIntPresbreakdown
        """

        self._presbreakdown = presbreakdown

    @property
    def presclosure(self):
        """Gets the presclosure of this StimInt.  # noqa: E501


        :return: The presclosure of this StimInt.  # noqa: E501
        :rtype: OneOfStimIntPresclosure
        """
        return self._presclosure

    @presclosure.setter
    def presclosure(self, presclosure):
        """Sets the presclosure of this StimInt.


        :param presclosure: The presclosure of this StimInt.  # noqa: E501
        :type: OneOfStimIntPresclosure
        """

        self._presclosure = presclosure

    @property
    def presclosuremethod(self):
        """Gets the presclosuremethod of this StimInt.  # noqa: E501


        :return: The presclosuremethod of this StimInt.  # noqa: E501
        :rtype: str
        """
        return self._presclosuremethod

    @presclosuremethod.setter
    def presclosuremethod(self, presclosuremethod):
        """Sets the presclosuremethod of this StimInt.


        :param presclosuremethod: The presclosuremethod of this StimInt.  # noqa: E501
        :type: str
        """

        self._presclosuremethod = presclosuremethod

    @property
    def presfrictionloss(self):
        """Gets the presfrictionloss of this StimInt.  # noqa: E501


        :return: The presfrictionloss of this StimInt.  # noqa: E501
        :rtype: OneOfStimIntPresfrictionloss
        """
        return self._presfrictionloss

    @presfrictionloss.setter
    def presfrictionloss(self, presfrictionloss):
        """Sets the presfrictionloss of this StimInt.


        :param presfrictionloss: The presfrictionloss of this StimInt.  # noqa: E501
        :type: OneOfStimIntPresfrictionloss
        """

        self._presfrictionloss = presfrictionloss

    @property
    def preshyd(self):
        """Gets the preshyd of this StimInt.  # noqa: E501


        :return: The preshyd of this StimInt.  # noqa: E501
        :rtype: OneOfStimIntPreshyd
        """
        return self._preshyd

    @preshyd.setter
    def preshyd(self, preshyd):
        """Sets the preshyd of this StimInt.


        :param preshyd: The preshyd of this StimInt.  # noqa: E501
        :type: OneOfStimIntPreshyd
        """

        self._preshyd = preshyd

    @property
    def presmaxannulus(self):
        """Gets the presmaxannulus of this StimInt.  # noqa: E501


        :return: The presmaxannulus of this StimInt.  # noqa: E501
        :rtype: OneOfStimIntPresmaxannulus
        """
        return self._presmaxannulus

    @presmaxannulus.setter
    def presmaxannulus(self, presmaxannulus):
        """Sets the presmaxannulus of this StimInt.


        :param presmaxannulus: The presmaxannulus of this StimInt.  # noqa: E501
        :type: OneOfStimIntPresmaxannulus
        """

        self._presmaxannulus = presmaxannulus

    @property
    def presmaxcasing(self):
        """Gets the presmaxcasing of this StimInt.  # noqa: E501


        :return: The presmaxcasing of this StimInt.  # noqa: E501
        :rtype: OneOfStimIntPresmaxcasing
        """
        return self._presmaxcasing

    @presmaxcasing.setter
    def presmaxcasing(self, presmaxcasing):
        """Sets the presmaxcasing of this StimInt.


        :param presmaxcasing: The presmaxcasing of this StimInt.  # noqa: E501
        :type: OneOfStimIntPresmaxcasing
        """

        self._presmaxcasing = presmaxcasing

    @property
    def presmaxtubing(self):
        """Gets the presmaxtubing of this StimInt.  # noqa: E501


        :return: The presmaxtubing of this StimInt.  # noqa: E501
        :rtype: OneOfStimIntPresmaxtubing
        """
        return self._presmaxtubing

    @presmaxtubing.setter
    def presmaxtubing(self, presmaxtubing):
        """Sets the presmaxtubing of this StimInt.


        :param presmaxtubing: The presmaxtubing of this StimInt.  # noqa: E501
        :type: OneOfStimIntPresmaxtubing
        """

        self._presmaxtubing = presmaxtubing

    @property
    def presminannulus(self):
        """Gets the presminannulus of this StimInt.  # noqa: E501


        :return: The presminannulus of this StimInt.  # noqa: E501
        :rtype: OneOfStimIntPresminannulus
        """
        return self._presminannulus

    @presminannulus.setter
    def presminannulus(self, presminannulus):
        """Sets the presminannulus of this StimInt.


        :param presminannulus: The presminannulus of this StimInt.  # noqa: E501
        :type: OneOfStimIntPresminannulus
        """

        self._presminannulus = presminannulus

    @property
    def presmincasing(self):
        """Gets the presmincasing of this StimInt.  # noqa: E501


        :return: The presmincasing of this StimInt.  # noqa: E501
        :rtype: OneOfStimIntPresmincasing
        """
        return self._presmincasing

    @presmincasing.setter
    def presmincasing(self, presmincasing):
        """Sets the presmincasing of this StimInt.


        :param presmincasing: The presmincasing of this StimInt.  # noqa: E501
        :type: OneOfStimIntPresmincasing
        """

        self._presmincasing = presmincasing

    @property
    def presmintubing(self):
        """Gets the presmintubing of this StimInt.  # noqa: E501


        :return: The presmintubing of this StimInt.  # noqa: E501
        :rtype: OneOfStimIntPresmintubing
        """
        return self._presmintubing

    @presmintubing.setter
    def presmintubing(self, presmintubing):
        """Sets the presmintubing of this StimInt.


        :param presmintubing: The presmintubing of this StimInt.  # noqa: E501
        :type: OneOfStimIntPresmintubing
        """

        self._presmintubing = presmintubing

    @property
    def presscreenout(self):
        """Gets the presscreenout of this StimInt.  # noqa: E501


        :return: The presscreenout of this StimInt.  # noqa: E501
        :rtype: OneOfStimIntPresscreenout
        """
        return self._presscreenout

    @presscreenout.setter
    def presscreenout(self, presscreenout):
        """Sets the presscreenout of this StimInt.


        :param presscreenout: The presscreenout of this StimInt.  # noqa: E501
        :type: OneOfStimIntPresscreenout
        """

        self._presscreenout = presscreenout

    @property
    def pressleeveshift(self):
        """Gets the pressleeveshift of this StimInt.  # noqa: E501


        :return: The pressleeveshift of this StimInt.  # noqa: E501
        :rtype: OneOfStimIntPressleeveshift
        """
        return self._pressleeveshift

    @pressleeveshift.setter
    def pressleeveshift(self, pressleeveshift):
        """Sets the pressleeveshift of this StimInt.


        :param pressleeveshift: The pressleeveshift of this StimInt.  # noqa: E501
        :type: OneOfStimIntPressleeveshift
        """

        self._pressleeveshift = pressleeveshift

    @property
    def prestreatavg(self):
        """Gets the prestreatavg of this StimInt.  # noqa: E501


        :return: The prestreatavg of this StimInt.  # noqa: E501
        :rtype: OneOfStimIntPrestreatavg
        """
        return self._prestreatavg

    @prestreatavg.setter
    def prestreatavg(self, prestreatavg):
        """Sets the prestreatavg of this StimInt.


        :param prestreatavg: The prestreatavg of this StimInt.  # noqa: E501
        :type: OneOfStimIntPrestreatavg
        """

        self._prestreatavg = prestreatavg

    @property
    def prestreatmax(self):
        """Gets the prestreatmax of this StimInt.  # noqa: E501


        :return: The prestreatmax of this StimInt.  # noqa: E501
        :rtype: OneOfStimIntPrestreatmax
        """
        return self._prestreatmax

    @prestreatmax.setter
    def prestreatmax(self, prestreatmax):
        """Sets the prestreatmax of this StimInt.


        :param prestreatmax: The prestreatmax of this StimInt.  # noqa: E501
        :type: OneOfStimIntPrestreatmax
        """

        self._prestreatmax = prestreatmax

    @property
    def prestreatmin(self):
        """Gets the prestreatmin of this StimInt.  # noqa: E501


        :return: The prestreatmin of this StimInt.  # noqa: E501
        :rtype: OneOfStimIntPrestreatmin
        """
        return self._prestreatmin

    @prestreatmin.setter
    def prestreatmin(self, prestreatmin):
        """Sets the prestreatmin of this StimInt.


        :param prestreatmin: The prestreatmin of this StimInt.  # noqa: E501
        :type: OneOfStimIntPrestreatmin
        """

        self._prestreatmin = prestreatmin

    @property
    def proposed(self):
        """Gets the proposed of this StimInt.  # noqa: E501


        :return: The proposed of this StimInt.  # noqa: E501
        :rtype: int
        """
        return self._proposed

    @proposed.setter
    def proposed(self, proposed):
        """Sets the proposed of this StimInt.


        :param proposed: The proposed of this StimInt.  # noqa: E501
        :type: int
        """

        self._proposed = proposed

    @property
    def pumppoweravg(self):
        """Gets the pumppoweravg of this StimInt.  # noqa: E501


        :return: The pumppoweravg of this StimInt.  # noqa: E501
        :rtype: OneOfStimIntPumppoweravg
        """
        return self._pumppoweravg

    @pumppoweravg.setter
    def pumppoweravg(self, pumppoweravg):
        """Sets the pumppoweravg of this StimInt.


        :param pumppoweravg: The pumppoweravg of this StimInt.  # noqa: E501
        :type: OneOfStimIntPumppoweravg
        """

        self._pumppoweravg = pumppoweravg

    @property
    def pumppowerco2(self):
        """Gets the pumppowerco2 of this StimInt.  # noqa: E501


        :return: The pumppowerco2 of this StimInt.  # noqa: E501
        :rtype: OneOfStimIntPumppowerco2
        """
        return self._pumppowerco2

    @pumppowerco2.setter
    def pumppowerco2(self, pumppowerco2):
        """Sets the pumppowerco2 of this StimInt.


        :param pumppowerco2: The pumppowerco2 of this StimInt.  # noqa: E501
        :type: OneOfStimIntPumppowerco2
        """

        self._pumppowerco2 = pumppowerco2

    @property
    def pumppowerfluid(self):
        """Gets the pumppowerfluid of this StimInt.  # noqa: E501


        :return: The pumppowerfluid of this StimInt.  # noqa: E501
        :rtype: OneOfStimIntPumppowerfluid
        """
        return self._pumppowerfluid

    @pumppowerfluid.setter
    def pumppowerfluid(self, pumppowerfluid):
        """Sets the pumppowerfluid of this StimInt.


        :param pumppowerfluid: The pumppowerfluid of this StimInt.  # noqa: E501
        :type: OneOfStimIntPumppowerfluid
        """

        self._pumppowerfluid = pumppowerfluid

    @property
    def pumppowermax(self):
        """Gets the pumppowermax of this StimInt.  # noqa: E501


        :return: The pumppowermax of this StimInt.  # noqa: E501
        :rtype: OneOfStimIntPumppowermax
        """
        return self._pumppowermax

    @pumppowermax.setter
    def pumppowermax(self, pumppowermax):
        """Sets the pumppowermax of this StimInt.


        :param pumppowermax: The pumppowermax of this StimInt.  # noqa: E501
        :type: OneOfStimIntPumppowermax
        """

        self._pumppowermax = pumppowermax

    @property
    def pumpsonlineno(self):
        """Gets the pumpsonlineno of this StimInt.  # noqa: E501


        :return: The pumpsonlineno of this StimInt.  # noqa: E501
        :rtype: int
        """
        return self._pumpsonlineno

    @pumpsonlineno.setter
    def pumpsonlineno(self, pumpsonlineno):
        """Sets the pumpsonlineno of this StimInt.


        :param pumpsonlineno: The pumpsonlineno of this StimInt.  # noqa: E501
        :type: int
        """

        self._pumpsonlineno = pumpsonlineno

    @property
    def rateavgannulus(self):
        """Gets the rateavgannulus of this StimInt.  # noqa: E501


        :return: The rateavgannulus of this StimInt.  # noqa: E501
        :rtype: OneOfStimIntRateavgannulus
        """
        return self._rateavgannulus

    @rateavgannulus.setter
    def rateavgannulus(self, rateavgannulus):
        """Sets the rateavgannulus of this StimInt.


        :param rateavgannulus: The rateavgannulus of this StimInt.  # noqa: E501
        :type: OneOfStimIntRateavgannulus
        """

        self._rateavgannulus = rateavgannulus

    @property
    def rateavgcasing(self):
        """Gets the rateavgcasing of this StimInt.  # noqa: E501


        :return: The rateavgcasing of this StimInt.  # noqa: E501
        :rtype: OneOfStimIntRateavgcasing
        """
        return self._rateavgcasing

    @rateavgcasing.setter
    def rateavgcasing(self, rateavgcasing):
        """Sets the rateavgcasing of this StimInt.


        :param rateavgcasing: The rateavgcasing of this StimInt.  # noqa: E501
        :type: OneOfStimIntRateavgcasing
        """

        self._rateavgcasing = rateavgcasing

    @property
    def rateavgtubing(self):
        """Gets the rateavgtubing of this StimInt.  # noqa: E501


        :return: The rateavgtubing of this StimInt.  # noqa: E501
        :rtype: OneOfStimIntRateavgtubing
        """
        return self._rateavgtubing

    @rateavgtubing.setter
    def rateavgtubing(self, rateavgtubing):
        """Sets the rateavgtubing of this StimInt.


        :param rateavgtubing: The rateavgtubing of this StimInt.  # noqa: E501
        :type: OneOfStimIntRateavgtubing
        """

        self._rateavgtubing = rateavgtubing

    @property
    def ratebhavg(self):
        """Gets the ratebhavg of this StimInt.  # noqa: E501


        :return: The ratebhavg of this StimInt.  # noqa: E501
        :rtype: OneOfStimIntRatebhavg
        """
        return self._ratebhavg

    @ratebhavg.setter
    def ratebhavg(self, ratebhavg):
        """Sets the ratebhavg of this StimInt.


        :param ratebhavg: The ratebhavg of this StimInt.  # noqa: E501
        :type: OneOfStimIntRatebhavg
        """

        self._ratebhavg = ratebhavg

    @property
    def ratebhmax(self):
        """Gets the ratebhmax of this StimInt.  # noqa: E501


        :return: The ratebhmax of this StimInt.  # noqa: E501
        :rtype: OneOfStimIntRatebhmax
        """
        return self._ratebhmax

    @ratebhmax.setter
    def ratebhmax(self, ratebhmax):
        """Sets the ratebhmax of this StimInt.


        :param ratebhmax: The ratebhmax of this StimInt.  # noqa: E501
        :type: OneOfStimIntRatebhmax
        """

        self._ratebhmax = ratebhmax

    @property
    def ratebhmin(self):
        """Gets the ratebhmin of this StimInt.  # noqa: E501


        :return: The ratebhmin of this StimInt.  # noqa: E501
        :rtype: OneOfStimIntRatebhmin
        """
        return self._ratebhmin

    @ratebhmin.setter
    def ratebhmin(self, ratebhmin):
        """Sets the ratebhmin of this StimInt.


        :param ratebhmin: The ratebhmin of this StimInt.  # noqa: E501
        :type: OneOfStimIntRatebhmin
        """

        self._ratebhmin = ratebhmin

    @property
    def ratebreakdown(self):
        """Gets the ratebreakdown of this StimInt.  # noqa: E501


        :return: The ratebreakdown of this StimInt.  # noqa: E501
        :rtype: OneOfStimIntRatebreakdown
        """
        return self._ratebreakdown

    @ratebreakdown.setter
    def ratebreakdown(self, ratebreakdown):
        """Sets the ratebreakdown of this StimInt.


        :param ratebreakdown: The ratebreakdown of this StimInt.  # noqa: E501
        :type: OneOfStimIntRatebreakdown
        """

        self._ratebreakdown = ratebreakdown

    @property
    def ratecleanavg(self):
        """Gets the ratecleanavg of this StimInt.  # noqa: E501


        :return: The ratecleanavg of this StimInt.  # noqa: E501
        :rtype: OneOfStimIntRatecleanavg
        """
        return self._ratecleanavg

    @ratecleanavg.setter
    def ratecleanavg(self, ratecleanavg):
        """Sets the ratecleanavg of this StimInt.


        :param ratecleanavg: The ratecleanavg of this StimInt.  # noqa: E501
        :type: OneOfStimIntRatecleanavg
        """

        self._ratecleanavg = ratecleanavg

    @property
    def ratecleanmax(self):
        """Gets the ratecleanmax of this StimInt.  # noqa: E501


        :return: The ratecleanmax of this StimInt.  # noqa: E501
        :rtype: OneOfStimIntRatecleanmax
        """
        return self._ratecleanmax

    @ratecleanmax.setter
    def ratecleanmax(self, ratecleanmax):
        """Sets the ratecleanmax of this StimInt.


        :param ratecleanmax: The ratecleanmax of this StimInt.  # noqa: E501
        :type: OneOfStimIntRatecleanmax
        """

        self._ratecleanmax = ratecleanmax

    @property
    def ratecleanmin(self):
        """Gets the ratecleanmin of this StimInt.  # noqa: E501


        :return: The ratecleanmin of this StimInt.  # noqa: E501
        :rtype: OneOfStimIntRatecleanmin
        """
        return self._ratecleanmin

    @ratecleanmin.setter
    def ratecleanmin(self, ratecleanmin):
        """Sets the ratecleanmin of this StimInt.


        :param ratecleanmin: The ratecleanmin of this StimInt.  # noqa: E501
        :type: OneOfStimIntRatecleanmin
        """

        self._ratecleanmin = ratecleanmin

    @property
    def ratemaxannulus(self):
        """Gets the ratemaxannulus of this StimInt.  # noqa: E501


        :return: The ratemaxannulus of this StimInt.  # noqa: E501
        :rtype: OneOfStimIntRatemaxannulus
        """
        return self._ratemaxannulus

    @ratemaxannulus.setter
    def ratemaxannulus(self, ratemaxannulus):
        """Sets the ratemaxannulus of this StimInt.


        :param ratemaxannulus: The ratemaxannulus of this StimInt.  # noqa: E501
        :type: OneOfStimIntRatemaxannulus
        """

        self._ratemaxannulus = ratemaxannulus

    @property
    def ratemaxcasing(self):
        """Gets the ratemaxcasing of this StimInt.  # noqa: E501


        :return: The ratemaxcasing of this StimInt.  # noqa: E501
        :rtype: OneOfStimIntRatemaxcasing
        """
        return self._ratemaxcasing

    @ratemaxcasing.setter
    def ratemaxcasing(self, ratemaxcasing):
        """Sets the ratemaxcasing of this StimInt.


        :param ratemaxcasing: The ratemaxcasing of this StimInt.  # noqa: E501
        :type: OneOfStimIntRatemaxcasing
        """

        self._ratemaxcasing = ratemaxcasing

    @property
    def ratemaxtubing(self):
        """Gets the ratemaxtubing of this StimInt.  # noqa: E501


        :return: The ratemaxtubing of this StimInt.  # noqa: E501
        :rtype: OneOfStimIntRatemaxtubing
        """
        return self._ratemaxtubing

    @ratemaxtubing.setter
    def ratemaxtubing(self, ratemaxtubing):
        """Sets the ratemaxtubing of this StimInt.


        :param ratemaxtubing: The ratemaxtubing of this StimInt.  # noqa: E501
        :type: OneOfStimIntRatemaxtubing
        """

        self._ratemaxtubing = ratemaxtubing

    @property
    def rateslurryavg(self):
        """Gets the rateslurryavg of this StimInt.  # noqa: E501


        :return: The rateslurryavg of this StimInt.  # noqa: E501
        :rtype: OneOfStimIntRateslurryavg
        """
        return self._rateslurryavg

    @rateslurryavg.setter
    def rateslurryavg(self, rateslurryavg):
        """Sets the rateslurryavg of this StimInt.


        :param rateslurryavg: The rateslurryavg of this StimInt.  # noqa: E501
        :type: OneOfStimIntRateslurryavg
        """

        self._rateslurryavg = rateslurryavg

    @property
    def rateslurrymax(self):
        """Gets the rateslurrymax of this StimInt.  # noqa: E501


        :return: The rateslurrymax of this StimInt.  # noqa: E501
        :rtype: OneOfStimIntRateslurrymax
        """
        return self._rateslurrymax

    @rateslurrymax.setter
    def rateslurrymax(self, rateslurrymax):
        """Sets the rateslurrymax of this StimInt.


        :param rateslurrymax: The rateslurrymax of this StimInt.  # noqa: E501
        :type: OneOfStimIntRateslurrymax
        """

        self._rateslurrymax = rateslurrymax

    @property
    def rateslurrymin(self):
        """Gets the rateslurrymin of this StimInt.  # noqa: E501


        :return: The rateslurrymin of this StimInt.  # noqa: E501
        :rtype: OneOfStimIntRateslurrymin
        """
        return self._rateslurrymin

    @rateslurrymin.setter
    def rateslurrymin(self, rateslurrymin):
        """Sets the rateslurrymin of this StimInt.


        :param rateslurrymin: The rateslurrymin of this StimInt.  # noqa: E501
        :type: OneOfStimIntRateslurrymin
        """

        self._rateslurrymin = rateslurrymin

    @property
    def ratiopropdesigntotal(self):
        """Gets the ratiopropdesigntotal of this StimInt.  # noqa: E501


        :return: The ratiopropdesigntotal of this StimInt.  # noqa: E501
        :rtype: OneOfStimIntRatiopropdesigntotal
        """
        return self._ratiopropdesigntotal

    @ratiopropdesigntotal.setter
    def ratiopropdesigntotal(self, ratiopropdesigntotal):
        """Sets the ratiopropdesigntotal of this StimInt.


        :param ratiopropdesigntotal: The ratiopropdesigntotal of this StimInt.  # noqa: E501
        :type: OneOfStimIntRatiopropdesigntotal
        """

        self._ratiopropdesigntotal = ratiopropdesigntotal

    @property
    def resulttechnical(self):
        """Gets the resulttechnical of this StimInt.  # noqa: E501


        :return: The resulttechnical of this StimInt.  # noqa: E501
        :rtype: str
        """
        return self._resulttechnical

    @resulttechnical.setter
    def resulttechnical(self, resulttechnical):
        """Sets the resulttechnical of this StimInt.


        :param resulttechnical: The resulttechnical of this StimInt.  # noqa: E501
        :type: str
        """

        self._resulttechnical = resulttechnical

    @property
    def resulttechnicaldetail(self):
        """Gets the resulttechnicaldetail of this StimInt.  # noqa: E501


        :return: The resulttechnicaldetail of this StimInt.  # noqa: E501
        :rtype: str
        """
        return self._resulttechnicaldetail

    @resulttechnicaldetail.setter
    def resulttechnicaldetail(self, resulttechnicaldetail):
        """Sets the resulttechnicaldetail of this StimInt.


        :param resulttechnicaldetail: The resulttechnicaldetail of this StimInt.  # noqa: E501
        :type: str
        """

        self._resulttechnicaldetail = resulttechnicaldetail

    @property
    def resulttechnicalnote(self):
        """Gets the resulttechnicalnote of this StimInt.  # noqa: E501


        :return: The resulttechnicalnote of this StimInt.  # noqa: E501
        :rtype: str
        """
        return self._resulttechnicalnote

    @resulttechnicalnote.setter
    def resulttechnicalnote(self, resulttechnicalnote):
        """Sets the resulttechnicalnote of this StimInt.


        :param resulttechnicalnote: The resulttechnicalnote of this StimInt.  # noqa: E501
        :type: str
        """

        self._resulttechnicalnote = resulttechnicalnote

    @property
    def shutinpres1(self):
        """Gets the shutinpres1 of this StimInt.  # noqa: E501


        :return: The shutinpres1 of this StimInt.  # noqa: E501
        :rtype: OneOfStimIntShutinpres1
        """
        return self._shutinpres1

    @shutinpres1.setter
    def shutinpres1(self, shutinpres1):
        """Sets the shutinpres1 of this StimInt.


        :param shutinpres1: The shutinpres1 of this StimInt.  # noqa: E501
        :type: OneOfStimIntShutinpres1
        """

        self._shutinpres1 = shutinpres1

    @property
    def shutinpres10(self):
        """Gets the shutinpres10 of this StimInt.  # noqa: E501


        :return: The shutinpres10 of this StimInt.  # noqa: E501
        :rtype: OneOfStimIntShutinpres10
        """
        return self._shutinpres10

    @shutinpres10.setter
    def shutinpres10(self, shutinpres10):
        """Sets the shutinpres10 of this StimInt.


        :param shutinpres10: The shutinpres10 of this StimInt.  # noqa: E501
        :type: OneOfStimIntShutinpres10
        """

        self._shutinpres10 = shutinpres10

    @property
    def shutinpres15(self):
        """Gets the shutinpres15 of this StimInt.  # noqa: E501


        :return: The shutinpres15 of this StimInt.  # noqa: E501
        :rtype: OneOfStimIntShutinpres15
        """
        return self._shutinpres15

    @shutinpres15.setter
    def shutinpres15(self, shutinpres15):
        """Sets the shutinpres15 of this StimInt.


        :param shutinpres15: The shutinpres15 of this StimInt.  # noqa: E501
        :type: OneOfStimIntShutinpres15
        """

        self._shutinpres15 = shutinpres15

    @property
    def shutinpres3(self):
        """Gets the shutinpres3 of this StimInt.  # noqa: E501


        :return: The shutinpres3 of this StimInt.  # noqa: E501
        :rtype: OneOfStimIntShutinpres3
        """
        return self._shutinpres3

    @shutinpres3.setter
    def shutinpres3(self, shutinpres3):
        """Sets the shutinpres3 of this StimInt.


        :param shutinpres3: The shutinpres3 of this StimInt.  # noqa: E501
        :type: OneOfStimIntShutinpres3
        """

        self._shutinpres3 = shutinpres3

    @property
    def shutinpres4(self):
        """Gets the shutinpres4 of this StimInt.  # noqa: E501


        :return: The shutinpres4 of this StimInt.  # noqa: E501
        :rtype: OneOfStimIntShutinpres4
        """
        return self._shutinpres4

    @shutinpres4.setter
    def shutinpres4(self, shutinpres4):
        """Sets the shutinpres4 of this StimInt.


        :param shutinpres4: The shutinpres4 of this StimInt.  # noqa: E501
        :type: OneOfStimIntShutinpres4
        """

        self._shutinpres4 = shutinpres4

    @property
    def shutinpres5(self):
        """Gets the shutinpres5 of this StimInt.  # noqa: E501


        :return: The shutinpres5 of this StimInt.  # noqa: E501
        :rtype: OneOfStimIntShutinpres5
        """
        return self._shutinpres5

    @shutinpres5.setter
    def shutinpres5(self, shutinpres5):
        """Sets the shutinpres5 of this StimInt.


        :param shutinpres5: The shutinpres5 of this StimInt.  # noqa: E501
        :type: OneOfStimIntShutinpres5
        """

        self._shutinpres5 = shutinpres5

    @property
    def shutinpresbhfinal(self):
        """Gets the shutinpresbhfinal of this StimInt.  # noqa: E501


        :return: The shutinpresbhfinal of this StimInt.  # noqa: E501
        :rtype: OneOfStimIntShutinpresbhfinal
        """
        return self._shutinpresbhfinal

    @shutinpresbhfinal.setter
    def shutinpresbhfinal(self, shutinpresbhfinal):
        """Sets the shutinpresbhfinal of this StimInt.


        :param shutinpresbhfinal: The shutinpresbhfinal of this StimInt.  # noqa: E501
        :type: OneOfStimIntShutinpresbhfinal
        """

        self._shutinpresbhfinal = shutinpresbhfinal

    @property
    def shutinpresfinal(self):
        """Gets the shutinpresfinal of this StimInt.  # noqa: E501


        :return: The shutinpresfinal of this StimInt.  # noqa: E501
        :rtype: OneOfStimIntShutinpresfinal
        """
        return self._shutinpresfinal

    @shutinpresfinal.setter
    def shutinpresfinal(self, shutinpresfinal):
        """Sets the shutinpresfinal of this StimInt.


        :param shutinpresfinal: The shutinpresfinal of this StimInt.  # noqa: E501
        :type: OneOfStimIntShutinpresfinal
        """

        self._shutinpresfinal = shutinpresfinal

    @property
    def shutinpresinitial(self):
        """Gets the shutinpresinitial of this StimInt.  # noqa: E501


        :return: The shutinpresinitial of this StimInt.  # noqa: E501
        :rtype: OneOfStimIntShutinpresinitial
        """
        return self._shutinpresinitial

    @shutinpresinitial.setter
    def shutinpresinitial(self, shutinpresinitial):
        """Sets the shutinpresinitial of this StimInt.


        :param shutinpresinitial: The shutinpresinitial of this StimInt.  # noqa: E501
        :type: OneOfStimIntShutinpresinitial
        """

        self._shutinpresinitial = shutinpresinitial

    @property
    def shutinpresinst(self):
        """Gets the shutinpresinst of this StimInt.  # noqa: E501


        :return: The shutinpresinst of this StimInt.  # noqa: E501
        :rtype: OneOfStimIntShutinpresinst
        """
        return self._shutinpresinst

    @shutinpresinst.setter
    def shutinpresinst(self, shutinpresinst):
        """Sets the shutinpresinst of this StimInt.


        :param shutinpresinst: The shutinpresinst of this StimInt.  # noqa: E501
        :type: OneOfStimIntShutinpresinst
        """

        self._shutinpresinst = shutinpresinst

    @property
    def shutintmfinal(self):
        """Gets the shutintmfinal of this StimInt.  # noqa: E501


        :return: The shutintmfinal of this StimInt.  # noqa: E501
        :rtype: OneOfStimIntShutintmfinal
        """
        return self._shutintmfinal

    @shutintmfinal.setter
    def shutintmfinal(self, shutintmfinal):
        """Sets the shutintmfinal of this StimInt.


        :param shutintmfinal: The shutintmfinal of this StimInt.  # noqa: E501
        :type: OneOfStimIntShutintmfinal
        """

        self._shutintmfinal = shutintmfinal

    @property
    def stim(self):
        """Gets the stim of this StimInt.  # noqa: E501


        :return: The stim of this StimInt.  # noqa: E501
        :rtype: AnyOfStimIntStim
        """
        return self._stim

    @stim.setter
    def stim(self, stim):
        """Sets the stim of this StimInt.


        :param stim: The stim of this StimInt.  # noqa: E501
        :type: AnyOfStimIntStim
        """

        self._stim = stim

    @property
    def stim_int_fluids(self):
        """Gets the stim_int_fluids of this StimInt.  # noqa: E501


        :return: The stim_int_fluids of this StimInt.  # noqa: E501
        :rtype: list[StimIntFluid]
        """
        return self._stim_int_fluids

    @stim_int_fluids.setter
    def stim_int_fluids(self, stim_int_fluids):
        """Sets the stim_int_fluids of this StimInt.


        :param stim_int_fluids: The stim_int_fluids of this StimInt.  # noqa: E501
        :type: list[StimIntFluid]
        """

        self._stim_int_fluids = stim_int_fluids

    @property
    def stim_int_pres_dtls(self):
        """Gets the stim_int_pres_dtls of this StimInt.  # noqa: E501


        :return: The stim_int_pres_dtls of this StimInt.  # noqa: E501
        :rtype: list[StimIntPresDtl]
        """
        return self._stim_int_pres_dtls

    @stim_int_pres_dtls.setter
    def stim_int_pres_dtls(self, stim_int_pres_dtls):
        """Sets the stim_int_pres_dtls of this StimInt.


        :param stim_int_pres_dtls: The stim_int_pres_dtls of this StimInt.  # noqa: E501
        :type: list[StimIntPresDtl]
        """

        self._stim_int_pres_dtls = stim_int_pres_dtls

    @property
    def stim_int_props(self):
        """Gets the stim_int_props of this StimInt.  # noqa: E501


        :return: The stim_int_props of this StimInt.  # noqa: E501
        :rtype: list[StimIntProp]
        """
        return self._stim_int_props

    @stim_int_props.setter
    def stim_int_props(self, stim_int_props):
        """Sets the stim_int_props of this StimInt.


        :param stim_int_props: The stim_int_props of this StimInt.  # noqa: E501
        :type: list[StimIntProp]
        """

        self._stim_int_props = stim_int_props

    @property
    def stim_int_stgs(self):
        """Gets the stim_int_stgs of this StimInt.  # noqa: E501


        :return: The stim_int_stgs of this StimInt.  # noqa: E501
        :rtype: list[StimIntStg]
        """
        return self._stim_int_stgs

    @stim_int_stgs.setter
    def stim_int_stgs(self, stim_int_stgs):
        """Sets the stim_int_stgs of this StimInt.


        :param stim_int_stgs: The stim_int_stgs of this StimInt.  # noqa: E501
        :type: list[StimIntStg]
        """

        self._stim_int_stgs = stim_int_stgs

    @property
    def syscreatedate(self):
        """Gets the syscreatedate of this StimInt.  # noqa: E501


        :return: The syscreatedate of this StimInt.  # noqa: E501
        :rtype: datetime
        """
        return self._syscreatedate

    @syscreatedate.setter
    def syscreatedate(self, syscreatedate):
        """Sets the syscreatedate of this StimInt.


        :param syscreatedate: The syscreatedate of this StimInt.  # noqa: E501
        :type: datetime
        """

        self._syscreatedate = syscreatedate

    @property
    def syscreateuser(self):
        """Gets the syscreateuser of this StimInt.  # noqa: E501


        :return: The syscreateuser of this StimInt.  # noqa: E501
        :rtype: str
        """
        return self._syscreateuser

    @syscreateuser.setter
    def syscreateuser(self, syscreateuser):
        """Sets the syscreateuser of this StimInt.


        :param syscreateuser: The syscreateuser of this StimInt.  # noqa: E501
        :type: str
        """

        self._syscreateuser = syscreateuser

    @property
    def syslockchildren(self):
        """Gets the syslockchildren of this StimInt.  # noqa: E501


        :return: The syslockchildren of this StimInt.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildren

    @syslockchildren.setter
    def syslockchildren(self, syslockchildren):
        """Sets the syslockchildren of this StimInt.


        :param syslockchildren: The syslockchildren of this StimInt.  # noqa: E501
        :type: int
        """

        self._syslockchildren = syslockchildren

    @property
    def syslockchildrenui(self):
        """Gets the syslockchildrenui of this StimInt.  # noqa: E501


        :return: The syslockchildrenui of this StimInt.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildrenui

    @syslockchildrenui.setter
    def syslockchildrenui(self, syslockchildrenui):
        """Sets the syslockchildrenui of this StimInt.


        :param syslockchildrenui: The syslockchildrenui of this StimInt.  # noqa: E501
        :type: int
        """

        self._syslockchildrenui = syslockchildrenui

    @property
    def syslockdate(self):
        """Gets the syslockdate of this StimInt.  # noqa: E501


        :return: The syslockdate of this StimInt.  # noqa: E501
        :rtype: datetime
        """
        return self._syslockdate

    @syslockdate.setter
    def syslockdate(self, syslockdate):
        """Sets the syslockdate of this StimInt.


        :param syslockdate: The syslockdate of this StimInt.  # noqa: E501
        :type: datetime
        """

        self._syslockdate = syslockdate

    @property
    def syslockme(self):
        """Gets the syslockme of this StimInt.  # noqa: E501


        :return: The syslockme of this StimInt.  # noqa: E501
        :rtype: int
        """
        return self._syslockme

    @syslockme.setter
    def syslockme(self, syslockme):
        """Sets the syslockme of this StimInt.


        :param syslockme: The syslockme of this StimInt.  # noqa: E501
        :type: int
        """

        self._syslockme = syslockme

    @property
    def syslockmeui(self):
        """Gets the syslockmeui of this StimInt.  # noqa: E501


        :return: The syslockmeui of this StimInt.  # noqa: E501
        :rtype: int
        """
        return self._syslockmeui

    @syslockmeui.setter
    def syslockmeui(self, syslockmeui):
        """Sets the syslockmeui of this StimInt.


        :param syslockmeui: The syslockmeui of this StimInt.  # noqa: E501
        :type: int
        """

        self._syslockmeui = syslockmeui

    @property
    def sysmoddate(self):
        """Gets the sysmoddate of this StimInt.  # noqa: E501


        :return: The sysmoddate of this StimInt.  # noqa: E501
        :rtype: datetime
        """
        return self._sysmoddate

    @sysmoddate.setter
    def sysmoddate(self, sysmoddate):
        """Sets the sysmoddate of this StimInt.


        :param sysmoddate: The sysmoddate of this StimInt.  # noqa: E501
        :type: datetime
        """

        self._sysmoddate = sysmoddate

    @property
    def sysmoduser(self):
        """Gets the sysmoduser of this StimInt.  # noqa: E501


        :return: The sysmoduser of this StimInt.  # noqa: E501
        :rtype: str
        """
        return self._sysmoduser

    @sysmoduser.setter
    def sysmoduser(self, sysmoduser):
        """Sets the sysmoduser of this StimInt.


        :param sysmoduser: The sysmoduser of this StimInt.  # noqa: E501
        :type: str
        """

        self._sysmoduser = sysmoduser

    @property
    def systag(self):
        """Gets the systag of this StimInt.  # noqa: E501


        :return: The systag of this StimInt.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this StimInt.


        :param systag: The systag of this StimInt.  # noqa: E501
        :type: str
        """

        self._systag = systag

    @property
    def szballs(self):
        """Gets the szballs of this StimInt.  # noqa: E501


        :return: The szballs of this StimInt.  # noqa: E501
        :rtype: OneOfStimIntSzballs
        """
        return self._szballs

    @szballs.setter
    def szballs(self, szballs):
        """Sets the szballs of this StimInt.


        :param szballs: The szballs of this StimInt.  # noqa: E501
        :type: OneOfStimIntSzballs
        """

        self._szballs = szballs

    @property
    def tempstaticavg(self):
        """Gets the tempstaticavg of this StimInt.  # noqa: E501


        :return: The tempstaticavg of this StimInt.  # noqa: E501
        :rtype: OneOfStimIntTempstaticavg
        """
        return self._tempstaticavg

    @tempstaticavg.setter
    def tempstaticavg(self, tempstaticavg):
        """Sets the tempstaticavg of this StimInt.


        :param tempstaticavg: The tempstaticavg of this StimInt.  # noqa: E501
        :type: OneOfStimIntTempstaticavg
        """

        self._tempstaticavg = tempstaticavg

    @property
    def temptreatavg(self):
        """Gets the temptreatavg of this StimInt.  # noqa: E501


        :return: The temptreatavg of this StimInt.  # noqa: E501
        :rtype: OneOfStimIntTemptreatavg
        """
        return self._temptreatavg

    @temptreatavg.setter
    def temptreatavg(self, temptreatavg):
        """Sets the temptreatavg of this StimInt.


        :param temptreatavg: The temptreatavg of this StimInt.  # noqa: E501
        :type: OneOfStimIntTemptreatavg
        """

        self._temptreatavg = temptreatavg

    @property
    def typ1(self):
        """Gets the typ1 of this StimInt.  # noqa: E501


        :return: The typ1 of this StimInt.  # noqa: E501
        :rtype: str
        """
        return self._typ1

    @typ1.setter
    def typ1(self, typ1):
        """Sets the typ1 of this StimInt.


        :param typ1: The typ1 of this StimInt.  # noqa: E501
        :type: str
        """

        self._typ1 = typ1

    @property
    def typ2(self):
        """Gets the typ2 of this StimInt.  # noqa: E501


        :return: The typ2 of this StimInt.  # noqa: E501
        :rtype: str
        """
        return self._typ2

    @typ2.setter
    def typ2(self, typ2):
        """Sets the typ2 of this StimInt.


        :param typ2: The typ2 of this StimInt.  # noqa: E501
        :type: str
        """

        self._typ2 = typ2

    @property
    def usernum1(self):
        """Gets the usernum1 of this StimInt.  # noqa: E501


        :return: The usernum1 of this StimInt.  # noqa: E501
        :rtype: OneOfStimIntUsernum1
        """
        return self._usernum1

    @usernum1.setter
    def usernum1(self, usernum1):
        """Sets the usernum1 of this StimInt.


        :param usernum1: The usernum1 of this StimInt.  # noqa: E501
        :type: OneOfStimIntUsernum1
        """

        self._usernum1 = usernum1

    @property
    def usernum2(self):
        """Gets the usernum2 of this StimInt.  # noqa: E501


        :return: The usernum2 of this StimInt.  # noqa: E501
        :rtype: OneOfStimIntUsernum2
        """
        return self._usernum2

    @usernum2.setter
    def usernum2(self, usernum2):
        """Sets the usernum2 of this StimInt.


        :param usernum2: The usernum2 of this StimInt.  # noqa: E501
        :type: OneOfStimIntUsernum2
        """

        self._usernum2 = usernum2

    @property
    def usernum3(self):
        """Gets the usernum3 of this StimInt.  # noqa: E501


        :return: The usernum3 of this StimInt.  # noqa: E501
        :rtype: OneOfStimIntUsernum3
        """
        return self._usernum3

    @usernum3.setter
    def usernum3(self, usernum3):
        """Sets the usernum3 of this StimInt.


        :param usernum3: The usernum3 of this StimInt.  # noqa: E501
        :type: OneOfStimIntUsernum3
        """

        self._usernum3 = usernum3

    @property
    def usertxt1(self):
        """Gets the usertxt1 of this StimInt.  # noqa: E501


        :return: The usertxt1 of this StimInt.  # noqa: E501
        :rtype: str
        """
        return self._usertxt1

    @usertxt1.setter
    def usertxt1(self, usertxt1):
        """Sets the usertxt1 of this StimInt.


        :param usertxt1: The usertxt1 of this StimInt.  # noqa: E501
        :type: str
        """

        self._usertxt1 = usertxt1

    @property
    def volcleantotal(self):
        """Gets the volcleantotal of this StimInt.  # noqa: E501


        :return: The volcleantotal of this StimInt.  # noqa: E501
        :rtype: OneOfStimIntVolcleantotal
        """
        return self._volcleantotal

    @volcleantotal.setter
    def volcleantotal(self, volcleantotal):
        """Sets the volcleantotal of this StimInt.


        :param volcleantotal: The volcleantotal of this StimInt.  # noqa: E501
        :type: OneOfStimIntVolcleantotal
        """

        self._volcleantotal = volcleantotal

    @property
    def volco2total(self):
        """Gets the volco2total of this StimInt.  # noqa: E501


        :return: The volco2total of this StimInt.  # noqa: E501
        :rtype: OneOfStimIntVolco2total
        """
        return self._volco2total

    @volco2total.setter
    def volco2total(self, volco2total):
        """Sets the volco2total of this StimInt.


        :param volco2total: The volco2total of this StimInt.  # noqa: E501
        :type: OneOfStimIntVolco2total
        """

        self._volco2total = volco2total

    @property
    def voln2total(self):
        """Gets the voln2total of this StimInt.  # noqa: E501


        :return: The voln2total of this StimInt.  # noqa: E501
        :rtype: OneOfStimIntVoln2total
        """
        return self._voln2total

    @voln2total.setter
    def voln2total(self, voln2total):
        """Sets the voln2total of this StimInt.


        :param voln2total: The voln2total of this StimInt.  # noqa: E501
        :type: OneOfStimIntVoln2total
        """

        self._voln2total = voln2total

    @property
    def volrecoveredtotal(self):
        """Gets the volrecoveredtotal of this StimInt.  # noqa: E501


        :return: The volrecoveredtotal of this StimInt.  # noqa: E501
        :rtype: OneOfStimIntVolrecoveredtotal
        """
        return self._volrecoveredtotal

    @volrecoveredtotal.setter
    def volrecoveredtotal(self, volrecoveredtotal):
        """Sets the volrecoveredtotal of this StimInt.


        :param volrecoveredtotal: The volrecoveredtotal of this StimInt.  # noqa: E501
        :type: OneOfStimIntVolrecoveredtotal
        """

        self._volrecoveredtotal = volrecoveredtotal

    @property
    def volslurrytotal(self):
        """Gets the volslurrytotal of this StimInt.  # noqa: E501


        :return: The volslurrytotal of this StimInt.  # noqa: E501
        :rtype: OneOfStimIntVolslurrytotal
        """
        return self._volslurrytotal

    @volslurrytotal.setter
    def volslurrytotal(self, volslurrytotal):
        """Sets the volslurrytotal of this StimInt.


        :param volslurrytotal: The volslurrytotal of this StimInt.  # noqa: E501
        :type: OneOfStimIntVolslurrytotal
        """

        self._volslurrytotal = volslurrytotal

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StimInt, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StimInt):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
