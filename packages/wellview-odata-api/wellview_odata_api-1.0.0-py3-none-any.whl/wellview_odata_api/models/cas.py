# coding: utf-8

"""
    OData Service for namespace Default

    This OData service is located at http://localhost  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Cas(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cas_comps': 'list[CasComp]',
        'centralizers': 'str',
        'centralizersnotallycalc': 'int',
        'centralizersstandoffavg': 'OneOfCasCentralizersstandoffavg',
        'centralizersstandoffmin': 'OneOfCasCentralizersstandoffmin',
        'com': 'str',
        'compcasdimcalc': 'str',
        'compcasdimszodnomcalc': 'str',
        'componentscalc': 'str',
        'connthrdtopcalc': 'str',
        'contractor': 'str',
        'depthbtm': 'OneOfCasDepthbtm',
        'depthcutpull': 'OneOfCasDepthcutpull',
        'depthonbtmtopickupcalc': 'OneOfCasDepthonbtmtopickupcalc',
        'depthtopcalc': 'OneOfCasDepthtopcalc',
        'depthtvdbtmcalc': 'OneOfCasDepthtvdbtmcalc',
        'depthtvdcutpullcalc': 'OneOfCasDepthtvdcutpullcalc',
        'des': 'str',
        'dttmcutpull': 'datetime',
        'dttmonbottom': 'datetime',
        'dttmoutofhole': 'datetime',
        'dttmpickup': 'datetime',
        'dttmpull': 'datetime',
        'dttmrun': 'datetime',
        'duronbottomtopickupcalc': 'OneOfCasDuronbottomtopickupcalc',
        'gradecalc': 'str',
        'idrec': 'str',
        'idrecjobprogramphasecalc': 'str',
        'idrecjobprogramphasecalctk': 'str',
        'idrecjobpull': 'str',
        'idrecjobpulltk': 'str',
        'idrecjobrun': 'str',
        'idrecjobruntk': 'str',
        'idreclastrigcalc': 'str',
        'idreclastrigcalctk': 'str',
        'idrecwellbore': 'str',
        'idrecwellboretk': 'str',
        'idwell': 'str',
        'latposition': 'str',
        'leakoffdensityfluidcalc': 'OneOfCasLeakoffdensityfluidcalc',
        'leakoffprescalc': 'OneOfCasLeakoffprescalc',
        'lengthcalc': 'OneOfCasLengthcalc',
        'notecutpull': 'str',
        'operatingpresslimit': 'OneOfCasOperatingpresslimit',
        'proposedcutpull': 'int',
        'proposedpull': 'int',
        'proposedrun': 'int',
        'pullreason': 'str',
        'pullreasondetail': 'str',
        'reasoncutpull': 'str',
        'scratchers': 'str',
        'stickupkbcalc': 'OneOfCasStickupkbcalc',
        'stringwtdown': 'OneOfCasStringwtdown',
        'stringwtup': 'OneOfCasStringwtup',
        'syscreatedate': 'datetime',
        'syscreateuser': 'str',
        'syslockchildren': 'int',
        'syslockchildrenui': 'int',
        'syslockdate': 'datetime',
        'syslockme': 'int',
        'syslockmeui': 'int',
        'sysmoddate': 'datetime',
        'sysmoduser': 'str',
        'systag': 'str',
        'szdriftmincalc': 'OneOfCasSzdriftmincalc',
        'szidnomcompmincalc': 'OneOfCasSzidnomcompmincalc',
        'szidnommincalc': 'OneOfCasSzidnommincalc',
        'szodnomcompmaxcalc': 'OneOfCasSzodnomcompmaxcalc',
        'szodnommaxcalc': 'OneOfCasSzodnommaxcalc',
        'tension': 'OneOfCasTension',
        'totalstretchsumcalc': 'OneOfCasTotalstretchsumcalc',
        'travelequipwt': 'OneOfCasTravelequipwt',
        'usertxt1': 'str',
        'usertxt2': 'str',
        'usertxt3': 'str',
        'volumeinternalcalc': 'OneOfCasVolumeinternalcalc',
        'volumeshoetrack': 'OneOfCasVolumeshoetrack',
        'wellboreszcalc': 'OneOfCasWellboreszcalc',
        'wellheader': 'AnyOfCasWellheader',
        'wtperlengthcalc': 'OneOfCasWtperlengthcalc'
    }

    attribute_map = {
        'cas_comps': 'casComps',
        'centralizers': 'centralizers',
        'centralizersnotallycalc': 'centralizersnotallycalc',
        'centralizersstandoffavg': 'centralizersstandoffavg',
        'centralizersstandoffmin': 'centralizersstandoffmin',
        'com': 'com',
        'compcasdimcalc': 'compcasdimcalc',
        'compcasdimszodnomcalc': 'compcasdimszodnomcalc',
        'componentscalc': 'componentscalc',
        'connthrdtopcalc': 'connthrdtopcalc',
        'contractor': 'contractor',
        'depthbtm': 'depthbtm',
        'depthcutpull': 'depthcutpull',
        'depthonbtmtopickupcalc': 'depthonbtmtopickupcalc',
        'depthtopcalc': 'depthtopcalc',
        'depthtvdbtmcalc': 'depthtvdbtmcalc',
        'depthtvdcutpullcalc': 'depthtvdcutpullcalc',
        'des': 'des',
        'dttmcutpull': 'dttmcutpull',
        'dttmonbottom': 'dttmonbottom',
        'dttmoutofhole': 'dttmoutofhole',
        'dttmpickup': 'dttmpickup',
        'dttmpull': 'dttmpull',
        'dttmrun': 'dttmrun',
        'duronbottomtopickupcalc': 'duronbottomtopickupcalc',
        'gradecalc': 'gradecalc',
        'idrec': 'idrec',
        'idrecjobprogramphasecalc': 'idrecjobprogramphasecalc',
        'idrecjobprogramphasecalctk': 'idrecjobprogramphasecalctk',
        'idrecjobpull': 'idrecjobpull',
        'idrecjobpulltk': 'idrecjobpulltk',
        'idrecjobrun': 'idrecjobrun',
        'idrecjobruntk': 'idrecjobruntk',
        'idreclastrigcalc': 'idreclastrigcalc',
        'idreclastrigcalctk': 'idreclastrigcalctk',
        'idrecwellbore': 'idrecwellbore',
        'idrecwellboretk': 'idrecwellboretk',
        'idwell': 'idwell',
        'latposition': 'latposition',
        'leakoffdensityfluidcalc': 'leakoffdensityfluidcalc',
        'leakoffprescalc': 'leakoffprescalc',
        'lengthcalc': 'lengthcalc',
        'notecutpull': 'notecutpull',
        'operatingpresslimit': 'operatingpresslimit',
        'proposedcutpull': 'proposedcutpull',
        'proposedpull': 'proposedpull',
        'proposedrun': 'proposedrun',
        'pullreason': 'pullreason',
        'pullreasondetail': 'pullreasondetail',
        'reasoncutpull': 'reasoncutpull',
        'scratchers': 'scratchers',
        'stickupkbcalc': 'stickupkbcalc',
        'stringwtdown': 'stringwtdown',
        'stringwtup': 'stringwtup',
        'syscreatedate': 'syscreatedate',
        'syscreateuser': 'syscreateuser',
        'syslockchildren': 'syslockchildren',
        'syslockchildrenui': 'syslockchildrenui',
        'syslockdate': 'syslockdate',
        'syslockme': 'syslockme',
        'syslockmeui': 'syslockmeui',
        'sysmoddate': 'sysmoddate',
        'sysmoduser': 'sysmoduser',
        'systag': 'systag',
        'szdriftmincalc': 'szdriftmincalc',
        'szidnomcompmincalc': 'szidnomcompmincalc',
        'szidnommincalc': 'szidnommincalc',
        'szodnomcompmaxcalc': 'szodnomcompmaxcalc',
        'szodnommaxcalc': 'szodnommaxcalc',
        'tension': 'tension',
        'totalstretchsumcalc': 'totalstretchsumcalc',
        'travelequipwt': 'travelequipwt',
        'usertxt1': 'usertxt1',
        'usertxt2': 'usertxt2',
        'usertxt3': 'usertxt3',
        'volumeinternalcalc': 'volumeinternalcalc',
        'volumeshoetrack': 'volumeshoetrack',
        'wellboreszcalc': 'wellboreszcalc',
        'wellheader': 'wellheader',
        'wtperlengthcalc': 'wtperlengthcalc'
    }

    def __init__(self, cas_comps=None, centralizers=None, centralizersnotallycalc=None, centralizersstandoffavg=None, centralizersstandoffmin=None, com=None, compcasdimcalc=None, compcasdimszodnomcalc=None, componentscalc=None, connthrdtopcalc=None, contractor=None, depthbtm=None, depthcutpull=None, depthonbtmtopickupcalc=None, depthtopcalc=None, depthtvdbtmcalc=None, depthtvdcutpullcalc=None, des=None, dttmcutpull=None, dttmonbottom=None, dttmoutofhole=None, dttmpickup=None, dttmpull=None, dttmrun=None, duronbottomtopickupcalc=None, gradecalc=None, idrec=None, idrecjobprogramphasecalc=None, idrecjobprogramphasecalctk=None, idrecjobpull=None, idrecjobpulltk=None, idrecjobrun=None, idrecjobruntk=None, idreclastrigcalc=None, idreclastrigcalctk=None, idrecwellbore=None, idrecwellboretk=None, idwell=None, latposition=None, leakoffdensityfluidcalc=None, leakoffprescalc=None, lengthcalc=None, notecutpull=None, operatingpresslimit=None, proposedcutpull=None, proposedpull=None, proposedrun=None, pullreason=None, pullreasondetail=None, reasoncutpull=None, scratchers=None, stickupkbcalc=None, stringwtdown=None, stringwtup=None, syscreatedate=None, syscreateuser=None, syslockchildren=None, syslockchildrenui=None, syslockdate=None, syslockme=None, syslockmeui=None, sysmoddate=None, sysmoduser=None, systag=None, szdriftmincalc=None, szidnomcompmincalc=None, szidnommincalc=None, szodnomcompmaxcalc=None, szodnommaxcalc=None, tension=None, totalstretchsumcalc=None, travelequipwt=None, usertxt1=None, usertxt2=None, usertxt3=None, volumeinternalcalc=None, volumeshoetrack=None, wellboreszcalc=None, wellheader=None, wtperlengthcalc=None):  # noqa: E501
        """Cas - a model defined in Swagger"""  # noqa: E501
        self._cas_comps = None
        self._centralizers = None
        self._centralizersnotallycalc = None
        self._centralizersstandoffavg = None
        self._centralizersstandoffmin = None
        self._com = None
        self._compcasdimcalc = None
        self._compcasdimszodnomcalc = None
        self._componentscalc = None
        self._connthrdtopcalc = None
        self._contractor = None
        self._depthbtm = None
        self._depthcutpull = None
        self._depthonbtmtopickupcalc = None
        self._depthtopcalc = None
        self._depthtvdbtmcalc = None
        self._depthtvdcutpullcalc = None
        self._des = None
        self._dttmcutpull = None
        self._dttmonbottom = None
        self._dttmoutofhole = None
        self._dttmpickup = None
        self._dttmpull = None
        self._dttmrun = None
        self._duronbottomtopickupcalc = None
        self._gradecalc = None
        self._idrec = None
        self._idrecjobprogramphasecalc = None
        self._idrecjobprogramphasecalctk = None
        self._idrecjobpull = None
        self._idrecjobpulltk = None
        self._idrecjobrun = None
        self._idrecjobruntk = None
        self._idreclastrigcalc = None
        self._idreclastrigcalctk = None
        self._idrecwellbore = None
        self._idrecwellboretk = None
        self._idwell = None
        self._latposition = None
        self._leakoffdensityfluidcalc = None
        self._leakoffprescalc = None
        self._lengthcalc = None
        self._notecutpull = None
        self._operatingpresslimit = None
        self._proposedcutpull = None
        self._proposedpull = None
        self._proposedrun = None
        self._pullreason = None
        self._pullreasondetail = None
        self._reasoncutpull = None
        self._scratchers = None
        self._stickupkbcalc = None
        self._stringwtdown = None
        self._stringwtup = None
        self._syscreatedate = None
        self._syscreateuser = None
        self._syslockchildren = None
        self._syslockchildrenui = None
        self._syslockdate = None
        self._syslockme = None
        self._syslockmeui = None
        self._sysmoddate = None
        self._sysmoduser = None
        self._systag = None
        self._szdriftmincalc = None
        self._szidnomcompmincalc = None
        self._szidnommincalc = None
        self._szodnomcompmaxcalc = None
        self._szodnommaxcalc = None
        self._tension = None
        self._totalstretchsumcalc = None
        self._travelequipwt = None
        self._usertxt1 = None
        self._usertxt2 = None
        self._usertxt3 = None
        self._volumeinternalcalc = None
        self._volumeshoetrack = None
        self._wellboreszcalc = None
        self._wellheader = None
        self._wtperlengthcalc = None
        self.discriminator = None
        if cas_comps is not None:
            self.cas_comps = cas_comps
        if centralizers is not None:
            self.centralizers = centralizers
        if centralizersnotallycalc is not None:
            self.centralizersnotallycalc = centralizersnotallycalc
        if centralizersstandoffavg is not None:
            self.centralizersstandoffavg = centralizersstandoffavg
        if centralizersstandoffmin is not None:
            self.centralizersstandoffmin = centralizersstandoffmin
        if com is not None:
            self.com = com
        if compcasdimcalc is not None:
            self.compcasdimcalc = compcasdimcalc
        if compcasdimszodnomcalc is not None:
            self.compcasdimszodnomcalc = compcasdimszodnomcalc
        if componentscalc is not None:
            self.componentscalc = componentscalc
        if connthrdtopcalc is not None:
            self.connthrdtopcalc = connthrdtopcalc
        if contractor is not None:
            self.contractor = contractor
        if depthbtm is not None:
            self.depthbtm = depthbtm
        if depthcutpull is not None:
            self.depthcutpull = depthcutpull
        if depthonbtmtopickupcalc is not None:
            self.depthonbtmtopickupcalc = depthonbtmtopickupcalc
        if depthtopcalc is not None:
            self.depthtopcalc = depthtopcalc
        if depthtvdbtmcalc is not None:
            self.depthtvdbtmcalc = depthtvdbtmcalc
        if depthtvdcutpullcalc is not None:
            self.depthtvdcutpullcalc = depthtvdcutpullcalc
        if des is not None:
            self.des = des
        if dttmcutpull is not None:
            self.dttmcutpull = dttmcutpull
        if dttmonbottom is not None:
            self.dttmonbottom = dttmonbottom
        if dttmoutofhole is not None:
            self.dttmoutofhole = dttmoutofhole
        if dttmpickup is not None:
            self.dttmpickup = dttmpickup
        if dttmpull is not None:
            self.dttmpull = dttmpull
        if dttmrun is not None:
            self.dttmrun = dttmrun
        if duronbottomtopickupcalc is not None:
            self.duronbottomtopickupcalc = duronbottomtopickupcalc
        if gradecalc is not None:
            self.gradecalc = gradecalc
        if idrec is not None:
            self.idrec = idrec
        if idrecjobprogramphasecalc is not None:
            self.idrecjobprogramphasecalc = idrecjobprogramphasecalc
        if idrecjobprogramphasecalctk is not None:
            self.idrecjobprogramphasecalctk = idrecjobprogramphasecalctk
        if idrecjobpull is not None:
            self.idrecjobpull = idrecjobpull
        if idrecjobpulltk is not None:
            self.idrecjobpulltk = idrecjobpulltk
        if idrecjobrun is not None:
            self.idrecjobrun = idrecjobrun
        if idrecjobruntk is not None:
            self.idrecjobruntk = idrecjobruntk
        if idreclastrigcalc is not None:
            self.idreclastrigcalc = idreclastrigcalc
        if idreclastrigcalctk is not None:
            self.idreclastrigcalctk = idreclastrigcalctk
        if idrecwellbore is not None:
            self.idrecwellbore = idrecwellbore
        if idrecwellboretk is not None:
            self.idrecwellboretk = idrecwellboretk
        if idwell is not None:
            self.idwell = idwell
        if latposition is not None:
            self.latposition = latposition
        if leakoffdensityfluidcalc is not None:
            self.leakoffdensityfluidcalc = leakoffdensityfluidcalc
        if leakoffprescalc is not None:
            self.leakoffprescalc = leakoffprescalc
        if lengthcalc is not None:
            self.lengthcalc = lengthcalc
        if notecutpull is not None:
            self.notecutpull = notecutpull
        if operatingpresslimit is not None:
            self.operatingpresslimit = operatingpresslimit
        if proposedcutpull is not None:
            self.proposedcutpull = proposedcutpull
        if proposedpull is not None:
            self.proposedpull = proposedpull
        if proposedrun is not None:
            self.proposedrun = proposedrun
        if pullreason is not None:
            self.pullreason = pullreason
        if pullreasondetail is not None:
            self.pullreasondetail = pullreasondetail
        if reasoncutpull is not None:
            self.reasoncutpull = reasoncutpull
        if scratchers is not None:
            self.scratchers = scratchers
        if stickupkbcalc is not None:
            self.stickupkbcalc = stickupkbcalc
        if stringwtdown is not None:
            self.stringwtdown = stringwtdown
        if stringwtup is not None:
            self.stringwtup = stringwtup
        if syscreatedate is not None:
            self.syscreatedate = syscreatedate
        if syscreateuser is not None:
            self.syscreateuser = syscreateuser
        if syslockchildren is not None:
            self.syslockchildren = syslockchildren
        if syslockchildrenui is not None:
            self.syslockchildrenui = syslockchildrenui
        if syslockdate is not None:
            self.syslockdate = syslockdate
        if syslockme is not None:
            self.syslockme = syslockme
        if syslockmeui is not None:
            self.syslockmeui = syslockmeui
        if sysmoddate is not None:
            self.sysmoddate = sysmoddate
        if sysmoduser is not None:
            self.sysmoduser = sysmoduser
        if systag is not None:
            self.systag = systag
        if szdriftmincalc is not None:
            self.szdriftmincalc = szdriftmincalc
        if szidnomcompmincalc is not None:
            self.szidnomcompmincalc = szidnomcompmincalc
        if szidnommincalc is not None:
            self.szidnommincalc = szidnommincalc
        if szodnomcompmaxcalc is not None:
            self.szodnomcompmaxcalc = szodnomcompmaxcalc
        if szodnommaxcalc is not None:
            self.szodnommaxcalc = szodnommaxcalc
        if tension is not None:
            self.tension = tension
        if totalstretchsumcalc is not None:
            self.totalstretchsumcalc = totalstretchsumcalc
        if travelequipwt is not None:
            self.travelequipwt = travelequipwt
        if usertxt1 is not None:
            self.usertxt1 = usertxt1
        if usertxt2 is not None:
            self.usertxt2 = usertxt2
        if usertxt3 is not None:
            self.usertxt3 = usertxt3
        if volumeinternalcalc is not None:
            self.volumeinternalcalc = volumeinternalcalc
        if volumeshoetrack is not None:
            self.volumeshoetrack = volumeshoetrack
        if wellboreszcalc is not None:
            self.wellboreszcalc = wellboreszcalc
        if wellheader is not None:
            self.wellheader = wellheader
        if wtperlengthcalc is not None:
            self.wtperlengthcalc = wtperlengthcalc

    @property
    def cas_comps(self):
        """Gets the cas_comps of this Cas.  # noqa: E501


        :return: The cas_comps of this Cas.  # noqa: E501
        :rtype: list[CasComp]
        """
        return self._cas_comps

    @cas_comps.setter
    def cas_comps(self, cas_comps):
        """Sets the cas_comps of this Cas.


        :param cas_comps: The cas_comps of this Cas.  # noqa: E501
        :type: list[CasComp]
        """

        self._cas_comps = cas_comps

    @property
    def centralizers(self):
        """Gets the centralizers of this Cas.  # noqa: E501


        :return: The centralizers of this Cas.  # noqa: E501
        :rtype: str
        """
        return self._centralizers

    @centralizers.setter
    def centralizers(self, centralizers):
        """Sets the centralizers of this Cas.


        :param centralizers: The centralizers of this Cas.  # noqa: E501
        :type: str
        """

        self._centralizers = centralizers

    @property
    def centralizersnotallycalc(self):
        """Gets the centralizersnotallycalc of this Cas.  # noqa: E501


        :return: The centralizersnotallycalc of this Cas.  # noqa: E501
        :rtype: int
        """
        return self._centralizersnotallycalc

    @centralizersnotallycalc.setter
    def centralizersnotallycalc(self, centralizersnotallycalc):
        """Sets the centralizersnotallycalc of this Cas.


        :param centralizersnotallycalc: The centralizersnotallycalc of this Cas.  # noqa: E501
        :type: int
        """

        self._centralizersnotallycalc = centralizersnotallycalc

    @property
    def centralizersstandoffavg(self):
        """Gets the centralizersstandoffavg of this Cas.  # noqa: E501


        :return: The centralizersstandoffavg of this Cas.  # noqa: E501
        :rtype: OneOfCasCentralizersstandoffavg
        """
        return self._centralizersstandoffavg

    @centralizersstandoffavg.setter
    def centralizersstandoffavg(self, centralizersstandoffavg):
        """Sets the centralizersstandoffavg of this Cas.


        :param centralizersstandoffavg: The centralizersstandoffavg of this Cas.  # noqa: E501
        :type: OneOfCasCentralizersstandoffavg
        """

        self._centralizersstandoffavg = centralizersstandoffavg

    @property
    def centralizersstandoffmin(self):
        """Gets the centralizersstandoffmin of this Cas.  # noqa: E501


        :return: The centralizersstandoffmin of this Cas.  # noqa: E501
        :rtype: OneOfCasCentralizersstandoffmin
        """
        return self._centralizersstandoffmin

    @centralizersstandoffmin.setter
    def centralizersstandoffmin(self, centralizersstandoffmin):
        """Sets the centralizersstandoffmin of this Cas.


        :param centralizersstandoffmin: The centralizersstandoffmin of this Cas.  # noqa: E501
        :type: OneOfCasCentralizersstandoffmin
        """

        self._centralizersstandoffmin = centralizersstandoffmin

    @property
    def com(self):
        """Gets the com of this Cas.  # noqa: E501


        :return: The com of this Cas.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this Cas.


        :param com: The com of this Cas.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def compcasdimcalc(self):
        """Gets the compcasdimcalc of this Cas.  # noqa: E501


        :return: The compcasdimcalc of this Cas.  # noqa: E501
        :rtype: str
        """
        return self._compcasdimcalc

    @compcasdimcalc.setter
    def compcasdimcalc(self, compcasdimcalc):
        """Sets the compcasdimcalc of this Cas.


        :param compcasdimcalc: The compcasdimcalc of this Cas.  # noqa: E501
        :type: str
        """

        self._compcasdimcalc = compcasdimcalc

    @property
    def compcasdimszodnomcalc(self):
        """Gets the compcasdimszodnomcalc of this Cas.  # noqa: E501


        :return: The compcasdimszodnomcalc of this Cas.  # noqa: E501
        :rtype: str
        """
        return self._compcasdimszodnomcalc

    @compcasdimszodnomcalc.setter
    def compcasdimszodnomcalc(self, compcasdimszodnomcalc):
        """Sets the compcasdimszodnomcalc of this Cas.


        :param compcasdimszodnomcalc: The compcasdimszodnomcalc of this Cas.  # noqa: E501
        :type: str
        """

        self._compcasdimszodnomcalc = compcasdimszodnomcalc

    @property
    def componentscalc(self):
        """Gets the componentscalc of this Cas.  # noqa: E501


        :return: The componentscalc of this Cas.  # noqa: E501
        :rtype: str
        """
        return self._componentscalc

    @componentscalc.setter
    def componentscalc(self, componentscalc):
        """Sets the componentscalc of this Cas.


        :param componentscalc: The componentscalc of this Cas.  # noqa: E501
        :type: str
        """

        self._componentscalc = componentscalc

    @property
    def connthrdtopcalc(self):
        """Gets the connthrdtopcalc of this Cas.  # noqa: E501


        :return: The connthrdtopcalc of this Cas.  # noqa: E501
        :rtype: str
        """
        return self._connthrdtopcalc

    @connthrdtopcalc.setter
    def connthrdtopcalc(self, connthrdtopcalc):
        """Sets the connthrdtopcalc of this Cas.


        :param connthrdtopcalc: The connthrdtopcalc of this Cas.  # noqa: E501
        :type: str
        """

        self._connthrdtopcalc = connthrdtopcalc

    @property
    def contractor(self):
        """Gets the contractor of this Cas.  # noqa: E501


        :return: The contractor of this Cas.  # noqa: E501
        :rtype: str
        """
        return self._contractor

    @contractor.setter
    def contractor(self, contractor):
        """Sets the contractor of this Cas.


        :param contractor: The contractor of this Cas.  # noqa: E501
        :type: str
        """

        self._contractor = contractor

    @property
    def depthbtm(self):
        """Gets the depthbtm of this Cas.  # noqa: E501


        :return: The depthbtm of this Cas.  # noqa: E501
        :rtype: OneOfCasDepthbtm
        """
        return self._depthbtm

    @depthbtm.setter
    def depthbtm(self, depthbtm):
        """Sets the depthbtm of this Cas.


        :param depthbtm: The depthbtm of this Cas.  # noqa: E501
        :type: OneOfCasDepthbtm
        """

        self._depthbtm = depthbtm

    @property
    def depthcutpull(self):
        """Gets the depthcutpull of this Cas.  # noqa: E501


        :return: The depthcutpull of this Cas.  # noqa: E501
        :rtype: OneOfCasDepthcutpull
        """
        return self._depthcutpull

    @depthcutpull.setter
    def depthcutpull(self, depthcutpull):
        """Sets the depthcutpull of this Cas.


        :param depthcutpull: The depthcutpull of this Cas.  # noqa: E501
        :type: OneOfCasDepthcutpull
        """

        self._depthcutpull = depthcutpull

    @property
    def depthonbtmtopickupcalc(self):
        """Gets the depthonbtmtopickupcalc of this Cas.  # noqa: E501


        :return: The depthonbtmtopickupcalc of this Cas.  # noqa: E501
        :rtype: OneOfCasDepthonbtmtopickupcalc
        """
        return self._depthonbtmtopickupcalc

    @depthonbtmtopickupcalc.setter
    def depthonbtmtopickupcalc(self, depthonbtmtopickupcalc):
        """Sets the depthonbtmtopickupcalc of this Cas.


        :param depthonbtmtopickupcalc: The depthonbtmtopickupcalc of this Cas.  # noqa: E501
        :type: OneOfCasDepthonbtmtopickupcalc
        """

        self._depthonbtmtopickupcalc = depthonbtmtopickupcalc

    @property
    def depthtopcalc(self):
        """Gets the depthtopcalc of this Cas.  # noqa: E501


        :return: The depthtopcalc of this Cas.  # noqa: E501
        :rtype: OneOfCasDepthtopcalc
        """
        return self._depthtopcalc

    @depthtopcalc.setter
    def depthtopcalc(self, depthtopcalc):
        """Sets the depthtopcalc of this Cas.


        :param depthtopcalc: The depthtopcalc of this Cas.  # noqa: E501
        :type: OneOfCasDepthtopcalc
        """

        self._depthtopcalc = depthtopcalc

    @property
    def depthtvdbtmcalc(self):
        """Gets the depthtvdbtmcalc of this Cas.  # noqa: E501


        :return: The depthtvdbtmcalc of this Cas.  # noqa: E501
        :rtype: OneOfCasDepthtvdbtmcalc
        """
        return self._depthtvdbtmcalc

    @depthtvdbtmcalc.setter
    def depthtvdbtmcalc(self, depthtvdbtmcalc):
        """Sets the depthtvdbtmcalc of this Cas.


        :param depthtvdbtmcalc: The depthtvdbtmcalc of this Cas.  # noqa: E501
        :type: OneOfCasDepthtvdbtmcalc
        """

        self._depthtvdbtmcalc = depthtvdbtmcalc

    @property
    def depthtvdcutpullcalc(self):
        """Gets the depthtvdcutpullcalc of this Cas.  # noqa: E501


        :return: The depthtvdcutpullcalc of this Cas.  # noqa: E501
        :rtype: OneOfCasDepthtvdcutpullcalc
        """
        return self._depthtvdcutpullcalc

    @depthtvdcutpullcalc.setter
    def depthtvdcutpullcalc(self, depthtvdcutpullcalc):
        """Sets the depthtvdcutpullcalc of this Cas.


        :param depthtvdcutpullcalc: The depthtvdcutpullcalc of this Cas.  # noqa: E501
        :type: OneOfCasDepthtvdcutpullcalc
        """

        self._depthtvdcutpullcalc = depthtvdcutpullcalc

    @property
    def des(self):
        """Gets the des of this Cas.  # noqa: E501


        :return: The des of this Cas.  # noqa: E501
        :rtype: str
        """
        return self._des

    @des.setter
    def des(self, des):
        """Sets the des of this Cas.


        :param des: The des of this Cas.  # noqa: E501
        :type: str
        """

        self._des = des

    @property
    def dttmcutpull(self):
        """Gets the dttmcutpull of this Cas.  # noqa: E501


        :return: The dttmcutpull of this Cas.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmcutpull

    @dttmcutpull.setter
    def dttmcutpull(self, dttmcutpull):
        """Sets the dttmcutpull of this Cas.


        :param dttmcutpull: The dttmcutpull of this Cas.  # noqa: E501
        :type: datetime
        """

        self._dttmcutpull = dttmcutpull

    @property
    def dttmonbottom(self):
        """Gets the dttmonbottom of this Cas.  # noqa: E501


        :return: The dttmonbottom of this Cas.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmonbottom

    @dttmonbottom.setter
    def dttmonbottom(self, dttmonbottom):
        """Sets the dttmonbottom of this Cas.


        :param dttmonbottom: The dttmonbottom of this Cas.  # noqa: E501
        :type: datetime
        """

        self._dttmonbottom = dttmonbottom

    @property
    def dttmoutofhole(self):
        """Gets the dttmoutofhole of this Cas.  # noqa: E501


        :return: The dttmoutofhole of this Cas.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmoutofhole

    @dttmoutofhole.setter
    def dttmoutofhole(self, dttmoutofhole):
        """Sets the dttmoutofhole of this Cas.


        :param dttmoutofhole: The dttmoutofhole of this Cas.  # noqa: E501
        :type: datetime
        """

        self._dttmoutofhole = dttmoutofhole

    @property
    def dttmpickup(self):
        """Gets the dttmpickup of this Cas.  # noqa: E501


        :return: The dttmpickup of this Cas.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmpickup

    @dttmpickup.setter
    def dttmpickup(self, dttmpickup):
        """Sets the dttmpickup of this Cas.


        :param dttmpickup: The dttmpickup of this Cas.  # noqa: E501
        :type: datetime
        """

        self._dttmpickup = dttmpickup

    @property
    def dttmpull(self):
        """Gets the dttmpull of this Cas.  # noqa: E501


        :return: The dttmpull of this Cas.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmpull

    @dttmpull.setter
    def dttmpull(self, dttmpull):
        """Sets the dttmpull of this Cas.


        :param dttmpull: The dttmpull of this Cas.  # noqa: E501
        :type: datetime
        """

        self._dttmpull = dttmpull

    @property
    def dttmrun(self):
        """Gets the dttmrun of this Cas.  # noqa: E501


        :return: The dttmrun of this Cas.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmrun

    @dttmrun.setter
    def dttmrun(self, dttmrun):
        """Sets the dttmrun of this Cas.


        :param dttmrun: The dttmrun of this Cas.  # noqa: E501
        :type: datetime
        """

        self._dttmrun = dttmrun

    @property
    def duronbottomtopickupcalc(self):
        """Gets the duronbottomtopickupcalc of this Cas.  # noqa: E501


        :return: The duronbottomtopickupcalc of this Cas.  # noqa: E501
        :rtype: OneOfCasDuronbottomtopickupcalc
        """
        return self._duronbottomtopickupcalc

    @duronbottomtopickupcalc.setter
    def duronbottomtopickupcalc(self, duronbottomtopickupcalc):
        """Sets the duronbottomtopickupcalc of this Cas.


        :param duronbottomtopickupcalc: The duronbottomtopickupcalc of this Cas.  # noqa: E501
        :type: OneOfCasDuronbottomtopickupcalc
        """

        self._duronbottomtopickupcalc = duronbottomtopickupcalc

    @property
    def gradecalc(self):
        """Gets the gradecalc of this Cas.  # noqa: E501


        :return: The gradecalc of this Cas.  # noqa: E501
        :rtype: str
        """
        return self._gradecalc

    @gradecalc.setter
    def gradecalc(self, gradecalc):
        """Sets the gradecalc of this Cas.


        :param gradecalc: The gradecalc of this Cas.  # noqa: E501
        :type: str
        """

        self._gradecalc = gradecalc

    @property
    def idrec(self):
        """Gets the idrec of this Cas.  # noqa: E501


        :return: The idrec of this Cas.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this Cas.


        :param idrec: The idrec of this Cas.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecjobprogramphasecalc(self):
        """Gets the idrecjobprogramphasecalc of this Cas.  # noqa: E501


        :return: The idrecjobprogramphasecalc of this Cas.  # noqa: E501
        :rtype: str
        """
        return self._idrecjobprogramphasecalc

    @idrecjobprogramphasecalc.setter
    def idrecjobprogramphasecalc(self, idrecjobprogramphasecalc):
        """Sets the idrecjobprogramphasecalc of this Cas.


        :param idrecjobprogramphasecalc: The idrecjobprogramphasecalc of this Cas.  # noqa: E501
        :type: str
        """

        self._idrecjobprogramphasecalc = idrecjobprogramphasecalc

    @property
    def idrecjobprogramphasecalctk(self):
        """Gets the idrecjobprogramphasecalctk of this Cas.  # noqa: E501


        :return: The idrecjobprogramphasecalctk of this Cas.  # noqa: E501
        :rtype: str
        """
        return self._idrecjobprogramphasecalctk

    @idrecjobprogramphasecalctk.setter
    def idrecjobprogramphasecalctk(self, idrecjobprogramphasecalctk):
        """Sets the idrecjobprogramphasecalctk of this Cas.


        :param idrecjobprogramphasecalctk: The idrecjobprogramphasecalctk of this Cas.  # noqa: E501
        :type: str
        """

        self._idrecjobprogramphasecalctk = idrecjobprogramphasecalctk

    @property
    def idrecjobpull(self):
        """Gets the idrecjobpull of this Cas.  # noqa: E501


        :return: The idrecjobpull of this Cas.  # noqa: E501
        :rtype: str
        """
        return self._idrecjobpull

    @idrecjobpull.setter
    def idrecjobpull(self, idrecjobpull):
        """Sets the idrecjobpull of this Cas.


        :param idrecjobpull: The idrecjobpull of this Cas.  # noqa: E501
        :type: str
        """

        self._idrecjobpull = idrecjobpull

    @property
    def idrecjobpulltk(self):
        """Gets the idrecjobpulltk of this Cas.  # noqa: E501


        :return: The idrecjobpulltk of this Cas.  # noqa: E501
        :rtype: str
        """
        return self._idrecjobpulltk

    @idrecjobpulltk.setter
    def idrecjobpulltk(self, idrecjobpulltk):
        """Sets the idrecjobpulltk of this Cas.


        :param idrecjobpulltk: The idrecjobpulltk of this Cas.  # noqa: E501
        :type: str
        """

        self._idrecjobpulltk = idrecjobpulltk

    @property
    def idrecjobrun(self):
        """Gets the idrecjobrun of this Cas.  # noqa: E501


        :return: The idrecjobrun of this Cas.  # noqa: E501
        :rtype: str
        """
        return self._idrecjobrun

    @idrecjobrun.setter
    def idrecjobrun(self, idrecjobrun):
        """Sets the idrecjobrun of this Cas.


        :param idrecjobrun: The idrecjobrun of this Cas.  # noqa: E501
        :type: str
        """

        self._idrecjobrun = idrecjobrun

    @property
    def idrecjobruntk(self):
        """Gets the idrecjobruntk of this Cas.  # noqa: E501


        :return: The idrecjobruntk of this Cas.  # noqa: E501
        :rtype: str
        """
        return self._idrecjobruntk

    @idrecjobruntk.setter
    def idrecjobruntk(self, idrecjobruntk):
        """Sets the idrecjobruntk of this Cas.


        :param idrecjobruntk: The idrecjobruntk of this Cas.  # noqa: E501
        :type: str
        """

        self._idrecjobruntk = idrecjobruntk

    @property
    def idreclastrigcalc(self):
        """Gets the idreclastrigcalc of this Cas.  # noqa: E501


        :return: The idreclastrigcalc of this Cas.  # noqa: E501
        :rtype: str
        """
        return self._idreclastrigcalc

    @idreclastrigcalc.setter
    def idreclastrigcalc(self, idreclastrigcalc):
        """Sets the idreclastrigcalc of this Cas.


        :param idreclastrigcalc: The idreclastrigcalc of this Cas.  # noqa: E501
        :type: str
        """

        self._idreclastrigcalc = idreclastrigcalc

    @property
    def idreclastrigcalctk(self):
        """Gets the idreclastrigcalctk of this Cas.  # noqa: E501


        :return: The idreclastrigcalctk of this Cas.  # noqa: E501
        :rtype: str
        """
        return self._idreclastrigcalctk

    @idreclastrigcalctk.setter
    def idreclastrigcalctk(self, idreclastrigcalctk):
        """Sets the idreclastrigcalctk of this Cas.


        :param idreclastrigcalctk: The idreclastrigcalctk of this Cas.  # noqa: E501
        :type: str
        """

        self._idreclastrigcalctk = idreclastrigcalctk

    @property
    def idrecwellbore(self):
        """Gets the idrecwellbore of this Cas.  # noqa: E501


        :return: The idrecwellbore of this Cas.  # noqa: E501
        :rtype: str
        """
        return self._idrecwellbore

    @idrecwellbore.setter
    def idrecwellbore(self, idrecwellbore):
        """Sets the idrecwellbore of this Cas.


        :param idrecwellbore: The idrecwellbore of this Cas.  # noqa: E501
        :type: str
        """

        self._idrecwellbore = idrecwellbore

    @property
    def idrecwellboretk(self):
        """Gets the idrecwellboretk of this Cas.  # noqa: E501


        :return: The idrecwellboretk of this Cas.  # noqa: E501
        :rtype: str
        """
        return self._idrecwellboretk

    @idrecwellboretk.setter
    def idrecwellboretk(self, idrecwellboretk):
        """Sets the idrecwellboretk of this Cas.


        :param idrecwellboretk: The idrecwellboretk of this Cas.  # noqa: E501
        :type: str
        """

        self._idrecwellboretk = idrecwellboretk

    @property
    def idwell(self):
        """Gets the idwell of this Cas.  # noqa: E501


        :return: The idwell of this Cas.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this Cas.


        :param idwell: The idwell of this Cas.  # noqa: E501
        :type: str
        """

        self._idwell = idwell

    @property
    def latposition(self):
        """Gets the latposition of this Cas.  # noqa: E501


        :return: The latposition of this Cas.  # noqa: E501
        :rtype: str
        """
        return self._latposition

    @latposition.setter
    def latposition(self, latposition):
        """Sets the latposition of this Cas.


        :param latposition: The latposition of this Cas.  # noqa: E501
        :type: str
        """

        self._latposition = latposition

    @property
    def leakoffdensityfluidcalc(self):
        """Gets the leakoffdensityfluidcalc of this Cas.  # noqa: E501


        :return: The leakoffdensityfluidcalc of this Cas.  # noqa: E501
        :rtype: OneOfCasLeakoffdensityfluidcalc
        """
        return self._leakoffdensityfluidcalc

    @leakoffdensityfluidcalc.setter
    def leakoffdensityfluidcalc(self, leakoffdensityfluidcalc):
        """Sets the leakoffdensityfluidcalc of this Cas.


        :param leakoffdensityfluidcalc: The leakoffdensityfluidcalc of this Cas.  # noqa: E501
        :type: OneOfCasLeakoffdensityfluidcalc
        """

        self._leakoffdensityfluidcalc = leakoffdensityfluidcalc

    @property
    def leakoffprescalc(self):
        """Gets the leakoffprescalc of this Cas.  # noqa: E501


        :return: The leakoffprescalc of this Cas.  # noqa: E501
        :rtype: OneOfCasLeakoffprescalc
        """
        return self._leakoffprescalc

    @leakoffprescalc.setter
    def leakoffprescalc(self, leakoffprescalc):
        """Sets the leakoffprescalc of this Cas.


        :param leakoffprescalc: The leakoffprescalc of this Cas.  # noqa: E501
        :type: OneOfCasLeakoffprescalc
        """

        self._leakoffprescalc = leakoffprescalc

    @property
    def lengthcalc(self):
        """Gets the lengthcalc of this Cas.  # noqa: E501


        :return: The lengthcalc of this Cas.  # noqa: E501
        :rtype: OneOfCasLengthcalc
        """
        return self._lengthcalc

    @lengthcalc.setter
    def lengthcalc(self, lengthcalc):
        """Sets the lengthcalc of this Cas.


        :param lengthcalc: The lengthcalc of this Cas.  # noqa: E501
        :type: OneOfCasLengthcalc
        """

        self._lengthcalc = lengthcalc

    @property
    def notecutpull(self):
        """Gets the notecutpull of this Cas.  # noqa: E501


        :return: The notecutpull of this Cas.  # noqa: E501
        :rtype: str
        """
        return self._notecutpull

    @notecutpull.setter
    def notecutpull(self, notecutpull):
        """Sets the notecutpull of this Cas.


        :param notecutpull: The notecutpull of this Cas.  # noqa: E501
        :type: str
        """

        self._notecutpull = notecutpull

    @property
    def operatingpresslimit(self):
        """Gets the operatingpresslimit of this Cas.  # noqa: E501


        :return: The operatingpresslimit of this Cas.  # noqa: E501
        :rtype: OneOfCasOperatingpresslimit
        """
        return self._operatingpresslimit

    @operatingpresslimit.setter
    def operatingpresslimit(self, operatingpresslimit):
        """Sets the operatingpresslimit of this Cas.


        :param operatingpresslimit: The operatingpresslimit of this Cas.  # noqa: E501
        :type: OneOfCasOperatingpresslimit
        """

        self._operatingpresslimit = operatingpresslimit

    @property
    def proposedcutpull(self):
        """Gets the proposedcutpull of this Cas.  # noqa: E501


        :return: The proposedcutpull of this Cas.  # noqa: E501
        :rtype: int
        """
        return self._proposedcutpull

    @proposedcutpull.setter
    def proposedcutpull(self, proposedcutpull):
        """Sets the proposedcutpull of this Cas.


        :param proposedcutpull: The proposedcutpull of this Cas.  # noqa: E501
        :type: int
        """

        self._proposedcutpull = proposedcutpull

    @property
    def proposedpull(self):
        """Gets the proposedpull of this Cas.  # noqa: E501


        :return: The proposedpull of this Cas.  # noqa: E501
        :rtype: int
        """
        return self._proposedpull

    @proposedpull.setter
    def proposedpull(self, proposedpull):
        """Sets the proposedpull of this Cas.


        :param proposedpull: The proposedpull of this Cas.  # noqa: E501
        :type: int
        """

        self._proposedpull = proposedpull

    @property
    def proposedrun(self):
        """Gets the proposedrun of this Cas.  # noqa: E501


        :return: The proposedrun of this Cas.  # noqa: E501
        :rtype: int
        """
        return self._proposedrun

    @proposedrun.setter
    def proposedrun(self, proposedrun):
        """Sets the proposedrun of this Cas.


        :param proposedrun: The proposedrun of this Cas.  # noqa: E501
        :type: int
        """

        self._proposedrun = proposedrun

    @property
    def pullreason(self):
        """Gets the pullreason of this Cas.  # noqa: E501


        :return: The pullreason of this Cas.  # noqa: E501
        :rtype: str
        """
        return self._pullreason

    @pullreason.setter
    def pullreason(self, pullreason):
        """Sets the pullreason of this Cas.


        :param pullreason: The pullreason of this Cas.  # noqa: E501
        :type: str
        """

        self._pullreason = pullreason

    @property
    def pullreasondetail(self):
        """Gets the pullreasondetail of this Cas.  # noqa: E501


        :return: The pullreasondetail of this Cas.  # noqa: E501
        :rtype: str
        """
        return self._pullreasondetail

    @pullreasondetail.setter
    def pullreasondetail(self, pullreasondetail):
        """Sets the pullreasondetail of this Cas.


        :param pullreasondetail: The pullreasondetail of this Cas.  # noqa: E501
        :type: str
        """

        self._pullreasondetail = pullreasondetail

    @property
    def reasoncutpull(self):
        """Gets the reasoncutpull of this Cas.  # noqa: E501


        :return: The reasoncutpull of this Cas.  # noqa: E501
        :rtype: str
        """
        return self._reasoncutpull

    @reasoncutpull.setter
    def reasoncutpull(self, reasoncutpull):
        """Sets the reasoncutpull of this Cas.


        :param reasoncutpull: The reasoncutpull of this Cas.  # noqa: E501
        :type: str
        """

        self._reasoncutpull = reasoncutpull

    @property
    def scratchers(self):
        """Gets the scratchers of this Cas.  # noqa: E501


        :return: The scratchers of this Cas.  # noqa: E501
        :rtype: str
        """
        return self._scratchers

    @scratchers.setter
    def scratchers(self, scratchers):
        """Sets the scratchers of this Cas.


        :param scratchers: The scratchers of this Cas.  # noqa: E501
        :type: str
        """

        self._scratchers = scratchers

    @property
    def stickupkbcalc(self):
        """Gets the stickupkbcalc of this Cas.  # noqa: E501


        :return: The stickupkbcalc of this Cas.  # noqa: E501
        :rtype: OneOfCasStickupkbcalc
        """
        return self._stickupkbcalc

    @stickupkbcalc.setter
    def stickupkbcalc(self, stickupkbcalc):
        """Sets the stickupkbcalc of this Cas.


        :param stickupkbcalc: The stickupkbcalc of this Cas.  # noqa: E501
        :type: OneOfCasStickupkbcalc
        """

        self._stickupkbcalc = stickupkbcalc

    @property
    def stringwtdown(self):
        """Gets the stringwtdown of this Cas.  # noqa: E501


        :return: The stringwtdown of this Cas.  # noqa: E501
        :rtype: OneOfCasStringwtdown
        """
        return self._stringwtdown

    @stringwtdown.setter
    def stringwtdown(self, stringwtdown):
        """Sets the stringwtdown of this Cas.


        :param stringwtdown: The stringwtdown of this Cas.  # noqa: E501
        :type: OneOfCasStringwtdown
        """

        self._stringwtdown = stringwtdown

    @property
    def stringwtup(self):
        """Gets the stringwtup of this Cas.  # noqa: E501


        :return: The stringwtup of this Cas.  # noqa: E501
        :rtype: OneOfCasStringwtup
        """
        return self._stringwtup

    @stringwtup.setter
    def stringwtup(self, stringwtup):
        """Sets the stringwtup of this Cas.


        :param stringwtup: The stringwtup of this Cas.  # noqa: E501
        :type: OneOfCasStringwtup
        """

        self._stringwtup = stringwtup

    @property
    def syscreatedate(self):
        """Gets the syscreatedate of this Cas.  # noqa: E501


        :return: The syscreatedate of this Cas.  # noqa: E501
        :rtype: datetime
        """
        return self._syscreatedate

    @syscreatedate.setter
    def syscreatedate(self, syscreatedate):
        """Sets the syscreatedate of this Cas.


        :param syscreatedate: The syscreatedate of this Cas.  # noqa: E501
        :type: datetime
        """

        self._syscreatedate = syscreatedate

    @property
    def syscreateuser(self):
        """Gets the syscreateuser of this Cas.  # noqa: E501


        :return: The syscreateuser of this Cas.  # noqa: E501
        :rtype: str
        """
        return self._syscreateuser

    @syscreateuser.setter
    def syscreateuser(self, syscreateuser):
        """Sets the syscreateuser of this Cas.


        :param syscreateuser: The syscreateuser of this Cas.  # noqa: E501
        :type: str
        """

        self._syscreateuser = syscreateuser

    @property
    def syslockchildren(self):
        """Gets the syslockchildren of this Cas.  # noqa: E501


        :return: The syslockchildren of this Cas.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildren

    @syslockchildren.setter
    def syslockchildren(self, syslockchildren):
        """Sets the syslockchildren of this Cas.


        :param syslockchildren: The syslockchildren of this Cas.  # noqa: E501
        :type: int
        """

        self._syslockchildren = syslockchildren

    @property
    def syslockchildrenui(self):
        """Gets the syslockchildrenui of this Cas.  # noqa: E501


        :return: The syslockchildrenui of this Cas.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildrenui

    @syslockchildrenui.setter
    def syslockchildrenui(self, syslockchildrenui):
        """Sets the syslockchildrenui of this Cas.


        :param syslockchildrenui: The syslockchildrenui of this Cas.  # noqa: E501
        :type: int
        """

        self._syslockchildrenui = syslockchildrenui

    @property
    def syslockdate(self):
        """Gets the syslockdate of this Cas.  # noqa: E501


        :return: The syslockdate of this Cas.  # noqa: E501
        :rtype: datetime
        """
        return self._syslockdate

    @syslockdate.setter
    def syslockdate(self, syslockdate):
        """Sets the syslockdate of this Cas.


        :param syslockdate: The syslockdate of this Cas.  # noqa: E501
        :type: datetime
        """

        self._syslockdate = syslockdate

    @property
    def syslockme(self):
        """Gets the syslockme of this Cas.  # noqa: E501


        :return: The syslockme of this Cas.  # noqa: E501
        :rtype: int
        """
        return self._syslockme

    @syslockme.setter
    def syslockme(self, syslockme):
        """Sets the syslockme of this Cas.


        :param syslockme: The syslockme of this Cas.  # noqa: E501
        :type: int
        """

        self._syslockme = syslockme

    @property
    def syslockmeui(self):
        """Gets the syslockmeui of this Cas.  # noqa: E501


        :return: The syslockmeui of this Cas.  # noqa: E501
        :rtype: int
        """
        return self._syslockmeui

    @syslockmeui.setter
    def syslockmeui(self, syslockmeui):
        """Sets the syslockmeui of this Cas.


        :param syslockmeui: The syslockmeui of this Cas.  # noqa: E501
        :type: int
        """

        self._syslockmeui = syslockmeui

    @property
    def sysmoddate(self):
        """Gets the sysmoddate of this Cas.  # noqa: E501


        :return: The sysmoddate of this Cas.  # noqa: E501
        :rtype: datetime
        """
        return self._sysmoddate

    @sysmoddate.setter
    def sysmoddate(self, sysmoddate):
        """Sets the sysmoddate of this Cas.


        :param sysmoddate: The sysmoddate of this Cas.  # noqa: E501
        :type: datetime
        """

        self._sysmoddate = sysmoddate

    @property
    def sysmoduser(self):
        """Gets the sysmoduser of this Cas.  # noqa: E501


        :return: The sysmoduser of this Cas.  # noqa: E501
        :rtype: str
        """
        return self._sysmoduser

    @sysmoduser.setter
    def sysmoduser(self, sysmoduser):
        """Sets the sysmoduser of this Cas.


        :param sysmoduser: The sysmoduser of this Cas.  # noqa: E501
        :type: str
        """

        self._sysmoduser = sysmoduser

    @property
    def systag(self):
        """Gets the systag of this Cas.  # noqa: E501


        :return: The systag of this Cas.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this Cas.


        :param systag: The systag of this Cas.  # noqa: E501
        :type: str
        """

        self._systag = systag

    @property
    def szdriftmincalc(self):
        """Gets the szdriftmincalc of this Cas.  # noqa: E501


        :return: The szdriftmincalc of this Cas.  # noqa: E501
        :rtype: OneOfCasSzdriftmincalc
        """
        return self._szdriftmincalc

    @szdriftmincalc.setter
    def szdriftmincalc(self, szdriftmincalc):
        """Sets the szdriftmincalc of this Cas.


        :param szdriftmincalc: The szdriftmincalc of this Cas.  # noqa: E501
        :type: OneOfCasSzdriftmincalc
        """

        self._szdriftmincalc = szdriftmincalc

    @property
    def szidnomcompmincalc(self):
        """Gets the szidnomcompmincalc of this Cas.  # noqa: E501


        :return: The szidnomcompmincalc of this Cas.  # noqa: E501
        :rtype: OneOfCasSzidnomcompmincalc
        """
        return self._szidnomcompmincalc

    @szidnomcompmincalc.setter
    def szidnomcompmincalc(self, szidnomcompmincalc):
        """Sets the szidnomcompmincalc of this Cas.


        :param szidnomcompmincalc: The szidnomcompmincalc of this Cas.  # noqa: E501
        :type: OneOfCasSzidnomcompmincalc
        """

        self._szidnomcompmincalc = szidnomcompmincalc

    @property
    def szidnommincalc(self):
        """Gets the szidnommincalc of this Cas.  # noqa: E501


        :return: The szidnommincalc of this Cas.  # noqa: E501
        :rtype: OneOfCasSzidnommincalc
        """
        return self._szidnommincalc

    @szidnommincalc.setter
    def szidnommincalc(self, szidnommincalc):
        """Sets the szidnommincalc of this Cas.


        :param szidnommincalc: The szidnommincalc of this Cas.  # noqa: E501
        :type: OneOfCasSzidnommincalc
        """

        self._szidnommincalc = szidnommincalc

    @property
    def szodnomcompmaxcalc(self):
        """Gets the szodnomcompmaxcalc of this Cas.  # noqa: E501


        :return: The szodnomcompmaxcalc of this Cas.  # noqa: E501
        :rtype: OneOfCasSzodnomcompmaxcalc
        """
        return self._szodnomcompmaxcalc

    @szodnomcompmaxcalc.setter
    def szodnomcompmaxcalc(self, szodnomcompmaxcalc):
        """Sets the szodnomcompmaxcalc of this Cas.


        :param szodnomcompmaxcalc: The szodnomcompmaxcalc of this Cas.  # noqa: E501
        :type: OneOfCasSzodnomcompmaxcalc
        """

        self._szodnomcompmaxcalc = szodnomcompmaxcalc

    @property
    def szodnommaxcalc(self):
        """Gets the szodnommaxcalc of this Cas.  # noqa: E501


        :return: The szodnommaxcalc of this Cas.  # noqa: E501
        :rtype: OneOfCasSzodnommaxcalc
        """
        return self._szodnommaxcalc

    @szodnommaxcalc.setter
    def szodnommaxcalc(self, szodnommaxcalc):
        """Sets the szodnommaxcalc of this Cas.


        :param szodnommaxcalc: The szodnommaxcalc of this Cas.  # noqa: E501
        :type: OneOfCasSzodnommaxcalc
        """

        self._szodnommaxcalc = szodnommaxcalc

    @property
    def tension(self):
        """Gets the tension of this Cas.  # noqa: E501


        :return: The tension of this Cas.  # noqa: E501
        :rtype: OneOfCasTension
        """
        return self._tension

    @tension.setter
    def tension(self, tension):
        """Sets the tension of this Cas.


        :param tension: The tension of this Cas.  # noqa: E501
        :type: OneOfCasTension
        """

        self._tension = tension

    @property
    def totalstretchsumcalc(self):
        """Gets the totalstretchsumcalc of this Cas.  # noqa: E501


        :return: The totalstretchsumcalc of this Cas.  # noqa: E501
        :rtype: OneOfCasTotalstretchsumcalc
        """
        return self._totalstretchsumcalc

    @totalstretchsumcalc.setter
    def totalstretchsumcalc(self, totalstretchsumcalc):
        """Sets the totalstretchsumcalc of this Cas.


        :param totalstretchsumcalc: The totalstretchsumcalc of this Cas.  # noqa: E501
        :type: OneOfCasTotalstretchsumcalc
        """

        self._totalstretchsumcalc = totalstretchsumcalc

    @property
    def travelequipwt(self):
        """Gets the travelequipwt of this Cas.  # noqa: E501


        :return: The travelequipwt of this Cas.  # noqa: E501
        :rtype: OneOfCasTravelequipwt
        """
        return self._travelequipwt

    @travelequipwt.setter
    def travelequipwt(self, travelequipwt):
        """Sets the travelequipwt of this Cas.


        :param travelequipwt: The travelequipwt of this Cas.  # noqa: E501
        :type: OneOfCasTravelequipwt
        """

        self._travelequipwt = travelequipwt

    @property
    def usertxt1(self):
        """Gets the usertxt1 of this Cas.  # noqa: E501


        :return: The usertxt1 of this Cas.  # noqa: E501
        :rtype: str
        """
        return self._usertxt1

    @usertxt1.setter
    def usertxt1(self, usertxt1):
        """Sets the usertxt1 of this Cas.


        :param usertxt1: The usertxt1 of this Cas.  # noqa: E501
        :type: str
        """

        self._usertxt1 = usertxt1

    @property
    def usertxt2(self):
        """Gets the usertxt2 of this Cas.  # noqa: E501


        :return: The usertxt2 of this Cas.  # noqa: E501
        :rtype: str
        """
        return self._usertxt2

    @usertxt2.setter
    def usertxt2(self, usertxt2):
        """Sets the usertxt2 of this Cas.


        :param usertxt2: The usertxt2 of this Cas.  # noqa: E501
        :type: str
        """

        self._usertxt2 = usertxt2

    @property
    def usertxt3(self):
        """Gets the usertxt3 of this Cas.  # noqa: E501


        :return: The usertxt3 of this Cas.  # noqa: E501
        :rtype: str
        """
        return self._usertxt3

    @usertxt3.setter
    def usertxt3(self, usertxt3):
        """Sets the usertxt3 of this Cas.


        :param usertxt3: The usertxt3 of this Cas.  # noqa: E501
        :type: str
        """

        self._usertxt3 = usertxt3

    @property
    def volumeinternalcalc(self):
        """Gets the volumeinternalcalc of this Cas.  # noqa: E501


        :return: The volumeinternalcalc of this Cas.  # noqa: E501
        :rtype: OneOfCasVolumeinternalcalc
        """
        return self._volumeinternalcalc

    @volumeinternalcalc.setter
    def volumeinternalcalc(self, volumeinternalcalc):
        """Sets the volumeinternalcalc of this Cas.


        :param volumeinternalcalc: The volumeinternalcalc of this Cas.  # noqa: E501
        :type: OneOfCasVolumeinternalcalc
        """

        self._volumeinternalcalc = volumeinternalcalc

    @property
    def volumeshoetrack(self):
        """Gets the volumeshoetrack of this Cas.  # noqa: E501


        :return: The volumeshoetrack of this Cas.  # noqa: E501
        :rtype: OneOfCasVolumeshoetrack
        """
        return self._volumeshoetrack

    @volumeshoetrack.setter
    def volumeshoetrack(self, volumeshoetrack):
        """Sets the volumeshoetrack of this Cas.


        :param volumeshoetrack: The volumeshoetrack of this Cas.  # noqa: E501
        :type: OneOfCasVolumeshoetrack
        """

        self._volumeshoetrack = volumeshoetrack

    @property
    def wellboreszcalc(self):
        """Gets the wellboreszcalc of this Cas.  # noqa: E501


        :return: The wellboreszcalc of this Cas.  # noqa: E501
        :rtype: OneOfCasWellboreszcalc
        """
        return self._wellboreszcalc

    @wellboreszcalc.setter
    def wellboreszcalc(self, wellboreszcalc):
        """Sets the wellboreszcalc of this Cas.


        :param wellboreszcalc: The wellboreszcalc of this Cas.  # noqa: E501
        :type: OneOfCasWellboreszcalc
        """

        self._wellboreszcalc = wellboreszcalc

    @property
    def wellheader(self):
        """Gets the wellheader of this Cas.  # noqa: E501


        :return: The wellheader of this Cas.  # noqa: E501
        :rtype: AnyOfCasWellheader
        """
        return self._wellheader

    @wellheader.setter
    def wellheader(self, wellheader):
        """Sets the wellheader of this Cas.


        :param wellheader: The wellheader of this Cas.  # noqa: E501
        :type: AnyOfCasWellheader
        """

        self._wellheader = wellheader

    @property
    def wtperlengthcalc(self):
        """Gets the wtperlengthcalc of this Cas.  # noqa: E501


        :return: The wtperlengthcalc of this Cas.  # noqa: E501
        :rtype: OneOfCasWtperlengthcalc
        """
        return self._wtperlengthcalc

    @wtperlengthcalc.setter
    def wtperlengthcalc(self, wtperlengthcalc):
        """Sets the wtperlengthcalc of this Cas.


        :param wtperlengthcalc: The wtperlengthcalc of this Cas.  # noqa: E501
        :type: OneOfCasWtperlengthcalc
        """

        self._wtperlengthcalc = wtperlengthcalc

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Cas, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Cas):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
