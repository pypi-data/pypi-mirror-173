# coding: utf-8

"""
    OData Service for namespace Default

    This OData service is located at http://localhost  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TubCompPcpStator(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'benchtestdttm': 'datetime',
        'benchtestfrictiontorque': 'OneOfTubCompPcpStatorBenchtestfrictiontorque',
        'benchtestpresdiff': 'OneOfTubCompPcpStatorBenchtestpresdiff',
        'benchtestspeed': 'OneOfTubCompPcpStatorBenchtestspeed',
        'benchtestvoldpeff': 'OneOfTubCompPcpStatorBenchtestvoldpeff',
        'benchtestvoldpeffzero': 'OneOfTubCompPcpStatorBenchtestvoldpeffzero',
        'distancetagbar': 'OneOfTubCompPcpStatorDistancetagbar',
        'elastomermodel': 'str',
        'elastomertyp': 'str',
        'idrec': 'str',
        'idrecparent': 'str',
        'idwell': 'str',
        'lengthstator': 'OneOfTubCompPcpStatorLengthstator',
        'lobeconfig': 'str',
        'maxtemp': 'OneOfTubCompPcpStatorMaxtemp',
        'perforated': 'int',
        'pitch': 'OneOfTubCompPcpStatorPitch',
        'syscreatedate': 'datetime',
        'syscreateuser': 'str',
        'syslockchildren': 'int',
        'syslockchildrenui': 'int',
        'syslockdate': 'datetime',
        'syslockme': 'int',
        'syslockmeui': 'int',
        'sysmoddate': 'datetime',
        'sysmoduser': 'str',
        'systag': 'str',
        'szodmin': 'OneOfTubCompPcpStatorSzodmin',
        'tub_comp': 'AnyOfTubCompPcpStatorTubComp'
    }

    attribute_map = {
        'benchtestdttm': 'benchtestdttm',
        'benchtestfrictiontorque': 'benchtestfrictiontorque',
        'benchtestpresdiff': 'benchtestpresdiff',
        'benchtestspeed': 'benchtestspeed',
        'benchtestvoldpeff': 'benchtestvoldpeff',
        'benchtestvoldpeffzero': 'benchtestvoldpeffzero',
        'distancetagbar': 'distancetagbar',
        'elastomermodel': 'elastomermodel',
        'elastomertyp': 'elastomertyp',
        'idrec': 'idrec',
        'idrecparent': 'idrecparent',
        'idwell': 'idwell',
        'lengthstator': 'lengthstator',
        'lobeconfig': 'lobeconfig',
        'maxtemp': 'maxtemp',
        'perforated': 'perforated',
        'pitch': 'pitch',
        'syscreatedate': 'syscreatedate',
        'syscreateuser': 'syscreateuser',
        'syslockchildren': 'syslockchildren',
        'syslockchildrenui': 'syslockchildrenui',
        'syslockdate': 'syslockdate',
        'syslockme': 'syslockme',
        'syslockmeui': 'syslockmeui',
        'sysmoddate': 'sysmoddate',
        'sysmoduser': 'sysmoduser',
        'systag': 'systag',
        'szodmin': 'szodmin',
        'tub_comp': 'tubComp'
    }

    def __init__(self, benchtestdttm=None, benchtestfrictiontorque=None, benchtestpresdiff=None, benchtestspeed=None, benchtestvoldpeff=None, benchtestvoldpeffzero=None, distancetagbar=None, elastomermodel=None, elastomertyp=None, idrec=None, idrecparent=None, idwell=None, lengthstator=None, lobeconfig=None, maxtemp=None, perforated=None, pitch=None, syscreatedate=None, syscreateuser=None, syslockchildren=None, syslockchildrenui=None, syslockdate=None, syslockme=None, syslockmeui=None, sysmoddate=None, sysmoduser=None, systag=None, szodmin=None, tub_comp=None):  # noqa: E501
        """TubCompPcpStator - a model defined in Swagger"""  # noqa: E501
        self._benchtestdttm = None
        self._benchtestfrictiontorque = None
        self._benchtestpresdiff = None
        self._benchtestspeed = None
        self._benchtestvoldpeff = None
        self._benchtestvoldpeffzero = None
        self._distancetagbar = None
        self._elastomermodel = None
        self._elastomertyp = None
        self._idrec = None
        self._idrecparent = None
        self._idwell = None
        self._lengthstator = None
        self._lobeconfig = None
        self._maxtemp = None
        self._perforated = None
        self._pitch = None
        self._syscreatedate = None
        self._syscreateuser = None
        self._syslockchildren = None
        self._syslockchildrenui = None
        self._syslockdate = None
        self._syslockme = None
        self._syslockmeui = None
        self._sysmoddate = None
        self._sysmoduser = None
        self._systag = None
        self._szodmin = None
        self._tub_comp = None
        self.discriminator = None
        if benchtestdttm is not None:
            self.benchtestdttm = benchtestdttm
        if benchtestfrictiontorque is not None:
            self.benchtestfrictiontorque = benchtestfrictiontorque
        if benchtestpresdiff is not None:
            self.benchtestpresdiff = benchtestpresdiff
        if benchtestspeed is not None:
            self.benchtestspeed = benchtestspeed
        if benchtestvoldpeff is not None:
            self.benchtestvoldpeff = benchtestvoldpeff
        if benchtestvoldpeffzero is not None:
            self.benchtestvoldpeffzero = benchtestvoldpeffzero
        if distancetagbar is not None:
            self.distancetagbar = distancetagbar
        if elastomermodel is not None:
            self.elastomermodel = elastomermodel
        if elastomertyp is not None:
            self.elastomertyp = elastomertyp
        if idrec is not None:
            self.idrec = idrec
        if idrecparent is not None:
            self.idrecparent = idrecparent
        if idwell is not None:
            self.idwell = idwell
        if lengthstator is not None:
            self.lengthstator = lengthstator
        if lobeconfig is not None:
            self.lobeconfig = lobeconfig
        if maxtemp is not None:
            self.maxtemp = maxtemp
        if perforated is not None:
            self.perforated = perforated
        if pitch is not None:
            self.pitch = pitch
        if syscreatedate is not None:
            self.syscreatedate = syscreatedate
        if syscreateuser is not None:
            self.syscreateuser = syscreateuser
        if syslockchildren is not None:
            self.syslockchildren = syslockchildren
        if syslockchildrenui is not None:
            self.syslockchildrenui = syslockchildrenui
        if syslockdate is not None:
            self.syslockdate = syslockdate
        if syslockme is not None:
            self.syslockme = syslockme
        if syslockmeui is not None:
            self.syslockmeui = syslockmeui
        if sysmoddate is not None:
            self.sysmoddate = sysmoddate
        if sysmoduser is not None:
            self.sysmoduser = sysmoduser
        if systag is not None:
            self.systag = systag
        if szodmin is not None:
            self.szodmin = szodmin
        if tub_comp is not None:
            self.tub_comp = tub_comp

    @property
    def benchtestdttm(self):
        """Gets the benchtestdttm of this TubCompPcpStator.  # noqa: E501


        :return: The benchtestdttm of this TubCompPcpStator.  # noqa: E501
        :rtype: datetime
        """
        return self._benchtestdttm

    @benchtestdttm.setter
    def benchtestdttm(self, benchtestdttm):
        """Sets the benchtestdttm of this TubCompPcpStator.


        :param benchtestdttm: The benchtestdttm of this TubCompPcpStator.  # noqa: E501
        :type: datetime
        """

        self._benchtestdttm = benchtestdttm

    @property
    def benchtestfrictiontorque(self):
        """Gets the benchtestfrictiontorque of this TubCompPcpStator.  # noqa: E501


        :return: The benchtestfrictiontorque of this TubCompPcpStator.  # noqa: E501
        :rtype: OneOfTubCompPcpStatorBenchtestfrictiontorque
        """
        return self._benchtestfrictiontorque

    @benchtestfrictiontorque.setter
    def benchtestfrictiontorque(self, benchtestfrictiontorque):
        """Sets the benchtestfrictiontorque of this TubCompPcpStator.


        :param benchtestfrictiontorque: The benchtestfrictiontorque of this TubCompPcpStator.  # noqa: E501
        :type: OneOfTubCompPcpStatorBenchtestfrictiontorque
        """

        self._benchtestfrictiontorque = benchtestfrictiontorque

    @property
    def benchtestpresdiff(self):
        """Gets the benchtestpresdiff of this TubCompPcpStator.  # noqa: E501


        :return: The benchtestpresdiff of this TubCompPcpStator.  # noqa: E501
        :rtype: OneOfTubCompPcpStatorBenchtestpresdiff
        """
        return self._benchtestpresdiff

    @benchtestpresdiff.setter
    def benchtestpresdiff(self, benchtestpresdiff):
        """Sets the benchtestpresdiff of this TubCompPcpStator.


        :param benchtestpresdiff: The benchtestpresdiff of this TubCompPcpStator.  # noqa: E501
        :type: OneOfTubCompPcpStatorBenchtestpresdiff
        """

        self._benchtestpresdiff = benchtestpresdiff

    @property
    def benchtestspeed(self):
        """Gets the benchtestspeed of this TubCompPcpStator.  # noqa: E501


        :return: The benchtestspeed of this TubCompPcpStator.  # noqa: E501
        :rtype: OneOfTubCompPcpStatorBenchtestspeed
        """
        return self._benchtestspeed

    @benchtestspeed.setter
    def benchtestspeed(self, benchtestspeed):
        """Sets the benchtestspeed of this TubCompPcpStator.


        :param benchtestspeed: The benchtestspeed of this TubCompPcpStator.  # noqa: E501
        :type: OneOfTubCompPcpStatorBenchtestspeed
        """

        self._benchtestspeed = benchtestspeed

    @property
    def benchtestvoldpeff(self):
        """Gets the benchtestvoldpeff of this TubCompPcpStator.  # noqa: E501


        :return: The benchtestvoldpeff of this TubCompPcpStator.  # noqa: E501
        :rtype: OneOfTubCompPcpStatorBenchtestvoldpeff
        """
        return self._benchtestvoldpeff

    @benchtestvoldpeff.setter
    def benchtestvoldpeff(self, benchtestvoldpeff):
        """Sets the benchtestvoldpeff of this TubCompPcpStator.


        :param benchtestvoldpeff: The benchtestvoldpeff of this TubCompPcpStator.  # noqa: E501
        :type: OneOfTubCompPcpStatorBenchtestvoldpeff
        """

        self._benchtestvoldpeff = benchtestvoldpeff

    @property
    def benchtestvoldpeffzero(self):
        """Gets the benchtestvoldpeffzero of this TubCompPcpStator.  # noqa: E501


        :return: The benchtestvoldpeffzero of this TubCompPcpStator.  # noqa: E501
        :rtype: OneOfTubCompPcpStatorBenchtestvoldpeffzero
        """
        return self._benchtestvoldpeffzero

    @benchtestvoldpeffzero.setter
    def benchtestvoldpeffzero(self, benchtestvoldpeffzero):
        """Sets the benchtestvoldpeffzero of this TubCompPcpStator.


        :param benchtestvoldpeffzero: The benchtestvoldpeffzero of this TubCompPcpStator.  # noqa: E501
        :type: OneOfTubCompPcpStatorBenchtestvoldpeffzero
        """

        self._benchtestvoldpeffzero = benchtestvoldpeffzero

    @property
    def distancetagbar(self):
        """Gets the distancetagbar of this TubCompPcpStator.  # noqa: E501


        :return: The distancetagbar of this TubCompPcpStator.  # noqa: E501
        :rtype: OneOfTubCompPcpStatorDistancetagbar
        """
        return self._distancetagbar

    @distancetagbar.setter
    def distancetagbar(self, distancetagbar):
        """Sets the distancetagbar of this TubCompPcpStator.


        :param distancetagbar: The distancetagbar of this TubCompPcpStator.  # noqa: E501
        :type: OneOfTubCompPcpStatorDistancetagbar
        """

        self._distancetagbar = distancetagbar

    @property
    def elastomermodel(self):
        """Gets the elastomermodel of this TubCompPcpStator.  # noqa: E501


        :return: The elastomermodel of this TubCompPcpStator.  # noqa: E501
        :rtype: str
        """
        return self._elastomermodel

    @elastomermodel.setter
    def elastomermodel(self, elastomermodel):
        """Sets the elastomermodel of this TubCompPcpStator.


        :param elastomermodel: The elastomermodel of this TubCompPcpStator.  # noqa: E501
        :type: str
        """

        self._elastomermodel = elastomermodel

    @property
    def elastomertyp(self):
        """Gets the elastomertyp of this TubCompPcpStator.  # noqa: E501


        :return: The elastomertyp of this TubCompPcpStator.  # noqa: E501
        :rtype: str
        """
        return self._elastomertyp

    @elastomertyp.setter
    def elastomertyp(self, elastomertyp):
        """Sets the elastomertyp of this TubCompPcpStator.


        :param elastomertyp: The elastomertyp of this TubCompPcpStator.  # noqa: E501
        :type: str
        """

        self._elastomertyp = elastomertyp

    @property
    def idrec(self):
        """Gets the idrec of this TubCompPcpStator.  # noqa: E501


        :return: The idrec of this TubCompPcpStator.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this TubCompPcpStator.


        :param idrec: The idrec of this TubCompPcpStator.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecparent(self):
        """Gets the idrecparent of this TubCompPcpStator.  # noqa: E501


        :return: The idrecparent of this TubCompPcpStator.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this TubCompPcpStator.


        :param idrecparent: The idrecparent of this TubCompPcpStator.  # noqa: E501
        :type: str
        """

        self._idrecparent = idrecparent

    @property
    def idwell(self):
        """Gets the idwell of this TubCompPcpStator.  # noqa: E501


        :return: The idwell of this TubCompPcpStator.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this TubCompPcpStator.


        :param idwell: The idwell of this TubCompPcpStator.  # noqa: E501
        :type: str
        """

        self._idwell = idwell

    @property
    def lengthstator(self):
        """Gets the lengthstator of this TubCompPcpStator.  # noqa: E501


        :return: The lengthstator of this TubCompPcpStator.  # noqa: E501
        :rtype: OneOfTubCompPcpStatorLengthstator
        """
        return self._lengthstator

    @lengthstator.setter
    def lengthstator(self, lengthstator):
        """Sets the lengthstator of this TubCompPcpStator.


        :param lengthstator: The lengthstator of this TubCompPcpStator.  # noqa: E501
        :type: OneOfTubCompPcpStatorLengthstator
        """

        self._lengthstator = lengthstator

    @property
    def lobeconfig(self):
        """Gets the lobeconfig of this TubCompPcpStator.  # noqa: E501


        :return: The lobeconfig of this TubCompPcpStator.  # noqa: E501
        :rtype: str
        """
        return self._lobeconfig

    @lobeconfig.setter
    def lobeconfig(self, lobeconfig):
        """Sets the lobeconfig of this TubCompPcpStator.


        :param lobeconfig: The lobeconfig of this TubCompPcpStator.  # noqa: E501
        :type: str
        """

        self._lobeconfig = lobeconfig

    @property
    def maxtemp(self):
        """Gets the maxtemp of this TubCompPcpStator.  # noqa: E501


        :return: The maxtemp of this TubCompPcpStator.  # noqa: E501
        :rtype: OneOfTubCompPcpStatorMaxtemp
        """
        return self._maxtemp

    @maxtemp.setter
    def maxtemp(self, maxtemp):
        """Sets the maxtemp of this TubCompPcpStator.


        :param maxtemp: The maxtemp of this TubCompPcpStator.  # noqa: E501
        :type: OneOfTubCompPcpStatorMaxtemp
        """

        self._maxtemp = maxtemp

    @property
    def perforated(self):
        """Gets the perforated of this TubCompPcpStator.  # noqa: E501


        :return: The perforated of this TubCompPcpStator.  # noqa: E501
        :rtype: int
        """
        return self._perforated

    @perforated.setter
    def perforated(self, perforated):
        """Sets the perforated of this TubCompPcpStator.


        :param perforated: The perforated of this TubCompPcpStator.  # noqa: E501
        :type: int
        """

        self._perforated = perforated

    @property
    def pitch(self):
        """Gets the pitch of this TubCompPcpStator.  # noqa: E501


        :return: The pitch of this TubCompPcpStator.  # noqa: E501
        :rtype: OneOfTubCompPcpStatorPitch
        """
        return self._pitch

    @pitch.setter
    def pitch(self, pitch):
        """Sets the pitch of this TubCompPcpStator.


        :param pitch: The pitch of this TubCompPcpStator.  # noqa: E501
        :type: OneOfTubCompPcpStatorPitch
        """

        self._pitch = pitch

    @property
    def syscreatedate(self):
        """Gets the syscreatedate of this TubCompPcpStator.  # noqa: E501


        :return: The syscreatedate of this TubCompPcpStator.  # noqa: E501
        :rtype: datetime
        """
        return self._syscreatedate

    @syscreatedate.setter
    def syscreatedate(self, syscreatedate):
        """Sets the syscreatedate of this TubCompPcpStator.


        :param syscreatedate: The syscreatedate of this TubCompPcpStator.  # noqa: E501
        :type: datetime
        """

        self._syscreatedate = syscreatedate

    @property
    def syscreateuser(self):
        """Gets the syscreateuser of this TubCompPcpStator.  # noqa: E501


        :return: The syscreateuser of this TubCompPcpStator.  # noqa: E501
        :rtype: str
        """
        return self._syscreateuser

    @syscreateuser.setter
    def syscreateuser(self, syscreateuser):
        """Sets the syscreateuser of this TubCompPcpStator.


        :param syscreateuser: The syscreateuser of this TubCompPcpStator.  # noqa: E501
        :type: str
        """

        self._syscreateuser = syscreateuser

    @property
    def syslockchildren(self):
        """Gets the syslockchildren of this TubCompPcpStator.  # noqa: E501


        :return: The syslockchildren of this TubCompPcpStator.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildren

    @syslockchildren.setter
    def syslockchildren(self, syslockchildren):
        """Sets the syslockchildren of this TubCompPcpStator.


        :param syslockchildren: The syslockchildren of this TubCompPcpStator.  # noqa: E501
        :type: int
        """

        self._syslockchildren = syslockchildren

    @property
    def syslockchildrenui(self):
        """Gets the syslockchildrenui of this TubCompPcpStator.  # noqa: E501


        :return: The syslockchildrenui of this TubCompPcpStator.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildrenui

    @syslockchildrenui.setter
    def syslockchildrenui(self, syslockchildrenui):
        """Sets the syslockchildrenui of this TubCompPcpStator.


        :param syslockchildrenui: The syslockchildrenui of this TubCompPcpStator.  # noqa: E501
        :type: int
        """

        self._syslockchildrenui = syslockchildrenui

    @property
    def syslockdate(self):
        """Gets the syslockdate of this TubCompPcpStator.  # noqa: E501


        :return: The syslockdate of this TubCompPcpStator.  # noqa: E501
        :rtype: datetime
        """
        return self._syslockdate

    @syslockdate.setter
    def syslockdate(self, syslockdate):
        """Sets the syslockdate of this TubCompPcpStator.


        :param syslockdate: The syslockdate of this TubCompPcpStator.  # noqa: E501
        :type: datetime
        """

        self._syslockdate = syslockdate

    @property
    def syslockme(self):
        """Gets the syslockme of this TubCompPcpStator.  # noqa: E501


        :return: The syslockme of this TubCompPcpStator.  # noqa: E501
        :rtype: int
        """
        return self._syslockme

    @syslockme.setter
    def syslockme(self, syslockme):
        """Sets the syslockme of this TubCompPcpStator.


        :param syslockme: The syslockme of this TubCompPcpStator.  # noqa: E501
        :type: int
        """

        self._syslockme = syslockme

    @property
    def syslockmeui(self):
        """Gets the syslockmeui of this TubCompPcpStator.  # noqa: E501


        :return: The syslockmeui of this TubCompPcpStator.  # noqa: E501
        :rtype: int
        """
        return self._syslockmeui

    @syslockmeui.setter
    def syslockmeui(self, syslockmeui):
        """Sets the syslockmeui of this TubCompPcpStator.


        :param syslockmeui: The syslockmeui of this TubCompPcpStator.  # noqa: E501
        :type: int
        """

        self._syslockmeui = syslockmeui

    @property
    def sysmoddate(self):
        """Gets the sysmoddate of this TubCompPcpStator.  # noqa: E501


        :return: The sysmoddate of this TubCompPcpStator.  # noqa: E501
        :rtype: datetime
        """
        return self._sysmoddate

    @sysmoddate.setter
    def sysmoddate(self, sysmoddate):
        """Sets the sysmoddate of this TubCompPcpStator.


        :param sysmoddate: The sysmoddate of this TubCompPcpStator.  # noqa: E501
        :type: datetime
        """

        self._sysmoddate = sysmoddate

    @property
    def sysmoduser(self):
        """Gets the sysmoduser of this TubCompPcpStator.  # noqa: E501


        :return: The sysmoduser of this TubCompPcpStator.  # noqa: E501
        :rtype: str
        """
        return self._sysmoduser

    @sysmoduser.setter
    def sysmoduser(self, sysmoduser):
        """Sets the sysmoduser of this TubCompPcpStator.


        :param sysmoduser: The sysmoduser of this TubCompPcpStator.  # noqa: E501
        :type: str
        """

        self._sysmoduser = sysmoduser

    @property
    def systag(self):
        """Gets the systag of this TubCompPcpStator.  # noqa: E501


        :return: The systag of this TubCompPcpStator.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this TubCompPcpStator.


        :param systag: The systag of this TubCompPcpStator.  # noqa: E501
        :type: str
        """

        self._systag = systag

    @property
    def szodmin(self):
        """Gets the szodmin of this TubCompPcpStator.  # noqa: E501


        :return: The szodmin of this TubCompPcpStator.  # noqa: E501
        :rtype: OneOfTubCompPcpStatorSzodmin
        """
        return self._szodmin

    @szodmin.setter
    def szodmin(self, szodmin):
        """Sets the szodmin of this TubCompPcpStator.


        :param szodmin: The szodmin of this TubCompPcpStator.  # noqa: E501
        :type: OneOfTubCompPcpStatorSzodmin
        """

        self._szodmin = szodmin

    @property
    def tub_comp(self):
        """Gets the tub_comp of this TubCompPcpStator.  # noqa: E501


        :return: The tub_comp of this TubCompPcpStator.  # noqa: E501
        :rtype: AnyOfTubCompPcpStatorTubComp
        """
        return self._tub_comp

    @tub_comp.setter
    def tub_comp(self, tub_comp):
        """Sets the tub_comp of this TubCompPcpStator.


        :param tub_comp: The tub_comp of this TubCompPcpStator.  # noqa: E501
        :type: AnyOfTubCompPcpStatorTubComp
        """

        self._tub_comp = tub_comp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TubCompPcpStator, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TubCompPcpStator):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
