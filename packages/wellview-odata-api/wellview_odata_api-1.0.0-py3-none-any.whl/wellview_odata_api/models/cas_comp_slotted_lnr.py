# coding: utf-8

"""
    OData Service for namespace Default

    This OData service is located at http://localhost  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CasCompSlottedLnr(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'blankbottom': 'OneOfCasCompSlottedLnrBlankbottom',
        'blanktop': 'OneOfCasCompSlottedLnrBlanktop',
        'cas_comp': 'AnyOfCasCompSlottedLnrCasComp',
        'centerslengthwise': 'OneOfCasCompSlottedLnrCenterslengthwise',
        'idrec': 'str',
        'idrecparent': 'str',
        'idwell': 'str',
        'openingmaxdimension': 'OneOfCasCompSlottedLnrOpeningmaxdimension',
        'openingmindimension': 'OneOfCasCompSlottedLnrOpeningmindimension',
        'percentopenarea': 'OneOfCasCompSlottedLnrPercentopenarea',
        'perfrows': 'int',
        'screengauge': 'OneOfCasCompSlottedLnrScreengauge',
        'slotdes': 'str',
        'slotfrequency': 'OneOfCasCompSlottedLnrSlotfrequency',
        'slotlength': 'OneOfCasCompSlottedLnrSlotlength',
        'slotpattern': 'str',
        'slotwidth': 'OneOfCasCompSlottedLnrSlotwidth',
        'syscreatedate': 'datetime',
        'syscreateuser': 'str',
        'syslockchildren': 'int',
        'syslockchildrenui': 'int',
        'syslockdate': 'datetime',
        'syslockme': 'int',
        'syslockmeui': 'int',
        'sysmoddate': 'datetime',
        'sysmoduser': 'str',
        'systag': 'str'
    }

    attribute_map = {
        'blankbottom': 'blankbottom',
        'blanktop': 'blanktop',
        'cas_comp': 'casComp',
        'centerslengthwise': 'centerslengthwise',
        'idrec': 'idrec',
        'idrecparent': 'idrecparent',
        'idwell': 'idwell',
        'openingmaxdimension': 'openingmaxdimension',
        'openingmindimension': 'openingmindimension',
        'percentopenarea': 'percentopenarea',
        'perfrows': 'perfrows',
        'screengauge': 'screengauge',
        'slotdes': 'slotdes',
        'slotfrequency': 'slotfrequency',
        'slotlength': 'slotlength',
        'slotpattern': 'slotpattern',
        'slotwidth': 'slotwidth',
        'syscreatedate': 'syscreatedate',
        'syscreateuser': 'syscreateuser',
        'syslockchildren': 'syslockchildren',
        'syslockchildrenui': 'syslockchildrenui',
        'syslockdate': 'syslockdate',
        'syslockme': 'syslockme',
        'syslockmeui': 'syslockmeui',
        'sysmoddate': 'sysmoddate',
        'sysmoduser': 'sysmoduser',
        'systag': 'systag'
    }

    def __init__(self, blankbottom=None, blanktop=None, cas_comp=None, centerslengthwise=None, idrec=None, idrecparent=None, idwell=None, openingmaxdimension=None, openingmindimension=None, percentopenarea=None, perfrows=None, screengauge=None, slotdes=None, slotfrequency=None, slotlength=None, slotpattern=None, slotwidth=None, syscreatedate=None, syscreateuser=None, syslockchildren=None, syslockchildrenui=None, syslockdate=None, syslockme=None, syslockmeui=None, sysmoddate=None, sysmoduser=None, systag=None):  # noqa: E501
        """CasCompSlottedLnr - a model defined in Swagger"""  # noqa: E501
        self._blankbottom = None
        self._blanktop = None
        self._cas_comp = None
        self._centerslengthwise = None
        self._idrec = None
        self._idrecparent = None
        self._idwell = None
        self._openingmaxdimension = None
        self._openingmindimension = None
        self._percentopenarea = None
        self._perfrows = None
        self._screengauge = None
        self._slotdes = None
        self._slotfrequency = None
        self._slotlength = None
        self._slotpattern = None
        self._slotwidth = None
        self._syscreatedate = None
        self._syscreateuser = None
        self._syslockchildren = None
        self._syslockchildrenui = None
        self._syslockdate = None
        self._syslockme = None
        self._syslockmeui = None
        self._sysmoddate = None
        self._sysmoduser = None
        self._systag = None
        self.discriminator = None
        if blankbottom is not None:
            self.blankbottom = blankbottom
        if blanktop is not None:
            self.blanktop = blanktop
        if cas_comp is not None:
            self.cas_comp = cas_comp
        if centerslengthwise is not None:
            self.centerslengthwise = centerslengthwise
        if idrec is not None:
            self.idrec = idrec
        if idrecparent is not None:
            self.idrecparent = idrecparent
        if idwell is not None:
            self.idwell = idwell
        if openingmaxdimension is not None:
            self.openingmaxdimension = openingmaxdimension
        if openingmindimension is not None:
            self.openingmindimension = openingmindimension
        if percentopenarea is not None:
            self.percentopenarea = percentopenarea
        if perfrows is not None:
            self.perfrows = perfrows
        if screengauge is not None:
            self.screengauge = screengauge
        if slotdes is not None:
            self.slotdes = slotdes
        if slotfrequency is not None:
            self.slotfrequency = slotfrequency
        if slotlength is not None:
            self.slotlength = slotlength
        if slotpattern is not None:
            self.slotpattern = slotpattern
        if slotwidth is not None:
            self.slotwidth = slotwidth
        if syscreatedate is not None:
            self.syscreatedate = syscreatedate
        if syscreateuser is not None:
            self.syscreateuser = syscreateuser
        if syslockchildren is not None:
            self.syslockchildren = syslockchildren
        if syslockchildrenui is not None:
            self.syslockchildrenui = syslockchildrenui
        if syslockdate is not None:
            self.syslockdate = syslockdate
        if syslockme is not None:
            self.syslockme = syslockme
        if syslockmeui is not None:
            self.syslockmeui = syslockmeui
        if sysmoddate is not None:
            self.sysmoddate = sysmoddate
        if sysmoduser is not None:
            self.sysmoduser = sysmoduser
        if systag is not None:
            self.systag = systag

    @property
    def blankbottom(self):
        """Gets the blankbottom of this CasCompSlottedLnr.  # noqa: E501


        :return: The blankbottom of this CasCompSlottedLnr.  # noqa: E501
        :rtype: OneOfCasCompSlottedLnrBlankbottom
        """
        return self._blankbottom

    @blankbottom.setter
    def blankbottom(self, blankbottom):
        """Sets the blankbottom of this CasCompSlottedLnr.


        :param blankbottom: The blankbottom of this CasCompSlottedLnr.  # noqa: E501
        :type: OneOfCasCompSlottedLnrBlankbottom
        """

        self._blankbottom = blankbottom

    @property
    def blanktop(self):
        """Gets the blanktop of this CasCompSlottedLnr.  # noqa: E501


        :return: The blanktop of this CasCompSlottedLnr.  # noqa: E501
        :rtype: OneOfCasCompSlottedLnrBlanktop
        """
        return self._blanktop

    @blanktop.setter
    def blanktop(self, blanktop):
        """Sets the blanktop of this CasCompSlottedLnr.


        :param blanktop: The blanktop of this CasCompSlottedLnr.  # noqa: E501
        :type: OneOfCasCompSlottedLnrBlanktop
        """

        self._blanktop = blanktop

    @property
    def cas_comp(self):
        """Gets the cas_comp of this CasCompSlottedLnr.  # noqa: E501


        :return: The cas_comp of this CasCompSlottedLnr.  # noqa: E501
        :rtype: AnyOfCasCompSlottedLnrCasComp
        """
        return self._cas_comp

    @cas_comp.setter
    def cas_comp(self, cas_comp):
        """Sets the cas_comp of this CasCompSlottedLnr.


        :param cas_comp: The cas_comp of this CasCompSlottedLnr.  # noqa: E501
        :type: AnyOfCasCompSlottedLnrCasComp
        """

        self._cas_comp = cas_comp

    @property
    def centerslengthwise(self):
        """Gets the centerslengthwise of this CasCompSlottedLnr.  # noqa: E501


        :return: The centerslengthwise of this CasCompSlottedLnr.  # noqa: E501
        :rtype: OneOfCasCompSlottedLnrCenterslengthwise
        """
        return self._centerslengthwise

    @centerslengthwise.setter
    def centerslengthwise(self, centerslengthwise):
        """Sets the centerslengthwise of this CasCompSlottedLnr.


        :param centerslengthwise: The centerslengthwise of this CasCompSlottedLnr.  # noqa: E501
        :type: OneOfCasCompSlottedLnrCenterslengthwise
        """

        self._centerslengthwise = centerslengthwise

    @property
    def idrec(self):
        """Gets the idrec of this CasCompSlottedLnr.  # noqa: E501


        :return: The idrec of this CasCompSlottedLnr.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this CasCompSlottedLnr.


        :param idrec: The idrec of this CasCompSlottedLnr.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecparent(self):
        """Gets the idrecparent of this CasCompSlottedLnr.  # noqa: E501


        :return: The idrecparent of this CasCompSlottedLnr.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this CasCompSlottedLnr.


        :param idrecparent: The idrecparent of this CasCompSlottedLnr.  # noqa: E501
        :type: str
        """

        self._idrecparent = idrecparent

    @property
    def idwell(self):
        """Gets the idwell of this CasCompSlottedLnr.  # noqa: E501


        :return: The idwell of this CasCompSlottedLnr.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this CasCompSlottedLnr.


        :param idwell: The idwell of this CasCompSlottedLnr.  # noqa: E501
        :type: str
        """

        self._idwell = idwell

    @property
    def openingmaxdimension(self):
        """Gets the openingmaxdimension of this CasCompSlottedLnr.  # noqa: E501


        :return: The openingmaxdimension of this CasCompSlottedLnr.  # noqa: E501
        :rtype: OneOfCasCompSlottedLnrOpeningmaxdimension
        """
        return self._openingmaxdimension

    @openingmaxdimension.setter
    def openingmaxdimension(self, openingmaxdimension):
        """Sets the openingmaxdimension of this CasCompSlottedLnr.


        :param openingmaxdimension: The openingmaxdimension of this CasCompSlottedLnr.  # noqa: E501
        :type: OneOfCasCompSlottedLnrOpeningmaxdimension
        """

        self._openingmaxdimension = openingmaxdimension

    @property
    def openingmindimension(self):
        """Gets the openingmindimension of this CasCompSlottedLnr.  # noqa: E501


        :return: The openingmindimension of this CasCompSlottedLnr.  # noqa: E501
        :rtype: OneOfCasCompSlottedLnrOpeningmindimension
        """
        return self._openingmindimension

    @openingmindimension.setter
    def openingmindimension(self, openingmindimension):
        """Sets the openingmindimension of this CasCompSlottedLnr.


        :param openingmindimension: The openingmindimension of this CasCompSlottedLnr.  # noqa: E501
        :type: OneOfCasCompSlottedLnrOpeningmindimension
        """

        self._openingmindimension = openingmindimension

    @property
    def percentopenarea(self):
        """Gets the percentopenarea of this CasCompSlottedLnr.  # noqa: E501


        :return: The percentopenarea of this CasCompSlottedLnr.  # noqa: E501
        :rtype: OneOfCasCompSlottedLnrPercentopenarea
        """
        return self._percentopenarea

    @percentopenarea.setter
    def percentopenarea(self, percentopenarea):
        """Sets the percentopenarea of this CasCompSlottedLnr.


        :param percentopenarea: The percentopenarea of this CasCompSlottedLnr.  # noqa: E501
        :type: OneOfCasCompSlottedLnrPercentopenarea
        """

        self._percentopenarea = percentopenarea

    @property
    def perfrows(self):
        """Gets the perfrows of this CasCompSlottedLnr.  # noqa: E501


        :return: The perfrows of this CasCompSlottedLnr.  # noqa: E501
        :rtype: int
        """
        return self._perfrows

    @perfrows.setter
    def perfrows(self, perfrows):
        """Sets the perfrows of this CasCompSlottedLnr.


        :param perfrows: The perfrows of this CasCompSlottedLnr.  # noqa: E501
        :type: int
        """

        self._perfrows = perfrows

    @property
    def screengauge(self):
        """Gets the screengauge of this CasCompSlottedLnr.  # noqa: E501


        :return: The screengauge of this CasCompSlottedLnr.  # noqa: E501
        :rtype: OneOfCasCompSlottedLnrScreengauge
        """
        return self._screengauge

    @screengauge.setter
    def screengauge(self, screengauge):
        """Sets the screengauge of this CasCompSlottedLnr.


        :param screengauge: The screengauge of this CasCompSlottedLnr.  # noqa: E501
        :type: OneOfCasCompSlottedLnrScreengauge
        """

        self._screengauge = screengauge

    @property
    def slotdes(self):
        """Gets the slotdes of this CasCompSlottedLnr.  # noqa: E501


        :return: The slotdes of this CasCompSlottedLnr.  # noqa: E501
        :rtype: str
        """
        return self._slotdes

    @slotdes.setter
    def slotdes(self, slotdes):
        """Sets the slotdes of this CasCompSlottedLnr.


        :param slotdes: The slotdes of this CasCompSlottedLnr.  # noqa: E501
        :type: str
        """

        self._slotdes = slotdes

    @property
    def slotfrequency(self):
        """Gets the slotfrequency of this CasCompSlottedLnr.  # noqa: E501


        :return: The slotfrequency of this CasCompSlottedLnr.  # noqa: E501
        :rtype: OneOfCasCompSlottedLnrSlotfrequency
        """
        return self._slotfrequency

    @slotfrequency.setter
    def slotfrequency(self, slotfrequency):
        """Sets the slotfrequency of this CasCompSlottedLnr.


        :param slotfrequency: The slotfrequency of this CasCompSlottedLnr.  # noqa: E501
        :type: OneOfCasCompSlottedLnrSlotfrequency
        """

        self._slotfrequency = slotfrequency

    @property
    def slotlength(self):
        """Gets the slotlength of this CasCompSlottedLnr.  # noqa: E501


        :return: The slotlength of this CasCompSlottedLnr.  # noqa: E501
        :rtype: OneOfCasCompSlottedLnrSlotlength
        """
        return self._slotlength

    @slotlength.setter
    def slotlength(self, slotlength):
        """Sets the slotlength of this CasCompSlottedLnr.


        :param slotlength: The slotlength of this CasCompSlottedLnr.  # noqa: E501
        :type: OneOfCasCompSlottedLnrSlotlength
        """

        self._slotlength = slotlength

    @property
    def slotpattern(self):
        """Gets the slotpattern of this CasCompSlottedLnr.  # noqa: E501


        :return: The slotpattern of this CasCompSlottedLnr.  # noqa: E501
        :rtype: str
        """
        return self._slotpattern

    @slotpattern.setter
    def slotpattern(self, slotpattern):
        """Sets the slotpattern of this CasCompSlottedLnr.


        :param slotpattern: The slotpattern of this CasCompSlottedLnr.  # noqa: E501
        :type: str
        """

        self._slotpattern = slotpattern

    @property
    def slotwidth(self):
        """Gets the slotwidth of this CasCompSlottedLnr.  # noqa: E501


        :return: The slotwidth of this CasCompSlottedLnr.  # noqa: E501
        :rtype: OneOfCasCompSlottedLnrSlotwidth
        """
        return self._slotwidth

    @slotwidth.setter
    def slotwidth(self, slotwidth):
        """Sets the slotwidth of this CasCompSlottedLnr.


        :param slotwidth: The slotwidth of this CasCompSlottedLnr.  # noqa: E501
        :type: OneOfCasCompSlottedLnrSlotwidth
        """

        self._slotwidth = slotwidth

    @property
    def syscreatedate(self):
        """Gets the syscreatedate of this CasCompSlottedLnr.  # noqa: E501


        :return: The syscreatedate of this CasCompSlottedLnr.  # noqa: E501
        :rtype: datetime
        """
        return self._syscreatedate

    @syscreatedate.setter
    def syscreatedate(self, syscreatedate):
        """Sets the syscreatedate of this CasCompSlottedLnr.


        :param syscreatedate: The syscreatedate of this CasCompSlottedLnr.  # noqa: E501
        :type: datetime
        """

        self._syscreatedate = syscreatedate

    @property
    def syscreateuser(self):
        """Gets the syscreateuser of this CasCompSlottedLnr.  # noqa: E501


        :return: The syscreateuser of this CasCompSlottedLnr.  # noqa: E501
        :rtype: str
        """
        return self._syscreateuser

    @syscreateuser.setter
    def syscreateuser(self, syscreateuser):
        """Sets the syscreateuser of this CasCompSlottedLnr.


        :param syscreateuser: The syscreateuser of this CasCompSlottedLnr.  # noqa: E501
        :type: str
        """

        self._syscreateuser = syscreateuser

    @property
    def syslockchildren(self):
        """Gets the syslockchildren of this CasCompSlottedLnr.  # noqa: E501


        :return: The syslockchildren of this CasCompSlottedLnr.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildren

    @syslockchildren.setter
    def syslockchildren(self, syslockchildren):
        """Sets the syslockchildren of this CasCompSlottedLnr.


        :param syslockchildren: The syslockchildren of this CasCompSlottedLnr.  # noqa: E501
        :type: int
        """

        self._syslockchildren = syslockchildren

    @property
    def syslockchildrenui(self):
        """Gets the syslockchildrenui of this CasCompSlottedLnr.  # noqa: E501


        :return: The syslockchildrenui of this CasCompSlottedLnr.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildrenui

    @syslockchildrenui.setter
    def syslockchildrenui(self, syslockchildrenui):
        """Sets the syslockchildrenui of this CasCompSlottedLnr.


        :param syslockchildrenui: The syslockchildrenui of this CasCompSlottedLnr.  # noqa: E501
        :type: int
        """

        self._syslockchildrenui = syslockchildrenui

    @property
    def syslockdate(self):
        """Gets the syslockdate of this CasCompSlottedLnr.  # noqa: E501


        :return: The syslockdate of this CasCompSlottedLnr.  # noqa: E501
        :rtype: datetime
        """
        return self._syslockdate

    @syslockdate.setter
    def syslockdate(self, syslockdate):
        """Sets the syslockdate of this CasCompSlottedLnr.


        :param syslockdate: The syslockdate of this CasCompSlottedLnr.  # noqa: E501
        :type: datetime
        """

        self._syslockdate = syslockdate

    @property
    def syslockme(self):
        """Gets the syslockme of this CasCompSlottedLnr.  # noqa: E501


        :return: The syslockme of this CasCompSlottedLnr.  # noqa: E501
        :rtype: int
        """
        return self._syslockme

    @syslockme.setter
    def syslockme(self, syslockme):
        """Sets the syslockme of this CasCompSlottedLnr.


        :param syslockme: The syslockme of this CasCompSlottedLnr.  # noqa: E501
        :type: int
        """

        self._syslockme = syslockme

    @property
    def syslockmeui(self):
        """Gets the syslockmeui of this CasCompSlottedLnr.  # noqa: E501


        :return: The syslockmeui of this CasCompSlottedLnr.  # noqa: E501
        :rtype: int
        """
        return self._syslockmeui

    @syslockmeui.setter
    def syslockmeui(self, syslockmeui):
        """Sets the syslockmeui of this CasCompSlottedLnr.


        :param syslockmeui: The syslockmeui of this CasCompSlottedLnr.  # noqa: E501
        :type: int
        """

        self._syslockmeui = syslockmeui

    @property
    def sysmoddate(self):
        """Gets the sysmoddate of this CasCompSlottedLnr.  # noqa: E501


        :return: The sysmoddate of this CasCompSlottedLnr.  # noqa: E501
        :rtype: datetime
        """
        return self._sysmoddate

    @sysmoddate.setter
    def sysmoddate(self, sysmoddate):
        """Sets the sysmoddate of this CasCompSlottedLnr.


        :param sysmoddate: The sysmoddate of this CasCompSlottedLnr.  # noqa: E501
        :type: datetime
        """

        self._sysmoddate = sysmoddate

    @property
    def sysmoduser(self):
        """Gets the sysmoduser of this CasCompSlottedLnr.  # noqa: E501


        :return: The sysmoduser of this CasCompSlottedLnr.  # noqa: E501
        :rtype: str
        """
        return self._sysmoduser

    @sysmoduser.setter
    def sysmoduser(self, sysmoduser):
        """Sets the sysmoduser of this CasCompSlottedLnr.


        :param sysmoduser: The sysmoduser of this CasCompSlottedLnr.  # noqa: E501
        :type: str
        """

        self._sysmoduser = sysmoduser

    @property
    def systag(self):
        """Gets the systag of this CasCompSlottedLnr.  # noqa: E501


        :return: The systag of this CasCompSlottedLnr.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this CasCompSlottedLnr.


        :param systag: The systag of this CasCompSlottedLnr.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CasCompSlottedLnr, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CasCompSlottedLnr):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
