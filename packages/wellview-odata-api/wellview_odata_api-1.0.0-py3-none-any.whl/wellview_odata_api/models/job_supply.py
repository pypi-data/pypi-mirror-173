# coding: utf-8

"""
    OData Service for namespace Default

    This OData service is located at http://localhost  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class JobSupply(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'code1': 'str',
        'code2': 'str',
        'code3': 'str',
        'code4': 'str',
        'code5': 'str',
        'code6': 'str',
        'codedes': 'str',
        'cost': 'OneOfJobSupplyCost',
        'des': 'str',
        'environmenttyp': 'str',
        'idrec': 'str',
        'idrecparent': 'str',
        'idwell': 'str',
        'job': 'AnyOfJobSupplyJob',
        'job_supply_amts': 'list[JobSupplyAmt]',
        'note': 'str',
        'syscreatedate': 'datetime',
        'syscreateuser': 'str',
        'syslockchildren': 'int',
        'syslockchildrenui': 'int',
        'syslockdate': 'datetime',
        'syslockme': 'int',
        'syslockmeui': 'int',
        'sysmoddate': 'datetime',
        'sysmoduser': 'str',
        'systag': 'str',
        'typ': 'str',
        'unitlabel': 'str',
        'unitsz': 'OneOfJobSupplyUnitsz',
        'vendor': 'str',
        'vendorcode': 'str',
        'vendorsubcode': 'str'
    }

    attribute_map = {
        'code1': 'code1',
        'code2': 'code2',
        'code3': 'code3',
        'code4': 'code4',
        'code5': 'code5',
        'code6': 'code6',
        'codedes': 'codedes',
        'cost': 'cost',
        'des': 'des',
        'environmenttyp': 'environmenttyp',
        'idrec': 'idrec',
        'idrecparent': 'idrecparent',
        'idwell': 'idwell',
        'job': 'job',
        'job_supply_amts': 'jobSupplyAmts',
        'note': 'note',
        'syscreatedate': 'syscreatedate',
        'syscreateuser': 'syscreateuser',
        'syslockchildren': 'syslockchildren',
        'syslockchildrenui': 'syslockchildrenui',
        'syslockdate': 'syslockdate',
        'syslockme': 'syslockme',
        'syslockmeui': 'syslockmeui',
        'sysmoddate': 'sysmoddate',
        'sysmoduser': 'sysmoduser',
        'systag': 'systag',
        'typ': 'typ',
        'unitlabel': 'unitlabel',
        'unitsz': 'unitsz',
        'vendor': 'vendor',
        'vendorcode': 'vendorcode',
        'vendorsubcode': 'vendorsubcode'
    }

    def __init__(self, code1=None, code2=None, code3=None, code4=None, code5=None, code6=None, codedes=None, cost=None, des=None, environmenttyp=None, idrec=None, idrecparent=None, idwell=None, job=None, job_supply_amts=None, note=None, syscreatedate=None, syscreateuser=None, syslockchildren=None, syslockchildrenui=None, syslockdate=None, syslockme=None, syslockmeui=None, sysmoddate=None, sysmoduser=None, systag=None, typ=None, unitlabel=None, unitsz=None, vendor=None, vendorcode=None, vendorsubcode=None):  # noqa: E501
        """JobSupply - a model defined in Swagger"""  # noqa: E501
        self._code1 = None
        self._code2 = None
        self._code3 = None
        self._code4 = None
        self._code5 = None
        self._code6 = None
        self._codedes = None
        self._cost = None
        self._des = None
        self._environmenttyp = None
        self._idrec = None
        self._idrecparent = None
        self._idwell = None
        self._job = None
        self._job_supply_amts = None
        self._note = None
        self._syscreatedate = None
        self._syscreateuser = None
        self._syslockchildren = None
        self._syslockchildrenui = None
        self._syslockdate = None
        self._syslockme = None
        self._syslockmeui = None
        self._sysmoddate = None
        self._sysmoduser = None
        self._systag = None
        self._typ = None
        self._unitlabel = None
        self._unitsz = None
        self._vendor = None
        self._vendorcode = None
        self._vendorsubcode = None
        self.discriminator = None
        if code1 is not None:
            self.code1 = code1
        if code2 is not None:
            self.code2 = code2
        if code3 is not None:
            self.code3 = code3
        if code4 is not None:
            self.code4 = code4
        if code5 is not None:
            self.code5 = code5
        if code6 is not None:
            self.code6 = code6
        if codedes is not None:
            self.codedes = codedes
        if cost is not None:
            self.cost = cost
        if des is not None:
            self.des = des
        if environmenttyp is not None:
            self.environmenttyp = environmenttyp
        if idrec is not None:
            self.idrec = idrec
        if idrecparent is not None:
            self.idrecparent = idrecparent
        if idwell is not None:
            self.idwell = idwell
        if job is not None:
            self.job = job
        if job_supply_amts is not None:
            self.job_supply_amts = job_supply_amts
        if note is not None:
            self.note = note
        if syscreatedate is not None:
            self.syscreatedate = syscreatedate
        if syscreateuser is not None:
            self.syscreateuser = syscreateuser
        if syslockchildren is not None:
            self.syslockchildren = syslockchildren
        if syslockchildrenui is not None:
            self.syslockchildrenui = syslockchildrenui
        if syslockdate is not None:
            self.syslockdate = syslockdate
        if syslockme is not None:
            self.syslockme = syslockme
        if syslockmeui is not None:
            self.syslockmeui = syslockmeui
        if sysmoddate is not None:
            self.sysmoddate = sysmoddate
        if sysmoduser is not None:
            self.sysmoduser = sysmoduser
        if systag is not None:
            self.systag = systag
        if typ is not None:
            self.typ = typ
        if unitlabel is not None:
            self.unitlabel = unitlabel
        if unitsz is not None:
            self.unitsz = unitsz
        if vendor is not None:
            self.vendor = vendor
        if vendorcode is not None:
            self.vendorcode = vendorcode
        if vendorsubcode is not None:
            self.vendorsubcode = vendorsubcode

    @property
    def code1(self):
        """Gets the code1 of this JobSupply.  # noqa: E501


        :return: The code1 of this JobSupply.  # noqa: E501
        :rtype: str
        """
        return self._code1

    @code1.setter
    def code1(self, code1):
        """Sets the code1 of this JobSupply.


        :param code1: The code1 of this JobSupply.  # noqa: E501
        :type: str
        """

        self._code1 = code1

    @property
    def code2(self):
        """Gets the code2 of this JobSupply.  # noqa: E501


        :return: The code2 of this JobSupply.  # noqa: E501
        :rtype: str
        """
        return self._code2

    @code2.setter
    def code2(self, code2):
        """Sets the code2 of this JobSupply.


        :param code2: The code2 of this JobSupply.  # noqa: E501
        :type: str
        """

        self._code2 = code2

    @property
    def code3(self):
        """Gets the code3 of this JobSupply.  # noqa: E501


        :return: The code3 of this JobSupply.  # noqa: E501
        :rtype: str
        """
        return self._code3

    @code3.setter
    def code3(self, code3):
        """Sets the code3 of this JobSupply.


        :param code3: The code3 of this JobSupply.  # noqa: E501
        :type: str
        """

        self._code3 = code3

    @property
    def code4(self):
        """Gets the code4 of this JobSupply.  # noqa: E501


        :return: The code4 of this JobSupply.  # noqa: E501
        :rtype: str
        """
        return self._code4

    @code4.setter
    def code4(self, code4):
        """Sets the code4 of this JobSupply.


        :param code4: The code4 of this JobSupply.  # noqa: E501
        :type: str
        """

        self._code4 = code4

    @property
    def code5(self):
        """Gets the code5 of this JobSupply.  # noqa: E501


        :return: The code5 of this JobSupply.  # noqa: E501
        :rtype: str
        """
        return self._code5

    @code5.setter
    def code5(self, code5):
        """Sets the code5 of this JobSupply.


        :param code5: The code5 of this JobSupply.  # noqa: E501
        :type: str
        """

        self._code5 = code5

    @property
    def code6(self):
        """Gets the code6 of this JobSupply.  # noqa: E501


        :return: The code6 of this JobSupply.  # noqa: E501
        :rtype: str
        """
        return self._code6

    @code6.setter
    def code6(self, code6):
        """Sets the code6 of this JobSupply.


        :param code6: The code6 of this JobSupply.  # noqa: E501
        :type: str
        """

        self._code6 = code6

    @property
    def codedes(self):
        """Gets the codedes of this JobSupply.  # noqa: E501


        :return: The codedes of this JobSupply.  # noqa: E501
        :rtype: str
        """
        return self._codedes

    @codedes.setter
    def codedes(self, codedes):
        """Sets the codedes of this JobSupply.


        :param codedes: The codedes of this JobSupply.  # noqa: E501
        :type: str
        """

        self._codedes = codedes

    @property
    def cost(self):
        """Gets the cost of this JobSupply.  # noqa: E501


        :return: The cost of this JobSupply.  # noqa: E501
        :rtype: OneOfJobSupplyCost
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this JobSupply.


        :param cost: The cost of this JobSupply.  # noqa: E501
        :type: OneOfJobSupplyCost
        """

        self._cost = cost

    @property
    def des(self):
        """Gets the des of this JobSupply.  # noqa: E501


        :return: The des of this JobSupply.  # noqa: E501
        :rtype: str
        """
        return self._des

    @des.setter
    def des(self, des):
        """Sets the des of this JobSupply.


        :param des: The des of this JobSupply.  # noqa: E501
        :type: str
        """

        self._des = des

    @property
    def environmenttyp(self):
        """Gets the environmenttyp of this JobSupply.  # noqa: E501


        :return: The environmenttyp of this JobSupply.  # noqa: E501
        :rtype: str
        """
        return self._environmenttyp

    @environmenttyp.setter
    def environmenttyp(self, environmenttyp):
        """Sets the environmenttyp of this JobSupply.


        :param environmenttyp: The environmenttyp of this JobSupply.  # noqa: E501
        :type: str
        """

        self._environmenttyp = environmenttyp

    @property
    def idrec(self):
        """Gets the idrec of this JobSupply.  # noqa: E501


        :return: The idrec of this JobSupply.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this JobSupply.


        :param idrec: The idrec of this JobSupply.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecparent(self):
        """Gets the idrecparent of this JobSupply.  # noqa: E501


        :return: The idrecparent of this JobSupply.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this JobSupply.


        :param idrecparent: The idrecparent of this JobSupply.  # noqa: E501
        :type: str
        """

        self._idrecparent = idrecparent

    @property
    def idwell(self):
        """Gets the idwell of this JobSupply.  # noqa: E501


        :return: The idwell of this JobSupply.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this JobSupply.


        :param idwell: The idwell of this JobSupply.  # noqa: E501
        :type: str
        """

        self._idwell = idwell

    @property
    def job(self):
        """Gets the job of this JobSupply.  # noqa: E501


        :return: The job of this JobSupply.  # noqa: E501
        :rtype: AnyOfJobSupplyJob
        """
        return self._job

    @job.setter
    def job(self, job):
        """Sets the job of this JobSupply.


        :param job: The job of this JobSupply.  # noqa: E501
        :type: AnyOfJobSupplyJob
        """

        self._job = job

    @property
    def job_supply_amts(self):
        """Gets the job_supply_amts of this JobSupply.  # noqa: E501


        :return: The job_supply_amts of this JobSupply.  # noqa: E501
        :rtype: list[JobSupplyAmt]
        """
        return self._job_supply_amts

    @job_supply_amts.setter
    def job_supply_amts(self, job_supply_amts):
        """Sets the job_supply_amts of this JobSupply.


        :param job_supply_amts: The job_supply_amts of this JobSupply.  # noqa: E501
        :type: list[JobSupplyAmt]
        """

        self._job_supply_amts = job_supply_amts

    @property
    def note(self):
        """Gets the note of this JobSupply.  # noqa: E501


        :return: The note of this JobSupply.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this JobSupply.


        :param note: The note of this JobSupply.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def syscreatedate(self):
        """Gets the syscreatedate of this JobSupply.  # noqa: E501


        :return: The syscreatedate of this JobSupply.  # noqa: E501
        :rtype: datetime
        """
        return self._syscreatedate

    @syscreatedate.setter
    def syscreatedate(self, syscreatedate):
        """Sets the syscreatedate of this JobSupply.


        :param syscreatedate: The syscreatedate of this JobSupply.  # noqa: E501
        :type: datetime
        """

        self._syscreatedate = syscreatedate

    @property
    def syscreateuser(self):
        """Gets the syscreateuser of this JobSupply.  # noqa: E501


        :return: The syscreateuser of this JobSupply.  # noqa: E501
        :rtype: str
        """
        return self._syscreateuser

    @syscreateuser.setter
    def syscreateuser(self, syscreateuser):
        """Sets the syscreateuser of this JobSupply.


        :param syscreateuser: The syscreateuser of this JobSupply.  # noqa: E501
        :type: str
        """

        self._syscreateuser = syscreateuser

    @property
    def syslockchildren(self):
        """Gets the syslockchildren of this JobSupply.  # noqa: E501


        :return: The syslockchildren of this JobSupply.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildren

    @syslockchildren.setter
    def syslockchildren(self, syslockchildren):
        """Sets the syslockchildren of this JobSupply.


        :param syslockchildren: The syslockchildren of this JobSupply.  # noqa: E501
        :type: int
        """

        self._syslockchildren = syslockchildren

    @property
    def syslockchildrenui(self):
        """Gets the syslockchildrenui of this JobSupply.  # noqa: E501


        :return: The syslockchildrenui of this JobSupply.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildrenui

    @syslockchildrenui.setter
    def syslockchildrenui(self, syslockchildrenui):
        """Sets the syslockchildrenui of this JobSupply.


        :param syslockchildrenui: The syslockchildrenui of this JobSupply.  # noqa: E501
        :type: int
        """

        self._syslockchildrenui = syslockchildrenui

    @property
    def syslockdate(self):
        """Gets the syslockdate of this JobSupply.  # noqa: E501


        :return: The syslockdate of this JobSupply.  # noqa: E501
        :rtype: datetime
        """
        return self._syslockdate

    @syslockdate.setter
    def syslockdate(self, syslockdate):
        """Sets the syslockdate of this JobSupply.


        :param syslockdate: The syslockdate of this JobSupply.  # noqa: E501
        :type: datetime
        """

        self._syslockdate = syslockdate

    @property
    def syslockme(self):
        """Gets the syslockme of this JobSupply.  # noqa: E501


        :return: The syslockme of this JobSupply.  # noqa: E501
        :rtype: int
        """
        return self._syslockme

    @syslockme.setter
    def syslockme(self, syslockme):
        """Sets the syslockme of this JobSupply.


        :param syslockme: The syslockme of this JobSupply.  # noqa: E501
        :type: int
        """

        self._syslockme = syslockme

    @property
    def syslockmeui(self):
        """Gets the syslockmeui of this JobSupply.  # noqa: E501


        :return: The syslockmeui of this JobSupply.  # noqa: E501
        :rtype: int
        """
        return self._syslockmeui

    @syslockmeui.setter
    def syslockmeui(self, syslockmeui):
        """Sets the syslockmeui of this JobSupply.


        :param syslockmeui: The syslockmeui of this JobSupply.  # noqa: E501
        :type: int
        """

        self._syslockmeui = syslockmeui

    @property
    def sysmoddate(self):
        """Gets the sysmoddate of this JobSupply.  # noqa: E501


        :return: The sysmoddate of this JobSupply.  # noqa: E501
        :rtype: datetime
        """
        return self._sysmoddate

    @sysmoddate.setter
    def sysmoddate(self, sysmoddate):
        """Sets the sysmoddate of this JobSupply.


        :param sysmoddate: The sysmoddate of this JobSupply.  # noqa: E501
        :type: datetime
        """

        self._sysmoddate = sysmoddate

    @property
    def sysmoduser(self):
        """Gets the sysmoduser of this JobSupply.  # noqa: E501


        :return: The sysmoduser of this JobSupply.  # noqa: E501
        :rtype: str
        """
        return self._sysmoduser

    @sysmoduser.setter
    def sysmoduser(self, sysmoduser):
        """Sets the sysmoduser of this JobSupply.


        :param sysmoduser: The sysmoduser of this JobSupply.  # noqa: E501
        :type: str
        """

        self._sysmoduser = sysmoduser

    @property
    def systag(self):
        """Gets the systag of this JobSupply.  # noqa: E501


        :return: The systag of this JobSupply.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this JobSupply.


        :param systag: The systag of this JobSupply.  # noqa: E501
        :type: str
        """

        self._systag = systag

    @property
    def typ(self):
        """Gets the typ of this JobSupply.  # noqa: E501


        :return: The typ of this JobSupply.  # noqa: E501
        :rtype: str
        """
        return self._typ

    @typ.setter
    def typ(self, typ):
        """Sets the typ of this JobSupply.


        :param typ: The typ of this JobSupply.  # noqa: E501
        :type: str
        """

        self._typ = typ

    @property
    def unitlabel(self):
        """Gets the unitlabel of this JobSupply.  # noqa: E501


        :return: The unitlabel of this JobSupply.  # noqa: E501
        :rtype: str
        """
        return self._unitlabel

    @unitlabel.setter
    def unitlabel(self, unitlabel):
        """Sets the unitlabel of this JobSupply.


        :param unitlabel: The unitlabel of this JobSupply.  # noqa: E501
        :type: str
        """

        self._unitlabel = unitlabel

    @property
    def unitsz(self):
        """Gets the unitsz of this JobSupply.  # noqa: E501


        :return: The unitsz of this JobSupply.  # noqa: E501
        :rtype: OneOfJobSupplyUnitsz
        """
        return self._unitsz

    @unitsz.setter
    def unitsz(self, unitsz):
        """Sets the unitsz of this JobSupply.


        :param unitsz: The unitsz of this JobSupply.  # noqa: E501
        :type: OneOfJobSupplyUnitsz
        """

        self._unitsz = unitsz

    @property
    def vendor(self):
        """Gets the vendor of this JobSupply.  # noqa: E501


        :return: The vendor of this JobSupply.  # noqa: E501
        :rtype: str
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor):
        """Sets the vendor of this JobSupply.


        :param vendor: The vendor of this JobSupply.  # noqa: E501
        :type: str
        """

        self._vendor = vendor

    @property
    def vendorcode(self):
        """Gets the vendorcode of this JobSupply.  # noqa: E501


        :return: The vendorcode of this JobSupply.  # noqa: E501
        :rtype: str
        """
        return self._vendorcode

    @vendorcode.setter
    def vendorcode(self, vendorcode):
        """Sets the vendorcode of this JobSupply.


        :param vendorcode: The vendorcode of this JobSupply.  # noqa: E501
        :type: str
        """

        self._vendorcode = vendorcode

    @property
    def vendorsubcode(self):
        """Gets the vendorsubcode of this JobSupply.  # noqa: E501


        :return: The vendorsubcode of this JobSupply.  # noqa: E501
        :rtype: str
        """
        return self._vendorsubcode

    @vendorsubcode.setter
    def vendorsubcode(self, vendorsubcode):
        """Sets the vendorsubcode of this JobSupply.


        :param vendorsubcode: The vendorsubcode of this JobSupply.  # noqa: E501
        :type: str
        """

        self._vendorsubcode = vendorsubcode

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JobSupply, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobSupply):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
