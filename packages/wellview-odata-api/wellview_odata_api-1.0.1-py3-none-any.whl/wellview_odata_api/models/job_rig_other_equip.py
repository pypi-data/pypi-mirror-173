# coding: utf-8

"""
    OData Service for namespace Default

    This OData service is located at http://localhost  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class JobRigOtherEquip(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'com': 'str',
        'des': 'str',
        'dttmend': 'datetime',
        'dttmmanufacture': 'datetime',
        'dttmstart': 'datetime',
        'idrec': 'str',
        'idrecparent': 'str',
        'idwell': 'str',
        'job_rig': 'AnyOfJobRigOtherEquipJobRig',
        'job_rig_other_equip_chks': 'list[JobRigOtherEquipChk]',
        'job_rig_other_equip_settings': 'list[JobRigOtherEquipSetting]',
        'make': 'str',
        'model': 'str',
        'refid': 'str',
        'sn': 'str',
        'syscreatedate': 'datetime',
        'syscreateuser': 'str',
        'syslockchildren': 'int',
        'syslockchildrenui': 'int',
        'syslockdate': 'datetime',
        'syslockme': 'int',
        'syslockmeui': 'int',
        'sysmoddate': 'datetime',
        'sysmoduser': 'str',
        'systag': 'str',
        'typ1': 'str',
        'typ2': 'str'
    }

    attribute_map = {
        'com': 'com',
        'des': 'des',
        'dttmend': 'dttmend',
        'dttmmanufacture': 'dttmmanufacture',
        'dttmstart': 'dttmstart',
        'idrec': 'idrec',
        'idrecparent': 'idrecparent',
        'idwell': 'idwell',
        'job_rig': 'jobRig',
        'job_rig_other_equip_chks': 'jobRigOtherEquipChks',
        'job_rig_other_equip_settings': 'jobRigOtherEquipSettings',
        'make': 'make',
        'model': 'model',
        'refid': 'refid',
        'sn': 'sn',
        'syscreatedate': 'syscreatedate',
        'syscreateuser': 'syscreateuser',
        'syslockchildren': 'syslockchildren',
        'syslockchildrenui': 'syslockchildrenui',
        'syslockdate': 'syslockdate',
        'syslockme': 'syslockme',
        'syslockmeui': 'syslockmeui',
        'sysmoddate': 'sysmoddate',
        'sysmoduser': 'sysmoduser',
        'systag': 'systag',
        'typ1': 'typ1',
        'typ2': 'typ2'
    }

    def __init__(self, com=None, des=None, dttmend=None, dttmmanufacture=None, dttmstart=None, idrec=None, idrecparent=None, idwell=None, job_rig=None, job_rig_other_equip_chks=None, job_rig_other_equip_settings=None, make=None, model=None, refid=None, sn=None, syscreatedate=None, syscreateuser=None, syslockchildren=None, syslockchildrenui=None, syslockdate=None, syslockme=None, syslockmeui=None, sysmoddate=None, sysmoduser=None, systag=None, typ1=None, typ2=None):  # noqa: E501
        """JobRigOtherEquip - a model defined in Swagger"""  # noqa: E501
        self._com = None
        self._des = None
        self._dttmend = None
        self._dttmmanufacture = None
        self._dttmstart = None
        self._idrec = None
        self._idrecparent = None
        self._idwell = None
        self._job_rig = None
        self._job_rig_other_equip_chks = None
        self._job_rig_other_equip_settings = None
        self._make = None
        self._model = None
        self._refid = None
        self._sn = None
        self._syscreatedate = None
        self._syscreateuser = None
        self._syslockchildren = None
        self._syslockchildrenui = None
        self._syslockdate = None
        self._syslockme = None
        self._syslockmeui = None
        self._sysmoddate = None
        self._sysmoduser = None
        self._systag = None
        self._typ1 = None
        self._typ2 = None
        self.discriminator = None
        if com is not None:
            self.com = com
        if des is not None:
            self.des = des
        if dttmend is not None:
            self.dttmend = dttmend
        if dttmmanufacture is not None:
            self.dttmmanufacture = dttmmanufacture
        if dttmstart is not None:
            self.dttmstart = dttmstart
        if idrec is not None:
            self.idrec = idrec
        if idrecparent is not None:
            self.idrecparent = idrecparent
        if idwell is not None:
            self.idwell = idwell
        if job_rig is not None:
            self.job_rig = job_rig
        if job_rig_other_equip_chks is not None:
            self.job_rig_other_equip_chks = job_rig_other_equip_chks
        if job_rig_other_equip_settings is not None:
            self.job_rig_other_equip_settings = job_rig_other_equip_settings
        if make is not None:
            self.make = make
        if model is not None:
            self.model = model
        if refid is not None:
            self.refid = refid
        if sn is not None:
            self.sn = sn
        if syscreatedate is not None:
            self.syscreatedate = syscreatedate
        if syscreateuser is not None:
            self.syscreateuser = syscreateuser
        if syslockchildren is not None:
            self.syslockchildren = syslockchildren
        if syslockchildrenui is not None:
            self.syslockchildrenui = syslockchildrenui
        if syslockdate is not None:
            self.syslockdate = syslockdate
        if syslockme is not None:
            self.syslockme = syslockme
        if syslockmeui is not None:
            self.syslockmeui = syslockmeui
        if sysmoddate is not None:
            self.sysmoddate = sysmoddate
        if sysmoduser is not None:
            self.sysmoduser = sysmoduser
        if systag is not None:
            self.systag = systag
        if typ1 is not None:
            self.typ1 = typ1
        if typ2 is not None:
            self.typ2 = typ2

    @property
    def com(self):
        """Gets the com of this JobRigOtherEquip.  # noqa: E501


        :return: The com of this JobRigOtherEquip.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this JobRigOtherEquip.


        :param com: The com of this JobRigOtherEquip.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def des(self):
        """Gets the des of this JobRigOtherEquip.  # noqa: E501


        :return: The des of this JobRigOtherEquip.  # noqa: E501
        :rtype: str
        """
        return self._des

    @des.setter
    def des(self, des):
        """Sets the des of this JobRigOtherEquip.


        :param des: The des of this JobRigOtherEquip.  # noqa: E501
        :type: str
        """

        self._des = des

    @property
    def dttmend(self):
        """Gets the dttmend of this JobRigOtherEquip.  # noqa: E501


        :return: The dttmend of this JobRigOtherEquip.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmend

    @dttmend.setter
    def dttmend(self, dttmend):
        """Sets the dttmend of this JobRigOtherEquip.


        :param dttmend: The dttmend of this JobRigOtherEquip.  # noqa: E501
        :type: datetime
        """

        self._dttmend = dttmend

    @property
    def dttmmanufacture(self):
        """Gets the dttmmanufacture of this JobRigOtherEquip.  # noqa: E501


        :return: The dttmmanufacture of this JobRigOtherEquip.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmmanufacture

    @dttmmanufacture.setter
    def dttmmanufacture(self, dttmmanufacture):
        """Sets the dttmmanufacture of this JobRigOtherEquip.


        :param dttmmanufacture: The dttmmanufacture of this JobRigOtherEquip.  # noqa: E501
        :type: datetime
        """

        self._dttmmanufacture = dttmmanufacture

    @property
    def dttmstart(self):
        """Gets the dttmstart of this JobRigOtherEquip.  # noqa: E501


        :return: The dttmstart of this JobRigOtherEquip.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmstart

    @dttmstart.setter
    def dttmstart(self, dttmstart):
        """Sets the dttmstart of this JobRigOtherEquip.


        :param dttmstart: The dttmstart of this JobRigOtherEquip.  # noqa: E501
        :type: datetime
        """

        self._dttmstart = dttmstart

    @property
    def idrec(self):
        """Gets the idrec of this JobRigOtherEquip.  # noqa: E501


        :return: The idrec of this JobRigOtherEquip.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this JobRigOtherEquip.


        :param idrec: The idrec of this JobRigOtherEquip.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecparent(self):
        """Gets the idrecparent of this JobRigOtherEquip.  # noqa: E501


        :return: The idrecparent of this JobRigOtherEquip.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this JobRigOtherEquip.


        :param idrecparent: The idrecparent of this JobRigOtherEquip.  # noqa: E501
        :type: str
        """

        self._idrecparent = idrecparent

    @property
    def idwell(self):
        """Gets the idwell of this JobRigOtherEquip.  # noqa: E501


        :return: The idwell of this JobRigOtherEquip.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this JobRigOtherEquip.


        :param idwell: The idwell of this JobRigOtherEquip.  # noqa: E501
        :type: str
        """

        self._idwell = idwell

    @property
    def job_rig(self):
        """Gets the job_rig of this JobRigOtherEquip.  # noqa: E501


        :return: The job_rig of this JobRigOtherEquip.  # noqa: E501
        :rtype: AnyOfJobRigOtherEquipJobRig
        """
        return self._job_rig

    @job_rig.setter
    def job_rig(self, job_rig):
        """Sets the job_rig of this JobRigOtherEquip.


        :param job_rig: The job_rig of this JobRigOtherEquip.  # noqa: E501
        :type: AnyOfJobRigOtherEquipJobRig
        """

        self._job_rig = job_rig

    @property
    def job_rig_other_equip_chks(self):
        """Gets the job_rig_other_equip_chks of this JobRigOtherEquip.  # noqa: E501


        :return: The job_rig_other_equip_chks of this JobRigOtherEquip.  # noqa: E501
        :rtype: list[JobRigOtherEquipChk]
        """
        return self._job_rig_other_equip_chks

    @job_rig_other_equip_chks.setter
    def job_rig_other_equip_chks(self, job_rig_other_equip_chks):
        """Sets the job_rig_other_equip_chks of this JobRigOtherEquip.


        :param job_rig_other_equip_chks: The job_rig_other_equip_chks of this JobRigOtherEquip.  # noqa: E501
        :type: list[JobRigOtherEquipChk]
        """

        self._job_rig_other_equip_chks = job_rig_other_equip_chks

    @property
    def job_rig_other_equip_settings(self):
        """Gets the job_rig_other_equip_settings of this JobRigOtherEquip.  # noqa: E501


        :return: The job_rig_other_equip_settings of this JobRigOtherEquip.  # noqa: E501
        :rtype: list[JobRigOtherEquipSetting]
        """
        return self._job_rig_other_equip_settings

    @job_rig_other_equip_settings.setter
    def job_rig_other_equip_settings(self, job_rig_other_equip_settings):
        """Sets the job_rig_other_equip_settings of this JobRigOtherEquip.


        :param job_rig_other_equip_settings: The job_rig_other_equip_settings of this JobRigOtherEquip.  # noqa: E501
        :type: list[JobRigOtherEquipSetting]
        """

        self._job_rig_other_equip_settings = job_rig_other_equip_settings

    @property
    def make(self):
        """Gets the make of this JobRigOtherEquip.  # noqa: E501


        :return: The make of this JobRigOtherEquip.  # noqa: E501
        :rtype: str
        """
        return self._make

    @make.setter
    def make(self, make):
        """Sets the make of this JobRigOtherEquip.


        :param make: The make of this JobRigOtherEquip.  # noqa: E501
        :type: str
        """

        self._make = make

    @property
    def model(self):
        """Gets the model of this JobRigOtherEquip.  # noqa: E501


        :return: The model of this JobRigOtherEquip.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this JobRigOtherEquip.


        :param model: The model of this JobRigOtherEquip.  # noqa: E501
        :type: str
        """

        self._model = model

    @property
    def refid(self):
        """Gets the refid of this JobRigOtherEquip.  # noqa: E501


        :return: The refid of this JobRigOtherEquip.  # noqa: E501
        :rtype: str
        """
        return self._refid

    @refid.setter
    def refid(self, refid):
        """Sets the refid of this JobRigOtherEquip.


        :param refid: The refid of this JobRigOtherEquip.  # noqa: E501
        :type: str
        """

        self._refid = refid

    @property
    def sn(self):
        """Gets the sn of this JobRigOtherEquip.  # noqa: E501


        :return: The sn of this JobRigOtherEquip.  # noqa: E501
        :rtype: str
        """
        return self._sn

    @sn.setter
    def sn(self, sn):
        """Sets the sn of this JobRigOtherEquip.


        :param sn: The sn of this JobRigOtherEquip.  # noqa: E501
        :type: str
        """

        self._sn = sn

    @property
    def syscreatedate(self):
        """Gets the syscreatedate of this JobRigOtherEquip.  # noqa: E501


        :return: The syscreatedate of this JobRigOtherEquip.  # noqa: E501
        :rtype: datetime
        """
        return self._syscreatedate

    @syscreatedate.setter
    def syscreatedate(self, syscreatedate):
        """Sets the syscreatedate of this JobRigOtherEquip.


        :param syscreatedate: The syscreatedate of this JobRigOtherEquip.  # noqa: E501
        :type: datetime
        """

        self._syscreatedate = syscreatedate

    @property
    def syscreateuser(self):
        """Gets the syscreateuser of this JobRigOtherEquip.  # noqa: E501


        :return: The syscreateuser of this JobRigOtherEquip.  # noqa: E501
        :rtype: str
        """
        return self._syscreateuser

    @syscreateuser.setter
    def syscreateuser(self, syscreateuser):
        """Sets the syscreateuser of this JobRigOtherEquip.


        :param syscreateuser: The syscreateuser of this JobRigOtherEquip.  # noqa: E501
        :type: str
        """

        self._syscreateuser = syscreateuser

    @property
    def syslockchildren(self):
        """Gets the syslockchildren of this JobRigOtherEquip.  # noqa: E501


        :return: The syslockchildren of this JobRigOtherEquip.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildren

    @syslockchildren.setter
    def syslockchildren(self, syslockchildren):
        """Sets the syslockchildren of this JobRigOtherEquip.


        :param syslockchildren: The syslockchildren of this JobRigOtherEquip.  # noqa: E501
        :type: int
        """

        self._syslockchildren = syslockchildren

    @property
    def syslockchildrenui(self):
        """Gets the syslockchildrenui of this JobRigOtherEquip.  # noqa: E501


        :return: The syslockchildrenui of this JobRigOtherEquip.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildrenui

    @syslockchildrenui.setter
    def syslockchildrenui(self, syslockchildrenui):
        """Sets the syslockchildrenui of this JobRigOtherEquip.


        :param syslockchildrenui: The syslockchildrenui of this JobRigOtherEquip.  # noqa: E501
        :type: int
        """

        self._syslockchildrenui = syslockchildrenui

    @property
    def syslockdate(self):
        """Gets the syslockdate of this JobRigOtherEquip.  # noqa: E501


        :return: The syslockdate of this JobRigOtherEquip.  # noqa: E501
        :rtype: datetime
        """
        return self._syslockdate

    @syslockdate.setter
    def syslockdate(self, syslockdate):
        """Sets the syslockdate of this JobRigOtherEquip.


        :param syslockdate: The syslockdate of this JobRigOtherEquip.  # noqa: E501
        :type: datetime
        """

        self._syslockdate = syslockdate

    @property
    def syslockme(self):
        """Gets the syslockme of this JobRigOtherEquip.  # noqa: E501


        :return: The syslockme of this JobRigOtherEquip.  # noqa: E501
        :rtype: int
        """
        return self._syslockme

    @syslockme.setter
    def syslockme(self, syslockme):
        """Sets the syslockme of this JobRigOtherEquip.


        :param syslockme: The syslockme of this JobRigOtherEquip.  # noqa: E501
        :type: int
        """

        self._syslockme = syslockme

    @property
    def syslockmeui(self):
        """Gets the syslockmeui of this JobRigOtherEquip.  # noqa: E501


        :return: The syslockmeui of this JobRigOtherEquip.  # noqa: E501
        :rtype: int
        """
        return self._syslockmeui

    @syslockmeui.setter
    def syslockmeui(self, syslockmeui):
        """Sets the syslockmeui of this JobRigOtherEquip.


        :param syslockmeui: The syslockmeui of this JobRigOtherEquip.  # noqa: E501
        :type: int
        """

        self._syslockmeui = syslockmeui

    @property
    def sysmoddate(self):
        """Gets the sysmoddate of this JobRigOtherEquip.  # noqa: E501


        :return: The sysmoddate of this JobRigOtherEquip.  # noqa: E501
        :rtype: datetime
        """
        return self._sysmoddate

    @sysmoddate.setter
    def sysmoddate(self, sysmoddate):
        """Sets the sysmoddate of this JobRigOtherEquip.


        :param sysmoddate: The sysmoddate of this JobRigOtherEquip.  # noqa: E501
        :type: datetime
        """

        self._sysmoddate = sysmoddate

    @property
    def sysmoduser(self):
        """Gets the sysmoduser of this JobRigOtherEquip.  # noqa: E501


        :return: The sysmoduser of this JobRigOtherEquip.  # noqa: E501
        :rtype: str
        """
        return self._sysmoduser

    @sysmoduser.setter
    def sysmoduser(self, sysmoduser):
        """Sets the sysmoduser of this JobRigOtherEquip.


        :param sysmoduser: The sysmoduser of this JobRigOtherEquip.  # noqa: E501
        :type: str
        """

        self._sysmoduser = sysmoduser

    @property
    def systag(self):
        """Gets the systag of this JobRigOtherEquip.  # noqa: E501


        :return: The systag of this JobRigOtherEquip.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this JobRigOtherEquip.


        :param systag: The systag of this JobRigOtherEquip.  # noqa: E501
        :type: str
        """

        self._systag = systag

    @property
    def typ1(self):
        """Gets the typ1 of this JobRigOtherEquip.  # noqa: E501


        :return: The typ1 of this JobRigOtherEquip.  # noqa: E501
        :rtype: str
        """
        return self._typ1

    @typ1.setter
    def typ1(self, typ1):
        """Sets the typ1 of this JobRigOtherEquip.


        :param typ1: The typ1 of this JobRigOtherEquip.  # noqa: E501
        :type: str
        """

        self._typ1 = typ1

    @property
    def typ2(self):
        """Gets the typ2 of this JobRigOtherEquip.  # noqa: E501


        :return: The typ2 of this JobRigOtherEquip.  # noqa: E501
        :rtype: str
        """
        return self._typ2

    @typ2.setter
    def typ2(self, typ2):
        """Sets the typ2 of this JobRigOtherEquip.


        :param typ2: The typ2 of this JobRigOtherEquip.  # noqa: E501
        :type: str
        """

        self._typ2 = typ2

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JobRigOtherEquip, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobRigOtherEquip):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
