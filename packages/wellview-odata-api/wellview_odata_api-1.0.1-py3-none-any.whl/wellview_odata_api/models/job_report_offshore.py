# coding: utf-8

"""
    OData Service for namespace Default

    This OData service is located at http://localhost  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class JobReportOffshore(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'airgap': 'OneOfJobReportOffshoreAirgap',
        'cloudcover': 'str',
        'com': 'str',
        'currentsubsurfdepth': 'OneOfJobReportOffshoreCurrentsubsurfdepth',
        'currentsubsurfdir': 'OneOfJobReportOffshoreCurrentsubsurfdir',
        'currentsubsurfspd': 'OneOfJobReportOffshoreCurrentsubsurfspd',
        'currentsurfdir': 'OneOfJobReportOffshoreCurrentsurfdir',
        'currentsurfspd': 'OneOfJobReportOffshoreCurrentsurfspd',
        'dttm': 'datetime',
        'durevacuate': 'OneOfJobReportOffshoreDurevacuate',
        'heave': 'OneOfJobReportOffshoreHeave',
        'heavemax': 'OneOfJobReportOffshoreHeavemax',
        'idrec': 'str',
        'idrecparent': 'str',
        'idwell': 'str',
        'job_report': 'AnyOfJobReportOffshoreJobReport',
        'job_report_offshore_anchors': 'list[JobReportOffshoreAnchor]',
        'job_report_offshore_legs': 'list[JobReportOffshoreLeg]',
        'job_report_offshore_thrusts': 'list[JobReportOffshoreThrust]',
        'margincentergravity': 'OneOfJobReportOffshoreMargincentergravity',
        'maxdeckarea': 'OneOfJobReportOffshoreMaxdeckarea',
        'maxvariableload': 'OneOfJobReportOffshoreMaxvariableload',
        'pitch': 'OneOfJobReportOffshorePitch',
        'pitchmax': 'OneOfJobReportOffshorePitchmax',
        'positiontyp': 'str',
        'precipamt': 'OneOfJobReportOffshorePrecipamt',
        'preciptyp': 'str',
        'presbar': 'OneOfJobReportOffshorePresbar',
        'riseranglebtm': 'OneOfJobReportOffshoreRiseranglebtm',
        'riserangledirbtm': 'OneOfJobReportOffshoreRiserangledirbtm',
        'riserangledirmid': 'OneOfJobReportOffshoreRiserangledirmid',
        'riserangledirtop': 'OneOfJobReportOffshoreRiserangledirtop',
        'riseranglemid': 'OneOfJobReportOffshoreRiseranglemid',
        'riserangletop': 'OneOfJobReportOffshoreRiserangletop',
        'risermiddepth': 'OneOfJobReportOffshoreRisermiddepth',
        'risertension': 'OneOfJobReportOffshoreRisertension',
        'roll': 'OneOfJobReportOffshoreRoll',
        'rollmax': 'OneOfJobReportOffshoreRollmax',
        'slipjtextavg': 'OneOfJobReportOffshoreSlipjtextavg',
        'slipjtextmax': 'OneOfJobReportOffshoreSlipjtextmax',
        'swelldir': 'OneOfJobReportOffshoreSwelldir',
        'swellheight': 'OneOfJobReportOffshoreSwellheight',
        'swellperiod': 'OneOfJobReportOffshoreSwellperiod',
        'syscreatedate': 'datetime',
        'syscreateuser': 'str',
        'syslockchildren': 'int',
        'syslockchildrenui': 'int',
        'syslockdate': 'datetime',
        'syslockme': 'int',
        'syslockmeui': 'int',
        'sysmoddate': 'datetime',
        'sysmoduser': 'str',
        'systag': 'str',
        'temphigh': 'OneOfJobReportOffshoreTemphigh',
        'templow': 'OneOfJobReportOffshoreTemplow',
        'thrusterbias': 'int',
        'thrusterpower': 'OneOfJobReportOffshoreThrusterpower',
        'variableload': 'OneOfJobReportOffshoreVariableload',
        'vesseldraft': 'OneOfJobReportOffshoreVesseldraft',
        'vesselfreeboard': 'OneOfJobReportOffshoreVesselfreeboard',
        'vesselheading': 'OneOfJobReportOffshoreVesselheading',
        'vesseloffset': 'OneOfJobReportOffshoreVesseloffset',
        'vesseloffsetdir': 'OneOfJobReportOffshoreVesseloffsetdir',
        'visceiling': 'OneOfJobReportOffshoreVisceiling',
        'visibility': 'OneOfJobReportOffshoreVisibility',
        'watertemp': 'OneOfJobReportOffshoreWatertemp',
        'wavedir': 'OneOfJobReportOffshoreWavedir',
        'waveheight': 'OneOfJobReportOffshoreWaveheight',
        'waveperiod': 'OneOfJobReportOffshoreWaveperiod',
        'winddir': 'str',
        'windspd': 'OneOfJobReportOffshoreWindspd'
    }

    attribute_map = {
        'airgap': 'airgap',
        'cloudcover': 'cloudcover',
        'com': 'com',
        'currentsubsurfdepth': 'currentsubsurfdepth',
        'currentsubsurfdir': 'currentsubsurfdir',
        'currentsubsurfspd': 'currentsubsurfspd',
        'currentsurfdir': 'currentsurfdir',
        'currentsurfspd': 'currentsurfspd',
        'dttm': 'dttm',
        'durevacuate': 'durevacuate',
        'heave': 'heave',
        'heavemax': 'heavemax',
        'idrec': 'idrec',
        'idrecparent': 'idrecparent',
        'idwell': 'idwell',
        'job_report': 'jobReport',
        'job_report_offshore_anchors': 'jobReportOffshoreAnchors',
        'job_report_offshore_legs': 'jobReportOffshoreLegs',
        'job_report_offshore_thrusts': 'jobReportOffshoreThrusts',
        'margincentergravity': 'margincentergravity',
        'maxdeckarea': 'maxdeckarea',
        'maxvariableload': 'maxvariableload',
        'pitch': 'pitch',
        'pitchmax': 'pitchmax',
        'positiontyp': 'positiontyp',
        'precipamt': 'precipamt',
        'preciptyp': 'preciptyp',
        'presbar': 'presbar',
        'riseranglebtm': 'riseranglebtm',
        'riserangledirbtm': 'riserangledirbtm',
        'riserangledirmid': 'riserangledirmid',
        'riserangledirtop': 'riserangledirtop',
        'riseranglemid': 'riseranglemid',
        'riserangletop': 'riserangletop',
        'risermiddepth': 'risermiddepth',
        'risertension': 'risertension',
        'roll': 'roll',
        'rollmax': 'rollmax',
        'slipjtextavg': 'slipjtextavg',
        'slipjtextmax': 'slipjtextmax',
        'swelldir': 'swelldir',
        'swellheight': 'swellheight',
        'swellperiod': 'swellperiod',
        'syscreatedate': 'syscreatedate',
        'syscreateuser': 'syscreateuser',
        'syslockchildren': 'syslockchildren',
        'syslockchildrenui': 'syslockchildrenui',
        'syslockdate': 'syslockdate',
        'syslockme': 'syslockme',
        'syslockmeui': 'syslockmeui',
        'sysmoddate': 'sysmoddate',
        'sysmoduser': 'sysmoduser',
        'systag': 'systag',
        'temphigh': 'temphigh',
        'templow': 'templow',
        'thrusterbias': 'thrusterbias',
        'thrusterpower': 'thrusterpower',
        'variableload': 'variableload',
        'vesseldraft': 'vesseldraft',
        'vesselfreeboard': 'vesselfreeboard',
        'vesselheading': 'vesselheading',
        'vesseloffset': 'vesseloffset',
        'vesseloffsetdir': 'vesseloffsetdir',
        'visceiling': 'visceiling',
        'visibility': 'visibility',
        'watertemp': 'watertemp',
        'wavedir': 'wavedir',
        'waveheight': 'waveheight',
        'waveperiod': 'waveperiod',
        'winddir': 'winddir',
        'windspd': 'windspd'
    }

    def __init__(self, airgap=None, cloudcover=None, com=None, currentsubsurfdepth=None, currentsubsurfdir=None, currentsubsurfspd=None, currentsurfdir=None, currentsurfspd=None, dttm=None, durevacuate=None, heave=None, heavemax=None, idrec=None, idrecparent=None, idwell=None, job_report=None, job_report_offshore_anchors=None, job_report_offshore_legs=None, job_report_offshore_thrusts=None, margincentergravity=None, maxdeckarea=None, maxvariableload=None, pitch=None, pitchmax=None, positiontyp=None, precipamt=None, preciptyp=None, presbar=None, riseranglebtm=None, riserangledirbtm=None, riserangledirmid=None, riserangledirtop=None, riseranglemid=None, riserangletop=None, risermiddepth=None, risertension=None, roll=None, rollmax=None, slipjtextavg=None, slipjtextmax=None, swelldir=None, swellheight=None, swellperiod=None, syscreatedate=None, syscreateuser=None, syslockchildren=None, syslockchildrenui=None, syslockdate=None, syslockme=None, syslockmeui=None, sysmoddate=None, sysmoduser=None, systag=None, temphigh=None, templow=None, thrusterbias=None, thrusterpower=None, variableload=None, vesseldraft=None, vesselfreeboard=None, vesselheading=None, vesseloffset=None, vesseloffsetdir=None, visceiling=None, visibility=None, watertemp=None, wavedir=None, waveheight=None, waveperiod=None, winddir=None, windspd=None):  # noqa: E501
        """JobReportOffshore - a model defined in Swagger"""  # noqa: E501
        self._airgap = None
        self._cloudcover = None
        self._com = None
        self._currentsubsurfdepth = None
        self._currentsubsurfdir = None
        self._currentsubsurfspd = None
        self._currentsurfdir = None
        self._currentsurfspd = None
        self._dttm = None
        self._durevacuate = None
        self._heave = None
        self._heavemax = None
        self._idrec = None
        self._idrecparent = None
        self._idwell = None
        self._job_report = None
        self._job_report_offshore_anchors = None
        self._job_report_offshore_legs = None
        self._job_report_offshore_thrusts = None
        self._margincentergravity = None
        self._maxdeckarea = None
        self._maxvariableload = None
        self._pitch = None
        self._pitchmax = None
        self._positiontyp = None
        self._precipamt = None
        self._preciptyp = None
        self._presbar = None
        self._riseranglebtm = None
        self._riserangledirbtm = None
        self._riserangledirmid = None
        self._riserangledirtop = None
        self._riseranglemid = None
        self._riserangletop = None
        self._risermiddepth = None
        self._risertension = None
        self._roll = None
        self._rollmax = None
        self._slipjtextavg = None
        self._slipjtextmax = None
        self._swelldir = None
        self._swellheight = None
        self._swellperiod = None
        self._syscreatedate = None
        self._syscreateuser = None
        self._syslockchildren = None
        self._syslockchildrenui = None
        self._syslockdate = None
        self._syslockme = None
        self._syslockmeui = None
        self._sysmoddate = None
        self._sysmoduser = None
        self._systag = None
        self._temphigh = None
        self._templow = None
        self._thrusterbias = None
        self._thrusterpower = None
        self._variableload = None
        self._vesseldraft = None
        self._vesselfreeboard = None
        self._vesselheading = None
        self._vesseloffset = None
        self._vesseloffsetdir = None
        self._visceiling = None
        self._visibility = None
        self._watertemp = None
        self._wavedir = None
        self._waveheight = None
        self._waveperiod = None
        self._winddir = None
        self._windspd = None
        self.discriminator = None
        if airgap is not None:
            self.airgap = airgap
        if cloudcover is not None:
            self.cloudcover = cloudcover
        if com is not None:
            self.com = com
        if currentsubsurfdepth is not None:
            self.currentsubsurfdepth = currentsubsurfdepth
        if currentsubsurfdir is not None:
            self.currentsubsurfdir = currentsubsurfdir
        if currentsubsurfspd is not None:
            self.currentsubsurfspd = currentsubsurfspd
        if currentsurfdir is not None:
            self.currentsurfdir = currentsurfdir
        if currentsurfspd is not None:
            self.currentsurfspd = currentsurfspd
        if dttm is not None:
            self.dttm = dttm
        if durevacuate is not None:
            self.durevacuate = durevacuate
        if heave is not None:
            self.heave = heave
        if heavemax is not None:
            self.heavemax = heavemax
        if idrec is not None:
            self.idrec = idrec
        if idrecparent is not None:
            self.idrecparent = idrecparent
        if idwell is not None:
            self.idwell = idwell
        if job_report is not None:
            self.job_report = job_report
        if job_report_offshore_anchors is not None:
            self.job_report_offshore_anchors = job_report_offshore_anchors
        if job_report_offshore_legs is not None:
            self.job_report_offshore_legs = job_report_offshore_legs
        if job_report_offshore_thrusts is not None:
            self.job_report_offshore_thrusts = job_report_offshore_thrusts
        if margincentergravity is not None:
            self.margincentergravity = margincentergravity
        if maxdeckarea is not None:
            self.maxdeckarea = maxdeckarea
        if maxvariableload is not None:
            self.maxvariableload = maxvariableload
        if pitch is not None:
            self.pitch = pitch
        if pitchmax is not None:
            self.pitchmax = pitchmax
        if positiontyp is not None:
            self.positiontyp = positiontyp
        if precipamt is not None:
            self.precipamt = precipamt
        if preciptyp is not None:
            self.preciptyp = preciptyp
        if presbar is not None:
            self.presbar = presbar
        if riseranglebtm is not None:
            self.riseranglebtm = riseranglebtm
        if riserangledirbtm is not None:
            self.riserangledirbtm = riserangledirbtm
        if riserangledirmid is not None:
            self.riserangledirmid = riserangledirmid
        if riserangledirtop is not None:
            self.riserangledirtop = riserangledirtop
        if riseranglemid is not None:
            self.riseranglemid = riseranglemid
        if riserangletop is not None:
            self.riserangletop = riserangletop
        if risermiddepth is not None:
            self.risermiddepth = risermiddepth
        if risertension is not None:
            self.risertension = risertension
        if roll is not None:
            self.roll = roll
        if rollmax is not None:
            self.rollmax = rollmax
        if slipjtextavg is not None:
            self.slipjtextavg = slipjtextavg
        if slipjtextmax is not None:
            self.slipjtextmax = slipjtextmax
        if swelldir is not None:
            self.swelldir = swelldir
        if swellheight is not None:
            self.swellheight = swellheight
        if swellperiod is not None:
            self.swellperiod = swellperiod
        if syscreatedate is not None:
            self.syscreatedate = syscreatedate
        if syscreateuser is not None:
            self.syscreateuser = syscreateuser
        if syslockchildren is not None:
            self.syslockchildren = syslockchildren
        if syslockchildrenui is not None:
            self.syslockchildrenui = syslockchildrenui
        if syslockdate is not None:
            self.syslockdate = syslockdate
        if syslockme is not None:
            self.syslockme = syslockme
        if syslockmeui is not None:
            self.syslockmeui = syslockmeui
        if sysmoddate is not None:
            self.sysmoddate = sysmoddate
        if sysmoduser is not None:
            self.sysmoduser = sysmoduser
        if systag is not None:
            self.systag = systag
        if temphigh is not None:
            self.temphigh = temphigh
        if templow is not None:
            self.templow = templow
        if thrusterbias is not None:
            self.thrusterbias = thrusterbias
        if thrusterpower is not None:
            self.thrusterpower = thrusterpower
        if variableload is not None:
            self.variableload = variableload
        if vesseldraft is not None:
            self.vesseldraft = vesseldraft
        if vesselfreeboard is not None:
            self.vesselfreeboard = vesselfreeboard
        if vesselheading is not None:
            self.vesselheading = vesselheading
        if vesseloffset is not None:
            self.vesseloffset = vesseloffset
        if vesseloffsetdir is not None:
            self.vesseloffsetdir = vesseloffsetdir
        if visceiling is not None:
            self.visceiling = visceiling
        if visibility is not None:
            self.visibility = visibility
        if watertemp is not None:
            self.watertemp = watertemp
        if wavedir is not None:
            self.wavedir = wavedir
        if waveheight is not None:
            self.waveheight = waveheight
        if waveperiod is not None:
            self.waveperiod = waveperiod
        if winddir is not None:
            self.winddir = winddir
        if windspd is not None:
            self.windspd = windspd

    @property
    def airgap(self):
        """Gets the airgap of this JobReportOffshore.  # noqa: E501


        :return: The airgap of this JobReportOffshore.  # noqa: E501
        :rtype: OneOfJobReportOffshoreAirgap
        """
        return self._airgap

    @airgap.setter
    def airgap(self, airgap):
        """Sets the airgap of this JobReportOffshore.


        :param airgap: The airgap of this JobReportOffshore.  # noqa: E501
        :type: OneOfJobReportOffshoreAirgap
        """

        self._airgap = airgap

    @property
    def cloudcover(self):
        """Gets the cloudcover of this JobReportOffshore.  # noqa: E501


        :return: The cloudcover of this JobReportOffshore.  # noqa: E501
        :rtype: str
        """
        return self._cloudcover

    @cloudcover.setter
    def cloudcover(self, cloudcover):
        """Sets the cloudcover of this JobReportOffshore.


        :param cloudcover: The cloudcover of this JobReportOffshore.  # noqa: E501
        :type: str
        """

        self._cloudcover = cloudcover

    @property
    def com(self):
        """Gets the com of this JobReportOffshore.  # noqa: E501


        :return: The com of this JobReportOffshore.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this JobReportOffshore.


        :param com: The com of this JobReportOffshore.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def currentsubsurfdepth(self):
        """Gets the currentsubsurfdepth of this JobReportOffshore.  # noqa: E501


        :return: The currentsubsurfdepth of this JobReportOffshore.  # noqa: E501
        :rtype: OneOfJobReportOffshoreCurrentsubsurfdepth
        """
        return self._currentsubsurfdepth

    @currentsubsurfdepth.setter
    def currentsubsurfdepth(self, currentsubsurfdepth):
        """Sets the currentsubsurfdepth of this JobReportOffshore.


        :param currentsubsurfdepth: The currentsubsurfdepth of this JobReportOffshore.  # noqa: E501
        :type: OneOfJobReportOffshoreCurrentsubsurfdepth
        """

        self._currentsubsurfdepth = currentsubsurfdepth

    @property
    def currentsubsurfdir(self):
        """Gets the currentsubsurfdir of this JobReportOffshore.  # noqa: E501


        :return: The currentsubsurfdir of this JobReportOffshore.  # noqa: E501
        :rtype: OneOfJobReportOffshoreCurrentsubsurfdir
        """
        return self._currentsubsurfdir

    @currentsubsurfdir.setter
    def currentsubsurfdir(self, currentsubsurfdir):
        """Sets the currentsubsurfdir of this JobReportOffshore.


        :param currentsubsurfdir: The currentsubsurfdir of this JobReportOffshore.  # noqa: E501
        :type: OneOfJobReportOffshoreCurrentsubsurfdir
        """

        self._currentsubsurfdir = currentsubsurfdir

    @property
    def currentsubsurfspd(self):
        """Gets the currentsubsurfspd of this JobReportOffshore.  # noqa: E501


        :return: The currentsubsurfspd of this JobReportOffshore.  # noqa: E501
        :rtype: OneOfJobReportOffshoreCurrentsubsurfspd
        """
        return self._currentsubsurfspd

    @currentsubsurfspd.setter
    def currentsubsurfspd(self, currentsubsurfspd):
        """Sets the currentsubsurfspd of this JobReportOffshore.


        :param currentsubsurfspd: The currentsubsurfspd of this JobReportOffshore.  # noqa: E501
        :type: OneOfJobReportOffshoreCurrentsubsurfspd
        """

        self._currentsubsurfspd = currentsubsurfspd

    @property
    def currentsurfdir(self):
        """Gets the currentsurfdir of this JobReportOffshore.  # noqa: E501


        :return: The currentsurfdir of this JobReportOffshore.  # noqa: E501
        :rtype: OneOfJobReportOffshoreCurrentsurfdir
        """
        return self._currentsurfdir

    @currentsurfdir.setter
    def currentsurfdir(self, currentsurfdir):
        """Sets the currentsurfdir of this JobReportOffshore.


        :param currentsurfdir: The currentsurfdir of this JobReportOffshore.  # noqa: E501
        :type: OneOfJobReportOffshoreCurrentsurfdir
        """

        self._currentsurfdir = currentsurfdir

    @property
    def currentsurfspd(self):
        """Gets the currentsurfspd of this JobReportOffshore.  # noqa: E501


        :return: The currentsurfspd of this JobReportOffshore.  # noqa: E501
        :rtype: OneOfJobReportOffshoreCurrentsurfspd
        """
        return self._currentsurfspd

    @currentsurfspd.setter
    def currentsurfspd(self, currentsurfspd):
        """Sets the currentsurfspd of this JobReportOffshore.


        :param currentsurfspd: The currentsurfspd of this JobReportOffshore.  # noqa: E501
        :type: OneOfJobReportOffshoreCurrentsurfspd
        """

        self._currentsurfspd = currentsurfspd

    @property
    def dttm(self):
        """Gets the dttm of this JobReportOffshore.  # noqa: E501


        :return: The dttm of this JobReportOffshore.  # noqa: E501
        :rtype: datetime
        """
        return self._dttm

    @dttm.setter
    def dttm(self, dttm):
        """Sets the dttm of this JobReportOffshore.


        :param dttm: The dttm of this JobReportOffshore.  # noqa: E501
        :type: datetime
        """

        self._dttm = dttm

    @property
    def durevacuate(self):
        """Gets the durevacuate of this JobReportOffshore.  # noqa: E501


        :return: The durevacuate of this JobReportOffshore.  # noqa: E501
        :rtype: OneOfJobReportOffshoreDurevacuate
        """
        return self._durevacuate

    @durevacuate.setter
    def durevacuate(self, durevacuate):
        """Sets the durevacuate of this JobReportOffshore.


        :param durevacuate: The durevacuate of this JobReportOffshore.  # noqa: E501
        :type: OneOfJobReportOffshoreDurevacuate
        """

        self._durevacuate = durevacuate

    @property
    def heave(self):
        """Gets the heave of this JobReportOffshore.  # noqa: E501


        :return: The heave of this JobReportOffshore.  # noqa: E501
        :rtype: OneOfJobReportOffshoreHeave
        """
        return self._heave

    @heave.setter
    def heave(self, heave):
        """Sets the heave of this JobReportOffshore.


        :param heave: The heave of this JobReportOffshore.  # noqa: E501
        :type: OneOfJobReportOffshoreHeave
        """

        self._heave = heave

    @property
    def heavemax(self):
        """Gets the heavemax of this JobReportOffshore.  # noqa: E501


        :return: The heavemax of this JobReportOffshore.  # noqa: E501
        :rtype: OneOfJobReportOffshoreHeavemax
        """
        return self._heavemax

    @heavemax.setter
    def heavemax(self, heavemax):
        """Sets the heavemax of this JobReportOffshore.


        :param heavemax: The heavemax of this JobReportOffshore.  # noqa: E501
        :type: OneOfJobReportOffshoreHeavemax
        """

        self._heavemax = heavemax

    @property
    def idrec(self):
        """Gets the idrec of this JobReportOffshore.  # noqa: E501


        :return: The idrec of this JobReportOffshore.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this JobReportOffshore.


        :param idrec: The idrec of this JobReportOffshore.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecparent(self):
        """Gets the idrecparent of this JobReportOffshore.  # noqa: E501


        :return: The idrecparent of this JobReportOffshore.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this JobReportOffshore.


        :param idrecparent: The idrecparent of this JobReportOffshore.  # noqa: E501
        :type: str
        """

        self._idrecparent = idrecparent

    @property
    def idwell(self):
        """Gets the idwell of this JobReportOffshore.  # noqa: E501


        :return: The idwell of this JobReportOffshore.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this JobReportOffshore.


        :param idwell: The idwell of this JobReportOffshore.  # noqa: E501
        :type: str
        """

        self._idwell = idwell

    @property
    def job_report(self):
        """Gets the job_report of this JobReportOffshore.  # noqa: E501


        :return: The job_report of this JobReportOffshore.  # noqa: E501
        :rtype: AnyOfJobReportOffshoreJobReport
        """
        return self._job_report

    @job_report.setter
    def job_report(self, job_report):
        """Sets the job_report of this JobReportOffshore.


        :param job_report: The job_report of this JobReportOffshore.  # noqa: E501
        :type: AnyOfJobReportOffshoreJobReport
        """

        self._job_report = job_report

    @property
    def job_report_offshore_anchors(self):
        """Gets the job_report_offshore_anchors of this JobReportOffshore.  # noqa: E501


        :return: The job_report_offshore_anchors of this JobReportOffshore.  # noqa: E501
        :rtype: list[JobReportOffshoreAnchor]
        """
        return self._job_report_offshore_anchors

    @job_report_offshore_anchors.setter
    def job_report_offshore_anchors(self, job_report_offshore_anchors):
        """Sets the job_report_offshore_anchors of this JobReportOffshore.


        :param job_report_offshore_anchors: The job_report_offshore_anchors of this JobReportOffshore.  # noqa: E501
        :type: list[JobReportOffshoreAnchor]
        """

        self._job_report_offshore_anchors = job_report_offshore_anchors

    @property
    def job_report_offshore_legs(self):
        """Gets the job_report_offshore_legs of this JobReportOffshore.  # noqa: E501


        :return: The job_report_offshore_legs of this JobReportOffshore.  # noqa: E501
        :rtype: list[JobReportOffshoreLeg]
        """
        return self._job_report_offshore_legs

    @job_report_offshore_legs.setter
    def job_report_offshore_legs(self, job_report_offshore_legs):
        """Sets the job_report_offshore_legs of this JobReportOffshore.


        :param job_report_offshore_legs: The job_report_offshore_legs of this JobReportOffshore.  # noqa: E501
        :type: list[JobReportOffshoreLeg]
        """

        self._job_report_offshore_legs = job_report_offshore_legs

    @property
    def job_report_offshore_thrusts(self):
        """Gets the job_report_offshore_thrusts of this JobReportOffshore.  # noqa: E501


        :return: The job_report_offshore_thrusts of this JobReportOffshore.  # noqa: E501
        :rtype: list[JobReportOffshoreThrust]
        """
        return self._job_report_offshore_thrusts

    @job_report_offshore_thrusts.setter
    def job_report_offshore_thrusts(self, job_report_offshore_thrusts):
        """Sets the job_report_offshore_thrusts of this JobReportOffshore.


        :param job_report_offshore_thrusts: The job_report_offshore_thrusts of this JobReportOffshore.  # noqa: E501
        :type: list[JobReportOffshoreThrust]
        """

        self._job_report_offshore_thrusts = job_report_offshore_thrusts

    @property
    def margincentergravity(self):
        """Gets the margincentergravity of this JobReportOffshore.  # noqa: E501


        :return: The margincentergravity of this JobReportOffshore.  # noqa: E501
        :rtype: OneOfJobReportOffshoreMargincentergravity
        """
        return self._margincentergravity

    @margincentergravity.setter
    def margincentergravity(self, margincentergravity):
        """Sets the margincentergravity of this JobReportOffshore.


        :param margincentergravity: The margincentergravity of this JobReportOffshore.  # noqa: E501
        :type: OneOfJobReportOffshoreMargincentergravity
        """

        self._margincentergravity = margincentergravity

    @property
    def maxdeckarea(self):
        """Gets the maxdeckarea of this JobReportOffshore.  # noqa: E501


        :return: The maxdeckarea of this JobReportOffshore.  # noqa: E501
        :rtype: OneOfJobReportOffshoreMaxdeckarea
        """
        return self._maxdeckarea

    @maxdeckarea.setter
    def maxdeckarea(self, maxdeckarea):
        """Sets the maxdeckarea of this JobReportOffshore.


        :param maxdeckarea: The maxdeckarea of this JobReportOffshore.  # noqa: E501
        :type: OneOfJobReportOffshoreMaxdeckarea
        """

        self._maxdeckarea = maxdeckarea

    @property
    def maxvariableload(self):
        """Gets the maxvariableload of this JobReportOffshore.  # noqa: E501


        :return: The maxvariableload of this JobReportOffshore.  # noqa: E501
        :rtype: OneOfJobReportOffshoreMaxvariableload
        """
        return self._maxvariableload

    @maxvariableload.setter
    def maxvariableload(self, maxvariableload):
        """Sets the maxvariableload of this JobReportOffshore.


        :param maxvariableload: The maxvariableload of this JobReportOffshore.  # noqa: E501
        :type: OneOfJobReportOffshoreMaxvariableload
        """

        self._maxvariableload = maxvariableload

    @property
    def pitch(self):
        """Gets the pitch of this JobReportOffshore.  # noqa: E501


        :return: The pitch of this JobReportOffshore.  # noqa: E501
        :rtype: OneOfJobReportOffshorePitch
        """
        return self._pitch

    @pitch.setter
    def pitch(self, pitch):
        """Sets the pitch of this JobReportOffshore.


        :param pitch: The pitch of this JobReportOffshore.  # noqa: E501
        :type: OneOfJobReportOffshorePitch
        """

        self._pitch = pitch

    @property
    def pitchmax(self):
        """Gets the pitchmax of this JobReportOffshore.  # noqa: E501


        :return: The pitchmax of this JobReportOffshore.  # noqa: E501
        :rtype: OneOfJobReportOffshorePitchmax
        """
        return self._pitchmax

    @pitchmax.setter
    def pitchmax(self, pitchmax):
        """Sets the pitchmax of this JobReportOffshore.


        :param pitchmax: The pitchmax of this JobReportOffshore.  # noqa: E501
        :type: OneOfJobReportOffshorePitchmax
        """

        self._pitchmax = pitchmax

    @property
    def positiontyp(self):
        """Gets the positiontyp of this JobReportOffshore.  # noqa: E501


        :return: The positiontyp of this JobReportOffshore.  # noqa: E501
        :rtype: str
        """
        return self._positiontyp

    @positiontyp.setter
    def positiontyp(self, positiontyp):
        """Sets the positiontyp of this JobReportOffshore.


        :param positiontyp: The positiontyp of this JobReportOffshore.  # noqa: E501
        :type: str
        """

        self._positiontyp = positiontyp

    @property
    def precipamt(self):
        """Gets the precipamt of this JobReportOffshore.  # noqa: E501


        :return: The precipamt of this JobReportOffshore.  # noqa: E501
        :rtype: OneOfJobReportOffshorePrecipamt
        """
        return self._precipamt

    @precipamt.setter
    def precipamt(self, precipamt):
        """Sets the precipamt of this JobReportOffshore.


        :param precipamt: The precipamt of this JobReportOffshore.  # noqa: E501
        :type: OneOfJobReportOffshorePrecipamt
        """

        self._precipamt = precipamt

    @property
    def preciptyp(self):
        """Gets the preciptyp of this JobReportOffshore.  # noqa: E501


        :return: The preciptyp of this JobReportOffshore.  # noqa: E501
        :rtype: str
        """
        return self._preciptyp

    @preciptyp.setter
    def preciptyp(self, preciptyp):
        """Sets the preciptyp of this JobReportOffshore.


        :param preciptyp: The preciptyp of this JobReportOffshore.  # noqa: E501
        :type: str
        """

        self._preciptyp = preciptyp

    @property
    def presbar(self):
        """Gets the presbar of this JobReportOffshore.  # noqa: E501


        :return: The presbar of this JobReportOffshore.  # noqa: E501
        :rtype: OneOfJobReportOffshorePresbar
        """
        return self._presbar

    @presbar.setter
    def presbar(self, presbar):
        """Sets the presbar of this JobReportOffshore.


        :param presbar: The presbar of this JobReportOffshore.  # noqa: E501
        :type: OneOfJobReportOffshorePresbar
        """

        self._presbar = presbar

    @property
    def riseranglebtm(self):
        """Gets the riseranglebtm of this JobReportOffshore.  # noqa: E501


        :return: The riseranglebtm of this JobReportOffshore.  # noqa: E501
        :rtype: OneOfJobReportOffshoreRiseranglebtm
        """
        return self._riseranglebtm

    @riseranglebtm.setter
    def riseranglebtm(self, riseranglebtm):
        """Sets the riseranglebtm of this JobReportOffshore.


        :param riseranglebtm: The riseranglebtm of this JobReportOffshore.  # noqa: E501
        :type: OneOfJobReportOffshoreRiseranglebtm
        """

        self._riseranglebtm = riseranglebtm

    @property
    def riserangledirbtm(self):
        """Gets the riserangledirbtm of this JobReportOffshore.  # noqa: E501


        :return: The riserangledirbtm of this JobReportOffshore.  # noqa: E501
        :rtype: OneOfJobReportOffshoreRiserangledirbtm
        """
        return self._riserangledirbtm

    @riserangledirbtm.setter
    def riserangledirbtm(self, riserangledirbtm):
        """Sets the riserangledirbtm of this JobReportOffshore.


        :param riserangledirbtm: The riserangledirbtm of this JobReportOffshore.  # noqa: E501
        :type: OneOfJobReportOffshoreRiserangledirbtm
        """

        self._riserangledirbtm = riserangledirbtm

    @property
    def riserangledirmid(self):
        """Gets the riserangledirmid of this JobReportOffshore.  # noqa: E501


        :return: The riserangledirmid of this JobReportOffshore.  # noqa: E501
        :rtype: OneOfJobReportOffshoreRiserangledirmid
        """
        return self._riserangledirmid

    @riserangledirmid.setter
    def riserangledirmid(self, riserangledirmid):
        """Sets the riserangledirmid of this JobReportOffshore.


        :param riserangledirmid: The riserangledirmid of this JobReportOffshore.  # noqa: E501
        :type: OneOfJobReportOffshoreRiserangledirmid
        """

        self._riserangledirmid = riserangledirmid

    @property
    def riserangledirtop(self):
        """Gets the riserangledirtop of this JobReportOffshore.  # noqa: E501


        :return: The riserangledirtop of this JobReportOffshore.  # noqa: E501
        :rtype: OneOfJobReportOffshoreRiserangledirtop
        """
        return self._riserangledirtop

    @riserangledirtop.setter
    def riserangledirtop(self, riserangledirtop):
        """Sets the riserangledirtop of this JobReportOffshore.


        :param riserangledirtop: The riserangledirtop of this JobReportOffshore.  # noqa: E501
        :type: OneOfJobReportOffshoreRiserangledirtop
        """

        self._riserangledirtop = riserangledirtop

    @property
    def riseranglemid(self):
        """Gets the riseranglemid of this JobReportOffshore.  # noqa: E501


        :return: The riseranglemid of this JobReportOffshore.  # noqa: E501
        :rtype: OneOfJobReportOffshoreRiseranglemid
        """
        return self._riseranglemid

    @riseranglemid.setter
    def riseranglemid(self, riseranglemid):
        """Sets the riseranglemid of this JobReportOffshore.


        :param riseranglemid: The riseranglemid of this JobReportOffshore.  # noqa: E501
        :type: OneOfJobReportOffshoreRiseranglemid
        """

        self._riseranglemid = riseranglemid

    @property
    def riserangletop(self):
        """Gets the riserangletop of this JobReportOffshore.  # noqa: E501


        :return: The riserangletop of this JobReportOffshore.  # noqa: E501
        :rtype: OneOfJobReportOffshoreRiserangletop
        """
        return self._riserangletop

    @riserangletop.setter
    def riserangletop(self, riserangletop):
        """Sets the riserangletop of this JobReportOffshore.


        :param riserangletop: The riserangletop of this JobReportOffshore.  # noqa: E501
        :type: OneOfJobReportOffshoreRiserangletop
        """

        self._riserangletop = riserangletop

    @property
    def risermiddepth(self):
        """Gets the risermiddepth of this JobReportOffshore.  # noqa: E501


        :return: The risermiddepth of this JobReportOffshore.  # noqa: E501
        :rtype: OneOfJobReportOffshoreRisermiddepth
        """
        return self._risermiddepth

    @risermiddepth.setter
    def risermiddepth(self, risermiddepth):
        """Sets the risermiddepth of this JobReportOffshore.


        :param risermiddepth: The risermiddepth of this JobReportOffshore.  # noqa: E501
        :type: OneOfJobReportOffshoreRisermiddepth
        """

        self._risermiddepth = risermiddepth

    @property
    def risertension(self):
        """Gets the risertension of this JobReportOffshore.  # noqa: E501


        :return: The risertension of this JobReportOffshore.  # noqa: E501
        :rtype: OneOfJobReportOffshoreRisertension
        """
        return self._risertension

    @risertension.setter
    def risertension(self, risertension):
        """Sets the risertension of this JobReportOffshore.


        :param risertension: The risertension of this JobReportOffshore.  # noqa: E501
        :type: OneOfJobReportOffshoreRisertension
        """

        self._risertension = risertension

    @property
    def roll(self):
        """Gets the roll of this JobReportOffshore.  # noqa: E501


        :return: The roll of this JobReportOffshore.  # noqa: E501
        :rtype: OneOfJobReportOffshoreRoll
        """
        return self._roll

    @roll.setter
    def roll(self, roll):
        """Sets the roll of this JobReportOffshore.


        :param roll: The roll of this JobReportOffshore.  # noqa: E501
        :type: OneOfJobReportOffshoreRoll
        """

        self._roll = roll

    @property
    def rollmax(self):
        """Gets the rollmax of this JobReportOffshore.  # noqa: E501


        :return: The rollmax of this JobReportOffshore.  # noqa: E501
        :rtype: OneOfJobReportOffshoreRollmax
        """
        return self._rollmax

    @rollmax.setter
    def rollmax(self, rollmax):
        """Sets the rollmax of this JobReportOffshore.


        :param rollmax: The rollmax of this JobReportOffshore.  # noqa: E501
        :type: OneOfJobReportOffshoreRollmax
        """

        self._rollmax = rollmax

    @property
    def slipjtextavg(self):
        """Gets the slipjtextavg of this JobReportOffshore.  # noqa: E501


        :return: The slipjtextavg of this JobReportOffshore.  # noqa: E501
        :rtype: OneOfJobReportOffshoreSlipjtextavg
        """
        return self._slipjtextavg

    @slipjtextavg.setter
    def slipjtextavg(self, slipjtextavg):
        """Sets the slipjtextavg of this JobReportOffshore.


        :param slipjtextavg: The slipjtextavg of this JobReportOffshore.  # noqa: E501
        :type: OneOfJobReportOffshoreSlipjtextavg
        """

        self._slipjtextavg = slipjtextavg

    @property
    def slipjtextmax(self):
        """Gets the slipjtextmax of this JobReportOffshore.  # noqa: E501


        :return: The slipjtextmax of this JobReportOffshore.  # noqa: E501
        :rtype: OneOfJobReportOffshoreSlipjtextmax
        """
        return self._slipjtextmax

    @slipjtextmax.setter
    def slipjtextmax(self, slipjtextmax):
        """Sets the slipjtextmax of this JobReportOffshore.


        :param slipjtextmax: The slipjtextmax of this JobReportOffshore.  # noqa: E501
        :type: OneOfJobReportOffshoreSlipjtextmax
        """

        self._slipjtextmax = slipjtextmax

    @property
    def swelldir(self):
        """Gets the swelldir of this JobReportOffshore.  # noqa: E501


        :return: The swelldir of this JobReportOffshore.  # noqa: E501
        :rtype: OneOfJobReportOffshoreSwelldir
        """
        return self._swelldir

    @swelldir.setter
    def swelldir(self, swelldir):
        """Sets the swelldir of this JobReportOffshore.


        :param swelldir: The swelldir of this JobReportOffshore.  # noqa: E501
        :type: OneOfJobReportOffshoreSwelldir
        """

        self._swelldir = swelldir

    @property
    def swellheight(self):
        """Gets the swellheight of this JobReportOffshore.  # noqa: E501


        :return: The swellheight of this JobReportOffshore.  # noqa: E501
        :rtype: OneOfJobReportOffshoreSwellheight
        """
        return self._swellheight

    @swellheight.setter
    def swellheight(self, swellheight):
        """Sets the swellheight of this JobReportOffshore.


        :param swellheight: The swellheight of this JobReportOffshore.  # noqa: E501
        :type: OneOfJobReportOffshoreSwellheight
        """

        self._swellheight = swellheight

    @property
    def swellperiod(self):
        """Gets the swellperiod of this JobReportOffshore.  # noqa: E501


        :return: The swellperiod of this JobReportOffshore.  # noqa: E501
        :rtype: OneOfJobReportOffshoreSwellperiod
        """
        return self._swellperiod

    @swellperiod.setter
    def swellperiod(self, swellperiod):
        """Sets the swellperiod of this JobReportOffshore.


        :param swellperiod: The swellperiod of this JobReportOffshore.  # noqa: E501
        :type: OneOfJobReportOffshoreSwellperiod
        """

        self._swellperiod = swellperiod

    @property
    def syscreatedate(self):
        """Gets the syscreatedate of this JobReportOffshore.  # noqa: E501


        :return: The syscreatedate of this JobReportOffshore.  # noqa: E501
        :rtype: datetime
        """
        return self._syscreatedate

    @syscreatedate.setter
    def syscreatedate(self, syscreatedate):
        """Sets the syscreatedate of this JobReportOffshore.


        :param syscreatedate: The syscreatedate of this JobReportOffshore.  # noqa: E501
        :type: datetime
        """

        self._syscreatedate = syscreatedate

    @property
    def syscreateuser(self):
        """Gets the syscreateuser of this JobReportOffshore.  # noqa: E501


        :return: The syscreateuser of this JobReportOffshore.  # noqa: E501
        :rtype: str
        """
        return self._syscreateuser

    @syscreateuser.setter
    def syscreateuser(self, syscreateuser):
        """Sets the syscreateuser of this JobReportOffshore.


        :param syscreateuser: The syscreateuser of this JobReportOffshore.  # noqa: E501
        :type: str
        """

        self._syscreateuser = syscreateuser

    @property
    def syslockchildren(self):
        """Gets the syslockchildren of this JobReportOffshore.  # noqa: E501


        :return: The syslockchildren of this JobReportOffshore.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildren

    @syslockchildren.setter
    def syslockchildren(self, syslockchildren):
        """Sets the syslockchildren of this JobReportOffshore.


        :param syslockchildren: The syslockchildren of this JobReportOffshore.  # noqa: E501
        :type: int
        """

        self._syslockchildren = syslockchildren

    @property
    def syslockchildrenui(self):
        """Gets the syslockchildrenui of this JobReportOffshore.  # noqa: E501


        :return: The syslockchildrenui of this JobReportOffshore.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildrenui

    @syslockchildrenui.setter
    def syslockchildrenui(self, syslockchildrenui):
        """Sets the syslockchildrenui of this JobReportOffshore.


        :param syslockchildrenui: The syslockchildrenui of this JobReportOffshore.  # noqa: E501
        :type: int
        """

        self._syslockchildrenui = syslockchildrenui

    @property
    def syslockdate(self):
        """Gets the syslockdate of this JobReportOffshore.  # noqa: E501


        :return: The syslockdate of this JobReportOffshore.  # noqa: E501
        :rtype: datetime
        """
        return self._syslockdate

    @syslockdate.setter
    def syslockdate(self, syslockdate):
        """Sets the syslockdate of this JobReportOffshore.


        :param syslockdate: The syslockdate of this JobReportOffshore.  # noqa: E501
        :type: datetime
        """

        self._syslockdate = syslockdate

    @property
    def syslockme(self):
        """Gets the syslockme of this JobReportOffshore.  # noqa: E501


        :return: The syslockme of this JobReportOffshore.  # noqa: E501
        :rtype: int
        """
        return self._syslockme

    @syslockme.setter
    def syslockme(self, syslockme):
        """Sets the syslockme of this JobReportOffshore.


        :param syslockme: The syslockme of this JobReportOffshore.  # noqa: E501
        :type: int
        """

        self._syslockme = syslockme

    @property
    def syslockmeui(self):
        """Gets the syslockmeui of this JobReportOffshore.  # noqa: E501


        :return: The syslockmeui of this JobReportOffshore.  # noqa: E501
        :rtype: int
        """
        return self._syslockmeui

    @syslockmeui.setter
    def syslockmeui(self, syslockmeui):
        """Sets the syslockmeui of this JobReportOffshore.


        :param syslockmeui: The syslockmeui of this JobReportOffshore.  # noqa: E501
        :type: int
        """

        self._syslockmeui = syslockmeui

    @property
    def sysmoddate(self):
        """Gets the sysmoddate of this JobReportOffshore.  # noqa: E501


        :return: The sysmoddate of this JobReportOffshore.  # noqa: E501
        :rtype: datetime
        """
        return self._sysmoddate

    @sysmoddate.setter
    def sysmoddate(self, sysmoddate):
        """Sets the sysmoddate of this JobReportOffshore.


        :param sysmoddate: The sysmoddate of this JobReportOffshore.  # noqa: E501
        :type: datetime
        """

        self._sysmoddate = sysmoddate

    @property
    def sysmoduser(self):
        """Gets the sysmoduser of this JobReportOffshore.  # noqa: E501


        :return: The sysmoduser of this JobReportOffshore.  # noqa: E501
        :rtype: str
        """
        return self._sysmoduser

    @sysmoduser.setter
    def sysmoduser(self, sysmoduser):
        """Sets the sysmoduser of this JobReportOffshore.


        :param sysmoduser: The sysmoduser of this JobReportOffshore.  # noqa: E501
        :type: str
        """

        self._sysmoduser = sysmoduser

    @property
    def systag(self):
        """Gets the systag of this JobReportOffshore.  # noqa: E501


        :return: The systag of this JobReportOffshore.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this JobReportOffshore.


        :param systag: The systag of this JobReportOffshore.  # noqa: E501
        :type: str
        """

        self._systag = systag

    @property
    def temphigh(self):
        """Gets the temphigh of this JobReportOffshore.  # noqa: E501


        :return: The temphigh of this JobReportOffshore.  # noqa: E501
        :rtype: OneOfJobReportOffshoreTemphigh
        """
        return self._temphigh

    @temphigh.setter
    def temphigh(self, temphigh):
        """Sets the temphigh of this JobReportOffshore.


        :param temphigh: The temphigh of this JobReportOffshore.  # noqa: E501
        :type: OneOfJobReportOffshoreTemphigh
        """

        self._temphigh = temphigh

    @property
    def templow(self):
        """Gets the templow of this JobReportOffshore.  # noqa: E501


        :return: The templow of this JobReportOffshore.  # noqa: E501
        :rtype: OneOfJobReportOffshoreTemplow
        """
        return self._templow

    @templow.setter
    def templow(self, templow):
        """Sets the templow of this JobReportOffshore.


        :param templow: The templow of this JobReportOffshore.  # noqa: E501
        :type: OneOfJobReportOffshoreTemplow
        """

        self._templow = templow

    @property
    def thrusterbias(self):
        """Gets the thrusterbias of this JobReportOffshore.  # noqa: E501


        :return: The thrusterbias of this JobReportOffshore.  # noqa: E501
        :rtype: int
        """
        return self._thrusterbias

    @thrusterbias.setter
    def thrusterbias(self, thrusterbias):
        """Sets the thrusterbias of this JobReportOffshore.


        :param thrusterbias: The thrusterbias of this JobReportOffshore.  # noqa: E501
        :type: int
        """

        self._thrusterbias = thrusterbias

    @property
    def thrusterpower(self):
        """Gets the thrusterpower of this JobReportOffshore.  # noqa: E501


        :return: The thrusterpower of this JobReportOffshore.  # noqa: E501
        :rtype: OneOfJobReportOffshoreThrusterpower
        """
        return self._thrusterpower

    @thrusterpower.setter
    def thrusterpower(self, thrusterpower):
        """Sets the thrusterpower of this JobReportOffshore.


        :param thrusterpower: The thrusterpower of this JobReportOffshore.  # noqa: E501
        :type: OneOfJobReportOffshoreThrusterpower
        """

        self._thrusterpower = thrusterpower

    @property
    def variableload(self):
        """Gets the variableload of this JobReportOffshore.  # noqa: E501


        :return: The variableload of this JobReportOffshore.  # noqa: E501
        :rtype: OneOfJobReportOffshoreVariableload
        """
        return self._variableload

    @variableload.setter
    def variableload(self, variableload):
        """Sets the variableload of this JobReportOffshore.


        :param variableload: The variableload of this JobReportOffshore.  # noqa: E501
        :type: OneOfJobReportOffshoreVariableload
        """

        self._variableload = variableload

    @property
    def vesseldraft(self):
        """Gets the vesseldraft of this JobReportOffshore.  # noqa: E501


        :return: The vesseldraft of this JobReportOffshore.  # noqa: E501
        :rtype: OneOfJobReportOffshoreVesseldraft
        """
        return self._vesseldraft

    @vesseldraft.setter
    def vesseldraft(self, vesseldraft):
        """Sets the vesseldraft of this JobReportOffshore.


        :param vesseldraft: The vesseldraft of this JobReportOffshore.  # noqa: E501
        :type: OneOfJobReportOffshoreVesseldraft
        """

        self._vesseldraft = vesseldraft

    @property
    def vesselfreeboard(self):
        """Gets the vesselfreeboard of this JobReportOffshore.  # noqa: E501


        :return: The vesselfreeboard of this JobReportOffshore.  # noqa: E501
        :rtype: OneOfJobReportOffshoreVesselfreeboard
        """
        return self._vesselfreeboard

    @vesselfreeboard.setter
    def vesselfreeboard(self, vesselfreeboard):
        """Sets the vesselfreeboard of this JobReportOffshore.


        :param vesselfreeboard: The vesselfreeboard of this JobReportOffshore.  # noqa: E501
        :type: OneOfJobReportOffshoreVesselfreeboard
        """

        self._vesselfreeboard = vesselfreeboard

    @property
    def vesselheading(self):
        """Gets the vesselheading of this JobReportOffshore.  # noqa: E501


        :return: The vesselheading of this JobReportOffshore.  # noqa: E501
        :rtype: OneOfJobReportOffshoreVesselheading
        """
        return self._vesselheading

    @vesselheading.setter
    def vesselheading(self, vesselheading):
        """Sets the vesselheading of this JobReportOffshore.


        :param vesselheading: The vesselheading of this JobReportOffshore.  # noqa: E501
        :type: OneOfJobReportOffshoreVesselheading
        """

        self._vesselheading = vesselheading

    @property
    def vesseloffset(self):
        """Gets the vesseloffset of this JobReportOffshore.  # noqa: E501


        :return: The vesseloffset of this JobReportOffshore.  # noqa: E501
        :rtype: OneOfJobReportOffshoreVesseloffset
        """
        return self._vesseloffset

    @vesseloffset.setter
    def vesseloffset(self, vesseloffset):
        """Sets the vesseloffset of this JobReportOffshore.


        :param vesseloffset: The vesseloffset of this JobReportOffshore.  # noqa: E501
        :type: OneOfJobReportOffshoreVesseloffset
        """

        self._vesseloffset = vesseloffset

    @property
    def vesseloffsetdir(self):
        """Gets the vesseloffsetdir of this JobReportOffshore.  # noqa: E501


        :return: The vesseloffsetdir of this JobReportOffshore.  # noqa: E501
        :rtype: OneOfJobReportOffshoreVesseloffsetdir
        """
        return self._vesseloffsetdir

    @vesseloffsetdir.setter
    def vesseloffsetdir(self, vesseloffsetdir):
        """Sets the vesseloffsetdir of this JobReportOffshore.


        :param vesseloffsetdir: The vesseloffsetdir of this JobReportOffshore.  # noqa: E501
        :type: OneOfJobReportOffshoreVesseloffsetdir
        """

        self._vesseloffsetdir = vesseloffsetdir

    @property
    def visceiling(self):
        """Gets the visceiling of this JobReportOffshore.  # noqa: E501


        :return: The visceiling of this JobReportOffshore.  # noqa: E501
        :rtype: OneOfJobReportOffshoreVisceiling
        """
        return self._visceiling

    @visceiling.setter
    def visceiling(self, visceiling):
        """Sets the visceiling of this JobReportOffshore.


        :param visceiling: The visceiling of this JobReportOffshore.  # noqa: E501
        :type: OneOfJobReportOffshoreVisceiling
        """

        self._visceiling = visceiling

    @property
    def visibility(self):
        """Gets the visibility of this JobReportOffshore.  # noqa: E501


        :return: The visibility of this JobReportOffshore.  # noqa: E501
        :rtype: OneOfJobReportOffshoreVisibility
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility):
        """Sets the visibility of this JobReportOffshore.


        :param visibility: The visibility of this JobReportOffshore.  # noqa: E501
        :type: OneOfJobReportOffshoreVisibility
        """

        self._visibility = visibility

    @property
    def watertemp(self):
        """Gets the watertemp of this JobReportOffshore.  # noqa: E501


        :return: The watertemp of this JobReportOffshore.  # noqa: E501
        :rtype: OneOfJobReportOffshoreWatertemp
        """
        return self._watertemp

    @watertemp.setter
    def watertemp(self, watertemp):
        """Sets the watertemp of this JobReportOffshore.


        :param watertemp: The watertemp of this JobReportOffshore.  # noqa: E501
        :type: OneOfJobReportOffshoreWatertemp
        """

        self._watertemp = watertemp

    @property
    def wavedir(self):
        """Gets the wavedir of this JobReportOffshore.  # noqa: E501


        :return: The wavedir of this JobReportOffshore.  # noqa: E501
        :rtype: OneOfJobReportOffshoreWavedir
        """
        return self._wavedir

    @wavedir.setter
    def wavedir(self, wavedir):
        """Sets the wavedir of this JobReportOffshore.


        :param wavedir: The wavedir of this JobReportOffshore.  # noqa: E501
        :type: OneOfJobReportOffshoreWavedir
        """

        self._wavedir = wavedir

    @property
    def waveheight(self):
        """Gets the waveheight of this JobReportOffshore.  # noqa: E501


        :return: The waveheight of this JobReportOffshore.  # noqa: E501
        :rtype: OneOfJobReportOffshoreWaveheight
        """
        return self._waveheight

    @waveheight.setter
    def waveheight(self, waveheight):
        """Sets the waveheight of this JobReportOffshore.


        :param waveheight: The waveheight of this JobReportOffshore.  # noqa: E501
        :type: OneOfJobReportOffshoreWaveheight
        """

        self._waveheight = waveheight

    @property
    def waveperiod(self):
        """Gets the waveperiod of this JobReportOffshore.  # noqa: E501


        :return: The waveperiod of this JobReportOffshore.  # noqa: E501
        :rtype: OneOfJobReportOffshoreWaveperiod
        """
        return self._waveperiod

    @waveperiod.setter
    def waveperiod(self, waveperiod):
        """Sets the waveperiod of this JobReportOffshore.


        :param waveperiod: The waveperiod of this JobReportOffshore.  # noqa: E501
        :type: OneOfJobReportOffshoreWaveperiod
        """

        self._waveperiod = waveperiod

    @property
    def winddir(self):
        """Gets the winddir of this JobReportOffshore.  # noqa: E501


        :return: The winddir of this JobReportOffshore.  # noqa: E501
        :rtype: str
        """
        return self._winddir

    @winddir.setter
    def winddir(self, winddir):
        """Sets the winddir of this JobReportOffshore.


        :param winddir: The winddir of this JobReportOffshore.  # noqa: E501
        :type: str
        """

        self._winddir = winddir

    @property
    def windspd(self):
        """Gets the windspd of this JobReportOffshore.  # noqa: E501


        :return: The windspd of this JobReportOffshore.  # noqa: E501
        :rtype: OneOfJobReportOffshoreWindspd
        """
        return self._windspd

    @windspd.setter
    def windspd(self, windspd):
        """Sets the windspd of this JobReportOffshore.


        :param windspd: The windspd of this JobReportOffshore.  # noqa: E501
        :type: OneOfJobReportOffshoreWindspd
        """

        self._windspd = windspd

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JobReportOffshore, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobReportOffshore):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
