# coding: utf-8

"""
    OData Service for namespace Default

    This OData service is located at http://localhost  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class JobReportEmission(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amount': 'OneOfJobReportEmissionAmount',
        'amountunitlabel': 'str',
        'com': 'str',
        'des': 'str',
        'dur': 'OneOfJobReportEmissionDur',
        'idrec': 'str',
        'idrecitem': 'str',
        'idrecitemtk': 'str',
        'idrecparent': 'str',
        'idreczonecompletion': 'str',
        'idreczonecompletiontk': 'str',
        'idwell': 'str',
        'job_report': 'AnyOfJobReportEmissionJobReport',
        'methodcalculated': 'str',
        'methodmeasured': 'str',
        'prescas': 'OneOfJobReportEmissionPrescas',
        'presdownstream': 'OneOfJobReportEmissionPresdownstream',
        'prestub': 'OneOfJobReportEmissionPrestub',
        'presupstream': 'OneOfJobReportEmissionPresupstream',
        'ratiodisposed': 'OneOfJobReportEmissionRatiodisposed',
        'reason': 'str',
        'syscreatedate': 'datetime',
        'syscreateuser': 'str',
        'syslockchildren': 'int',
        'syslockchildrenui': 'int',
        'syslockdate': 'datetime',
        'syslockme': 'int',
        'syslockmeui': 'int',
        'sysmoddate': 'datetime',
        'sysmoduser': 'str',
        'systag': 'str',
        'szdiachoke': 'OneOfJobReportEmissionSzdiachoke',
        'szdiaorifice': 'OneOfJobReportEmissionSzdiaorifice',
        'temp': 'OneOfJobReportEmissionTemp',
        'typ1': 'str',
        'typ2': 'str'
    }

    attribute_map = {
        'amount': 'amount',
        'amountunitlabel': 'amountunitlabel',
        'com': 'com',
        'des': 'des',
        'dur': 'dur',
        'idrec': 'idrec',
        'idrecitem': 'idrecitem',
        'idrecitemtk': 'idrecitemtk',
        'idrecparent': 'idrecparent',
        'idreczonecompletion': 'idreczonecompletion',
        'idreczonecompletiontk': 'idreczonecompletiontk',
        'idwell': 'idwell',
        'job_report': 'jobReport',
        'methodcalculated': 'methodcalculated',
        'methodmeasured': 'methodmeasured',
        'prescas': 'prescas',
        'presdownstream': 'presdownstream',
        'prestub': 'prestub',
        'presupstream': 'presupstream',
        'ratiodisposed': 'ratiodisposed',
        'reason': 'reason',
        'syscreatedate': 'syscreatedate',
        'syscreateuser': 'syscreateuser',
        'syslockchildren': 'syslockchildren',
        'syslockchildrenui': 'syslockchildrenui',
        'syslockdate': 'syslockdate',
        'syslockme': 'syslockme',
        'syslockmeui': 'syslockmeui',
        'sysmoddate': 'sysmoddate',
        'sysmoduser': 'sysmoduser',
        'systag': 'systag',
        'szdiachoke': 'szdiachoke',
        'szdiaorifice': 'szdiaorifice',
        'temp': 'temp',
        'typ1': 'typ1',
        'typ2': 'typ2'
    }

    def __init__(self, amount=None, amountunitlabel=None, com=None, des=None, dur=None, idrec=None, idrecitem=None, idrecitemtk=None, idrecparent=None, idreczonecompletion=None, idreczonecompletiontk=None, idwell=None, job_report=None, methodcalculated=None, methodmeasured=None, prescas=None, presdownstream=None, prestub=None, presupstream=None, ratiodisposed=None, reason=None, syscreatedate=None, syscreateuser=None, syslockchildren=None, syslockchildrenui=None, syslockdate=None, syslockme=None, syslockmeui=None, sysmoddate=None, sysmoduser=None, systag=None, szdiachoke=None, szdiaorifice=None, temp=None, typ1=None, typ2=None):  # noqa: E501
        """JobReportEmission - a model defined in Swagger"""  # noqa: E501
        self._amount = None
        self._amountunitlabel = None
        self._com = None
        self._des = None
        self._dur = None
        self._idrec = None
        self._idrecitem = None
        self._idrecitemtk = None
        self._idrecparent = None
        self._idreczonecompletion = None
        self._idreczonecompletiontk = None
        self._idwell = None
        self._job_report = None
        self._methodcalculated = None
        self._methodmeasured = None
        self._prescas = None
        self._presdownstream = None
        self._prestub = None
        self._presupstream = None
        self._ratiodisposed = None
        self._reason = None
        self._syscreatedate = None
        self._syscreateuser = None
        self._syslockchildren = None
        self._syslockchildrenui = None
        self._syslockdate = None
        self._syslockme = None
        self._syslockmeui = None
        self._sysmoddate = None
        self._sysmoduser = None
        self._systag = None
        self._szdiachoke = None
        self._szdiaorifice = None
        self._temp = None
        self._typ1 = None
        self._typ2 = None
        self.discriminator = None
        if amount is not None:
            self.amount = amount
        if amountunitlabel is not None:
            self.amountunitlabel = amountunitlabel
        if com is not None:
            self.com = com
        if des is not None:
            self.des = des
        if dur is not None:
            self.dur = dur
        if idrec is not None:
            self.idrec = idrec
        if idrecitem is not None:
            self.idrecitem = idrecitem
        if idrecitemtk is not None:
            self.idrecitemtk = idrecitemtk
        if idrecparent is not None:
            self.idrecparent = idrecparent
        if idreczonecompletion is not None:
            self.idreczonecompletion = idreczonecompletion
        if idreczonecompletiontk is not None:
            self.idreczonecompletiontk = idreczonecompletiontk
        if idwell is not None:
            self.idwell = idwell
        if job_report is not None:
            self.job_report = job_report
        if methodcalculated is not None:
            self.methodcalculated = methodcalculated
        if methodmeasured is not None:
            self.methodmeasured = methodmeasured
        if prescas is not None:
            self.prescas = prescas
        if presdownstream is not None:
            self.presdownstream = presdownstream
        if prestub is not None:
            self.prestub = prestub
        if presupstream is not None:
            self.presupstream = presupstream
        if ratiodisposed is not None:
            self.ratiodisposed = ratiodisposed
        if reason is not None:
            self.reason = reason
        if syscreatedate is not None:
            self.syscreatedate = syscreatedate
        if syscreateuser is not None:
            self.syscreateuser = syscreateuser
        if syslockchildren is not None:
            self.syslockchildren = syslockchildren
        if syslockchildrenui is not None:
            self.syslockchildrenui = syslockchildrenui
        if syslockdate is not None:
            self.syslockdate = syslockdate
        if syslockme is not None:
            self.syslockme = syslockme
        if syslockmeui is not None:
            self.syslockmeui = syslockmeui
        if sysmoddate is not None:
            self.sysmoddate = sysmoddate
        if sysmoduser is not None:
            self.sysmoduser = sysmoduser
        if systag is not None:
            self.systag = systag
        if szdiachoke is not None:
            self.szdiachoke = szdiachoke
        if szdiaorifice is not None:
            self.szdiaorifice = szdiaorifice
        if temp is not None:
            self.temp = temp
        if typ1 is not None:
            self.typ1 = typ1
        if typ2 is not None:
            self.typ2 = typ2

    @property
    def amount(self):
        """Gets the amount of this JobReportEmission.  # noqa: E501


        :return: The amount of this JobReportEmission.  # noqa: E501
        :rtype: OneOfJobReportEmissionAmount
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this JobReportEmission.


        :param amount: The amount of this JobReportEmission.  # noqa: E501
        :type: OneOfJobReportEmissionAmount
        """

        self._amount = amount

    @property
    def amountunitlabel(self):
        """Gets the amountunitlabel of this JobReportEmission.  # noqa: E501


        :return: The amountunitlabel of this JobReportEmission.  # noqa: E501
        :rtype: str
        """
        return self._amountunitlabel

    @amountunitlabel.setter
    def amountunitlabel(self, amountunitlabel):
        """Sets the amountunitlabel of this JobReportEmission.


        :param amountunitlabel: The amountunitlabel of this JobReportEmission.  # noqa: E501
        :type: str
        """

        self._amountunitlabel = amountunitlabel

    @property
    def com(self):
        """Gets the com of this JobReportEmission.  # noqa: E501


        :return: The com of this JobReportEmission.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this JobReportEmission.


        :param com: The com of this JobReportEmission.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def des(self):
        """Gets the des of this JobReportEmission.  # noqa: E501


        :return: The des of this JobReportEmission.  # noqa: E501
        :rtype: str
        """
        return self._des

    @des.setter
    def des(self, des):
        """Sets the des of this JobReportEmission.


        :param des: The des of this JobReportEmission.  # noqa: E501
        :type: str
        """

        self._des = des

    @property
    def dur(self):
        """Gets the dur of this JobReportEmission.  # noqa: E501


        :return: The dur of this JobReportEmission.  # noqa: E501
        :rtype: OneOfJobReportEmissionDur
        """
        return self._dur

    @dur.setter
    def dur(self, dur):
        """Sets the dur of this JobReportEmission.


        :param dur: The dur of this JobReportEmission.  # noqa: E501
        :type: OneOfJobReportEmissionDur
        """

        self._dur = dur

    @property
    def idrec(self):
        """Gets the idrec of this JobReportEmission.  # noqa: E501


        :return: The idrec of this JobReportEmission.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this JobReportEmission.


        :param idrec: The idrec of this JobReportEmission.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecitem(self):
        """Gets the idrecitem of this JobReportEmission.  # noqa: E501


        :return: The idrecitem of this JobReportEmission.  # noqa: E501
        :rtype: str
        """
        return self._idrecitem

    @idrecitem.setter
    def idrecitem(self, idrecitem):
        """Sets the idrecitem of this JobReportEmission.


        :param idrecitem: The idrecitem of this JobReportEmission.  # noqa: E501
        :type: str
        """

        self._idrecitem = idrecitem

    @property
    def idrecitemtk(self):
        """Gets the idrecitemtk of this JobReportEmission.  # noqa: E501


        :return: The idrecitemtk of this JobReportEmission.  # noqa: E501
        :rtype: str
        """
        return self._idrecitemtk

    @idrecitemtk.setter
    def idrecitemtk(self, idrecitemtk):
        """Sets the idrecitemtk of this JobReportEmission.


        :param idrecitemtk: The idrecitemtk of this JobReportEmission.  # noqa: E501
        :type: str
        """

        self._idrecitemtk = idrecitemtk

    @property
    def idrecparent(self):
        """Gets the idrecparent of this JobReportEmission.  # noqa: E501


        :return: The idrecparent of this JobReportEmission.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this JobReportEmission.


        :param idrecparent: The idrecparent of this JobReportEmission.  # noqa: E501
        :type: str
        """

        self._idrecparent = idrecparent

    @property
    def idreczonecompletion(self):
        """Gets the idreczonecompletion of this JobReportEmission.  # noqa: E501


        :return: The idreczonecompletion of this JobReportEmission.  # noqa: E501
        :rtype: str
        """
        return self._idreczonecompletion

    @idreczonecompletion.setter
    def idreczonecompletion(self, idreczonecompletion):
        """Sets the idreczonecompletion of this JobReportEmission.


        :param idreczonecompletion: The idreczonecompletion of this JobReportEmission.  # noqa: E501
        :type: str
        """

        self._idreczonecompletion = idreczonecompletion

    @property
    def idreczonecompletiontk(self):
        """Gets the idreczonecompletiontk of this JobReportEmission.  # noqa: E501


        :return: The idreczonecompletiontk of this JobReportEmission.  # noqa: E501
        :rtype: str
        """
        return self._idreczonecompletiontk

    @idreczonecompletiontk.setter
    def idreczonecompletiontk(self, idreczonecompletiontk):
        """Sets the idreczonecompletiontk of this JobReportEmission.


        :param idreczonecompletiontk: The idreczonecompletiontk of this JobReportEmission.  # noqa: E501
        :type: str
        """

        self._idreczonecompletiontk = idreczonecompletiontk

    @property
    def idwell(self):
        """Gets the idwell of this JobReportEmission.  # noqa: E501


        :return: The idwell of this JobReportEmission.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this JobReportEmission.


        :param idwell: The idwell of this JobReportEmission.  # noqa: E501
        :type: str
        """

        self._idwell = idwell

    @property
    def job_report(self):
        """Gets the job_report of this JobReportEmission.  # noqa: E501


        :return: The job_report of this JobReportEmission.  # noqa: E501
        :rtype: AnyOfJobReportEmissionJobReport
        """
        return self._job_report

    @job_report.setter
    def job_report(self, job_report):
        """Sets the job_report of this JobReportEmission.


        :param job_report: The job_report of this JobReportEmission.  # noqa: E501
        :type: AnyOfJobReportEmissionJobReport
        """

        self._job_report = job_report

    @property
    def methodcalculated(self):
        """Gets the methodcalculated of this JobReportEmission.  # noqa: E501


        :return: The methodcalculated of this JobReportEmission.  # noqa: E501
        :rtype: str
        """
        return self._methodcalculated

    @methodcalculated.setter
    def methodcalculated(self, methodcalculated):
        """Sets the methodcalculated of this JobReportEmission.


        :param methodcalculated: The methodcalculated of this JobReportEmission.  # noqa: E501
        :type: str
        """

        self._methodcalculated = methodcalculated

    @property
    def methodmeasured(self):
        """Gets the methodmeasured of this JobReportEmission.  # noqa: E501


        :return: The methodmeasured of this JobReportEmission.  # noqa: E501
        :rtype: str
        """
        return self._methodmeasured

    @methodmeasured.setter
    def methodmeasured(self, methodmeasured):
        """Sets the methodmeasured of this JobReportEmission.


        :param methodmeasured: The methodmeasured of this JobReportEmission.  # noqa: E501
        :type: str
        """

        self._methodmeasured = methodmeasured

    @property
    def prescas(self):
        """Gets the prescas of this JobReportEmission.  # noqa: E501


        :return: The prescas of this JobReportEmission.  # noqa: E501
        :rtype: OneOfJobReportEmissionPrescas
        """
        return self._prescas

    @prescas.setter
    def prescas(self, prescas):
        """Sets the prescas of this JobReportEmission.


        :param prescas: The prescas of this JobReportEmission.  # noqa: E501
        :type: OneOfJobReportEmissionPrescas
        """

        self._prescas = prescas

    @property
    def presdownstream(self):
        """Gets the presdownstream of this JobReportEmission.  # noqa: E501


        :return: The presdownstream of this JobReportEmission.  # noqa: E501
        :rtype: OneOfJobReportEmissionPresdownstream
        """
        return self._presdownstream

    @presdownstream.setter
    def presdownstream(self, presdownstream):
        """Sets the presdownstream of this JobReportEmission.


        :param presdownstream: The presdownstream of this JobReportEmission.  # noqa: E501
        :type: OneOfJobReportEmissionPresdownstream
        """

        self._presdownstream = presdownstream

    @property
    def prestub(self):
        """Gets the prestub of this JobReportEmission.  # noqa: E501


        :return: The prestub of this JobReportEmission.  # noqa: E501
        :rtype: OneOfJobReportEmissionPrestub
        """
        return self._prestub

    @prestub.setter
    def prestub(self, prestub):
        """Sets the prestub of this JobReportEmission.


        :param prestub: The prestub of this JobReportEmission.  # noqa: E501
        :type: OneOfJobReportEmissionPrestub
        """

        self._prestub = prestub

    @property
    def presupstream(self):
        """Gets the presupstream of this JobReportEmission.  # noqa: E501


        :return: The presupstream of this JobReportEmission.  # noqa: E501
        :rtype: OneOfJobReportEmissionPresupstream
        """
        return self._presupstream

    @presupstream.setter
    def presupstream(self, presupstream):
        """Sets the presupstream of this JobReportEmission.


        :param presupstream: The presupstream of this JobReportEmission.  # noqa: E501
        :type: OneOfJobReportEmissionPresupstream
        """

        self._presupstream = presupstream

    @property
    def ratiodisposed(self):
        """Gets the ratiodisposed of this JobReportEmission.  # noqa: E501


        :return: The ratiodisposed of this JobReportEmission.  # noqa: E501
        :rtype: OneOfJobReportEmissionRatiodisposed
        """
        return self._ratiodisposed

    @ratiodisposed.setter
    def ratiodisposed(self, ratiodisposed):
        """Sets the ratiodisposed of this JobReportEmission.


        :param ratiodisposed: The ratiodisposed of this JobReportEmission.  # noqa: E501
        :type: OneOfJobReportEmissionRatiodisposed
        """

        self._ratiodisposed = ratiodisposed

    @property
    def reason(self):
        """Gets the reason of this JobReportEmission.  # noqa: E501


        :return: The reason of this JobReportEmission.  # noqa: E501
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this JobReportEmission.


        :param reason: The reason of this JobReportEmission.  # noqa: E501
        :type: str
        """

        self._reason = reason

    @property
    def syscreatedate(self):
        """Gets the syscreatedate of this JobReportEmission.  # noqa: E501


        :return: The syscreatedate of this JobReportEmission.  # noqa: E501
        :rtype: datetime
        """
        return self._syscreatedate

    @syscreatedate.setter
    def syscreatedate(self, syscreatedate):
        """Sets the syscreatedate of this JobReportEmission.


        :param syscreatedate: The syscreatedate of this JobReportEmission.  # noqa: E501
        :type: datetime
        """

        self._syscreatedate = syscreatedate

    @property
    def syscreateuser(self):
        """Gets the syscreateuser of this JobReportEmission.  # noqa: E501


        :return: The syscreateuser of this JobReportEmission.  # noqa: E501
        :rtype: str
        """
        return self._syscreateuser

    @syscreateuser.setter
    def syscreateuser(self, syscreateuser):
        """Sets the syscreateuser of this JobReportEmission.


        :param syscreateuser: The syscreateuser of this JobReportEmission.  # noqa: E501
        :type: str
        """

        self._syscreateuser = syscreateuser

    @property
    def syslockchildren(self):
        """Gets the syslockchildren of this JobReportEmission.  # noqa: E501


        :return: The syslockchildren of this JobReportEmission.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildren

    @syslockchildren.setter
    def syslockchildren(self, syslockchildren):
        """Sets the syslockchildren of this JobReportEmission.


        :param syslockchildren: The syslockchildren of this JobReportEmission.  # noqa: E501
        :type: int
        """

        self._syslockchildren = syslockchildren

    @property
    def syslockchildrenui(self):
        """Gets the syslockchildrenui of this JobReportEmission.  # noqa: E501


        :return: The syslockchildrenui of this JobReportEmission.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildrenui

    @syslockchildrenui.setter
    def syslockchildrenui(self, syslockchildrenui):
        """Sets the syslockchildrenui of this JobReportEmission.


        :param syslockchildrenui: The syslockchildrenui of this JobReportEmission.  # noqa: E501
        :type: int
        """

        self._syslockchildrenui = syslockchildrenui

    @property
    def syslockdate(self):
        """Gets the syslockdate of this JobReportEmission.  # noqa: E501


        :return: The syslockdate of this JobReportEmission.  # noqa: E501
        :rtype: datetime
        """
        return self._syslockdate

    @syslockdate.setter
    def syslockdate(self, syslockdate):
        """Sets the syslockdate of this JobReportEmission.


        :param syslockdate: The syslockdate of this JobReportEmission.  # noqa: E501
        :type: datetime
        """

        self._syslockdate = syslockdate

    @property
    def syslockme(self):
        """Gets the syslockme of this JobReportEmission.  # noqa: E501


        :return: The syslockme of this JobReportEmission.  # noqa: E501
        :rtype: int
        """
        return self._syslockme

    @syslockme.setter
    def syslockme(self, syslockme):
        """Sets the syslockme of this JobReportEmission.


        :param syslockme: The syslockme of this JobReportEmission.  # noqa: E501
        :type: int
        """

        self._syslockme = syslockme

    @property
    def syslockmeui(self):
        """Gets the syslockmeui of this JobReportEmission.  # noqa: E501


        :return: The syslockmeui of this JobReportEmission.  # noqa: E501
        :rtype: int
        """
        return self._syslockmeui

    @syslockmeui.setter
    def syslockmeui(self, syslockmeui):
        """Sets the syslockmeui of this JobReportEmission.


        :param syslockmeui: The syslockmeui of this JobReportEmission.  # noqa: E501
        :type: int
        """

        self._syslockmeui = syslockmeui

    @property
    def sysmoddate(self):
        """Gets the sysmoddate of this JobReportEmission.  # noqa: E501


        :return: The sysmoddate of this JobReportEmission.  # noqa: E501
        :rtype: datetime
        """
        return self._sysmoddate

    @sysmoddate.setter
    def sysmoddate(self, sysmoddate):
        """Sets the sysmoddate of this JobReportEmission.


        :param sysmoddate: The sysmoddate of this JobReportEmission.  # noqa: E501
        :type: datetime
        """

        self._sysmoddate = sysmoddate

    @property
    def sysmoduser(self):
        """Gets the sysmoduser of this JobReportEmission.  # noqa: E501


        :return: The sysmoduser of this JobReportEmission.  # noqa: E501
        :rtype: str
        """
        return self._sysmoduser

    @sysmoduser.setter
    def sysmoduser(self, sysmoduser):
        """Sets the sysmoduser of this JobReportEmission.


        :param sysmoduser: The sysmoduser of this JobReportEmission.  # noqa: E501
        :type: str
        """

        self._sysmoduser = sysmoduser

    @property
    def systag(self):
        """Gets the systag of this JobReportEmission.  # noqa: E501


        :return: The systag of this JobReportEmission.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this JobReportEmission.


        :param systag: The systag of this JobReportEmission.  # noqa: E501
        :type: str
        """

        self._systag = systag

    @property
    def szdiachoke(self):
        """Gets the szdiachoke of this JobReportEmission.  # noqa: E501


        :return: The szdiachoke of this JobReportEmission.  # noqa: E501
        :rtype: OneOfJobReportEmissionSzdiachoke
        """
        return self._szdiachoke

    @szdiachoke.setter
    def szdiachoke(self, szdiachoke):
        """Sets the szdiachoke of this JobReportEmission.


        :param szdiachoke: The szdiachoke of this JobReportEmission.  # noqa: E501
        :type: OneOfJobReportEmissionSzdiachoke
        """

        self._szdiachoke = szdiachoke

    @property
    def szdiaorifice(self):
        """Gets the szdiaorifice of this JobReportEmission.  # noqa: E501


        :return: The szdiaorifice of this JobReportEmission.  # noqa: E501
        :rtype: OneOfJobReportEmissionSzdiaorifice
        """
        return self._szdiaorifice

    @szdiaorifice.setter
    def szdiaorifice(self, szdiaorifice):
        """Sets the szdiaorifice of this JobReportEmission.


        :param szdiaorifice: The szdiaorifice of this JobReportEmission.  # noqa: E501
        :type: OneOfJobReportEmissionSzdiaorifice
        """

        self._szdiaorifice = szdiaorifice

    @property
    def temp(self):
        """Gets the temp of this JobReportEmission.  # noqa: E501


        :return: The temp of this JobReportEmission.  # noqa: E501
        :rtype: OneOfJobReportEmissionTemp
        """
        return self._temp

    @temp.setter
    def temp(self, temp):
        """Sets the temp of this JobReportEmission.


        :param temp: The temp of this JobReportEmission.  # noqa: E501
        :type: OneOfJobReportEmissionTemp
        """

        self._temp = temp

    @property
    def typ1(self):
        """Gets the typ1 of this JobReportEmission.  # noqa: E501


        :return: The typ1 of this JobReportEmission.  # noqa: E501
        :rtype: str
        """
        return self._typ1

    @typ1.setter
    def typ1(self, typ1):
        """Sets the typ1 of this JobReportEmission.


        :param typ1: The typ1 of this JobReportEmission.  # noqa: E501
        :type: str
        """

        self._typ1 = typ1

    @property
    def typ2(self):
        """Gets the typ2 of this JobReportEmission.  # noqa: E501


        :return: The typ2 of this JobReportEmission.  # noqa: E501
        :rtype: str
        """
        return self._typ2

    @typ2.setter
    def typ2(self, typ2):
        """Sets the typ2 of this JobReportEmission.


        :param typ2: The typ2 of this JobReportEmission.  # noqa: E501
        :type: str
        """

        self._typ2 = typ2

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JobReportEmission, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobReportEmission):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
