# coding: utf-8

"""
    OData Service for namespace Default

    This OData service is located at http://localhost  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Wellbore(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'closedircalc': 'OneOfWellboreClosedircalc',
        'com': 'str',
        'county': 'str',
        'currentstatuscalc': 'str',
        'departmaxcalc': 'OneOfWellboreDepartmaxcalc',
        'depthdraw': 'OneOfWellboreDepthdraw',
        'depthkickoffmincalc': 'OneOfWellboreDepthkickoffmincalc',
        'depthstart': 'OneOfWellboreDepthstart',
        'depthtopactualcalc': 'OneOfWellboreDepthtopactualcalc',
        'depthtoppropcalc': 'OneOfWellboreDepthtoppropcalc',
        'depthtvdkickoffmincalc': 'OneOfWellboreDepthtvdkickoffmincalc',
        'depthtvdstartcalc': 'OneOfWellboreDepthtvdstartcalc',
        'des': 'str',
        'displaceunwrapcalc': 'OneOfWellboreDisplaceunwrapcalc',
        'dlsmaxcalc': 'OneOfWellboreDlsmaxcalc',
        'dttmendcalc': 'datetime',
        'dttmkickoffmincalc': 'datetime',
        'dttmstartcalc': 'datetime',
        'dttmstatuscalc': 'datetime',
        'durationcalc': 'OneOfWellboreDurationcalc',
        'duroffbtmcalc': 'OneOfWellboreDuroffbtmcalc',
        'duronbtmcalc': 'OneOfWellboreDuronbtmcalc',
        'durpipemovingcalc': 'OneOfWellboreDurpipemovingcalc',
        'ewdist': 'OneOfWellboreEwdist',
        'ewflag': 'str',
        'ewmaxcalc': 'OneOfWellboreEwmaxcalc',
        'ewmincalc': 'OneOfWellboreEwmincalc',
        'exclude': 'int',
        'fieldcode': 'str',
        'fieldname': 'str',
        'idrec': 'str',
        'idrecdirsrvyactual': 'str',
        'idrecdirsrvyactualtk': 'str',
        'idrecdirsrvyprop': 'str',
        'idrecdirsrvyproptk': 'str',
        'idrecjob': 'str',
        'idrecjobtk': 'str',
        'idrecparent': 'str',
        'idrecparenttk': 'str',
        'idwell': 'str',
        'inclmaxcalc': 'OneOfWellboreInclmaxcalc',
        'latitude': 'OneOfWellboreLatitude',
        'latlongdatum': 'str',
        'latlongsource': 'str',
        'legalsurveyloc': 'str',
        'legalsurveysubtyp': 'str',
        'legalsurveytyp': 'str',
        'loc_carters': 'list[LocCarter]',
        'loc_congressionals': 'list[LocCongressional]',
        'loc_dls': 'list[LocDls]',
        'loc_fps': 'list[LocFps]',
        'loc_nes': 'list[LocNe]',
        'loc_north_seas': 'list[LocNorthSea]',
        'loc_nts': 'list[LocNts]',
        'loc_offshores': 'list[LocOffshore]',
        'loc_ohios': 'list[LocOhio]',
        'loc_texas': 'list[LocTexas]',
        'locationnote': 'str',
        'locationref': 'str',
        'longitude': 'OneOfWellboreLongitude',
        'nsdist': 'OneOfWellboreNsdist',
        'nsflag': 'str',
        'nsmaxcalc': 'OneOfWellboreNsmaxcalc',
        'nsmincalc': 'OneOfWellboreNsmincalc',
        'profiletyp': 'str',
        'purpose': 'str',
        'stateprov': 'str',
        'syscreatedate': 'datetime',
        'syscreateuser': 'str',
        'syslockchildren': 'int',
        'syslockchildrenui': 'int',
        'syslockdate': 'datetime',
        'syslockme': 'int',
        'syslockmeui': 'int',
        'sysmoddate': 'datetime',
        'sysmoduser': 'str',
        'sysseq': 'int',
        'systag': 'str',
        'totaldepthcalc': 'OneOfWellboreTotaldepthcalc',
        'totaldepthtvdcalc': 'OneOfWellboreTotaldepthtvdcalc',
        'towndist': 'OneOfWellboreTowndist',
        'townflag': 'str',
        'townname': 'str',
        'townstateprov': 'str',
        'tvdmaxcalc': 'OneOfWellboreTvdmaxcalc',
        'tvdmincalc': 'OneOfWellboreTvdmincalc',
        'usernum1': 'OneOfWellboreUsernum1',
        'usernum2': 'OneOfWellboreUsernum2',
        'usernum3': 'OneOfWellboreUsernum3',
        'usertxt1': 'str',
        'usertxt2': 'str',
        'usertxt3': 'str',
        'utmgridzone': 'int',
        'utmsource': 'str',
        'utmx': 'OneOfWellboreUtmx',
        'utmy': 'OneOfWellboreUtmy',
        'vsdir': 'OneOfWellboreVsdir',
        'vsoriginew': 'OneOfWellboreVsoriginew',
        'vsoriginns': 'OneOfWellboreVsoriginns',
        'vsplotmaxcalc': 'OneOfWellboreVsplotmaxcalc',
        'vsplotmincalc': 'OneOfWellboreVsplotmincalc',
        'wellbore_aliases': 'list[WellboreAlias]',
        'wellbore_dir_surveys': 'list[WellboreDirSurvey]',
        'wellbore_formations': 'list[WellboreFormation]',
        'wellbore_key_depths': 'list[WellboreKeyDepth]',
        'wellbore_others': 'list[WellboreOther]',
        'wellbore_pbtds': 'list[WellborePbtd]',
        'wellbore_reservoirs': 'list[WellboreReservoir]',
        'wellbore_sizes': 'list[WellboreSize]',
        'wellbore_statuses': 'list[WellboreStatus]',
        'wellboreida': 'str',
        'wellboreidb': 'str',
        'wellboreidc': 'str',
        'wellboreidd': 'str',
        'wellboreide': 'str',
        'wellheader': 'AnyOfWellboreWellheader'
    }

    attribute_map = {
        'closedircalc': 'closedircalc',
        'com': 'com',
        'county': 'county',
        'currentstatuscalc': 'currentstatuscalc',
        'departmaxcalc': 'departmaxcalc',
        'depthdraw': 'depthdraw',
        'depthkickoffmincalc': 'depthkickoffmincalc',
        'depthstart': 'depthstart',
        'depthtopactualcalc': 'depthtopactualcalc',
        'depthtoppropcalc': 'depthtoppropcalc',
        'depthtvdkickoffmincalc': 'depthtvdkickoffmincalc',
        'depthtvdstartcalc': 'depthtvdstartcalc',
        'des': 'des',
        'displaceunwrapcalc': 'displaceunwrapcalc',
        'dlsmaxcalc': 'dlsmaxcalc',
        'dttmendcalc': 'dttmendcalc',
        'dttmkickoffmincalc': 'dttmkickoffmincalc',
        'dttmstartcalc': 'dttmstartcalc',
        'dttmstatuscalc': 'dttmstatuscalc',
        'durationcalc': 'durationcalc',
        'duroffbtmcalc': 'duroffbtmcalc',
        'duronbtmcalc': 'duronbtmcalc',
        'durpipemovingcalc': 'durpipemovingcalc',
        'ewdist': 'ewdist',
        'ewflag': 'ewflag',
        'ewmaxcalc': 'ewmaxcalc',
        'ewmincalc': 'ewmincalc',
        'exclude': 'exclude',
        'fieldcode': 'fieldcode',
        'fieldname': 'fieldname',
        'idrec': 'idrec',
        'idrecdirsrvyactual': 'idrecdirsrvyactual',
        'idrecdirsrvyactualtk': 'idrecdirsrvyactualtk',
        'idrecdirsrvyprop': 'idrecdirsrvyprop',
        'idrecdirsrvyproptk': 'idrecdirsrvyproptk',
        'idrecjob': 'idrecjob',
        'idrecjobtk': 'idrecjobtk',
        'idrecparent': 'idrecparent',
        'idrecparenttk': 'idrecparenttk',
        'idwell': 'idwell',
        'inclmaxcalc': 'inclmaxcalc',
        'latitude': 'latitude',
        'latlongdatum': 'latlongdatum',
        'latlongsource': 'latlongsource',
        'legalsurveyloc': 'legalsurveyloc',
        'legalsurveysubtyp': 'legalsurveysubtyp',
        'legalsurveytyp': 'legalsurveytyp',
        'loc_carters': 'locCarters',
        'loc_congressionals': 'locCongressionals',
        'loc_dls': 'locDls',
        'loc_fps': 'locFps',
        'loc_nes': 'locNes',
        'loc_north_seas': 'locNorthSeas',
        'loc_nts': 'locNts',
        'loc_offshores': 'locOffshores',
        'loc_ohios': 'locOhios',
        'loc_texas': 'locTexas',
        'locationnote': 'locationnote',
        'locationref': 'locationref',
        'longitude': 'longitude',
        'nsdist': 'nsdist',
        'nsflag': 'nsflag',
        'nsmaxcalc': 'nsmaxcalc',
        'nsmincalc': 'nsmincalc',
        'profiletyp': 'profiletyp',
        'purpose': 'purpose',
        'stateprov': 'stateprov',
        'syscreatedate': 'syscreatedate',
        'syscreateuser': 'syscreateuser',
        'syslockchildren': 'syslockchildren',
        'syslockchildrenui': 'syslockchildrenui',
        'syslockdate': 'syslockdate',
        'syslockme': 'syslockme',
        'syslockmeui': 'syslockmeui',
        'sysmoddate': 'sysmoddate',
        'sysmoduser': 'sysmoduser',
        'sysseq': 'sysseq',
        'systag': 'systag',
        'totaldepthcalc': 'totaldepthcalc',
        'totaldepthtvdcalc': 'totaldepthtvdcalc',
        'towndist': 'towndist',
        'townflag': 'townflag',
        'townname': 'townname',
        'townstateprov': 'townstateprov',
        'tvdmaxcalc': 'tvdmaxcalc',
        'tvdmincalc': 'tvdmincalc',
        'usernum1': 'usernum1',
        'usernum2': 'usernum2',
        'usernum3': 'usernum3',
        'usertxt1': 'usertxt1',
        'usertxt2': 'usertxt2',
        'usertxt3': 'usertxt3',
        'utmgridzone': 'utmgridzone',
        'utmsource': 'utmsource',
        'utmx': 'utmx',
        'utmy': 'utmy',
        'vsdir': 'vsdir',
        'vsoriginew': 'vsoriginew',
        'vsoriginns': 'vsoriginns',
        'vsplotmaxcalc': 'vsplotmaxcalc',
        'vsplotmincalc': 'vsplotmincalc',
        'wellbore_aliases': 'wellboreAliases',
        'wellbore_dir_surveys': 'wellboreDirSurveys',
        'wellbore_formations': 'wellboreFormations',
        'wellbore_key_depths': 'wellboreKeyDepths',
        'wellbore_others': 'wellboreOthers',
        'wellbore_pbtds': 'wellborePbtds',
        'wellbore_reservoirs': 'wellboreReservoirs',
        'wellbore_sizes': 'wellboreSizes',
        'wellbore_statuses': 'wellboreStatuses',
        'wellboreida': 'wellboreida',
        'wellboreidb': 'wellboreidb',
        'wellboreidc': 'wellboreidc',
        'wellboreidd': 'wellboreidd',
        'wellboreide': 'wellboreide',
        'wellheader': 'wellheader'
    }

    def __init__(self, closedircalc=None, com=None, county=None, currentstatuscalc=None, departmaxcalc=None, depthdraw=None, depthkickoffmincalc=None, depthstart=None, depthtopactualcalc=None, depthtoppropcalc=None, depthtvdkickoffmincalc=None, depthtvdstartcalc=None, des=None, displaceunwrapcalc=None, dlsmaxcalc=None, dttmendcalc=None, dttmkickoffmincalc=None, dttmstartcalc=None, dttmstatuscalc=None, durationcalc=None, duroffbtmcalc=None, duronbtmcalc=None, durpipemovingcalc=None, ewdist=None, ewflag=None, ewmaxcalc=None, ewmincalc=None, exclude=None, fieldcode=None, fieldname=None, idrec=None, idrecdirsrvyactual=None, idrecdirsrvyactualtk=None, idrecdirsrvyprop=None, idrecdirsrvyproptk=None, idrecjob=None, idrecjobtk=None, idrecparent=None, idrecparenttk=None, idwell=None, inclmaxcalc=None, latitude=None, latlongdatum=None, latlongsource=None, legalsurveyloc=None, legalsurveysubtyp=None, legalsurveytyp=None, loc_carters=None, loc_congressionals=None, loc_dls=None, loc_fps=None, loc_nes=None, loc_north_seas=None, loc_nts=None, loc_offshores=None, loc_ohios=None, loc_texas=None, locationnote=None, locationref=None, longitude=None, nsdist=None, nsflag=None, nsmaxcalc=None, nsmincalc=None, profiletyp=None, purpose=None, stateprov=None, syscreatedate=None, syscreateuser=None, syslockchildren=None, syslockchildrenui=None, syslockdate=None, syslockme=None, syslockmeui=None, sysmoddate=None, sysmoduser=None, sysseq=None, systag=None, totaldepthcalc=None, totaldepthtvdcalc=None, towndist=None, townflag=None, townname=None, townstateprov=None, tvdmaxcalc=None, tvdmincalc=None, usernum1=None, usernum2=None, usernum3=None, usertxt1=None, usertxt2=None, usertxt3=None, utmgridzone=None, utmsource=None, utmx=None, utmy=None, vsdir=None, vsoriginew=None, vsoriginns=None, vsplotmaxcalc=None, vsplotmincalc=None, wellbore_aliases=None, wellbore_dir_surveys=None, wellbore_formations=None, wellbore_key_depths=None, wellbore_others=None, wellbore_pbtds=None, wellbore_reservoirs=None, wellbore_sizes=None, wellbore_statuses=None, wellboreida=None, wellboreidb=None, wellboreidc=None, wellboreidd=None, wellboreide=None, wellheader=None):  # noqa: E501
        """Wellbore - a model defined in Swagger"""  # noqa: E501
        self._closedircalc = None
        self._com = None
        self._county = None
        self._currentstatuscalc = None
        self._departmaxcalc = None
        self._depthdraw = None
        self._depthkickoffmincalc = None
        self._depthstart = None
        self._depthtopactualcalc = None
        self._depthtoppropcalc = None
        self._depthtvdkickoffmincalc = None
        self._depthtvdstartcalc = None
        self._des = None
        self._displaceunwrapcalc = None
        self._dlsmaxcalc = None
        self._dttmendcalc = None
        self._dttmkickoffmincalc = None
        self._dttmstartcalc = None
        self._dttmstatuscalc = None
        self._durationcalc = None
        self._duroffbtmcalc = None
        self._duronbtmcalc = None
        self._durpipemovingcalc = None
        self._ewdist = None
        self._ewflag = None
        self._ewmaxcalc = None
        self._ewmincalc = None
        self._exclude = None
        self._fieldcode = None
        self._fieldname = None
        self._idrec = None
        self._idrecdirsrvyactual = None
        self._idrecdirsrvyactualtk = None
        self._idrecdirsrvyprop = None
        self._idrecdirsrvyproptk = None
        self._idrecjob = None
        self._idrecjobtk = None
        self._idrecparent = None
        self._idrecparenttk = None
        self._idwell = None
        self._inclmaxcalc = None
        self._latitude = None
        self._latlongdatum = None
        self._latlongsource = None
        self._legalsurveyloc = None
        self._legalsurveysubtyp = None
        self._legalsurveytyp = None
        self._loc_carters = None
        self._loc_congressionals = None
        self._loc_dls = None
        self._loc_fps = None
        self._loc_nes = None
        self._loc_north_seas = None
        self._loc_nts = None
        self._loc_offshores = None
        self._loc_ohios = None
        self._loc_texas = None
        self._locationnote = None
        self._locationref = None
        self._longitude = None
        self._nsdist = None
        self._nsflag = None
        self._nsmaxcalc = None
        self._nsmincalc = None
        self._profiletyp = None
        self._purpose = None
        self._stateprov = None
        self._syscreatedate = None
        self._syscreateuser = None
        self._syslockchildren = None
        self._syslockchildrenui = None
        self._syslockdate = None
        self._syslockme = None
        self._syslockmeui = None
        self._sysmoddate = None
        self._sysmoduser = None
        self._sysseq = None
        self._systag = None
        self._totaldepthcalc = None
        self._totaldepthtvdcalc = None
        self._towndist = None
        self._townflag = None
        self._townname = None
        self._townstateprov = None
        self._tvdmaxcalc = None
        self._tvdmincalc = None
        self._usernum1 = None
        self._usernum2 = None
        self._usernum3 = None
        self._usertxt1 = None
        self._usertxt2 = None
        self._usertxt3 = None
        self._utmgridzone = None
        self._utmsource = None
        self._utmx = None
        self._utmy = None
        self._vsdir = None
        self._vsoriginew = None
        self._vsoriginns = None
        self._vsplotmaxcalc = None
        self._vsplotmincalc = None
        self._wellbore_aliases = None
        self._wellbore_dir_surveys = None
        self._wellbore_formations = None
        self._wellbore_key_depths = None
        self._wellbore_others = None
        self._wellbore_pbtds = None
        self._wellbore_reservoirs = None
        self._wellbore_sizes = None
        self._wellbore_statuses = None
        self._wellboreida = None
        self._wellboreidb = None
        self._wellboreidc = None
        self._wellboreidd = None
        self._wellboreide = None
        self._wellheader = None
        self.discriminator = None
        if closedircalc is not None:
            self.closedircalc = closedircalc
        if com is not None:
            self.com = com
        if county is not None:
            self.county = county
        if currentstatuscalc is not None:
            self.currentstatuscalc = currentstatuscalc
        if departmaxcalc is not None:
            self.departmaxcalc = departmaxcalc
        if depthdraw is not None:
            self.depthdraw = depthdraw
        if depthkickoffmincalc is not None:
            self.depthkickoffmincalc = depthkickoffmincalc
        if depthstart is not None:
            self.depthstart = depthstart
        if depthtopactualcalc is not None:
            self.depthtopactualcalc = depthtopactualcalc
        if depthtoppropcalc is not None:
            self.depthtoppropcalc = depthtoppropcalc
        if depthtvdkickoffmincalc is not None:
            self.depthtvdkickoffmincalc = depthtvdkickoffmincalc
        if depthtvdstartcalc is not None:
            self.depthtvdstartcalc = depthtvdstartcalc
        if des is not None:
            self.des = des
        if displaceunwrapcalc is not None:
            self.displaceunwrapcalc = displaceunwrapcalc
        if dlsmaxcalc is not None:
            self.dlsmaxcalc = dlsmaxcalc
        if dttmendcalc is not None:
            self.dttmendcalc = dttmendcalc
        if dttmkickoffmincalc is not None:
            self.dttmkickoffmincalc = dttmkickoffmincalc
        if dttmstartcalc is not None:
            self.dttmstartcalc = dttmstartcalc
        if dttmstatuscalc is not None:
            self.dttmstatuscalc = dttmstatuscalc
        if durationcalc is not None:
            self.durationcalc = durationcalc
        if duroffbtmcalc is not None:
            self.duroffbtmcalc = duroffbtmcalc
        if duronbtmcalc is not None:
            self.duronbtmcalc = duronbtmcalc
        if durpipemovingcalc is not None:
            self.durpipemovingcalc = durpipemovingcalc
        if ewdist is not None:
            self.ewdist = ewdist
        if ewflag is not None:
            self.ewflag = ewflag
        if ewmaxcalc is not None:
            self.ewmaxcalc = ewmaxcalc
        if ewmincalc is not None:
            self.ewmincalc = ewmincalc
        if exclude is not None:
            self.exclude = exclude
        if fieldcode is not None:
            self.fieldcode = fieldcode
        if fieldname is not None:
            self.fieldname = fieldname
        if idrec is not None:
            self.idrec = idrec
        if idrecdirsrvyactual is not None:
            self.idrecdirsrvyactual = idrecdirsrvyactual
        if idrecdirsrvyactualtk is not None:
            self.idrecdirsrvyactualtk = idrecdirsrvyactualtk
        if idrecdirsrvyprop is not None:
            self.idrecdirsrvyprop = idrecdirsrvyprop
        if idrecdirsrvyproptk is not None:
            self.idrecdirsrvyproptk = idrecdirsrvyproptk
        if idrecjob is not None:
            self.idrecjob = idrecjob
        if idrecjobtk is not None:
            self.idrecjobtk = idrecjobtk
        if idrecparent is not None:
            self.idrecparent = idrecparent
        if idrecparenttk is not None:
            self.idrecparenttk = idrecparenttk
        if idwell is not None:
            self.idwell = idwell
        if inclmaxcalc is not None:
            self.inclmaxcalc = inclmaxcalc
        if latitude is not None:
            self.latitude = latitude
        if latlongdatum is not None:
            self.latlongdatum = latlongdatum
        if latlongsource is not None:
            self.latlongsource = latlongsource
        if legalsurveyloc is not None:
            self.legalsurveyloc = legalsurveyloc
        if legalsurveysubtyp is not None:
            self.legalsurveysubtyp = legalsurveysubtyp
        if legalsurveytyp is not None:
            self.legalsurveytyp = legalsurveytyp
        if loc_carters is not None:
            self.loc_carters = loc_carters
        if loc_congressionals is not None:
            self.loc_congressionals = loc_congressionals
        if loc_dls is not None:
            self.loc_dls = loc_dls
        if loc_fps is not None:
            self.loc_fps = loc_fps
        if loc_nes is not None:
            self.loc_nes = loc_nes
        if loc_north_seas is not None:
            self.loc_north_seas = loc_north_seas
        if loc_nts is not None:
            self.loc_nts = loc_nts
        if loc_offshores is not None:
            self.loc_offshores = loc_offshores
        if loc_ohios is not None:
            self.loc_ohios = loc_ohios
        if loc_texas is not None:
            self.loc_texas = loc_texas
        if locationnote is not None:
            self.locationnote = locationnote
        if locationref is not None:
            self.locationref = locationref
        if longitude is not None:
            self.longitude = longitude
        if nsdist is not None:
            self.nsdist = nsdist
        if nsflag is not None:
            self.nsflag = nsflag
        if nsmaxcalc is not None:
            self.nsmaxcalc = nsmaxcalc
        if nsmincalc is not None:
            self.nsmincalc = nsmincalc
        if profiletyp is not None:
            self.profiletyp = profiletyp
        if purpose is not None:
            self.purpose = purpose
        if stateprov is not None:
            self.stateprov = stateprov
        if syscreatedate is not None:
            self.syscreatedate = syscreatedate
        if syscreateuser is not None:
            self.syscreateuser = syscreateuser
        if syslockchildren is not None:
            self.syslockchildren = syslockchildren
        if syslockchildrenui is not None:
            self.syslockchildrenui = syslockchildrenui
        if syslockdate is not None:
            self.syslockdate = syslockdate
        if syslockme is not None:
            self.syslockme = syslockme
        if syslockmeui is not None:
            self.syslockmeui = syslockmeui
        if sysmoddate is not None:
            self.sysmoddate = sysmoddate
        if sysmoduser is not None:
            self.sysmoduser = sysmoduser
        if sysseq is not None:
            self.sysseq = sysseq
        if systag is not None:
            self.systag = systag
        if totaldepthcalc is not None:
            self.totaldepthcalc = totaldepthcalc
        if totaldepthtvdcalc is not None:
            self.totaldepthtvdcalc = totaldepthtvdcalc
        if towndist is not None:
            self.towndist = towndist
        if townflag is not None:
            self.townflag = townflag
        if townname is not None:
            self.townname = townname
        if townstateprov is not None:
            self.townstateprov = townstateprov
        if tvdmaxcalc is not None:
            self.tvdmaxcalc = tvdmaxcalc
        if tvdmincalc is not None:
            self.tvdmincalc = tvdmincalc
        if usernum1 is not None:
            self.usernum1 = usernum1
        if usernum2 is not None:
            self.usernum2 = usernum2
        if usernum3 is not None:
            self.usernum3 = usernum3
        if usertxt1 is not None:
            self.usertxt1 = usertxt1
        if usertxt2 is not None:
            self.usertxt2 = usertxt2
        if usertxt3 is not None:
            self.usertxt3 = usertxt3
        if utmgridzone is not None:
            self.utmgridzone = utmgridzone
        if utmsource is not None:
            self.utmsource = utmsource
        if utmx is not None:
            self.utmx = utmx
        if utmy is not None:
            self.utmy = utmy
        if vsdir is not None:
            self.vsdir = vsdir
        if vsoriginew is not None:
            self.vsoriginew = vsoriginew
        if vsoriginns is not None:
            self.vsoriginns = vsoriginns
        if vsplotmaxcalc is not None:
            self.vsplotmaxcalc = vsplotmaxcalc
        if vsplotmincalc is not None:
            self.vsplotmincalc = vsplotmincalc
        if wellbore_aliases is not None:
            self.wellbore_aliases = wellbore_aliases
        if wellbore_dir_surveys is not None:
            self.wellbore_dir_surveys = wellbore_dir_surveys
        if wellbore_formations is not None:
            self.wellbore_formations = wellbore_formations
        if wellbore_key_depths is not None:
            self.wellbore_key_depths = wellbore_key_depths
        if wellbore_others is not None:
            self.wellbore_others = wellbore_others
        if wellbore_pbtds is not None:
            self.wellbore_pbtds = wellbore_pbtds
        if wellbore_reservoirs is not None:
            self.wellbore_reservoirs = wellbore_reservoirs
        if wellbore_sizes is not None:
            self.wellbore_sizes = wellbore_sizes
        if wellbore_statuses is not None:
            self.wellbore_statuses = wellbore_statuses
        if wellboreida is not None:
            self.wellboreida = wellboreida
        if wellboreidb is not None:
            self.wellboreidb = wellboreidb
        if wellboreidc is not None:
            self.wellboreidc = wellboreidc
        if wellboreidd is not None:
            self.wellboreidd = wellboreidd
        if wellboreide is not None:
            self.wellboreide = wellboreide
        if wellheader is not None:
            self.wellheader = wellheader

    @property
    def closedircalc(self):
        """Gets the closedircalc of this Wellbore.  # noqa: E501


        :return: The closedircalc of this Wellbore.  # noqa: E501
        :rtype: OneOfWellboreClosedircalc
        """
        return self._closedircalc

    @closedircalc.setter
    def closedircalc(self, closedircalc):
        """Sets the closedircalc of this Wellbore.


        :param closedircalc: The closedircalc of this Wellbore.  # noqa: E501
        :type: OneOfWellboreClosedircalc
        """

        self._closedircalc = closedircalc

    @property
    def com(self):
        """Gets the com of this Wellbore.  # noqa: E501


        :return: The com of this Wellbore.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this Wellbore.


        :param com: The com of this Wellbore.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def county(self):
        """Gets the county of this Wellbore.  # noqa: E501


        :return: The county of this Wellbore.  # noqa: E501
        :rtype: str
        """
        return self._county

    @county.setter
    def county(self, county):
        """Sets the county of this Wellbore.


        :param county: The county of this Wellbore.  # noqa: E501
        :type: str
        """

        self._county = county

    @property
    def currentstatuscalc(self):
        """Gets the currentstatuscalc of this Wellbore.  # noqa: E501


        :return: The currentstatuscalc of this Wellbore.  # noqa: E501
        :rtype: str
        """
        return self._currentstatuscalc

    @currentstatuscalc.setter
    def currentstatuscalc(self, currentstatuscalc):
        """Sets the currentstatuscalc of this Wellbore.


        :param currentstatuscalc: The currentstatuscalc of this Wellbore.  # noqa: E501
        :type: str
        """

        self._currentstatuscalc = currentstatuscalc

    @property
    def departmaxcalc(self):
        """Gets the departmaxcalc of this Wellbore.  # noqa: E501


        :return: The departmaxcalc of this Wellbore.  # noqa: E501
        :rtype: OneOfWellboreDepartmaxcalc
        """
        return self._departmaxcalc

    @departmaxcalc.setter
    def departmaxcalc(self, departmaxcalc):
        """Sets the departmaxcalc of this Wellbore.


        :param departmaxcalc: The departmaxcalc of this Wellbore.  # noqa: E501
        :type: OneOfWellboreDepartmaxcalc
        """

        self._departmaxcalc = departmaxcalc

    @property
    def depthdraw(self):
        """Gets the depthdraw of this Wellbore.  # noqa: E501


        :return: The depthdraw of this Wellbore.  # noqa: E501
        :rtype: OneOfWellboreDepthdraw
        """
        return self._depthdraw

    @depthdraw.setter
    def depthdraw(self, depthdraw):
        """Sets the depthdraw of this Wellbore.


        :param depthdraw: The depthdraw of this Wellbore.  # noqa: E501
        :type: OneOfWellboreDepthdraw
        """

        self._depthdraw = depthdraw

    @property
    def depthkickoffmincalc(self):
        """Gets the depthkickoffmincalc of this Wellbore.  # noqa: E501


        :return: The depthkickoffmincalc of this Wellbore.  # noqa: E501
        :rtype: OneOfWellboreDepthkickoffmincalc
        """
        return self._depthkickoffmincalc

    @depthkickoffmincalc.setter
    def depthkickoffmincalc(self, depthkickoffmincalc):
        """Sets the depthkickoffmincalc of this Wellbore.


        :param depthkickoffmincalc: The depthkickoffmincalc of this Wellbore.  # noqa: E501
        :type: OneOfWellboreDepthkickoffmincalc
        """

        self._depthkickoffmincalc = depthkickoffmincalc

    @property
    def depthstart(self):
        """Gets the depthstart of this Wellbore.  # noqa: E501


        :return: The depthstart of this Wellbore.  # noqa: E501
        :rtype: OneOfWellboreDepthstart
        """
        return self._depthstart

    @depthstart.setter
    def depthstart(self, depthstart):
        """Sets the depthstart of this Wellbore.


        :param depthstart: The depthstart of this Wellbore.  # noqa: E501
        :type: OneOfWellboreDepthstart
        """

        self._depthstart = depthstart

    @property
    def depthtopactualcalc(self):
        """Gets the depthtopactualcalc of this Wellbore.  # noqa: E501


        :return: The depthtopactualcalc of this Wellbore.  # noqa: E501
        :rtype: OneOfWellboreDepthtopactualcalc
        """
        return self._depthtopactualcalc

    @depthtopactualcalc.setter
    def depthtopactualcalc(self, depthtopactualcalc):
        """Sets the depthtopactualcalc of this Wellbore.


        :param depthtopactualcalc: The depthtopactualcalc of this Wellbore.  # noqa: E501
        :type: OneOfWellboreDepthtopactualcalc
        """

        self._depthtopactualcalc = depthtopactualcalc

    @property
    def depthtoppropcalc(self):
        """Gets the depthtoppropcalc of this Wellbore.  # noqa: E501


        :return: The depthtoppropcalc of this Wellbore.  # noqa: E501
        :rtype: OneOfWellboreDepthtoppropcalc
        """
        return self._depthtoppropcalc

    @depthtoppropcalc.setter
    def depthtoppropcalc(self, depthtoppropcalc):
        """Sets the depthtoppropcalc of this Wellbore.


        :param depthtoppropcalc: The depthtoppropcalc of this Wellbore.  # noqa: E501
        :type: OneOfWellboreDepthtoppropcalc
        """

        self._depthtoppropcalc = depthtoppropcalc

    @property
    def depthtvdkickoffmincalc(self):
        """Gets the depthtvdkickoffmincalc of this Wellbore.  # noqa: E501


        :return: The depthtvdkickoffmincalc of this Wellbore.  # noqa: E501
        :rtype: OneOfWellboreDepthtvdkickoffmincalc
        """
        return self._depthtvdkickoffmincalc

    @depthtvdkickoffmincalc.setter
    def depthtvdkickoffmincalc(self, depthtvdkickoffmincalc):
        """Sets the depthtvdkickoffmincalc of this Wellbore.


        :param depthtvdkickoffmincalc: The depthtvdkickoffmincalc of this Wellbore.  # noqa: E501
        :type: OneOfWellboreDepthtvdkickoffmincalc
        """

        self._depthtvdkickoffmincalc = depthtvdkickoffmincalc

    @property
    def depthtvdstartcalc(self):
        """Gets the depthtvdstartcalc of this Wellbore.  # noqa: E501


        :return: The depthtvdstartcalc of this Wellbore.  # noqa: E501
        :rtype: OneOfWellboreDepthtvdstartcalc
        """
        return self._depthtvdstartcalc

    @depthtvdstartcalc.setter
    def depthtvdstartcalc(self, depthtvdstartcalc):
        """Sets the depthtvdstartcalc of this Wellbore.


        :param depthtvdstartcalc: The depthtvdstartcalc of this Wellbore.  # noqa: E501
        :type: OneOfWellboreDepthtvdstartcalc
        """

        self._depthtvdstartcalc = depthtvdstartcalc

    @property
    def des(self):
        """Gets the des of this Wellbore.  # noqa: E501


        :return: The des of this Wellbore.  # noqa: E501
        :rtype: str
        """
        return self._des

    @des.setter
    def des(self, des):
        """Sets the des of this Wellbore.


        :param des: The des of this Wellbore.  # noqa: E501
        :type: str
        """

        self._des = des

    @property
    def displaceunwrapcalc(self):
        """Gets the displaceunwrapcalc of this Wellbore.  # noqa: E501


        :return: The displaceunwrapcalc of this Wellbore.  # noqa: E501
        :rtype: OneOfWellboreDisplaceunwrapcalc
        """
        return self._displaceunwrapcalc

    @displaceunwrapcalc.setter
    def displaceunwrapcalc(self, displaceunwrapcalc):
        """Sets the displaceunwrapcalc of this Wellbore.


        :param displaceunwrapcalc: The displaceunwrapcalc of this Wellbore.  # noqa: E501
        :type: OneOfWellboreDisplaceunwrapcalc
        """

        self._displaceunwrapcalc = displaceunwrapcalc

    @property
    def dlsmaxcalc(self):
        """Gets the dlsmaxcalc of this Wellbore.  # noqa: E501


        :return: The dlsmaxcalc of this Wellbore.  # noqa: E501
        :rtype: OneOfWellboreDlsmaxcalc
        """
        return self._dlsmaxcalc

    @dlsmaxcalc.setter
    def dlsmaxcalc(self, dlsmaxcalc):
        """Sets the dlsmaxcalc of this Wellbore.


        :param dlsmaxcalc: The dlsmaxcalc of this Wellbore.  # noqa: E501
        :type: OneOfWellboreDlsmaxcalc
        """

        self._dlsmaxcalc = dlsmaxcalc

    @property
    def dttmendcalc(self):
        """Gets the dttmendcalc of this Wellbore.  # noqa: E501


        :return: The dttmendcalc of this Wellbore.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmendcalc

    @dttmendcalc.setter
    def dttmendcalc(self, dttmendcalc):
        """Sets the dttmendcalc of this Wellbore.


        :param dttmendcalc: The dttmendcalc of this Wellbore.  # noqa: E501
        :type: datetime
        """

        self._dttmendcalc = dttmendcalc

    @property
    def dttmkickoffmincalc(self):
        """Gets the dttmkickoffmincalc of this Wellbore.  # noqa: E501


        :return: The dttmkickoffmincalc of this Wellbore.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmkickoffmincalc

    @dttmkickoffmincalc.setter
    def dttmkickoffmincalc(self, dttmkickoffmincalc):
        """Sets the dttmkickoffmincalc of this Wellbore.


        :param dttmkickoffmincalc: The dttmkickoffmincalc of this Wellbore.  # noqa: E501
        :type: datetime
        """

        self._dttmkickoffmincalc = dttmkickoffmincalc

    @property
    def dttmstartcalc(self):
        """Gets the dttmstartcalc of this Wellbore.  # noqa: E501


        :return: The dttmstartcalc of this Wellbore.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmstartcalc

    @dttmstartcalc.setter
    def dttmstartcalc(self, dttmstartcalc):
        """Sets the dttmstartcalc of this Wellbore.


        :param dttmstartcalc: The dttmstartcalc of this Wellbore.  # noqa: E501
        :type: datetime
        """

        self._dttmstartcalc = dttmstartcalc

    @property
    def dttmstatuscalc(self):
        """Gets the dttmstatuscalc of this Wellbore.  # noqa: E501


        :return: The dttmstatuscalc of this Wellbore.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmstatuscalc

    @dttmstatuscalc.setter
    def dttmstatuscalc(self, dttmstatuscalc):
        """Sets the dttmstatuscalc of this Wellbore.


        :param dttmstatuscalc: The dttmstatuscalc of this Wellbore.  # noqa: E501
        :type: datetime
        """

        self._dttmstatuscalc = dttmstatuscalc

    @property
    def durationcalc(self):
        """Gets the durationcalc of this Wellbore.  # noqa: E501


        :return: The durationcalc of this Wellbore.  # noqa: E501
        :rtype: OneOfWellboreDurationcalc
        """
        return self._durationcalc

    @durationcalc.setter
    def durationcalc(self, durationcalc):
        """Sets the durationcalc of this Wellbore.


        :param durationcalc: The durationcalc of this Wellbore.  # noqa: E501
        :type: OneOfWellboreDurationcalc
        """

        self._durationcalc = durationcalc

    @property
    def duroffbtmcalc(self):
        """Gets the duroffbtmcalc of this Wellbore.  # noqa: E501


        :return: The duroffbtmcalc of this Wellbore.  # noqa: E501
        :rtype: OneOfWellboreDuroffbtmcalc
        """
        return self._duroffbtmcalc

    @duroffbtmcalc.setter
    def duroffbtmcalc(self, duroffbtmcalc):
        """Sets the duroffbtmcalc of this Wellbore.


        :param duroffbtmcalc: The duroffbtmcalc of this Wellbore.  # noqa: E501
        :type: OneOfWellboreDuroffbtmcalc
        """

        self._duroffbtmcalc = duroffbtmcalc

    @property
    def duronbtmcalc(self):
        """Gets the duronbtmcalc of this Wellbore.  # noqa: E501


        :return: The duronbtmcalc of this Wellbore.  # noqa: E501
        :rtype: OneOfWellboreDuronbtmcalc
        """
        return self._duronbtmcalc

    @duronbtmcalc.setter
    def duronbtmcalc(self, duronbtmcalc):
        """Sets the duronbtmcalc of this Wellbore.


        :param duronbtmcalc: The duronbtmcalc of this Wellbore.  # noqa: E501
        :type: OneOfWellboreDuronbtmcalc
        """

        self._duronbtmcalc = duronbtmcalc

    @property
    def durpipemovingcalc(self):
        """Gets the durpipemovingcalc of this Wellbore.  # noqa: E501


        :return: The durpipemovingcalc of this Wellbore.  # noqa: E501
        :rtype: OneOfWellboreDurpipemovingcalc
        """
        return self._durpipemovingcalc

    @durpipemovingcalc.setter
    def durpipemovingcalc(self, durpipemovingcalc):
        """Sets the durpipemovingcalc of this Wellbore.


        :param durpipemovingcalc: The durpipemovingcalc of this Wellbore.  # noqa: E501
        :type: OneOfWellboreDurpipemovingcalc
        """

        self._durpipemovingcalc = durpipemovingcalc

    @property
    def ewdist(self):
        """Gets the ewdist of this Wellbore.  # noqa: E501


        :return: The ewdist of this Wellbore.  # noqa: E501
        :rtype: OneOfWellboreEwdist
        """
        return self._ewdist

    @ewdist.setter
    def ewdist(self, ewdist):
        """Sets the ewdist of this Wellbore.


        :param ewdist: The ewdist of this Wellbore.  # noqa: E501
        :type: OneOfWellboreEwdist
        """

        self._ewdist = ewdist

    @property
    def ewflag(self):
        """Gets the ewflag of this Wellbore.  # noqa: E501


        :return: The ewflag of this Wellbore.  # noqa: E501
        :rtype: str
        """
        return self._ewflag

    @ewflag.setter
    def ewflag(self, ewflag):
        """Sets the ewflag of this Wellbore.


        :param ewflag: The ewflag of this Wellbore.  # noqa: E501
        :type: str
        """

        self._ewflag = ewflag

    @property
    def ewmaxcalc(self):
        """Gets the ewmaxcalc of this Wellbore.  # noqa: E501


        :return: The ewmaxcalc of this Wellbore.  # noqa: E501
        :rtype: OneOfWellboreEwmaxcalc
        """
        return self._ewmaxcalc

    @ewmaxcalc.setter
    def ewmaxcalc(self, ewmaxcalc):
        """Sets the ewmaxcalc of this Wellbore.


        :param ewmaxcalc: The ewmaxcalc of this Wellbore.  # noqa: E501
        :type: OneOfWellboreEwmaxcalc
        """

        self._ewmaxcalc = ewmaxcalc

    @property
    def ewmincalc(self):
        """Gets the ewmincalc of this Wellbore.  # noqa: E501


        :return: The ewmincalc of this Wellbore.  # noqa: E501
        :rtype: OneOfWellboreEwmincalc
        """
        return self._ewmincalc

    @ewmincalc.setter
    def ewmincalc(self, ewmincalc):
        """Sets the ewmincalc of this Wellbore.


        :param ewmincalc: The ewmincalc of this Wellbore.  # noqa: E501
        :type: OneOfWellboreEwmincalc
        """

        self._ewmincalc = ewmincalc

    @property
    def exclude(self):
        """Gets the exclude of this Wellbore.  # noqa: E501


        :return: The exclude of this Wellbore.  # noqa: E501
        :rtype: int
        """
        return self._exclude

    @exclude.setter
    def exclude(self, exclude):
        """Sets the exclude of this Wellbore.


        :param exclude: The exclude of this Wellbore.  # noqa: E501
        :type: int
        """

        self._exclude = exclude

    @property
    def fieldcode(self):
        """Gets the fieldcode of this Wellbore.  # noqa: E501


        :return: The fieldcode of this Wellbore.  # noqa: E501
        :rtype: str
        """
        return self._fieldcode

    @fieldcode.setter
    def fieldcode(self, fieldcode):
        """Sets the fieldcode of this Wellbore.


        :param fieldcode: The fieldcode of this Wellbore.  # noqa: E501
        :type: str
        """

        self._fieldcode = fieldcode

    @property
    def fieldname(self):
        """Gets the fieldname of this Wellbore.  # noqa: E501


        :return: The fieldname of this Wellbore.  # noqa: E501
        :rtype: str
        """
        return self._fieldname

    @fieldname.setter
    def fieldname(self, fieldname):
        """Sets the fieldname of this Wellbore.


        :param fieldname: The fieldname of this Wellbore.  # noqa: E501
        :type: str
        """

        self._fieldname = fieldname

    @property
    def idrec(self):
        """Gets the idrec of this Wellbore.  # noqa: E501


        :return: The idrec of this Wellbore.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this Wellbore.


        :param idrec: The idrec of this Wellbore.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecdirsrvyactual(self):
        """Gets the idrecdirsrvyactual of this Wellbore.  # noqa: E501


        :return: The idrecdirsrvyactual of this Wellbore.  # noqa: E501
        :rtype: str
        """
        return self._idrecdirsrvyactual

    @idrecdirsrvyactual.setter
    def idrecdirsrvyactual(self, idrecdirsrvyactual):
        """Sets the idrecdirsrvyactual of this Wellbore.


        :param idrecdirsrvyactual: The idrecdirsrvyactual of this Wellbore.  # noqa: E501
        :type: str
        """

        self._idrecdirsrvyactual = idrecdirsrvyactual

    @property
    def idrecdirsrvyactualtk(self):
        """Gets the idrecdirsrvyactualtk of this Wellbore.  # noqa: E501


        :return: The idrecdirsrvyactualtk of this Wellbore.  # noqa: E501
        :rtype: str
        """
        return self._idrecdirsrvyactualtk

    @idrecdirsrvyactualtk.setter
    def idrecdirsrvyactualtk(self, idrecdirsrvyactualtk):
        """Sets the idrecdirsrvyactualtk of this Wellbore.


        :param idrecdirsrvyactualtk: The idrecdirsrvyactualtk of this Wellbore.  # noqa: E501
        :type: str
        """

        self._idrecdirsrvyactualtk = idrecdirsrvyactualtk

    @property
    def idrecdirsrvyprop(self):
        """Gets the idrecdirsrvyprop of this Wellbore.  # noqa: E501


        :return: The idrecdirsrvyprop of this Wellbore.  # noqa: E501
        :rtype: str
        """
        return self._idrecdirsrvyprop

    @idrecdirsrvyprop.setter
    def idrecdirsrvyprop(self, idrecdirsrvyprop):
        """Sets the idrecdirsrvyprop of this Wellbore.


        :param idrecdirsrvyprop: The idrecdirsrvyprop of this Wellbore.  # noqa: E501
        :type: str
        """

        self._idrecdirsrvyprop = idrecdirsrvyprop

    @property
    def idrecdirsrvyproptk(self):
        """Gets the idrecdirsrvyproptk of this Wellbore.  # noqa: E501


        :return: The idrecdirsrvyproptk of this Wellbore.  # noqa: E501
        :rtype: str
        """
        return self._idrecdirsrvyproptk

    @idrecdirsrvyproptk.setter
    def idrecdirsrvyproptk(self, idrecdirsrvyproptk):
        """Sets the idrecdirsrvyproptk of this Wellbore.


        :param idrecdirsrvyproptk: The idrecdirsrvyproptk of this Wellbore.  # noqa: E501
        :type: str
        """

        self._idrecdirsrvyproptk = idrecdirsrvyproptk

    @property
    def idrecjob(self):
        """Gets the idrecjob of this Wellbore.  # noqa: E501


        :return: The idrecjob of this Wellbore.  # noqa: E501
        :rtype: str
        """
        return self._idrecjob

    @idrecjob.setter
    def idrecjob(self, idrecjob):
        """Sets the idrecjob of this Wellbore.


        :param idrecjob: The idrecjob of this Wellbore.  # noqa: E501
        :type: str
        """

        self._idrecjob = idrecjob

    @property
    def idrecjobtk(self):
        """Gets the idrecjobtk of this Wellbore.  # noqa: E501


        :return: The idrecjobtk of this Wellbore.  # noqa: E501
        :rtype: str
        """
        return self._idrecjobtk

    @idrecjobtk.setter
    def idrecjobtk(self, idrecjobtk):
        """Sets the idrecjobtk of this Wellbore.


        :param idrecjobtk: The idrecjobtk of this Wellbore.  # noqa: E501
        :type: str
        """

        self._idrecjobtk = idrecjobtk

    @property
    def idrecparent(self):
        """Gets the idrecparent of this Wellbore.  # noqa: E501


        :return: The idrecparent of this Wellbore.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this Wellbore.


        :param idrecparent: The idrecparent of this Wellbore.  # noqa: E501
        :type: str
        """

        self._idrecparent = idrecparent

    @property
    def idrecparenttk(self):
        """Gets the idrecparenttk of this Wellbore.  # noqa: E501


        :return: The idrecparenttk of this Wellbore.  # noqa: E501
        :rtype: str
        """
        return self._idrecparenttk

    @idrecparenttk.setter
    def idrecparenttk(self, idrecparenttk):
        """Sets the idrecparenttk of this Wellbore.


        :param idrecparenttk: The idrecparenttk of this Wellbore.  # noqa: E501
        :type: str
        """

        self._idrecparenttk = idrecparenttk

    @property
    def idwell(self):
        """Gets the idwell of this Wellbore.  # noqa: E501


        :return: The idwell of this Wellbore.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this Wellbore.


        :param idwell: The idwell of this Wellbore.  # noqa: E501
        :type: str
        """

        self._idwell = idwell

    @property
    def inclmaxcalc(self):
        """Gets the inclmaxcalc of this Wellbore.  # noqa: E501


        :return: The inclmaxcalc of this Wellbore.  # noqa: E501
        :rtype: OneOfWellboreInclmaxcalc
        """
        return self._inclmaxcalc

    @inclmaxcalc.setter
    def inclmaxcalc(self, inclmaxcalc):
        """Sets the inclmaxcalc of this Wellbore.


        :param inclmaxcalc: The inclmaxcalc of this Wellbore.  # noqa: E501
        :type: OneOfWellboreInclmaxcalc
        """

        self._inclmaxcalc = inclmaxcalc

    @property
    def latitude(self):
        """Gets the latitude of this Wellbore.  # noqa: E501


        :return: The latitude of this Wellbore.  # noqa: E501
        :rtype: OneOfWellboreLatitude
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this Wellbore.


        :param latitude: The latitude of this Wellbore.  # noqa: E501
        :type: OneOfWellboreLatitude
        """

        self._latitude = latitude

    @property
    def latlongdatum(self):
        """Gets the latlongdatum of this Wellbore.  # noqa: E501


        :return: The latlongdatum of this Wellbore.  # noqa: E501
        :rtype: str
        """
        return self._latlongdatum

    @latlongdatum.setter
    def latlongdatum(self, latlongdatum):
        """Sets the latlongdatum of this Wellbore.


        :param latlongdatum: The latlongdatum of this Wellbore.  # noqa: E501
        :type: str
        """

        self._latlongdatum = latlongdatum

    @property
    def latlongsource(self):
        """Gets the latlongsource of this Wellbore.  # noqa: E501


        :return: The latlongsource of this Wellbore.  # noqa: E501
        :rtype: str
        """
        return self._latlongsource

    @latlongsource.setter
    def latlongsource(self, latlongsource):
        """Sets the latlongsource of this Wellbore.


        :param latlongsource: The latlongsource of this Wellbore.  # noqa: E501
        :type: str
        """

        self._latlongsource = latlongsource

    @property
    def legalsurveyloc(self):
        """Gets the legalsurveyloc of this Wellbore.  # noqa: E501


        :return: The legalsurveyloc of this Wellbore.  # noqa: E501
        :rtype: str
        """
        return self._legalsurveyloc

    @legalsurveyloc.setter
    def legalsurveyloc(self, legalsurveyloc):
        """Sets the legalsurveyloc of this Wellbore.


        :param legalsurveyloc: The legalsurveyloc of this Wellbore.  # noqa: E501
        :type: str
        """

        self._legalsurveyloc = legalsurveyloc

    @property
    def legalsurveysubtyp(self):
        """Gets the legalsurveysubtyp of this Wellbore.  # noqa: E501


        :return: The legalsurveysubtyp of this Wellbore.  # noqa: E501
        :rtype: str
        """
        return self._legalsurveysubtyp

    @legalsurveysubtyp.setter
    def legalsurveysubtyp(self, legalsurveysubtyp):
        """Sets the legalsurveysubtyp of this Wellbore.


        :param legalsurveysubtyp: The legalsurveysubtyp of this Wellbore.  # noqa: E501
        :type: str
        """

        self._legalsurveysubtyp = legalsurveysubtyp

    @property
    def legalsurveytyp(self):
        """Gets the legalsurveytyp of this Wellbore.  # noqa: E501


        :return: The legalsurveytyp of this Wellbore.  # noqa: E501
        :rtype: str
        """
        return self._legalsurveytyp

    @legalsurveytyp.setter
    def legalsurveytyp(self, legalsurveytyp):
        """Sets the legalsurveytyp of this Wellbore.


        :param legalsurveytyp: The legalsurveytyp of this Wellbore.  # noqa: E501
        :type: str
        """

        self._legalsurveytyp = legalsurveytyp

    @property
    def loc_carters(self):
        """Gets the loc_carters of this Wellbore.  # noqa: E501


        :return: The loc_carters of this Wellbore.  # noqa: E501
        :rtype: list[LocCarter]
        """
        return self._loc_carters

    @loc_carters.setter
    def loc_carters(self, loc_carters):
        """Sets the loc_carters of this Wellbore.


        :param loc_carters: The loc_carters of this Wellbore.  # noqa: E501
        :type: list[LocCarter]
        """

        self._loc_carters = loc_carters

    @property
    def loc_congressionals(self):
        """Gets the loc_congressionals of this Wellbore.  # noqa: E501


        :return: The loc_congressionals of this Wellbore.  # noqa: E501
        :rtype: list[LocCongressional]
        """
        return self._loc_congressionals

    @loc_congressionals.setter
    def loc_congressionals(self, loc_congressionals):
        """Sets the loc_congressionals of this Wellbore.


        :param loc_congressionals: The loc_congressionals of this Wellbore.  # noqa: E501
        :type: list[LocCongressional]
        """

        self._loc_congressionals = loc_congressionals

    @property
    def loc_dls(self):
        """Gets the loc_dls of this Wellbore.  # noqa: E501


        :return: The loc_dls of this Wellbore.  # noqa: E501
        :rtype: list[LocDls]
        """
        return self._loc_dls

    @loc_dls.setter
    def loc_dls(self, loc_dls):
        """Sets the loc_dls of this Wellbore.


        :param loc_dls: The loc_dls of this Wellbore.  # noqa: E501
        :type: list[LocDls]
        """

        self._loc_dls = loc_dls

    @property
    def loc_fps(self):
        """Gets the loc_fps of this Wellbore.  # noqa: E501


        :return: The loc_fps of this Wellbore.  # noqa: E501
        :rtype: list[LocFps]
        """
        return self._loc_fps

    @loc_fps.setter
    def loc_fps(self, loc_fps):
        """Sets the loc_fps of this Wellbore.


        :param loc_fps: The loc_fps of this Wellbore.  # noqa: E501
        :type: list[LocFps]
        """

        self._loc_fps = loc_fps

    @property
    def loc_nes(self):
        """Gets the loc_nes of this Wellbore.  # noqa: E501


        :return: The loc_nes of this Wellbore.  # noqa: E501
        :rtype: list[LocNe]
        """
        return self._loc_nes

    @loc_nes.setter
    def loc_nes(self, loc_nes):
        """Sets the loc_nes of this Wellbore.


        :param loc_nes: The loc_nes of this Wellbore.  # noqa: E501
        :type: list[LocNe]
        """

        self._loc_nes = loc_nes

    @property
    def loc_north_seas(self):
        """Gets the loc_north_seas of this Wellbore.  # noqa: E501


        :return: The loc_north_seas of this Wellbore.  # noqa: E501
        :rtype: list[LocNorthSea]
        """
        return self._loc_north_seas

    @loc_north_seas.setter
    def loc_north_seas(self, loc_north_seas):
        """Sets the loc_north_seas of this Wellbore.


        :param loc_north_seas: The loc_north_seas of this Wellbore.  # noqa: E501
        :type: list[LocNorthSea]
        """

        self._loc_north_seas = loc_north_seas

    @property
    def loc_nts(self):
        """Gets the loc_nts of this Wellbore.  # noqa: E501


        :return: The loc_nts of this Wellbore.  # noqa: E501
        :rtype: list[LocNts]
        """
        return self._loc_nts

    @loc_nts.setter
    def loc_nts(self, loc_nts):
        """Sets the loc_nts of this Wellbore.


        :param loc_nts: The loc_nts of this Wellbore.  # noqa: E501
        :type: list[LocNts]
        """

        self._loc_nts = loc_nts

    @property
    def loc_offshores(self):
        """Gets the loc_offshores of this Wellbore.  # noqa: E501


        :return: The loc_offshores of this Wellbore.  # noqa: E501
        :rtype: list[LocOffshore]
        """
        return self._loc_offshores

    @loc_offshores.setter
    def loc_offshores(self, loc_offshores):
        """Sets the loc_offshores of this Wellbore.


        :param loc_offshores: The loc_offshores of this Wellbore.  # noqa: E501
        :type: list[LocOffshore]
        """

        self._loc_offshores = loc_offshores

    @property
    def loc_ohios(self):
        """Gets the loc_ohios of this Wellbore.  # noqa: E501


        :return: The loc_ohios of this Wellbore.  # noqa: E501
        :rtype: list[LocOhio]
        """
        return self._loc_ohios

    @loc_ohios.setter
    def loc_ohios(self, loc_ohios):
        """Sets the loc_ohios of this Wellbore.


        :param loc_ohios: The loc_ohios of this Wellbore.  # noqa: E501
        :type: list[LocOhio]
        """

        self._loc_ohios = loc_ohios

    @property
    def loc_texas(self):
        """Gets the loc_texas of this Wellbore.  # noqa: E501


        :return: The loc_texas of this Wellbore.  # noqa: E501
        :rtype: list[LocTexas]
        """
        return self._loc_texas

    @loc_texas.setter
    def loc_texas(self, loc_texas):
        """Sets the loc_texas of this Wellbore.


        :param loc_texas: The loc_texas of this Wellbore.  # noqa: E501
        :type: list[LocTexas]
        """

        self._loc_texas = loc_texas

    @property
    def locationnote(self):
        """Gets the locationnote of this Wellbore.  # noqa: E501


        :return: The locationnote of this Wellbore.  # noqa: E501
        :rtype: str
        """
        return self._locationnote

    @locationnote.setter
    def locationnote(self, locationnote):
        """Sets the locationnote of this Wellbore.


        :param locationnote: The locationnote of this Wellbore.  # noqa: E501
        :type: str
        """

        self._locationnote = locationnote

    @property
    def locationref(self):
        """Gets the locationref of this Wellbore.  # noqa: E501


        :return: The locationref of this Wellbore.  # noqa: E501
        :rtype: str
        """
        return self._locationref

    @locationref.setter
    def locationref(self, locationref):
        """Sets the locationref of this Wellbore.


        :param locationref: The locationref of this Wellbore.  # noqa: E501
        :type: str
        """

        self._locationref = locationref

    @property
    def longitude(self):
        """Gets the longitude of this Wellbore.  # noqa: E501


        :return: The longitude of this Wellbore.  # noqa: E501
        :rtype: OneOfWellboreLongitude
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this Wellbore.


        :param longitude: The longitude of this Wellbore.  # noqa: E501
        :type: OneOfWellboreLongitude
        """

        self._longitude = longitude

    @property
    def nsdist(self):
        """Gets the nsdist of this Wellbore.  # noqa: E501


        :return: The nsdist of this Wellbore.  # noqa: E501
        :rtype: OneOfWellboreNsdist
        """
        return self._nsdist

    @nsdist.setter
    def nsdist(self, nsdist):
        """Sets the nsdist of this Wellbore.


        :param nsdist: The nsdist of this Wellbore.  # noqa: E501
        :type: OneOfWellboreNsdist
        """

        self._nsdist = nsdist

    @property
    def nsflag(self):
        """Gets the nsflag of this Wellbore.  # noqa: E501


        :return: The nsflag of this Wellbore.  # noqa: E501
        :rtype: str
        """
        return self._nsflag

    @nsflag.setter
    def nsflag(self, nsflag):
        """Sets the nsflag of this Wellbore.


        :param nsflag: The nsflag of this Wellbore.  # noqa: E501
        :type: str
        """

        self._nsflag = nsflag

    @property
    def nsmaxcalc(self):
        """Gets the nsmaxcalc of this Wellbore.  # noqa: E501


        :return: The nsmaxcalc of this Wellbore.  # noqa: E501
        :rtype: OneOfWellboreNsmaxcalc
        """
        return self._nsmaxcalc

    @nsmaxcalc.setter
    def nsmaxcalc(self, nsmaxcalc):
        """Sets the nsmaxcalc of this Wellbore.


        :param nsmaxcalc: The nsmaxcalc of this Wellbore.  # noqa: E501
        :type: OneOfWellboreNsmaxcalc
        """

        self._nsmaxcalc = nsmaxcalc

    @property
    def nsmincalc(self):
        """Gets the nsmincalc of this Wellbore.  # noqa: E501


        :return: The nsmincalc of this Wellbore.  # noqa: E501
        :rtype: OneOfWellboreNsmincalc
        """
        return self._nsmincalc

    @nsmincalc.setter
    def nsmincalc(self, nsmincalc):
        """Sets the nsmincalc of this Wellbore.


        :param nsmincalc: The nsmincalc of this Wellbore.  # noqa: E501
        :type: OneOfWellboreNsmincalc
        """

        self._nsmincalc = nsmincalc

    @property
    def profiletyp(self):
        """Gets the profiletyp of this Wellbore.  # noqa: E501


        :return: The profiletyp of this Wellbore.  # noqa: E501
        :rtype: str
        """
        return self._profiletyp

    @profiletyp.setter
    def profiletyp(self, profiletyp):
        """Sets the profiletyp of this Wellbore.


        :param profiletyp: The profiletyp of this Wellbore.  # noqa: E501
        :type: str
        """

        self._profiletyp = profiletyp

    @property
    def purpose(self):
        """Gets the purpose of this Wellbore.  # noqa: E501


        :return: The purpose of this Wellbore.  # noqa: E501
        :rtype: str
        """
        return self._purpose

    @purpose.setter
    def purpose(self, purpose):
        """Sets the purpose of this Wellbore.


        :param purpose: The purpose of this Wellbore.  # noqa: E501
        :type: str
        """

        self._purpose = purpose

    @property
    def stateprov(self):
        """Gets the stateprov of this Wellbore.  # noqa: E501


        :return: The stateprov of this Wellbore.  # noqa: E501
        :rtype: str
        """
        return self._stateprov

    @stateprov.setter
    def stateprov(self, stateprov):
        """Sets the stateprov of this Wellbore.


        :param stateprov: The stateprov of this Wellbore.  # noqa: E501
        :type: str
        """

        self._stateprov = stateprov

    @property
    def syscreatedate(self):
        """Gets the syscreatedate of this Wellbore.  # noqa: E501


        :return: The syscreatedate of this Wellbore.  # noqa: E501
        :rtype: datetime
        """
        return self._syscreatedate

    @syscreatedate.setter
    def syscreatedate(self, syscreatedate):
        """Sets the syscreatedate of this Wellbore.


        :param syscreatedate: The syscreatedate of this Wellbore.  # noqa: E501
        :type: datetime
        """

        self._syscreatedate = syscreatedate

    @property
    def syscreateuser(self):
        """Gets the syscreateuser of this Wellbore.  # noqa: E501


        :return: The syscreateuser of this Wellbore.  # noqa: E501
        :rtype: str
        """
        return self._syscreateuser

    @syscreateuser.setter
    def syscreateuser(self, syscreateuser):
        """Sets the syscreateuser of this Wellbore.


        :param syscreateuser: The syscreateuser of this Wellbore.  # noqa: E501
        :type: str
        """

        self._syscreateuser = syscreateuser

    @property
    def syslockchildren(self):
        """Gets the syslockchildren of this Wellbore.  # noqa: E501


        :return: The syslockchildren of this Wellbore.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildren

    @syslockchildren.setter
    def syslockchildren(self, syslockchildren):
        """Sets the syslockchildren of this Wellbore.


        :param syslockchildren: The syslockchildren of this Wellbore.  # noqa: E501
        :type: int
        """

        self._syslockchildren = syslockchildren

    @property
    def syslockchildrenui(self):
        """Gets the syslockchildrenui of this Wellbore.  # noqa: E501


        :return: The syslockchildrenui of this Wellbore.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildrenui

    @syslockchildrenui.setter
    def syslockchildrenui(self, syslockchildrenui):
        """Sets the syslockchildrenui of this Wellbore.


        :param syslockchildrenui: The syslockchildrenui of this Wellbore.  # noqa: E501
        :type: int
        """

        self._syslockchildrenui = syslockchildrenui

    @property
    def syslockdate(self):
        """Gets the syslockdate of this Wellbore.  # noqa: E501


        :return: The syslockdate of this Wellbore.  # noqa: E501
        :rtype: datetime
        """
        return self._syslockdate

    @syslockdate.setter
    def syslockdate(self, syslockdate):
        """Sets the syslockdate of this Wellbore.


        :param syslockdate: The syslockdate of this Wellbore.  # noqa: E501
        :type: datetime
        """

        self._syslockdate = syslockdate

    @property
    def syslockme(self):
        """Gets the syslockme of this Wellbore.  # noqa: E501


        :return: The syslockme of this Wellbore.  # noqa: E501
        :rtype: int
        """
        return self._syslockme

    @syslockme.setter
    def syslockme(self, syslockme):
        """Sets the syslockme of this Wellbore.


        :param syslockme: The syslockme of this Wellbore.  # noqa: E501
        :type: int
        """

        self._syslockme = syslockme

    @property
    def syslockmeui(self):
        """Gets the syslockmeui of this Wellbore.  # noqa: E501


        :return: The syslockmeui of this Wellbore.  # noqa: E501
        :rtype: int
        """
        return self._syslockmeui

    @syslockmeui.setter
    def syslockmeui(self, syslockmeui):
        """Sets the syslockmeui of this Wellbore.


        :param syslockmeui: The syslockmeui of this Wellbore.  # noqa: E501
        :type: int
        """

        self._syslockmeui = syslockmeui

    @property
    def sysmoddate(self):
        """Gets the sysmoddate of this Wellbore.  # noqa: E501


        :return: The sysmoddate of this Wellbore.  # noqa: E501
        :rtype: datetime
        """
        return self._sysmoddate

    @sysmoddate.setter
    def sysmoddate(self, sysmoddate):
        """Sets the sysmoddate of this Wellbore.


        :param sysmoddate: The sysmoddate of this Wellbore.  # noqa: E501
        :type: datetime
        """

        self._sysmoddate = sysmoddate

    @property
    def sysmoduser(self):
        """Gets the sysmoduser of this Wellbore.  # noqa: E501


        :return: The sysmoduser of this Wellbore.  # noqa: E501
        :rtype: str
        """
        return self._sysmoduser

    @sysmoduser.setter
    def sysmoduser(self, sysmoduser):
        """Sets the sysmoduser of this Wellbore.


        :param sysmoduser: The sysmoduser of this Wellbore.  # noqa: E501
        :type: str
        """

        self._sysmoduser = sysmoduser

    @property
    def sysseq(self):
        """Gets the sysseq of this Wellbore.  # noqa: E501


        :return: The sysseq of this Wellbore.  # noqa: E501
        :rtype: int
        """
        return self._sysseq

    @sysseq.setter
    def sysseq(self, sysseq):
        """Sets the sysseq of this Wellbore.


        :param sysseq: The sysseq of this Wellbore.  # noqa: E501
        :type: int
        """

        self._sysseq = sysseq

    @property
    def systag(self):
        """Gets the systag of this Wellbore.  # noqa: E501


        :return: The systag of this Wellbore.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this Wellbore.


        :param systag: The systag of this Wellbore.  # noqa: E501
        :type: str
        """

        self._systag = systag

    @property
    def totaldepthcalc(self):
        """Gets the totaldepthcalc of this Wellbore.  # noqa: E501


        :return: The totaldepthcalc of this Wellbore.  # noqa: E501
        :rtype: OneOfWellboreTotaldepthcalc
        """
        return self._totaldepthcalc

    @totaldepthcalc.setter
    def totaldepthcalc(self, totaldepthcalc):
        """Sets the totaldepthcalc of this Wellbore.


        :param totaldepthcalc: The totaldepthcalc of this Wellbore.  # noqa: E501
        :type: OneOfWellboreTotaldepthcalc
        """

        self._totaldepthcalc = totaldepthcalc

    @property
    def totaldepthtvdcalc(self):
        """Gets the totaldepthtvdcalc of this Wellbore.  # noqa: E501


        :return: The totaldepthtvdcalc of this Wellbore.  # noqa: E501
        :rtype: OneOfWellboreTotaldepthtvdcalc
        """
        return self._totaldepthtvdcalc

    @totaldepthtvdcalc.setter
    def totaldepthtvdcalc(self, totaldepthtvdcalc):
        """Sets the totaldepthtvdcalc of this Wellbore.


        :param totaldepthtvdcalc: The totaldepthtvdcalc of this Wellbore.  # noqa: E501
        :type: OneOfWellboreTotaldepthtvdcalc
        """

        self._totaldepthtvdcalc = totaldepthtvdcalc

    @property
    def towndist(self):
        """Gets the towndist of this Wellbore.  # noqa: E501


        :return: The towndist of this Wellbore.  # noqa: E501
        :rtype: OneOfWellboreTowndist
        """
        return self._towndist

    @towndist.setter
    def towndist(self, towndist):
        """Sets the towndist of this Wellbore.


        :param towndist: The towndist of this Wellbore.  # noqa: E501
        :type: OneOfWellboreTowndist
        """

        self._towndist = towndist

    @property
    def townflag(self):
        """Gets the townflag of this Wellbore.  # noqa: E501


        :return: The townflag of this Wellbore.  # noqa: E501
        :rtype: str
        """
        return self._townflag

    @townflag.setter
    def townflag(self, townflag):
        """Sets the townflag of this Wellbore.


        :param townflag: The townflag of this Wellbore.  # noqa: E501
        :type: str
        """

        self._townflag = townflag

    @property
    def townname(self):
        """Gets the townname of this Wellbore.  # noqa: E501


        :return: The townname of this Wellbore.  # noqa: E501
        :rtype: str
        """
        return self._townname

    @townname.setter
    def townname(self, townname):
        """Sets the townname of this Wellbore.


        :param townname: The townname of this Wellbore.  # noqa: E501
        :type: str
        """

        self._townname = townname

    @property
    def townstateprov(self):
        """Gets the townstateprov of this Wellbore.  # noqa: E501


        :return: The townstateprov of this Wellbore.  # noqa: E501
        :rtype: str
        """
        return self._townstateprov

    @townstateprov.setter
    def townstateprov(self, townstateprov):
        """Sets the townstateprov of this Wellbore.


        :param townstateprov: The townstateprov of this Wellbore.  # noqa: E501
        :type: str
        """

        self._townstateprov = townstateprov

    @property
    def tvdmaxcalc(self):
        """Gets the tvdmaxcalc of this Wellbore.  # noqa: E501


        :return: The tvdmaxcalc of this Wellbore.  # noqa: E501
        :rtype: OneOfWellboreTvdmaxcalc
        """
        return self._tvdmaxcalc

    @tvdmaxcalc.setter
    def tvdmaxcalc(self, tvdmaxcalc):
        """Sets the tvdmaxcalc of this Wellbore.


        :param tvdmaxcalc: The tvdmaxcalc of this Wellbore.  # noqa: E501
        :type: OneOfWellboreTvdmaxcalc
        """

        self._tvdmaxcalc = tvdmaxcalc

    @property
    def tvdmincalc(self):
        """Gets the tvdmincalc of this Wellbore.  # noqa: E501


        :return: The tvdmincalc of this Wellbore.  # noqa: E501
        :rtype: OneOfWellboreTvdmincalc
        """
        return self._tvdmincalc

    @tvdmincalc.setter
    def tvdmincalc(self, tvdmincalc):
        """Sets the tvdmincalc of this Wellbore.


        :param tvdmincalc: The tvdmincalc of this Wellbore.  # noqa: E501
        :type: OneOfWellboreTvdmincalc
        """

        self._tvdmincalc = tvdmincalc

    @property
    def usernum1(self):
        """Gets the usernum1 of this Wellbore.  # noqa: E501


        :return: The usernum1 of this Wellbore.  # noqa: E501
        :rtype: OneOfWellboreUsernum1
        """
        return self._usernum1

    @usernum1.setter
    def usernum1(self, usernum1):
        """Sets the usernum1 of this Wellbore.


        :param usernum1: The usernum1 of this Wellbore.  # noqa: E501
        :type: OneOfWellboreUsernum1
        """

        self._usernum1 = usernum1

    @property
    def usernum2(self):
        """Gets the usernum2 of this Wellbore.  # noqa: E501


        :return: The usernum2 of this Wellbore.  # noqa: E501
        :rtype: OneOfWellboreUsernum2
        """
        return self._usernum2

    @usernum2.setter
    def usernum2(self, usernum2):
        """Sets the usernum2 of this Wellbore.


        :param usernum2: The usernum2 of this Wellbore.  # noqa: E501
        :type: OneOfWellboreUsernum2
        """

        self._usernum2 = usernum2

    @property
    def usernum3(self):
        """Gets the usernum3 of this Wellbore.  # noqa: E501


        :return: The usernum3 of this Wellbore.  # noqa: E501
        :rtype: OneOfWellboreUsernum3
        """
        return self._usernum3

    @usernum3.setter
    def usernum3(self, usernum3):
        """Sets the usernum3 of this Wellbore.


        :param usernum3: The usernum3 of this Wellbore.  # noqa: E501
        :type: OneOfWellboreUsernum3
        """

        self._usernum3 = usernum3

    @property
    def usertxt1(self):
        """Gets the usertxt1 of this Wellbore.  # noqa: E501


        :return: The usertxt1 of this Wellbore.  # noqa: E501
        :rtype: str
        """
        return self._usertxt1

    @usertxt1.setter
    def usertxt1(self, usertxt1):
        """Sets the usertxt1 of this Wellbore.


        :param usertxt1: The usertxt1 of this Wellbore.  # noqa: E501
        :type: str
        """

        self._usertxt1 = usertxt1

    @property
    def usertxt2(self):
        """Gets the usertxt2 of this Wellbore.  # noqa: E501


        :return: The usertxt2 of this Wellbore.  # noqa: E501
        :rtype: str
        """
        return self._usertxt2

    @usertxt2.setter
    def usertxt2(self, usertxt2):
        """Sets the usertxt2 of this Wellbore.


        :param usertxt2: The usertxt2 of this Wellbore.  # noqa: E501
        :type: str
        """

        self._usertxt2 = usertxt2

    @property
    def usertxt3(self):
        """Gets the usertxt3 of this Wellbore.  # noqa: E501


        :return: The usertxt3 of this Wellbore.  # noqa: E501
        :rtype: str
        """
        return self._usertxt3

    @usertxt3.setter
    def usertxt3(self, usertxt3):
        """Sets the usertxt3 of this Wellbore.


        :param usertxt3: The usertxt3 of this Wellbore.  # noqa: E501
        :type: str
        """

        self._usertxt3 = usertxt3

    @property
    def utmgridzone(self):
        """Gets the utmgridzone of this Wellbore.  # noqa: E501


        :return: The utmgridzone of this Wellbore.  # noqa: E501
        :rtype: int
        """
        return self._utmgridzone

    @utmgridzone.setter
    def utmgridzone(self, utmgridzone):
        """Sets the utmgridzone of this Wellbore.


        :param utmgridzone: The utmgridzone of this Wellbore.  # noqa: E501
        :type: int
        """

        self._utmgridzone = utmgridzone

    @property
    def utmsource(self):
        """Gets the utmsource of this Wellbore.  # noqa: E501


        :return: The utmsource of this Wellbore.  # noqa: E501
        :rtype: str
        """
        return self._utmsource

    @utmsource.setter
    def utmsource(self, utmsource):
        """Sets the utmsource of this Wellbore.


        :param utmsource: The utmsource of this Wellbore.  # noqa: E501
        :type: str
        """

        self._utmsource = utmsource

    @property
    def utmx(self):
        """Gets the utmx of this Wellbore.  # noqa: E501


        :return: The utmx of this Wellbore.  # noqa: E501
        :rtype: OneOfWellboreUtmx
        """
        return self._utmx

    @utmx.setter
    def utmx(self, utmx):
        """Sets the utmx of this Wellbore.


        :param utmx: The utmx of this Wellbore.  # noqa: E501
        :type: OneOfWellboreUtmx
        """

        self._utmx = utmx

    @property
    def utmy(self):
        """Gets the utmy of this Wellbore.  # noqa: E501


        :return: The utmy of this Wellbore.  # noqa: E501
        :rtype: OneOfWellboreUtmy
        """
        return self._utmy

    @utmy.setter
    def utmy(self, utmy):
        """Sets the utmy of this Wellbore.


        :param utmy: The utmy of this Wellbore.  # noqa: E501
        :type: OneOfWellboreUtmy
        """

        self._utmy = utmy

    @property
    def vsdir(self):
        """Gets the vsdir of this Wellbore.  # noqa: E501


        :return: The vsdir of this Wellbore.  # noqa: E501
        :rtype: OneOfWellboreVsdir
        """
        return self._vsdir

    @vsdir.setter
    def vsdir(self, vsdir):
        """Sets the vsdir of this Wellbore.


        :param vsdir: The vsdir of this Wellbore.  # noqa: E501
        :type: OneOfWellboreVsdir
        """

        self._vsdir = vsdir

    @property
    def vsoriginew(self):
        """Gets the vsoriginew of this Wellbore.  # noqa: E501


        :return: The vsoriginew of this Wellbore.  # noqa: E501
        :rtype: OneOfWellboreVsoriginew
        """
        return self._vsoriginew

    @vsoriginew.setter
    def vsoriginew(self, vsoriginew):
        """Sets the vsoriginew of this Wellbore.


        :param vsoriginew: The vsoriginew of this Wellbore.  # noqa: E501
        :type: OneOfWellboreVsoriginew
        """

        self._vsoriginew = vsoriginew

    @property
    def vsoriginns(self):
        """Gets the vsoriginns of this Wellbore.  # noqa: E501


        :return: The vsoriginns of this Wellbore.  # noqa: E501
        :rtype: OneOfWellboreVsoriginns
        """
        return self._vsoriginns

    @vsoriginns.setter
    def vsoriginns(self, vsoriginns):
        """Sets the vsoriginns of this Wellbore.


        :param vsoriginns: The vsoriginns of this Wellbore.  # noqa: E501
        :type: OneOfWellboreVsoriginns
        """

        self._vsoriginns = vsoriginns

    @property
    def vsplotmaxcalc(self):
        """Gets the vsplotmaxcalc of this Wellbore.  # noqa: E501


        :return: The vsplotmaxcalc of this Wellbore.  # noqa: E501
        :rtype: OneOfWellboreVsplotmaxcalc
        """
        return self._vsplotmaxcalc

    @vsplotmaxcalc.setter
    def vsplotmaxcalc(self, vsplotmaxcalc):
        """Sets the vsplotmaxcalc of this Wellbore.


        :param vsplotmaxcalc: The vsplotmaxcalc of this Wellbore.  # noqa: E501
        :type: OneOfWellboreVsplotmaxcalc
        """

        self._vsplotmaxcalc = vsplotmaxcalc

    @property
    def vsplotmincalc(self):
        """Gets the vsplotmincalc of this Wellbore.  # noqa: E501


        :return: The vsplotmincalc of this Wellbore.  # noqa: E501
        :rtype: OneOfWellboreVsplotmincalc
        """
        return self._vsplotmincalc

    @vsplotmincalc.setter
    def vsplotmincalc(self, vsplotmincalc):
        """Sets the vsplotmincalc of this Wellbore.


        :param vsplotmincalc: The vsplotmincalc of this Wellbore.  # noqa: E501
        :type: OneOfWellboreVsplotmincalc
        """

        self._vsplotmincalc = vsplotmincalc

    @property
    def wellbore_aliases(self):
        """Gets the wellbore_aliases of this Wellbore.  # noqa: E501


        :return: The wellbore_aliases of this Wellbore.  # noqa: E501
        :rtype: list[WellboreAlias]
        """
        return self._wellbore_aliases

    @wellbore_aliases.setter
    def wellbore_aliases(self, wellbore_aliases):
        """Sets the wellbore_aliases of this Wellbore.


        :param wellbore_aliases: The wellbore_aliases of this Wellbore.  # noqa: E501
        :type: list[WellboreAlias]
        """

        self._wellbore_aliases = wellbore_aliases

    @property
    def wellbore_dir_surveys(self):
        """Gets the wellbore_dir_surveys of this Wellbore.  # noqa: E501


        :return: The wellbore_dir_surveys of this Wellbore.  # noqa: E501
        :rtype: list[WellboreDirSurvey]
        """
        return self._wellbore_dir_surveys

    @wellbore_dir_surveys.setter
    def wellbore_dir_surveys(self, wellbore_dir_surveys):
        """Sets the wellbore_dir_surveys of this Wellbore.


        :param wellbore_dir_surveys: The wellbore_dir_surveys of this Wellbore.  # noqa: E501
        :type: list[WellboreDirSurvey]
        """

        self._wellbore_dir_surveys = wellbore_dir_surveys

    @property
    def wellbore_formations(self):
        """Gets the wellbore_formations of this Wellbore.  # noqa: E501


        :return: The wellbore_formations of this Wellbore.  # noqa: E501
        :rtype: list[WellboreFormation]
        """
        return self._wellbore_formations

    @wellbore_formations.setter
    def wellbore_formations(self, wellbore_formations):
        """Sets the wellbore_formations of this Wellbore.


        :param wellbore_formations: The wellbore_formations of this Wellbore.  # noqa: E501
        :type: list[WellboreFormation]
        """

        self._wellbore_formations = wellbore_formations

    @property
    def wellbore_key_depths(self):
        """Gets the wellbore_key_depths of this Wellbore.  # noqa: E501


        :return: The wellbore_key_depths of this Wellbore.  # noqa: E501
        :rtype: list[WellboreKeyDepth]
        """
        return self._wellbore_key_depths

    @wellbore_key_depths.setter
    def wellbore_key_depths(self, wellbore_key_depths):
        """Sets the wellbore_key_depths of this Wellbore.


        :param wellbore_key_depths: The wellbore_key_depths of this Wellbore.  # noqa: E501
        :type: list[WellboreKeyDepth]
        """

        self._wellbore_key_depths = wellbore_key_depths

    @property
    def wellbore_others(self):
        """Gets the wellbore_others of this Wellbore.  # noqa: E501


        :return: The wellbore_others of this Wellbore.  # noqa: E501
        :rtype: list[WellboreOther]
        """
        return self._wellbore_others

    @wellbore_others.setter
    def wellbore_others(self, wellbore_others):
        """Sets the wellbore_others of this Wellbore.


        :param wellbore_others: The wellbore_others of this Wellbore.  # noqa: E501
        :type: list[WellboreOther]
        """

        self._wellbore_others = wellbore_others

    @property
    def wellbore_pbtds(self):
        """Gets the wellbore_pbtds of this Wellbore.  # noqa: E501


        :return: The wellbore_pbtds of this Wellbore.  # noqa: E501
        :rtype: list[WellborePbtd]
        """
        return self._wellbore_pbtds

    @wellbore_pbtds.setter
    def wellbore_pbtds(self, wellbore_pbtds):
        """Sets the wellbore_pbtds of this Wellbore.


        :param wellbore_pbtds: The wellbore_pbtds of this Wellbore.  # noqa: E501
        :type: list[WellborePbtd]
        """

        self._wellbore_pbtds = wellbore_pbtds

    @property
    def wellbore_reservoirs(self):
        """Gets the wellbore_reservoirs of this Wellbore.  # noqa: E501


        :return: The wellbore_reservoirs of this Wellbore.  # noqa: E501
        :rtype: list[WellboreReservoir]
        """
        return self._wellbore_reservoirs

    @wellbore_reservoirs.setter
    def wellbore_reservoirs(self, wellbore_reservoirs):
        """Sets the wellbore_reservoirs of this Wellbore.


        :param wellbore_reservoirs: The wellbore_reservoirs of this Wellbore.  # noqa: E501
        :type: list[WellboreReservoir]
        """

        self._wellbore_reservoirs = wellbore_reservoirs

    @property
    def wellbore_sizes(self):
        """Gets the wellbore_sizes of this Wellbore.  # noqa: E501


        :return: The wellbore_sizes of this Wellbore.  # noqa: E501
        :rtype: list[WellboreSize]
        """
        return self._wellbore_sizes

    @wellbore_sizes.setter
    def wellbore_sizes(self, wellbore_sizes):
        """Sets the wellbore_sizes of this Wellbore.


        :param wellbore_sizes: The wellbore_sizes of this Wellbore.  # noqa: E501
        :type: list[WellboreSize]
        """

        self._wellbore_sizes = wellbore_sizes

    @property
    def wellbore_statuses(self):
        """Gets the wellbore_statuses of this Wellbore.  # noqa: E501


        :return: The wellbore_statuses of this Wellbore.  # noqa: E501
        :rtype: list[WellboreStatus]
        """
        return self._wellbore_statuses

    @wellbore_statuses.setter
    def wellbore_statuses(self, wellbore_statuses):
        """Sets the wellbore_statuses of this Wellbore.


        :param wellbore_statuses: The wellbore_statuses of this Wellbore.  # noqa: E501
        :type: list[WellboreStatus]
        """

        self._wellbore_statuses = wellbore_statuses

    @property
    def wellboreida(self):
        """Gets the wellboreida of this Wellbore.  # noqa: E501


        :return: The wellboreida of this Wellbore.  # noqa: E501
        :rtype: str
        """
        return self._wellboreida

    @wellboreida.setter
    def wellboreida(self, wellboreida):
        """Sets the wellboreida of this Wellbore.


        :param wellboreida: The wellboreida of this Wellbore.  # noqa: E501
        :type: str
        """

        self._wellboreida = wellboreida

    @property
    def wellboreidb(self):
        """Gets the wellboreidb of this Wellbore.  # noqa: E501


        :return: The wellboreidb of this Wellbore.  # noqa: E501
        :rtype: str
        """
        return self._wellboreidb

    @wellboreidb.setter
    def wellboreidb(self, wellboreidb):
        """Sets the wellboreidb of this Wellbore.


        :param wellboreidb: The wellboreidb of this Wellbore.  # noqa: E501
        :type: str
        """

        self._wellboreidb = wellboreidb

    @property
    def wellboreidc(self):
        """Gets the wellboreidc of this Wellbore.  # noqa: E501


        :return: The wellboreidc of this Wellbore.  # noqa: E501
        :rtype: str
        """
        return self._wellboreidc

    @wellboreidc.setter
    def wellboreidc(self, wellboreidc):
        """Sets the wellboreidc of this Wellbore.


        :param wellboreidc: The wellboreidc of this Wellbore.  # noqa: E501
        :type: str
        """

        self._wellboreidc = wellboreidc

    @property
    def wellboreidd(self):
        """Gets the wellboreidd of this Wellbore.  # noqa: E501


        :return: The wellboreidd of this Wellbore.  # noqa: E501
        :rtype: str
        """
        return self._wellboreidd

    @wellboreidd.setter
    def wellboreidd(self, wellboreidd):
        """Sets the wellboreidd of this Wellbore.


        :param wellboreidd: The wellboreidd of this Wellbore.  # noqa: E501
        :type: str
        """

        self._wellboreidd = wellboreidd

    @property
    def wellboreide(self):
        """Gets the wellboreide of this Wellbore.  # noqa: E501


        :return: The wellboreide of this Wellbore.  # noqa: E501
        :rtype: str
        """
        return self._wellboreide

    @wellboreide.setter
    def wellboreide(self, wellboreide):
        """Sets the wellboreide of this Wellbore.


        :param wellboreide: The wellboreide of this Wellbore.  # noqa: E501
        :type: str
        """

        self._wellboreide = wellboreide

    @property
    def wellheader(self):
        """Gets the wellheader of this Wellbore.  # noqa: E501


        :return: The wellheader of this Wellbore.  # noqa: E501
        :rtype: AnyOfWellboreWellheader
        """
        return self._wellheader

    @wellheader.setter
    def wellheader(self, wellheader):
        """Sets the wellheader of this Wellbore.


        :param wellheader: The wellheader of this Wellbore.  # noqa: E501
        :type: AnyOfWellboreWellheader
        """

        self._wellheader = wellheader

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Wellbore, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Wellbore):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
