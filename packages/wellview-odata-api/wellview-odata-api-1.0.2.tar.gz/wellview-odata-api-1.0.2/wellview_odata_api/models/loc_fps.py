# coding: utf-8

"""
    OData Service for namespace Default

    This OData service is located at http://localhost  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LocFps(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'eventseq': 'int',
        'grid': 'str',
        'idrec': 'str',
        'idrecparent': 'str',
        'idwell': 'str',
        'latituderef': 'OneOfLocFpsLatituderef',
        'locexcept': 'str',
        'longituderef': 'OneOfLocFpsLongituderef',
        'note': 'str',
        'section': 'int',
        'source': 'str',
        'syscreatedate': 'datetime',
        'syscreateuser': 'str',
        'syslockchildren': 'int',
        'syslockchildrenui': 'int',
        'syslockdate': 'datetime',
        'syslockme': 'int',
        'syslockmeui': 'int',
        'sysmoddate': 'datetime',
        'sysmoduser': 'str',
        'systag': 'str',
        'tblkeyparent': 'str',
        'unit': 'str',
        'wellbore': 'AnyOfLocFpsWellbore'
    }

    attribute_map = {
        'eventseq': 'eventseq',
        'grid': 'grid',
        'idrec': 'idrec',
        'idrecparent': 'idrecparent',
        'idwell': 'idwell',
        'latituderef': 'latituderef',
        'locexcept': 'locexcept',
        'longituderef': 'longituderef',
        'note': 'note',
        'section': 'section',
        'source': 'source',
        'syscreatedate': 'syscreatedate',
        'syscreateuser': 'syscreateuser',
        'syslockchildren': 'syslockchildren',
        'syslockchildrenui': 'syslockchildrenui',
        'syslockdate': 'syslockdate',
        'syslockme': 'syslockme',
        'syslockmeui': 'syslockmeui',
        'sysmoddate': 'sysmoddate',
        'sysmoduser': 'sysmoduser',
        'systag': 'systag',
        'tblkeyparent': 'tblkeyparent',
        'unit': 'unit',
        'wellbore': 'wellbore'
    }

    def __init__(self, eventseq=None, grid=None, idrec=None, idrecparent=None, idwell=None, latituderef=None, locexcept=None, longituderef=None, note=None, section=None, source=None, syscreatedate=None, syscreateuser=None, syslockchildren=None, syslockchildrenui=None, syslockdate=None, syslockme=None, syslockmeui=None, sysmoddate=None, sysmoduser=None, systag=None, tblkeyparent=None, unit=None, wellbore=None):  # noqa: E501
        """LocFps - a model defined in Swagger"""  # noqa: E501
        self._eventseq = None
        self._grid = None
        self._idrec = None
        self._idrecparent = None
        self._idwell = None
        self._latituderef = None
        self._locexcept = None
        self._longituderef = None
        self._note = None
        self._section = None
        self._source = None
        self._syscreatedate = None
        self._syscreateuser = None
        self._syslockchildren = None
        self._syslockchildrenui = None
        self._syslockdate = None
        self._syslockme = None
        self._syslockmeui = None
        self._sysmoddate = None
        self._sysmoduser = None
        self._systag = None
        self._tblkeyparent = None
        self._unit = None
        self._wellbore = None
        self.discriminator = None
        if eventseq is not None:
            self.eventseq = eventseq
        if grid is not None:
            self.grid = grid
        if idrec is not None:
            self.idrec = idrec
        if idrecparent is not None:
            self.idrecparent = idrecparent
        if idwell is not None:
            self.idwell = idwell
        if latituderef is not None:
            self.latituderef = latituderef
        if locexcept is not None:
            self.locexcept = locexcept
        if longituderef is not None:
            self.longituderef = longituderef
        if note is not None:
            self.note = note
        if section is not None:
            self.section = section
        if source is not None:
            self.source = source
        if syscreatedate is not None:
            self.syscreatedate = syscreatedate
        if syscreateuser is not None:
            self.syscreateuser = syscreateuser
        if syslockchildren is not None:
            self.syslockchildren = syslockchildren
        if syslockchildrenui is not None:
            self.syslockchildrenui = syslockchildrenui
        if syslockdate is not None:
            self.syslockdate = syslockdate
        if syslockme is not None:
            self.syslockme = syslockme
        if syslockmeui is not None:
            self.syslockmeui = syslockmeui
        if sysmoddate is not None:
            self.sysmoddate = sysmoddate
        if sysmoduser is not None:
            self.sysmoduser = sysmoduser
        if systag is not None:
            self.systag = systag
        if tblkeyparent is not None:
            self.tblkeyparent = tblkeyparent
        if unit is not None:
            self.unit = unit
        if wellbore is not None:
            self.wellbore = wellbore

    @property
    def eventseq(self):
        """Gets the eventseq of this LocFps.  # noqa: E501


        :return: The eventseq of this LocFps.  # noqa: E501
        :rtype: int
        """
        return self._eventseq

    @eventseq.setter
    def eventseq(self, eventseq):
        """Sets the eventseq of this LocFps.


        :param eventseq: The eventseq of this LocFps.  # noqa: E501
        :type: int
        """

        self._eventseq = eventseq

    @property
    def grid(self):
        """Gets the grid of this LocFps.  # noqa: E501


        :return: The grid of this LocFps.  # noqa: E501
        :rtype: str
        """
        return self._grid

    @grid.setter
    def grid(self, grid):
        """Sets the grid of this LocFps.


        :param grid: The grid of this LocFps.  # noqa: E501
        :type: str
        """

        self._grid = grid

    @property
    def idrec(self):
        """Gets the idrec of this LocFps.  # noqa: E501


        :return: The idrec of this LocFps.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this LocFps.


        :param idrec: The idrec of this LocFps.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecparent(self):
        """Gets the idrecparent of this LocFps.  # noqa: E501


        :return: The idrecparent of this LocFps.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this LocFps.


        :param idrecparent: The idrecparent of this LocFps.  # noqa: E501
        :type: str
        """

        self._idrecparent = idrecparent

    @property
    def idwell(self):
        """Gets the idwell of this LocFps.  # noqa: E501


        :return: The idwell of this LocFps.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this LocFps.


        :param idwell: The idwell of this LocFps.  # noqa: E501
        :type: str
        """

        self._idwell = idwell

    @property
    def latituderef(self):
        """Gets the latituderef of this LocFps.  # noqa: E501


        :return: The latituderef of this LocFps.  # noqa: E501
        :rtype: OneOfLocFpsLatituderef
        """
        return self._latituderef

    @latituderef.setter
    def latituderef(self, latituderef):
        """Sets the latituderef of this LocFps.


        :param latituderef: The latituderef of this LocFps.  # noqa: E501
        :type: OneOfLocFpsLatituderef
        """

        self._latituderef = latituderef

    @property
    def locexcept(self):
        """Gets the locexcept of this LocFps.  # noqa: E501


        :return: The locexcept of this LocFps.  # noqa: E501
        :rtype: str
        """
        return self._locexcept

    @locexcept.setter
    def locexcept(self, locexcept):
        """Sets the locexcept of this LocFps.


        :param locexcept: The locexcept of this LocFps.  # noqa: E501
        :type: str
        """

        self._locexcept = locexcept

    @property
    def longituderef(self):
        """Gets the longituderef of this LocFps.  # noqa: E501


        :return: The longituderef of this LocFps.  # noqa: E501
        :rtype: OneOfLocFpsLongituderef
        """
        return self._longituderef

    @longituderef.setter
    def longituderef(self, longituderef):
        """Sets the longituderef of this LocFps.


        :param longituderef: The longituderef of this LocFps.  # noqa: E501
        :type: OneOfLocFpsLongituderef
        """

        self._longituderef = longituderef

    @property
    def note(self):
        """Gets the note of this LocFps.  # noqa: E501


        :return: The note of this LocFps.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this LocFps.


        :param note: The note of this LocFps.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def section(self):
        """Gets the section of this LocFps.  # noqa: E501


        :return: The section of this LocFps.  # noqa: E501
        :rtype: int
        """
        return self._section

    @section.setter
    def section(self, section):
        """Sets the section of this LocFps.


        :param section: The section of this LocFps.  # noqa: E501
        :type: int
        """

        self._section = section

    @property
    def source(self):
        """Gets the source of this LocFps.  # noqa: E501


        :return: The source of this LocFps.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this LocFps.


        :param source: The source of this LocFps.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def syscreatedate(self):
        """Gets the syscreatedate of this LocFps.  # noqa: E501


        :return: The syscreatedate of this LocFps.  # noqa: E501
        :rtype: datetime
        """
        return self._syscreatedate

    @syscreatedate.setter
    def syscreatedate(self, syscreatedate):
        """Sets the syscreatedate of this LocFps.


        :param syscreatedate: The syscreatedate of this LocFps.  # noqa: E501
        :type: datetime
        """

        self._syscreatedate = syscreatedate

    @property
    def syscreateuser(self):
        """Gets the syscreateuser of this LocFps.  # noqa: E501


        :return: The syscreateuser of this LocFps.  # noqa: E501
        :rtype: str
        """
        return self._syscreateuser

    @syscreateuser.setter
    def syscreateuser(self, syscreateuser):
        """Sets the syscreateuser of this LocFps.


        :param syscreateuser: The syscreateuser of this LocFps.  # noqa: E501
        :type: str
        """

        self._syscreateuser = syscreateuser

    @property
    def syslockchildren(self):
        """Gets the syslockchildren of this LocFps.  # noqa: E501


        :return: The syslockchildren of this LocFps.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildren

    @syslockchildren.setter
    def syslockchildren(self, syslockchildren):
        """Sets the syslockchildren of this LocFps.


        :param syslockchildren: The syslockchildren of this LocFps.  # noqa: E501
        :type: int
        """

        self._syslockchildren = syslockchildren

    @property
    def syslockchildrenui(self):
        """Gets the syslockchildrenui of this LocFps.  # noqa: E501


        :return: The syslockchildrenui of this LocFps.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildrenui

    @syslockchildrenui.setter
    def syslockchildrenui(self, syslockchildrenui):
        """Sets the syslockchildrenui of this LocFps.


        :param syslockchildrenui: The syslockchildrenui of this LocFps.  # noqa: E501
        :type: int
        """

        self._syslockchildrenui = syslockchildrenui

    @property
    def syslockdate(self):
        """Gets the syslockdate of this LocFps.  # noqa: E501


        :return: The syslockdate of this LocFps.  # noqa: E501
        :rtype: datetime
        """
        return self._syslockdate

    @syslockdate.setter
    def syslockdate(self, syslockdate):
        """Sets the syslockdate of this LocFps.


        :param syslockdate: The syslockdate of this LocFps.  # noqa: E501
        :type: datetime
        """

        self._syslockdate = syslockdate

    @property
    def syslockme(self):
        """Gets the syslockme of this LocFps.  # noqa: E501


        :return: The syslockme of this LocFps.  # noqa: E501
        :rtype: int
        """
        return self._syslockme

    @syslockme.setter
    def syslockme(self, syslockme):
        """Sets the syslockme of this LocFps.


        :param syslockme: The syslockme of this LocFps.  # noqa: E501
        :type: int
        """

        self._syslockme = syslockme

    @property
    def syslockmeui(self):
        """Gets the syslockmeui of this LocFps.  # noqa: E501


        :return: The syslockmeui of this LocFps.  # noqa: E501
        :rtype: int
        """
        return self._syslockmeui

    @syslockmeui.setter
    def syslockmeui(self, syslockmeui):
        """Sets the syslockmeui of this LocFps.


        :param syslockmeui: The syslockmeui of this LocFps.  # noqa: E501
        :type: int
        """

        self._syslockmeui = syslockmeui

    @property
    def sysmoddate(self):
        """Gets the sysmoddate of this LocFps.  # noqa: E501


        :return: The sysmoddate of this LocFps.  # noqa: E501
        :rtype: datetime
        """
        return self._sysmoddate

    @sysmoddate.setter
    def sysmoddate(self, sysmoddate):
        """Sets the sysmoddate of this LocFps.


        :param sysmoddate: The sysmoddate of this LocFps.  # noqa: E501
        :type: datetime
        """

        self._sysmoddate = sysmoddate

    @property
    def sysmoduser(self):
        """Gets the sysmoduser of this LocFps.  # noqa: E501


        :return: The sysmoduser of this LocFps.  # noqa: E501
        :rtype: str
        """
        return self._sysmoduser

    @sysmoduser.setter
    def sysmoduser(self, sysmoduser):
        """Sets the sysmoduser of this LocFps.


        :param sysmoduser: The sysmoduser of this LocFps.  # noqa: E501
        :type: str
        """

        self._sysmoduser = sysmoduser

    @property
    def systag(self):
        """Gets the systag of this LocFps.  # noqa: E501


        :return: The systag of this LocFps.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this LocFps.


        :param systag: The systag of this LocFps.  # noqa: E501
        :type: str
        """

        self._systag = systag

    @property
    def tblkeyparent(self):
        """Gets the tblkeyparent of this LocFps.  # noqa: E501


        :return: The tblkeyparent of this LocFps.  # noqa: E501
        :rtype: str
        """
        return self._tblkeyparent

    @tblkeyparent.setter
    def tblkeyparent(self, tblkeyparent):
        """Sets the tblkeyparent of this LocFps.


        :param tblkeyparent: The tblkeyparent of this LocFps.  # noqa: E501
        :type: str
        """

        self._tblkeyparent = tblkeyparent

    @property
    def unit(self):
        """Gets the unit of this LocFps.  # noqa: E501


        :return: The unit of this LocFps.  # noqa: E501
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this LocFps.


        :param unit: The unit of this LocFps.  # noqa: E501
        :type: str
        """

        self._unit = unit

    @property
    def wellbore(self):
        """Gets the wellbore of this LocFps.  # noqa: E501


        :return: The wellbore of this LocFps.  # noqa: E501
        :rtype: AnyOfLocFpsWellbore
        """
        return self._wellbore

    @wellbore.setter
    def wellbore(self, wellbore):
        """Sets the wellbore of this LocFps.


        :param wellbore: The wellbore of this LocFps.  # noqa: E501
        :type: AnyOfLocFpsWellbore
        """

        self._wellbore = wellbore

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LocFps, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LocFps):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
