# coding: utf-8

"""
    OData Service for namespace Default

    This OData service is located at http://localhost  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TestDyno(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'com': 'str',
        'dttm': 'datetime',
        'ept': 'OneOfTestDynoEpt',
        'fluidload': 'OneOfTestDynoFluidload',
        'idrec': 'str',
        'idrecjob': 'str',
        'idrecjobtk': 'str',
        'idrecpumpingunit': 'str',
        'idrecpumpingunittk': 'str',
        'idwell': 'str',
        'mpt': 'OneOfTestDynoMpt',
        'resulttechnical': 'str',
        'resulttechnicaldetail': 'str',
        'resulttechnicalnote': 'str',
        'syscreatedate': 'datetime',
        'syscreateuser': 'str',
        'syslockchildren': 'int',
        'syslockchildrenui': 'int',
        'syslockdate': 'datetime',
        'syslockme': 'int',
        'syslockmeui': 'int',
        'sysmoddate': 'datetime',
        'sysmoduser': 'str',
        'systag': 'str',
        'test_dyno_data': 'list[TestDynoData]',
        'testedby': 'str',
        'typ1': 'str',
        'typ2': 'str',
        'wellheader': 'AnyOfTestDynoWellheader'
    }

    attribute_map = {
        'com': 'com',
        'dttm': 'dttm',
        'ept': 'ept',
        'fluidload': 'fluidload',
        'idrec': 'idrec',
        'idrecjob': 'idrecjob',
        'idrecjobtk': 'idrecjobtk',
        'idrecpumpingunit': 'idrecpumpingunit',
        'idrecpumpingunittk': 'idrecpumpingunittk',
        'idwell': 'idwell',
        'mpt': 'mpt',
        'resulttechnical': 'resulttechnical',
        'resulttechnicaldetail': 'resulttechnicaldetail',
        'resulttechnicalnote': 'resulttechnicalnote',
        'syscreatedate': 'syscreatedate',
        'syscreateuser': 'syscreateuser',
        'syslockchildren': 'syslockchildren',
        'syslockchildrenui': 'syslockchildrenui',
        'syslockdate': 'syslockdate',
        'syslockme': 'syslockme',
        'syslockmeui': 'syslockmeui',
        'sysmoddate': 'sysmoddate',
        'sysmoduser': 'sysmoduser',
        'systag': 'systag',
        'test_dyno_data': 'testDynoData',
        'testedby': 'testedby',
        'typ1': 'typ1',
        'typ2': 'typ2',
        'wellheader': 'wellheader'
    }

    def __init__(self, com=None, dttm=None, ept=None, fluidload=None, idrec=None, idrecjob=None, idrecjobtk=None, idrecpumpingunit=None, idrecpumpingunittk=None, idwell=None, mpt=None, resulttechnical=None, resulttechnicaldetail=None, resulttechnicalnote=None, syscreatedate=None, syscreateuser=None, syslockchildren=None, syslockchildrenui=None, syslockdate=None, syslockme=None, syslockmeui=None, sysmoddate=None, sysmoduser=None, systag=None, test_dyno_data=None, testedby=None, typ1=None, typ2=None, wellheader=None):  # noqa: E501
        """TestDyno - a model defined in Swagger"""  # noqa: E501
        self._com = None
        self._dttm = None
        self._ept = None
        self._fluidload = None
        self._idrec = None
        self._idrecjob = None
        self._idrecjobtk = None
        self._idrecpumpingunit = None
        self._idrecpumpingunittk = None
        self._idwell = None
        self._mpt = None
        self._resulttechnical = None
        self._resulttechnicaldetail = None
        self._resulttechnicalnote = None
        self._syscreatedate = None
        self._syscreateuser = None
        self._syslockchildren = None
        self._syslockchildrenui = None
        self._syslockdate = None
        self._syslockme = None
        self._syslockmeui = None
        self._sysmoddate = None
        self._sysmoduser = None
        self._systag = None
        self._test_dyno_data = None
        self._testedby = None
        self._typ1 = None
        self._typ2 = None
        self._wellheader = None
        self.discriminator = None
        if com is not None:
            self.com = com
        if dttm is not None:
            self.dttm = dttm
        if ept is not None:
            self.ept = ept
        if fluidload is not None:
            self.fluidload = fluidload
        if idrec is not None:
            self.idrec = idrec
        if idrecjob is not None:
            self.idrecjob = idrecjob
        if idrecjobtk is not None:
            self.idrecjobtk = idrecjobtk
        if idrecpumpingunit is not None:
            self.idrecpumpingunit = idrecpumpingunit
        if idrecpumpingunittk is not None:
            self.idrecpumpingunittk = idrecpumpingunittk
        if idwell is not None:
            self.idwell = idwell
        if mpt is not None:
            self.mpt = mpt
        if resulttechnical is not None:
            self.resulttechnical = resulttechnical
        if resulttechnicaldetail is not None:
            self.resulttechnicaldetail = resulttechnicaldetail
        if resulttechnicalnote is not None:
            self.resulttechnicalnote = resulttechnicalnote
        if syscreatedate is not None:
            self.syscreatedate = syscreatedate
        if syscreateuser is not None:
            self.syscreateuser = syscreateuser
        if syslockchildren is not None:
            self.syslockchildren = syslockchildren
        if syslockchildrenui is not None:
            self.syslockchildrenui = syslockchildrenui
        if syslockdate is not None:
            self.syslockdate = syslockdate
        if syslockme is not None:
            self.syslockme = syslockme
        if syslockmeui is not None:
            self.syslockmeui = syslockmeui
        if sysmoddate is not None:
            self.sysmoddate = sysmoddate
        if sysmoduser is not None:
            self.sysmoduser = sysmoduser
        if systag is not None:
            self.systag = systag
        if test_dyno_data is not None:
            self.test_dyno_data = test_dyno_data
        if testedby is not None:
            self.testedby = testedby
        if typ1 is not None:
            self.typ1 = typ1
        if typ2 is not None:
            self.typ2 = typ2
        if wellheader is not None:
            self.wellheader = wellheader

    @property
    def com(self):
        """Gets the com of this TestDyno.  # noqa: E501


        :return: The com of this TestDyno.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this TestDyno.


        :param com: The com of this TestDyno.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def dttm(self):
        """Gets the dttm of this TestDyno.  # noqa: E501


        :return: The dttm of this TestDyno.  # noqa: E501
        :rtype: datetime
        """
        return self._dttm

    @dttm.setter
    def dttm(self, dttm):
        """Sets the dttm of this TestDyno.


        :param dttm: The dttm of this TestDyno.  # noqa: E501
        :type: datetime
        """

        self._dttm = dttm

    @property
    def ept(self):
        """Gets the ept of this TestDyno.  # noqa: E501


        :return: The ept of this TestDyno.  # noqa: E501
        :rtype: OneOfTestDynoEpt
        """
        return self._ept

    @ept.setter
    def ept(self, ept):
        """Sets the ept of this TestDyno.


        :param ept: The ept of this TestDyno.  # noqa: E501
        :type: OneOfTestDynoEpt
        """

        self._ept = ept

    @property
    def fluidload(self):
        """Gets the fluidload of this TestDyno.  # noqa: E501


        :return: The fluidload of this TestDyno.  # noqa: E501
        :rtype: OneOfTestDynoFluidload
        """
        return self._fluidload

    @fluidload.setter
    def fluidload(self, fluidload):
        """Sets the fluidload of this TestDyno.


        :param fluidload: The fluidload of this TestDyno.  # noqa: E501
        :type: OneOfTestDynoFluidload
        """

        self._fluidload = fluidload

    @property
    def idrec(self):
        """Gets the idrec of this TestDyno.  # noqa: E501


        :return: The idrec of this TestDyno.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this TestDyno.


        :param idrec: The idrec of this TestDyno.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecjob(self):
        """Gets the idrecjob of this TestDyno.  # noqa: E501


        :return: The idrecjob of this TestDyno.  # noqa: E501
        :rtype: str
        """
        return self._idrecjob

    @idrecjob.setter
    def idrecjob(self, idrecjob):
        """Sets the idrecjob of this TestDyno.


        :param idrecjob: The idrecjob of this TestDyno.  # noqa: E501
        :type: str
        """

        self._idrecjob = idrecjob

    @property
    def idrecjobtk(self):
        """Gets the idrecjobtk of this TestDyno.  # noqa: E501


        :return: The idrecjobtk of this TestDyno.  # noqa: E501
        :rtype: str
        """
        return self._idrecjobtk

    @idrecjobtk.setter
    def idrecjobtk(self, idrecjobtk):
        """Sets the idrecjobtk of this TestDyno.


        :param idrecjobtk: The idrecjobtk of this TestDyno.  # noqa: E501
        :type: str
        """

        self._idrecjobtk = idrecjobtk

    @property
    def idrecpumpingunit(self):
        """Gets the idrecpumpingunit of this TestDyno.  # noqa: E501


        :return: The idrecpumpingunit of this TestDyno.  # noqa: E501
        :rtype: str
        """
        return self._idrecpumpingunit

    @idrecpumpingunit.setter
    def idrecpumpingunit(self, idrecpumpingunit):
        """Sets the idrecpumpingunit of this TestDyno.


        :param idrecpumpingunit: The idrecpumpingunit of this TestDyno.  # noqa: E501
        :type: str
        """

        self._idrecpumpingunit = idrecpumpingunit

    @property
    def idrecpumpingunittk(self):
        """Gets the idrecpumpingunittk of this TestDyno.  # noqa: E501


        :return: The idrecpumpingunittk of this TestDyno.  # noqa: E501
        :rtype: str
        """
        return self._idrecpumpingunittk

    @idrecpumpingunittk.setter
    def idrecpumpingunittk(self, idrecpumpingunittk):
        """Sets the idrecpumpingunittk of this TestDyno.


        :param idrecpumpingunittk: The idrecpumpingunittk of this TestDyno.  # noqa: E501
        :type: str
        """

        self._idrecpumpingunittk = idrecpumpingunittk

    @property
    def idwell(self):
        """Gets the idwell of this TestDyno.  # noqa: E501


        :return: The idwell of this TestDyno.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this TestDyno.


        :param idwell: The idwell of this TestDyno.  # noqa: E501
        :type: str
        """

        self._idwell = idwell

    @property
    def mpt(self):
        """Gets the mpt of this TestDyno.  # noqa: E501


        :return: The mpt of this TestDyno.  # noqa: E501
        :rtype: OneOfTestDynoMpt
        """
        return self._mpt

    @mpt.setter
    def mpt(self, mpt):
        """Sets the mpt of this TestDyno.


        :param mpt: The mpt of this TestDyno.  # noqa: E501
        :type: OneOfTestDynoMpt
        """

        self._mpt = mpt

    @property
    def resulttechnical(self):
        """Gets the resulttechnical of this TestDyno.  # noqa: E501


        :return: The resulttechnical of this TestDyno.  # noqa: E501
        :rtype: str
        """
        return self._resulttechnical

    @resulttechnical.setter
    def resulttechnical(self, resulttechnical):
        """Sets the resulttechnical of this TestDyno.


        :param resulttechnical: The resulttechnical of this TestDyno.  # noqa: E501
        :type: str
        """

        self._resulttechnical = resulttechnical

    @property
    def resulttechnicaldetail(self):
        """Gets the resulttechnicaldetail of this TestDyno.  # noqa: E501


        :return: The resulttechnicaldetail of this TestDyno.  # noqa: E501
        :rtype: str
        """
        return self._resulttechnicaldetail

    @resulttechnicaldetail.setter
    def resulttechnicaldetail(self, resulttechnicaldetail):
        """Sets the resulttechnicaldetail of this TestDyno.


        :param resulttechnicaldetail: The resulttechnicaldetail of this TestDyno.  # noqa: E501
        :type: str
        """

        self._resulttechnicaldetail = resulttechnicaldetail

    @property
    def resulttechnicalnote(self):
        """Gets the resulttechnicalnote of this TestDyno.  # noqa: E501


        :return: The resulttechnicalnote of this TestDyno.  # noqa: E501
        :rtype: str
        """
        return self._resulttechnicalnote

    @resulttechnicalnote.setter
    def resulttechnicalnote(self, resulttechnicalnote):
        """Sets the resulttechnicalnote of this TestDyno.


        :param resulttechnicalnote: The resulttechnicalnote of this TestDyno.  # noqa: E501
        :type: str
        """

        self._resulttechnicalnote = resulttechnicalnote

    @property
    def syscreatedate(self):
        """Gets the syscreatedate of this TestDyno.  # noqa: E501


        :return: The syscreatedate of this TestDyno.  # noqa: E501
        :rtype: datetime
        """
        return self._syscreatedate

    @syscreatedate.setter
    def syscreatedate(self, syscreatedate):
        """Sets the syscreatedate of this TestDyno.


        :param syscreatedate: The syscreatedate of this TestDyno.  # noqa: E501
        :type: datetime
        """

        self._syscreatedate = syscreatedate

    @property
    def syscreateuser(self):
        """Gets the syscreateuser of this TestDyno.  # noqa: E501


        :return: The syscreateuser of this TestDyno.  # noqa: E501
        :rtype: str
        """
        return self._syscreateuser

    @syscreateuser.setter
    def syscreateuser(self, syscreateuser):
        """Sets the syscreateuser of this TestDyno.


        :param syscreateuser: The syscreateuser of this TestDyno.  # noqa: E501
        :type: str
        """

        self._syscreateuser = syscreateuser

    @property
    def syslockchildren(self):
        """Gets the syslockchildren of this TestDyno.  # noqa: E501


        :return: The syslockchildren of this TestDyno.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildren

    @syslockchildren.setter
    def syslockchildren(self, syslockchildren):
        """Sets the syslockchildren of this TestDyno.


        :param syslockchildren: The syslockchildren of this TestDyno.  # noqa: E501
        :type: int
        """

        self._syslockchildren = syslockchildren

    @property
    def syslockchildrenui(self):
        """Gets the syslockchildrenui of this TestDyno.  # noqa: E501


        :return: The syslockchildrenui of this TestDyno.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildrenui

    @syslockchildrenui.setter
    def syslockchildrenui(self, syslockchildrenui):
        """Sets the syslockchildrenui of this TestDyno.


        :param syslockchildrenui: The syslockchildrenui of this TestDyno.  # noqa: E501
        :type: int
        """

        self._syslockchildrenui = syslockchildrenui

    @property
    def syslockdate(self):
        """Gets the syslockdate of this TestDyno.  # noqa: E501


        :return: The syslockdate of this TestDyno.  # noqa: E501
        :rtype: datetime
        """
        return self._syslockdate

    @syslockdate.setter
    def syslockdate(self, syslockdate):
        """Sets the syslockdate of this TestDyno.


        :param syslockdate: The syslockdate of this TestDyno.  # noqa: E501
        :type: datetime
        """

        self._syslockdate = syslockdate

    @property
    def syslockme(self):
        """Gets the syslockme of this TestDyno.  # noqa: E501


        :return: The syslockme of this TestDyno.  # noqa: E501
        :rtype: int
        """
        return self._syslockme

    @syslockme.setter
    def syslockme(self, syslockme):
        """Sets the syslockme of this TestDyno.


        :param syslockme: The syslockme of this TestDyno.  # noqa: E501
        :type: int
        """

        self._syslockme = syslockme

    @property
    def syslockmeui(self):
        """Gets the syslockmeui of this TestDyno.  # noqa: E501


        :return: The syslockmeui of this TestDyno.  # noqa: E501
        :rtype: int
        """
        return self._syslockmeui

    @syslockmeui.setter
    def syslockmeui(self, syslockmeui):
        """Sets the syslockmeui of this TestDyno.


        :param syslockmeui: The syslockmeui of this TestDyno.  # noqa: E501
        :type: int
        """

        self._syslockmeui = syslockmeui

    @property
    def sysmoddate(self):
        """Gets the sysmoddate of this TestDyno.  # noqa: E501


        :return: The sysmoddate of this TestDyno.  # noqa: E501
        :rtype: datetime
        """
        return self._sysmoddate

    @sysmoddate.setter
    def sysmoddate(self, sysmoddate):
        """Sets the sysmoddate of this TestDyno.


        :param sysmoddate: The sysmoddate of this TestDyno.  # noqa: E501
        :type: datetime
        """

        self._sysmoddate = sysmoddate

    @property
    def sysmoduser(self):
        """Gets the sysmoduser of this TestDyno.  # noqa: E501


        :return: The sysmoduser of this TestDyno.  # noqa: E501
        :rtype: str
        """
        return self._sysmoduser

    @sysmoduser.setter
    def sysmoduser(self, sysmoduser):
        """Sets the sysmoduser of this TestDyno.


        :param sysmoduser: The sysmoduser of this TestDyno.  # noqa: E501
        :type: str
        """

        self._sysmoduser = sysmoduser

    @property
    def systag(self):
        """Gets the systag of this TestDyno.  # noqa: E501


        :return: The systag of this TestDyno.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this TestDyno.


        :param systag: The systag of this TestDyno.  # noqa: E501
        :type: str
        """

        self._systag = systag

    @property
    def test_dyno_data(self):
        """Gets the test_dyno_data of this TestDyno.  # noqa: E501


        :return: The test_dyno_data of this TestDyno.  # noqa: E501
        :rtype: list[TestDynoData]
        """
        return self._test_dyno_data

    @test_dyno_data.setter
    def test_dyno_data(self, test_dyno_data):
        """Sets the test_dyno_data of this TestDyno.


        :param test_dyno_data: The test_dyno_data of this TestDyno.  # noqa: E501
        :type: list[TestDynoData]
        """

        self._test_dyno_data = test_dyno_data

    @property
    def testedby(self):
        """Gets the testedby of this TestDyno.  # noqa: E501


        :return: The testedby of this TestDyno.  # noqa: E501
        :rtype: str
        """
        return self._testedby

    @testedby.setter
    def testedby(self, testedby):
        """Sets the testedby of this TestDyno.


        :param testedby: The testedby of this TestDyno.  # noqa: E501
        :type: str
        """

        self._testedby = testedby

    @property
    def typ1(self):
        """Gets the typ1 of this TestDyno.  # noqa: E501


        :return: The typ1 of this TestDyno.  # noqa: E501
        :rtype: str
        """
        return self._typ1

    @typ1.setter
    def typ1(self, typ1):
        """Sets the typ1 of this TestDyno.


        :param typ1: The typ1 of this TestDyno.  # noqa: E501
        :type: str
        """

        self._typ1 = typ1

    @property
    def typ2(self):
        """Gets the typ2 of this TestDyno.  # noqa: E501


        :return: The typ2 of this TestDyno.  # noqa: E501
        :rtype: str
        """
        return self._typ2

    @typ2.setter
    def typ2(self, typ2):
        """Sets the typ2 of this TestDyno.


        :param typ2: The typ2 of this TestDyno.  # noqa: E501
        :type: str
        """

        self._typ2 = typ2

    @property
    def wellheader(self):
        """Gets the wellheader of this TestDyno.  # noqa: E501


        :return: The wellheader of this TestDyno.  # noqa: E501
        :rtype: AnyOfTestDynoWellheader
        """
        return self._wellheader

    @wellheader.setter
    def wellheader(self, wellheader):
        """Sets the wellheader of this TestDyno.


        :param wellheader: The wellheader of this TestDyno.  # noqa: E501
        :type: AnyOfTestDynoWellheader
        """

        self._wellheader = wellheader

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TestDyno, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TestDyno):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
