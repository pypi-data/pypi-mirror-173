# coding: utf-8

"""
    OData Service for namespace Default

    This OData service is located at http://localhost  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class JobReportFluidsWell(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'actiontyp': 'str',
        'bsw': 'OneOfJobReportFluidsWellBsw',
        'density': 'OneOfJobReportFluidsWellDensity',
        'fluidtyp': 'str',
        'fromwell': 'OneOfJobReportFluidsWellFromwell',
        'idrec': 'str',
        'idrecparent': 'str',
        'idreczonecompletion': 'str',
        'idreczonecompletiontk': 'str',
        'idwell': 'str',
        'job_report': 'AnyOfJobReportFluidsWellJobReport',
        'nonrecov': 'OneOfJobReportFluidsWellNonrecov',
        'note': 'str',
        'purpose': 'str',
        'sandcut': 'OneOfJobReportFluidsWellSandcut',
        'syscreatedate': 'datetime',
        'syscreateuser': 'str',
        'syslockchildren': 'int',
        'syslockchildrenui': 'int',
        'syslockdate': 'datetime',
        'syslockme': 'int',
        'syslockmeui': 'int',
        'sysmoddate': 'datetime',
        'sysmoduser': 'str',
        'sysseq': 'int',
        'systag': 'str',
        'towell': 'OneOfJobReportFluidsWellTowell'
    }

    attribute_map = {
        'actiontyp': 'actiontyp',
        'bsw': 'bsw',
        'density': 'density',
        'fluidtyp': 'fluidtyp',
        'fromwell': 'fromwell',
        'idrec': 'idrec',
        'idrecparent': 'idrecparent',
        'idreczonecompletion': 'idreczonecompletion',
        'idreczonecompletiontk': 'idreczonecompletiontk',
        'idwell': 'idwell',
        'job_report': 'jobReport',
        'nonrecov': 'nonrecov',
        'note': 'note',
        'purpose': 'purpose',
        'sandcut': 'sandcut',
        'syscreatedate': 'syscreatedate',
        'syscreateuser': 'syscreateuser',
        'syslockchildren': 'syslockchildren',
        'syslockchildrenui': 'syslockchildrenui',
        'syslockdate': 'syslockdate',
        'syslockme': 'syslockme',
        'syslockmeui': 'syslockmeui',
        'sysmoddate': 'sysmoddate',
        'sysmoduser': 'sysmoduser',
        'sysseq': 'sysseq',
        'systag': 'systag',
        'towell': 'towell'
    }

    def __init__(self, actiontyp=None, bsw=None, density=None, fluidtyp=None, fromwell=None, idrec=None, idrecparent=None, idreczonecompletion=None, idreczonecompletiontk=None, idwell=None, job_report=None, nonrecov=None, note=None, purpose=None, sandcut=None, syscreatedate=None, syscreateuser=None, syslockchildren=None, syslockchildrenui=None, syslockdate=None, syslockme=None, syslockmeui=None, sysmoddate=None, sysmoduser=None, sysseq=None, systag=None, towell=None):  # noqa: E501
        """JobReportFluidsWell - a model defined in Swagger"""  # noqa: E501
        self._actiontyp = None
        self._bsw = None
        self._density = None
        self._fluidtyp = None
        self._fromwell = None
        self._idrec = None
        self._idrecparent = None
        self._idreczonecompletion = None
        self._idreczonecompletiontk = None
        self._idwell = None
        self._job_report = None
        self._nonrecov = None
        self._note = None
        self._purpose = None
        self._sandcut = None
        self._syscreatedate = None
        self._syscreateuser = None
        self._syslockchildren = None
        self._syslockchildrenui = None
        self._syslockdate = None
        self._syslockme = None
        self._syslockmeui = None
        self._sysmoddate = None
        self._sysmoduser = None
        self._sysseq = None
        self._systag = None
        self._towell = None
        self.discriminator = None
        if actiontyp is not None:
            self.actiontyp = actiontyp
        if bsw is not None:
            self.bsw = bsw
        if density is not None:
            self.density = density
        if fluidtyp is not None:
            self.fluidtyp = fluidtyp
        if fromwell is not None:
            self.fromwell = fromwell
        if idrec is not None:
            self.idrec = idrec
        if idrecparent is not None:
            self.idrecparent = idrecparent
        if idreczonecompletion is not None:
            self.idreczonecompletion = idreczonecompletion
        if idreczonecompletiontk is not None:
            self.idreczonecompletiontk = idreczonecompletiontk
        if idwell is not None:
            self.idwell = idwell
        if job_report is not None:
            self.job_report = job_report
        if nonrecov is not None:
            self.nonrecov = nonrecov
        if note is not None:
            self.note = note
        if purpose is not None:
            self.purpose = purpose
        if sandcut is not None:
            self.sandcut = sandcut
        if syscreatedate is not None:
            self.syscreatedate = syscreatedate
        if syscreateuser is not None:
            self.syscreateuser = syscreateuser
        if syslockchildren is not None:
            self.syslockchildren = syslockchildren
        if syslockchildrenui is not None:
            self.syslockchildrenui = syslockchildrenui
        if syslockdate is not None:
            self.syslockdate = syslockdate
        if syslockme is not None:
            self.syslockme = syslockme
        if syslockmeui is not None:
            self.syslockmeui = syslockmeui
        if sysmoddate is not None:
            self.sysmoddate = sysmoddate
        if sysmoduser is not None:
            self.sysmoduser = sysmoduser
        if sysseq is not None:
            self.sysseq = sysseq
        if systag is not None:
            self.systag = systag
        if towell is not None:
            self.towell = towell

    @property
    def actiontyp(self):
        """Gets the actiontyp of this JobReportFluidsWell.  # noqa: E501


        :return: The actiontyp of this JobReportFluidsWell.  # noqa: E501
        :rtype: str
        """
        return self._actiontyp

    @actiontyp.setter
    def actiontyp(self, actiontyp):
        """Sets the actiontyp of this JobReportFluidsWell.


        :param actiontyp: The actiontyp of this JobReportFluidsWell.  # noqa: E501
        :type: str
        """

        self._actiontyp = actiontyp

    @property
    def bsw(self):
        """Gets the bsw of this JobReportFluidsWell.  # noqa: E501


        :return: The bsw of this JobReportFluidsWell.  # noqa: E501
        :rtype: OneOfJobReportFluidsWellBsw
        """
        return self._bsw

    @bsw.setter
    def bsw(self, bsw):
        """Sets the bsw of this JobReportFluidsWell.


        :param bsw: The bsw of this JobReportFluidsWell.  # noqa: E501
        :type: OneOfJobReportFluidsWellBsw
        """

        self._bsw = bsw

    @property
    def density(self):
        """Gets the density of this JobReportFluidsWell.  # noqa: E501


        :return: The density of this JobReportFluidsWell.  # noqa: E501
        :rtype: OneOfJobReportFluidsWellDensity
        """
        return self._density

    @density.setter
    def density(self, density):
        """Sets the density of this JobReportFluidsWell.


        :param density: The density of this JobReportFluidsWell.  # noqa: E501
        :type: OneOfJobReportFluidsWellDensity
        """

        self._density = density

    @property
    def fluidtyp(self):
        """Gets the fluidtyp of this JobReportFluidsWell.  # noqa: E501


        :return: The fluidtyp of this JobReportFluidsWell.  # noqa: E501
        :rtype: str
        """
        return self._fluidtyp

    @fluidtyp.setter
    def fluidtyp(self, fluidtyp):
        """Sets the fluidtyp of this JobReportFluidsWell.


        :param fluidtyp: The fluidtyp of this JobReportFluidsWell.  # noqa: E501
        :type: str
        """

        self._fluidtyp = fluidtyp

    @property
    def fromwell(self):
        """Gets the fromwell of this JobReportFluidsWell.  # noqa: E501


        :return: The fromwell of this JobReportFluidsWell.  # noqa: E501
        :rtype: OneOfJobReportFluidsWellFromwell
        """
        return self._fromwell

    @fromwell.setter
    def fromwell(self, fromwell):
        """Sets the fromwell of this JobReportFluidsWell.


        :param fromwell: The fromwell of this JobReportFluidsWell.  # noqa: E501
        :type: OneOfJobReportFluidsWellFromwell
        """

        self._fromwell = fromwell

    @property
    def idrec(self):
        """Gets the idrec of this JobReportFluidsWell.  # noqa: E501


        :return: The idrec of this JobReportFluidsWell.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this JobReportFluidsWell.


        :param idrec: The idrec of this JobReportFluidsWell.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecparent(self):
        """Gets the idrecparent of this JobReportFluidsWell.  # noqa: E501


        :return: The idrecparent of this JobReportFluidsWell.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this JobReportFluidsWell.


        :param idrecparent: The idrecparent of this JobReportFluidsWell.  # noqa: E501
        :type: str
        """

        self._idrecparent = idrecparent

    @property
    def idreczonecompletion(self):
        """Gets the idreczonecompletion of this JobReportFluidsWell.  # noqa: E501


        :return: The idreczonecompletion of this JobReportFluidsWell.  # noqa: E501
        :rtype: str
        """
        return self._idreczonecompletion

    @idreczonecompletion.setter
    def idreczonecompletion(self, idreczonecompletion):
        """Sets the idreczonecompletion of this JobReportFluidsWell.


        :param idreczonecompletion: The idreczonecompletion of this JobReportFluidsWell.  # noqa: E501
        :type: str
        """

        self._idreczonecompletion = idreczonecompletion

    @property
    def idreczonecompletiontk(self):
        """Gets the idreczonecompletiontk of this JobReportFluidsWell.  # noqa: E501


        :return: The idreczonecompletiontk of this JobReportFluidsWell.  # noqa: E501
        :rtype: str
        """
        return self._idreczonecompletiontk

    @idreczonecompletiontk.setter
    def idreczonecompletiontk(self, idreczonecompletiontk):
        """Sets the idreczonecompletiontk of this JobReportFluidsWell.


        :param idreczonecompletiontk: The idreczonecompletiontk of this JobReportFluidsWell.  # noqa: E501
        :type: str
        """

        self._idreczonecompletiontk = idreczonecompletiontk

    @property
    def idwell(self):
        """Gets the idwell of this JobReportFluidsWell.  # noqa: E501


        :return: The idwell of this JobReportFluidsWell.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this JobReportFluidsWell.


        :param idwell: The idwell of this JobReportFluidsWell.  # noqa: E501
        :type: str
        """

        self._idwell = idwell

    @property
    def job_report(self):
        """Gets the job_report of this JobReportFluidsWell.  # noqa: E501


        :return: The job_report of this JobReportFluidsWell.  # noqa: E501
        :rtype: AnyOfJobReportFluidsWellJobReport
        """
        return self._job_report

    @job_report.setter
    def job_report(self, job_report):
        """Sets the job_report of this JobReportFluidsWell.


        :param job_report: The job_report of this JobReportFluidsWell.  # noqa: E501
        :type: AnyOfJobReportFluidsWellJobReport
        """

        self._job_report = job_report

    @property
    def nonrecov(self):
        """Gets the nonrecov of this JobReportFluidsWell.  # noqa: E501


        :return: The nonrecov of this JobReportFluidsWell.  # noqa: E501
        :rtype: OneOfJobReportFluidsWellNonrecov
        """
        return self._nonrecov

    @nonrecov.setter
    def nonrecov(self, nonrecov):
        """Sets the nonrecov of this JobReportFluidsWell.


        :param nonrecov: The nonrecov of this JobReportFluidsWell.  # noqa: E501
        :type: OneOfJobReportFluidsWellNonrecov
        """

        self._nonrecov = nonrecov

    @property
    def note(self):
        """Gets the note of this JobReportFluidsWell.  # noqa: E501


        :return: The note of this JobReportFluidsWell.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this JobReportFluidsWell.


        :param note: The note of this JobReportFluidsWell.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def purpose(self):
        """Gets the purpose of this JobReportFluidsWell.  # noqa: E501


        :return: The purpose of this JobReportFluidsWell.  # noqa: E501
        :rtype: str
        """
        return self._purpose

    @purpose.setter
    def purpose(self, purpose):
        """Sets the purpose of this JobReportFluidsWell.


        :param purpose: The purpose of this JobReportFluidsWell.  # noqa: E501
        :type: str
        """

        self._purpose = purpose

    @property
    def sandcut(self):
        """Gets the sandcut of this JobReportFluidsWell.  # noqa: E501


        :return: The sandcut of this JobReportFluidsWell.  # noqa: E501
        :rtype: OneOfJobReportFluidsWellSandcut
        """
        return self._sandcut

    @sandcut.setter
    def sandcut(self, sandcut):
        """Sets the sandcut of this JobReportFluidsWell.


        :param sandcut: The sandcut of this JobReportFluidsWell.  # noqa: E501
        :type: OneOfJobReportFluidsWellSandcut
        """

        self._sandcut = sandcut

    @property
    def syscreatedate(self):
        """Gets the syscreatedate of this JobReportFluidsWell.  # noqa: E501


        :return: The syscreatedate of this JobReportFluidsWell.  # noqa: E501
        :rtype: datetime
        """
        return self._syscreatedate

    @syscreatedate.setter
    def syscreatedate(self, syscreatedate):
        """Sets the syscreatedate of this JobReportFluidsWell.


        :param syscreatedate: The syscreatedate of this JobReportFluidsWell.  # noqa: E501
        :type: datetime
        """

        self._syscreatedate = syscreatedate

    @property
    def syscreateuser(self):
        """Gets the syscreateuser of this JobReportFluidsWell.  # noqa: E501


        :return: The syscreateuser of this JobReportFluidsWell.  # noqa: E501
        :rtype: str
        """
        return self._syscreateuser

    @syscreateuser.setter
    def syscreateuser(self, syscreateuser):
        """Sets the syscreateuser of this JobReportFluidsWell.


        :param syscreateuser: The syscreateuser of this JobReportFluidsWell.  # noqa: E501
        :type: str
        """

        self._syscreateuser = syscreateuser

    @property
    def syslockchildren(self):
        """Gets the syslockchildren of this JobReportFluidsWell.  # noqa: E501


        :return: The syslockchildren of this JobReportFluidsWell.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildren

    @syslockchildren.setter
    def syslockchildren(self, syslockchildren):
        """Sets the syslockchildren of this JobReportFluidsWell.


        :param syslockchildren: The syslockchildren of this JobReportFluidsWell.  # noqa: E501
        :type: int
        """

        self._syslockchildren = syslockchildren

    @property
    def syslockchildrenui(self):
        """Gets the syslockchildrenui of this JobReportFluidsWell.  # noqa: E501


        :return: The syslockchildrenui of this JobReportFluidsWell.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildrenui

    @syslockchildrenui.setter
    def syslockchildrenui(self, syslockchildrenui):
        """Sets the syslockchildrenui of this JobReportFluidsWell.


        :param syslockchildrenui: The syslockchildrenui of this JobReportFluidsWell.  # noqa: E501
        :type: int
        """

        self._syslockchildrenui = syslockchildrenui

    @property
    def syslockdate(self):
        """Gets the syslockdate of this JobReportFluidsWell.  # noqa: E501


        :return: The syslockdate of this JobReportFluidsWell.  # noqa: E501
        :rtype: datetime
        """
        return self._syslockdate

    @syslockdate.setter
    def syslockdate(self, syslockdate):
        """Sets the syslockdate of this JobReportFluidsWell.


        :param syslockdate: The syslockdate of this JobReportFluidsWell.  # noqa: E501
        :type: datetime
        """

        self._syslockdate = syslockdate

    @property
    def syslockme(self):
        """Gets the syslockme of this JobReportFluidsWell.  # noqa: E501


        :return: The syslockme of this JobReportFluidsWell.  # noqa: E501
        :rtype: int
        """
        return self._syslockme

    @syslockme.setter
    def syslockme(self, syslockme):
        """Sets the syslockme of this JobReportFluidsWell.


        :param syslockme: The syslockme of this JobReportFluidsWell.  # noqa: E501
        :type: int
        """

        self._syslockme = syslockme

    @property
    def syslockmeui(self):
        """Gets the syslockmeui of this JobReportFluidsWell.  # noqa: E501


        :return: The syslockmeui of this JobReportFluidsWell.  # noqa: E501
        :rtype: int
        """
        return self._syslockmeui

    @syslockmeui.setter
    def syslockmeui(self, syslockmeui):
        """Sets the syslockmeui of this JobReportFluidsWell.


        :param syslockmeui: The syslockmeui of this JobReportFluidsWell.  # noqa: E501
        :type: int
        """

        self._syslockmeui = syslockmeui

    @property
    def sysmoddate(self):
        """Gets the sysmoddate of this JobReportFluidsWell.  # noqa: E501


        :return: The sysmoddate of this JobReportFluidsWell.  # noqa: E501
        :rtype: datetime
        """
        return self._sysmoddate

    @sysmoddate.setter
    def sysmoddate(self, sysmoddate):
        """Sets the sysmoddate of this JobReportFluidsWell.


        :param sysmoddate: The sysmoddate of this JobReportFluidsWell.  # noqa: E501
        :type: datetime
        """

        self._sysmoddate = sysmoddate

    @property
    def sysmoduser(self):
        """Gets the sysmoduser of this JobReportFluidsWell.  # noqa: E501


        :return: The sysmoduser of this JobReportFluidsWell.  # noqa: E501
        :rtype: str
        """
        return self._sysmoduser

    @sysmoduser.setter
    def sysmoduser(self, sysmoduser):
        """Sets the sysmoduser of this JobReportFluidsWell.


        :param sysmoduser: The sysmoduser of this JobReportFluidsWell.  # noqa: E501
        :type: str
        """

        self._sysmoduser = sysmoduser

    @property
    def sysseq(self):
        """Gets the sysseq of this JobReportFluidsWell.  # noqa: E501


        :return: The sysseq of this JobReportFluidsWell.  # noqa: E501
        :rtype: int
        """
        return self._sysseq

    @sysseq.setter
    def sysseq(self, sysseq):
        """Sets the sysseq of this JobReportFluidsWell.


        :param sysseq: The sysseq of this JobReportFluidsWell.  # noqa: E501
        :type: int
        """

        self._sysseq = sysseq

    @property
    def systag(self):
        """Gets the systag of this JobReportFluidsWell.  # noqa: E501


        :return: The systag of this JobReportFluidsWell.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this JobReportFluidsWell.


        :param systag: The systag of this JobReportFluidsWell.  # noqa: E501
        :type: str
        """

        self._systag = systag

    @property
    def towell(self):
        """Gets the towell of this JobReportFluidsWell.  # noqa: E501


        :return: The towell of this JobReportFluidsWell.  # noqa: E501
        :rtype: OneOfJobReportFluidsWellTowell
        """
        return self._towell

    @towell.setter
    def towell(self, towell):
        """Sets the towell of this JobReportFluidsWell.


        :param towell: The towell of this JobReportFluidsWell.  # noqa: E501
        :type: OneOfJobReportFluidsWellTowell
        """

        self._towell = towell

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JobReportFluidsWell, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobReportFluidsWell):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
