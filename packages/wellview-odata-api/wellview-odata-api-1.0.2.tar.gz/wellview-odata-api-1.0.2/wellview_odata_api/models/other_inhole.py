# coding: utf-8

"""
    OData Service for namespace Default

    This OData service is located at http://localhost  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OtherInhole(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'coating': 'str',
        'com': 'str',
        'compsubtyp': 'str',
        'conditionpull': 'str',
        'conditionrun': 'str',
        'cost': 'OneOfOtherInholeCost',
        'costunitlabel': 'str',
        'depthbtm': 'OneOfOtherInholeDepthbtm',
        'depthtop': 'OneOfOtherInholeDepthtop',
        'des': 'str',
        'dttmmanufacture': 'datetime',
        'dttmonbottom': 'datetime',
        'dttmoutofhole': 'datetime',
        'dttmpickup': 'datetime',
        'dttmpull': 'datetime',
        'dttmrun': 'datetime',
        'fishnecklength': 'OneOfOtherInholeFishnecklength',
        'fishneckod': 'OneOfOtherInholeFishneckod',
        'hoursstart': 'OneOfOtherInholeHoursstart',
        'iconname': 'str',
        'idrec': 'str',
        'idrecjobpull': 'str',
        'idrecjobpulltk': 'str',
        'idrecjobrun': 'str',
        'idrecjobruntk': 'str',
        'idrecstring': 'str',
        'idrecstringtk': 'str',
        'idrecwellbore': 'str',
        'idrecwellboretk': 'str',
        'idwell': 'str',
        'latposition': 'OneOfOtherInholeLatposition',
        'make': 'str',
        'material': 'str',
        'model': 'str',
        'other_inhole_accs': 'list[OtherInholeAcc]',
        'other_inhole_gps': 'list[OtherInholeGp]',
        'other_inhole_packers': 'list[OtherInholePacker]',
        'other_inhole_plungers': 'list[OtherInholePlunger]',
        'other_inhole_pres_ratings': 'list[OtherInholePresRating]',
        'other_inhole_statuses': 'list[OtherInholeStatus]',
        'presrating': 'OneOfOtherInholePresrating',
        'proposedpull': 'int',
        'proposedrun': 'int',
        'pullreason': 'str',
        'pullreasondetail': 'str',
        'refid': 'str',
        'sn': 'str',
        'syscreatedate': 'datetime',
        'syscreateuser': 'str',
        'syslockchildren': 'int',
        'syslockchildrenui': 'int',
        'syslockdate': 'datetime',
        'syslockme': 'int',
        'syslockmeui': 'int',
        'sysmoddate': 'datetime',
        'sysmoduser': 'str',
        'systag': 'str',
        'szdrift': 'OneOfOtherInholeSzdrift',
        'szidnom': 'OneOfOtherInholeSzidnom',
        'szodmax': 'OneOfOtherInholeSzodmax',
        'szodnom': 'OneOfOtherInholeSzodnom',
        'temprating': 'OneOfOtherInholeTemprating',
        'wellheader': 'AnyOfOtherInholeWellheader'
    }

    attribute_map = {
        'coating': 'coating',
        'com': 'com',
        'compsubtyp': 'compsubtyp',
        'conditionpull': 'conditionpull',
        'conditionrun': 'conditionrun',
        'cost': 'cost',
        'costunitlabel': 'costunitlabel',
        'depthbtm': 'depthbtm',
        'depthtop': 'depthtop',
        'des': 'des',
        'dttmmanufacture': 'dttmmanufacture',
        'dttmonbottom': 'dttmonbottom',
        'dttmoutofhole': 'dttmoutofhole',
        'dttmpickup': 'dttmpickup',
        'dttmpull': 'dttmpull',
        'dttmrun': 'dttmrun',
        'fishnecklength': 'fishnecklength',
        'fishneckod': 'fishneckod',
        'hoursstart': 'hoursstart',
        'iconname': 'iconname',
        'idrec': 'idrec',
        'idrecjobpull': 'idrecjobpull',
        'idrecjobpulltk': 'idrecjobpulltk',
        'idrecjobrun': 'idrecjobrun',
        'idrecjobruntk': 'idrecjobruntk',
        'idrecstring': 'idrecstring',
        'idrecstringtk': 'idrecstringtk',
        'idrecwellbore': 'idrecwellbore',
        'idrecwellboretk': 'idrecwellboretk',
        'idwell': 'idwell',
        'latposition': 'latposition',
        'make': 'make',
        'material': 'material',
        'model': 'model',
        'other_inhole_accs': 'otherInholeAccs',
        'other_inhole_gps': 'otherInholeGps',
        'other_inhole_packers': 'otherInholePackers',
        'other_inhole_plungers': 'otherInholePlungers',
        'other_inhole_pres_ratings': 'otherInholePresRatings',
        'other_inhole_statuses': 'otherInholeStatuses',
        'presrating': 'presrating',
        'proposedpull': 'proposedpull',
        'proposedrun': 'proposedrun',
        'pullreason': 'pullreason',
        'pullreasondetail': 'pullreasondetail',
        'refid': 'refid',
        'sn': 'sn',
        'syscreatedate': 'syscreatedate',
        'syscreateuser': 'syscreateuser',
        'syslockchildren': 'syslockchildren',
        'syslockchildrenui': 'syslockchildrenui',
        'syslockdate': 'syslockdate',
        'syslockme': 'syslockme',
        'syslockmeui': 'syslockmeui',
        'sysmoddate': 'sysmoddate',
        'sysmoduser': 'sysmoduser',
        'systag': 'systag',
        'szdrift': 'szdrift',
        'szidnom': 'szidnom',
        'szodmax': 'szodmax',
        'szodnom': 'szodnom',
        'temprating': 'temprating',
        'wellheader': 'wellheader'
    }

    def __init__(self, coating=None, com=None, compsubtyp=None, conditionpull=None, conditionrun=None, cost=None, costunitlabel=None, depthbtm=None, depthtop=None, des=None, dttmmanufacture=None, dttmonbottom=None, dttmoutofhole=None, dttmpickup=None, dttmpull=None, dttmrun=None, fishnecklength=None, fishneckod=None, hoursstart=None, iconname=None, idrec=None, idrecjobpull=None, idrecjobpulltk=None, idrecjobrun=None, idrecjobruntk=None, idrecstring=None, idrecstringtk=None, idrecwellbore=None, idrecwellboretk=None, idwell=None, latposition=None, make=None, material=None, model=None, other_inhole_accs=None, other_inhole_gps=None, other_inhole_packers=None, other_inhole_plungers=None, other_inhole_pres_ratings=None, other_inhole_statuses=None, presrating=None, proposedpull=None, proposedrun=None, pullreason=None, pullreasondetail=None, refid=None, sn=None, syscreatedate=None, syscreateuser=None, syslockchildren=None, syslockchildrenui=None, syslockdate=None, syslockme=None, syslockmeui=None, sysmoddate=None, sysmoduser=None, systag=None, szdrift=None, szidnom=None, szodmax=None, szodnom=None, temprating=None, wellheader=None):  # noqa: E501
        """OtherInhole - a model defined in Swagger"""  # noqa: E501
        self._coating = None
        self._com = None
        self._compsubtyp = None
        self._conditionpull = None
        self._conditionrun = None
        self._cost = None
        self._costunitlabel = None
        self._depthbtm = None
        self._depthtop = None
        self._des = None
        self._dttmmanufacture = None
        self._dttmonbottom = None
        self._dttmoutofhole = None
        self._dttmpickup = None
        self._dttmpull = None
        self._dttmrun = None
        self._fishnecklength = None
        self._fishneckod = None
        self._hoursstart = None
        self._iconname = None
        self._idrec = None
        self._idrecjobpull = None
        self._idrecjobpulltk = None
        self._idrecjobrun = None
        self._idrecjobruntk = None
        self._idrecstring = None
        self._idrecstringtk = None
        self._idrecwellbore = None
        self._idrecwellboretk = None
        self._idwell = None
        self._latposition = None
        self._make = None
        self._material = None
        self._model = None
        self._other_inhole_accs = None
        self._other_inhole_gps = None
        self._other_inhole_packers = None
        self._other_inhole_plungers = None
        self._other_inhole_pres_ratings = None
        self._other_inhole_statuses = None
        self._presrating = None
        self._proposedpull = None
        self._proposedrun = None
        self._pullreason = None
        self._pullreasondetail = None
        self._refid = None
        self._sn = None
        self._syscreatedate = None
        self._syscreateuser = None
        self._syslockchildren = None
        self._syslockchildrenui = None
        self._syslockdate = None
        self._syslockme = None
        self._syslockmeui = None
        self._sysmoddate = None
        self._sysmoduser = None
        self._systag = None
        self._szdrift = None
        self._szidnom = None
        self._szodmax = None
        self._szodnom = None
        self._temprating = None
        self._wellheader = None
        self.discriminator = None
        if coating is not None:
            self.coating = coating
        if com is not None:
            self.com = com
        if compsubtyp is not None:
            self.compsubtyp = compsubtyp
        if conditionpull is not None:
            self.conditionpull = conditionpull
        if conditionrun is not None:
            self.conditionrun = conditionrun
        if cost is not None:
            self.cost = cost
        if costunitlabel is not None:
            self.costunitlabel = costunitlabel
        if depthbtm is not None:
            self.depthbtm = depthbtm
        if depthtop is not None:
            self.depthtop = depthtop
        if des is not None:
            self.des = des
        if dttmmanufacture is not None:
            self.dttmmanufacture = dttmmanufacture
        if dttmonbottom is not None:
            self.dttmonbottom = dttmonbottom
        if dttmoutofhole is not None:
            self.dttmoutofhole = dttmoutofhole
        if dttmpickup is not None:
            self.dttmpickup = dttmpickup
        if dttmpull is not None:
            self.dttmpull = dttmpull
        if dttmrun is not None:
            self.dttmrun = dttmrun
        if fishnecklength is not None:
            self.fishnecklength = fishnecklength
        if fishneckod is not None:
            self.fishneckod = fishneckod
        if hoursstart is not None:
            self.hoursstart = hoursstart
        if iconname is not None:
            self.iconname = iconname
        if idrec is not None:
            self.idrec = idrec
        if idrecjobpull is not None:
            self.idrecjobpull = idrecjobpull
        if idrecjobpulltk is not None:
            self.idrecjobpulltk = idrecjobpulltk
        if idrecjobrun is not None:
            self.idrecjobrun = idrecjobrun
        if idrecjobruntk is not None:
            self.idrecjobruntk = idrecjobruntk
        if idrecstring is not None:
            self.idrecstring = idrecstring
        if idrecstringtk is not None:
            self.idrecstringtk = idrecstringtk
        if idrecwellbore is not None:
            self.idrecwellbore = idrecwellbore
        if idrecwellboretk is not None:
            self.idrecwellboretk = idrecwellboretk
        if idwell is not None:
            self.idwell = idwell
        if latposition is not None:
            self.latposition = latposition
        if make is not None:
            self.make = make
        if material is not None:
            self.material = material
        if model is not None:
            self.model = model
        if other_inhole_accs is not None:
            self.other_inhole_accs = other_inhole_accs
        if other_inhole_gps is not None:
            self.other_inhole_gps = other_inhole_gps
        if other_inhole_packers is not None:
            self.other_inhole_packers = other_inhole_packers
        if other_inhole_plungers is not None:
            self.other_inhole_plungers = other_inhole_plungers
        if other_inhole_pres_ratings is not None:
            self.other_inhole_pres_ratings = other_inhole_pres_ratings
        if other_inhole_statuses is not None:
            self.other_inhole_statuses = other_inhole_statuses
        if presrating is not None:
            self.presrating = presrating
        if proposedpull is not None:
            self.proposedpull = proposedpull
        if proposedrun is not None:
            self.proposedrun = proposedrun
        if pullreason is not None:
            self.pullreason = pullreason
        if pullreasondetail is not None:
            self.pullreasondetail = pullreasondetail
        if refid is not None:
            self.refid = refid
        if sn is not None:
            self.sn = sn
        if syscreatedate is not None:
            self.syscreatedate = syscreatedate
        if syscreateuser is not None:
            self.syscreateuser = syscreateuser
        if syslockchildren is not None:
            self.syslockchildren = syslockchildren
        if syslockchildrenui is not None:
            self.syslockchildrenui = syslockchildrenui
        if syslockdate is not None:
            self.syslockdate = syslockdate
        if syslockme is not None:
            self.syslockme = syslockme
        if syslockmeui is not None:
            self.syslockmeui = syslockmeui
        if sysmoddate is not None:
            self.sysmoddate = sysmoddate
        if sysmoduser is not None:
            self.sysmoduser = sysmoduser
        if systag is not None:
            self.systag = systag
        if szdrift is not None:
            self.szdrift = szdrift
        if szidnom is not None:
            self.szidnom = szidnom
        if szodmax is not None:
            self.szodmax = szodmax
        if szodnom is not None:
            self.szodnom = szodnom
        if temprating is not None:
            self.temprating = temprating
        if wellheader is not None:
            self.wellheader = wellheader

    @property
    def coating(self):
        """Gets the coating of this OtherInhole.  # noqa: E501


        :return: The coating of this OtherInhole.  # noqa: E501
        :rtype: str
        """
        return self._coating

    @coating.setter
    def coating(self, coating):
        """Sets the coating of this OtherInhole.


        :param coating: The coating of this OtherInhole.  # noqa: E501
        :type: str
        """

        self._coating = coating

    @property
    def com(self):
        """Gets the com of this OtherInhole.  # noqa: E501


        :return: The com of this OtherInhole.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this OtherInhole.


        :param com: The com of this OtherInhole.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def compsubtyp(self):
        """Gets the compsubtyp of this OtherInhole.  # noqa: E501


        :return: The compsubtyp of this OtherInhole.  # noqa: E501
        :rtype: str
        """
        return self._compsubtyp

    @compsubtyp.setter
    def compsubtyp(self, compsubtyp):
        """Sets the compsubtyp of this OtherInhole.


        :param compsubtyp: The compsubtyp of this OtherInhole.  # noqa: E501
        :type: str
        """

        self._compsubtyp = compsubtyp

    @property
    def conditionpull(self):
        """Gets the conditionpull of this OtherInhole.  # noqa: E501


        :return: The conditionpull of this OtherInhole.  # noqa: E501
        :rtype: str
        """
        return self._conditionpull

    @conditionpull.setter
    def conditionpull(self, conditionpull):
        """Sets the conditionpull of this OtherInhole.


        :param conditionpull: The conditionpull of this OtherInhole.  # noqa: E501
        :type: str
        """

        self._conditionpull = conditionpull

    @property
    def conditionrun(self):
        """Gets the conditionrun of this OtherInhole.  # noqa: E501


        :return: The conditionrun of this OtherInhole.  # noqa: E501
        :rtype: str
        """
        return self._conditionrun

    @conditionrun.setter
    def conditionrun(self, conditionrun):
        """Sets the conditionrun of this OtherInhole.


        :param conditionrun: The conditionrun of this OtherInhole.  # noqa: E501
        :type: str
        """

        self._conditionrun = conditionrun

    @property
    def cost(self):
        """Gets the cost of this OtherInhole.  # noqa: E501


        :return: The cost of this OtherInhole.  # noqa: E501
        :rtype: OneOfOtherInholeCost
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this OtherInhole.


        :param cost: The cost of this OtherInhole.  # noqa: E501
        :type: OneOfOtherInholeCost
        """

        self._cost = cost

    @property
    def costunitlabel(self):
        """Gets the costunitlabel of this OtherInhole.  # noqa: E501


        :return: The costunitlabel of this OtherInhole.  # noqa: E501
        :rtype: str
        """
        return self._costunitlabel

    @costunitlabel.setter
    def costunitlabel(self, costunitlabel):
        """Sets the costunitlabel of this OtherInhole.


        :param costunitlabel: The costunitlabel of this OtherInhole.  # noqa: E501
        :type: str
        """

        self._costunitlabel = costunitlabel

    @property
    def depthbtm(self):
        """Gets the depthbtm of this OtherInhole.  # noqa: E501


        :return: The depthbtm of this OtherInhole.  # noqa: E501
        :rtype: OneOfOtherInholeDepthbtm
        """
        return self._depthbtm

    @depthbtm.setter
    def depthbtm(self, depthbtm):
        """Sets the depthbtm of this OtherInhole.


        :param depthbtm: The depthbtm of this OtherInhole.  # noqa: E501
        :type: OneOfOtherInholeDepthbtm
        """

        self._depthbtm = depthbtm

    @property
    def depthtop(self):
        """Gets the depthtop of this OtherInhole.  # noqa: E501


        :return: The depthtop of this OtherInhole.  # noqa: E501
        :rtype: OneOfOtherInholeDepthtop
        """
        return self._depthtop

    @depthtop.setter
    def depthtop(self, depthtop):
        """Sets the depthtop of this OtherInhole.


        :param depthtop: The depthtop of this OtherInhole.  # noqa: E501
        :type: OneOfOtherInholeDepthtop
        """

        self._depthtop = depthtop

    @property
    def des(self):
        """Gets the des of this OtherInhole.  # noqa: E501


        :return: The des of this OtherInhole.  # noqa: E501
        :rtype: str
        """
        return self._des

    @des.setter
    def des(self, des):
        """Sets the des of this OtherInhole.


        :param des: The des of this OtherInhole.  # noqa: E501
        :type: str
        """

        self._des = des

    @property
    def dttmmanufacture(self):
        """Gets the dttmmanufacture of this OtherInhole.  # noqa: E501


        :return: The dttmmanufacture of this OtherInhole.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmmanufacture

    @dttmmanufacture.setter
    def dttmmanufacture(self, dttmmanufacture):
        """Sets the dttmmanufacture of this OtherInhole.


        :param dttmmanufacture: The dttmmanufacture of this OtherInhole.  # noqa: E501
        :type: datetime
        """

        self._dttmmanufacture = dttmmanufacture

    @property
    def dttmonbottom(self):
        """Gets the dttmonbottom of this OtherInhole.  # noqa: E501


        :return: The dttmonbottom of this OtherInhole.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmonbottom

    @dttmonbottom.setter
    def dttmonbottom(self, dttmonbottom):
        """Sets the dttmonbottom of this OtherInhole.


        :param dttmonbottom: The dttmonbottom of this OtherInhole.  # noqa: E501
        :type: datetime
        """

        self._dttmonbottom = dttmonbottom

    @property
    def dttmoutofhole(self):
        """Gets the dttmoutofhole of this OtherInhole.  # noqa: E501


        :return: The dttmoutofhole of this OtherInhole.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmoutofhole

    @dttmoutofhole.setter
    def dttmoutofhole(self, dttmoutofhole):
        """Sets the dttmoutofhole of this OtherInhole.


        :param dttmoutofhole: The dttmoutofhole of this OtherInhole.  # noqa: E501
        :type: datetime
        """

        self._dttmoutofhole = dttmoutofhole

    @property
    def dttmpickup(self):
        """Gets the dttmpickup of this OtherInhole.  # noqa: E501


        :return: The dttmpickup of this OtherInhole.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmpickup

    @dttmpickup.setter
    def dttmpickup(self, dttmpickup):
        """Sets the dttmpickup of this OtherInhole.


        :param dttmpickup: The dttmpickup of this OtherInhole.  # noqa: E501
        :type: datetime
        """

        self._dttmpickup = dttmpickup

    @property
    def dttmpull(self):
        """Gets the dttmpull of this OtherInhole.  # noqa: E501


        :return: The dttmpull of this OtherInhole.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmpull

    @dttmpull.setter
    def dttmpull(self, dttmpull):
        """Sets the dttmpull of this OtherInhole.


        :param dttmpull: The dttmpull of this OtherInhole.  # noqa: E501
        :type: datetime
        """

        self._dttmpull = dttmpull

    @property
    def dttmrun(self):
        """Gets the dttmrun of this OtherInhole.  # noqa: E501


        :return: The dttmrun of this OtherInhole.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmrun

    @dttmrun.setter
    def dttmrun(self, dttmrun):
        """Sets the dttmrun of this OtherInhole.


        :param dttmrun: The dttmrun of this OtherInhole.  # noqa: E501
        :type: datetime
        """

        self._dttmrun = dttmrun

    @property
    def fishnecklength(self):
        """Gets the fishnecklength of this OtherInhole.  # noqa: E501


        :return: The fishnecklength of this OtherInhole.  # noqa: E501
        :rtype: OneOfOtherInholeFishnecklength
        """
        return self._fishnecklength

    @fishnecklength.setter
    def fishnecklength(self, fishnecklength):
        """Sets the fishnecklength of this OtherInhole.


        :param fishnecklength: The fishnecklength of this OtherInhole.  # noqa: E501
        :type: OneOfOtherInholeFishnecklength
        """

        self._fishnecklength = fishnecklength

    @property
    def fishneckod(self):
        """Gets the fishneckod of this OtherInhole.  # noqa: E501


        :return: The fishneckod of this OtherInhole.  # noqa: E501
        :rtype: OneOfOtherInholeFishneckod
        """
        return self._fishneckod

    @fishneckod.setter
    def fishneckod(self, fishneckod):
        """Sets the fishneckod of this OtherInhole.


        :param fishneckod: The fishneckod of this OtherInhole.  # noqa: E501
        :type: OneOfOtherInholeFishneckod
        """

        self._fishneckod = fishneckod

    @property
    def hoursstart(self):
        """Gets the hoursstart of this OtherInhole.  # noqa: E501


        :return: The hoursstart of this OtherInhole.  # noqa: E501
        :rtype: OneOfOtherInholeHoursstart
        """
        return self._hoursstart

    @hoursstart.setter
    def hoursstart(self, hoursstart):
        """Sets the hoursstart of this OtherInhole.


        :param hoursstart: The hoursstart of this OtherInhole.  # noqa: E501
        :type: OneOfOtherInholeHoursstart
        """

        self._hoursstart = hoursstart

    @property
    def iconname(self):
        """Gets the iconname of this OtherInhole.  # noqa: E501


        :return: The iconname of this OtherInhole.  # noqa: E501
        :rtype: str
        """
        return self._iconname

    @iconname.setter
    def iconname(self, iconname):
        """Sets the iconname of this OtherInhole.


        :param iconname: The iconname of this OtherInhole.  # noqa: E501
        :type: str
        """

        self._iconname = iconname

    @property
    def idrec(self):
        """Gets the idrec of this OtherInhole.  # noqa: E501


        :return: The idrec of this OtherInhole.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this OtherInhole.


        :param idrec: The idrec of this OtherInhole.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecjobpull(self):
        """Gets the idrecjobpull of this OtherInhole.  # noqa: E501


        :return: The idrecjobpull of this OtherInhole.  # noqa: E501
        :rtype: str
        """
        return self._idrecjobpull

    @idrecjobpull.setter
    def idrecjobpull(self, idrecjobpull):
        """Sets the idrecjobpull of this OtherInhole.


        :param idrecjobpull: The idrecjobpull of this OtherInhole.  # noqa: E501
        :type: str
        """

        self._idrecjobpull = idrecjobpull

    @property
    def idrecjobpulltk(self):
        """Gets the idrecjobpulltk of this OtherInhole.  # noqa: E501


        :return: The idrecjobpulltk of this OtherInhole.  # noqa: E501
        :rtype: str
        """
        return self._idrecjobpulltk

    @idrecjobpulltk.setter
    def idrecjobpulltk(self, idrecjobpulltk):
        """Sets the idrecjobpulltk of this OtherInhole.


        :param idrecjobpulltk: The idrecjobpulltk of this OtherInhole.  # noqa: E501
        :type: str
        """

        self._idrecjobpulltk = idrecjobpulltk

    @property
    def idrecjobrun(self):
        """Gets the idrecjobrun of this OtherInhole.  # noqa: E501


        :return: The idrecjobrun of this OtherInhole.  # noqa: E501
        :rtype: str
        """
        return self._idrecjobrun

    @idrecjobrun.setter
    def idrecjobrun(self, idrecjobrun):
        """Sets the idrecjobrun of this OtherInhole.


        :param idrecjobrun: The idrecjobrun of this OtherInhole.  # noqa: E501
        :type: str
        """

        self._idrecjobrun = idrecjobrun

    @property
    def idrecjobruntk(self):
        """Gets the idrecjobruntk of this OtherInhole.  # noqa: E501


        :return: The idrecjobruntk of this OtherInhole.  # noqa: E501
        :rtype: str
        """
        return self._idrecjobruntk

    @idrecjobruntk.setter
    def idrecjobruntk(self, idrecjobruntk):
        """Sets the idrecjobruntk of this OtherInhole.


        :param idrecjobruntk: The idrecjobruntk of this OtherInhole.  # noqa: E501
        :type: str
        """

        self._idrecjobruntk = idrecjobruntk

    @property
    def idrecstring(self):
        """Gets the idrecstring of this OtherInhole.  # noqa: E501


        :return: The idrecstring of this OtherInhole.  # noqa: E501
        :rtype: str
        """
        return self._idrecstring

    @idrecstring.setter
    def idrecstring(self, idrecstring):
        """Sets the idrecstring of this OtherInhole.


        :param idrecstring: The idrecstring of this OtherInhole.  # noqa: E501
        :type: str
        """

        self._idrecstring = idrecstring

    @property
    def idrecstringtk(self):
        """Gets the idrecstringtk of this OtherInhole.  # noqa: E501


        :return: The idrecstringtk of this OtherInhole.  # noqa: E501
        :rtype: str
        """
        return self._idrecstringtk

    @idrecstringtk.setter
    def idrecstringtk(self, idrecstringtk):
        """Sets the idrecstringtk of this OtherInhole.


        :param idrecstringtk: The idrecstringtk of this OtherInhole.  # noqa: E501
        :type: str
        """

        self._idrecstringtk = idrecstringtk

    @property
    def idrecwellbore(self):
        """Gets the idrecwellbore of this OtherInhole.  # noqa: E501


        :return: The idrecwellbore of this OtherInhole.  # noqa: E501
        :rtype: str
        """
        return self._idrecwellbore

    @idrecwellbore.setter
    def idrecwellbore(self, idrecwellbore):
        """Sets the idrecwellbore of this OtherInhole.


        :param idrecwellbore: The idrecwellbore of this OtherInhole.  # noqa: E501
        :type: str
        """

        self._idrecwellbore = idrecwellbore

    @property
    def idrecwellboretk(self):
        """Gets the idrecwellboretk of this OtherInhole.  # noqa: E501


        :return: The idrecwellboretk of this OtherInhole.  # noqa: E501
        :rtype: str
        """
        return self._idrecwellboretk

    @idrecwellboretk.setter
    def idrecwellboretk(self, idrecwellboretk):
        """Sets the idrecwellboretk of this OtherInhole.


        :param idrecwellboretk: The idrecwellboretk of this OtherInhole.  # noqa: E501
        :type: str
        """

        self._idrecwellboretk = idrecwellboretk

    @property
    def idwell(self):
        """Gets the idwell of this OtherInhole.  # noqa: E501


        :return: The idwell of this OtherInhole.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this OtherInhole.


        :param idwell: The idwell of this OtherInhole.  # noqa: E501
        :type: str
        """

        self._idwell = idwell

    @property
    def latposition(self):
        """Gets the latposition of this OtherInhole.  # noqa: E501


        :return: The latposition of this OtherInhole.  # noqa: E501
        :rtype: OneOfOtherInholeLatposition
        """
        return self._latposition

    @latposition.setter
    def latposition(self, latposition):
        """Sets the latposition of this OtherInhole.


        :param latposition: The latposition of this OtherInhole.  # noqa: E501
        :type: OneOfOtherInholeLatposition
        """

        self._latposition = latposition

    @property
    def make(self):
        """Gets the make of this OtherInhole.  # noqa: E501


        :return: The make of this OtherInhole.  # noqa: E501
        :rtype: str
        """
        return self._make

    @make.setter
    def make(self, make):
        """Sets the make of this OtherInhole.


        :param make: The make of this OtherInhole.  # noqa: E501
        :type: str
        """

        self._make = make

    @property
    def material(self):
        """Gets the material of this OtherInhole.  # noqa: E501


        :return: The material of this OtherInhole.  # noqa: E501
        :rtype: str
        """
        return self._material

    @material.setter
    def material(self, material):
        """Sets the material of this OtherInhole.


        :param material: The material of this OtherInhole.  # noqa: E501
        :type: str
        """

        self._material = material

    @property
    def model(self):
        """Gets the model of this OtherInhole.  # noqa: E501


        :return: The model of this OtherInhole.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this OtherInhole.


        :param model: The model of this OtherInhole.  # noqa: E501
        :type: str
        """

        self._model = model

    @property
    def other_inhole_accs(self):
        """Gets the other_inhole_accs of this OtherInhole.  # noqa: E501


        :return: The other_inhole_accs of this OtherInhole.  # noqa: E501
        :rtype: list[OtherInholeAcc]
        """
        return self._other_inhole_accs

    @other_inhole_accs.setter
    def other_inhole_accs(self, other_inhole_accs):
        """Sets the other_inhole_accs of this OtherInhole.


        :param other_inhole_accs: The other_inhole_accs of this OtherInhole.  # noqa: E501
        :type: list[OtherInholeAcc]
        """

        self._other_inhole_accs = other_inhole_accs

    @property
    def other_inhole_gps(self):
        """Gets the other_inhole_gps of this OtherInhole.  # noqa: E501


        :return: The other_inhole_gps of this OtherInhole.  # noqa: E501
        :rtype: list[OtherInholeGp]
        """
        return self._other_inhole_gps

    @other_inhole_gps.setter
    def other_inhole_gps(self, other_inhole_gps):
        """Sets the other_inhole_gps of this OtherInhole.


        :param other_inhole_gps: The other_inhole_gps of this OtherInhole.  # noqa: E501
        :type: list[OtherInholeGp]
        """

        self._other_inhole_gps = other_inhole_gps

    @property
    def other_inhole_packers(self):
        """Gets the other_inhole_packers of this OtherInhole.  # noqa: E501


        :return: The other_inhole_packers of this OtherInhole.  # noqa: E501
        :rtype: list[OtherInholePacker]
        """
        return self._other_inhole_packers

    @other_inhole_packers.setter
    def other_inhole_packers(self, other_inhole_packers):
        """Sets the other_inhole_packers of this OtherInhole.


        :param other_inhole_packers: The other_inhole_packers of this OtherInhole.  # noqa: E501
        :type: list[OtherInholePacker]
        """

        self._other_inhole_packers = other_inhole_packers

    @property
    def other_inhole_plungers(self):
        """Gets the other_inhole_plungers of this OtherInhole.  # noqa: E501


        :return: The other_inhole_plungers of this OtherInhole.  # noqa: E501
        :rtype: list[OtherInholePlunger]
        """
        return self._other_inhole_plungers

    @other_inhole_plungers.setter
    def other_inhole_plungers(self, other_inhole_plungers):
        """Sets the other_inhole_plungers of this OtherInhole.


        :param other_inhole_plungers: The other_inhole_plungers of this OtherInhole.  # noqa: E501
        :type: list[OtherInholePlunger]
        """

        self._other_inhole_plungers = other_inhole_plungers

    @property
    def other_inhole_pres_ratings(self):
        """Gets the other_inhole_pres_ratings of this OtherInhole.  # noqa: E501


        :return: The other_inhole_pres_ratings of this OtherInhole.  # noqa: E501
        :rtype: list[OtherInholePresRating]
        """
        return self._other_inhole_pres_ratings

    @other_inhole_pres_ratings.setter
    def other_inhole_pres_ratings(self, other_inhole_pres_ratings):
        """Sets the other_inhole_pres_ratings of this OtherInhole.


        :param other_inhole_pres_ratings: The other_inhole_pres_ratings of this OtherInhole.  # noqa: E501
        :type: list[OtherInholePresRating]
        """

        self._other_inhole_pres_ratings = other_inhole_pres_ratings

    @property
    def other_inhole_statuses(self):
        """Gets the other_inhole_statuses of this OtherInhole.  # noqa: E501


        :return: The other_inhole_statuses of this OtherInhole.  # noqa: E501
        :rtype: list[OtherInholeStatus]
        """
        return self._other_inhole_statuses

    @other_inhole_statuses.setter
    def other_inhole_statuses(self, other_inhole_statuses):
        """Sets the other_inhole_statuses of this OtherInhole.


        :param other_inhole_statuses: The other_inhole_statuses of this OtherInhole.  # noqa: E501
        :type: list[OtherInholeStatus]
        """

        self._other_inhole_statuses = other_inhole_statuses

    @property
    def presrating(self):
        """Gets the presrating of this OtherInhole.  # noqa: E501


        :return: The presrating of this OtherInhole.  # noqa: E501
        :rtype: OneOfOtherInholePresrating
        """
        return self._presrating

    @presrating.setter
    def presrating(self, presrating):
        """Sets the presrating of this OtherInhole.


        :param presrating: The presrating of this OtherInhole.  # noqa: E501
        :type: OneOfOtherInholePresrating
        """

        self._presrating = presrating

    @property
    def proposedpull(self):
        """Gets the proposedpull of this OtherInhole.  # noqa: E501


        :return: The proposedpull of this OtherInhole.  # noqa: E501
        :rtype: int
        """
        return self._proposedpull

    @proposedpull.setter
    def proposedpull(self, proposedpull):
        """Sets the proposedpull of this OtherInhole.


        :param proposedpull: The proposedpull of this OtherInhole.  # noqa: E501
        :type: int
        """

        self._proposedpull = proposedpull

    @property
    def proposedrun(self):
        """Gets the proposedrun of this OtherInhole.  # noqa: E501


        :return: The proposedrun of this OtherInhole.  # noqa: E501
        :rtype: int
        """
        return self._proposedrun

    @proposedrun.setter
    def proposedrun(self, proposedrun):
        """Sets the proposedrun of this OtherInhole.


        :param proposedrun: The proposedrun of this OtherInhole.  # noqa: E501
        :type: int
        """

        self._proposedrun = proposedrun

    @property
    def pullreason(self):
        """Gets the pullreason of this OtherInhole.  # noqa: E501


        :return: The pullreason of this OtherInhole.  # noqa: E501
        :rtype: str
        """
        return self._pullreason

    @pullreason.setter
    def pullreason(self, pullreason):
        """Sets the pullreason of this OtherInhole.


        :param pullreason: The pullreason of this OtherInhole.  # noqa: E501
        :type: str
        """

        self._pullreason = pullreason

    @property
    def pullreasondetail(self):
        """Gets the pullreasondetail of this OtherInhole.  # noqa: E501


        :return: The pullreasondetail of this OtherInhole.  # noqa: E501
        :rtype: str
        """
        return self._pullreasondetail

    @pullreasondetail.setter
    def pullreasondetail(self, pullreasondetail):
        """Sets the pullreasondetail of this OtherInhole.


        :param pullreasondetail: The pullreasondetail of this OtherInhole.  # noqa: E501
        :type: str
        """

        self._pullreasondetail = pullreasondetail

    @property
    def refid(self):
        """Gets the refid of this OtherInhole.  # noqa: E501


        :return: The refid of this OtherInhole.  # noqa: E501
        :rtype: str
        """
        return self._refid

    @refid.setter
    def refid(self, refid):
        """Sets the refid of this OtherInhole.


        :param refid: The refid of this OtherInhole.  # noqa: E501
        :type: str
        """

        self._refid = refid

    @property
    def sn(self):
        """Gets the sn of this OtherInhole.  # noqa: E501


        :return: The sn of this OtherInhole.  # noqa: E501
        :rtype: str
        """
        return self._sn

    @sn.setter
    def sn(self, sn):
        """Sets the sn of this OtherInhole.


        :param sn: The sn of this OtherInhole.  # noqa: E501
        :type: str
        """

        self._sn = sn

    @property
    def syscreatedate(self):
        """Gets the syscreatedate of this OtherInhole.  # noqa: E501


        :return: The syscreatedate of this OtherInhole.  # noqa: E501
        :rtype: datetime
        """
        return self._syscreatedate

    @syscreatedate.setter
    def syscreatedate(self, syscreatedate):
        """Sets the syscreatedate of this OtherInhole.


        :param syscreatedate: The syscreatedate of this OtherInhole.  # noqa: E501
        :type: datetime
        """

        self._syscreatedate = syscreatedate

    @property
    def syscreateuser(self):
        """Gets the syscreateuser of this OtherInhole.  # noqa: E501


        :return: The syscreateuser of this OtherInhole.  # noqa: E501
        :rtype: str
        """
        return self._syscreateuser

    @syscreateuser.setter
    def syscreateuser(self, syscreateuser):
        """Sets the syscreateuser of this OtherInhole.


        :param syscreateuser: The syscreateuser of this OtherInhole.  # noqa: E501
        :type: str
        """

        self._syscreateuser = syscreateuser

    @property
    def syslockchildren(self):
        """Gets the syslockchildren of this OtherInhole.  # noqa: E501


        :return: The syslockchildren of this OtherInhole.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildren

    @syslockchildren.setter
    def syslockchildren(self, syslockchildren):
        """Sets the syslockchildren of this OtherInhole.


        :param syslockchildren: The syslockchildren of this OtherInhole.  # noqa: E501
        :type: int
        """

        self._syslockchildren = syslockchildren

    @property
    def syslockchildrenui(self):
        """Gets the syslockchildrenui of this OtherInhole.  # noqa: E501


        :return: The syslockchildrenui of this OtherInhole.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildrenui

    @syslockchildrenui.setter
    def syslockchildrenui(self, syslockchildrenui):
        """Sets the syslockchildrenui of this OtherInhole.


        :param syslockchildrenui: The syslockchildrenui of this OtherInhole.  # noqa: E501
        :type: int
        """

        self._syslockchildrenui = syslockchildrenui

    @property
    def syslockdate(self):
        """Gets the syslockdate of this OtherInhole.  # noqa: E501


        :return: The syslockdate of this OtherInhole.  # noqa: E501
        :rtype: datetime
        """
        return self._syslockdate

    @syslockdate.setter
    def syslockdate(self, syslockdate):
        """Sets the syslockdate of this OtherInhole.


        :param syslockdate: The syslockdate of this OtherInhole.  # noqa: E501
        :type: datetime
        """

        self._syslockdate = syslockdate

    @property
    def syslockme(self):
        """Gets the syslockme of this OtherInhole.  # noqa: E501


        :return: The syslockme of this OtherInhole.  # noqa: E501
        :rtype: int
        """
        return self._syslockme

    @syslockme.setter
    def syslockme(self, syslockme):
        """Sets the syslockme of this OtherInhole.


        :param syslockme: The syslockme of this OtherInhole.  # noqa: E501
        :type: int
        """

        self._syslockme = syslockme

    @property
    def syslockmeui(self):
        """Gets the syslockmeui of this OtherInhole.  # noqa: E501


        :return: The syslockmeui of this OtherInhole.  # noqa: E501
        :rtype: int
        """
        return self._syslockmeui

    @syslockmeui.setter
    def syslockmeui(self, syslockmeui):
        """Sets the syslockmeui of this OtherInhole.


        :param syslockmeui: The syslockmeui of this OtherInhole.  # noqa: E501
        :type: int
        """

        self._syslockmeui = syslockmeui

    @property
    def sysmoddate(self):
        """Gets the sysmoddate of this OtherInhole.  # noqa: E501


        :return: The sysmoddate of this OtherInhole.  # noqa: E501
        :rtype: datetime
        """
        return self._sysmoddate

    @sysmoddate.setter
    def sysmoddate(self, sysmoddate):
        """Sets the sysmoddate of this OtherInhole.


        :param sysmoddate: The sysmoddate of this OtherInhole.  # noqa: E501
        :type: datetime
        """

        self._sysmoddate = sysmoddate

    @property
    def sysmoduser(self):
        """Gets the sysmoduser of this OtherInhole.  # noqa: E501


        :return: The sysmoduser of this OtherInhole.  # noqa: E501
        :rtype: str
        """
        return self._sysmoduser

    @sysmoduser.setter
    def sysmoduser(self, sysmoduser):
        """Sets the sysmoduser of this OtherInhole.


        :param sysmoduser: The sysmoduser of this OtherInhole.  # noqa: E501
        :type: str
        """

        self._sysmoduser = sysmoduser

    @property
    def systag(self):
        """Gets the systag of this OtherInhole.  # noqa: E501


        :return: The systag of this OtherInhole.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this OtherInhole.


        :param systag: The systag of this OtherInhole.  # noqa: E501
        :type: str
        """

        self._systag = systag

    @property
    def szdrift(self):
        """Gets the szdrift of this OtherInhole.  # noqa: E501


        :return: The szdrift of this OtherInhole.  # noqa: E501
        :rtype: OneOfOtherInholeSzdrift
        """
        return self._szdrift

    @szdrift.setter
    def szdrift(self, szdrift):
        """Sets the szdrift of this OtherInhole.


        :param szdrift: The szdrift of this OtherInhole.  # noqa: E501
        :type: OneOfOtherInholeSzdrift
        """

        self._szdrift = szdrift

    @property
    def szidnom(self):
        """Gets the szidnom of this OtherInhole.  # noqa: E501


        :return: The szidnom of this OtherInhole.  # noqa: E501
        :rtype: OneOfOtherInholeSzidnom
        """
        return self._szidnom

    @szidnom.setter
    def szidnom(self, szidnom):
        """Sets the szidnom of this OtherInhole.


        :param szidnom: The szidnom of this OtherInhole.  # noqa: E501
        :type: OneOfOtherInholeSzidnom
        """

        self._szidnom = szidnom

    @property
    def szodmax(self):
        """Gets the szodmax of this OtherInhole.  # noqa: E501


        :return: The szodmax of this OtherInhole.  # noqa: E501
        :rtype: OneOfOtherInholeSzodmax
        """
        return self._szodmax

    @szodmax.setter
    def szodmax(self, szodmax):
        """Sets the szodmax of this OtherInhole.


        :param szodmax: The szodmax of this OtherInhole.  # noqa: E501
        :type: OneOfOtherInholeSzodmax
        """

        self._szodmax = szodmax

    @property
    def szodnom(self):
        """Gets the szodnom of this OtherInhole.  # noqa: E501


        :return: The szodnom of this OtherInhole.  # noqa: E501
        :rtype: OneOfOtherInholeSzodnom
        """
        return self._szodnom

    @szodnom.setter
    def szodnom(self, szodnom):
        """Sets the szodnom of this OtherInhole.


        :param szodnom: The szodnom of this OtherInhole.  # noqa: E501
        :type: OneOfOtherInholeSzodnom
        """

        self._szodnom = szodnom

    @property
    def temprating(self):
        """Gets the temprating of this OtherInhole.  # noqa: E501


        :return: The temprating of this OtherInhole.  # noqa: E501
        :rtype: OneOfOtherInholeTemprating
        """
        return self._temprating

    @temprating.setter
    def temprating(self, temprating):
        """Sets the temprating of this OtherInhole.


        :param temprating: The temprating of this OtherInhole.  # noqa: E501
        :type: OneOfOtherInholeTemprating
        """

        self._temprating = temprating

    @property
    def wellheader(self):
        """Gets the wellheader of this OtherInhole.  # noqa: E501


        :return: The wellheader of this OtherInhole.  # noqa: E501
        :rtype: AnyOfOtherInholeWellheader
        """
        return self._wellheader

    @wellheader.setter
    def wellheader(self, wellheader):
        """Sets the wellheader of this OtherInhole.


        :param wellheader: The wellheader of this OtherInhole.  # noqa: E501
        :type: AnyOfOtherInholeWellheader
        """

        self._wellheader = wellheader

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OtherInhole, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OtherInhole):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
