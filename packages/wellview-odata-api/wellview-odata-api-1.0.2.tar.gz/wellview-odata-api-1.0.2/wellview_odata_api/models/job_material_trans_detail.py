# coding: utf-8

"""
    OData Service for namespace Default

    This OData service is located at http://localhost  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class JobMaterialTransDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cond': 'str',
        'cost': 'OneOfJobMaterialTransDetailCost',
        'costused': 'OneOfJobMaterialTransDetailCostused',
        'durequipinservice': 'OneOfJobMaterialTransDetailDurequipinservice',
        'environmenttyp': 'str',
        'idrec': 'str',
        'idrecparent': 'str',
        'idwell': 'str',
        'job_material_trans': 'AnyOfJobMaterialTransDetailJobMaterialTrans',
        'length': 'OneOfJobMaterialTransDetailLength',
        'materialdes': 'str',
        'materialrefno': 'str',
        'materialtyp1': 'str',
        'materialtyp2': 'str',
        'mattransdetailida': 'str',
        'mattransdetailidb': 'str',
        'note': 'str',
        'qty': 'OneOfJobMaterialTransDetailQty',
        'qtyunitlabel': 'str',
        'reason': 'str',
        'rental': 'int',
        'sn': 'str',
        'syscreatedate': 'datetime',
        'syscreateuser': 'str',
        'syslockchildren': 'int',
        'syslockchildrenui': 'int',
        'syslockdate': 'datetime',
        'syslockme': 'int',
        'syslockmeui': 'int',
        'sysmoddate': 'datetime',
        'sysmoduser': 'str',
        'sysseq': 'int',
        'systag': 'str',
        'usernum1': 'OneOfJobMaterialTransDetailUsernum1',
        'usertxt1': 'str'
    }

    attribute_map = {
        'cond': 'cond',
        'cost': 'cost',
        'costused': 'costused',
        'durequipinservice': 'durequipinservice',
        'environmenttyp': 'environmenttyp',
        'idrec': 'idrec',
        'idrecparent': 'idrecparent',
        'idwell': 'idwell',
        'job_material_trans': 'jobMaterialTrans',
        'length': 'length',
        'materialdes': 'materialdes',
        'materialrefno': 'materialrefno',
        'materialtyp1': 'materialtyp1',
        'materialtyp2': 'materialtyp2',
        'mattransdetailida': 'mattransdetailida',
        'mattransdetailidb': 'mattransdetailidb',
        'note': 'note',
        'qty': 'qty',
        'qtyunitlabel': 'qtyunitlabel',
        'reason': 'reason',
        'rental': 'rental',
        'sn': 'sn',
        'syscreatedate': 'syscreatedate',
        'syscreateuser': 'syscreateuser',
        'syslockchildren': 'syslockchildren',
        'syslockchildrenui': 'syslockchildrenui',
        'syslockdate': 'syslockdate',
        'syslockme': 'syslockme',
        'syslockmeui': 'syslockmeui',
        'sysmoddate': 'sysmoddate',
        'sysmoduser': 'sysmoduser',
        'sysseq': 'sysseq',
        'systag': 'systag',
        'usernum1': 'usernum1',
        'usertxt1': 'usertxt1'
    }

    def __init__(self, cond=None, cost=None, costused=None, durequipinservice=None, environmenttyp=None, idrec=None, idrecparent=None, idwell=None, job_material_trans=None, length=None, materialdes=None, materialrefno=None, materialtyp1=None, materialtyp2=None, mattransdetailida=None, mattransdetailidb=None, note=None, qty=None, qtyunitlabel=None, reason=None, rental=None, sn=None, syscreatedate=None, syscreateuser=None, syslockchildren=None, syslockchildrenui=None, syslockdate=None, syslockme=None, syslockmeui=None, sysmoddate=None, sysmoduser=None, sysseq=None, systag=None, usernum1=None, usertxt1=None):  # noqa: E501
        """JobMaterialTransDetail - a model defined in Swagger"""  # noqa: E501
        self._cond = None
        self._cost = None
        self._costused = None
        self._durequipinservice = None
        self._environmenttyp = None
        self._idrec = None
        self._idrecparent = None
        self._idwell = None
        self._job_material_trans = None
        self._length = None
        self._materialdes = None
        self._materialrefno = None
        self._materialtyp1 = None
        self._materialtyp2 = None
        self._mattransdetailida = None
        self._mattransdetailidb = None
        self._note = None
        self._qty = None
        self._qtyunitlabel = None
        self._reason = None
        self._rental = None
        self._sn = None
        self._syscreatedate = None
        self._syscreateuser = None
        self._syslockchildren = None
        self._syslockchildrenui = None
        self._syslockdate = None
        self._syslockme = None
        self._syslockmeui = None
        self._sysmoddate = None
        self._sysmoduser = None
        self._sysseq = None
        self._systag = None
        self._usernum1 = None
        self._usertxt1 = None
        self.discriminator = None
        if cond is not None:
            self.cond = cond
        if cost is not None:
            self.cost = cost
        if costused is not None:
            self.costused = costused
        if durequipinservice is not None:
            self.durequipinservice = durequipinservice
        if environmenttyp is not None:
            self.environmenttyp = environmenttyp
        if idrec is not None:
            self.idrec = idrec
        if idrecparent is not None:
            self.idrecparent = idrecparent
        if idwell is not None:
            self.idwell = idwell
        if job_material_trans is not None:
            self.job_material_trans = job_material_trans
        if length is not None:
            self.length = length
        if materialdes is not None:
            self.materialdes = materialdes
        if materialrefno is not None:
            self.materialrefno = materialrefno
        if materialtyp1 is not None:
            self.materialtyp1 = materialtyp1
        if materialtyp2 is not None:
            self.materialtyp2 = materialtyp2
        if mattransdetailida is not None:
            self.mattransdetailida = mattransdetailida
        if mattransdetailidb is not None:
            self.mattransdetailidb = mattransdetailidb
        if note is not None:
            self.note = note
        if qty is not None:
            self.qty = qty
        if qtyunitlabel is not None:
            self.qtyunitlabel = qtyunitlabel
        if reason is not None:
            self.reason = reason
        if rental is not None:
            self.rental = rental
        if sn is not None:
            self.sn = sn
        if syscreatedate is not None:
            self.syscreatedate = syscreatedate
        if syscreateuser is not None:
            self.syscreateuser = syscreateuser
        if syslockchildren is not None:
            self.syslockchildren = syslockchildren
        if syslockchildrenui is not None:
            self.syslockchildrenui = syslockchildrenui
        if syslockdate is not None:
            self.syslockdate = syslockdate
        if syslockme is not None:
            self.syslockme = syslockme
        if syslockmeui is not None:
            self.syslockmeui = syslockmeui
        if sysmoddate is not None:
            self.sysmoddate = sysmoddate
        if sysmoduser is not None:
            self.sysmoduser = sysmoduser
        if sysseq is not None:
            self.sysseq = sysseq
        if systag is not None:
            self.systag = systag
        if usernum1 is not None:
            self.usernum1 = usernum1
        if usertxt1 is not None:
            self.usertxt1 = usertxt1

    @property
    def cond(self):
        """Gets the cond of this JobMaterialTransDetail.  # noqa: E501


        :return: The cond of this JobMaterialTransDetail.  # noqa: E501
        :rtype: str
        """
        return self._cond

    @cond.setter
    def cond(self, cond):
        """Sets the cond of this JobMaterialTransDetail.


        :param cond: The cond of this JobMaterialTransDetail.  # noqa: E501
        :type: str
        """

        self._cond = cond

    @property
    def cost(self):
        """Gets the cost of this JobMaterialTransDetail.  # noqa: E501


        :return: The cost of this JobMaterialTransDetail.  # noqa: E501
        :rtype: OneOfJobMaterialTransDetailCost
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this JobMaterialTransDetail.


        :param cost: The cost of this JobMaterialTransDetail.  # noqa: E501
        :type: OneOfJobMaterialTransDetailCost
        """

        self._cost = cost

    @property
    def costused(self):
        """Gets the costused of this JobMaterialTransDetail.  # noqa: E501


        :return: The costused of this JobMaterialTransDetail.  # noqa: E501
        :rtype: OneOfJobMaterialTransDetailCostused
        """
        return self._costused

    @costused.setter
    def costused(self, costused):
        """Sets the costused of this JobMaterialTransDetail.


        :param costused: The costused of this JobMaterialTransDetail.  # noqa: E501
        :type: OneOfJobMaterialTransDetailCostused
        """

        self._costused = costused

    @property
    def durequipinservice(self):
        """Gets the durequipinservice of this JobMaterialTransDetail.  # noqa: E501


        :return: The durequipinservice of this JobMaterialTransDetail.  # noqa: E501
        :rtype: OneOfJobMaterialTransDetailDurequipinservice
        """
        return self._durequipinservice

    @durequipinservice.setter
    def durequipinservice(self, durequipinservice):
        """Sets the durequipinservice of this JobMaterialTransDetail.


        :param durequipinservice: The durequipinservice of this JobMaterialTransDetail.  # noqa: E501
        :type: OneOfJobMaterialTransDetailDurequipinservice
        """

        self._durequipinservice = durequipinservice

    @property
    def environmenttyp(self):
        """Gets the environmenttyp of this JobMaterialTransDetail.  # noqa: E501


        :return: The environmenttyp of this JobMaterialTransDetail.  # noqa: E501
        :rtype: str
        """
        return self._environmenttyp

    @environmenttyp.setter
    def environmenttyp(self, environmenttyp):
        """Sets the environmenttyp of this JobMaterialTransDetail.


        :param environmenttyp: The environmenttyp of this JobMaterialTransDetail.  # noqa: E501
        :type: str
        """

        self._environmenttyp = environmenttyp

    @property
    def idrec(self):
        """Gets the idrec of this JobMaterialTransDetail.  # noqa: E501


        :return: The idrec of this JobMaterialTransDetail.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this JobMaterialTransDetail.


        :param idrec: The idrec of this JobMaterialTransDetail.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecparent(self):
        """Gets the idrecparent of this JobMaterialTransDetail.  # noqa: E501


        :return: The idrecparent of this JobMaterialTransDetail.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this JobMaterialTransDetail.


        :param idrecparent: The idrecparent of this JobMaterialTransDetail.  # noqa: E501
        :type: str
        """

        self._idrecparent = idrecparent

    @property
    def idwell(self):
        """Gets the idwell of this JobMaterialTransDetail.  # noqa: E501


        :return: The idwell of this JobMaterialTransDetail.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this JobMaterialTransDetail.


        :param idwell: The idwell of this JobMaterialTransDetail.  # noqa: E501
        :type: str
        """

        self._idwell = idwell

    @property
    def job_material_trans(self):
        """Gets the job_material_trans of this JobMaterialTransDetail.  # noqa: E501


        :return: The job_material_trans of this JobMaterialTransDetail.  # noqa: E501
        :rtype: AnyOfJobMaterialTransDetailJobMaterialTrans
        """
        return self._job_material_trans

    @job_material_trans.setter
    def job_material_trans(self, job_material_trans):
        """Sets the job_material_trans of this JobMaterialTransDetail.


        :param job_material_trans: The job_material_trans of this JobMaterialTransDetail.  # noqa: E501
        :type: AnyOfJobMaterialTransDetailJobMaterialTrans
        """

        self._job_material_trans = job_material_trans

    @property
    def length(self):
        """Gets the length of this JobMaterialTransDetail.  # noqa: E501


        :return: The length of this JobMaterialTransDetail.  # noqa: E501
        :rtype: OneOfJobMaterialTransDetailLength
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this JobMaterialTransDetail.


        :param length: The length of this JobMaterialTransDetail.  # noqa: E501
        :type: OneOfJobMaterialTransDetailLength
        """

        self._length = length

    @property
    def materialdes(self):
        """Gets the materialdes of this JobMaterialTransDetail.  # noqa: E501


        :return: The materialdes of this JobMaterialTransDetail.  # noqa: E501
        :rtype: str
        """
        return self._materialdes

    @materialdes.setter
    def materialdes(self, materialdes):
        """Sets the materialdes of this JobMaterialTransDetail.


        :param materialdes: The materialdes of this JobMaterialTransDetail.  # noqa: E501
        :type: str
        """

        self._materialdes = materialdes

    @property
    def materialrefno(self):
        """Gets the materialrefno of this JobMaterialTransDetail.  # noqa: E501


        :return: The materialrefno of this JobMaterialTransDetail.  # noqa: E501
        :rtype: str
        """
        return self._materialrefno

    @materialrefno.setter
    def materialrefno(self, materialrefno):
        """Sets the materialrefno of this JobMaterialTransDetail.


        :param materialrefno: The materialrefno of this JobMaterialTransDetail.  # noqa: E501
        :type: str
        """

        self._materialrefno = materialrefno

    @property
    def materialtyp1(self):
        """Gets the materialtyp1 of this JobMaterialTransDetail.  # noqa: E501


        :return: The materialtyp1 of this JobMaterialTransDetail.  # noqa: E501
        :rtype: str
        """
        return self._materialtyp1

    @materialtyp1.setter
    def materialtyp1(self, materialtyp1):
        """Sets the materialtyp1 of this JobMaterialTransDetail.


        :param materialtyp1: The materialtyp1 of this JobMaterialTransDetail.  # noqa: E501
        :type: str
        """

        self._materialtyp1 = materialtyp1

    @property
    def materialtyp2(self):
        """Gets the materialtyp2 of this JobMaterialTransDetail.  # noqa: E501


        :return: The materialtyp2 of this JobMaterialTransDetail.  # noqa: E501
        :rtype: str
        """
        return self._materialtyp2

    @materialtyp2.setter
    def materialtyp2(self, materialtyp2):
        """Sets the materialtyp2 of this JobMaterialTransDetail.


        :param materialtyp2: The materialtyp2 of this JobMaterialTransDetail.  # noqa: E501
        :type: str
        """

        self._materialtyp2 = materialtyp2

    @property
    def mattransdetailida(self):
        """Gets the mattransdetailida of this JobMaterialTransDetail.  # noqa: E501


        :return: The mattransdetailida of this JobMaterialTransDetail.  # noqa: E501
        :rtype: str
        """
        return self._mattransdetailida

    @mattransdetailida.setter
    def mattransdetailida(self, mattransdetailida):
        """Sets the mattransdetailida of this JobMaterialTransDetail.


        :param mattransdetailida: The mattransdetailida of this JobMaterialTransDetail.  # noqa: E501
        :type: str
        """

        self._mattransdetailida = mattransdetailida

    @property
    def mattransdetailidb(self):
        """Gets the mattransdetailidb of this JobMaterialTransDetail.  # noqa: E501


        :return: The mattransdetailidb of this JobMaterialTransDetail.  # noqa: E501
        :rtype: str
        """
        return self._mattransdetailidb

    @mattransdetailidb.setter
    def mattransdetailidb(self, mattransdetailidb):
        """Sets the mattransdetailidb of this JobMaterialTransDetail.


        :param mattransdetailidb: The mattransdetailidb of this JobMaterialTransDetail.  # noqa: E501
        :type: str
        """

        self._mattransdetailidb = mattransdetailidb

    @property
    def note(self):
        """Gets the note of this JobMaterialTransDetail.  # noqa: E501


        :return: The note of this JobMaterialTransDetail.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this JobMaterialTransDetail.


        :param note: The note of this JobMaterialTransDetail.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def qty(self):
        """Gets the qty of this JobMaterialTransDetail.  # noqa: E501


        :return: The qty of this JobMaterialTransDetail.  # noqa: E501
        :rtype: OneOfJobMaterialTransDetailQty
        """
        return self._qty

    @qty.setter
    def qty(self, qty):
        """Sets the qty of this JobMaterialTransDetail.


        :param qty: The qty of this JobMaterialTransDetail.  # noqa: E501
        :type: OneOfJobMaterialTransDetailQty
        """

        self._qty = qty

    @property
    def qtyunitlabel(self):
        """Gets the qtyunitlabel of this JobMaterialTransDetail.  # noqa: E501


        :return: The qtyunitlabel of this JobMaterialTransDetail.  # noqa: E501
        :rtype: str
        """
        return self._qtyunitlabel

    @qtyunitlabel.setter
    def qtyunitlabel(self, qtyunitlabel):
        """Sets the qtyunitlabel of this JobMaterialTransDetail.


        :param qtyunitlabel: The qtyunitlabel of this JobMaterialTransDetail.  # noqa: E501
        :type: str
        """

        self._qtyunitlabel = qtyunitlabel

    @property
    def reason(self):
        """Gets the reason of this JobMaterialTransDetail.  # noqa: E501


        :return: The reason of this JobMaterialTransDetail.  # noqa: E501
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this JobMaterialTransDetail.


        :param reason: The reason of this JobMaterialTransDetail.  # noqa: E501
        :type: str
        """

        self._reason = reason

    @property
    def rental(self):
        """Gets the rental of this JobMaterialTransDetail.  # noqa: E501


        :return: The rental of this JobMaterialTransDetail.  # noqa: E501
        :rtype: int
        """
        return self._rental

    @rental.setter
    def rental(self, rental):
        """Sets the rental of this JobMaterialTransDetail.


        :param rental: The rental of this JobMaterialTransDetail.  # noqa: E501
        :type: int
        """

        self._rental = rental

    @property
    def sn(self):
        """Gets the sn of this JobMaterialTransDetail.  # noqa: E501


        :return: The sn of this JobMaterialTransDetail.  # noqa: E501
        :rtype: str
        """
        return self._sn

    @sn.setter
    def sn(self, sn):
        """Sets the sn of this JobMaterialTransDetail.


        :param sn: The sn of this JobMaterialTransDetail.  # noqa: E501
        :type: str
        """

        self._sn = sn

    @property
    def syscreatedate(self):
        """Gets the syscreatedate of this JobMaterialTransDetail.  # noqa: E501


        :return: The syscreatedate of this JobMaterialTransDetail.  # noqa: E501
        :rtype: datetime
        """
        return self._syscreatedate

    @syscreatedate.setter
    def syscreatedate(self, syscreatedate):
        """Sets the syscreatedate of this JobMaterialTransDetail.


        :param syscreatedate: The syscreatedate of this JobMaterialTransDetail.  # noqa: E501
        :type: datetime
        """

        self._syscreatedate = syscreatedate

    @property
    def syscreateuser(self):
        """Gets the syscreateuser of this JobMaterialTransDetail.  # noqa: E501


        :return: The syscreateuser of this JobMaterialTransDetail.  # noqa: E501
        :rtype: str
        """
        return self._syscreateuser

    @syscreateuser.setter
    def syscreateuser(self, syscreateuser):
        """Sets the syscreateuser of this JobMaterialTransDetail.


        :param syscreateuser: The syscreateuser of this JobMaterialTransDetail.  # noqa: E501
        :type: str
        """

        self._syscreateuser = syscreateuser

    @property
    def syslockchildren(self):
        """Gets the syslockchildren of this JobMaterialTransDetail.  # noqa: E501


        :return: The syslockchildren of this JobMaterialTransDetail.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildren

    @syslockchildren.setter
    def syslockchildren(self, syslockchildren):
        """Sets the syslockchildren of this JobMaterialTransDetail.


        :param syslockchildren: The syslockchildren of this JobMaterialTransDetail.  # noqa: E501
        :type: int
        """

        self._syslockchildren = syslockchildren

    @property
    def syslockchildrenui(self):
        """Gets the syslockchildrenui of this JobMaterialTransDetail.  # noqa: E501


        :return: The syslockchildrenui of this JobMaterialTransDetail.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildrenui

    @syslockchildrenui.setter
    def syslockchildrenui(self, syslockchildrenui):
        """Sets the syslockchildrenui of this JobMaterialTransDetail.


        :param syslockchildrenui: The syslockchildrenui of this JobMaterialTransDetail.  # noqa: E501
        :type: int
        """

        self._syslockchildrenui = syslockchildrenui

    @property
    def syslockdate(self):
        """Gets the syslockdate of this JobMaterialTransDetail.  # noqa: E501


        :return: The syslockdate of this JobMaterialTransDetail.  # noqa: E501
        :rtype: datetime
        """
        return self._syslockdate

    @syslockdate.setter
    def syslockdate(self, syslockdate):
        """Sets the syslockdate of this JobMaterialTransDetail.


        :param syslockdate: The syslockdate of this JobMaterialTransDetail.  # noqa: E501
        :type: datetime
        """

        self._syslockdate = syslockdate

    @property
    def syslockme(self):
        """Gets the syslockme of this JobMaterialTransDetail.  # noqa: E501


        :return: The syslockme of this JobMaterialTransDetail.  # noqa: E501
        :rtype: int
        """
        return self._syslockme

    @syslockme.setter
    def syslockme(self, syslockme):
        """Sets the syslockme of this JobMaterialTransDetail.


        :param syslockme: The syslockme of this JobMaterialTransDetail.  # noqa: E501
        :type: int
        """

        self._syslockme = syslockme

    @property
    def syslockmeui(self):
        """Gets the syslockmeui of this JobMaterialTransDetail.  # noqa: E501


        :return: The syslockmeui of this JobMaterialTransDetail.  # noqa: E501
        :rtype: int
        """
        return self._syslockmeui

    @syslockmeui.setter
    def syslockmeui(self, syslockmeui):
        """Sets the syslockmeui of this JobMaterialTransDetail.


        :param syslockmeui: The syslockmeui of this JobMaterialTransDetail.  # noqa: E501
        :type: int
        """

        self._syslockmeui = syslockmeui

    @property
    def sysmoddate(self):
        """Gets the sysmoddate of this JobMaterialTransDetail.  # noqa: E501


        :return: The sysmoddate of this JobMaterialTransDetail.  # noqa: E501
        :rtype: datetime
        """
        return self._sysmoddate

    @sysmoddate.setter
    def sysmoddate(self, sysmoddate):
        """Sets the sysmoddate of this JobMaterialTransDetail.


        :param sysmoddate: The sysmoddate of this JobMaterialTransDetail.  # noqa: E501
        :type: datetime
        """

        self._sysmoddate = sysmoddate

    @property
    def sysmoduser(self):
        """Gets the sysmoduser of this JobMaterialTransDetail.  # noqa: E501


        :return: The sysmoduser of this JobMaterialTransDetail.  # noqa: E501
        :rtype: str
        """
        return self._sysmoduser

    @sysmoduser.setter
    def sysmoduser(self, sysmoduser):
        """Sets the sysmoduser of this JobMaterialTransDetail.


        :param sysmoduser: The sysmoduser of this JobMaterialTransDetail.  # noqa: E501
        :type: str
        """

        self._sysmoduser = sysmoduser

    @property
    def sysseq(self):
        """Gets the sysseq of this JobMaterialTransDetail.  # noqa: E501


        :return: The sysseq of this JobMaterialTransDetail.  # noqa: E501
        :rtype: int
        """
        return self._sysseq

    @sysseq.setter
    def sysseq(self, sysseq):
        """Sets the sysseq of this JobMaterialTransDetail.


        :param sysseq: The sysseq of this JobMaterialTransDetail.  # noqa: E501
        :type: int
        """

        self._sysseq = sysseq

    @property
    def systag(self):
        """Gets the systag of this JobMaterialTransDetail.  # noqa: E501


        :return: The systag of this JobMaterialTransDetail.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this JobMaterialTransDetail.


        :param systag: The systag of this JobMaterialTransDetail.  # noqa: E501
        :type: str
        """

        self._systag = systag

    @property
    def usernum1(self):
        """Gets the usernum1 of this JobMaterialTransDetail.  # noqa: E501


        :return: The usernum1 of this JobMaterialTransDetail.  # noqa: E501
        :rtype: OneOfJobMaterialTransDetailUsernum1
        """
        return self._usernum1

    @usernum1.setter
    def usernum1(self, usernum1):
        """Sets the usernum1 of this JobMaterialTransDetail.


        :param usernum1: The usernum1 of this JobMaterialTransDetail.  # noqa: E501
        :type: OneOfJobMaterialTransDetailUsernum1
        """

        self._usernum1 = usernum1

    @property
    def usertxt1(self):
        """Gets the usertxt1 of this JobMaterialTransDetail.  # noqa: E501


        :return: The usertxt1 of this JobMaterialTransDetail.  # noqa: E501
        :rtype: str
        """
        return self._usertxt1

    @usertxt1.setter
    def usertxt1(self, usertxt1):
        """Sets the usertxt1 of this JobMaterialTransDetail.


        :param usertxt1: The usertxt1 of this JobMaterialTransDetail.  # noqa: E501
        :type: str
        """

        self._usertxt1 = usertxt1

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JobMaterialTransDetail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobMaterialTransDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
