# coding: utf-8

"""
    OData Service for namespace Default

    This OData service is located at http://localhost  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Perforation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'balance': 'str',
        'balancepres': 'OneOfPerforationBalancepres',
        'carrierdes': 'str',
        'carriermake': 'str',
        'chargemake': 'str',
        'chargesz': 'OneOfPerforationChargesz',
        'chargetyp': 'str',
        'cluserrefno': 'OneOfPerforationCluserrefno',
        'com': 'str',
        'contractor': 'str',
        'conveymeth': 'str',
        'depthbtm': 'OneOfPerforationDepthbtm',
        'depthcsngcollarref': 'OneOfPerforationDepthcsngcollarref',
        'depthfluidafter': 'OneOfPerforationDepthfluidafter',
        'depthfluidbefore': 'OneOfPerforationDepthfluidbefore',
        'depthgauge': 'OneOfPerforationDepthgauge',
        'depthtop': 'OneOfPerforationDepthtop',
        'dttm': 'datetime',
        'explosivetyp': 'str',
        'fluiddensity': 'OneOfPerforationFluiddensity',
        'fluidtyp': 'str',
        'guncentralize': 'str',
        'gundes': 'str',
        'gunleftinhole': 'int',
        'gunmetallurgy': 'str',
        'icondrawshort': 'int',
        'idrec': 'str',
        'idrecjob': 'str',
        'idrecjobtk': 'str',
        'idreclog': 'str',
        'idreclogtk': 'str',
        'idrecstring': 'str',
        'idrecstringtk': 'str',
        'idrecwellbore': 'str',
        'idrecwellboretk': 'str',
        'idreczoneor': 'str',
        'idreczoneortk': 'str',
        'idwell': 'str',
        'intno': 'OneOfPerforationIntno',
        'orientation': 'str',
        'orientmethod': 'str',
        'penetrationnom': 'OneOfPerforationPenetrationnom',
        'perforation_statuses': 'list[PerforationStatus]',
        'phasing': 'OneOfPerforationPhasing',
        'presbh': 'OneOfPerforationPresbh',
        'presbhtyp': 'str',
        'presdatum': 'OneOfPerforationPresdatum',
        'presdesignbh': 'OneOfPerforationPresdesignbh',
        'presduringperf': 'OneOfPerforationPresduringperf',
        'presfinalsurf': 'OneOfPerforationPresfinalsurf',
        'presgradientgaugetompp': 'OneOfPerforationPresgradientgaugetompp',
        'preshhsurftompp': 'OneOfPerforationPreshhsurftompp',
        'presinitsurf': 'OneOfPerforationPresinitsurf',
        'presmpp': 'OneOfPerforationPresmpp',
        'proposed': 'int',
        'ratefluidafter': 'OneOfPerforationRatefluidafter',
        'ratefluidbefore': 'OneOfPerforationRatefluidbefore',
        'resulttechnical': 'str',
        'resulttechnicaldetail': 'str',
        'resulttechnicalnote': 'str',
        'shotdensity': 'OneOfPerforationShotdensity',
        'shotplan': 'int',
        'shottotal': 'int',
        'syscreatedate': 'datetime',
        'syscreateuser': 'str',
        'syslockchildren': 'int',
        'syslockchildrenui': 'int',
        'syslockdate': 'datetime',
        'syslockme': 'int',
        'syslockmeui': 'int',
        'sysmoddate': 'datetime',
        'sysmoduser': 'str',
        'systag': 'str',
        'szgun': 'OneOfPerforationSzgun',
        'szholeact': 'OneOfPerforationSzholeact',
        'szholenom': 'OneOfPerforationSzholenom',
        'typ': 'str',
        'wellheader': 'AnyOfPerforationWellheader'
    }

    attribute_map = {
        'balance': 'balance',
        'balancepres': 'balancepres',
        'carrierdes': 'carrierdes',
        'carriermake': 'carriermake',
        'chargemake': 'chargemake',
        'chargesz': 'chargesz',
        'chargetyp': 'chargetyp',
        'cluserrefno': 'cluserrefno',
        'com': 'com',
        'contractor': 'contractor',
        'conveymeth': 'conveymeth',
        'depthbtm': 'depthbtm',
        'depthcsngcollarref': 'depthcsngcollarref',
        'depthfluidafter': 'depthfluidafter',
        'depthfluidbefore': 'depthfluidbefore',
        'depthgauge': 'depthgauge',
        'depthtop': 'depthtop',
        'dttm': 'dttm',
        'explosivetyp': 'explosivetyp',
        'fluiddensity': 'fluiddensity',
        'fluidtyp': 'fluidtyp',
        'guncentralize': 'guncentralize',
        'gundes': 'gundes',
        'gunleftinhole': 'gunleftinhole',
        'gunmetallurgy': 'gunmetallurgy',
        'icondrawshort': 'icondrawshort',
        'idrec': 'idrec',
        'idrecjob': 'idrecjob',
        'idrecjobtk': 'idrecjobtk',
        'idreclog': 'idreclog',
        'idreclogtk': 'idreclogtk',
        'idrecstring': 'idrecstring',
        'idrecstringtk': 'idrecstringtk',
        'idrecwellbore': 'idrecwellbore',
        'idrecwellboretk': 'idrecwellboretk',
        'idreczoneor': 'idreczoneor',
        'idreczoneortk': 'idreczoneortk',
        'idwell': 'idwell',
        'intno': 'intno',
        'orientation': 'orientation',
        'orientmethod': 'orientmethod',
        'penetrationnom': 'penetrationnom',
        'perforation_statuses': 'perforationStatuses',
        'phasing': 'phasing',
        'presbh': 'presbh',
        'presbhtyp': 'presbhtyp',
        'presdatum': 'presdatum',
        'presdesignbh': 'presdesignbh',
        'presduringperf': 'presduringperf',
        'presfinalsurf': 'presfinalsurf',
        'presgradientgaugetompp': 'presgradientgaugetompp',
        'preshhsurftompp': 'preshhsurftompp',
        'presinitsurf': 'presinitsurf',
        'presmpp': 'presmpp',
        'proposed': 'proposed',
        'ratefluidafter': 'ratefluidafter',
        'ratefluidbefore': 'ratefluidbefore',
        'resulttechnical': 'resulttechnical',
        'resulttechnicaldetail': 'resulttechnicaldetail',
        'resulttechnicalnote': 'resulttechnicalnote',
        'shotdensity': 'shotdensity',
        'shotplan': 'shotplan',
        'shottotal': 'shottotal',
        'syscreatedate': 'syscreatedate',
        'syscreateuser': 'syscreateuser',
        'syslockchildren': 'syslockchildren',
        'syslockchildrenui': 'syslockchildrenui',
        'syslockdate': 'syslockdate',
        'syslockme': 'syslockme',
        'syslockmeui': 'syslockmeui',
        'sysmoddate': 'sysmoddate',
        'sysmoduser': 'sysmoduser',
        'systag': 'systag',
        'szgun': 'szgun',
        'szholeact': 'szholeact',
        'szholenom': 'szholenom',
        'typ': 'typ',
        'wellheader': 'wellheader'
    }

    def __init__(self, balance=None, balancepres=None, carrierdes=None, carriermake=None, chargemake=None, chargesz=None, chargetyp=None, cluserrefno=None, com=None, contractor=None, conveymeth=None, depthbtm=None, depthcsngcollarref=None, depthfluidafter=None, depthfluidbefore=None, depthgauge=None, depthtop=None, dttm=None, explosivetyp=None, fluiddensity=None, fluidtyp=None, guncentralize=None, gundes=None, gunleftinhole=None, gunmetallurgy=None, icondrawshort=None, idrec=None, idrecjob=None, idrecjobtk=None, idreclog=None, idreclogtk=None, idrecstring=None, idrecstringtk=None, idrecwellbore=None, idrecwellboretk=None, idreczoneor=None, idreczoneortk=None, idwell=None, intno=None, orientation=None, orientmethod=None, penetrationnom=None, perforation_statuses=None, phasing=None, presbh=None, presbhtyp=None, presdatum=None, presdesignbh=None, presduringperf=None, presfinalsurf=None, presgradientgaugetompp=None, preshhsurftompp=None, presinitsurf=None, presmpp=None, proposed=None, ratefluidafter=None, ratefluidbefore=None, resulttechnical=None, resulttechnicaldetail=None, resulttechnicalnote=None, shotdensity=None, shotplan=None, shottotal=None, syscreatedate=None, syscreateuser=None, syslockchildren=None, syslockchildrenui=None, syslockdate=None, syslockme=None, syslockmeui=None, sysmoddate=None, sysmoduser=None, systag=None, szgun=None, szholeact=None, szholenom=None, typ=None, wellheader=None):  # noqa: E501
        """Perforation - a model defined in Swagger"""  # noqa: E501
        self._balance = None
        self._balancepres = None
        self._carrierdes = None
        self._carriermake = None
        self._chargemake = None
        self._chargesz = None
        self._chargetyp = None
        self._cluserrefno = None
        self._com = None
        self._contractor = None
        self._conveymeth = None
        self._depthbtm = None
        self._depthcsngcollarref = None
        self._depthfluidafter = None
        self._depthfluidbefore = None
        self._depthgauge = None
        self._depthtop = None
        self._dttm = None
        self._explosivetyp = None
        self._fluiddensity = None
        self._fluidtyp = None
        self._guncentralize = None
        self._gundes = None
        self._gunleftinhole = None
        self._gunmetallurgy = None
        self._icondrawshort = None
        self._idrec = None
        self._idrecjob = None
        self._idrecjobtk = None
        self._idreclog = None
        self._idreclogtk = None
        self._idrecstring = None
        self._idrecstringtk = None
        self._idrecwellbore = None
        self._idrecwellboretk = None
        self._idreczoneor = None
        self._idreczoneortk = None
        self._idwell = None
        self._intno = None
        self._orientation = None
        self._orientmethod = None
        self._penetrationnom = None
        self._perforation_statuses = None
        self._phasing = None
        self._presbh = None
        self._presbhtyp = None
        self._presdatum = None
        self._presdesignbh = None
        self._presduringperf = None
        self._presfinalsurf = None
        self._presgradientgaugetompp = None
        self._preshhsurftompp = None
        self._presinitsurf = None
        self._presmpp = None
        self._proposed = None
        self._ratefluidafter = None
        self._ratefluidbefore = None
        self._resulttechnical = None
        self._resulttechnicaldetail = None
        self._resulttechnicalnote = None
        self._shotdensity = None
        self._shotplan = None
        self._shottotal = None
        self._syscreatedate = None
        self._syscreateuser = None
        self._syslockchildren = None
        self._syslockchildrenui = None
        self._syslockdate = None
        self._syslockme = None
        self._syslockmeui = None
        self._sysmoddate = None
        self._sysmoduser = None
        self._systag = None
        self._szgun = None
        self._szholeact = None
        self._szholenom = None
        self._typ = None
        self._wellheader = None
        self.discriminator = None
        if balance is not None:
            self.balance = balance
        if balancepres is not None:
            self.balancepres = balancepres
        if carrierdes is not None:
            self.carrierdes = carrierdes
        if carriermake is not None:
            self.carriermake = carriermake
        if chargemake is not None:
            self.chargemake = chargemake
        if chargesz is not None:
            self.chargesz = chargesz
        if chargetyp is not None:
            self.chargetyp = chargetyp
        if cluserrefno is not None:
            self.cluserrefno = cluserrefno
        if com is not None:
            self.com = com
        if contractor is not None:
            self.contractor = contractor
        if conveymeth is not None:
            self.conveymeth = conveymeth
        if depthbtm is not None:
            self.depthbtm = depthbtm
        if depthcsngcollarref is not None:
            self.depthcsngcollarref = depthcsngcollarref
        if depthfluidafter is not None:
            self.depthfluidafter = depthfluidafter
        if depthfluidbefore is not None:
            self.depthfluidbefore = depthfluidbefore
        if depthgauge is not None:
            self.depthgauge = depthgauge
        if depthtop is not None:
            self.depthtop = depthtop
        if dttm is not None:
            self.dttm = dttm
        if explosivetyp is not None:
            self.explosivetyp = explosivetyp
        if fluiddensity is not None:
            self.fluiddensity = fluiddensity
        if fluidtyp is not None:
            self.fluidtyp = fluidtyp
        if guncentralize is not None:
            self.guncentralize = guncentralize
        if gundes is not None:
            self.gundes = gundes
        if gunleftinhole is not None:
            self.gunleftinhole = gunleftinhole
        if gunmetallurgy is not None:
            self.gunmetallurgy = gunmetallurgy
        if icondrawshort is not None:
            self.icondrawshort = icondrawshort
        if idrec is not None:
            self.idrec = idrec
        if idrecjob is not None:
            self.idrecjob = idrecjob
        if idrecjobtk is not None:
            self.idrecjobtk = idrecjobtk
        if idreclog is not None:
            self.idreclog = idreclog
        if idreclogtk is not None:
            self.idreclogtk = idreclogtk
        if idrecstring is not None:
            self.idrecstring = idrecstring
        if idrecstringtk is not None:
            self.idrecstringtk = idrecstringtk
        if idrecwellbore is not None:
            self.idrecwellbore = idrecwellbore
        if idrecwellboretk is not None:
            self.idrecwellboretk = idrecwellboretk
        if idreczoneor is not None:
            self.idreczoneor = idreczoneor
        if idreczoneortk is not None:
            self.idreczoneortk = idreczoneortk
        if idwell is not None:
            self.idwell = idwell
        if intno is not None:
            self.intno = intno
        if orientation is not None:
            self.orientation = orientation
        if orientmethod is not None:
            self.orientmethod = orientmethod
        if penetrationnom is not None:
            self.penetrationnom = penetrationnom
        if perforation_statuses is not None:
            self.perforation_statuses = perforation_statuses
        if phasing is not None:
            self.phasing = phasing
        if presbh is not None:
            self.presbh = presbh
        if presbhtyp is not None:
            self.presbhtyp = presbhtyp
        if presdatum is not None:
            self.presdatum = presdatum
        if presdesignbh is not None:
            self.presdesignbh = presdesignbh
        if presduringperf is not None:
            self.presduringperf = presduringperf
        if presfinalsurf is not None:
            self.presfinalsurf = presfinalsurf
        if presgradientgaugetompp is not None:
            self.presgradientgaugetompp = presgradientgaugetompp
        if preshhsurftompp is not None:
            self.preshhsurftompp = preshhsurftompp
        if presinitsurf is not None:
            self.presinitsurf = presinitsurf
        if presmpp is not None:
            self.presmpp = presmpp
        if proposed is not None:
            self.proposed = proposed
        if ratefluidafter is not None:
            self.ratefluidafter = ratefluidafter
        if ratefluidbefore is not None:
            self.ratefluidbefore = ratefluidbefore
        if resulttechnical is not None:
            self.resulttechnical = resulttechnical
        if resulttechnicaldetail is not None:
            self.resulttechnicaldetail = resulttechnicaldetail
        if resulttechnicalnote is not None:
            self.resulttechnicalnote = resulttechnicalnote
        if shotdensity is not None:
            self.shotdensity = shotdensity
        if shotplan is not None:
            self.shotplan = shotplan
        if shottotal is not None:
            self.shottotal = shottotal
        if syscreatedate is not None:
            self.syscreatedate = syscreatedate
        if syscreateuser is not None:
            self.syscreateuser = syscreateuser
        if syslockchildren is not None:
            self.syslockchildren = syslockchildren
        if syslockchildrenui is not None:
            self.syslockchildrenui = syslockchildrenui
        if syslockdate is not None:
            self.syslockdate = syslockdate
        if syslockme is not None:
            self.syslockme = syslockme
        if syslockmeui is not None:
            self.syslockmeui = syslockmeui
        if sysmoddate is not None:
            self.sysmoddate = sysmoddate
        if sysmoduser is not None:
            self.sysmoduser = sysmoduser
        if systag is not None:
            self.systag = systag
        if szgun is not None:
            self.szgun = szgun
        if szholeact is not None:
            self.szholeact = szholeact
        if szholenom is not None:
            self.szholenom = szholenom
        if typ is not None:
            self.typ = typ
        if wellheader is not None:
            self.wellheader = wellheader

    @property
    def balance(self):
        """Gets the balance of this Perforation.  # noqa: E501


        :return: The balance of this Perforation.  # noqa: E501
        :rtype: str
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this Perforation.


        :param balance: The balance of this Perforation.  # noqa: E501
        :type: str
        """

        self._balance = balance

    @property
    def balancepres(self):
        """Gets the balancepres of this Perforation.  # noqa: E501


        :return: The balancepres of this Perforation.  # noqa: E501
        :rtype: OneOfPerforationBalancepres
        """
        return self._balancepres

    @balancepres.setter
    def balancepres(self, balancepres):
        """Sets the balancepres of this Perforation.


        :param balancepres: The balancepres of this Perforation.  # noqa: E501
        :type: OneOfPerforationBalancepres
        """

        self._balancepres = balancepres

    @property
    def carrierdes(self):
        """Gets the carrierdes of this Perforation.  # noqa: E501


        :return: The carrierdes of this Perforation.  # noqa: E501
        :rtype: str
        """
        return self._carrierdes

    @carrierdes.setter
    def carrierdes(self, carrierdes):
        """Sets the carrierdes of this Perforation.


        :param carrierdes: The carrierdes of this Perforation.  # noqa: E501
        :type: str
        """

        self._carrierdes = carrierdes

    @property
    def carriermake(self):
        """Gets the carriermake of this Perforation.  # noqa: E501


        :return: The carriermake of this Perforation.  # noqa: E501
        :rtype: str
        """
        return self._carriermake

    @carriermake.setter
    def carriermake(self, carriermake):
        """Sets the carriermake of this Perforation.


        :param carriermake: The carriermake of this Perforation.  # noqa: E501
        :type: str
        """

        self._carriermake = carriermake

    @property
    def chargemake(self):
        """Gets the chargemake of this Perforation.  # noqa: E501


        :return: The chargemake of this Perforation.  # noqa: E501
        :rtype: str
        """
        return self._chargemake

    @chargemake.setter
    def chargemake(self, chargemake):
        """Sets the chargemake of this Perforation.


        :param chargemake: The chargemake of this Perforation.  # noqa: E501
        :type: str
        """

        self._chargemake = chargemake

    @property
    def chargesz(self):
        """Gets the chargesz of this Perforation.  # noqa: E501


        :return: The chargesz of this Perforation.  # noqa: E501
        :rtype: OneOfPerforationChargesz
        """
        return self._chargesz

    @chargesz.setter
    def chargesz(self, chargesz):
        """Sets the chargesz of this Perforation.


        :param chargesz: The chargesz of this Perforation.  # noqa: E501
        :type: OneOfPerforationChargesz
        """

        self._chargesz = chargesz

    @property
    def chargetyp(self):
        """Gets the chargetyp of this Perforation.  # noqa: E501


        :return: The chargetyp of this Perforation.  # noqa: E501
        :rtype: str
        """
        return self._chargetyp

    @chargetyp.setter
    def chargetyp(self, chargetyp):
        """Sets the chargetyp of this Perforation.


        :param chargetyp: The chargetyp of this Perforation.  # noqa: E501
        :type: str
        """

        self._chargetyp = chargetyp

    @property
    def cluserrefno(self):
        """Gets the cluserrefno of this Perforation.  # noqa: E501


        :return: The cluserrefno of this Perforation.  # noqa: E501
        :rtype: OneOfPerforationCluserrefno
        """
        return self._cluserrefno

    @cluserrefno.setter
    def cluserrefno(self, cluserrefno):
        """Sets the cluserrefno of this Perforation.


        :param cluserrefno: The cluserrefno of this Perforation.  # noqa: E501
        :type: OneOfPerforationCluserrefno
        """

        self._cluserrefno = cluserrefno

    @property
    def com(self):
        """Gets the com of this Perforation.  # noqa: E501


        :return: The com of this Perforation.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this Perforation.


        :param com: The com of this Perforation.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def contractor(self):
        """Gets the contractor of this Perforation.  # noqa: E501


        :return: The contractor of this Perforation.  # noqa: E501
        :rtype: str
        """
        return self._contractor

    @contractor.setter
    def contractor(self, contractor):
        """Sets the contractor of this Perforation.


        :param contractor: The contractor of this Perforation.  # noqa: E501
        :type: str
        """

        self._contractor = contractor

    @property
    def conveymeth(self):
        """Gets the conveymeth of this Perforation.  # noqa: E501


        :return: The conveymeth of this Perforation.  # noqa: E501
        :rtype: str
        """
        return self._conveymeth

    @conveymeth.setter
    def conveymeth(self, conveymeth):
        """Sets the conveymeth of this Perforation.


        :param conveymeth: The conveymeth of this Perforation.  # noqa: E501
        :type: str
        """

        self._conveymeth = conveymeth

    @property
    def depthbtm(self):
        """Gets the depthbtm of this Perforation.  # noqa: E501


        :return: The depthbtm of this Perforation.  # noqa: E501
        :rtype: OneOfPerforationDepthbtm
        """
        return self._depthbtm

    @depthbtm.setter
    def depthbtm(self, depthbtm):
        """Sets the depthbtm of this Perforation.


        :param depthbtm: The depthbtm of this Perforation.  # noqa: E501
        :type: OneOfPerforationDepthbtm
        """

        self._depthbtm = depthbtm

    @property
    def depthcsngcollarref(self):
        """Gets the depthcsngcollarref of this Perforation.  # noqa: E501


        :return: The depthcsngcollarref of this Perforation.  # noqa: E501
        :rtype: OneOfPerforationDepthcsngcollarref
        """
        return self._depthcsngcollarref

    @depthcsngcollarref.setter
    def depthcsngcollarref(self, depthcsngcollarref):
        """Sets the depthcsngcollarref of this Perforation.


        :param depthcsngcollarref: The depthcsngcollarref of this Perforation.  # noqa: E501
        :type: OneOfPerforationDepthcsngcollarref
        """

        self._depthcsngcollarref = depthcsngcollarref

    @property
    def depthfluidafter(self):
        """Gets the depthfluidafter of this Perforation.  # noqa: E501


        :return: The depthfluidafter of this Perforation.  # noqa: E501
        :rtype: OneOfPerforationDepthfluidafter
        """
        return self._depthfluidafter

    @depthfluidafter.setter
    def depthfluidafter(self, depthfluidafter):
        """Sets the depthfluidafter of this Perforation.


        :param depthfluidafter: The depthfluidafter of this Perforation.  # noqa: E501
        :type: OneOfPerforationDepthfluidafter
        """

        self._depthfluidafter = depthfluidafter

    @property
    def depthfluidbefore(self):
        """Gets the depthfluidbefore of this Perforation.  # noqa: E501


        :return: The depthfluidbefore of this Perforation.  # noqa: E501
        :rtype: OneOfPerforationDepthfluidbefore
        """
        return self._depthfluidbefore

    @depthfluidbefore.setter
    def depthfluidbefore(self, depthfluidbefore):
        """Sets the depthfluidbefore of this Perforation.


        :param depthfluidbefore: The depthfluidbefore of this Perforation.  # noqa: E501
        :type: OneOfPerforationDepthfluidbefore
        """

        self._depthfluidbefore = depthfluidbefore

    @property
    def depthgauge(self):
        """Gets the depthgauge of this Perforation.  # noqa: E501


        :return: The depthgauge of this Perforation.  # noqa: E501
        :rtype: OneOfPerforationDepthgauge
        """
        return self._depthgauge

    @depthgauge.setter
    def depthgauge(self, depthgauge):
        """Sets the depthgauge of this Perforation.


        :param depthgauge: The depthgauge of this Perforation.  # noqa: E501
        :type: OneOfPerforationDepthgauge
        """

        self._depthgauge = depthgauge

    @property
    def depthtop(self):
        """Gets the depthtop of this Perforation.  # noqa: E501


        :return: The depthtop of this Perforation.  # noqa: E501
        :rtype: OneOfPerforationDepthtop
        """
        return self._depthtop

    @depthtop.setter
    def depthtop(self, depthtop):
        """Sets the depthtop of this Perforation.


        :param depthtop: The depthtop of this Perforation.  # noqa: E501
        :type: OneOfPerforationDepthtop
        """

        self._depthtop = depthtop

    @property
    def dttm(self):
        """Gets the dttm of this Perforation.  # noqa: E501


        :return: The dttm of this Perforation.  # noqa: E501
        :rtype: datetime
        """
        return self._dttm

    @dttm.setter
    def dttm(self, dttm):
        """Sets the dttm of this Perforation.


        :param dttm: The dttm of this Perforation.  # noqa: E501
        :type: datetime
        """

        self._dttm = dttm

    @property
    def explosivetyp(self):
        """Gets the explosivetyp of this Perforation.  # noqa: E501


        :return: The explosivetyp of this Perforation.  # noqa: E501
        :rtype: str
        """
        return self._explosivetyp

    @explosivetyp.setter
    def explosivetyp(self, explosivetyp):
        """Sets the explosivetyp of this Perforation.


        :param explosivetyp: The explosivetyp of this Perforation.  # noqa: E501
        :type: str
        """

        self._explosivetyp = explosivetyp

    @property
    def fluiddensity(self):
        """Gets the fluiddensity of this Perforation.  # noqa: E501


        :return: The fluiddensity of this Perforation.  # noqa: E501
        :rtype: OneOfPerforationFluiddensity
        """
        return self._fluiddensity

    @fluiddensity.setter
    def fluiddensity(self, fluiddensity):
        """Sets the fluiddensity of this Perforation.


        :param fluiddensity: The fluiddensity of this Perforation.  # noqa: E501
        :type: OneOfPerforationFluiddensity
        """

        self._fluiddensity = fluiddensity

    @property
    def fluidtyp(self):
        """Gets the fluidtyp of this Perforation.  # noqa: E501


        :return: The fluidtyp of this Perforation.  # noqa: E501
        :rtype: str
        """
        return self._fluidtyp

    @fluidtyp.setter
    def fluidtyp(self, fluidtyp):
        """Sets the fluidtyp of this Perforation.


        :param fluidtyp: The fluidtyp of this Perforation.  # noqa: E501
        :type: str
        """

        self._fluidtyp = fluidtyp

    @property
    def guncentralize(self):
        """Gets the guncentralize of this Perforation.  # noqa: E501


        :return: The guncentralize of this Perforation.  # noqa: E501
        :rtype: str
        """
        return self._guncentralize

    @guncentralize.setter
    def guncentralize(self, guncentralize):
        """Sets the guncentralize of this Perforation.


        :param guncentralize: The guncentralize of this Perforation.  # noqa: E501
        :type: str
        """

        self._guncentralize = guncentralize

    @property
    def gundes(self):
        """Gets the gundes of this Perforation.  # noqa: E501


        :return: The gundes of this Perforation.  # noqa: E501
        :rtype: str
        """
        return self._gundes

    @gundes.setter
    def gundes(self, gundes):
        """Sets the gundes of this Perforation.


        :param gundes: The gundes of this Perforation.  # noqa: E501
        :type: str
        """

        self._gundes = gundes

    @property
    def gunleftinhole(self):
        """Gets the gunleftinhole of this Perforation.  # noqa: E501


        :return: The gunleftinhole of this Perforation.  # noqa: E501
        :rtype: int
        """
        return self._gunleftinhole

    @gunleftinhole.setter
    def gunleftinhole(self, gunleftinhole):
        """Sets the gunleftinhole of this Perforation.


        :param gunleftinhole: The gunleftinhole of this Perforation.  # noqa: E501
        :type: int
        """

        self._gunleftinhole = gunleftinhole

    @property
    def gunmetallurgy(self):
        """Gets the gunmetallurgy of this Perforation.  # noqa: E501


        :return: The gunmetallurgy of this Perforation.  # noqa: E501
        :rtype: str
        """
        return self._gunmetallurgy

    @gunmetallurgy.setter
    def gunmetallurgy(self, gunmetallurgy):
        """Sets the gunmetallurgy of this Perforation.


        :param gunmetallurgy: The gunmetallurgy of this Perforation.  # noqa: E501
        :type: str
        """

        self._gunmetallurgy = gunmetallurgy

    @property
    def icondrawshort(self):
        """Gets the icondrawshort of this Perforation.  # noqa: E501


        :return: The icondrawshort of this Perforation.  # noqa: E501
        :rtype: int
        """
        return self._icondrawshort

    @icondrawshort.setter
    def icondrawshort(self, icondrawshort):
        """Sets the icondrawshort of this Perforation.


        :param icondrawshort: The icondrawshort of this Perforation.  # noqa: E501
        :type: int
        """

        self._icondrawshort = icondrawshort

    @property
    def idrec(self):
        """Gets the idrec of this Perforation.  # noqa: E501


        :return: The idrec of this Perforation.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this Perforation.


        :param idrec: The idrec of this Perforation.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecjob(self):
        """Gets the idrecjob of this Perforation.  # noqa: E501


        :return: The idrecjob of this Perforation.  # noqa: E501
        :rtype: str
        """
        return self._idrecjob

    @idrecjob.setter
    def idrecjob(self, idrecjob):
        """Sets the idrecjob of this Perforation.


        :param idrecjob: The idrecjob of this Perforation.  # noqa: E501
        :type: str
        """

        self._idrecjob = idrecjob

    @property
    def idrecjobtk(self):
        """Gets the idrecjobtk of this Perforation.  # noqa: E501


        :return: The idrecjobtk of this Perforation.  # noqa: E501
        :rtype: str
        """
        return self._idrecjobtk

    @idrecjobtk.setter
    def idrecjobtk(self, idrecjobtk):
        """Sets the idrecjobtk of this Perforation.


        :param idrecjobtk: The idrecjobtk of this Perforation.  # noqa: E501
        :type: str
        """

        self._idrecjobtk = idrecjobtk

    @property
    def idreclog(self):
        """Gets the idreclog of this Perforation.  # noqa: E501


        :return: The idreclog of this Perforation.  # noqa: E501
        :rtype: str
        """
        return self._idreclog

    @idreclog.setter
    def idreclog(self, idreclog):
        """Sets the idreclog of this Perforation.


        :param idreclog: The idreclog of this Perforation.  # noqa: E501
        :type: str
        """

        self._idreclog = idreclog

    @property
    def idreclogtk(self):
        """Gets the idreclogtk of this Perforation.  # noqa: E501


        :return: The idreclogtk of this Perforation.  # noqa: E501
        :rtype: str
        """
        return self._idreclogtk

    @idreclogtk.setter
    def idreclogtk(self, idreclogtk):
        """Sets the idreclogtk of this Perforation.


        :param idreclogtk: The idreclogtk of this Perforation.  # noqa: E501
        :type: str
        """

        self._idreclogtk = idreclogtk

    @property
    def idrecstring(self):
        """Gets the idrecstring of this Perforation.  # noqa: E501


        :return: The idrecstring of this Perforation.  # noqa: E501
        :rtype: str
        """
        return self._idrecstring

    @idrecstring.setter
    def idrecstring(self, idrecstring):
        """Sets the idrecstring of this Perforation.


        :param idrecstring: The idrecstring of this Perforation.  # noqa: E501
        :type: str
        """

        self._idrecstring = idrecstring

    @property
    def idrecstringtk(self):
        """Gets the idrecstringtk of this Perforation.  # noqa: E501


        :return: The idrecstringtk of this Perforation.  # noqa: E501
        :rtype: str
        """
        return self._idrecstringtk

    @idrecstringtk.setter
    def idrecstringtk(self, idrecstringtk):
        """Sets the idrecstringtk of this Perforation.


        :param idrecstringtk: The idrecstringtk of this Perforation.  # noqa: E501
        :type: str
        """

        self._idrecstringtk = idrecstringtk

    @property
    def idrecwellbore(self):
        """Gets the idrecwellbore of this Perforation.  # noqa: E501


        :return: The idrecwellbore of this Perforation.  # noqa: E501
        :rtype: str
        """
        return self._idrecwellbore

    @idrecwellbore.setter
    def idrecwellbore(self, idrecwellbore):
        """Sets the idrecwellbore of this Perforation.


        :param idrecwellbore: The idrecwellbore of this Perforation.  # noqa: E501
        :type: str
        """

        self._idrecwellbore = idrecwellbore

    @property
    def idrecwellboretk(self):
        """Gets the idrecwellboretk of this Perforation.  # noqa: E501


        :return: The idrecwellboretk of this Perforation.  # noqa: E501
        :rtype: str
        """
        return self._idrecwellboretk

    @idrecwellboretk.setter
    def idrecwellboretk(self, idrecwellboretk):
        """Sets the idrecwellboretk of this Perforation.


        :param idrecwellboretk: The idrecwellboretk of this Perforation.  # noqa: E501
        :type: str
        """

        self._idrecwellboretk = idrecwellboretk

    @property
    def idreczoneor(self):
        """Gets the idreczoneor of this Perforation.  # noqa: E501


        :return: The idreczoneor of this Perforation.  # noqa: E501
        :rtype: str
        """
        return self._idreczoneor

    @idreczoneor.setter
    def idreczoneor(self, idreczoneor):
        """Sets the idreczoneor of this Perforation.


        :param idreczoneor: The idreczoneor of this Perforation.  # noqa: E501
        :type: str
        """

        self._idreczoneor = idreczoneor

    @property
    def idreczoneortk(self):
        """Gets the idreczoneortk of this Perforation.  # noqa: E501


        :return: The idreczoneortk of this Perforation.  # noqa: E501
        :rtype: str
        """
        return self._idreczoneortk

    @idreczoneortk.setter
    def idreczoneortk(self, idreczoneortk):
        """Sets the idreczoneortk of this Perforation.


        :param idreczoneortk: The idreczoneortk of this Perforation.  # noqa: E501
        :type: str
        """

        self._idreczoneortk = idreczoneortk

    @property
    def idwell(self):
        """Gets the idwell of this Perforation.  # noqa: E501


        :return: The idwell of this Perforation.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this Perforation.


        :param idwell: The idwell of this Perforation.  # noqa: E501
        :type: str
        """

        self._idwell = idwell

    @property
    def intno(self):
        """Gets the intno of this Perforation.  # noqa: E501


        :return: The intno of this Perforation.  # noqa: E501
        :rtype: OneOfPerforationIntno
        """
        return self._intno

    @intno.setter
    def intno(self, intno):
        """Sets the intno of this Perforation.


        :param intno: The intno of this Perforation.  # noqa: E501
        :type: OneOfPerforationIntno
        """

        self._intno = intno

    @property
    def orientation(self):
        """Gets the orientation of this Perforation.  # noqa: E501


        :return: The orientation of this Perforation.  # noqa: E501
        :rtype: str
        """
        return self._orientation

    @orientation.setter
    def orientation(self, orientation):
        """Sets the orientation of this Perforation.


        :param orientation: The orientation of this Perforation.  # noqa: E501
        :type: str
        """

        self._orientation = orientation

    @property
    def orientmethod(self):
        """Gets the orientmethod of this Perforation.  # noqa: E501


        :return: The orientmethod of this Perforation.  # noqa: E501
        :rtype: str
        """
        return self._orientmethod

    @orientmethod.setter
    def orientmethod(self, orientmethod):
        """Sets the orientmethod of this Perforation.


        :param orientmethod: The orientmethod of this Perforation.  # noqa: E501
        :type: str
        """

        self._orientmethod = orientmethod

    @property
    def penetrationnom(self):
        """Gets the penetrationnom of this Perforation.  # noqa: E501


        :return: The penetrationnom of this Perforation.  # noqa: E501
        :rtype: OneOfPerforationPenetrationnom
        """
        return self._penetrationnom

    @penetrationnom.setter
    def penetrationnom(self, penetrationnom):
        """Sets the penetrationnom of this Perforation.


        :param penetrationnom: The penetrationnom of this Perforation.  # noqa: E501
        :type: OneOfPerforationPenetrationnom
        """

        self._penetrationnom = penetrationnom

    @property
    def perforation_statuses(self):
        """Gets the perforation_statuses of this Perforation.  # noqa: E501


        :return: The perforation_statuses of this Perforation.  # noqa: E501
        :rtype: list[PerforationStatus]
        """
        return self._perforation_statuses

    @perforation_statuses.setter
    def perforation_statuses(self, perforation_statuses):
        """Sets the perforation_statuses of this Perforation.


        :param perforation_statuses: The perforation_statuses of this Perforation.  # noqa: E501
        :type: list[PerforationStatus]
        """

        self._perforation_statuses = perforation_statuses

    @property
    def phasing(self):
        """Gets the phasing of this Perforation.  # noqa: E501


        :return: The phasing of this Perforation.  # noqa: E501
        :rtype: OneOfPerforationPhasing
        """
        return self._phasing

    @phasing.setter
    def phasing(self, phasing):
        """Sets the phasing of this Perforation.


        :param phasing: The phasing of this Perforation.  # noqa: E501
        :type: OneOfPerforationPhasing
        """

        self._phasing = phasing

    @property
    def presbh(self):
        """Gets the presbh of this Perforation.  # noqa: E501


        :return: The presbh of this Perforation.  # noqa: E501
        :rtype: OneOfPerforationPresbh
        """
        return self._presbh

    @presbh.setter
    def presbh(self, presbh):
        """Sets the presbh of this Perforation.


        :param presbh: The presbh of this Perforation.  # noqa: E501
        :type: OneOfPerforationPresbh
        """

        self._presbh = presbh

    @property
    def presbhtyp(self):
        """Gets the presbhtyp of this Perforation.  # noqa: E501


        :return: The presbhtyp of this Perforation.  # noqa: E501
        :rtype: str
        """
        return self._presbhtyp

    @presbhtyp.setter
    def presbhtyp(self, presbhtyp):
        """Sets the presbhtyp of this Perforation.


        :param presbhtyp: The presbhtyp of this Perforation.  # noqa: E501
        :type: str
        """

        self._presbhtyp = presbhtyp

    @property
    def presdatum(self):
        """Gets the presdatum of this Perforation.  # noqa: E501


        :return: The presdatum of this Perforation.  # noqa: E501
        :rtype: OneOfPerforationPresdatum
        """
        return self._presdatum

    @presdatum.setter
    def presdatum(self, presdatum):
        """Sets the presdatum of this Perforation.


        :param presdatum: The presdatum of this Perforation.  # noqa: E501
        :type: OneOfPerforationPresdatum
        """

        self._presdatum = presdatum

    @property
    def presdesignbh(self):
        """Gets the presdesignbh of this Perforation.  # noqa: E501


        :return: The presdesignbh of this Perforation.  # noqa: E501
        :rtype: OneOfPerforationPresdesignbh
        """
        return self._presdesignbh

    @presdesignbh.setter
    def presdesignbh(self, presdesignbh):
        """Sets the presdesignbh of this Perforation.


        :param presdesignbh: The presdesignbh of this Perforation.  # noqa: E501
        :type: OneOfPerforationPresdesignbh
        """

        self._presdesignbh = presdesignbh

    @property
    def presduringperf(self):
        """Gets the presduringperf of this Perforation.  # noqa: E501


        :return: The presduringperf of this Perforation.  # noqa: E501
        :rtype: OneOfPerforationPresduringperf
        """
        return self._presduringperf

    @presduringperf.setter
    def presduringperf(self, presduringperf):
        """Sets the presduringperf of this Perforation.


        :param presduringperf: The presduringperf of this Perforation.  # noqa: E501
        :type: OneOfPerforationPresduringperf
        """

        self._presduringperf = presduringperf

    @property
    def presfinalsurf(self):
        """Gets the presfinalsurf of this Perforation.  # noqa: E501


        :return: The presfinalsurf of this Perforation.  # noqa: E501
        :rtype: OneOfPerforationPresfinalsurf
        """
        return self._presfinalsurf

    @presfinalsurf.setter
    def presfinalsurf(self, presfinalsurf):
        """Sets the presfinalsurf of this Perforation.


        :param presfinalsurf: The presfinalsurf of this Perforation.  # noqa: E501
        :type: OneOfPerforationPresfinalsurf
        """

        self._presfinalsurf = presfinalsurf

    @property
    def presgradientgaugetompp(self):
        """Gets the presgradientgaugetompp of this Perforation.  # noqa: E501


        :return: The presgradientgaugetompp of this Perforation.  # noqa: E501
        :rtype: OneOfPerforationPresgradientgaugetompp
        """
        return self._presgradientgaugetompp

    @presgradientgaugetompp.setter
    def presgradientgaugetompp(self, presgradientgaugetompp):
        """Sets the presgradientgaugetompp of this Perforation.


        :param presgradientgaugetompp: The presgradientgaugetompp of this Perforation.  # noqa: E501
        :type: OneOfPerforationPresgradientgaugetompp
        """

        self._presgradientgaugetompp = presgradientgaugetompp

    @property
    def preshhsurftompp(self):
        """Gets the preshhsurftompp of this Perforation.  # noqa: E501


        :return: The preshhsurftompp of this Perforation.  # noqa: E501
        :rtype: OneOfPerforationPreshhsurftompp
        """
        return self._preshhsurftompp

    @preshhsurftompp.setter
    def preshhsurftompp(self, preshhsurftompp):
        """Sets the preshhsurftompp of this Perforation.


        :param preshhsurftompp: The preshhsurftompp of this Perforation.  # noqa: E501
        :type: OneOfPerforationPreshhsurftompp
        """

        self._preshhsurftompp = preshhsurftompp

    @property
    def presinitsurf(self):
        """Gets the presinitsurf of this Perforation.  # noqa: E501


        :return: The presinitsurf of this Perforation.  # noqa: E501
        :rtype: OneOfPerforationPresinitsurf
        """
        return self._presinitsurf

    @presinitsurf.setter
    def presinitsurf(self, presinitsurf):
        """Sets the presinitsurf of this Perforation.


        :param presinitsurf: The presinitsurf of this Perforation.  # noqa: E501
        :type: OneOfPerforationPresinitsurf
        """

        self._presinitsurf = presinitsurf

    @property
    def presmpp(self):
        """Gets the presmpp of this Perforation.  # noqa: E501


        :return: The presmpp of this Perforation.  # noqa: E501
        :rtype: OneOfPerforationPresmpp
        """
        return self._presmpp

    @presmpp.setter
    def presmpp(self, presmpp):
        """Sets the presmpp of this Perforation.


        :param presmpp: The presmpp of this Perforation.  # noqa: E501
        :type: OneOfPerforationPresmpp
        """

        self._presmpp = presmpp

    @property
    def proposed(self):
        """Gets the proposed of this Perforation.  # noqa: E501


        :return: The proposed of this Perforation.  # noqa: E501
        :rtype: int
        """
        return self._proposed

    @proposed.setter
    def proposed(self, proposed):
        """Sets the proposed of this Perforation.


        :param proposed: The proposed of this Perforation.  # noqa: E501
        :type: int
        """

        self._proposed = proposed

    @property
    def ratefluidafter(self):
        """Gets the ratefluidafter of this Perforation.  # noqa: E501


        :return: The ratefluidafter of this Perforation.  # noqa: E501
        :rtype: OneOfPerforationRatefluidafter
        """
        return self._ratefluidafter

    @ratefluidafter.setter
    def ratefluidafter(self, ratefluidafter):
        """Sets the ratefluidafter of this Perforation.


        :param ratefluidafter: The ratefluidafter of this Perforation.  # noqa: E501
        :type: OneOfPerforationRatefluidafter
        """

        self._ratefluidafter = ratefluidafter

    @property
    def ratefluidbefore(self):
        """Gets the ratefluidbefore of this Perforation.  # noqa: E501


        :return: The ratefluidbefore of this Perforation.  # noqa: E501
        :rtype: OneOfPerforationRatefluidbefore
        """
        return self._ratefluidbefore

    @ratefluidbefore.setter
    def ratefluidbefore(self, ratefluidbefore):
        """Sets the ratefluidbefore of this Perforation.


        :param ratefluidbefore: The ratefluidbefore of this Perforation.  # noqa: E501
        :type: OneOfPerforationRatefluidbefore
        """

        self._ratefluidbefore = ratefluidbefore

    @property
    def resulttechnical(self):
        """Gets the resulttechnical of this Perforation.  # noqa: E501


        :return: The resulttechnical of this Perforation.  # noqa: E501
        :rtype: str
        """
        return self._resulttechnical

    @resulttechnical.setter
    def resulttechnical(self, resulttechnical):
        """Sets the resulttechnical of this Perforation.


        :param resulttechnical: The resulttechnical of this Perforation.  # noqa: E501
        :type: str
        """

        self._resulttechnical = resulttechnical

    @property
    def resulttechnicaldetail(self):
        """Gets the resulttechnicaldetail of this Perforation.  # noqa: E501


        :return: The resulttechnicaldetail of this Perforation.  # noqa: E501
        :rtype: str
        """
        return self._resulttechnicaldetail

    @resulttechnicaldetail.setter
    def resulttechnicaldetail(self, resulttechnicaldetail):
        """Sets the resulttechnicaldetail of this Perforation.


        :param resulttechnicaldetail: The resulttechnicaldetail of this Perforation.  # noqa: E501
        :type: str
        """

        self._resulttechnicaldetail = resulttechnicaldetail

    @property
    def resulttechnicalnote(self):
        """Gets the resulttechnicalnote of this Perforation.  # noqa: E501


        :return: The resulttechnicalnote of this Perforation.  # noqa: E501
        :rtype: str
        """
        return self._resulttechnicalnote

    @resulttechnicalnote.setter
    def resulttechnicalnote(self, resulttechnicalnote):
        """Sets the resulttechnicalnote of this Perforation.


        :param resulttechnicalnote: The resulttechnicalnote of this Perforation.  # noqa: E501
        :type: str
        """

        self._resulttechnicalnote = resulttechnicalnote

    @property
    def shotdensity(self):
        """Gets the shotdensity of this Perforation.  # noqa: E501


        :return: The shotdensity of this Perforation.  # noqa: E501
        :rtype: OneOfPerforationShotdensity
        """
        return self._shotdensity

    @shotdensity.setter
    def shotdensity(self, shotdensity):
        """Sets the shotdensity of this Perforation.


        :param shotdensity: The shotdensity of this Perforation.  # noqa: E501
        :type: OneOfPerforationShotdensity
        """

        self._shotdensity = shotdensity

    @property
    def shotplan(self):
        """Gets the shotplan of this Perforation.  # noqa: E501


        :return: The shotplan of this Perforation.  # noqa: E501
        :rtype: int
        """
        return self._shotplan

    @shotplan.setter
    def shotplan(self, shotplan):
        """Sets the shotplan of this Perforation.


        :param shotplan: The shotplan of this Perforation.  # noqa: E501
        :type: int
        """

        self._shotplan = shotplan

    @property
    def shottotal(self):
        """Gets the shottotal of this Perforation.  # noqa: E501


        :return: The shottotal of this Perforation.  # noqa: E501
        :rtype: int
        """
        return self._shottotal

    @shottotal.setter
    def shottotal(self, shottotal):
        """Sets the shottotal of this Perforation.


        :param shottotal: The shottotal of this Perforation.  # noqa: E501
        :type: int
        """

        self._shottotal = shottotal

    @property
    def syscreatedate(self):
        """Gets the syscreatedate of this Perforation.  # noqa: E501


        :return: The syscreatedate of this Perforation.  # noqa: E501
        :rtype: datetime
        """
        return self._syscreatedate

    @syscreatedate.setter
    def syscreatedate(self, syscreatedate):
        """Sets the syscreatedate of this Perforation.


        :param syscreatedate: The syscreatedate of this Perforation.  # noqa: E501
        :type: datetime
        """

        self._syscreatedate = syscreatedate

    @property
    def syscreateuser(self):
        """Gets the syscreateuser of this Perforation.  # noqa: E501


        :return: The syscreateuser of this Perforation.  # noqa: E501
        :rtype: str
        """
        return self._syscreateuser

    @syscreateuser.setter
    def syscreateuser(self, syscreateuser):
        """Sets the syscreateuser of this Perforation.


        :param syscreateuser: The syscreateuser of this Perforation.  # noqa: E501
        :type: str
        """

        self._syscreateuser = syscreateuser

    @property
    def syslockchildren(self):
        """Gets the syslockchildren of this Perforation.  # noqa: E501


        :return: The syslockchildren of this Perforation.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildren

    @syslockchildren.setter
    def syslockchildren(self, syslockchildren):
        """Sets the syslockchildren of this Perforation.


        :param syslockchildren: The syslockchildren of this Perforation.  # noqa: E501
        :type: int
        """

        self._syslockchildren = syslockchildren

    @property
    def syslockchildrenui(self):
        """Gets the syslockchildrenui of this Perforation.  # noqa: E501


        :return: The syslockchildrenui of this Perforation.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildrenui

    @syslockchildrenui.setter
    def syslockchildrenui(self, syslockchildrenui):
        """Sets the syslockchildrenui of this Perforation.


        :param syslockchildrenui: The syslockchildrenui of this Perforation.  # noqa: E501
        :type: int
        """

        self._syslockchildrenui = syslockchildrenui

    @property
    def syslockdate(self):
        """Gets the syslockdate of this Perforation.  # noqa: E501


        :return: The syslockdate of this Perforation.  # noqa: E501
        :rtype: datetime
        """
        return self._syslockdate

    @syslockdate.setter
    def syslockdate(self, syslockdate):
        """Sets the syslockdate of this Perforation.


        :param syslockdate: The syslockdate of this Perforation.  # noqa: E501
        :type: datetime
        """

        self._syslockdate = syslockdate

    @property
    def syslockme(self):
        """Gets the syslockme of this Perforation.  # noqa: E501


        :return: The syslockme of this Perforation.  # noqa: E501
        :rtype: int
        """
        return self._syslockme

    @syslockme.setter
    def syslockme(self, syslockme):
        """Sets the syslockme of this Perforation.


        :param syslockme: The syslockme of this Perforation.  # noqa: E501
        :type: int
        """

        self._syslockme = syslockme

    @property
    def syslockmeui(self):
        """Gets the syslockmeui of this Perforation.  # noqa: E501


        :return: The syslockmeui of this Perforation.  # noqa: E501
        :rtype: int
        """
        return self._syslockmeui

    @syslockmeui.setter
    def syslockmeui(self, syslockmeui):
        """Sets the syslockmeui of this Perforation.


        :param syslockmeui: The syslockmeui of this Perforation.  # noqa: E501
        :type: int
        """

        self._syslockmeui = syslockmeui

    @property
    def sysmoddate(self):
        """Gets the sysmoddate of this Perforation.  # noqa: E501


        :return: The sysmoddate of this Perforation.  # noqa: E501
        :rtype: datetime
        """
        return self._sysmoddate

    @sysmoddate.setter
    def sysmoddate(self, sysmoddate):
        """Sets the sysmoddate of this Perforation.


        :param sysmoddate: The sysmoddate of this Perforation.  # noqa: E501
        :type: datetime
        """

        self._sysmoddate = sysmoddate

    @property
    def sysmoduser(self):
        """Gets the sysmoduser of this Perforation.  # noqa: E501


        :return: The sysmoduser of this Perforation.  # noqa: E501
        :rtype: str
        """
        return self._sysmoduser

    @sysmoduser.setter
    def sysmoduser(self, sysmoduser):
        """Sets the sysmoduser of this Perforation.


        :param sysmoduser: The sysmoduser of this Perforation.  # noqa: E501
        :type: str
        """

        self._sysmoduser = sysmoduser

    @property
    def systag(self):
        """Gets the systag of this Perforation.  # noqa: E501


        :return: The systag of this Perforation.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this Perforation.


        :param systag: The systag of this Perforation.  # noqa: E501
        :type: str
        """

        self._systag = systag

    @property
    def szgun(self):
        """Gets the szgun of this Perforation.  # noqa: E501


        :return: The szgun of this Perforation.  # noqa: E501
        :rtype: OneOfPerforationSzgun
        """
        return self._szgun

    @szgun.setter
    def szgun(self, szgun):
        """Sets the szgun of this Perforation.


        :param szgun: The szgun of this Perforation.  # noqa: E501
        :type: OneOfPerforationSzgun
        """

        self._szgun = szgun

    @property
    def szholeact(self):
        """Gets the szholeact of this Perforation.  # noqa: E501


        :return: The szholeact of this Perforation.  # noqa: E501
        :rtype: OneOfPerforationSzholeact
        """
        return self._szholeact

    @szholeact.setter
    def szholeact(self, szholeact):
        """Sets the szholeact of this Perforation.


        :param szholeact: The szholeact of this Perforation.  # noqa: E501
        :type: OneOfPerforationSzholeact
        """

        self._szholeact = szholeact

    @property
    def szholenom(self):
        """Gets the szholenom of this Perforation.  # noqa: E501


        :return: The szholenom of this Perforation.  # noqa: E501
        :rtype: OneOfPerforationSzholenom
        """
        return self._szholenom

    @szholenom.setter
    def szholenom(self, szholenom):
        """Sets the szholenom of this Perforation.


        :param szholenom: The szholenom of this Perforation.  # noqa: E501
        :type: OneOfPerforationSzholenom
        """

        self._szholenom = szholenom

    @property
    def typ(self):
        """Gets the typ of this Perforation.  # noqa: E501


        :return: The typ of this Perforation.  # noqa: E501
        :rtype: str
        """
        return self._typ

    @typ.setter
    def typ(self, typ):
        """Sets the typ of this Perforation.


        :param typ: The typ of this Perforation.  # noqa: E501
        :type: str
        """

        self._typ = typ

    @property
    def wellheader(self):
        """Gets the wellheader of this Perforation.  # noqa: E501


        :return: The wellheader of this Perforation.  # noqa: E501
        :rtype: AnyOfPerforationWellheader
        """
        return self._wellheader

    @wellheader.setter
    def wellheader(self, wellheader):
        """Sets the wellheader of this Perforation.


        :param wellheader: The wellheader of this Perforation.  # noqa: E501
        :type: AnyOfPerforationWellheader
        """

        self._wellheader = wellheader

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Perforation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Perforation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
