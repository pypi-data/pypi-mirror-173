# coding: utf-8

"""
    OData Service for namespace Default

    This OData service is located at http://localhost  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RiserComp(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'coatinginner': 'str',
        'coatingouter': 'str',
        'com': 'str',
        'conntyp': 'str',
        'cost': 'OneOfRiserCompCost',
        'costunitlabel': 'str',
        'des': 'str',
        'grade': 'str',
        'iconname': 'str',
        'idrec': 'str',
        'idrecparent': 'str',
        'idwell': 'str',
        'joints': 'int',
        'length': 'OneOfRiserCompLength',
        'make': 'str',
        'refid': 'str',
        'riser': 'AnyOfRiserCompRiser',
        'syscreatedate': 'datetime',
        'syscreateuser': 'str',
        'syslockchildren': 'int',
        'syslockchildrenui': 'int',
        'syslockdate': 'datetime',
        'syslockme': 'int',
        'syslockmeui': 'int',
        'sysmoddate': 'datetime',
        'sysmoduser': 'str',
        'sysseq': 'int',
        'systag': 'str',
        'szdrift': 'OneOfRiserCompSzdrift',
        'szidnom': 'OneOfRiserCompSzidnom',
        'szodnom': 'OneOfRiserCompSzodnom',
        'wtperlength': 'OneOfRiserCompWtperlength'
    }

    attribute_map = {
        'coatinginner': 'coatinginner',
        'coatingouter': 'coatingouter',
        'com': 'com',
        'conntyp': 'conntyp',
        'cost': 'cost',
        'costunitlabel': 'costunitlabel',
        'des': 'des',
        'grade': 'grade',
        'iconname': 'iconname',
        'idrec': 'idrec',
        'idrecparent': 'idrecparent',
        'idwell': 'idwell',
        'joints': 'joints',
        'length': 'length',
        'make': 'make',
        'refid': 'refid',
        'riser': 'riser',
        'syscreatedate': 'syscreatedate',
        'syscreateuser': 'syscreateuser',
        'syslockchildren': 'syslockchildren',
        'syslockchildrenui': 'syslockchildrenui',
        'syslockdate': 'syslockdate',
        'syslockme': 'syslockme',
        'syslockmeui': 'syslockmeui',
        'sysmoddate': 'sysmoddate',
        'sysmoduser': 'sysmoduser',
        'sysseq': 'sysseq',
        'systag': 'systag',
        'szdrift': 'szdrift',
        'szidnom': 'szidnom',
        'szodnom': 'szodnom',
        'wtperlength': 'wtperlength'
    }

    def __init__(self, coatinginner=None, coatingouter=None, com=None, conntyp=None, cost=None, costunitlabel=None, des=None, grade=None, iconname=None, idrec=None, idrecparent=None, idwell=None, joints=None, length=None, make=None, refid=None, riser=None, syscreatedate=None, syscreateuser=None, syslockchildren=None, syslockchildrenui=None, syslockdate=None, syslockme=None, syslockmeui=None, sysmoddate=None, sysmoduser=None, sysseq=None, systag=None, szdrift=None, szidnom=None, szodnom=None, wtperlength=None):  # noqa: E501
        """RiserComp - a model defined in Swagger"""  # noqa: E501
        self._coatinginner = None
        self._coatingouter = None
        self._com = None
        self._conntyp = None
        self._cost = None
        self._costunitlabel = None
        self._des = None
        self._grade = None
        self._iconname = None
        self._idrec = None
        self._idrecparent = None
        self._idwell = None
        self._joints = None
        self._length = None
        self._make = None
        self._refid = None
        self._riser = None
        self._syscreatedate = None
        self._syscreateuser = None
        self._syslockchildren = None
        self._syslockchildrenui = None
        self._syslockdate = None
        self._syslockme = None
        self._syslockmeui = None
        self._sysmoddate = None
        self._sysmoduser = None
        self._sysseq = None
        self._systag = None
        self._szdrift = None
        self._szidnom = None
        self._szodnom = None
        self._wtperlength = None
        self.discriminator = None
        if coatinginner is not None:
            self.coatinginner = coatinginner
        if coatingouter is not None:
            self.coatingouter = coatingouter
        if com is not None:
            self.com = com
        if conntyp is not None:
            self.conntyp = conntyp
        if cost is not None:
            self.cost = cost
        if costunitlabel is not None:
            self.costunitlabel = costunitlabel
        if des is not None:
            self.des = des
        if grade is not None:
            self.grade = grade
        if iconname is not None:
            self.iconname = iconname
        if idrec is not None:
            self.idrec = idrec
        if idrecparent is not None:
            self.idrecparent = idrecparent
        if idwell is not None:
            self.idwell = idwell
        if joints is not None:
            self.joints = joints
        if length is not None:
            self.length = length
        if make is not None:
            self.make = make
        if refid is not None:
            self.refid = refid
        if riser is not None:
            self.riser = riser
        if syscreatedate is not None:
            self.syscreatedate = syscreatedate
        if syscreateuser is not None:
            self.syscreateuser = syscreateuser
        if syslockchildren is not None:
            self.syslockchildren = syslockchildren
        if syslockchildrenui is not None:
            self.syslockchildrenui = syslockchildrenui
        if syslockdate is not None:
            self.syslockdate = syslockdate
        if syslockme is not None:
            self.syslockme = syslockme
        if syslockmeui is not None:
            self.syslockmeui = syslockmeui
        if sysmoddate is not None:
            self.sysmoddate = sysmoddate
        if sysmoduser is not None:
            self.sysmoduser = sysmoduser
        if sysseq is not None:
            self.sysseq = sysseq
        if systag is not None:
            self.systag = systag
        if szdrift is not None:
            self.szdrift = szdrift
        if szidnom is not None:
            self.szidnom = szidnom
        if szodnom is not None:
            self.szodnom = szodnom
        if wtperlength is not None:
            self.wtperlength = wtperlength

    @property
    def coatinginner(self):
        """Gets the coatinginner of this RiserComp.  # noqa: E501


        :return: The coatinginner of this RiserComp.  # noqa: E501
        :rtype: str
        """
        return self._coatinginner

    @coatinginner.setter
    def coatinginner(self, coatinginner):
        """Sets the coatinginner of this RiserComp.


        :param coatinginner: The coatinginner of this RiserComp.  # noqa: E501
        :type: str
        """

        self._coatinginner = coatinginner

    @property
    def coatingouter(self):
        """Gets the coatingouter of this RiserComp.  # noqa: E501


        :return: The coatingouter of this RiserComp.  # noqa: E501
        :rtype: str
        """
        return self._coatingouter

    @coatingouter.setter
    def coatingouter(self, coatingouter):
        """Sets the coatingouter of this RiserComp.


        :param coatingouter: The coatingouter of this RiserComp.  # noqa: E501
        :type: str
        """

        self._coatingouter = coatingouter

    @property
    def com(self):
        """Gets the com of this RiserComp.  # noqa: E501


        :return: The com of this RiserComp.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this RiserComp.


        :param com: The com of this RiserComp.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def conntyp(self):
        """Gets the conntyp of this RiserComp.  # noqa: E501


        :return: The conntyp of this RiserComp.  # noqa: E501
        :rtype: str
        """
        return self._conntyp

    @conntyp.setter
    def conntyp(self, conntyp):
        """Sets the conntyp of this RiserComp.


        :param conntyp: The conntyp of this RiserComp.  # noqa: E501
        :type: str
        """

        self._conntyp = conntyp

    @property
    def cost(self):
        """Gets the cost of this RiserComp.  # noqa: E501


        :return: The cost of this RiserComp.  # noqa: E501
        :rtype: OneOfRiserCompCost
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this RiserComp.


        :param cost: The cost of this RiserComp.  # noqa: E501
        :type: OneOfRiserCompCost
        """

        self._cost = cost

    @property
    def costunitlabel(self):
        """Gets the costunitlabel of this RiserComp.  # noqa: E501


        :return: The costunitlabel of this RiserComp.  # noqa: E501
        :rtype: str
        """
        return self._costunitlabel

    @costunitlabel.setter
    def costunitlabel(self, costunitlabel):
        """Sets the costunitlabel of this RiserComp.


        :param costunitlabel: The costunitlabel of this RiserComp.  # noqa: E501
        :type: str
        """

        self._costunitlabel = costunitlabel

    @property
    def des(self):
        """Gets the des of this RiserComp.  # noqa: E501


        :return: The des of this RiserComp.  # noqa: E501
        :rtype: str
        """
        return self._des

    @des.setter
    def des(self, des):
        """Sets the des of this RiserComp.


        :param des: The des of this RiserComp.  # noqa: E501
        :type: str
        """

        self._des = des

    @property
    def grade(self):
        """Gets the grade of this RiserComp.  # noqa: E501


        :return: The grade of this RiserComp.  # noqa: E501
        :rtype: str
        """
        return self._grade

    @grade.setter
    def grade(self, grade):
        """Sets the grade of this RiserComp.


        :param grade: The grade of this RiserComp.  # noqa: E501
        :type: str
        """

        self._grade = grade

    @property
    def iconname(self):
        """Gets the iconname of this RiserComp.  # noqa: E501


        :return: The iconname of this RiserComp.  # noqa: E501
        :rtype: str
        """
        return self._iconname

    @iconname.setter
    def iconname(self, iconname):
        """Sets the iconname of this RiserComp.


        :param iconname: The iconname of this RiserComp.  # noqa: E501
        :type: str
        """

        self._iconname = iconname

    @property
    def idrec(self):
        """Gets the idrec of this RiserComp.  # noqa: E501


        :return: The idrec of this RiserComp.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this RiserComp.


        :param idrec: The idrec of this RiserComp.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecparent(self):
        """Gets the idrecparent of this RiserComp.  # noqa: E501


        :return: The idrecparent of this RiserComp.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this RiserComp.


        :param idrecparent: The idrecparent of this RiserComp.  # noqa: E501
        :type: str
        """

        self._idrecparent = idrecparent

    @property
    def idwell(self):
        """Gets the idwell of this RiserComp.  # noqa: E501


        :return: The idwell of this RiserComp.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this RiserComp.


        :param idwell: The idwell of this RiserComp.  # noqa: E501
        :type: str
        """

        self._idwell = idwell

    @property
    def joints(self):
        """Gets the joints of this RiserComp.  # noqa: E501


        :return: The joints of this RiserComp.  # noqa: E501
        :rtype: int
        """
        return self._joints

    @joints.setter
    def joints(self, joints):
        """Sets the joints of this RiserComp.


        :param joints: The joints of this RiserComp.  # noqa: E501
        :type: int
        """

        self._joints = joints

    @property
    def length(self):
        """Gets the length of this RiserComp.  # noqa: E501


        :return: The length of this RiserComp.  # noqa: E501
        :rtype: OneOfRiserCompLength
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this RiserComp.


        :param length: The length of this RiserComp.  # noqa: E501
        :type: OneOfRiserCompLength
        """

        self._length = length

    @property
    def make(self):
        """Gets the make of this RiserComp.  # noqa: E501


        :return: The make of this RiserComp.  # noqa: E501
        :rtype: str
        """
        return self._make

    @make.setter
    def make(self, make):
        """Sets the make of this RiserComp.


        :param make: The make of this RiserComp.  # noqa: E501
        :type: str
        """

        self._make = make

    @property
    def refid(self):
        """Gets the refid of this RiserComp.  # noqa: E501


        :return: The refid of this RiserComp.  # noqa: E501
        :rtype: str
        """
        return self._refid

    @refid.setter
    def refid(self, refid):
        """Sets the refid of this RiserComp.


        :param refid: The refid of this RiserComp.  # noqa: E501
        :type: str
        """

        self._refid = refid

    @property
    def riser(self):
        """Gets the riser of this RiserComp.  # noqa: E501


        :return: The riser of this RiserComp.  # noqa: E501
        :rtype: AnyOfRiserCompRiser
        """
        return self._riser

    @riser.setter
    def riser(self, riser):
        """Sets the riser of this RiserComp.


        :param riser: The riser of this RiserComp.  # noqa: E501
        :type: AnyOfRiserCompRiser
        """

        self._riser = riser

    @property
    def syscreatedate(self):
        """Gets the syscreatedate of this RiserComp.  # noqa: E501


        :return: The syscreatedate of this RiserComp.  # noqa: E501
        :rtype: datetime
        """
        return self._syscreatedate

    @syscreatedate.setter
    def syscreatedate(self, syscreatedate):
        """Sets the syscreatedate of this RiserComp.


        :param syscreatedate: The syscreatedate of this RiserComp.  # noqa: E501
        :type: datetime
        """

        self._syscreatedate = syscreatedate

    @property
    def syscreateuser(self):
        """Gets the syscreateuser of this RiserComp.  # noqa: E501


        :return: The syscreateuser of this RiserComp.  # noqa: E501
        :rtype: str
        """
        return self._syscreateuser

    @syscreateuser.setter
    def syscreateuser(self, syscreateuser):
        """Sets the syscreateuser of this RiserComp.


        :param syscreateuser: The syscreateuser of this RiserComp.  # noqa: E501
        :type: str
        """

        self._syscreateuser = syscreateuser

    @property
    def syslockchildren(self):
        """Gets the syslockchildren of this RiserComp.  # noqa: E501


        :return: The syslockchildren of this RiserComp.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildren

    @syslockchildren.setter
    def syslockchildren(self, syslockchildren):
        """Sets the syslockchildren of this RiserComp.


        :param syslockchildren: The syslockchildren of this RiserComp.  # noqa: E501
        :type: int
        """

        self._syslockchildren = syslockchildren

    @property
    def syslockchildrenui(self):
        """Gets the syslockchildrenui of this RiserComp.  # noqa: E501


        :return: The syslockchildrenui of this RiserComp.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildrenui

    @syslockchildrenui.setter
    def syslockchildrenui(self, syslockchildrenui):
        """Sets the syslockchildrenui of this RiserComp.


        :param syslockchildrenui: The syslockchildrenui of this RiserComp.  # noqa: E501
        :type: int
        """

        self._syslockchildrenui = syslockchildrenui

    @property
    def syslockdate(self):
        """Gets the syslockdate of this RiserComp.  # noqa: E501


        :return: The syslockdate of this RiserComp.  # noqa: E501
        :rtype: datetime
        """
        return self._syslockdate

    @syslockdate.setter
    def syslockdate(self, syslockdate):
        """Sets the syslockdate of this RiserComp.


        :param syslockdate: The syslockdate of this RiserComp.  # noqa: E501
        :type: datetime
        """

        self._syslockdate = syslockdate

    @property
    def syslockme(self):
        """Gets the syslockme of this RiserComp.  # noqa: E501


        :return: The syslockme of this RiserComp.  # noqa: E501
        :rtype: int
        """
        return self._syslockme

    @syslockme.setter
    def syslockme(self, syslockme):
        """Sets the syslockme of this RiserComp.


        :param syslockme: The syslockme of this RiserComp.  # noqa: E501
        :type: int
        """

        self._syslockme = syslockme

    @property
    def syslockmeui(self):
        """Gets the syslockmeui of this RiserComp.  # noqa: E501


        :return: The syslockmeui of this RiserComp.  # noqa: E501
        :rtype: int
        """
        return self._syslockmeui

    @syslockmeui.setter
    def syslockmeui(self, syslockmeui):
        """Sets the syslockmeui of this RiserComp.


        :param syslockmeui: The syslockmeui of this RiserComp.  # noqa: E501
        :type: int
        """

        self._syslockmeui = syslockmeui

    @property
    def sysmoddate(self):
        """Gets the sysmoddate of this RiserComp.  # noqa: E501


        :return: The sysmoddate of this RiserComp.  # noqa: E501
        :rtype: datetime
        """
        return self._sysmoddate

    @sysmoddate.setter
    def sysmoddate(self, sysmoddate):
        """Sets the sysmoddate of this RiserComp.


        :param sysmoddate: The sysmoddate of this RiserComp.  # noqa: E501
        :type: datetime
        """

        self._sysmoddate = sysmoddate

    @property
    def sysmoduser(self):
        """Gets the sysmoduser of this RiserComp.  # noqa: E501


        :return: The sysmoduser of this RiserComp.  # noqa: E501
        :rtype: str
        """
        return self._sysmoduser

    @sysmoduser.setter
    def sysmoduser(self, sysmoduser):
        """Sets the sysmoduser of this RiserComp.


        :param sysmoduser: The sysmoduser of this RiserComp.  # noqa: E501
        :type: str
        """

        self._sysmoduser = sysmoduser

    @property
    def sysseq(self):
        """Gets the sysseq of this RiserComp.  # noqa: E501


        :return: The sysseq of this RiserComp.  # noqa: E501
        :rtype: int
        """
        return self._sysseq

    @sysseq.setter
    def sysseq(self, sysseq):
        """Sets the sysseq of this RiserComp.


        :param sysseq: The sysseq of this RiserComp.  # noqa: E501
        :type: int
        """

        self._sysseq = sysseq

    @property
    def systag(self):
        """Gets the systag of this RiserComp.  # noqa: E501


        :return: The systag of this RiserComp.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this RiserComp.


        :param systag: The systag of this RiserComp.  # noqa: E501
        :type: str
        """

        self._systag = systag

    @property
    def szdrift(self):
        """Gets the szdrift of this RiserComp.  # noqa: E501


        :return: The szdrift of this RiserComp.  # noqa: E501
        :rtype: OneOfRiserCompSzdrift
        """
        return self._szdrift

    @szdrift.setter
    def szdrift(self, szdrift):
        """Sets the szdrift of this RiserComp.


        :param szdrift: The szdrift of this RiserComp.  # noqa: E501
        :type: OneOfRiserCompSzdrift
        """

        self._szdrift = szdrift

    @property
    def szidnom(self):
        """Gets the szidnom of this RiserComp.  # noqa: E501


        :return: The szidnom of this RiserComp.  # noqa: E501
        :rtype: OneOfRiserCompSzidnom
        """
        return self._szidnom

    @szidnom.setter
    def szidnom(self, szidnom):
        """Sets the szidnom of this RiserComp.


        :param szidnom: The szidnom of this RiserComp.  # noqa: E501
        :type: OneOfRiserCompSzidnom
        """

        self._szidnom = szidnom

    @property
    def szodnom(self):
        """Gets the szodnom of this RiserComp.  # noqa: E501


        :return: The szodnom of this RiserComp.  # noqa: E501
        :rtype: OneOfRiserCompSzodnom
        """
        return self._szodnom

    @szodnom.setter
    def szodnom(self, szodnom):
        """Sets the szodnom of this RiserComp.


        :param szodnom: The szodnom of this RiserComp.  # noqa: E501
        :type: OneOfRiserCompSzodnom
        """

        self._szodnom = szodnom

    @property
    def wtperlength(self):
        """Gets the wtperlength of this RiserComp.  # noqa: E501


        :return: The wtperlength of this RiserComp.  # noqa: E501
        :rtype: OneOfRiserCompWtperlength
        """
        return self._wtperlength

    @wtperlength.setter
    def wtperlength(self, wtperlength):
        """Sets the wtperlength of this RiserComp.


        :param wtperlength: The wtperlength of this RiserComp.  # noqa: E501
        :type: OneOfRiserCompWtperlength
        """

        self._wtperlength = wtperlength

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RiserComp, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RiserComp):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
