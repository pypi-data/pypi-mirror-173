# coding: utf-8

"""
    OData Service for namespace Default

    This OData service is located at http://localhost  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TestEquipData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bledfluidtyp': 'str',
        'bledrate': 'OneOfTestEquipDataBledrate',
        'bledvol': 'OneOfTestEquipDataBledvol',
        'circpos': 'str',
        'idrec': 'str',
        'idrecparent': 'str',
        'idwell': 'str',
        'orificesz': 'OneOfTestEquipDataOrificesz',
        'pres': 'OneOfTestEquipDataPres',
        'presannulus': 'OneOfTestEquipDataPresannulus',
        'presrelatedtbg': 'OneOfTestEquipDataPresrelatedtbg',
        'refno': 'str',
        'syscreatedate': 'datetime',
        'syscreateuser': 'str',
        'syslockchildren': 'int',
        'syslockchildrenui': 'int',
        'syslockdate': 'datetime',
        'syslockme': 'int',
        'syslockmeui': 'int',
        'sysmoddate': 'datetime',
        'sysmoduser': 'str',
        'systag': 'str',
        'test_equip': 'AnyOfTestEquipDataTestEquip',
        'tm': 'OneOfTestEquipDataTm'
    }

    attribute_map = {
        'bledfluidtyp': 'bledfluidtyp',
        'bledrate': 'bledrate',
        'bledvol': 'bledvol',
        'circpos': 'circpos',
        'idrec': 'idrec',
        'idrecparent': 'idrecparent',
        'idwell': 'idwell',
        'orificesz': 'orificesz',
        'pres': 'pres',
        'presannulus': 'presannulus',
        'presrelatedtbg': 'presrelatedtbg',
        'refno': 'refno',
        'syscreatedate': 'syscreatedate',
        'syscreateuser': 'syscreateuser',
        'syslockchildren': 'syslockchildren',
        'syslockchildrenui': 'syslockchildrenui',
        'syslockdate': 'syslockdate',
        'syslockme': 'syslockme',
        'syslockmeui': 'syslockmeui',
        'sysmoddate': 'sysmoddate',
        'sysmoduser': 'sysmoduser',
        'systag': 'systag',
        'test_equip': 'testEquip',
        'tm': 'tm'
    }

    def __init__(self, bledfluidtyp=None, bledrate=None, bledvol=None, circpos=None, idrec=None, idrecparent=None, idwell=None, orificesz=None, pres=None, presannulus=None, presrelatedtbg=None, refno=None, syscreatedate=None, syscreateuser=None, syslockchildren=None, syslockchildrenui=None, syslockdate=None, syslockme=None, syslockmeui=None, sysmoddate=None, sysmoduser=None, systag=None, test_equip=None, tm=None):  # noqa: E501
        """TestEquipData - a model defined in Swagger"""  # noqa: E501
        self._bledfluidtyp = None
        self._bledrate = None
        self._bledvol = None
        self._circpos = None
        self._idrec = None
        self._idrecparent = None
        self._idwell = None
        self._orificesz = None
        self._pres = None
        self._presannulus = None
        self._presrelatedtbg = None
        self._refno = None
        self._syscreatedate = None
        self._syscreateuser = None
        self._syslockchildren = None
        self._syslockchildrenui = None
        self._syslockdate = None
        self._syslockme = None
        self._syslockmeui = None
        self._sysmoddate = None
        self._sysmoduser = None
        self._systag = None
        self._test_equip = None
        self._tm = None
        self.discriminator = None
        if bledfluidtyp is not None:
            self.bledfluidtyp = bledfluidtyp
        if bledrate is not None:
            self.bledrate = bledrate
        if bledvol is not None:
            self.bledvol = bledvol
        if circpos is not None:
            self.circpos = circpos
        if idrec is not None:
            self.idrec = idrec
        if idrecparent is not None:
            self.idrecparent = idrecparent
        if idwell is not None:
            self.idwell = idwell
        if orificesz is not None:
            self.orificesz = orificesz
        if pres is not None:
            self.pres = pres
        if presannulus is not None:
            self.presannulus = presannulus
        if presrelatedtbg is not None:
            self.presrelatedtbg = presrelatedtbg
        if refno is not None:
            self.refno = refno
        if syscreatedate is not None:
            self.syscreatedate = syscreatedate
        if syscreateuser is not None:
            self.syscreateuser = syscreateuser
        if syslockchildren is not None:
            self.syslockchildren = syslockchildren
        if syslockchildrenui is not None:
            self.syslockchildrenui = syslockchildrenui
        if syslockdate is not None:
            self.syslockdate = syslockdate
        if syslockme is not None:
            self.syslockme = syslockme
        if syslockmeui is not None:
            self.syslockmeui = syslockmeui
        if sysmoddate is not None:
            self.sysmoddate = sysmoddate
        if sysmoduser is not None:
            self.sysmoduser = sysmoduser
        if systag is not None:
            self.systag = systag
        if test_equip is not None:
            self.test_equip = test_equip
        if tm is not None:
            self.tm = tm

    @property
    def bledfluidtyp(self):
        """Gets the bledfluidtyp of this TestEquipData.  # noqa: E501


        :return: The bledfluidtyp of this TestEquipData.  # noqa: E501
        :rtype: str
        """
        return self._bledfluidtyp

    @bledfluidtyp.setter
    def bledfluidtyp(self, bledfluidtyp):
        """Sets the bledfluidtyp of this TestEquipData.


        :param bledfluidtyp: The bledfluidtyp of this TestEquipData.  # noqa: E501
        :type: str
        """

        self._bledfluidtyp = bledfluidtyp

    @property
    def bledrate(self):
        """Gets the bledrate of this TestEquipData.  # noqa: E501


        :return: The bledrate of this TestEquipData.  # noqa: E501
        :rtype: OneOfTestEquipDataBledrate
        """
        return self._bledrate

    @bledrate.setter
    def bledrate(self, bledrate):
        """Sets the bledrate of this TestEquipData.


        :param bledrate: The bledrate of this TestEquipData.  # noqa: E501
        :type: OneOfTestEquipDataBledrate
        """

        self._bledrate = bledrate

    @property
    def bledvol(self):
        """Gets the bledvol of this TestEquipData.  # noqa: E501


        :return: The bledvol of this TestEquipData.  # noqa: E501
        :rtype: OneOfTestEquipDataBledvol
        """
        return self._bledvol

    @bledvol.setter
    def bledvol(self, bledvol):
        """Sets the bledvol of this TestEquipData.


        :param bledvol: The bledvol of this TestEquipData.  # noqa: E501
        :type: OneOfTestEquipDataBledvol
        """

        self._bledvol = bledvol

    @property
    def circpos(self):
        """Gets the circpos of this TestEquipData.  # noqa: E501


        :return: The circpos of this TestEquipData.  # noqa: E501
        :rtype: str
        """
        return self._circpos

    @circpos.setter
    def circpos(self, circpos):
        """Sets the circpos of this TestEquipData.


        :param circpos: The circpos of this TestEquipData.  # noqa: E501
        :type: str
        """

        self._circpos = circpos

    @property
    def idrec(self):
        """Gets the idrec of this TestEquipData.  # noqa: E501


        :return: The idrec of this TestEquipData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this TestEquipData.


        :param idrec: The idrec of this TestEquipData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecparent(self):
        """Gets the idrecparent of this TestEquipData.  # noqa: E501


        :return: The idrecparent of this TestEquipData.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this TestEquipData.


        :param idrecparent: The idrecparent of this TestEquipData.  # noqa: E501
        :type: str
        """

        self._idrecparent = idrecparent

    @property
    def idwell(self):
        """Gets the idwell of this TestEquipData.  # noqa: E501


        :return: The idwell of this TestEquipData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this TestEquipData.


        :param idwell: The idwell of this TestEquipData.  # noqa: E501
        :type: str
        """

        self._idwell = idwell

    @property
    def orificesz(self):
        """Gets the orificesz of this TestEquipData.  # noqa: E501


        :return: The orificesz of this TestEquipData.  # noqa: E501
        :rtype: OneOfTestEquipDataOrificesz
        """
        return self._orificesz

    @orificesz.setter
    def orificesz(self, orificesz):
        """Sets the orificesz of this TestEquipData.


        :param orificesz: The orificesz of this TestEquipData.  # noqa: E501
        :type: OneOfTestEquipDataOrificesz
        """

        self._orificesz = orificesz

    @property
    def pres(self):
        """Gets the pres of this TestEquipData.  # noqa: E501


        :return: The pres of this TestEquipData.  # noqa: E501
        :rtype: OneOfTestEquipDataPres
        """
        return self._pres

    @pres.setter
    def pres(self, pres):
        """Sets the pres of this TestEquipData.


        :param pres: The pres of this TestEquipData.  # noqa: E501
        :type: OneOfTestEquipDataPres
        """

        self._pres = pres

    @property
    def presannulus(self):
        """Gets the presannulus of this TestEquipData.  # noqa: E501


        :return: The presannulus of this TestEquipData.  # noqa: E501
        :rtype: OneOfTestEquipDataPresannulus
        """
        return self._presannulus

    @presannulus.setter
    def presannulus(self, presannulus):
        """Sets the presannulus of this TestEquipData.


        :param presannulus: The presannulus of this TestEquipData.  # noqa: E501
        :type: OneOfTestEquipDataPresannulus
        """

        self._presannulus = presannulus

    @property
    def presrelatedtbg(self):
        """Gets the presrelatedtbg of this TestEquipData.  # noqa: E501


        :return: The presrelatedtbg of this TestEquipData.  # noqa: E501
        :rtype: OneOfTestEquipDataPresrelatedtbg
        """
        return self._presrelatedtbg

    @presrelatedtbg.setter
    def presrelatedtbg(self, presrelatedtbg):
        """Sets the presrelatedtbg of this TestEquipData.


        :param presrelatedtbg: The presrelatedtbg of this TestEquipData.  # noqa: E501
        :type: OneOfTestEquipDataPresrelatedtbg
        """

        self._presrelatedtbg = presrelatedtbg

    @property
    def refno(self):
        """Gets the refno of this TestEquipData.  # noqa: E501


        :return: The refno of this TestEquipData.  # noqa: E501
        :rtype: str
        """
        return self._refno

    @refno.setter
    def refno(self, refno):
        """Sets the refno of this TestEquipData.


        :param refno: The refno of this TestEquipData.  # noqa: E501
        :type: str
        """

        self._refno = refno

    @property
    def syscreatedate(self):
        """Gets the syscreatedate of this TestEquipData.  # noqa: E501


        :return: The syscreatedate of this TestEquipData.  # noqa: E501
        :rtype: datetime
        """
        return self._syscreatedate

    @syscreatedate.setter
    def syscreatedate(self, syscreatedate):
        """Sets the syscreatedate of this TestEquipData.


        :param syscreatedate: The syscreatedate of this TestEquipData.  # noqa: E501
        :type: datetime
        """

        self._syscreatedate = syscreatedate

    @property
    def syscreateuser(self):
        """Gets the syscreateuser of this TestEquipData.  # noqa: E501


        :return: The syscreateuser of this TestEquipData.  # noqa: E501
        :rtype: str
        """
        return self._syscreateuser

    @syscreateuser.setter
    def syscreateuser(self, syscreateuser):
        """Sets the syscreateuser of this TestEquipData.


        :param syscreateuser: The syscreateuser of this TestEquipData.  # noqa: E501
        :type: str
        """

        self._syscreateuser = syscreateuser

    @property
    def syslockchildren(self):
        """Gets the syslockchildren of this TestEquipData.  # noqa: E501


        :return: The syslockchildren of this TestEquipData.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildren

    @syslockchildren.setter
    def syslockchildren(self, syslockchildren):
        """Sets the syslockchildren of this TestEquipData.


        :param syslockchildren: The syslockchildren of this TestEquipData.  # noqa: E501
        :type: int
        """

        self._syslockchildren = syslockchildren

    @property
    def syslockchildrenui(self):
        """Gets the syslockchildrenui of this TestEquipData.  # noqa: E501


        :return: The syslockchildrenui of this TestEquipData.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildrenui

    @syslockchildrenui.setter
    def syslockchildrenui(self, syslockchildrenui):
        """Sets the syslockchildrenui of this TestEquipData.


        :param syslockchildrenui: The syslockchildrenui of this TestEquipData.  # noqa: E501
        :type: int
        """

        self._syslockchildrenui = syslockchildrenui

    @property
    def syslockdate(self):
        """Gets the syslockdate of this TestEquipData.  # noqa: E501


        :return: The syslockdate of this TestEquipData.  # noqa: E501
        :rtype: datetime
        """
        return self._syslockdate

    @syslockdate.setter
    def syslockdate(self, syslockdate):
        """Sets the syslockdate of this TestEquipData.


        :param syslockdate: The syslockdate of this TestEquipData.  # noqa: E501
        :type: datetime
        """

        self._syslockdate = syslockdate

    @property
    def syslockme(self):
        """Gets the syslockme of this TestEquipData.  # noqa: E501


        :return: The syslockme of this TestEquipData.  # noqa: E501
        :rtype: int
        """
        return self._syslockme

    @syslockme.setter
    def syslockme(self, syslockme):
        """Sets the syslockme of this TestEquipData.


        :param syslockme: The syslockme of this TestEquipData.  # noqa: E501
        :type: int
        """

        self._syslockme = syslockme

    @property
    def syslockmeui(self):
        """Gets the syslockmeui of this TestEquipData.  # noqa: E501


        :return: The syslockmeui of this TestEquipData.  # noqa: E501
        :rtype: int
        """
        return self._syslockmeui

    @syslockmeui.setter
    def syslockmeui(self, syslockmeui):
        """Sets the syslockmeui of this TestEquipData.


        :param syslockmeui: The syslockmeui of this TestEquipData.  # noqa: E501
        :type: int
        """

        self._syslockmeui = syslockmeui

    @property
    def sysmoddate(self):
        """Gets the sysmoddate of this TestEquipData.  # noqa: E501


        :return: The sysmoddate of this TestEquipData.  # noqa: E501
        :rtype: datetime
        """
        return self._sysmoddate

    @sysmoddate.setter
    def sysmoddate(self, sysmoddate):
        """Sets the sysmoddate of this TestEquipData.


        :param sysmoddate: The sysmoddate of this TestEquipData.  # noqa: E501
        :type: datetime
        """

        self._sysmoddate = sysmoddate

    @property
    def sysmoduser(self):
        """Gets the sysmoduser of this TestEquipData.  # noqa: E501


        :return: The sysmoduser of this TestEquipData.  # noqa: E501
        :rtype: str
        """
        return self._sysmoduser

    @sysmoduser.setter
    def sysmoduser(self, sysmoduser):
        """Sets the sysmoduser of this TestEquipData.


        :param sysmoduser: The sysmoduser of this TestEquipData.  # noqa: E501
        :type: str
        """

        self._sysmoduser = sysmoduser

    @property
    def systag(self):
        """Gets the systag of this TestEquipData.  # noqa: E501


        :return: The systag of this TestEquipData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this TestEquipData.


        :param systag: The systag of this TestEquipData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    @property
    def test_equip(self):
        """Gets the test_equip of this TestEquipData.  # noqa: E501


        :return: The test_equip of this TestEquipData.  # noqa: E501
        :rtype: AnyOfTestEquipDataTestEquip
        """
        return self._test_equip

    @test_equip.setter
    def test_equip(self, test_equip):
        """Sets the test_equip of this TestEquipData.


        :param test_equip: The test_equip of this TestEquipData.  # noqa: E501
        :type: AnyOfTestEquipDataTestEquip
        """

        self._test_equip = test_equip

    @property
    def tm(self):
        """Gets the tm of this TestEquipData.  # noqa: E501


        :return: The tm of this TestEquipData.  # noqa: E501
        :rtype: OneOfTestEquipDataTm
        """
        return self._tm

    @tm.setter
    def tm(self, tm):
        """Sets the tm of this TestEquipData.


        :param tm: The tm of this TestEquipData.  # noqa: E501
        :type: OneOfTestEquipDataTm
        """

        self._tm = tm

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TestEquipData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TestEquipData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
