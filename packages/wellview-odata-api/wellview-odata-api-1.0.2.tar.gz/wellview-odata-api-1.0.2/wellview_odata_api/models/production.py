# coding: utf-8

"""
    OData Service for namespace Default

    This OData service is located at http://localhost  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Production(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'activitytyp': 'str',
        'com': 'str',
        'datasource': 'str',
        'dttmend': 'datetime',
        'dttmstart': 'datetime',
        'idrec': 'str',
        'idreczonecompletion': 'str',
        'idreczonecompletiontk': 'str',
        'idwell': 'str',
        'production_downtimes': 'list[ProductionDowntime]',
        'production_gases': 'list[ProductionGas]',
        'production_liquids': 'list[ProductionLiquid]',
        'syscreatedate': 'datetime',
        'syscreateuser': 'str',
        'syslockchildren': 'int',
        'syslockchildrenui': 'int',
        'syslockdate': 'datetime',
        'syslockme': 'int',
        'syslockmeui': 'int',
        'sysmoddate': 'datetime',
        'sysmoduser': 'str',
        'systag': 'str',
        'wellheader': 'AnyOfProductionWellheader'
    }

    attribute_map = {
        'activitytyp': 'activitytyp',
        'com': 'com',
        'datasource': 'datasource',
        'dttmend': 'dttmend',
        'dttmstart': 'dttmstart',
        'idrec': 'idrec',
        'idreczonecompletion': 'idreczonecompletion',
        'idreczonecompletiontk': 'idreczonecompletiontk',
        'idwell': 'idwell',
        'production_downtimes': 'productionDowntimes',
        'production_gases': 'productionGases',
        'production_liquids': 'productionLiquids',
        'syscreatedate': 'syscreatedate',
        'syscreateuser': 'syscreateuser',
        'syslockchildren': 'syslockchildren',
        'syslockchildrenui': 'syslockchildrenui',
        'syslockdate': 'syslockdate',
        'syslockme': 'syslockme',
        'syslockmeui': 'syslockmeui',
        'sysmoddate': 'sysmoddate',
        'sysmoduser': 'sysmoduser',
        'systag': 'systag',
        'wellheader': 'wellheader'
    }

    def __init__(self, activitytyp=None, com=None, datasource=None, dttmend=None, dttmstart=None, idrec=None, idreczonecompletion=None, idreczonecompletiontk=None, idwell=None, production_downtimes=None, production_gases=None, production_liquids=None, syscreatedate=None, syscreateuser=None, syslockchildren=None, syslockchildrenui=None, syslockdate=None, syslockme=None, syslockmeui=None, sysmoddate=None, sysmoduser=None, systag=None, wellheader=None):  # noqa: E501
        """Production - a model defined in Swagger"""  # noqa: E501
        self._activitytyp = None
        self._com = None
        self._datasource = None
        self._dttmend = None
        self._dttmstart = None
        self._idrec = None
        self._idreczonecompletion = None
        self._idreczonecompletiontk = None
        self._idwell = None
        self._production_downtimes = None
        self._production_gases = None
        self._production_liquids = None
        self._syscreatedate = None
        self._syscreateuser = None
        self._syslockchildren = None
        self._syslockchildrenui = None
        self._syslockdate = None
        self._syslockme = None
        self._syslockmeui = None
        self._sysmoddate = None
        self._sysmoduser = None
        self._systag = None
        self._wellheader = None
        self.discriminator = None
        if activitytyp is not None:
            self.activitytyp = activitytyp
        if com is not None:
            self.com = com
        if datasource is not None:
            self.datasource = datasource
        if dttmend is not None:
            self.dttmend = dttmend
        if dttmstart is not None:
            self.dttmstart = dttmstart
        if idrec is not None:
            self.idrec = idrec
        if idreczonecompletion is not None:
            self.idreczonecompletion = idreczonecompletion
        if idreczonecompletiontk is not None:
            self.idreczonecompletiontk = idreczonecompletiontk
        if idwell is not None:
            self.idwell = idwell
        if production_downtimes is not None:
            self.production_downtimes = production_downtimes
        if production_gases is not None:
            self.production_gases = production_gases
        if production_liquids is not None:
            self.production_liquids = production_liquids
        if syscreatedate is not None:
            self.syscreatedate = syscreatedate
        if syscreateuser is not None:
            self.syscreateuser = syscreateuser
        if syslockchildren is not None:
            self.syslockchildren = syslockchildren
        if syslockchildrenui is not None:
            self.syslockchildrenui = syslockchildrenui
        if syslockdate is not None:
            self.syslockdate = syslockdate
        if syslockme is not None:
            self.syslockme = syslockme
        if syslockmeui is not None:
            self.syslockmeui = syslockmeui
        if sysmoddate is not None:
            self.sysmoddate = sysmoddate
        if sysmoduser is not None:
            self.sysmoduser = sysmoduser
        if systag is not None:
            self.systag = systag
        if wellheader is not None:
            self.wellheader = wellheader

    @property
    def activitytyp(self):
        """Gets the activitytyp of this Production.  # noqa: E501


        :return: The activitytyp of this Production.  # noqa: E501
        :rtype: str
        """
        return self._activitytyp

    @activitytyp.setter
    def activitytyp(self, activitytyp):
        """Sets the activitytyp of this Production.


        :param activitytyp: The activitytyp of this Production.  # noqa: E501
        :type: str
        """

        self._activitytyp = activitytyp

    @property
    def com(self):
        """Gets the com of this Production.  # noqa: E501


        :return: The com of this Production.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this Production.


        :param com: The com of this Production.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def datasource(self):
        """Gets the datasource of this Production.  # noqa: E501


        :return: The datasource of this Production.  # noqa: E501
        :rtype: str
        """
        return self._datasource

    @datasource.setter
    def datasource(self, datasource):
        """Sets the datasource of this Production.


        :param datasource: The datasource of this Production.  # noqa: E501
        :type: str
        """

        self._datasource = datasource

    @property
    def dttmend(self):
        """Gets the dttmend of this Production.  # noqa: E501


        :return: The dttmend of this Production.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmend

    @dttmend.setter
    def dttmend(self, dttmend):
        """Sets the dttmend of this Production.


        :param dttmend: The dttmend of this Production.  # noqa: E501
        :type: datetime
        """

        self._dttmend = dttmend

    @property
    def dttmstart(self):
        """Gets the dttmstart of this Production.  # noqa: E501


        :return: The dttmstart of this Production.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmstart

    @dttmstart.setter
    def dttmstart(self, dttmstart):
        """Sets the dttmstart of this Production.


        :param dttmstart: The dttmstart of this Production.  # noqa: E501
        :type: datetime
        """

        self._dttmstart = dttmstart

    @property
    def idrec(self):
        """Gets the idrec of this Production.  # noqa: E501


        :return: The idrec of this Production.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this Production.


        :param idrec: The idrec of this Production.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idreczonecompletion(self):
        """Gets the idreczonecompletion of this Production.  # noqa: E501


        :return: The idreczonecompletion of this Production.  # noqa: E501
        :rtype: str
        """
        return self._idreczonecompletion

    @idreczonecompletion.setter
    def idreczonecompletion(self, idreczonecompletion):
        """Sets the idreczonecompletion of this Production.


        :param idreczonecompletion: The idreczonecompletion of this Production.  # noqa: E501
        :type: str
        """

        self._idreczonecompletion = idreczonecompletion

    @property
    def idreczonecompletiontk(self):
        """Gets the idreczonecompletiontk of this Production.  # noqa: E501


        :return: The idreczonecompletiontk of this Production.  # noqa: E501
        :rtype: str
        """
        return self._idreczonecompletiontk

    @idreczonecompletiontk.setter
    def idreczonecompletiontk(self, idreczonecompletiontk):
        """Sets the idreczonecompletiontk of this Production.


        :param idreczonecompletiontk: The idreczonecompletiontk of this Production.  # noqa: E501
        :type: str
        """

        self._idreczonecompletiontk = idreczonecompletiontk

    @property
    def idwell(self):
        """Gets the idwell of this Production.  # noqa: E501


        :return: The idwell of this Production.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this Production.


        :param idwell: The idwell of this Production.  # noqa: E501
        :type: str
        """

        self._idwell = idwell

    @property
    def production_downtimes(self):
        """Gets the production_downtimes of this Production.  # noqa: E501


        :return: The production_downtimes of this Production.  # noqa: E501
        :rtype: list[ProductionDowntime]
        """
        return self._production_downtimes

    @production_downtimes.setter
    def production_downtimes(self, production_downtimes):
        """Sets the production_downtimes of this Production.


        :param production_downtimes: The production_downtimes of this Production.  # noqa: E501
        :type: list[ProductionDowntime]
        """

        self._production_downtimes = production_downtimes

    @property
    def production_gases(self):
        """Gets the production_gases of this Production.  # noqa: E501


        :return: The production_gases of this Production.  # noqa: E501
        :rtype: list[ProductionGas]
        """
        return self._production_gases

    @production_gases.setter
    def production_gases(self, production_gases):
        """Sets the production_gases of this Production.


        :param production_gases: The production_gases of this Production.  # noqa: E501
        :type: list[ProductionGas]
        """

        self._production_gases = production_gases

    @property
    def production_liquids(self):
        """Gets the production_liquids of this Production.  # noqa: E501


        :return: The production_liquids of this Production.  # noqa: E501
        :rtype: list[ProductionLiquid]
        """
        return self._production_liquids

    @production_liquids.setter
    def production_liquids(self, production_liquids):
        """Sets the production_liquids of this Production.


        :param production_liquids: The production_liquids of this Production.  # noqa: E501
        :type: list[ProductionLiquid]
        """

        self._production_liquids = production_liquids

    @property
    def syscreatedate(self):
        """Gets the syscreatedate of this Production.  # noqa: E501


        :return: The syscreatedate of this Production.  # noqa: E501
        :rtype: datetime
        """
        return self._syscreatedate

    @syscreatedate.setter
    def syscreatedate(self, syscreatedate):
        """Sets the syscreatedate of this Production.


        :param syscreatedate: The syscreatedate of this Production.  # noqa: E501
        :type: datetime
        """

        self._syscreatedate = syscreatedate

    @property
    def syscreateuser(self):
        """Gets the syscreateuser of this Production.  # noqa: E501


        :return: The syscreateuser of this Production.  # noqa: E501
        :rtype: str
        """
        return self._syscreateuser

    @syscreateuser.setter
    def syscreateuser(self, syscreateuser):
        """Sets the syscreateuser of this Production.


        :param syscreateuser: The syscreateuser of this Production.  # noqa: E501
        :type: str
        """

        self._syscreateuser = syscreateuser

    @property
    def syslockchildren(self):
        """Gets the syslockchildren of this Production.  # noqa: E501


        :return: The syslockchildren of this Production.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildren

    @syslockchildren.setter
    def syslockchildren(self, syslockchildren):
        """Sets the syslockchildren of this Production.


        :param syslockchildren: The syslockchildren of this Production.  # noqa: E501
        :type: int
        """

        self._syslockchildren = syslockchildren

    @property
    def syslockchildrenui(self):
        """Gets the syslockchildrenui of this Production.  # noqa: E501


        :return: The syslockchildrenui of this Production.  # noqa: E501
        :rtype: int
        """
        return self._syslockchildrenui

    @syslockchildrenui.setter
    def syslockchildrenui(self, syslockchildrenui):
        """Sets the syslockchildrenui of this Production.


        :param syslockchildrenui: The syslockchildrenui of this Production.  # noqa: E501
        :type: int
        """

        self._syslockchildrenui = syslockchildrenui

    @property
    def syslockdate(self):
        """Gets the syslockdate of this Production.  # noqa: E501


        :return: The syslockdate of this Production.  # noqa: E501
        :rtype: datetime
        """
        return self._syslockdate

    @syslockdate.setter
    def syslockdate(self, syslockdate):
        """Sets the syslockdate of this Production.


        :param syslockdate: The syslockdate of this Production.  # noqa: E501
        :type: datetime
        """

        self._syslockdate = syslockdate

    @property
    def syslockme(self):
        """Gets the syslockme of this Production.  # noqa: E501


        :return: The syslockme of this Production.  # noqa: E501
        :rtype: int
        """
        return self._syslockme

    @syslockme.setter
    def syslockme(self, syslockme):
        """Sets the syslockme of this Production.


        :param syslockme: The syslockme of this Production.  # noqa: E501
        :type: int
        """

        self._syslockme = syslockme

    @property
    def syslockmeui(self):
        """Gets the syslockmeui of this Production.  # noqa: E501


        :return: The syslockmeui of this Production.  # noqa: E501
        :rtype: int
        """
        return self._syslockmeui

    @syslockmeui.setter
    def syslockmeui(self, syslockmeui):
        """Sets the syslockmeui of this Production.


        :param syslockmeui: The syslockmeui of this Production.  # noqa: E501
        :type: int
        """

        self._syslockmeui = syslockmeui

    @property
    def sysmoddate(self):
        """Gets the sysmoddate of this Production.  # noqa: E501


        :return: The sysmoddate of this Production.  # noqa: E501
        :rtype: datetime
        """
        return self._sysmoddate

    @sysmoddate.setter
    def sysmoddate(self, sysmoddate):
        """Sets the sysmoddate of this Production.


        :param sysmoddate: The sysmoddate of this Production.  # noqa: E501
        :type: datetime
        """

        self._sysmoddate = sysmoddate

    @property
    def sysmoduser(self):
        """Gets the sysmoduser of this Production.  # noqa: E501


        :return: The sysmoduser of this Production.  # noqa: E501
        :rtype: str
        """
        return self._sysmoduser

    @sysmoduser.setter
    def sysmoduser(self, sysmoduser):
        """Sets the sysmoduser of this Production.


        :param sysmoduser: The sysmoduser of this Production.  # noqa: E501
        :type: str
        """

        self._sysmoduser = sysmoduser

    @property
    def systag(self):
        """Gets the systag of this Production.  # noqa: E501


        :return: The systag of this Production.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this Production.


        :param systag: The systag of this Production.  # noqa: E501
        :type: str
        """

        self._systag = systag

    @property
    def wellheader(self):
        """Gets the wellheader of this Production.  # noqa: E501


        :return: The wellheader of this Production.  # noqa: E501
        :rtype: AnyOfProductionWellheader
        """
        return self._wellheader

    @wellheader.setter
    def wellheader(self, wellheader):
        """Sets the wellheader of this Production.


        :param wellheader: The wellheader of this Production.  # noqa: E501
        :type: AnyOfProductionWellheader
        """

        self._wellheader = wellheader

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Production, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Production):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
