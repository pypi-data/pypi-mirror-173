"use strict";(self.webpackChunkhome_assistant_frontend=self.webpackChunkhome_assistant_frontend||[]).push([[66054],{92306:(e,t,r)=>{r.d(t,{v:()=>s});const s=(e,t)=>{const r={};for(const s of e){const e=t(s);e in r?r[e].push(s):r[e]=[s]}return r}},11950:(e,t,r)=>{r.d(t,{l:()=>s});const s=async(e,t)=>new Promise((r=>{const s=t(e,(e=>{s(),r(e)}))}))},81582:(e,t,r)=>{r.d(t,{LZ:()=>s,Q4:()=>n,DJ:()=>o,pB:()=>i,SO:()=>a,iJ:()=>c,Nn:()=>_,Ny:()=>l,T0:()=>y});const s=["migration_error","setup_error","setup_retry"],n=["not_loaded","loaded","setup_error","setup_retry"],o=(e,t,r)=>{const s={type:"config_entries/subscribe"};return r&&r.type&&(s.type_filter=r.type),e.connection.subscribeMessage((e=>t(e)),s)},i=(e,t)=>{const r={};return t&&(t.type&&(r.type_filter=t.type),t.domain&&(r.domain=t.domain)),e.callWS({type:"config_entries/get",...r})},a=(e,t,r)=>e.callWS({type:"config_entries/update",entry_id:t,...r}),c=(e,t)=>e.callApi("DELETE",`config/config_entries/entry/${t}`),_=(e,t)=>e.callApi("POST",`config/config_entries/entry/${t}/reload`),l=(e,t)=>e.callWS({type:"config_entries/disable",entry_id:t,disabled_by:"user"}),y=(e,t)=>e.callWS({type:"config_entries/disable",entry_id:t,disabled_by:null})},55424:(e,t,r)=>{r.d(t,{Bm:()=>w,o1:()=>b,iK:()=>v,rl:()=>S,P:()=>k,KU:()=>T,Cj:()=>Z,xZ:()=>W,gy:()=>C,ZC:()=>P,_Z:()=>E,Jj:()=>j,yH:()=>D,UB:()=>z,jB:()=>I,G9:()=>L,vE:()=>B,b:()=>K});var s=r(4535),n=r(59699),o=r(32182),i=r(79021),a=r(39244),c=r(27088),_=r(83008),l=r(70390),y=r(47538),d=r(97330),u=r(92306),g=r(11950),p=r(81582),f=r(74186),m=r(38014);const h=[],w=()=>({stat_energy_from:"",stat_cost:null,entity_energy_price:null,number_energy_price:null}),b=()=>({stat_energy_to:"",stat_compensation:null,entity_energy_price:null,number_energy_price:null}),v=()=>({type:"grid",flow_from:[],flow_to:[],cost_adjustment_day:0}),S=()=>({type:"solar",stat_energy_from:"",config_entry_solar_forecast:null}),k=()=>({type:"battery",stat_energy_from:"",stat_energy_to:""}),T=()=>({type:"gas",stat_energy_from:"",stat_cost:null,entity_energy_price:null,number_energy_price:null}),Z=()=>({type:"water",stat_energy_from:"",stat_cost:null,entity_energy_price:null,number_energy_price:null}),W=e=>e.callWS({type:"energy/info"}),C=e=>e.callWS({type:"energy/validate"}),P=e=>e.callWS({type:"energy/get_prefs"}),E=async(e,t)=>{const r=e.callWS({type:"energy/save_prefs",...t});return x(e),r},O=async(e,t,r,s,n,o="hour")=>e.callWS({type:"energy/fossil_energy_consumption",start_time:t.toISOString(),end_time:null==n?void 0:n.toISOString(),energy_statistic_ids:r,co2_statistic_id:s,period:o}),j=e=>(0,u.v)(e.energy_sources,(e=>e.type)),D=(e,t)=>{const r=[];for(const s of e.energy_sources)if("solar"!==s.type)if("gas"!==s.type&&"water"!==s.type)if("battery"!==s.type){for(const e of s.flow_from){r.push(e.stat_energy_from),e.stat_cost&&r.push(e.stat_cost);const s=t.cost_sensors[e.stat_energy_from];s&&r.push(s)}for(const e of s.flow_to){r.push(e.stat_energy_to),e.stat_compensation&&r.push(e.stat_compensation);const s=t.cost_sensors[e.stat_energy_to];s&&r.push(s)}}else r.push(s.stat_energy_from),r.push(s.stat_energy_to);else{r.push(s.stat_energy_from),s.stat_cost&&r.push(s.stat_cost);const e=t.cost_sensors[s.stat_energy_from];e&&r.push(e)}else r.push(s.stat_energy_from);return r},x=e=>{h.forEach((t=>{const r=z(e,{key:t});r.clearPrefs(),r._active&&r.refresh()}))},z=(e,t={})=>{let r="_energy";if(t.key){if(!t.key.startsWith("energy_"))throw new Error("Key need to start with energy_");r=`_${t.key}`}if(e.connection[r])return e.connection[r];h.push(t.key);const u=(0,d._)(e.connection,r,(async()=>{if(u.prefs||(u.prefs=await P(e)),u._refreshTimeout&&clearTimeout(u._refreshTimeout),u._active&&(!u.end||u.end>new Date)){const e=new Date;e.getMinutes()>=20&&e.setHours(e.getHours()+1),e.setMinutes(20,0,0),u._refreshTimeout=window.setTimeout((()=>u.refresh()),e.getTime()-Date.now())}return(async(e,t,r,c,_)=>{const[l,y,d]=await Promise.all([(0,p.pB)(e,{domain:"co2signal"}),(0,g.l)(e.connection,f.LM),W(e)]),u=l.length?l[0]:void 0;let h;if(u)for(const t of y){if(t.config_entry_id!==u.entry_id)continue;const r=e.states[t.entity_id];if(r&&"%"===r.attributes.unit_of_measurement){h=r.entity_id;break}}const w=[];for(const e of t.energy_sources)if("grid"===e.type)for(const t of e.flow_from)w.push(t.stat_energy_from);const b=D(t,d),v=(0,s.Z)(c||new Date,r),S=v>35?"month":v>2?"day":"hour",k=(0,n.Z)(r,-1),T={energy:"kWh",volume:"km"===(e.config.unit_system.length||"")?"m³":"ft³"},Z=await(0,m.dL)(e,k,c,b,S,T);let C,P,E,j,x;if(_){P=v>27&&v<32?(0,o.Z)(r,-1):(0,i.Z)(r,-1*(v+1));const t=(0,n.Z)(P,-1);E=(0,a.Z)(r,-1),C=await(0,m.dL)(e,t,E,b,S,T)}void 0!==h&&(j=await O(e,r,w,h,c,v>35?"month":v>2?"day":"hour"),_&&(x=await O(e,P,w,h,E,v>35?"month":v>2?"day":"hour"))),Object.values(Z).forEach((e=>{e.length&&new Date(e[0].start)>k&&e.unshift({...e[0],start:k.toISOString(),end:k.toISOString(),sum:0,state:0})}));const z=await(0,m.Py)(e,b),I={};return z.forEach((e=>{I[e.statistic_id]=e})),{start:r,end:c,startCompare:P,endCompare:E,info:d,prefs:t,stats:Z,statsMetadata:I,statsCompare:C,co2SignalConfigEntry:u,co2SignalEntity:h,fossilEnergyConsumption:j,fossilEnergyConsumptionCompare:x}})(e,u.prefs,u.start,u.end,u.compare)})),w=u.subscribe;u.subscribe=e=>{const t=w(e);return u._active++,()=>{u._active--,u._active<1&&(clearTimeout(u._refreshTimeout),u._refreshTimeout=void 0),t()}},u._active=0,u.prefs=t.prefs;const b=new Date;u.start=b.getHours()>0?(0,c.Z)():(0,_.Z)(),u.end=b.getHours()>0?(0,l.Z)():(0,y.Z)();const v=()=>{u._updatePeriodTimeout=window.setTimeout((()=>{u.start=(0,c.Z)(),u.end=(0,l.Z)(),v()}),(0,n.Z)((0,l.Z)(),1).getTime()-Date.now())};return v(),u.clearPrefs=()=>{u.prefs=void 0},u.setPeriod=(e,t)=>{var r;u.start=e,u.end=t,u.start.getTime()!==(0,c.Z)().getTime()||(null===(r=u.end)||void 0===r?void 0:r.getTime())!==(0,l.Z)().getTime()||u._updatePeriodTimeout?u._updatePeriodTimeout&&(clearTimeout(u._updatePeriodTimeout),u._updatePeriodTimeout=void 0):v()},u.setCompare=e=>{u.compare=e},u},I=e=>e.callWS({type:"energy/solar_forecast"}),H=["volume","energy"],L=(e,t={},r)=>{for(const s of e.energy_sources){if("gas"!==s.type)continue;if(r&&r===s.stat_energy_from)continue;const e=t[s.stat_energy_from];if(H.includes(null==e?void 0:e.unit_class))return e.unit_class}},B=(e,t,r={})=>{const s=L(t,r);if(void 0!==s)return"energy"===s?"kWh":"km"===e.config.unit_system.length?"m³":"ft³"},K=e=>"km"===e.config.unit_system.length?"m³":"ft³"},38014:(e,t,r)=>{r.d(t,{uR:()=>n,Py:()=>o,dL:()=>i,_Y:()=>a,h_:()=>c,Cj:()=>_,hN:()=>l,Kj:()=>y,q6:()=>d,Nw:()=>u,Z0:()=>f,j2:()=>m,Kd:()=>h,dO:()=>w,Hs:()=>b});var s=r(91741);const n=(e,t)=>e.callWS({type:"recorder/list_statistic_ids",statistic_type:t}),o=(e,t)=>e.callWS({type:"recorder/get_statistics_metadata",statistic_ids:t}),i=(e,t,r,s,n="hour",o)=>e.callWS({type:"recorder/statistics_during_period",start_time:t.toISOString(),end_time:null==r?void 0:r.toISOString(),statistic_ids:s,period:n,units:o}),a=(e,t,r,s)=>e.callWS({type:"recorder/statistic_during_period",statistic_id:t,units:s,fixed_period:r.fixed_period?{start_time:r.fixed_period.start instanceof Date?r.fixed_period.start.toISOString():r.fixed_period.start,end_time:r.fixed_period.end instanceof Date?r.fixed_period.end.toISOString():r.fixed_period.end}:void 0,calendar:r.calendar,rolling_window:r.rolling_window}),c=e=>e.callWS({type:"recorder/validate_statistics"}),_=(e,t,r)=>e.callWS({type:"recorder/update_statistics_metadata",statistic_id:t,unit_of_measurement:r}),l=(e,t)=>e.callWS({type:"recorder/clear_statistics",statistic_ids:t}),y=e=>{if(!e||e.length<2)return null;const t=e[e.length-1].sum;if(null===t)return null;const r=e[0].sum;return null===r?t:t-r},d=(e,t)=>{let r=null;for(const s of t){if(!(s in e))continue;const t=y(e[s]);null!==t&&(null===r?r=t:r+=t)}return r},u=(e,t)=>e.some((e=>null!==e[t])),g=["mean","min","max"],p=["sum"],f=(e,t)=>!(!g.includes(t)||!e.has_mean)||!(!p.includes(t)||!e.has_sum),m=(e,t,r,s,n)=>e.callWS({type:"recorder/adjust_sum_statistics",statistic_id:t,start_time:r,adjustment:s,adjustment_unit_of_measurement:n}),h=(e,t,r)=>{const n=e.states[t];return n?(0,s.C)(n):(null==r?void 0:r.name)||t},w=(e,t,r)=>{let s;var n;t&&(s=null===(n=e.states[t])||void 0===n?void 0:n.attributes.unit_of_measurement);return void 0===s?null==r?void 0:r.statistics_unit_of_measurement:s},b=e=>e.includes(":")},66054:(e,t,r)=>{r.r(t),r.d(t,{EnergyStrategy:()=>n});var s=r(55424);class n{static async generateView(e){const t=e.hass,n={cards:[]};let o;try{o=await(0,s.ZC)(t)}catch(e){return"not_found"===e.code?(async()=>(await Promise.all([r.e(29021),r.e(55158)]).then(r.bind(r,55158)),{type:"panel",cards:[{type:"custom:energy-setup-wizard-card"}]}))():(n.cards.push({type:"markdown",content:`An error occurred while fetching your energy preferences: ${e.message}.`}),n)}n.type="sidebar";const i=o.energy_sources.find((e=>"grid"===e.type)),a=i&&i.flow_to.length,c=o.energy_sources.some((e=>"solar"===e.type)),_=o.energy_sources.some((e=>"gas"===e.type)),l=o.energy_sources.some((e=>"water"===e.type));return e.narrow&&n.cards.push({type:"energy-date-selection",collection_key:"energy_dashboard",view_layout:{position:"sidebar"}}),n.cards.push({type:"energy-compare",collection_key:"energy_dashboard"}),i&&n.cards.push({title:t.localize("ui.panel.energy.cards.energy_usage_graph_title"),type:"energy-usage-graph",collection_key:"energy_dashboard"}),c&&n.cards.push({title:t.localize("ui.panel.energy.cards.energy_solar_graph_title"),type:"energy-solar-graph",collection_key:"energy_dashboard"}),_&&n.cards.push({title:t.localize("ui.panel.energy.cards.energy_gas_graph_title"),type:"energy-gas-graph",collection_key:"energy_dashboard"}),l&&n.cards.push({title:t.localize("ui.panel.energy.cards.energy_water_graph_title"),type:"energy-water-graph",collection_key:"energy_dashboard"}),i&&n.cards.push({title:t.localize("ui.panel.energy.cards.energy_distribution_title"),type:"energy-distribution",view_layout:{position:"sidebar"},collection_key:"energy_dashboard"}),(i||c)&&n.cards.push({title:t.localize("ui.panel.energy.cards.energy_sources_table_title"),type:"energy-sources-table",collection_key:"energy_dashboard"}),a&&n.cards.push({type:"energy-grid-neutrality-gauge",view_layout:{position:"sidebar"},collection_key:"energy_dashboard"}),c&&a&&n.cards.push({type:"energy-solar-consumed-gauge",view_layout:{position:"sidebar"},collection_key:"energy_dashboard"}),i&&n.cards.push({type:"energy-carbon-consumed-gauge",view_layout:{position:"sidebar"},collection_key:"energy_dashboard"}),o.device_consumption.length&&n.cards.push({title:t.localize("ui.panel.energy.cards.energy_devices_graph_title"),type:"energy-devices-graph",collection_key:"energy_dashboard"}),n}}}}]);