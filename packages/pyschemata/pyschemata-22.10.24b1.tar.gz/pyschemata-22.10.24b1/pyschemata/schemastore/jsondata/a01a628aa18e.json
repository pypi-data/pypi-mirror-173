{
    "$id": "https://containerlab.dev/clab.schema.json",
    "$schema": "https://json-schema.org/draft-07/schema#",
    "title": "Containerlab topology definition file",
    "definitions": {
        "node-config": {
            "type": "object",
            "description": "topology node configuration container",
            "markdownDescription": "topology [node](https://containerlab.dev/manual/nodes/) configuration container",
            "properties": {
                "image": {
                    "type": "string",
                    "description": "container image to use for this node",
                    "markdownDescription": "container [image](https://containerlab.dev/manual/nodes/#image) to use for this node"
                },
                "SANs": {
                    "type": "array",
                    "description": "list of subject alternative names (SAN) to use for this node",
                    "markdownDescription": "list of [subject alternative names](https://containerlab.dev/manual/nodes/#subject-alternative-names) to use for this node",
                    "items": {
                        "type": "string"
                    },
                    "uniqueItems": true
                },
                "kind": {
                    "type": "string",
                    "description": "kind of this node",
                    "markdownDescription": "[kind](https://containerlab.dev/manual/nodes/#kind) of this node",
                    "enum": [
                        "srl",
                        "nokia_srlinux",
                        "ceos",
                        "arista_ceos",
                        "crpd",
                        "juniper_crpd",
                        "sonic-vs",
                        "vr-sros",
                        "vr-nokia_sros",
                        "vr-vmx",
                        "vr-juniper_vmx",
                        "vr-vqfx",
                        "vr-juniper_vqfx",
                        "vr-xrv",
                        "vr-cisco_xrv",
                        "vr-xrv9k",
                        "vr-cisco_xrv9k",
                        "vr-nxos",
                        "vr-cisco_nxos",
                        "vr-veos",
                        "vr-arista_veos",
                        "vr-csr",
                        "vr-cisco_csr",
                        "vr-pan",
                        "vr-paloalto_panos",
                        "vr-ros",
                        "vr-mikrotik_ros",
                        "vr-n9kv",
                        "vr-cisco_n9kv",
                        "vr-ftosv",
                        "vr-dell_ftosv",
                        "linux",
                        "bridge",
                        "ovs-bridge",
                        "mysocketio",
                        "host",
                        "keysight_ixia-c-one",
                        "ipinfusion_ocnos",
                        "checkpoint_cloudguard"
                    ]
                },
                "license": {
                    "type": "string",
                    "description": "path to a license file",
                    "markdownDescription": "path to a [license](https://containerlab.dev/manual/nodes/#license) file"
                },
                "type": {
                    "type": "string",
                    "description": "type is a per-node property that can select a special type of a node",
                    "markdownDescription": "node's [type](https://containerlab.dev/manual/nodes/#type) file"
                },
                "group": {
                    "type": "string",
                    "description": "grouping parameter of a node. A free form string that is mainly used in sorting elements when graphing",
                    "markdownDescription": "path to a [license](https://containerlab.dev/manual/nodes/#group) file"
                },
                "startup-config": {
                    "type": "string",
                    "description": "path to a startup config file (if supported by the kind)",
                    "markdownDescription": "path to a startup [config file](https://containerlab.dev/manual/nodes/#startup-config) (if supported by the kind)"
                },
                "startup-delay": {
                    "type": "integer",
                    "description": "Optional startup delay (seconds) to apply",
                    "markdownDescription": "Optional [startup delay](https://containerlab.dev/manual/nodes/#startup-delay) in seconds"
                },
                "enforce-startup-config": {
                    "type": "boolean",
                    "description": "Set to `true` to make the node to boot with a startup-config even if the config file is present in the lab directory",
                    "markdownDescription": "Set to `true` to [make the node to boot with a startup-config](https://containerlab.dev/manual/nodes/#enforce-startup-config) even if the config file is present in the lab directory"
                },
                "auto-remove": {
                    "type": "boolean",
                    "description": "Set to `true` to remove the node automatically, instead of auto-restarting",
                    "markdownDescription": "Set to `true` to [remove the node/container automatically](https://containerlab.dev/manual/nodes/#auto-remove), instead of auto-restarting it"
                },
                "exec": {
                    "type": "array",
                    "description": "list of commands to execute post deploy",
                    "markdownDescription": "list of [commands to execute](https://containerlab.dev/manual/nodes/#exec) post deploy",
                    "minItems": 1,
                    "items": {
                        "type": "string"
                    }
                },
                "binds": {
                    "type": "array",
                    "description": "list of file/directory bindings",
                    "markdownDescription": "list of file/directory [bindings](https://containerlab.dev/manual/nodes/#binds)",
                    "minItems": 1,
                    "items": {
                        "type": "string"
                    },
                    "uniqueItems": true
                },
                "ports": {
                    "type": "array",
                    "description": "list of port mappings",
                    "markdownDescription": "list of [port](https://containerlab.dev/manual/nodes/#ports) mappings",
                    "minItems": 1,
                    "items": {
                        "type": "string",
                        "pattern": "^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?:([0-9]{1,4}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5]):([0-9]{1,4}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])$|^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?:([0-9]{1,4}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5]):([0-9]{1,4}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])+(\/tcp|\/udp|\/sctp)$|^([0-9]{1,4}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5]):([0-9]{1,4}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])$|^([0-9]{1,4}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5]):([0-9]{1,4}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])+(\/tcp|\/udp|\/sctp)$"
                    },
                    "uniqueItems": true
                },
                "env": {
                    "type": "object",
                    "description": "environment variables",
                    "markdownDescription": "[environment variables](https://containerlab.dev/manual/nodes/#env)",
                    "patternProperties": {
                        ".+": {
                            "anyOf": [
                                {
                                    "type": "string",
                                    "minItems": 1
                                },
                                {
                                    "type": "number",
                                    "minItems": 1
                                }
                            ]
                        }
                    }
                },
                "user": {
                    "description": "user to use within the container",
                    "markdownDescription": "[user](https://containerlab.dev/manual/nodes/#user) to use within the container",
                    "anyOf": [
                        {
                            "type": "string",
                            "minItems": 1
                        },
                        {
                            "type": "number",
                            "minItems": 1
                        }
                    ]
                },
                "entrypoint": {
                    "type": "string",
                    "description": "container's entrypoint",
                    "markdownDescription": "container's [entrypoint](https://containerlab.dev/manual/nodes/#entrypoint)"
                },
                "cmd": {
                    "type": "string",
                    "description": "command to launch container with",
                    "markdownDescription": "[command](https://containerlab.dev/manual/nodes/#cmd) to launch container with"
                },
                "publish": {
                    "type": "array",
                    "description": "list of ports to publish",
                    "markdownDescription": "list of ports to [publish](https://containerlab.dev/manual/nodes/#publish)",
                    "minItems": 1,
                    "items": {
                        "type": "string",
                        "pattern": "(^http|^https|^tcp|^tls)\/(([0-9]+$)|([0-9]+\/.+$))"
                    },
                    "uniqueItems": true
                },
                "labels": {
                    "type": "object",
                    "description": "container labels",
                    "markdownDescription": "container [labels](https://containerlab.dev/manual/nodes/#labels)",
                    "patternProperties": {
                        ".+": {
                            "anyOf": [
                                {
                                    "type": "string",
                                    "minItems": 1
                                },
                                {
                                    "type": "number",
                                    "minItems": 1
                                }
                            ]
                        }
                    }
                },
                "runtime": {
                    "type": "string",
                    "description": "Runtime used to launch the container node",
                    "markdownDescription": "[Runtime](https://containerlab.dev/manual/nodes/#runtime) for the node",
                    "enum": [
                        "docker",
                        "containerd",
                        "ignite"
                    ]
                },
                "mgmt_ipv4": {
                    "type": "string",
                    "description": "IPv4 management address of the node (e.g. 172.10.10.11)",
                    "markdownDescription": "[IPv4 management address](https://containerlab.dev/manual/nodes/#mgmt-ipv4) of the node (e.g. 172.10.10.11)",
                    "pattern": "^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?$"
                },
                "mgmt_ipv6": {
                    "type": "string",
                    "description": "IPv6 management address of the node (e.g. 172.10.10.11)",
                    "markdownDescription": "[IPv6 management address](https://containerlab.dev/manual/nodes/#mgmt-ipv6) of the node (e.g. 172.10.10.11)",
                    "pattern": "^((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?$"
                },
                "network-mode": {
                    "type": "string",
                    "description": "node network mode (can only be set host, defaults to bridge)",
                    "markdownDescription": "node [network mode](https://containerlab.dev/manual/nodes/#network-mode) (can only be set host, defaults to bridge)",
                    "pattern": "^(host)|(container:\\S+)$"
                },
                "cpu": {
                    "type": "integer",
                    "description": "number of vcpu to allocate for this node/container",
                    "markdownDescription": "Allowed [CPU](https://containerlab.dev/manual/nodes/#cpu) usage by the node/container"
                },
                "memory": {
                    "type": "string",
                    "description": "memory limit for this node/container",
                    "markdownDescription": "Allowed [Memory](https://containerlab.dev/manual/nodes/#memory) usage by the node/container"
                },
                "cpu-set": {
                    "type": "string",
                    "description": "CPU cores to use by this node/container",
                    "markdownDescription": "[CPU cores](https://containerlab.dev/manual/nodes/#cpu-set) to be used by the node/container"
                },
                "sandbox": {
                    "type": "string",
                    "description": "ignite's sandbox image name"
                },
                "kernel": {
                    "type": "string",
                    "description": "ignite's kernel image name"
                },
                "extras": {
                    "type": "object",
                    "$ref": "#/definitions/extras-config"
                },
                "config": {
                    "$ref": "#/definitions/config-config"
                },
                "wait-for": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "uniqueItems": true,
                    "description": "Define which nodes should be started before this node will start",
                    "markdownDescription": "[wait-for](https://containerlab.dev/manual/nodes/#cmd) defines which nodes should be started before this node will start"
                }
            },
            "if": {
                "properties": {
                    "kind": {
                        "const": "srl"
                    }
                }
            },
            "then": {
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "type of a node",
                        "markdownDescription": "node [type](https://containerlab.dev/manual/nodes/#type)",
                        "enum": [
                            "ixrd1",
                            "ixrd2",
                            "ixrd3",
                            "ixrd2l",
                            "ixrd3l",
                            "ixrd5",
                            "ixrh2",
                            "ixrh3",
                            "ixr6",
                            "ixr6e",
                            "ixr10",
                            "ixr10e"
                        ]
                    }
                }
            },
            "else": {
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "type of a node",
                        "markdownDescription": "node [type](https://containerlab.dev/manual/nodes/#type)"
                    }
                }
            },
            "additionalProperties": false
        },
        "link-config": {
            "type": "object",
            "description": "link configuration container",
            "markdownDescription": "link configuration container",
            "properties": {
                "endpoints": {
                    "type": "array",
                    "description": "endpoints list",
                    "markdownDescription": "[endpoints](http://localhost:8000/manual/topo-def-file/#links) list",
                    "minItems": 2,
                    "items": {
                        "type": "string",
                        "pattern": "^\\S+:\\S+$"
                    },
                    "uniqueItems": true
                },
                "vars": {
                    "description": "link-scoped variables used by config engine",
                    "markdownDescription": "link-scoped variables used by config engine",
                    "type": "object"
                }
            }
        },
        "extras-config": {
            "type": "object",
            "description": "node's extra configurations",
            "properties": {
                "srl-agents": {
                    "type": "array",
                    "description": "list of SR Linux agent's config files to be copied to the NOS filesystem",
                    "markdownDescription": "list of [SR Linux agent's config files](https://containerlab.dev/manual/kinds/srl/#user-defined-custom-agents-for-sr-linux-nodes) to be copied to the NOS filesystem",
                    "minItems": 1,
                    "items": {
                        "type": "string"
                    },
                    "uniqueItems": true
                },
                "mysocket-proxy": {
                    "type": "string",
                    "description": "http/s proxy to be used by mysocketctl"
                }
            }
        },
        "config-config": {
            "type": "object",
            "description": "containerlab config engine parameters",
            "properties": {
                "vars": {
                    "type": "object",
                    "description": "config variables passed to config engine",
                    "markdownDescription": "config variables passed to config engine"
                }
            }
        }
    },
    "type": "object",
    "properties": {
        "name": {
            "description": "topology name",
            "type": "string"
        },
        "prefix": {
            "description": "lab prefix",
            "type": "string",
            "markdownDescription": "[lab prefix](https://containerlab.dev/manual/topo-def-file/#prefix)"
        },
        "mgmt": {
            "description": "configuration container for management network",
            "markdownDescription": "configuration container for [management network](https://containerlab.dev/manual/network/#management-network)",
            "type": "object",
            "properties": {
                "network": {
                    "description": "management network name",
                    "markdownDescription": "[management network name](https://containerlab.dev/manual/network/#network-name)",
                    "type": "string"
                },
                "bridge": {
                    "description": "Set bridge to use for the management network (instead of the default generated bridge).",
                    "markdownDescription": "Set [bridge](https://containerlab.dev/manual/network/#bridge-name) to use for the management network (instead of the default generated bridge).",
                    "type": "string"
                },
                "ipv4_subnet": {
                    "description": "IPv4 range to use for the custom management network. e.g. 172.100.100.0/24",
                    "markdownDescription": "[IPv4 range](https://containerlab.dev/manual/network/#user-defined-addresses) to use for the custom management network. e.g. 172.100.100.0/24",
                    "type": "string",
                    "pattern": "^.+\/[0-9]{1,2}$"
                },
                "ipv6_subnet": {
                    "description": "IPv6 range to use for the custom management network. e.g. 2001:172:100:100::/64",
                    "markdownDescription": "[IPv6 range](https://containerlab.dev/manual/network/#user-defined-addresses) to be used for the custom management network. e.g. 2001:172:100:100::/64",
                    "type": "string",
                    "pattern": "^.+\/[0-9]{1,3}$"
                },
                "ipv4-gw": {
                    "description": "IPv4 gateway address that will be set on a bridge used for the management network. Will be set to the first available IP address by default",
                    "markdownDescription": "IPv4 gateway address that will be set on a bridge used for the management network. Will be set to the first available IP address by default",
                    "type": "string",
                    "pattern": "^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?$"
                },
                "ipv6-gw": {
                    "description": "IPv6 gateway address that will be set on a bridge used for the management network. Will be set to the first available IP address by default",
                    "markdownDescription": "IPv6 gateway address that will be set on a bridge used for the management network. Will be set to the first available IP address by default",
                    "type": "string",
                    "pattern": "^((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?$"
                },
                "mtu": {
                    "description": "MTU for the custom network",
                    "markdownDescription": "[MTU](https://containerlab.dev/manual/network/#mtu) in Bytes for the custom management network",
                    "type": "number",
                    "maximum": 65535,
                    "minimum": 1,
                    "default": 1500
                }
            },
            "minProperties": 1
        },
        "topology": {
            "description": "topology configuration container",
            "markdownDescription": "[topology](https://containerlab.dev/manual/topo-def-file/) configuration container",
            "type": "object",
            "properties": {
                "nodes": {
                    "description": "topology nodes configuration container",
                    "markdownDescription": "topology [nodes](https://containerlab.dev/manual/nodes/) configuration container",
                    "type": "object",
                    "patternProperties": {
                        ".*": {
                            "oneOf": [
                                {
                                    "type": "null"
                                },
                                {
                                    "$ref": "#/definitions/node-config"
                                }
                            ]
                        }
                    }
                },
                "kinds": {
                    "description": "topology kinds configuration container",
                    "markdownDescription": "topology [kinds](https://containerlab.dev/manual/topo-def-file/#kinds) configuration container",
                    "type": "object",
                    "properties": {
                        "srl": {
                            "$ref": "#/definitions/node-config"
                        },
                        "nokia_srlinux": {
                            "$ref": "#/definitions/node-config"
                        },
                        "ceos": {
                            "$ref": "#/definitions/node-config"
                        },
                        "arista_ceos": {
                            "$ref": "#/definitions/node-config"
                        },
                        "vr-arista_veos": {
                            "$ref": "#/definitions/node-config"
                        },
                        "juniper_crpd": {
                            "$ref": "#/definitions/node-config"
                        },
                        "crpd": {
                            "$ref": "#/definitions/node-config"
                        },
                        "sonic-vs": {
                            "$ref": "#/definitions/node-config"
                        },
                        "vr-nokia_sros": {
                            "$ref": "#/definitions/node-config"
                        },
                        "vr-sros": {
                            "$ref": "#/definitions/node-config"
                        },
                        "vr-juniper_vmx": {
                            "$ref": "#/definitions/node-config"
                        },
                        "vr-vmx": {
                            "$ref": "#/definitions/node-config"
                        },
                        "vr-cisco_xrv": {
                            "$ref": "#/definitions/node-config"
                        },
                        "vr-xrv": {
                            "$ref": "#/definitions/node-config"
                        },
                        "vr-cisco_xrv9k": {
                            "$ref": "#/definitions/node-config"
                        },
                        "vr-xrv9k": {
                            "$ref": "#/definitions/node-config"
                        },
                        "vr-cisco_nxos": {
                            "$ref": "#/definitions/node-config"
                        },
                        "vr-nxos": {
                            "$ref": "#/definitions/node-config"
                        },
                        "vr-cisco_csr": {
                            "$ref": "#/definitions/node-config"
                        },
                        "vr-csr": {
                            "$ref": "#/definitions/node-config"
                        },
                        "linux": {
                            "$ref": "#/definitions/node-config"
                        },
                        "bridge": {
                            "$ref": "#/definitions/node-config"
                        },
                        "ovs-bridge": {
                            "$ref": "#/definitions/node-config"
                        },
                        "mysocketio": {
                            "$ref": "#/definitions/node-config"
                        },
                        "host": {
                            "$ref": "#/definitions/node-config"
                        },
                        "ipinfusion_ocnos": {
                            "$ref": "#/definitions/node-config"
                        },
                        "keysight_ixia-c-one": {
                            "$ref": "#/definitions/node-config"
                        },
                        "checkpoint_cloudguard": {
                            "$ref": "#/definitions/node-config"
                        }
                    }
                },
                "defaults": {
                    "$ref": "#/definitions/node-config"
                },
                "links": {
                    "type": "array",
                    "description": "topology links section",
                    "markdownDescription": "[topology links](https://containerlab.dev/manual/topo-def-file/#links)",
                    "minItems": 1,
                    "items": {
                        "$ref": "#/definitions/link-config"
                    }
                }
            },
            "required": [
                "nodes"
            ]
        }
    },
    "additionalProperties": false,
    "required": [
        "name",
        "topology"
    ]
}