{"$schema":"http://json-schema.org/draft-07/schema#","$ref":"#/definitions/Schema","definitions":{"Schema":{"type":"object","properties":{"$schema":{"type":"string","default":"https://turborepo.org/schema.json"},"globalDependencies":{"type":"array","items":{"type":"string"},"description":"A list of globs for implicit global hash dependencies.\n\nThe contents of these files will be included in the global hashing algorithm and affect the hashes of all tasks.\n\nThis is useful for busting the cache based on .env files (not in Git), or any root level file that impacts package tasks (but are not represented in the traditional dependency graph\n\n(e.g. a root tsconfig.json, jest.config.js, .eslintrc, etc.)).","default":[]},"globalEnv":{"type":"array","items":{"type":"string"},"description":"A list of environment variables, prefixed with $ (e.g. $GITHUB_TOKEN), for implicit global hash dependencies.","default":[]},"pipeline":{"type":"object","additionalProperties":{"$ref":"#/definitions/Pipeline","description":"The name of a task that can be executed by turbo run. If turbo finds a workspace package with a package.json scripts object with a matching key, it will apply the pipeline task configuration to that npm script during execution. This allows you to use pipeline to set conventions across your entire Turborepo."},"description":"An object representing the task dependency graph of your project. turbo interprets these conventions to properly schedule, execute, and cache the outputs of tasks in your project.","default":{}},"remoteCache":{"$ref":"#/definitions/RemoteCache","description":"Configuration options that control how turbo interfaces with the remote Cache.","default":{}}},"required":["pipeline"],"additionalProperties":false},"Pipeline":{"type":"object","properties":{"dependsOn":{"type":"array","items":{"type":"string"},"description":"The list of tasks and environment variables that this task depends on.\n\nPrefixing an item in dependsOn with a ^ tells turbo that this pipeline task depends on the package's topological dependencies completing the task with the ^ prefix first (e.g. \"a package's build tasks should only run once all of its dependencies and devDependencies have completed their own build commands\").\n\nItems in dependsOn without ^ prefix, express the relationships between tasks at the package level (e.g. \"a package's test and lint commands depend on build being completed first\").","default":[]},"env":{"type":"array","items":{"type":"string"},"description":"A list of environment variables, **not** prefixed with $ (e.g. $GITHUB_TOKEN), that this task depends on.","default":[]},"outputs":{"type":"array","items":{"type":"string"},"description":"The set of glob patterns of a task's cacheable filesystem outputs.\n\nNote: turbo automatically logs stderr/stdout to .turbo/run-<task>.log. This file is always treated as a cacheable artifact and never needs to be specified.\n\nPassing an empty array can be used to tell turbo that a task is a side-effect and thus doesn't emit any filesystem artifacts (e.g. like a linter), but you still want to cache its logs (and treat them like an artifact).","default":["dist/**","build/**"]},"cache":{"type":"boolean","description":"Whether or not to cache the task outputs. Setting cache to false is useful for daemon or long-running \"watch\" or development mode tasks that you don't want to cache.","default":true},"inputs":{"type":"array","items":{"type":"string"},"description":"The set of glob patterns to consider as inputs to this task.\n\nChanges to files covered by these globs will cause a cache miss and force the task to rerun. Changes to files in the package not covered by these globs will not cause a cache miss.\n\nIf omitted or empty, all files in the package are considered as inputs.","default":[]},"outputMode":{"type":"string","description":"The style of output for this task. Use \"full\" to display the entire output of the task. Use \"hash-only\" to show only the computed task hashes. Use \"new-only\" to show the full output of cache misses and the computed hashes for cache hits. Use \"none\" to hide task output.","default":"full"}},"additionalProperties":false},"RemoteCache":{"type":"object","properties":{"signature":{"type":"boolean","description":"Indicates if signature verification is enabled for requests to the remote cache. When `true`, Turborepo will sign every uploaded artifact using the value of the environment variable `TURBO_REMOTE_CACHE_SIGNATURE_KEY`. Turborepo will reject any downloaded artifacts that have an invalid signature or are missing a signature.","default":false}},"additionalProperties":false}}}